/*
 * This file was automatically generated by EvoSuite
 * Fri Jan 26 00:33:54 GMT 2024
 */

package ch.rasc.extclassgenerator;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import ch.rasc.extclassgenerator.ModelAnnotationProcessor;
import java.util.HashMap;
import java.util.LinkedHashSet;
import java.util.Map;
import java.util.Set;
import java.util.Spliterator;
import javax.annotation.processing.Messager;
import javax.annotation.processing.ProcessingEnvironment;
import javax.annotation.processing.RoundEnvironment;
import javax.lang.model.element.Name;
import javax.lang.model.element.TypeElement;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, resetStaticState = true) 
public class ModelAnnotationProcessor_ESTest extends ModelAnnotationProcessor_ESTest_scaffolding {

  @Test(timeout = 4000000)
  public void test00()  throws Throwable  {
      ModelAnnotationProcessor modelAnnotationProcessor0 = new ModelAnnotationProcessor();
      assertNotNull(modelAnnotationProcessor0);
      
      Messager messager0 = mock(Messager.class, new ViolatedAssumptionAnswer());
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      assertNotNull(hashMap0);
      
      String string0 = hashMap0.put("lineEnding", "extend");
      assertNull(string0);
      
      Messager messager1 = mock(Messager.class, new ViolatedAssumptionAnswer());
      ProcessingEnvironment processingEnvironment0 = mock(ProcessingEnvironment.class, new ViolatedAssumptionAnswer());
      doReturn(messager0, messager1).when(processingEnvironment0).getMessager();
      doReturn(hashMap0, hashMap0, hashMap0, hashMap0, hashMap0).when(processingEnvironment0).getOptions();
      modelAnnotationProcessor0.init(processingEnvironment0);
      LinkedHashSet<TypeElement> linkedHashSet0 = new LinkedHashSet<TypeElement>();
      assertNotNull(linkedHashSet0);
      
      Name name0 = mock(Name.class, new ViolatedAssumptionAnswer());
      TypeElement typeElement0 = mock(TypeElement.class, new ViolatedAssumptionAnswer());
      doReturn(name0).when(typeElement0).getQualifiedName();
      boolean boolean0 = linkedHashSet0.add(typeElement0);
      assertTrue(boolean0);
      assertTrue(linkedHashSet0.contains(typeElement0));
      
      RoundEnvironment roundEnvironment0 = mock(RoundEnvironment.class, new ViolatedAssumptionAnswer());
      doReturn(linkedHashSet0).when(roundEnvironment0).getElementsAnnotatedWith(any(javax.lang.model.element.TypeElement.class));
      doReturn(linkedHashSet0, linkedHashSet0).when(roundEnvironment0).getRootElements();
      doReturn(false).when(roundEnvironment0).processingOver();
      boolean boolean1 = modelAnnotationProcessor0.process(linkedHashSet0, roundEnvironment0);
      assertFalse(boolean1);
      assertTrue(linkedHashSet0.contains(typeElement0));
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000000)
  public void test01()  throws Throwable  {
      ModelAnnotationProcessor modelAnnotationProcessor0 = new ModelAnnotationProcessor();
      assertNotNull(modelAnnotationProcessor0);
      
      LinkedHashSet<TypeElement> linkedHashSet0 = new LinkedHashSet<TypeElement>();
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertNotNull(linkedHashSet0);
      
      Messager messager0 = mock(Messager.class, new ViolatedAssumptionAnswer());
      ProcessingEnvironment processingEnvironment0 = mock(ProcessingEnvironment.class, new ViolatedAssumptionAnswer());
      doReturn(messager0, (Messager) null).when(processingEnvironment0).getMessager();
      modelAnnotationProcessor0.init(processingEnvironment0);
      Set<String> set0 = modelAnnotationProcessor0.getSupportedOptions();
      assertEquals(3, set0.size());
      assertFalse(set0.isEmpty());
      assertNotNull(set0);
      
      RoundEnvironment roundEnvironment0 = mock(RoundEnvironment.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(roundEnvironment0).processingOver();
      boolean boolean0 = modelAnnotationProcessor0.process(linkedHashSet0, roundEnvironment0);
      assertFalse(boolean0);
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      
      RoundEnvironment roundEnvironment1 = mock(RoundEnvironment.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        modelAnnotationProcessor0.process(linkedHashSet0, roundEnvironment1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("ch.rasc.extclassgenerator.ModelAnnotationProcessor", e);
      }
  }

  @Test(timeout = 4000000)
  public void test02()  throws Throwable  {
      ModelAnnotationProcessor modelAnnotationProcessor0 = new ModelAnnotationProcessor();
      assertNotNull(modelAnnotationProcessor0);
      
      Set<String> set0 = modelAnnotationProcessor0.getSupportedAnnotationTypes();
      assertFalse(set0.isEmpty());
      assertEquals(1, set0.size());
      assertNotNull(set0);
      
      Messager messager0 = mock(Messager.class, new ViolatedAssumptionAnswer());
      Messager messager1 = mock(Messager.class, new ViolatedAssumptionAnswer());
      ProcessingEnvironment processingEnvironment0 = mock(ProcessingEnvironment.class, new ViolatedAssumptionAnswer());
      doReturn(messager0, messager1).when(processingEnvironment0).getMessager();
      doReturn((Map) null).when(processingEnvironment0).getOptions();
      modelAnnotationProcessor0.init(processingEnvironment0);
      LinkedHashSet<TypeElement> linkedHashSet0 = new LinkedHashSet<TypeElement>();
      assertNotNull(linkedHashSet0);
      
      Spliterator<TypeElement> spliterator0 = linkedHashSet0.spliterator();
      assertNotNull(spliterator0);
      
      TypeElement typeElement0 = mock(TypeElement.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = linkedHashSet0.add(typeElement0);
      assertTrue(boolean0);
      assertTrue(linkedHashSet0.contains(typeElement0));
      
      RoundEnvironment roundEnvironment0 = mock(RoundEnvironment.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(roundEnvironment0).processingOver();
      boolean boolean1 = modelAnnotationProcessor0.process(linkedHashSet0, roundEnvironment0);
      assertFalse(boolean1);
      assertTrue(linkedHashSet0.contains(typeElement0));
      assertFalse(boolean1 == boolean0);
      
      RoundEnvironment roundEnvironment1 = mock(RoundEnvironment.class, new ViolatedAssumptionAnswer());
      doReturn(linkedHashSet0, linkedHashSet0).when(roundEnvironment1).getRootElements();
      doReturn(false).when(roundEnvironment1).processingOver();
      // Undeclared exception!
      try { 
        modelAnnotationProcessor0.process(linkedHashSet0, roundEnvironment1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("ch.rasc.extclassgenerator.ModelAnnotationProcessor", e);
      }
  }

  @Test(timeout = 4000000)
  public void test03()  throws Throwable  {
      ModelAnnotationProcessor modelAnnotationProcessor0 = new ModelAnnotationProcessor();
      assertNotNull(modelAnnotationProcessor0);
      
      Messager messager0 = mock(Messager.class, new ViolatedAssumptionAnswer());
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      assertNotNull(hashMap0);
      
      String string0 = hashMap0.put("includeValidation", "kZ2pI");
      assertNull(string0);
      
      ProcessingEnvironment processingEnvironment0 = mock(ProcessingEnvironment.class, new ViolatedAssumptionAnswer());
      doReturn(messager0).when(processingEnvironment0).getMessager();
      doReturn(hashMap0, hashMap0, hashMap0, hashMap0, hashMap0).when(processingEnvironment0).getOptions();
      modelAnnotationProcessor0.init(processingEnvironment0);
      LinkedHashSet<TypeElement> linkedHashSet0 = new LinkedHashSet<TypeElement>();
      assertNotNull(linkedHashSet0);
      
      TypeElement typeElement0 = mock(TypeElement.class, new ViolatedAssumptionAnswer());
      doReturn((Name) null).when(typeElement0).getQualifiedName();
      boolean boolean0 = linkedHashSet0.add(typeElement0);
      assertTrue(boolean0);
      assertTrue(linkedHashSet0.contains(typeElement0));
      
      boolean boolean1 = linkedHashSet0.add((TypeElement) null);
      assertTrue(boolean1);
      assertTrue(linkedHashSet0.contains(typeElement0));
      assertTrue(boolean1 == boolean0);
      
      RoundEnvironment roundEnvironment0 = mock(RoundEnvironment.class, new ViolatedAssumptionAnswer());
      doReturn(linkedHashSet0).when(roundEnvironment0).getElementsAnnotatedWith(any(javax.lang.model.element.TypeElement.class));
      doReturn(linkedHashSet0, linkedHashSet0).when(roundEnvironment0).getRootElements();
      doReturn(false).when(roundEnvironment0).processingOver();
      // Undeclared exception!
      try { 
        modelAnnotationProcessor0.process(linkedHashSet0, roundEnvironment0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000000)
  public void test04()  throws Throwable  {
      ModelAnnotationProcessor modelAnnotationProcessor0 = new ModelAnnotationProcessor();
      assertNotNull(modelAnnotationProcessor0);
      
      LinkedHashSet<TypeElement> linkedHashSet0 = new LinkedHashSet<TypeElement>();
      assertNotNull(linkedHashSet0);
      
      Messager messager0 = mock(Messager.class, new ViolatedAssumptionAnswer());
      Messager messager1 = mock(Messager.class, new ViolatedAssumptionAnswer());
      ProcessingEnvironment processingEnvironment0 = mock(ProcessingEnvironment.class, new ViolatedAssumptionAnswer());
      doReturn(messager0, messager1, messager1).when(processingEnvironment0).getMessager();
      modelAnnotationProcessor0.init(processingEnvironment0);
      Set<String> set0 = modelAnnotationProcessor0.getSupportedOptions();
      assertEquals(3, set0.size());
      assertFalse(set0.isEmpty());
      assertNotNull(set0);
      
      RoundEnvironment roundEnvironment0 = mock(RoundEnvironment.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(roundEnvironment0).processingOver();
      boolean boolean0 = modelAnnotationProcessor0.process(linkedHashSet0, roundEnvironment0);
      assertFalse(boolean0);
      
      RoundEnvironment roundEnvironment1 = mock(RoundEnvironment.class, new ViolatedAssumptionAnswer());
      doReturn((Set<TypeElement>) null).when(roundEnvironment1).getRootElements();
      doReturn(false).when(roundEnvironment1).processingOver();
      TypeElement typeElement0 = mock(TypeElement.class, new ViolatedAssumptionAnswer());
      boolean boolean1 = linkedHashSet0.add(typeElement0);
      assertTrue(boolean1);
      assertTrue(linkedHashSet0.contains(typeElement0));
      assertFalse(boolean1 == boolean0);
      
      boolean boolean2 = modelAnnotationProcessor0.process(linkedHashSet0, roundEnvironment1);
      assertFalse(boolean2);
      assertTrue(linkedHashSet0.contains(typeElement0));
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
  }

  @Test(timeout = 4000000)
  public void test05()  throws Throwable  {
      ModelAnnotationProcessor modelAnnotationProcessor0 = new ModelAnnotationProcessor();
      assertNotNull(modelAnnotationProcessor0);
      
      Set<String> set0 = modelAnnotationProcessor0.getSupportedAnnotationTypes();
      assertFalse(set0.isEmpty());
      assertEquals(1, set0.size());
      assertNotNull(set0);
      
      Messager messager0 = mock(Messager.class, new ViolatedAssumptionAnswer());
      ProcessingEnvironment processingEnvironment0 = mock(ProcessingEnvironment.class, new ViolatedAssumptionAnswer());
      doReturn(messager0, (Messager) null).when(processingEnvironment0).getMessager();
      modelAnnotationProcessor0.init(processingEnvironment0);
      LinkedHashSet<TypeElement> linkedHashSet0 = new LinkedHashSet<TypeElement>();
      assertNotNull(linkedHashSet0);
      
      Spliterator<TypeElement> spliterator0 = linkedHashSet0.spliterator();
      assertNotNull(spliterator0);
      
      TypeElement typeElement0 = mock(TypeElement.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = linkedHashSet0.add(typeElement0);
      assertTrue(boolean0);
      assertTrue(linkedHashSet0.contains(typeElement0));
      
      RoundEnvironment roundEnvironment0 = mock(RoundEnvironment.class, new ViolatedAssumptionAnswer());
      doReturn((Set) null).when(roundEnvironment0).getRootElements();
      doReturn(false).when(roundEnvironment0).processingOver();
      // Undeclared exception!
      try { 
        modelAnnotationProcessor0.process(linkedHashSet0, roundEnvironment0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("ch.rasc.extclassgenerator.ModelAnnotationProcessor", e);
      }
  }

  @Test(timeout = 4000000)
  public void test06()  throws Throwable  {
      ModelAnnotationProcessor modelAnnotationProcessor0 = new ModelAnnotationProcessor();
      assertNotNull(modelAnnotationProcessor0);
      
      RoundEnvironment roundEnvironment0 = mock(RoundEnvironment.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(roundEnvironment0).processingOver();
      Messager messager0 = mock(Messager.class, new ViolatedAssumptionAnswer());
      ProcessingEnvironment processingEnvironment0 = mock(ProcessingEnvironment.class, new ViolatedAssumptionAnswer());
      doReturn(messager0).when(processingEnvironment0).getMessager();
      modelAnnotationProcessor0.init(processingEnvironment0);
      boolean boolean0 = modelAnnotationProcessor0.process((Set<? extends TypeElement>) null, roundEnvironment0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000000)
  public void test07()  throws Throwable  {
      ModelAnnotationProcessor modelAnnotationProcessor0 = new ModelAnnotationProcessor();
      assertNotNull(modelAnnotationProcessor0);
      
      Set<TypeElement> set0 = null;
      RoundEnvironment roundEnvironment0 = mock(RoundEnvironment.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        modelAnnotationProcessor0.process((Set<? extends TypeElement>) null, roundEnvironment0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("ch.rasc.extclassgenerator.ModelAnnotationProcessor", e);
      }
  }

  @Test(timeout = 4000000)
  public void test08()  throws Throwable  {
      ModelAnnotationProcessor modelAnnotationProcessor0 = new ModelAnnotationProcessor();
      assertNotNull(modelAnnotationProcessor0);
      
      Messager messager0 = mock(Messager.class, new ViolatedAssumptionAnswer());
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      assertNotNull(hashMap0);
      
      String string0 = hashMap0.put("outputFormat", "outputFormat");
      assertNull(string0);
      
      ProcessingEnvironment processingEnvironment0 = mock(ProcessingEnvironment.class, new ViolatedAssumptionAnswer());
      doReturn(messager0).when(processingEnvironment0).getMessager();
      doReturn(hashMap0, hashMap0, hashMap0, hashMap0, hashMap0).when(processingEnvironment0).getOptions();
      modelAnnotationProcessor0.init(processingEnvironment0);
      LinkedHashSet<TypeElement> linkedHashSet0 = new LinkedHashSet<TypeElement>();
      assertNotNull(linkedHashSet0);
      
      TypeElement typeElement0 = mock(TypeElement.class, new ViolatedAssumptionAnswer());
      doReturn((Name) null).when(typeElement0).getQualifiedName();
      boolean boolean0 = linkedHashSet0.add(typeElement0);
      assertTrue(boolean0);
      assertTrue(linkedHashSet0.contains(typeElement0));
      
      RoundEnvironment roundEnvironment0 = mock(RoundEnvironment.class, new ViolatedAssumptionAnswer());
      doReturn(linkedHashSet0).when(roundEnvironment0).getElementsAnnotatedWith(any(javax.lang.model.element.TypeElement.class));
      doReturn(linkedHashSet0, linkedHashSet0).when(roundEnvironment0).getRootElements();
      doReturn(false).when(roundEnvironment0).processingOver();
      // Undeclared exception!
      try { 
        modelAnnotationProcessor0.process(linkedHashSet0, roundEnvironment0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000000)
  public void test09()  throws Throwable  {
      ModelAnnotationProcessor modelAnnotationProcessor0 = new ModelAnnotationProcessor();
      assertNotNull(modelAnnotationProcessor0);
      
      Set<String> set0 = modelAnnotationProcessor0.getSupportedAnnotationTypes();
      assertEquals(1, set0.size());
      assertFalse(set0.isEmpty());
      assertNotNull(set0);
      
      ProcessingEnvironment processingEnvironment0 = mock(ProcessingEnvironment.class, new ViolatedAssumptionAnswer());
      doReturn((Messager) null).when(processingEnvironment0).getMessager();
      modelAnnotationProcessor0.init(processingEnvironment0);
      LinkedHashSet<TypeElement> linkedHashSet0 = new LinkedHashSet<TypeElement>();
      assertNotNull(linkedHashSet0);
      
      Spliterator<TypeElement> spliterator0 = linkedHashSet0.spliterator();
      assertNotNull(spliterator0);
      
      TypeElement typeElement0 = mock(TypeElement.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = linkedHashSet0.add(typeElement0);
      assertTrue(boolean0);
      assertTrue(linkedHashSet0.contains(typeElement0));
      
      RoundEnvironment roundEnvironment0 = mock(RoundEnvironment.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        modelAnnotationProcessor0.process(linkedHashSet0, roundEnvironment0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("ch.rasc.extclassgenerator.ModelAnnotationProcessor", e);
      }
  }

  @Test(timeout = 4000000)
  public void test10()  throws Throwable  {
      ModelAnnotationProcessor modelAnnotationProcessor0 = new ModelAnnotationProcessor();
      assertNotNull(modelAnnotationProcessor0);
      
      Messager messager0 = mock(Messager.class, new ViolatedAssumptionAnswer());
      Messager messager1 = mock(Messager.class, new ViolatedAssumptionAnswer());
      ProcessingEnvironment processingEnvironment0 = mock(ProcessingEnvironment.class, new ViolatedAssumptionAnswer());
      doReturn(messager0).when(processingEnvironment0).getMessager();
      doReturn((Map) null).when(processingEnvironment0).getOptions();
      modelAnnotationProcessor0.init(processingEnvironment0);
      LinkedHashSet<TypeElement> linkedHashSet0 = new LinkedHashSet<TypeElement>();
      assertNotNull(linkedHashSet0);
      
      TypeElement typeElement0 = mock(TypeElement.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = linkedHashSet0.add(typeElement0);
      assertTrue(boolean0);
      assertTrue(linkedHashSet0.contains(typeElement0));
      
      RoundEnvironment roundEnvironment0 = mock(RoundEnvironment.class, new ViolatedAssumptionAnswer());
      doReturn(linkedHashSet0, linkedHashSet0).when(roundEnvironment0).getRootElements();
      doReturn(false).when(roundEnvironment0).processingOver();
      // Undeclared exception!
      try { 
        modelAnnotationProcessor0.process(linkedHashSet0, roundEnvironment0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("ch.rasc.extclassgenerator.ModelAnnotationProcessor", e);
      }
  }

  @Test(timeout = 4000000)
  public void test11()  throws Throwable  {
      ModelAnnotationProcessor modelAnnotationProcessor0 = new ModelAnnotationProcessor();
      assertNotNull(modelAnnotationProcessor0);
      
      Messager messager0 = mock(Messager.class, new ViolatedAssumptionAnswer());
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      assertNotNull(hashMap0);
      
      String string0 = hashMap0.put("includeValidation", "includeValidation");
      assertNull(string0);
      
      ProcessingEnvironment processingEnvironment0 = mock(ProcessingEnvironment.class, new ViolatedAssumptionAnswer());
      doReturn(messager0).when(processingEnvironment0).getMessager();
      doReturn(hashMap0, hashMap0, hashMap0, hashMap0, hashMap0).when(processingEnvironment0).getOptions();
      modelAnnotationProcessor0.init(processingEnvironment0);
      LinkedHashSet<TypeElement> linkedHashSet0 = new LinkedHashSet<TypeElement>();
      assertNotNull(linkedHashSet0);
      
      boolean boolean0 = linkedHashSet0.add((TypeElement) null);
      assertTrue(boolean0);
      
      RoundEnvironment roundEnvironment0 = mock(RoundEnvironment.class, new ViolatedAssumptionAnswer());
      doReturn(linkedHashSet0).when(roundEnvironment0).getElementsAnnotatedWith(any(javax.lang.model.element.TypeElement.class));
      doReturn(linkedHashSet0, linkedHashSet0).when(roundEnvironment0).getRootElements();
      doReturn(false).when(roundEnvironment0).processingOver();
      // Undeclared exception!
      try { 
        modelAnnotationProcessor0.process(linkedHashSet0, roundEnvironment0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("ch.rasc.extclassgenerator.ModelAnnotationProcessor", e);
      }
  }

  @Test(timeout = 4000000)
  public void test12()  throws Throwable  {
      ModelAnnotationProcessor modelAnnotationProcessor0 = new ModelAnnotationProcessor();
      assertNotNull(modelAnnotationProcessor0);
      
      Messager messager0 = mock(Messager.class, new ViolatedAssumptionAnswer());
      ProcessingEnvironment processingEnvironment0 = mock(ProcessingEnvironment.class, new ViolatedAssumptionAnswer());
      doReturn(messager0).when(processingEnvironment0).getMessager();
      modelAnnotationProcessor0.init(processingEnvironment0);
      LinkedHashSet<TypeElement> linkedHashSet0 = new LinkedHashSet<TypeElement>();
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertNotNull(linkedHashSet0);
      
      RoundEnvironment roundEnvironment0 = mock(RoundEnvironment.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(roundEnvironment0).processingOver();
      boolean boolean0 = modelAnnotationProcessor0.process(linkedHashSet0, roundEnvironment0);
      assertFalse(boolean0);
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
  }

  @Test(timeout = 4000000)
  public void test13()  throws Throwable  {
      ModelAnnotationProcessor modelAnnotationProcessor0 = new ModelAnnotationProcessor();
      assertNotNull(modelAnnotationProcessor0);
      
      Messager messager0 = mock(Messager.class, new ViolatedAssumptionAnswer());
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      assertNotNull(hashMap0);
      
      String string0 = hashMap0.put("lineEnding", "lineEnding");
      assertNull(string0);
      
      Messager messager1 = mock(Messager.class, new ViolatedAssumptionAnswer());
      ProcessingEnvironment processingEnvironment0 = mock(ProcessingEnvironment.class, new ViolatedAssumptionAnswer());
      doReturn(messager0, messager1).when(processingEnvironment0).getMessager();
      doReturn(hashMap0, hashMap0, hashMap0, hashMap0, hashMap0).when(processingEnvironment0).getOptions();
      modelAnnotationProcessor0.init(processingEnvironment0);
      LinkedHashSet<TypeElement> linkedHashSet0 = new LinkedHashSet<TypeElement>();
      assertNotNull(linkedHashSet0);
      
      Name name0 = mock(Name.class, new ViolatedAssumptionAnswer());
      TypeElement typeElement0 = mock(TypeElement.class, new ViolatedAssumptionAnswer());
      doReturn(name0).when(typeElement0).getQualifiedName();
      boolean boolean0 = linkedHashSet0.add(typeElement0);
      assertTrue(boolean0);
      assertTrue(linkedHashSet0.contains(typeElement0));
      
      RoundEnvironment roundEnvironment0 = mock(RoundEnvironment.class, new ViolatedAssumptionAnswer());
      doReturn(linkedHashSet0).when(roundEnvironment0).getElementsAnnotatedWith(any(javax.lang.model.element.TypeElement.class));
      doReturn(linkedHashSet0, linkedHashSet0).when(roundEnvironment0).getRootElements();
      doReturn(false).when(roundEnvironment0).processingOver();
      boolean boolean1 = modelAnnotationProcessor0.process(linkedHashSet0, roundEnvironment0);
      assertFalse(boolean1);
      assertTrue(linkedHashSet0.contains(typeElement0));
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000000)
  public void test14()  throws Throwable  {
      ModelAnnotationProcessor modelAnnotationProcessor0 = new ModelAnnotationProcessor();
      assertNotNull(modelAnnotationProcessor0);
      
      Messager messager0 = mock(Messager.class, new ViolatedAssumptionAnswer());
      ProcessingEnvironment processingEnvironment0 = mock(ProcessingEnvironment.class, new ViolatedAssumptionAnswer());
      doReturn(messager0, (Messager) null).when(processingEnvironment0).getMessager();
      modelAnnotationProcessor0.init(processingEnvironment0);
      LinkedHashSet<TypeElement> linkedHashSet0 = new LinkedHashSet<TypeElement>();
      assertNotNull(linkedHashSet0);
      
      TypeElement typeElement0 = mock(TypeElement.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = linkedHashSet0.add(typeElement0);
      assertTrue(boolean0);
      assertTrue(linkedHashSet0.contains(typeElement0));
      
      RoundEnvironment roundEnvironment0 = mock(RoundEnvironment.class, new ViolatedAssumptionAnswer());
      doReturn((Set) null).when(roundEnvironment0).getRootElements();
      doReturn(false).when(roundEnvironment0).processingOver();
      // Undeclared exception!
      try { 
        modelAnnotationProcessor0.process(linkedHashSet0, roundEnvironment0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("ch.rasc.extclassgenerator.ModelAnnotationProcessor", e);
      }
  }

  @Test(timeout = 4000000)
  public void test15()  throws Throwable  {
      ModelAnnotationProcessor modelAnnotationProcessor0 = new ModelAnnotationProcessor();
      assertNotNull(modelAnnotationProcessor0);
      
      LinkedHashSet<TypeElement> linkedHashSet0 = new LinkedHashSet<TypeElement>();
      assertNotNull(linkedHashSet0);
      
      Messager messager0 = mock(Messager.class, new ViolatedAssumptionAnswer());
      Messager messager1 = mock(Messager.class, new ViolatedAssumptionAnswer());
      ProcessingEnvironment processingEnvironment0 = mock(ProcessingEnvironment.class, new ViolatedAssumptionAnswer());
      doReturn(messager0, messager1, messager1, messager1, messager1).when(processingEnvironment0).getMessager();
      modelAnnotationProcessor0.init(processingEnvironment0);
      Set<String> set0 = modelAnnotationProcessor0.getSupportedOptions();
      assertFalse(set0.isEmpty());
      assertEquals(3, set0.size());
      assertNotNull(set0);
      
      RoundEnvironment roundEnvironment0 = mock(RoundEnvironment.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(roundEnvironment0).processingOver();
      boolean boolean0 = modelAnnotationProcessor0.process(linkedHashSet0, roundEnvironment0);
      assertFalse(boolean0);
      
      RoundEnvironment roundEnvironment1 = mock(RoundEnvironment.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(roundEnvironment1).processingOver();
      boolean boolean1 = modelAnnotationProcessor0.process(linkedHashSet0, roundEnvironment1);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      RoundEnvironment roundEnvironment2 = mock(RoundEnvironment.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(roundEnvironment2).processingOver();
      boolean boolean2 = modelAnnotationProcessor0.process(linkedHashSet0, roundEnvironment2);
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      
      RoundEnvironment roundEnvironment3 = mock(RoundEnvironment.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(roundEnvironment3).processingOver();
      boolean boolean3 = modelAnnotationProcessor0.process(linkedHashSet0, roundEnvironment3);
      assertFalse(boolean3);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      
      RoundEnvironment roundEnvironment4 = mock(RoundEnvironment.class, new ViolatedAssumptionAnswer());
      doReturn((Set<TypeElement>) null).when(roundEnvironment4).getRootElements();
      doReturn(false).when(roundEnvironment4).processingOver();
      TypeElement typeElement0 = mock(TypeElement.class, new ViolatedAssumptionAnswer());
      boolean boolean4 = linkedHashSet0.add(typeElement0);
      assertTrue(boolean4);
      assertTrue(linkedHashSet0.contains(typeElement0));
      assertFalse(boolean4 == boolean0);
      assertFalse(boolean4 == boolean1);
      assertFalse(boolean4 == boolean2);
      assertFalse(boolean4 == boolean3);
      
      boolean boolean5 = modelAnnotationProcessor0.process(linkedHashSet0, roundEnvironment4);
      assertFalse(boolean5);
      assertTrue(linkedHashSet0.contains(typeElement0));
      assertTrue(boolean5 == boolean0);
      assertTrue(boolean5 == boolean2);
      assertFalse(boolean5 == boolean4);
      assertTrue(boolean5 == boolean1);
      assertTrue(boolean5 == boolean3);
  }

  @Test(timeout = 4000000)
  public void test16()  throws Throwable  {
      ModelAnnotationProcessor modelAnnotationProcessor0 = new ModelAnnotationProcessor();
      assertNotNull(modelAnnotationProcessor0);
      
      Messager messager0 = mock(Messager.class, new ViolatedAssumptionAnswer());
      Messager messager1 = mock(Messager.class, new ViolatedAssumptionAnswer());
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      assertNotNull(hashMap0);
      
      String string0 = hashMap0.put("debug", "debug");
      assertNull(string0);
      
      String string1 = hashMap0.put((String) null, (String) null);
      assertNull(string1);
      
      Messager messager2 = mock(Messager.class, new ViolatedAssumptionAnswer());
      String string2 = hashMap0.put("outputFormat", "outputFormat");
      assertNull(string2);
      
      String string3 = hashMap0.put("(lw=", (String) null);
      assertNull(string3);
      
      ProcessingEnvironment processingEnvironment0 = mock(ProcessingEnvironment.class, new ViolatedAssumptionAnswer());
      doReturn(messager0, messager1).when(processingEnvironment0).getMessager();
      doReturn(hashMap0, hashMap0, hashMap0, hashMap0, hashMap0).when(processingEnvironment0).getOptions();
      modelAnnotationProcessor0.init(processingEnvironment0);
      LinkedHashSet<TypeElement> linkedHashSet0 = new LinkedHashSet<TypeElement>();
      assertNotNull(linkedHashSet0);
      
      Name name0 = mock(Name.class, new ViolatedAssumptionAnswer());
      TypeElement typeElement0 = mock(TypeElement.class, new ViolatedAssumptionAnswer());
      doReturn(name0).when(typeElement0).getQualifiedName();
      boolean boolean0 = linkedHashSet0.add(typeElement0);
      assertTrue(boolean0);
      assertTrue(linkedHashSet0.contains(typeElement0));
      
      boolean boolean1 = false;
      RoundEnvironment roundEnvironment0 = mock(RoundEnvironment.class, new ViolatedAssumptionAnswer());
      doReturn(linkedHashSet0).when(roundEnvironment0).getElementsAnnotatedWith(any(javax.lang.model.element.TypeElement.class));
      doReturn(linkedHashSet0, linkedHashSet0).when(roundEnvironment0).getRootElements();
      doReturn(false).when(roundEnvironment0).processingOver();
      boolean boolean2 = modelAnnotationProcessor0.process(linkedHashSet0, roundEnvironment0);
      assertFalse(boolean2);
      assertTrue(linkedHashSet0.contains(typeElement0));
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      
      TypeElement typeElement1 = mock(TypeElement.class, new ViolatedAssumptionAnswer());
      boolean boolean3 = linkedHashSet0.add(typeElement1);
      assertTrue(boolean3);
      assertTrue(linkedHashSet0.contains(typeElement0));
      assertFalse(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3 == boolean1);
      
      ProcessingEnvironment processingEnvironment1 = mock(ProcessingEnvironment.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        modelAnnotationProcessor0.init(processingEnvironment1);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Cannot call init more than once.
         //
         verifyException("javax.annotation.processing.AbstractProcessor", e);
      }
  }

  @Test(timeout = 4000000)
  public void test17()  throws Throwable  {
      ModelAnnotationProcessor modelAnnotationProcessor0 = new ModelAnnotationProcessor();
      assertNotNull(modelAnnotationProcessor0);
      
      Messager messager0 = mock(Messager.class, new ViolatedAssumptionAnswer());
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      ProcessingEnvironment processingEnvironment0 = mock(ProcessingEnvironment.class, new ViolatedAssumptionAnswer());
      doReturn(messager0).when(processingEnvironment0).getMessager();
      doReturn(hashMap0, hashMap0, hashMap0, hashMap0, hashMap0).when(processingEnvironment0).getOptions();
      modelAnnotationProcessor0.init(processingEnvironment0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      LinkedHashSet<TypeElement> linkedHashSet0 = new LinkedHashSet<TypeElement>();
      assertNotNull(linkedHashSet0);
      
      boolean boolean0 = linkedHashSet0.add((TypeElement) null);
      assertTrue(boolean0);
      
      RoundEnvironment roundEnvironment0 = mock(RoundEnvironment.class, new ViolatedAssumptionAnswer());
      doReturn(linkedHashSet0).when(roundEnvironment0).getElementsAnnotatedWith(any(javax.lang.model.element.TypeElement.class));
      doReturn(linkedHashSet0, linkedHashSet0).when(roundEnvironment0).getRootElements();
      doReturn(false).when(roundEnvironment0).processingOver();
      // Undeclared exception!
      try { 
        modelAnnotationProcessor0.process(linkedHashSet0, roundEnvironment0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("ch.rasc.extclassgenerator.ModelAnnotationProcessor", e);
      }
  }

  @Test(timeout = 4000000)
  public void test18()  throws Throwable  {
      ModelAnnotationProcessor modelAnnotationProcessor0 = new ModelAnnotationProcessor();
      assertNotNull(modelAnnotationProcessor0);
      
      LinkedHashSet<TypeElement> linkedHashSet0 = new LinkedHashSet<TypeElement>();
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertNotNull(linkedHashSet0);
      
      // Undeclared exception!
      try { 
        modelAnnotationProcessor0.process(linkedHashSet0, (RoundEnvironment) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("ch.rasc.extclassgenerator.ModelAnnotationProcessor", e);
      }
  }
}
