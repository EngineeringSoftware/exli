/**
 * Scaffolding file used to store all the setups needed to run 
 * tests automatically generated by EvoSuite
 * Fri Jan 26 00:33:54 GMT 2024
 */

package ch.rasc.extclassgenerator;

import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
import org.junit.BeforeClass;
import org.junit.Before;
import org.junit.After;
import org.evosuite.runtime.sandbox.Sandbox;
import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;

import static org.evosuite.shaded.org.mockito.Mockito.*;
@EvoSuiteClassExclude
public class ModelAnnotationProcessor_ESTest_scaffolding {

  @org.junit.Rule
  public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();

  private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);


  @BeforeClass
  public static void initEvoSuiteFramework() { 
    org.evosuite.runtime.RuntimeSettings.className = "ch.rasc.extclassgenerator.ModelAnnotationProcessor"; 
    org.evosuite.runtime.GuiSupport.initialize(); 
    org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
    org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = -1; 
    org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
    org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.OFF; 
    org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
    org.evosuite.runtime.classhandling.JDKClassResetter.init();
    setSystemProperties();
    initializeClasses();
    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
    try { initMocksToAvoidTimeoutsInTheTests(); } catch(ClassNotFoundException e) {} 
  } 

  @Before
  public void initTestCase(){ 
    threadStopper.storeCurrentThreads();
    threadStopper.startRecordingTime();
    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
    org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
    org.evosuite.runtime.GuiSupport.setHeadless(); 
    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
    org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
  } 

  @After
  public void doneWithTestCase(){ 
    threadStopper.killAndJoinClientThreads();
    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
    org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
    resetClasses(); 
    org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
    org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
    org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
  } 

  public static void setSystemProperties() {
 
    /*No java.lang.System property to set*/
  }

  private static void initializeClasses() {
    org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(ModelAnnotationProcessor_ESTest_scaffolding.class.getClassLoader() ,
      "com.fasterxml.jackson.core.exc.StreamWriteException",
      "ch.rasc.extclassgenerator.OutputFormat",
      "ch.rasc.extclassgenerator.LineEnding",
      "com.fasterxml.jackson.core.JsonGenerationException",
      "com.fasterxml.jackson.core.JsonProcessingException",
      "com.fasterxml.jackson.databind.JsonMappingException",
      "ch.rasc.extclassgenerator.IncludeValidation",
      "ch.rasc.extclassgenerator.ModelAnnotationProcessor",
      "com.fasterxml.jackson.core.JacksonException",
      "com.fasterxml.jackson.databind.DatabindException",
      "ch.rasc.extclassgenerator.OutputConfig",
      "org.springframework.util.StringUtils"
    );
  } 
  private static void initMocksToAvoidTimeoutsInTheTests() throws ClassNotFoundException { 
    mock(Class.forName("javax.annotation.processing.Messager", false, ModelAnnotationProcessor_ESTest_scaffolding.class.getClassLoader()));
    mock(Class.forName("javax.annotation.processing.ProcessingEnvironment", false, ModelAnnotationProcessor_ESTest_scaffolding.class.getClassLoader()));
    mock(Class.forName("javax.annotation.processing.RoundEnvironment", false, ModelAnnotationProcessor_ESTest_scaffolding.class.getClassLoader()));
    mock(Class.forName("javax.lang.model.element.Name", false, ModelAnnotationProcessor_ESTest_scaffolding.class.getClassLoader()));
    mock(Class.forName("javax.lang.model.element.TypeElement", false, ModelAnnotationProcessor_ESTest_scaffolding.class.getClassLoader()));
  }

  private static void resetClasses() {
    org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(ModelAnnotationProcessor_ESTest_scaffolding.class.getClassLoader()); 

    org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
      "ch.rasc.extclassgenerator.ModelAnnotationProcessor",
      "com.fasterxml.jackson.annotation.JsonInclude$Include",
      "com.fasterxml.jackson.annotation.JsonAutoDetect$Visibility",
      "ch.rasc.extclassgenerator.OutputFormat",
      "ch.rasc.extclassgenerator.IncludeValidation",
      "ch.rasc.extclassgenerator.LineEnding",
      "ch.rasc.extclassgenerator.ModelGenerator",
      "org.springframework.util.ConcurrentReferenceHashMap$ReferenceType",
      "org.springframework.util.ConcurrentReferenceHashMap",
      "org.springframework.util.Assert",
      "org.springframework.util.ConcurrentReferenceHashMap$Segment",
      "org.springframework.util.ConcurrentReferenceHashMap$ReferenceManager",
      "org.springframework.util.ReflectionUtils",
      "ch.rasc.extclassgenerator.ModelType",
      "ch.rasc.extclassgenerator.ModelAssociationType",
      "org.springframework.core.annotation.RepeatableContainers",
      "org.springframework.core.annotation.RepeatableContainers$StandardRepeatableContainers",
      "org.springframework.core.annotation.MergedAnnotations$SearchStrategy",
      "org.springframework.core.annotation.PackagesAnnotationFilter",
      "org.springframework.util.StringUtils",
      "org.springframework.core.annotation.AnnotationFilter$1",
      "org.springframework.core.annotation.AnnotationFilter$2",
      "org.springframework.core.annotation.AnnotationFilter",
      "org.springframework.core.annotation.RepeatableContainers$NoRepeatableContainers",
      "org.springframework.core.annotation.AnnotationsScanner",
      "org.springframework.core.annotation.AttributeMethods",
      "org.springframework.core.annotation.TypeMappedAnnotations",
      "ch.rasc.extclassgenerator.ModelValidationType",
      "ch.rasc.extclassgenerator.validation.AbstractValidation$1",
      "org.springframework.core.annotation.IntrospectionFailureLogger",
      "org.springframework.core.SpringProperties",
      "org.springframework.core.io.support.SpringFactoriesLoader",
      "org.springframework.core.io.support.PropertiesLoaderUtils",
      "org.springframework.util.ClassUtils",
      "org.springframework.core.OrderComparator",
      "org.springframework.core.annotation.AnnotationAwareOrderComparator",
      "org.springframework.util.ConcurrentReferenceHashMap$Restructure",
      "org.springframework.core.io.AbstractResource",
      "org.springframework.core.io.AbstractFileResolvingResource",
      "org.springframework.core.io.UrlResource",
      "org.springframework.util.ResourceUtils",
      "org.springframework.util.CollectionUtils",
      "org.springframework.util.ConcurrentReferenceHashMap$Task",
      "org.springframework.util.ConcurrentReferenceHashMap$1",
      "org.springframework.util.ConcurrentReferenceHashMap$TaskOption",
      "org.springframework.util.ConcurrentReferenceHashMap$Entry",
      "org.springframework.util.ConcurrentReferenceHashMap$SoftEntryReference",
      "org.springframework.beans.ExtendedBeanInfoFactory",
      "org.springframework.beans.CachedIntrospectionResults",
      "com.fasterxml.jackson.core.JsonGenerator$Feature",
      "org.springframework.web.bind.annotation.RequestMethod",
      "org.hibernate.validator.constraints.Mod11Check$ProcessingDirection",
      "org.assertj.core.internal.bytebuddy.build.HashCodeAndEqualsPlugin$Enhance$InvokeSuper",
      "nl.jqno.equalsverifier.internal.lib.bytebuddy.build.HashCodeAndEqualsPlugin$Enhance$InvokeSuper",
      "ch.rasc.extclassgenerator.ApiObject",
      "ch.rasc.extclassgenerator.OutputConfig"
    );
  }
}
