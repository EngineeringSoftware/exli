/*
 * This file was automatically generated by EvoSuite
 * Fri Jan 26 00:46:27 GMT 2024
 */

package ch.rasc.extclassgenerator;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import ch.rasc.extclassgenerator.IncludeValidation;
import ch.rasc.extclassgenerator.LineEnding;
import ch.rasc.extclassgenerator.ModelBean;
import ch.rasc.extclassgenerator.ModelFieldBean;
import ch.rasc.extclassgenerator.ModelGenerator;
import ch.rasc.extclassgenerator.ModelType;
import ch.rasc.extclassgenerator.OutputConfig;
import ch.rasc.extclassgenerator.OutputFormat;
import ch.rasc.extclassgenerator.PartialDataOptionsBean;
import ch.rasc.extclassgenerator.association.AbstractAssociation;
import ch.rasc.extclassgenerator.association.BelongsToAssociation;
import ch.rasc.extclassgenerator.validation.AbstractValidation;
import ch.rasc.extclassgenerator.validation.EmailValidation;
import com.github.javaparser.ast.CompilationUnit;
import com.github.javaparser.ast.Node;
import com.github.javaparser.ast.body.ConstructorDeclaration;
import com.github.javaparser.ast.expr.ClassExpr;
import com.github.javaparser.ast.expr.DoubleLiteralExpr;
import com.github.javaparser.ast.expr.TypeExpr;
import com.github.javaparser.ast.expr.UnaryExpr;
import com.github.javaparser.ast.modules.ModuleUsesDirective;
import com.github.javaparser.ast.stmt.AssertStmt;
import com.github.javaparser.ast.stmt.LabeledStmt;
import com.github.javaparser.ast.stmt.ReturnStmt;
import com.github.javaparser.ast.visitor.ObjectIdentityEqualsVisitor;
import com.github.javaparser.ast.visitor.Visitable;
import java.lang.annotation.Annotation;
import java.util.Enumeration;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import javax.servlet.DispatcherType;
import javax.servlet.ServletContext;
import javax.servlet.ServletOutputStream;
import javax.servlet.ServletRequest;
import javax.servlet.ServletRequestWrapper;
import javax.servlet.ServletResponse;
import javax.servlet.ServletResponseWrapper;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletRequestWrapper;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpServletResponseWrapper;
import javax.servlet.http.HttpUpgradeHandler;
import javax.servlet.http.Part;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, resetStaticState = true) 
public class ModelGenerator_ESTest extends ModelGenerator_ESTest_scaffolding {

  @Test(timeout = 4000000)
  public void test000()  throws Throwable  {
      Class<ModelFieldBean> class0 = ModelFieldBean.class;
      ModelBean modelBean0 = ModelGenerator.createModel(class0);
      assertFalse(modelBean0.isPaging());
      assertNull(modelBean0.getMessageProperty());
      assertFalse(modelBean0.isDisablePagingParameters());
      assertNull(modelBean0.getRootProperty());
      assertNull(modelBean0.getSuccessProperty());
      assertNull(modelBean0.getReadMethod());
      assertEquals("ch.rasc.extclassgenerator.ModelFieldBean", modelBean0.getName());
      assertEquals("json", modelBean0.getWriter());
      assertNull(modelBean0.getIdentifier());
      assertNull(modelBean0.getDestroyMethod());
      assertFalse(modelBean0.isClientIdPropertyAddToWriter());
      assertNull(modelBean0.getTotalProperty());
      assertNull(modelBean0.getCreateMethod());
      assertTrue(modelBean0.isAutodetectTypes());
      assertNull(modelBean0.getClientIdProperty());
      assertEquals("Ext.data.Model", modelBean0.getExtend());
      assertNull(modelBean0.getUpdateMethod());
      assertEquals("json", modelBean0.getReader());
      assertNull(modelBean0.getVersionProperty());
      assertNull(modelBean0.getWriteAllFields());
      assertNotNull(modelBean0);
      assertNull(modelBean0.getIdProperty());
      
      modelBean0.setIdProperty("map2ing");
      assertFalse(modelBean0.isPaging());
      assertNull(modelBean0.getMessageProperty());
      assertFalse(modelBean0.isDisablePagingParameters());
      assertNull(modelBean0.getRootProperty());
      assertNull(modelBean0.getSuccessProperty());
      assertNull(modelBean0.getReadMethod());
      assertEquals("ch.rasc.extclassgenerator.ModelFieldBean", modelBean0.getName());
      assertEquals("json", modelBean0.getWriter());
      assertNull(modelBean0.getIdentifier());
      assertNull(modelBean0.getDestroyMethod());
      assertFalse(modelBean0.isClientIdPropertyAddToWriter());
      assertNull(modelBean0.getTotalProperty());
      assertNull(modelBean0.getCreateMethod());
      assertTrue(modelBean0.isAutodetectTypes());
      assertNull(modelBean0.getClientIdProperty());
      assertEquals("Ext.data.Model", modelBean0.getExtend());
      assertNull(modelBean0.getUpdateMethod());
      assertEquals("json", modelBean0.getReader());
      assertNull(modelBean0.getVersionProperty());
      assertNull(modelBean0.getWriteAllFields());
      
      OutputConfig outputConfig0 = new OutputConfig();
      assertNull(outputConfig0.getLineEnding());
      assertFalse(outputConfig0.isUseSingleQuotes());
      assertNull(outputConfig0.getIncludeValidation());
      assertFalse(outputConfig0.isDebug());
      assertFalse(outputConfig0.isSurroundApiWithQuotes());
      assertNull(outputConfig0.getOutputFormat());
      assertNotNull(outputConfig0);
      
      HttpServletRequest httpServletRequest0 = mock(HttpServletRequest.class, new ViolatedAssumptionAnswer());
      HttpServletRequestWrapper httpServletRequestWrapper0 = new HttpServletRequestWrapper(httpServletRequest0);
      assertNotNull(httpServletRequestWrapper0);
      
      HttpServletRequestWrapper httpServletRequestWrapper1 = new HttpServletRequestWrapper(httpServletRequestWrapper0);
      assertFalse(httpServletRequestWrapper1.equals((Object)httpServletRequestWrapper0));
      assertNotNull(httpServletRequestWrapper1);
      
      HttpServletResponse httpServletResponse0 = mock(HttpServletResponse.class, new ViolatedAssumptionAnswer());
      HttpServletResponseWrapper httpServletResponseWrapper0 = new HttpServletResponseWrapper(httpServletResponse0);
      assertNotNull(httpServletResponseWrapper0);
      
      // Undeclared exception!
      try { 
        ModelGenerator.writeModel((HttpServletRequest) httpServletRequestWrapper0, (HttpServletResponse) httpServletResponseWrapper0, (Class<?>) class0, outputConfig0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // includeValidation must not be null
         //
         verifyException("org.springframework.util.Assert", e);
      }
  }

  @Test(timeout = 4000000)
  public void test001()  throws Throwable  {
      OutputConfig outputConfig0 = new OutputConfig();
      assertNull(outputConfig0.getOutputFormat());
      assertNull(outputConfig0.getIncludeValidation());
      assertFalse(outputConfig0.isSurroundApiWithQuotes());
      assertFalse(outputConfig0.isUseSingleQuotes());
      assertNull(outputConfig0.getLineEnding());
      assertFalse(outputConfig0.isDebug());
      assertNotNull(outputConfig0);
      
      ModelBean modelBean0 = new ModelBean();
      assertNull(modelBean0.getIdentifier());
      assertNull(modelBean0.getVersionProperty());
      assertFalse(modelBean0.isPaging());
      assertNull(modelBean0.getSuccessProperty());
      assertEquals("json", modelBean0.getWriter());
      assertNull(modelBean0.getRootProperty());
      assertEquals("Ext.data.Model", modelBean0.getExtend());
      assertNull(modelBean0.getReadMethod());
      assertFalse(modelBean0.isDisablePagingParameters());
      assertFalse(modelBean0.isClientIdPropertyAddToWriter());
      assertEquals("json", modelBean0.getReader());
      assertNull(modelBean0.getUpdateMethod());
      assertNull(modelBean0.getCreateMethod());
      assertTrue(modelBean0.isAutodetectTypes());
      assertNull(modelBean0.getDestroyMethod());
      assertNull(modelBean0.getWriteAllFields());
      assertNull(modelBean0.getTotalProperty());
      assertNull(modelBean0.getIdProperty());
      assertNull(modelBean0.getClientIdProperty());
      assertNull(modelBean0.getName());
      assertNull(modelBean0.getMessageProperty());
      assertNotNull(modelBean0);
      
      OutputFormat outputFormat0 = OutputFormat.EXTJS4;
      // Undeclared exception!
      try { 
        ModelGenerator.writeModel((HttpServletRequest) null, (HttpServletResponse) null, modelBean0, outputFormat0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("ch.rasc.extclassgenerator.ModelGenerator", e);
      }
  }

  @Test(timeout = 4000000)
  public void test002()  throws Throwable  {
      HttpServletRequest httpServletRequest0 = mock(HttpServletRequest.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(httpServletRequest0).getHeader(anyString());
      Class<String> class0 = String.class;
      IncludeValidation includeValidation0 = IncludeValidation.NONE;
      ModelBean modelBean0 = ModelGenerator.createModel(class0, includeValidation0);
      assertNull(modelBean0.getRootProperty());
      assertNull(modelBean0.getVersionProperty());
      assertEquals("json", modelBean0.getWriter());
      assertNull(modelBean0.getIdentifier());
      assertFalse(modelBean0.isClientIdPropertyAddToWriter());
      assertNull(modelBean0.getClientIdProperty());
      assertFalse(modelBean0.isDisablePagingParameters());
      assertFalse(modelBean0.isPaging());
      assertNull(modelBean0.getSuccessProperty());
      assertNull(modelBean0.getReadMethod());
      assertTrue(modelBean0.isAutodetectTypes());
      assertNull(modelBean0.getIdProperty());
      assertNull(modelBean0.getUpdateMethod());
      assertEquals("json", modelBean0.getReader());
      assertNull(modelBean0.getDestroyMethod());
      assertNull(modelBean0.getWriteAllFields());
      assertEquals("java.lang.String", modelBean0.getName());
      assertNull(modelBean0.getMessageProperty());
      assertNull(modelBean0.getTotalProperty());
      assertNull(modelBean0.getCreateMethod());
      assertNotNull(modelBean0);
      
      String[] stringArray0 = new String[4];
      stringArray0[0] = "parentNode";
      stringArray0[1] = "parentNode";
      stringArray0[2] = "parentNode";
      stringArray0[3] = "parentNode";
      modelBean0.setHasMany(stringArray0);
      assertNull(modelBean0.getRootProperty());
      assertNull(modelBean0.getVersionProperty());
      assertEquals("json", modelBean0.getWriter());
      assertNull(modelBean0.getIdentifier());
      assertFalse(modelBean0.isClientIdPropertyAddToWriter());
      assertNull(modelBean0.getClientIdProperty());
      assertFalse(modelBean0.isDisablePagingParameters());
      assertFalse(modelBean0.isPaging());
      assertNull(modelBean0.getSuccessProperty());
      assertNull(modelBean0.getReadMethod());
      assertTrue(modelBean0.isAutodetectTypes());
      assertNull(modelBean0.getIdProperty());
      assertNull(modelBean0.getUpdateMethod());
      assertEquals("json", modelBean0.getReader());
      assertNull(modelBean0.getDestroyMethod());
      assertNull(modelBean0.getWriteAllFields());
      assertEquals("java.lang.String", modelBean0.getName());
      assertNull(modelBean0.getMessageProperty());
      assertNull(modelBean0.getTotalProperty());
      assertNull(modelBean0.getCreateMethod());
      assertEquals(4, stringArray0.length);
      
      modelBean0.setExtend("\"0");
      assertNull(modelBean0.getRootProperty());
      assertNull(modelBean0.getVersionProperty());
      assertEquals("json", modelBean0.getWriter());
      assertNull(modelBean0.getIdentifier());
      assertFalse(modelBean0.isClientIdPropertyAddToWriter());
      assertNull(modelBean0.getClientIdProperty());
      assertFalse(modelBean0.isDisablePagingParameters());
      assertFalse(modelBean0.isPaging());
      assertNull(modelBean0.getSuccessProperty());
      assertNull(modelBean0.getReadMethod());
      assertTrue(modelBean0.isAutodetectTypes());
      assertNull(modelBean0.getIdProperty());
      assertNull(modelBean0.getUpdateMethod());
      assertEquals("json", modelBean0.getReader());
      assertNull(modelBean0.getDestroyMethod());
      assertNull(modelBean0.getWriteAllFields());
      assertEquals("java.lang.String", modelBean0.getName());
      assertNull(modelBean0.getMessageProperty());
      assertNull(modelBean0.getTotalProperty());
      assertNull(modelBean0.getCreateMethod());
      
      PartialDataOptionsBean partialDataOptionsBean0 = modelBean0.getPartialDataOptions();
      assertNull(modelBean0.getRootProperty());
      assertNull(modelBean0.getVersionProperty());
      assertEquals("json", modelBean0.getWriter());
      assertNull(modelBean0.getIdentifier());
      assertFalse(modelBean0.isClientIdPropertyAddToWriter());
      assertNull(modelBean0.getClientIdProperty());
      assertFalse(modelBean0.isDisablePagingParameters());
      assertFalse(modelBean0.isPaging());
      assertNull(modelBean0.getSuccessProperty());
      assertNull(modelBean0.getReadMethod());
      assertTrue(modelBean0.isAutodetectTypes());
      assertNull(modelBean0.getIdProperty());
      assertNull(modelBean0.getUpdateMethod());
      assertEquals("json", modelBean0.getReader());
      assertNull(modelBean0.getDestroyMethod());
      assertNull(modelBean0.getWriteAllFields());
      assertEquals("java.lang.String", modelBean0.getName());
      assertNull(modelBean0.getMessageProperty());
      assertNull(modelBean0.getTotalProperty());
      assertNull(modelBean0.getCreateMethod());
      assertNull(partialDataOptionsBean0);
      
      modelBean0.setPartialDataOptions((PartialDataOptionsBean) null);
      assertNull(modelBean0.getRootProperty());
      assertNull(modelBean0.getVersionProperty());
      assertEquals("json", modelBean0.getWriter());
      assertNull(modelBean0.getIdentifier());
      assertFalse(modelBean0.isClientIdPropertyAddToWriter());
      assertNull(modelBean0.getClientIdProperty());
      assertFalse(modelBean0.isDisablePagingParameters());
      assertFalse(modelBean0.isPaging());
      assertNull(modelBean0.getSuccessProperty());
      assertNull(modelBean0.getReadMethod());
      assertTrue(modelBean0.isAutodetectTypes());
      assertNull(modelBean0.getIdProperty());
      assertNull(modelBean0.getUpdateMethod());
      assertEquals("json", modelBean0.getReader());
      assertNull(modelBean0.getDestroyMethod());
      assertNull(modelBean0.getWriteAllFields());
      assertEquals("java.lang.String", modelBean0.getName());
      assertNull(modelBean0.getMessageProperty());
      assertNull(modelBean0.getTotalProperty());
      assertNull(modelBean0.getCreateMethod());
      
      modelBean0.setClientIdPropertyAddToWriter(false);
      assertNull(modelBean0.getRootProperty());
      assertNull(modelBean0.getVersionProperty());
      assertEquals("json", modelBean0.getWriter());
      assertNull(modelBean0.getIdentifier());
      assertFalse(modelBean0.isClientIdPropertyAddToWriter());
      assertNull(modelBean0.getClientIdProperty());
      assertFalse(modelBean0.isDisablePagingParameters());
      assertFalse(modelBean0.isPaging());
      assertNull(modelBean0.getSuccessProperty());
      assertNull(modelBean0.getReadMethod());
      assertTrue(modelBean0.isAutodetectTypes());
      assertNull(modelBean0.getIdProperty());
      assertNull(modelBean0.getUpdateMethod());
      assertEquals("json", modelBean0.getReader());
      assertNull(modelBean0.getDestroyMethod());
      assertNull(modelBean0.getWriteAllFields());
      assertEquals("java.lang.String", modelBean0.getName());
      assertNull(modelBean0.getMessageProperty());
      assertNull(modelBean0.getTotalProperty());
      assertNull(modelBean0.getCreateMethod());
      
      OutputConfig outputConfig0 = new OutputConfig();
      assertNull(outputConfig0.getIncludeValidation());
      assertNull(outputConfig0.getOutputFormat());
      assertFalse(outputConfig0.isSurroundApiWithQuotes());
      assertNull(outputConfig0.getLineEnding());
      assertFalse(outputConfig0.isUseSingleQuotes());
      assertFalse(outputConfig0.isDebug());
      assertNotNull(outputConfig0);
      
      String string0 = ModelGenerator.generateJavascript(modelBean0, outputConfig0);
      assertNull(modelBean0.getRootProperty());
      assertNull(modelBean0.getVersionProperty());
      assertEquals("json", modelBean0.getWriter());
      assertNull(modelBean0.getIdentifier());
      assertFalse(modelBean0.isClientIdPropertyAddToWriter());
      assertNull(modelBean0.getClientIdProperty());
      assertFalse(modelBean0.isDisablePagingParameters());
      assertFalse(modelBean0.isPaging());
      assertNull(modelBean0.getSuccessProperty());
      assertNull(modelBean0.getReadMethod());
      assertTrue(modelBean0.isAutodetectTypes());
      assertNull(modelBean0.getIdProperty());
      assertNull(modelBean0.getUpdateMethod());
      assertEquals("json", modelBean0.getReader());
      assertNull(modelBean0.getDestroyMethod());
      assertNull(modelBean0.getWriteAllFields());
      assertEquals("java.lang.String", modelBean0.getName());
      assertNull(modelBean0.getMessageProperty());
      assertNull(modelBean0.getTotalProperty());
      assertNull(modelBean0.getCreateMethod());
      assertNull(outputConfig0.getIncludeValidation());
      assertNull(outputConfig0.getOutputFormat());
      assertFalse(outputConfig0.isSurroundApiWithQuotes());
      assertNull(outputConfig0.getLineEnding());
      assertFalse(outputConfig0.isUseSingleQuotes());
      assertFalse(outputConfig0.isDebug());
      assertNotNull(string0);
      assertEquals("Ext.define(\"java.lang.String\",{extend:\"\\\"0\",config:{fields:[],hasMany:[\"parentNode\",\"parentNode\",\"parentNode\",\"parentNode\"]}});", string0);
      
      String string1 = ModelGenerator.generateJavascript(modelBean0, outputConfig0);
      assertNull(modelBean0.getRootProperty());
      assertNull(modelBean0.getVersionProperty());
      assertEquals("json", modelBean0.getWriter());
      assertNull(modelBean0.getIdentifier());
      assertFalse(modelBean0.isClientIdPropertyAddToWriter());
      assertNull(modelBean0.getClientIdProperty());
      assertFalse(modelBean0.isDisablePagingParameters());
      assertFalse(modelBean0.isPaging());
      assertNull(modelBean0.getSuccessProperty());
      assertNull(modelBean0.getReadMethod());
      assertTrue(modelBean0.isAutodetectTypes());
      assertNull(modelBean0.getIdProperty());
      assertNull(modelBean0.getUpdateMethod());
      assertEquals("json", modelBean0.getReader());
      assertNull(modelBean0.getDestroyMethod());
      assertNull(modelBean0.getWriteAllFields());
      assertEquals("java.lang.String", modelBean0.getName());
      assertNull(modelBean0.getMessageProperty());
      assertNull(modelBean0.getTotalProperty());
      assertNull(modelBean0.getCreateMethod());
      assertNull(outputConfig0.getIncludeValidation());
      assertNull(outputConfig0.getOutputFormat());
      assertFalse(outputConfig0.isSurroundApiWithQuotes());
      assertNull(outputConfig0.getLineEnding());
      assertFalse(outputConfig0.isUseSingleQuotes());
      assertFalse(outputConfig0.isDebug());
      assertNotNull(string1);
      assertEquals("Ext.define(\"java.lang.String\",{extend:\"\\\"0\",config:{fields:[],hasMany:[\"parentNode\",\"parentNode\",\"parentNode\",\"parentNode\"]}});", string1);
      
      HttpServletRequestWrapper httpServletRequestWrapper0 = new HttpServletRequestWrapper(httpServletRequest0);
      assertNotNull(httpServletRequestWrapper0);
      
      HttpServletResponse httpServletResponse0 = mock(HttpServletResponse.class, new ViolatedAssumptionAnswer());
      doReturn((ServletOutputStream) null).when(httpServletResponse0).getOutputStream();
      HttpServletResponseWrapper httpServletResponseWrapper0 = new HttpServletResponseWrapper(httpServletResponse0);
      assertNotNull(httpServletResponseWrapper0);
      
      Class<AssertStmt> class1 = AssertStmt.class;
      OutputFormat outputFormat0 = OutputFormat.EXTJS5;
      // Undeclared exception!
      try { 
        ModelGenerator.writeModel((HttpServletRequest) httpServletRequestWrapper0, (HttpServletResponse) httpServletResponseWrapper0, (Class<?>) class1, outputFormat0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("ch.rasc.extclassgenerator.ModelGenerator", e);
      }
  }

  @Test(timeout = 4000000)
  public void test003()  throws Throwable  {
      Class<ModelFieldBean> class0 = ModelFieldBean.class;
      // Undeclared exception!
      try { 
        ModelGenerator.createModel(class0, (IncludeValidation) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // includeValidation must not be null
         //
         verifyException("org.springframework.util.Assert", e);
      }
  }

  @Test(timeout = 4000000)
  public void test004()  throws Throwable  {
      Class<ModelFieldBean> class0 = ModelFieldBean.class;
      ModelBean modelBean0 = ModelGenerator.createModel(class0);
      assertNull(modelBean0.getMessageProperty());
      assertFalse(modelBean0.isPaging());
      assertNull(modelBean0.getVersionProperty());
      assertNull(modelBean0.getIdentifier());
      assertNull(modelBean0.getSuccessProperty());
      assertEquals("Ext.data.Model", modelBean0.getExtend());
      assertNull(modelBean0.getClientIdProperty());
      assertNull(modelBean0.getRootProperty());
      assertNull(modelBean0.getReadMethod());
      assertEquals("json", modelBean0.getWriter());
      assertTrue(modelBean0.isAutodetectTypes());
      assertEquals("ch.rasc.extclassgenerator.ModelFieldBean", modelBean0.getName());
      assertFalse(modelBean0.isDisablePagingParameters());
      assertFalse(modelBean0.isClientIdPropertyAddToWriter());
      assertNull(modelBean0.getTotalProperty());
      assertNull(modelBean0.getDestroyMethod());
      assertNull(modelBean0.getWriteAllFields());
      assertNull(modelBean0.getCreateMethod());
      assertEquals("json", modelBean0.getReader());
      assertNull(modelBean0.getUpdateMethod());
      assertNotNull(modelBean0);
      
      modelBean0.setIdProperty("ma(ping");
      assertNull(modelBean0.getMessageProperty());
      assertFalse(modelBean0.isPaging());
      assertNull(modelBean0.getVersionProperty());
      assertNull(modelBean0.getIdentifier());
      assertNull(modelBean0.getSuccessProperty());
      assertEquals("Ext.data.Model", modelBean0.getExtend());
      assertNull(modelBean0.getClientIdProperty());
      assertNull(modelBean0.getRootProperty());
      assertNull(modelBean0.getReadMethod());
      assertEquals("json", modelBean0.getWriter());
      assertTrue(modelBean0.isAutodetectTypes());
      assertEquals("ch.rasc.extclassgenerator.ModelFieldBean", modelBean0.getName());
      assertFalse(modelBean0.isDisablePagingParameters());
      assertFalse(modelBean0.isClientIdPropertyAddToWriter());
      assertNull(modelBean0.getTotalProperty());
      assertNull(modelBean0.getDestroyMethod());
      assertNull(modelBean0.getWriteAllFields());
      assertNull(modelBean0.getCreateMethod());
      assertEquals("json", modelBean0.getReader());
      assertNull(modelBean0.getUpdateMethod());
      
      OutputFormat outputFormat0 = OutputFormat.TOUCH2;
      HttpServletRequest httpServletRequest0 = mock(HttpServletRequest.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(httpServletRequest0).getHeader(anyString());
      HttpServletRequestWrapper httpServletRequestWrapper0 = new HttpServletRequestWrapper(httpServletRequest0);
      assertNotNull(httpServletRequestWrapper0);
      
      HttpServletResponse httpServletResponse0 = mock(HttpServletResponse.class, new ViolatedAssumptionAnswer());
      HttpServletResponseWrapper httpServletResponseWrapper0 = new HttpServletResponseWrapper(httpServletResponse0);
      assertNotNull(httpServletResponseWrapper0);
      
      ServletResponseWrapper servletResponseWrapper0 = new ServletResponseWrapper(httpServletResponseWrapper0);
      assertNotNull(servletResponseWrapper0);
      
      httpServletResponseWrapper0.setResponse(servletResponseWrapper0);
      // Undeclared exception!
      try { 
        ModelGenerator.writeModel((HttpServletRequest) httpServletRequestWrapper0, (HttpServletResponse) httpServletResponseWrapper0, modelBean0, outputFormat0, true);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000000)
  public void test005()  throws Throwable  {
      HttpServletRequest httpServletRequest0 = mock(HttpServletRequest.class, new ViolatedAssumptionAnswer());
      doReturn("SYMBOL_RESOLVER_KEY", (String) null, (String) null).when(httpServletRequest0).getHeader(anyString());
      HttpServletRequestWrapper httpServletRequestWrapper0 = new HttpServletRequestWrapper(httpServletRequest0);
      assertNotNull(httpServletRequestWrapper0);
      
      ServletOutputStream servletOutputStream0 = mock(ServletOutputStream.class, new ViolatedAssumptionAnswer());
      HttpServletResponse httpServletResponse0 = mock(HttpServletResponse.class, new ViolatedAssumptionAnswer());
      doReturn(servletOutputStream0, (ServletOutputStream) null).when(httpServletResponse0).getOutputStream();
      HttpServletResponseWrapper httpServletResponseWrapper0 = new HttpServletResponseWrapper(httpServletResponse0);
      assertNotNull(httpServletResponseWrapper0);
      
      ModelBean modelBean0 = new ModelBean();
      assertNull(modelBean0.getSuccessProperty());
      assertNull(modelBean0.getIdentifier());
      assertFalse(modelBean0.isPaging());
      assertNull(modelBean0.getVersionProperty());
      assertNull(modelBean0.getMessageProperty());
      assertFalse(modelBean0.isDisablePagingParameters());
      assertEquals("Ext.data.Model", modelBean0.getExtend());
      assertNull(modelBean0.getWriteAllFields());
      assertTrue(modelBean0.isAutodetectTypes());
      assertNull(modelBean0.getClientIdProperty());
      assertNull(modelBean0.getCreateMethod());
      assertEquals("json", modelBean0.getReader());
      assertNull(modelBean0.getReadMethod());
      assertNull(modelBean0.getUpdateMethod());
      assertFalse(modelBean0.isClientIdPropertyAddToWriter());
      assertNull(modelBean0.getName());
      assertEquals("json", modelBean0.getWriter());
      assertNull(modelBean0.getTotalProperty());
      assertNull(modelBean0.getIdProperty());
      assertNull(modelBean0.getDestroyMethod());
      assertNull(modelBean0.getRootProperty());
      assertNotNull(modelBean0);
      
      Class<Object> class0 = Object.class;
      OutputFormat outputFormat0 = OutputFormat.TOUCH2;
      ModelGenerator.writeModel((HttpServletRequest) httpServletRequestWrapper0, (HttpServletResponse) httpServletResponseWrapper0, (Class<?>) class0, outputFormat0, false);
      String string0 = httpServletRequestWrapper0.getHeader("SYMBOL_RESOLVER_KEY");
      assertEquals("SYMBOL_RESOLVER_KEY", string0);
      
      Class<String> class1 = String.class;
      // Undeclared exception!
      try { 
        ModelGenerator.writeModel((HttpServletRequest) httpServletRequestWrapper0, (HttpServletResponse) httpServletResponseWrapper0, (Class<?>) class1, outputFormat0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("ch.rasc.extclassgenerator.ModelGenerator", e);
      }
  }

  @Test(timeout = 4000000)
  public void test006()  throws Throwable  {
      OutputConfig outputConfig0 = new OutputConfig();
      assertNull(outputConfig0.getOutputFormat());
      assertNull(outputConfig0.getIncludeValidation());
      assertFalse(outputConfig0.isUseSingleQuotes());
      assertNull(outputConfig0.getLineEnding());
      assertFalse(outputConfig0.isDebug());
      assertNotNull(outputConfig0);
      
      outputConfig0.setSurroundApiWithQuotes(true);
      assertNull(outputConfig0.getOutputFormat());
      assertNull(outputConfig0.getIncludeValidation());
      assertFalse(outputConfig0.isUseSingleQuotes());
      assertNull(outputConfig0.getLineEnding());
      assertFalse(outputConfig0.isDebug());
      
      ModelBean modelBean0 = new ModelBean();
      assertNull(modelBean0.getSuccessProperty());
      assertNull(modelBean0.getIdentifier());
      assertFalse(modelBean0.isPaging());
      assertNull(modelBean0.getVersionProperty());
      assertEquals("json", modelBean0.getWriter());
      assertNull(modelBean0.getRootProperty());
      assertNull(modelBean0.getName());
      assertNull(modelBean0.getMessageProperty());
      assertNull(modelBean0.getUpdateMethod());
      assertNull(modelBean0.getCreateMethod());
      assertEquals("json", modelBean0.getReader());
      assertNull(modelBean0.getWriteAllFields());
      assertNull(modelBean0.getTotalProperty());
      assertNull(modelBean0.getIdProperty());
      assertNull(modelBean0.getDestroyMethod());
      assertNull(modelBean0.getClientIdProperty());
      assertEquals("Ext.data.Model", modelBean0.getExtend());
      assertTrue(modelBean0.isAutodetectTypes());
      assertNull(modelBean0.getReadMethod());
      assertFalse(modelBean0.isDisablePagingParameters());
      assertFalse(modelBean0.isClientIdPropertyAddToWriter());
      assertNotNull(modelBean0);
      
      LineEnding lineEnding0 = LineEnding.LF;
      outputConfig0.setLineEnding(lineEnding0);
      assertNull(outputConfig0.getOutputFormat());
      assertNull(outputConfig0.getIncludeValidation());
      assertEquals(LineEnding.LF, outputConfig0.getLineEnding());
      assertFalse(outputConfig0.isUseSingleQuotes());
      assertFalse(outputConfig0.isDebug());
      
      String string0 = ModelGenerator.generateJavascript(modelBean0, outputConfig0);
      assertNull(outputConfig0.getOutputFormat());
      assertNull(outputConfig0.getIncludeValidation());
      assertEquals(LineEnding.LF, outputConfig0.getLineEnding());
      assertFalse(outputConfig0.isUseSingleQuotes());
      assertFalse(outputConfig0.isDebug());
      assertNull(modelBean0.getSuccessProperty());
      assertNull(modelBean0.getIdentifier());
      assertFalse(modelBean0.isPaging());
      assertNull(modelBean0.getVersionProperty());
      assertEquals("json", modelBean0.getWriter());
      assertNull(modelBean0.getRootProperty());
      assertNull(modelBean0.getName());
      assertNull(modelBean0.getMessageProperty());
      assertNull(modelBean0.getUpdateMethod());
      assertNull(modelBean0.getCreateMethod());
      assertEquals("json", modelBean0.getReader());
      assertNull(modelBean0.getWriteAllFields());
      assertNull(modelBean0.getTotalProperty());
      assertNull(modelBean0.getIdProperty());
      assertNull(modelBean0.getDestroyMethod());
      assertNull(modelBean0.getClientIdProperty());
      assertEquals("Ext.data.Model", modelBean0.getExtend());
      assertTrue(modelBean0.isAutodetectTypes());
      assertNull(modelBean0.getReadMethod());
      assertFalse(modelBean0.isDisablePagingParameters());
      assertFalse(modelBean0.isClientIdPropertyAddToWriter());
      assertNotNull(string0);
      assertEquals("Ext.define(\"null\",{extend:\"Ext.data.Model\",config:{fields:[]}});", string0);
      
      String string1 = ModelGenerator.generateJavascript(modelBean0, outputConfig0);
      assertNull(outputConfig0.getOutputFormat());
      assertNull(outputConfig0.getIncludeValidation());
      assertEquals(LineEnding.LF, outputConfig0.getLineEnding());
      assertFalse(outputConfig0.isUseSingleQuotes());
      assertFalse(outputConfig0.isDebug());
      assertNull(modelBean0.getSuccessProperty());
      assertNull(modelBean0.getIdentifier());
      assertFalse(modelBean0.isPaging());
      assertNull(modelBean0.getVersionProperty());
      assertEquals("json", modelBean0.getWriter());
      assertNull(modelBean0.getRootProperty());
      assertNull(modelBean0.getName());
      assertNull(modelBean0.getMessageProperty());
      assertNull(modelBean0.getUpdateMethod());
      assertNull(modelBean0.getCreateMethod());
      assertEquals("json", modelBean0.getReader());
      assertNull(modelBean0.getWriteAllFields());
      assertNull(modelBean0.getTotalProperty());
      assertNull(modelBean0.getIdProperty());
      assertNull(modelBean0.getDestroyMethod());
      assertNull(modelBean0.getClientIdProperty());
      assertEquals("Ext.data.Model", modelBean0.getExtend());
      assertTrue(modelBean0.isAutodetectTypes());
      assertNull(modelBean0.getReadMethod());
      assertFalse(modelBean0.isDisablePagingParameters());
      assertFalse(modelBean0.isClientIdPropertyAddToWriter());
      assertNotNull(string1);
      assertEquals("Ext.define(\"null\",{extend:\"Ext.data.Model\",config:{fields:[]}});", string1);
  }

  @Test(timeout = 4000000)
  public void test007()  throws Throwable  {
      HttpServletResponse httpServletResponse0 = mock(HttpServletResponse.class, new ViolatedAssumptionAnswer());
      doReturn((ServletOutputStream) null).when(httpServletResponse0).getOutputStream();
      IncludeValidation includeValidation0 = IncludeValidation.BUILTIN;
      Class<Object> class0 = Object.class;
      ModelBean modelBean0 = ModelGenerator.createModel(class0, includeValidation0);
      assertEquals("java.lang.Object", modelBean0.getName());
      assertEquals("json", modelBean0.getReader());
      assertNull(modelBean0.getIdProperty());
      assertNull(modelBean0.getUpdateMethod());
      assertNull(modelBean0.getDestroyMethod());
      assertNull(modelBean0.getWriteAllFields());
      assertNull(modelBean0.getTotalProperty());
      assertNull(modelBean0.getMessageProperty());
      assertNull(modelBean0.getCreateMethod());
      assertFalse(modelBean0.isDisablePagingParameters());
      assertNull(modelBean0.getRootProperty());
      assertEquals("`}zU`yZ19?l.J%Se", modelBean0.getIdentifier());
      assertEquals("d1WtV(zz", modelBean0.getReadMethod());
      assertEquals("json", modelBean0.getWriter());
      assertNull(modelBean0.getVersionProperty());
      assertNull(modelBean0.getClientIdProperty());
      assertFalse(modelBean0.isClientIdPropertyAddToWriter());
      assertFalse(modelBean0.isPaging());
      assertEquals("Ext.data.Model", modelBean0.getExtend());
      assertNull(modelBean0.getSuccessProperty());
      assertTrue(modelBean0.isAutodetectTypes());
      assertNotNull(modelBean0);
      
      LinkedList<AbstractAssociation> linkedList0 = new LinkedList<AbstractAssociation>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      modelBean0.addAssociations(linkedList0);
      assertEquals("java.lang.Object", modelBean0.getName());
      assertEquals("json", modelBean0.getReader());
      assertNull(modelBean0.getIdProperty());
      assertNull(modelBean0.getUpdateMethod());
      assertNull(modelBean0.getDestroyMethod());
      assertNull(modelBean0.getWriteAllFields());
      assertNull(modelBean0.getTotalProperty());
      assertNull(modelBean0.getMessageProperty());
      assertNull(modelBean0.getCreateMethod());
      assertFalse(modelBean0.isDisablePagingParameters());
      assertNull(modelBean0.getRootProperty());
      assertEquals("`}zU`yZ19?l.J%Se", modelBean0.getIdentifier());
      assertEquals("d1WtV(zz", modelBean0.getReadMethod());
      assertEquals("json", modelBean0.getWriter());
      assertNull(modelBean0.getVersionProperty());
      assertNull(modelBean0.getClientIdProperty());
      assertFalse(modelBean0.isClientIdPropertyAddToWriter());
      assertFalse(modelBean0.isPaging());
      assertEquals("Ext.data.Model", modelBean0.getExtend());
      assertNull(modelBean0.getSuccessProperty());
      assertTrue(modelBean0.isAutodetectTypes());
      assertEquals(0, linkedList0.size());
      
      OutputFormat outputFormat0 = OutputFormat.TOUCH2;
      String string0 = ModelGenerator.generateJavascript(modelBean0, outputFormat0, true);
      assertEquals("java.lang.Object", modelBean0.getName());
      assertEquals("json", modelBean0.getReader());
      assertNull(modelBean0.getIdProperty());
      assertNull(modelBean0.getUpdateMethod());
      assertNull(modelBean0.getDestroyMethod());
      assertNull(modelBean0.getWriteAllFields());
      assertNull(modelBean0.getTotalProperty());
      assertNull(modelBean0.getMessageProperty());
      assertNull(modelBean0.getCreateMethod());
      assertFalse(modelBean0.isDisablePagingParameters());
      assertNull(modelBean0.getRootProperty());
      assertEquals("`}zU`yZ19?l.J%Se", modelBean0.getIdentifier());
      assertEquals("d1WtV(zz", modelBean0.getReadMethod());
      assertEquals("json", modelBean0.getWriter());
      assertNull(modelBean0.getVersionProperty());
      assertNull(modelBean0.getClientIdProperty());
      assertFalse(modelBean0.isClientIdPropertyAddToWriter());
      assertFalse(modelBean0.isPaging());
      assertEquals("Ext.data.Model", modelBean0.getExtend());
      assertNull(modelBean0.getSuccessProperty());
      assertTrue(modelBean0.isAutodetectTypes());
      assertNotNull(string0);
      
      HttpServletRequest httpServletRequest0 = mock(HttpServletRequest.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(httpServletRequest0).getHeader(anyString());
      HttpServletRequestWrapper httpServletRequestWrapper0 = new HttpServletRequestWrapper(httpServletRequest0);
      assertNotNull(httpServletRequestWrapper0);
      
      ServletRequest servletRequest0 = httpServletRequestWrapper0.getRequest();
      assertNotNull(servletRequest0);
      
      httpServletRequestWrapper0.setRequest(servletRequest0);
      Class<Object> class1 = Object.class;
      OutputFormat outputFormat1 = OutputFormat.EXTJS4;
      IncludeValidation includeValidation1 = IncludeValidation.BUILTIN;
      // Undeclared exception!
      try { 
        ModelGenerator.writeModel((HttpServletRequest) httpServletRequestWrapper0, httpServletResponse0, (Class<?>) class1, outputFormat1, includeValidation1, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("ch.rasc.extclassgenerator.ModelGenerator", e);
      }
  }

  @Test(timeout = 4000000)
  public void test008()  throws Throwable  {
      String string0 = ModelGenerator.trimToNull("T!k.F=*<|G");
      assertNotNull(string0);
      assertEquals("T!k.F=*<|G", string0);
  }

  @Test(timeout = 4000000)
  public void test009()  throws Throwable  {
      Class<String> class0 = String.class;
      ModelBean modelBean0 = ModelGenerator.createModel(class0);
      assertEquals("json", modelBean0.getWriter());
      assertNull(modelBean0.getIdentifier());
      assertFalse(modelBean0.isPaging());
      assertNull(modelBean0.getSuccessProperty());
      assertEquals("java.lang.String", modelBean0.getName());
      assertNull(modelBean0.getRootProperty());
      assertFalse(modelBean0.isClientIdPropertyAddToWriter());
      assertNull(modelBean0.getDestroyMethod());
      assertFalse(modelBean0.isDisablePagingParameters());
      assertNull(modelBean0.getIdProperty());
      assertNull(modelBean0.getUpdateMethod());
      assertEquals("json", modelBean0.getReader());
      assertNull(modelBean0.getWriteAllFields());
      assertNull(modelBean0.getReadMethod());
      assertNull(modelBean0.getCreateMethod());
      assertTrue(modelBean0.isAutodetectTypes());
      assertEquals("Ext.data.Model", modelBean0.getExtend());
      assertNull(modelBean0.getTotalProperty());
      assertNull(modelBean0.getClientIdProperty());
      assertNull(modelBean0.getVersionProperty());
      assertNull(modelBean0.getMessageProperty());
      assertNotNull(modelBean0);
      
      OutputFormat outputFormat0 = OutputFormat.EXTJS5;
      String string0 = ModelGenerator.generateJavascript(modelBean0, outputFormat0, true);
      assertEquals("json", modelBean0.getWriter());
      assertNull(modelBean0.getIdentifier());
      assertFalse(modelBean0.isPaging());
      assertNull(modelBean0.getSuccessProperty());
      assertEquals("java.lang.String", modelBean0.getName());
      assertNull(modelBean0.getRootProperty());
      assertFalse(modelBean0.isClientIdPropertyAddToWriter());
      assertNull(modelBean0.getDestroyMethod());
      assertFalse(modelBean0.isDisablePagingParameters());
      assertNull(modelBean0.getIdProperty());
      assertNull(modelBean0.getUpdateMethod());
      assertEquals("json", modelBean0.getReader());
      assertNull(modelBean0.getWriteAllFields());
      assertNull(modelBean0.getReadMethod());
      assertNull(modelBean0.getCreateMethod());
      assertTrue(modelBean0.isAutodetectTypes());
      assertEquals("Ext.data.Model", modelBean0.getExtend());
      assertNull(modelBean0.getTotalProperty());
      assertNull(modelBean0.getClientIdProperty());
      assertNull(modelBean0.getVersionProperty());
      assertNull(modelBean0.getMessageProperty());
      assertNotNull(string0);
      assertEquals("Ext.define(\"java.lang.String\",\r\n{\n  extend : \"Ext.data.Model\",\n  fields : [ ]\n});", string0);
  }

  @Test(timeout = 4000000)
  public void test010()  throws Throwable  {
      Class<ModelFieldBean> class0 = ModelFieldBean.class;
      ModelBean modelBean0 = ModelGenerator.createModel(class0);
      assertEquals("json", modelBean0.getWriter());
      assertNull(modelBean0.getIdentifier());
      assertFalse(modelBean0.isDisablePagingParameters());
      assertNull(modelBean0.getVersionProperty());
      assertFalse(modelBean0.isClientIdPropertyAddToWriter());
      assertEquals("mapping", modelBean0.getIdProperty());
      assertFalse(modelBean0.isPaging());
      assertNull(modelBean0.getClientIdProperty());
      assertTrue(modelBean0.isAutodetectTypes());
      assertNull(modelBean0.getSuccessProperty());
      assertEquals("Ext.data.Model", modelBean0.getExtend());
      assertEquals("ch.rasc.extclassgenerator.ModelFieldBean", modelBean0.getName());
      assertNull(modelBean0.getWriteAllFields());
      assertNull(modelBean0.getCreateMethod());
      assertNull(modelBean0.getReadMethod());
      assertNull(modelBean0.getUpdateMethod());
      assertEquals("json", modelBean0.getReader());
      assertNull(modelBean0.getMessageProperty());
      assertNull(modelBean0.getDestroyMethod());
      assertNull(modelBean0.getRootProperty());
      assertNull(modelBean0.getTotalProperty());
      assertNotNull(modelBean0);
      
      IncludeValidation includeValidation0 = IncludeValidation.ALL;
      ModelBean modelBean1 = ModelGenerator.createModel(class0, includeValidation0);
      assertFalse(modelBean1.isClientIdPropertyAddToWriter());
      assertNull(modelBean1.getDestroyMethod());
      assertEquals("json", modelBean1.getReader());
      assertEquals("I", modelBean1.getClientIdProperty());
      assertNull(modelBean1.getUpdateMethod());
      assertNull(modelBean1.getReadMethod());
      assertTrue(modelBean1.isAutodetectTypes());
      assertNull(modelBean1.getWriteAllFields());
      assertEquals("Ext.data.Model", modelBean1.getExtend());
      assertFalse(modelBean1.isPaging());
      assertNull(modelBean1.getSuccessProperty());
      assertFalse(modelBean1.isDisablePagingParameters());
      assertNull(modelBean1.getVersionProperty());
      assertNull(modelBean1.getMessageProperty());
      assertNull(modelBean1.getIdProperty());
      assertEquals("ch.rasc.extclassgenerator.ModelFieldBean", modelBean1.getName());
      assertNull(modelBean1.getCreateMethod());
      assertEquals("json", modelBean1.getWriter());
      assertNull(modelBean1.getIdentifier());
      assertNull(modelBean1.getRootProperty());
      assertNull(modelBean1.getTotalProperty());
      assertNotSame(modelBean1, modelBean0);
      assertFalse(modelBean1.equals((Object)modelBean0));
      assertNotNull(modelBean1);
      
      ModelGenerator.clearCaches();
      OutputConfig outputConfig0 = new OutputConfig();
      assertFalse(outputConfig0.isSurroundApiWithQuotes());
      assertNull(outputConfig0.getIncludeValidation());
      assertFalse(outputConfig0.isDebug());
      assertFalse(outputConfig0.isUseSingleQuotes());
      assertNull(outputConfig0.getLineEnding());
      assertNull(outputConfig0.getOutputFormat());
      assertNotNull(outputConfig0);
      
      OutputFormat outputFormat0 = OutputFormat.EXTJS5;
      String string0 = ModelGenerator.generateJavascript(modelBean0, outputFormat0, true);
      assertEquals("json", modelBean0.getWriter());
      assertNull(modelBean0.getIdentifier());
      assertFalse(modelBean0.isDisablePagingParameters());
      assertNull(modelBean0.getVersionProperty());
      assertFalse(modelBean0.isClientIdPropertyAddToWriter());
      assertEquals("mapping", modelBean0.getIdProperty());
      assertFalse(modelBean0.isPaging());
      assertNull(modelBean0.getClientIdProperty());
      assertTrue(modelBean0.isAutodetectTypes());
      assertNull(modelBean0.getSuccessProperty());
      assertEquals("Ext.data.Model", modelBean0.getExtend());
      assertEquals("ch.rasc.extclassgenerator.ModelFieldBean", modelBean0.getName());
      assertNull(modelBean0.getWriteAllFields());
      assertNull(modelBean0.getCreateMethod());
      assertNull(modelBean0.getReadMethod());
      assertNull(modelBean0.getUpdateMethod());
      assertEquals("json", modelBean0.getReader());
      assertNull(modelBean0.getMessageProperty());
      assertNull(modelBean0.getDestroyMethod());
      assertNull(modelBean0.getRootProperty());
      assertNull(modelBean0.getTotalProperty());
      assertNotSame(modelBean0, modelBean1);
      assertFalse(modelBean0.equals((Object)modelBean1));
      assertNotNull(string0);
  }

  @Test(timeout = 4000000)
  public void test011()  throws Throwable  {
      Class<ModelFieldBean> class0 = ModelFieldBean.class;
      ModelBean modelBean0 = ModelGenerator.createModel(class0);
      assertFalse(modelBean0.isPaging());
      assertFalse(modelBean0.isDisablePagingParameters());
      assertNull(modelBean0.getMessageProperty());
      assertNull(modelBean0.getVersionProperty());
      assertNull(modelBean0.getRootProperty());
      assertNull(modelBean0.getSuccessProperty());
      assertEquals("ch.rasc.extclassgenerator.ModelFieldBean", modelBean0.getName());
      assertEquals("json", modelBean0.getWriter());
      assertNull(modelBean0.getIdentifier());
      assertNull(modelBean0.getIdProperty());
      assertNull(modelBean0.getDestroyMethod());
      assertNull(modelBean0.getTotalProperty());
      assertEquals("json", modelBean0.getReader());
      assertFalse(modelBean0.isClientIdPropertyAddToWriter());
      assertNull(modelBean0.getCreateMethod());
      assertNull(modelBean0.getReadMethod());
      assertNull(modelBean0.getClientIdProperty());
      assertTrue(modelBean0.isAutodetectTypes());
      assertNull(modelBean0.getUpdateMethod());
      assertEquals("Ext.data.Model", modelBean0.getExtend());
      assertNull(modelBean0.getWriteAllFields());
      assertNotNull(modelBean0);
      
      ModelGenerator.clearCaches();
      OutputConfig outputConfig0 = new OutputConfig();
      assertNull(outputConfig0.getOutputFormat());
      assertFalse(outputConfig0.isDebug());
      assertNull(outputConfig0.getLineEnding());
      assertFalse(outputConfig0.isSurroundApiWithQuotes());
      assertFalse(outputConfig0.isUseSingleQuotes());
      assertNull(outputConfig0.getIncludeValidation());
      assertNotNull(outputConfig0);
      
      String string0 = ModelGenerator.generateJavascript(modelBean0, outputConfig0);
      assertFalse(modelBean0.isPaging());
      assertFalse(modelBean0.isDisablePagingParameters());
      assertNull(modelBean0.getMessageProperty());
      assertNull(modelBean0.getVersionProperty());
      assertNull(modelBean0.getRootProperty());
      assertNull(modelBean0.getSuccessProperty());
      assertEquals("ch.rasc.extclassgenerator.ModelFieldBean", modelBean0.getName());
      assertEquals("json", modelBean0.getWriter());
      assertNull(modelBean0.getIdentifier());
      assertNull(modelBean0.getIdProperty());
      assertNull(modelBean0.getDestroyMethod());
      assertNull(modelBean0.getTotalProperty());
      assertEquals("json", modelBean0.getReader());
      assertFalse(modelBean0.isClientIdPropertyAddToWriter());
      assertNull(modelBean0.getCreateMethod());
      assertNull(modelBean0.getReadMethod());
      assertNull(modelBean0.getClientIdProperty());
      assertTrue(modelBean0.isAutodetectTypes());
      assertNull(modelBean0.getUpdateMethod());
      assertEquals("Ext.data.Model", modelBean0.getExtend());
      assertNull(modelBean0.getWriteAllFields());
      assertNull(outputConfig0.getOutputFormat());
      assertFalse(outputConfig0.isDebug());
      assertNull(outputConfig0.getLineEnding());
      assertFalse(outputConfig0.isSurroundApiWithQuotes());
      assertFalse(outputConfig0.isUseSingleQuotes());
      assertNull(outputConfig0.getIncludeValidation());
      assertNotNull(string0);
  }

  @Test(timeout = 4000000)
  public void test012()  throws Throwable  {
      String string0 = ModelGenerator.trimToNull("`}zU`yZ19l.J%Se");
      assertNotNull(string0);
      assertEquals("`}zU`yZ19l.J%Se", string0);
      
      HttpServletRequest httpServletRequest0 = mock(HttpServletRequest.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(httpServletRequest0).getHeader(anyString());
      HttpServletRequestWrapper httpServletRequestWrapper0 = new HttpServletRequestWrapper(httpServletRequest0);
      assertNotNull(httpServletRequestWrapper0);
      
      Class<Object> class0 = Object.class;
      IncludeValidation includeValidation0 = IncludeValidation.BUILTIN;
      ModelBean modelBean0 = ModelGenerator.createModel(class0, includeValidation0);
      assertEquals("java.lang.Object", modelBean0.getName());
      assertEquals("json", modelBean0.getReader());
      assertNull(modelBean0.getIdProperty());
      assertNull(modelBean0.getWriteAllFields());
      assertNull(modelBean0.getReadMethod());
      assertNull(modelBean0.getCreateMethod());
      assertTrue(modelBean0.isAutodetectTypes());
      assertNull(modelBean0.getClientIdProperty());
      assertEquals("Ext.data.Model", modelBean0.getExtend());
      assertNull(modelBean0.getTotalProperty());
      assertFalse(modelBean0.isClientIdPropertyAddToWriter());
      assertNull(modelBean0.getDestroyMethod());
      assertFalse(modelBean0.isDisablePagingParameters());
      assertEquals("json", modelBean0.getWriter());
      assertNull(modelBean0.getIdentifier());
      assertFalse(modelBean0.isPaging());
      assertNull(modelBean0.getRootProperty());
      assertNull(modelBean0.getSuccessProperty());
      assertNull(modelBean0.getMessageProperty());
      assertNull(modelBean0.getVersionProperty());
      assertNull(modelBean0.getUpdateMethod());
      assertNotNull(modelBean0);
      
      List<AbstractValidation> list0 = modelBean0.getValidations();
      assertEquals("java.lang.Object", modelBean0.getName());
      assertEquals("json", modelBean0.getReader());
      assertNull(modelBean0.getIdProperty());
      assertNull(modelBean0.getWriteAllFields());
      assertNull(modelBean0.getReadMethod());
      assertNull(modelBean0.getCreateMethod());
      assertTrue(modelBean0.isAutodetectTypes());
      assertNull(modelBean0.getClientIdProperty());
      assertEquals("Ext.data.Model", modelBean0.getExtend());
      assertNull(modelBean0.getTotalProperty());
      assertFalse(modelBean0.isClientIdPropertyAddToWriter());
      assertNull(modelBean0.getDestroyMethod());
      assertFalse(modelBean0.isDisablePagingParameters());
      assertEquals("json", modelBean0.getWriter());
      assertNull(modelBean0.getIdentifier());
      assertFalse(modelBean0.isPaging());
      assertNull(modelBean0.getRootProperty());
      assertNull(modelBean0.getSuccessProperty());
      assertNull(modelBean0.getMessageProperty());
      assertNull(modelBean0.getVersionProperty());
      assertNull(modelBean0.getUpdateMethod());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertNotNull(list0);
      
      modelBean0.addValidations(list0);
      assertEquals("java.lang.Object", modelBean0.getName());
      assertEquals("json", modelBean0.getReader());
      assertNull(modelBean0.getIdProperty());
      assertNull(modelBean0.getWriteAllFields());
      assertNull(modelBean0.getReadMethod());
      assertNull(modelBean0.getCreateMethod());
      assertTrue(modelBean0.isAutodetectTypes());
      assertNull(modelBean0.getClientIdProperty());
      assertEquals("Ext.data.Model", modelBean0.getExtend());
      assertNull(modelBean0.getTotalProperty());
      assertFalse(modelBean0.isClientIdPropertyAddToWriter());
      assertNull(modelBean0.getDestroyMethod());
      assertFalse(modelBean0.isDisablePagingParameters());
      assertEquals("json", modelBean0.getWriter());
      assertNull(modelBean0.getIdentifier());
      assertFalse(modelBean0.isPaging());
      assertNull(modelBean0.getRootProperty());
      assertNull(modelBean0.getSuccessProperty());
      assertNull(modelBean0.getMessageProperty());
      assertNull(modelBean0.getVersionProperty());
      assertNull(modelBean0.getUpdateMethod());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      
      OutputFormat outputFormat0 = OutputFormat.EXTJS5;
      // Undeclared exception!
      try { 
        ModelGenerator.writeModel((HttpServletRequest) httpServletRequestWrapper0, (HttpServletResponse) null, modelBean0, outputFormat0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("ch.rasc.extclassgenerator.ModelGenerator", e);
      }
  }

  @Test(timeout = 4000000)
  public void test013()  throws Throwable  {
      HttpServletRequest httpServletRequest0 = mock(HttpServletRequest.class, new ViolatedAssumptionAnswer());
      HttpServletRequestWrapper httpServletRequestWrapper0 = new HttpServletRequestWrapper(httpServletRequest0);
      assertNotNull(httpServletRequestWrapper0);
      
      Class<AssertStmt> class0 = AssertStmt.class;
      ModelBean modelBean0 = ModelGenerator.createModel(class0);
      assertNull(modelBean0.getTotalProperty());
      assertNull(modelBean0.getDestroyMethod());
      assertNull(modelBean0.getCreateMethod());
      assertFalse(modelBean0.isClientIdPropertyAddToWriter());
      assertNull(modelBean0.getWriteAllFields());
      assertNull(modelBean0.getReadMethod());
      assertTrue(modelBean0.isAutodetectTypes());
      assertNull(modelBean0.getUpdateMethod());
      assertEquals("Ext.data.Model", modelBean0.getExtend());
      assertEquals("json", modelBean0.getReader());
      assertNull(modelBean0.getClientIdProperty());
      assertNull(modelBean0.getMessageProperty());
      assertEquals("com.github.javaparser.ast.stmt.AssertStmt", modelBean0.getName());
      assertNull(modelBean0.getVersionProperty());
      assertFalse(modelBean0.isPaging());
      assertNull(modelBean0.getSuccessProperty());
      assertFalse(modelBean0.isDisablePagingParameters());
      assertEquals("json", modelBean0.getWriter());
      assertNull(modelBean0.getRootProperty());
      assertNull(modelBean0.getIdentifier());
      assertNull(modelBean0.getIdProperty());
      assertNotNull(modelBean0);
      
      modelBean0.setRootProperty("uDsAw");
      assertNull(modelBean0.getTotalProperty());
      assertNull(modelBean0.getDestroyMethod());
      assertNull(modelBean0.getCreateMethod());
      assertFalse(modelBean0.isClientIdPropertyAddToWriter());
      assertNull(modelBean0.getWriteAllFields());
      assertNull(modelBean0.getReadMethod());
      assertTrue(modelBean0.isAutodetectTypes());
      assertNull(modelBean0.getUpdateMethod());
      assertEquals("Ext.data.Model", modelBean0.getExtend());
      assertEquals("json", modelBean0.getReader());
      assertNull(modelBean0.getClientIdProperty());
      assertNull(modelBean0.getMessageProperty());
      assertEquals("com.github.javaparser.ast.stmt.AssertStmt", modelBean0.getName());
      assertNull(modelBean0.getVersionProperty());
      assertFalse(modelBean0.isPaging());
      assertNull(modelBean0.getSuccessProperty());
      assertFalse(modelBean0.isDisablePagingParameters());
      assertEquals("json", modelBean0.getWriter());
      assertNull(modelBean0.getIdentifier());
      assertNull(modelBean0.getIdProperty());
      assertEquals("uDsAw", modelBean0.getRootProperty());
      
      Class<String> class1 = String.class;
      ModelBean modelBean1 = ModelGenerator.createModel(class1);
      assertEquals("Ext.data.Model", modelBean1.getExtend());
      assertNull(modelBean1.getReadMethod());
      assertTrue(modelBean1.isAutodetectTypes());
      assertNull(modelBean1.getWriteAllFields());
      assertNull(modelBean1.getUpdateMethod());
      assertEquals("json", modelBean1.getReader());
      assertNull(modelBean1.getMessageProperty());
      assertFalse(modelBean1.isDisablePagingParameters());
      assertNull(modelBean1.getVersionProperty());
      assertFalse(modelBean1.isPaging());
      assertNull(modelBean1.getSuccessProperty());
      assertNull(modelBean1.getClientIdProperty());
      assertEquals("json", modelBean1.getWriter());
      assertFalse(modelBean1.isClientIdPropertyAddToWriter());
      assertNull(modelBean1.getRootProperty());
      assertNull(modelBean1.getDestroyMethod());
      assertNull(modelBean1.getCreateMethod());
      assertNull(modelBean1.getIdentifier());
      assertNull(modelBean1.getIdProperty());
      assertEquals("java.lang.String", modelBean1.getName());
      assertNull(modelBean1.getTotalProperty());
      assertNotSame(modelBean1, modelBean0);
      assertFalse(modelBean1.equals((Object)modelBean0));
      assertNotNull(modelBean1);
      
      HttpServletResponseWrapper httpServletResponseWrapper0 = null;
      try {
        httpServletResponseWrapper0 = new HttpServletResponseWrapper((HttpServletResponse) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Response cannot be null
         //
         verifyException("javax.servlet.ServletResponseWrapper", e);
      }
  }

  @Test(timeout = 4000000)
  public void test014()  throws Throwable  {
      ModelBean modelBean0 = new ModelBean();
      assertNull(modelBean0.getVersionProperty());
      assertFalse(modelBean0.isPaging());
      assertNull(modelBean0.getSuccessProperty());
      assertNull(modelBean0.getIdentifier());
      assertNull(modelBean0.getClientIdProperty());
      assertNull(modelBean0.getRootProperty());
      assertNull(modelBean0.getWriteAllFields());
      assertNull(modelBean0.getUpdateMethod());
      assertEquals("json", modelBean0.getReader());
      assertNull(modelBean0.getCreateMethod());
      assertNull(modelBean0.getMessageProperty());
      assertNull(modelBean0.getDestroyMethod());
      assertNull(modelBean0.getTotalProperty());
      assertNull(modelBean0.getName());
      assertNull(modelBean0.getIdProperty());
      assertNull(modelBean0.getReadMethod());
      assertTrue(modelBean0.isAutodetectTypes());
      assertEquals("json", modelBean0.getWriter());
      assertEquals("Ext.data.Model", modelBean0.getExtend());
      assertFalse(modelBean0.isDisablePagingParameters());
      assertFalse(modelBean0.isClientIdPropertyAddToWriter());
      assertNotNull(modelBean0);
      
      modelBean0.setIdentifier("childNodes");
      assertNull(modelBean0.getVersionProperty());
      assertFalse(modelBean0.isPaging());
      assertNull(modelBean0.getSuccessProperty());
      assertNull(modelBean0.getClientIdProperty());
      assertNull(modelBean0.getRootProperty());
      assertNull(modelBean0.getWriteAllFields());
      assertNull(modelBean0.getUpdateMethod());
      assertEquals("json", modelBean0.getReader());
      assertNull(modelBean0.getCreateMethod());
      assertEquals("childNodes", modelBean0.getIdentifier());
      assertNull(modelBean0.getMessageProperty());
      assertNull(modelBean0.getDestroyMethod());
      assertNull(modelBean0.getTotalProperty());
      assertNull(modelBean0.getName());
      assertNull(modelBean0.getIdProperty());
      assertNull(modelBean0.getReadMethod());
      assertTrue(modelBean0.isAutodetectTypes());
      assertEquals("json", modelBean0.getWriter());
      assertEquals("Ext.data.Model", modelBean0.getExtend());
      assertFalse(modelBean0.isDisablePagingParameters());
      assertFalse(modelBean0.isClientIdPropertyAddToWriter());
      
      OutputFormat outputFormat0 = OutputFormat.TOUCH2;
      String string0 = ModelGenerator.generateJavascript(modelBean0, outputFormat0, false);
      assertNull(modelBean0.getVersionProperty());
      assertFalse(modelBean0.isPaging());
      assertNull(modelBean0.getSuccessProperty());
      assertNull(modelBean0.getClientIdProperty());
      assertNull(modelBean0.getRootProperty());
      assertNull(modelBean0.getWriteAllFields());
      assertNull(modelBean0.getUpdateMethod());
      assertEquals("json", modelBean0.getReader());
      assertNull(modelBean0.getCreateMethod());
      assertEquals("childNodes", modelBean0.getIdentifier());
      assertNull(modelBean0.getMessageProperty());
      assertNull(modelBean0.getDestroyMethod());
      assertNull(modelBean0.getTotalProperty());
      assertNull(modelBean0.getName());
      assertNull(modelBean0.getIdProperty());
      assertNull(modelBean0.getReadMethod());
      assertTrue(modelBean0.isAutodetectTypes());
      assertEquals("json", modelBean0.getWriter());
      assertEquals("Ext.data.Model", modelBean0.getExtend());
      assertFalse(modelBean0.isDisablePagingParameters());
      assertFalse(modelBean0.isClientIdPropertyAddToWriter());
      assertNotNull(string0);
  }

  @Test(timeout = 4000000)
  public void test015()  throws Throwable  {
      Class<Annotation> class0 = Annotation.class;
      IncludeValidation includeValidation0 = IncludeValidation.NONE;
      ModelBean modelBean0 = ModelGenerator.createModel(class0, includeValidation0);
      assertEquals("json", modelBean0.getWriter());
      assertNull(modelBean0.getIdentifier());
      assertFalse(modelBean0.isDisablePagingParameters());
      assertNull(modelBean0.getVersionProperty());
      assertNull(modelBean0.getTotalProperty());
      assertNull(modelBean0.getMessageProperty());
      assertNull(modelBean0.getDestroyMethod());
      assertNull(modelBean0.getCreateMethod());
      assertNull(modelBean0.getRootProperty());
      assertNull(modelBean0.getWriteAllFields());
      assertTrue(modelBean0.isAutodetectTypes());
      assertNull(modelBean0.getIdProperty());
      assertNull(modelBean0.getReadMethod());
      assertEquals("json", modelBean0.getReader());
      assertNull(modelBean0.getUpdateMethod());
      assertFalse(modelBean0.isClientIdPropertyAddToWriter());
      assertNull(modelBean0.getClientIdProperty());
      assertNull(modelBean0.getSuccessProperty());
      assertEquals("java.lang.annotation.Annotation", modelBean0.getName());
      assertFalse(modelBean0.isPaging());
      assertEquals("Ext.data.Model", modelBean0.getExtend());
      assertNotNull(modelBean0);
      
      OutputConfig outputConfig0 = new OutputConfig();
      assertNull(outputConfig0.getIncludeValidation());
      assertNull(outputConfig0.getOutputFormat());
      assertNull(outputConfig0.getLineEnding());
      assertFalse(outputConfig0.isSurroundApiWithQuotes());
      assertFalse(outputConfig0.isUseSingleQuotes());
      assertFalse(outputConfig0.isDebug());
      assertNotNull(outputConfig0);
      
      LineEnding lineEnding0 = LineEnding.SYSTEM;
      outputConfig0.setLineEnding(lineEnding0);
      assertNull(outputConfig0.getIncludeValidation());
      assertNull(outputConfig0.getOutputFormat());
      assertEquals(LineEnding.SYSTEM, outputConfig0.getLineEnding());
      assertFalse(outputConfig0.isSurroundApiWithQuotes());
      assertFalse(outputConfig0.isUseSingleQuotes());
      assertFalse(outputConfig0.isDebug());
      
      String string0 = ModelGenerator.generateJavascript(modelBean0, outputConfig0);
      assertEquals("json", modelBean0.getWriter());
      assertNull(modelBean0.getIdentifier());
      assertFalse(modelBean0.isDisablePagingParameters());
      assertNull(modelBean0.getVersionProperty());
      assertNull(modelBean0.getTotalProperty());
      assertNull(modelBean0.getMessageProperty());
      assertNull(modelBean0.getDestroyMethod());
      assertNull(modelBean0.getCreateMethod());
      assertNull(modelBean0.getRootProperty());
      assertNull(modelBean0.getWriteAllFields());
      assertTrue(modelBean0.isAutodetectTypes());
      assertNull(modelBean0.getIdProperty());
      assertNull(modelBean0.getReadMethod());
      assertEquals("json", modelBean0.getReader());
      assertNull(modelBean0.getUpdateMethod());
      assertFalse(modelBean0.isClientIdPropertyAddToWriter());
      assertNull(modelBean0.getClientIdProperty());
      assertNull(modelBean0.getSuccessProperty());
      assertEquals("java.lang.annotation.Annotation", modelBean0.getName());
      assertFalse(modelBean0.isPaging());
      assertEquals("Ext.data.Model", modelBean0.getExtend());
      assertNull(outputConfig0.getIncludeValidation());
      assertNull(outputConfig0.getOutputFormat());
      assertEquals(LineEnding.SYSTEM, outputConfig0.getLineEnding());
      assertFalse(outputConfig0.isSurroundApiWithQuotes());
      assertFalse(outputConfig0.isUseSingleQuotes());
      assertFalse(outputConfig0.isDebug());
      assertNotNull(string0);
      
      Class<Object> class1 = Object.class;
      ModelBean modelBean1 = ModelGenerator.createModel(class1);
      assertNull(modelBean1.getUpdateMethod());
      assertEquals("java.lang.Object", modelBean1.getName());
      assertTrue(modelBean1.isAutodetectTypes());
      assertEquals("json", modelBean1.getReader());
      assertNull(modelBean1.getReadMethod());
      assertNull(modelBean1.getCreateMethod());
      assertFalse(modelBean1.isClientIdPropertyAddToWriter());
      assertNull(modelBean1.getTotalProperty());
      assertNull(modelBean1.getRootProperty());
      assertEquals("json", modelBean1.getWriter());
      assertNull(modelBean1.getIdentifier());
      assertNull(modelBean1.getIdProperty());
      assertNull(modelBean1.getDestroyMethod());
      assertNull(modelBean1.getSuccessProperty());
      assertFalse(modelBean1.isPaging());
      assertFalse(modelBean1.isDisablePagingParameters());
      assertNull(modelBean1.getMessageProperty());
      assertEquals("Ext.data.Model", modelBean1.getExtend());
      assertNull(modelBean1.getVersionProperty());
      assertNull(modelBean1.getClientIdProperty());
      assertNull(modelBean1.getWriteAllFields());
      assertNotSame(modelBean1, modelBean0);
      assertFalse(modelBean1.equals((Object)modelBean0));
      assertNotNull(modelBean1);
  }

  @Test(timeout = 4000000)
  public void test016()  throws Throwable  {
      Class<ClassExpr> class0 = ClassExpr.class;
      ModelBean modelBean0 = ModelGenerator.createModel(class0);
      assertEquals("json", modelBean0.getWriter());
      assertEquals("com.github.javaparser.ast.expr.ClassExpr", modelBean0.getName());
      assertNull(modelBean0.getTotalProperty());
      assertNull(modelBean0.getRootProperty());
      assertFalse(modelBean0.isPaging());
      assertNull(modelBean0.getDestroyMethod());
      assertNull(modelBean0.getSuccessProperty());
      assertNull(modelBean0.getIdentifier());
      assertFalse(modelBean0.isDisablePagingParameters());
      assertFalse(modelBean0.isClientIdPropertyAddToWriter());
      assertNull(modelBean0.getReadMethod());
      assertEquals("Ext.data.Model", modelBean0.getExtend());
      assertNull(modelBean0.getWriteAllFields());
      assertTrue(modelBean0.isAutodetectTypes());
      assertNull(modelBean0.getIdProperty());
      assertNull(modelBean0.getClientIdProperty());
      assertNull(modelBean0.getCreateMethod());
      assertNull(modelBean0.getVersionProperty());
      assertEquals("json", modelBean0.getReader());
      assertNull(modelBean0.getUpdateMethod());
      assertNull(modelBean0.getMessageProperty());
      assertNotNull(modelBean0);
  }

  @Test(timeout = 4000000)
  public void test017()  throws Throwable  {
      HttpServletResponse httpServletResponse0 = mock(HttpServletResponse.class, new ViolatedAssumptionAnswer());
      doReturn((ServletOutputStream) null).when(httpServletResponse0).getOutputStream();
      IncludeValidation includeValidation0 = IncludeValidation.BUILTIN;
      Class<Object> class0 = Object.class;
      ModelBean modelBean0 = ModelGenerator.createModel(class0, includeValidation0);
      assertEquals("json", modelBean0.getWriter());
      assertNull(modelBean0.getSuccessProperty());
      assertNull(modelBean0.getIdentifier());
      assertNull(modelBean0.getVersionProperty());
      assertFalse(modelBean0.isPaging());
      assertNull(modelBean0.getRootProperty());
      assertNull(modelBean0.getMessageProperty());
      assertEquals("java.lang.Object", modelBean0.getName());
      assertNull(modelBean0.getIdProperty());
      assertNull(modelBean0.getUpdateMethod());
      assertEquals("json", modelBean0.getReader());
      assertNull(modelBean0.getWriteAllFields());
      assertNull(modelBean0.getCreateMethod());
      assertTrue(modelBean0.isAutodetectTypes());
      assertEquals("Ext.data.Model", modelBean0.getExtend());
      assertNull(modelBean0.getDestroyMethod());
      assertNull(modelBean0.getTotalProperty());
      assertNull(modelBean0.getClientIdProperty());
      assertNull(modelBean0.getReadMethod());
      assertFalse(modelBean0.isDisablePagingParameters());
      assertFalse(modelBean0.isClientIdPropertyAddToWriter());
      assertNotNull(modelBean0);
      
      LinkedList<AbstractAssociation> linkedList0 = new LinkedList<AbstractAssociation>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      modelBean0.addAssociations(linkedList0);
      assertEquals("json", modelBean0.getWriter());
      assertNull(modelBean0.getSuccessProperty());
      assertNull(modelBean0.getIdentifier());
      assertNull(modelBean0.getVersionProperty());
      assertFalse(modelBean0.isPaging());
      assertNull(modelBean0.getRootProperty());
      assertNull(modelBean0.getMessageProperty());
      assertEquals("java.lang.Object", modelBean0.getName());
      assertNull(modelBean0.getIdProperty());
      assertNull(modelBean0.getUpdateMethod());
      assertEquals("json", modelBean0.getReader());
      assertNull(modelBean0.getWriteAllFields());
      assertNull(modelBean0.getCreateMethod());
      assertTrue(modelBean0.isAutodetectTypes());
      assertEquals("Ext.data.Model", modelBean0.getExtend());
      assertNull(modelBean0.getDestroyMethod());
      assertNull(modelBean0.getTotalProperty());
      assertNull(modelBean0.getClientIdProperty());
      assertNull(modelBean0.getReadMethod());
      assertFalse(modelBean0.isDisablePagingParameters());
      assertFalse(modelBean0.isClientIdPropertyAddToWriter());
      assertEquals(0, linkedList0.size());
      
      modelBean0.setHasMany((String[]) null);
      assertEquals("json", modelBean0.getWriter());
      assertNull(modelBean0.getSuccessProperty());
      assertNull(modelBean0.getIdentifier());
      assertNull(modelBean0.getVersionProperty());
      assertFalse(modelBean0.isPaging());
      assertNull(modelBean0.getRootProperty());
      assertNull(modelBean0.getMessageProperty());
      assertEquals("java.lang.Object", modelBean0.getName());
      assertNull(modelBean0.getIdProperty());
      assertNull(modelBean0.getUpdateMethod());
      assertEquals("json", modelBean0.getReader());
      assertNull(modelBean0.getWriteAllFields());
      assertNull(modelBean0.getCreateMethod());
      assertTrue(modelBean0.isAutodetectTypes());
      assertEquals("Ext.data.Model", modelBean0.getExtend());
      assertNull(modelBean0.getDestroyMethod());
      assertNull(modelBean0.getTotalProperty());
      assertNull(modelBean0.getClientIdProperty());
      assertNull(modelBean0.getReadMethod());
      assertFalse(modelBean0.isDisablePagingParameters());
      assertFalse(modelBean0.isClientIdPropertyAddToWriter());
      
      OutputFormat outputFormat0 = OutputFormat.TOUCH2;
      String string0 = ModelGenerator.generateJavascript(modelBean0, outputFormat0, true);
      assertEquals("json", modelBean0.getWriter());
      assertNull(modelBean0.getSuccessProperty());
      assertNull(modelBean0.getIdentifier());
      assertNull(modelBean0.getVersionProperty());
      assertFalse(modelBean0.isPaging());
      assertNull(modelBean0.getRootProperty());
      assertNull(modelBean0.getMessageProperty());
      assertEquals("java.lang.Object", modelBean0.getName());
      assertNull(modelBean0.getIdProperty());
      assertNull(modelBean0.getUpdateMethod());
      assertEquals("json", modelBean0.getReader());
      assertNull(modelBean0.getWriteAllFields());
      assertNull(modelBean0.getCreateMethod());
      assertTrue(modelBean0.isAutodetectTypes());
      assertEquals("Ext.data.Model", modelBean0.getExtend());
      assertNull(modelBean0.getDestroyMethod());
      assertNull(modelBean0.getTotalProperty());
      assertNull(modelBean0.getClientIdProperty());
      assertNull(modelBean0.getReadMethod());
      assertFalse(modelBean0.isDisablePagingParameters());
      assertFalse(modelBean0.isClientIdPropertyAddToWriter());
      assertNotNull(string0);
      assertEquals("Ext.define(\"java.lang.Object\",\r\n{\n  extend : \"Ext.data.Model\",\n  config : {\n    fields : [ ]\n  }\n});", string0);
      
      HttpServletRequest httpServletRequest0 = mock(HttpServletRequest.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(httpServletRequest0).getHeader(anyString());
      HttpServletRequestWrapper httpServletRequestWrapper0 = new HttpServletRequestWrapper(httpServletRequest0);
      assertNotNull(httpServletRequestWrapper0);
      
      Class<Object> class1 = Object.class;
      // Undeclared exception!
      try { 
        ModelGenerator.writeModel((HttpServletRequest) httpServletRequestWrapper0, httpServletResponse0, (Class<?>) class1, outputFormat0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("ch.rasc.extclassgenerator.ModelGenerator", e);
      }
  }

  @Test(timeout = 4000000)
  public void test018()  throws Throwable  {
      HttpServletResponse httpServletResponse0 = mock(HttpServletResponse.class, new ViolatedAssumptionAnswer());
      IncludeValidation includeValidation0 = IncludeValidation.BUILTIN;
      Class<Object> class0 = Object.class;
      ModelBean modelBean0 = ModelGenerator.createModel(class0, includeValidation0);
      assertNull(modelBean0.getMessageProperty());
      assertNull(modelBean0.getVersionProperty());
      assertFalse(modelBean0.isPaging());
      assertNull(modelBean0.getSuccessProperty());
      assertFalse(modelBean0.isDisablePagingParameters());
      assertEquals("d1WtV(zz", modelBean0.getReadMethod());
      assertEquals("json", modelBean0.getWriter());
      assertNull(modelBean0.getIdProperty());
      assertNull(modelBean0.getRootProperty());
      assertEquals("`}zU`yZ19?l.J%Se", modelBean0.getIdentifier());
      assertNull(modelBean0.getDestroyMethod());
      assertNull(modelBean0.getTotalProperty());
      assertNull(modelBean0.getCreateMethod());
      assertFalse(modelBean0.isClientIdPropertyAddToWriter());
      assertTrue(modelBean0.isAutodetectTypes());
      assertNull(modelBean0.getWriteAllFields());
      assertNull(modelBean0.getUpdateMethod());
      assertEquals("Ext.data.Model", modelBean0.getExtend());
      assertEquals("json", modelBean0.getReader());
      assertNull(modelBean0.getClientIdProperty());
      assertEquals("java.lang.Object", modelBean0.getName());
      assertNotNull(modelBean0);
      
      OutputConfig outputConfig0 = new OutputConfig();
      assertNull(outputConfig0.getLineEnding());
      assertNull(outputConfig0.getOutputFormat());
      assertNull(outputConfig0.getIncludeValidation());
      assertFalse(outputConfig0.isDebug());
      assertFalse(outputConfig0.isSurroundApiWithQuotes());
      assertFalse(outputConfig0.isUseSingleQuotes());
      assertNotNull(outputConfig0);
      
      IncludeValidation includeValidation1 = IncludeValidation.ALL;
      outputConfig0.setIncludeValidation(includeValidation1);
      assertNull(outputConfig0.getLineEnding());
      assertNull(outputConfig0.getOutputFormat());
      assertEquals(IncludeValidation.ALL, outputConfig0.getIncludeValidation());
      assertFalse(outputConfig0.isDebug());
      assertFalse(outputConfig0.isSurroundApiWithQuotes());
      assertFalse(outputConfig0.isUseSingleQuotes());
      assertNotSame(includeValidation1, includeValidation0);
      assertFalse(includeValidation1.equals((Object)includeValidation0));
      
      Class<Object> class1 = Object.class;
      ModelBean modelBean1 = ModelGenerator.createModel(class1, outputConfig0);
      assertNull(outputConfig0.getLineEnding());
      assertNull(outputConfig0.getOutputFormat());
      assertEquals(IncludeValidation.ALL, outputConfig0.getIncludeValidation());
      assertFalse(outputConfig0.isDebug());
      assertFalse(outputConfig0.isSurroundApiWithQuotes());
      assertFalse(outputConfig0.isUseSingleQuotes());
      assertFalse(modelBean1.isPaging());
      assertNull(modelBean1.getMessageProperty());
      assertNull(modelBean1.getVersionProperty());
      assertNull(modelBean1.getIdentifier());
      assertNull(modelBean1.getSuccessProperty());
      assertNull(modelBean1.getClientIdProperty());
      assertEquals("Ext.data.Model", modelBean1.getExtend());
      assertNull(modelBean1.getRootProperty());
      assertNull(modelBean1.getWriteAllFields());
      assertEquals("json", modelBean1.getReader());
      assertNull(modelBean1.getUpdateMethod());
      assertNull(modelBean1.getDestroyMethod());
      assertNull(modelBean1.getCreateMethod());
      assertEquals("java.lang.Object", modelBean1.getName());
      assertNull(modelBean1.getTotalProperty());
      assertNull(modelBean1.getReadMethod());
      assertTrue(modelBean1.isAutodetectTypes());
      assertNull(modelBean1.getIdProperty());
      assertEquals("json", modelBean1.getWriter());
      assertFalse(modelBean1.isDisablePagingParameters());
      assertFalse(modelBean1.isClientIdPropertyAddToWriter());
      assertSame(class1, class0);
      assertNotSame(modelBean1, modelBean0);
      assertFalse(modelBean1.equals((Object)modelBean0));
      assertNotNull(modelBean1);
  }

  @Test(timeout = 4000000)
  public void test019()  throws Throwable  {
      HttpServletRequest httpServletRequest0 = mock(HttpServletRequest.class, new ViolatedAssumptionAnswer());
      doReturn("\"0b2a94f0e8e3758pca185~971be592ea2\"").when(httpServletRequest0).getHeader(anyString());
      OutputConfig outputConfig0 = new OutputConfig();
      assertFalse(outputConfig0.isSurroundApiWithQuotes());
      assertFalse(outputConfig0.isUseSingleQuotes());
      assertNull(outputConfig0.getLineEnding());
      assertFalse(outputConfig0.isDebug());
      assertNull(outputConfig0.getOutputFormat());
      assertNull(outputConfig0.getIncludeValidation());
      assertNotNull(outputConfig0);
      
      OutputFormat outputFormat0 = OutputFormat.TOUCH2;
      outputConfig0.setOutputFormat(outputFormat0);
      assertFalse(outputConfig0.isSurroundApiWithQuotes());
      assertFalse(outputConfig0.isUseSingleQuotes());
      assertNull(outputConfig0.getLineEnding());
      assertFalse(outputConfig0.isDebug());
      assertNull(outputConfig0.getIncludeValidation());
      assertEquals(OutputFormat.TOUCH2, outputConfig0.getOutputFormat());
      
      ModelBean modelBean0 = new ModelBean();
      assertNull(modelBean0.getCreateMethod());
      assertNull(modelBean0.getUpdateMethod());
      assertEquals("json", modelBean0.getReader());
      assertNull(modelBean0.getWriteAllFields());
      assertNull(modelBean0.getTotalProperty());
      assertNull(modelBean0.getDestroyMethod());
      assertNull(modelBean0.getIdProperty());
      assertNull(modelBean0.getClientIdProperty());
      assertEquals("Ext.data.Model", modelBean0.getExtend());
      assertNull(modelBean0.getReadMethod());
      assertTrue(modelBean0.isAutodetectTypes());
      assertFalse(modelBean0.isDisablePagingParameters());
      assertFalse(modelBean0.isClientIdPropertyAddToWriter());
      assertNull(modelBean0.getIdentifier());
      assertNull(modelBean0.getRootProperty());
      assertNull(modelBean0.getVersionProperty());
      assertFalse(modelBean0.isPaging());
      assertNull(modelBean0.getSuccessProperty());
      assertEquals("json", modelBean0.getWriter());
      assertNull(modelBean0.getName());
      assertNull(modelBean0.getMessageProperty());
      assertNotNull(modelBean0);
      
      modelBean0.setClientIdProperty("In1o;]?^DL");
      assertNull(modelBean0.getCreateMethod());
      assertNull(modelBean0.getUpdateMethod());
      assertEquals("json", modelBean0.getReader());
      assertNull(modelBean0.getWriteAllFields());
      assertNull(modelBean0.getTotalProperty());
      assertNull(modelBean0.getDestroyMethod());
      assertNull(modelBean0.getIdProperty());
      assertEquals("Ext.data.Model", modelBean0.getExtend());
      assertNull(modelBean0.getReadMethod());
      assertEquals("In1o;]?^DL", modelBean0.getClientIdProperty());
      assertTrue(modelBean0.isAutodetectTypes());
      assertFalse(modelBean0.isDisablePagingParameters());
      assertFalse(modelBean0.isClientIdPropertyAddToWriter());
      assertNull(modelBean0.getIdentifier());
      assertNull(modelBean0.getRootProperty());
      assertNull(modelBean0.getVersionProperty());
      assertFalse(modelBean0.isPaging());
      assertNull(modelBean0.getSuccessProperty());
      assertEquals("json", modelBean0.getWriter());
      assertNull(modelBean0.getName());
      assertNull(modelBean0.getMessageProperty());
      
      String string0 = ModelGenerator.generateJavascript(modelBean0, outputConfig0);
      assertFalse(outputConfig0.isSurroundApiWithQuotes());
      assertFalse(outputConfig0.isUseSingleQuotes());
      assertNull(outputConfig0.getLineEnding());
      assertFalse(outputConfig0.isDebug());
      assertNull(outputConfig0.getIncludeValidation());
      assertEquals(OutputFormat.TOUCH2, outputConfig0.getOutputFormat());
      assertNull(modelBean0.getCreateMethod());
      assertNull(modelBean0.getUpdateMethod());
      assertEquals("json", modelBean0.getReader());
      assertNull(modelBean0.getWriteAllFields());
      assertNull(modelBean0.getTotalProperty());
      assertNull(modelBean0.getDestroyMethod());
      assertNull(modelBean0.getIdProperty());
      assertEquals("Ext.data.Model", modelBean0.getExtend());
      assertNull(modelBean0.getReadMethod());
      assertEquals("In1o;]?^DL", modelBean0.getClientIdProperty());
      assertTrue(modelBean0.isAutodetectTypes());
      assertFalse(modelBean0.isDisablePagingParameters());
      assertFalse(modelBean0.isClientIdPropertyAddToWriter());
      assertNull(modelBean0.getIdentifier());
      assertNull(modelBean0.getRootProperty());
      assertNull(modelBean0.getVersionProperty());
      assertFalse(modelBean0.isPaging());
      assertNull(modelBean0.getSuccessProperty());
      assertEquals("json", modelBean0.getWriter());
      assertNull(modelBean0.getName());
      assertNull(modelBean0.getMessageProperty());
      assertNotNull(string0);
      
      HttpServletResponse httpServletResponse0 = mock(HttpServletResponse.class, new ViolatedAssumptionAnswer());
      doReturn((ServletOutputStream) null).when(httpServletResponse0).getOutputStream();
      HttpServletResponseWrapper httpServletResponseWrapper0 = new HttpServletResponseWrapper(httpServletResponse0);
      assertNotNull(httpServletResponseWrapper0);
      
      // Undeclared exception!
      try { 
        ModelGenerator.writeModel(httpServletRequest0, (HttpServletResponse) httpServletResponseWrapper0, modelBean0, outputConfig0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("ch.rasc.extclassgenerator.ModelGenerator", e);
      }
  }

  @Test(timeout = 4000000)
  public void test020()  throws Throwable  {
      Class<String> class0 = String.class;
      // Undeclared exception!
      try { 
        ModelGenerator.generateJavascript(class0, (OutputConfig) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("ch.rasc.extclassgenerator.ModelGenerator", e);
      }
  }

  @Test(timeout = 4000000)
  public void test021()  throws Throwable  {
      String string0 = "writeAllFields";
      String string1 = ModelGenerator.trimToNull("writeAllFields");
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("writeAllFields", string1);
      
      Class<ConstructorDeclaration> class0 = ConstructorDeclaration.class;
      OutputConfig outputConfig0 = null;
      // Undeclared exception!
      try { 
        ModelGenerator.createModel(class0, (OutputConfig) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("ch.rasc.extclassgenerator.ModelGenerator", e);
      }
  }

  @Test(timeout = 4000000)
  public void test022()  throws Throwable  {
      Class<Annotation> class0 = Annotation.class;
      IncludeValidation includeValidation0 = IncludeValidation.ALL;
      ModelBean modelBean0 = ModelGenerator.createModel(class0, includeValidation0);
      assertNull(modelBean0.getSuccessProperty());
      assertNull(modelBean0.getVersionProperty());
      assertNull(modelBean0.getRootProperty());
      assertEquals("json", modelBean0.getWriter());
      assertNull(modelBean0.getIdentifier());
      assertFalse(modelBean0.isClientIdPropertyAddToWriter());
      assertFalse(modelBean0.isPaging());
      assertFalse(modelBean0.isDisablePagingParameters());
      assertEquals("java.lang.annotation.Annotation", modelBean0.getName());
      assertNull(modelBean0.getReadMethod());
      assertNull(modelBean0.getIdProperty());
      assertNull(modelBean0.getUpdateMethod());
      assertTrue(modelBean0.isAutodetectTypes());
      assertEquals("json", modelBean0.getReader());
      assertEquals("Ext.data.Model", modelBean0.getExtend());
      assertNull(modelBean0.getClientIdProperty());
      assertNull(modelBean0.getWriteAllFields());
      assertNull(modelBean0.getDestroyMethod());
      assertNull(modelBean0.getTotalProperty());
      assertNull(modelBean0.getCreateMethod());
      assertNull(modelBean0.getMessageProperty());
      assertNotNull(modelBean0);
  }

  @Test(timeout = 4000000)
  public void test023()  throws Throwable  {
      Class<Object> class0 = Object.class;
      ModelBean modelBean0 = ModelGenerator.createModel(class0);
      assertFalse(modelBean0.isDisablePagingParameters());
      assertNull(modelBean0.getRootProperty());
      assertNull(modelBean0.getIdentifier());
      assertNull(modelBean0.getMessageProperty());
      assertEquals("json", modelBean0.getWriter());
      assertNull(modelBean0.getVersionProperty());
      assertNull(modelBean0.getTotalProperty());
      assertNull(modelBean0.getCreateMethod());
      assertNull(modelBean0.getIdProperty());
      assertFalse(modelBean0.isClientIdPropertyAddToWriter());
      assertNull(modelBean0.getUpdateMethod());
      assertNull(modelBean0.getWriteAllFields());
      assertNull(modelBean0.getDestroyMethod());
      assertNull(modelBean0.getClientIdProperty());
      assertEquals("Ext.data.Model", modelBean0.getExtend());
      assertNull(modelBean0.getReadMethod());
      assertEquals("java.lang.Object", modelBean0.getName());
      assertFalse(modelBean0.isPaging());
      assertTrue(modelBean0.isAutodetectTypes());
      assertNull(modelBean0.getSuccessProperty());
      assertNotNull(modelBean0);
      assertEquals("json", modelBean0.getReader());
      
      OutputFormat outputFormat0 = OutputFormat.TOUCH2;
      IncludeValidation includeValidation0 = IncludeValidation.BUILTIN;
      boolean boolean0 = false;
      String string0 = ModelGenerator.generateJavascript(class0, outputFormat0, includeValidation0, false);
      assertNotNull(string0);
      assertEquals("Ext.define(\"java.lang.Object\",{extend:\"Ext.data.Model\",config:{fields:[]}});", string0);
      
      ModelGenerator.clearCaches();
      HttpServletRequest httpServletRequest0 = null;
      modelBean0.setReader("Ext.define(\"java.lang.Object\",{extend:\"Ext.data.Model\",config:{fields:[]}});");
      assertFalse(modelBean0.isDisablePagingParameters());
      assertNull(modelBean0.getRootProperty());
      assertNull(modelBean0.getIdentifier());
      assertNull(modelBean0.getMessageProperty());
      assertEquals("json", modelBean0.getWriter());
      assertNull(modelBean0.getVersionProperty());
      assertNull(modelBean0.getTotalProperty());
      assertNull(modelBean0.getCreateMethod());
      assertNull(modelBean0.getIdProperty());
      assertFalse(modelBean0.isClientIdPropertyAddToWriter());
      assertNull(modelBean0.getUpdateMethod());
      assertNull(modelBean0.getWriteAllFields());
      assertNull(modelBean0.getDestroyMethod());
      assertNull(modelBean0.getClientIdProperty());
      assertEquals("Ext.data.Model", modelBean0.getExtend());
      assertNull(modelBean0.getReadMethod());
      assertEquals("java.lang.Object", modelBean0.getName());
      assertFalse(modelBean0.isPaging());
      assertTrue(modelBean0.isAutodetectTypes());
      assertNull(modelBean0.getSuccessProperty());
      
      HttpServletRequestWrapper httpServletRequestWrapper0 = null;
      try {
        httpServletRequestWrapper0 = new HttpServletRequestWrapper((HttpServletRequest) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Request cannot be null
         //
         verifyException("javax.servlet.ServletRequestWrapper", e);
      }
  }

  @Test(timeout = 4000000)
  public void test024()  throws Throwable  {
      Class<ConstructorDeclaration> class0 = ConstructorDeclaration.class;
      OutputConfig outputConfig0 = new OutputConfig();
      assertNull(outputConfig0.getIncludeValidation());
      assertNull(outputConfig0.getOutputFormat());
      assertFalse(outputConfig0.isUseSingleQuotes());
      assertNull(outputConfig0.getLineEnding());
      assertFalse(outputConfig0.isSurroundApiWithQuotes());
      assertFalse(outputConfig0.isDebug());
      assertNotNull(outputConfig0);
      
      IncludeValidation includeValidation0 = IncludeValidation.ALL;
      LineEnding lineEnding0 = LineEnding.LF;
      outputConfig0.setLineEnding(lineEnding0);
      assertNull(outputConfig0.getIncludeValidation());
      assertNull(outputConfig0.getOutputFormat());
      assertEquals(LineEnding.LF, outputConfig0.getLineEnding());
      assertFalse(outputConfig0.isUseSingleQuotes());
      assertFalse(outputConfig0.isSurroundApiWithQuotes());
      assertFalse(outputConfig0.isDebug());
      
      outputConfig0.setIncludeValidation(includeValidation0);
      assertNull(outputConfig0.getOutputFormat());
      assertEquals(LineEnding.LF, outputConfig0.getLineEnding());
      assertFalse(outputConfig0.isUseSingleQuotes());
      assertFalse(outputConfig0.isSurroundApiWithQuotes());
      assertEquals(IncludeValidation.ALL, outputConfig0.getIncludeValidation());
      assertFalse(outputConfig0.isDebug());
      
      LineEnding lineEnding1 = LineEnding.LF;
      outputConfig0.setLineEnding(lineEnding1);
      assertNull(outputConfig0.getOutputFormat());
      assertEquals(LineEnding.LF, outputConfig0.getLineEnding());
      assertFalse(outputConfig0.isUseSingleQuotes());
      assertFalse(outputConfig0.isSurroundApiWithQuotes());
      assertEquals(IncludeValidation.ALL, outputConfig0.getIncludeValidation());
      assertFalse(outputConfig0.isDebug());
      assertSame(lineEnding1, lineEnding0);
      
      OutputFormat outputFormat0 = OutputFormat.TOUCH2;
      outputConfig0.setOutputFormat(outputFormat0);
      assertEquals(OutputFormat.TOUCH2, outputConfig0.getOutputFormat());
      assertEquals(LineEnding.LF, outputConfig0.getLineEnding());
      assertFalse(outputConfig0.isUseSingleQuotes());
      assertFalse(outputConfig0.isSurroundApiWithQuotes());
      assertEquals(IncludeValidation.ALL, outputConfig0.getIncludeValidation());
      assertFalse(outputConfig0.isDebug());
      
      ModelBean modelBean0 = ModelGenerator.createModel(class0, outputConfig0);
      assertEquals(OutputFormat.TOUCH2, outputConfig0.getOutputFormat());
      assertEquals(LineEnding.LF, outputConfig0.getLineEnding());
      assertFalse(outputConfig0.isUseSingleQuotes());
      assertFalse(outputConfig0.isSurroundApiWithQuotes());
      assertEquals(IncludeValidation.ALL, outputConfig0.getIncludeValidation());
      assertFalse(outputConfig0.isDebug());
      assertEquals("json", modelBean0.getWriter());
      assertNull(modelBean0.getIdentifier());
      assertNull(modelBean0.getVersionProperty());
      assertFalse(modelBean0.isDisablePagingParameters());
      assertFalse(modelBean0.isClientIdPropertyAddToWriter());
      assertEquals("Ext.data.Model", modelBean0.getExtend());
      assertFalse(modelBean0.isPaging());
      assertTrue(modelBean0.isAutodetectTypes());
      assertNull(modelBean0.getSuccessProperty());
      assertNull(modelBean0.getReadMethod());
      assertNull(modelBean0.getWriteAllFields());
      assertNull(modelBean0.getIdProperty());
      assertNull(modelBean0.getClientIdProperty());
      assertEquals("json", modelBean0.getReader());
      assertNull(modelBean0.getUpdateMethod());
      assertEquals("com.github.javaparser.ast.body.ConstructorDeclaration", modelBean0.getName());
      assertNull(modelBean0.getDestroyMethod());
      assertNull(modelBean0.getTotalProperty());
      assertNull(modelBean0.getRootProperty());
      assertNull(modelBean0.getMessageProperty());
      assertNull(modelBean0.getCreateMethod());
      assertNotNull(modelBean0);
      
      DispatcherType dispatcherType0 = DispatcherType.FORWARD;
      HttpServletRequest httpServletRequest0 = mock(HttpServletRequest.class, new ViolatedAssumptionAnswer());
      doReturn((Enumeration) null).when(httpServletRequest0).getHeaderNames();
      HttpServletRequestWrapper httpServletRequestWrapper0 = new HttpServletRequestWrapper(httpServletRequest0);
      assertNotNull(httpServletRequestWrapper0);
      
      Enumeration<String> enumeration0 = httpServletRequestWrapper0.getHeaderNames();
      assertNull(enumeration0);
      
      HttpServletRequest httpServletRequest1 = mock(HttpServletRequest.class, new ViolatedAssumptionAnswer());
      doReturn(" within/between ").when(httpServletRequest1).getLocalAddr();
      doReturn((Enumeration<String>) null).when(httpServletRequest1).getParameterNames();
      doReturn((-1149)).when(httpServletRequest1).getRemotePort();
      HttpServletRequestWrapper httpServletRequestWrapper1 = new HttpServletRequestWrapper(httpServletRequest1);
      assertFalse(httpServletRequestWrapper1.equals((Object)httpServletRequestWrapper0));
      assertNotNull(httpServletRequestWrapper1);
      
      Enumeration<String> enumeration1 = httpServletRequestWrapper1.getParameterNames();
      assertNotSame(httpServletRequestWrapper1, httpServletRequestWrapper0);
      assertFalse(httpServletRequestWrapper1.equals((Object)httpServletRequestWrapper0));
      assertNull(enumeration1);
      
      HttpServletResponse httpServletResponse0 = mock(HttpServletResponse.class, new ViolatedAssumptionAnswer());
      doReturn((ServletOutputStream) null).when(httpServletResponse0).getOutputStream();
      HttpServletResponseWrapper httpServletResponseWrapper0 = new HttpServletResponseWrapper(httpServletResponse0);
      assertNotNull(httpServletResponseWrapper0);
      
      ServletOutputStream servletOutputStream0 = httpServletResponseWrapper0.getOutputStream();
      assertNull(servletOutputStream0);
      
      HttpServletResponse httpServletResponse1 = mock(HttpServletResponse.class, new ViolatedAssumptionAnswer());
      String string0 = httpServletRequestWrapper1.getLocalAddr();
      assertNotSame(httpServletRequestWrapper1, httpServletRequestWrapper0);
      assertFalse(httpServletRequestWrapper1.equals((Object)httpServletRequestWrapper0));
      assertNotNull(string0);
      assertEquals(" within/between ", string0);
      
      int int0 = httpServletRequestWrapper1.getRemotePort();
      assertNotSame(httpServletRequestWrapper1, httpServletRequestWrapper0);
      assertFalse(httpServletRequestWrapper1.equals((Object)httpServletRequestWrapper0));
      assertEquals((-1149), int0);
      
      HttpServletResponseWrapper httpServletResponseWrapper1 = new HttpServletResponseWrapper(httpServletResponse1);
      assertFalse(httpServletResponseWrapper1.equals((Object)httpServletResponseWrapper0));
      assertNotNull(httpServletResponseWrapper1);
  }

  @Test(timeout = 4000000)
  public void test025()  throws Throwable  {
      Class<UnaryExpr> class0 = UnaryExpr.class;
      IncludeValidation includeValidation0 = IncludeValidation.ALL;
      ModelBean modelBean0 = ModelGenerator.createModel(class0, includeValidation0);
      assertFalse(modelBean0.isClientIdPropertyAddToWriter());
      assertNull(modelBean0.getDestroyMethod());
      assertEquals("json", modelBean0.getReader());
      assertNull(modelBean0.getUpdateMethod());
      assertEquals("com.github.javaparser.ast.expr.UnaryExpr", modelBean0.getName());
      assertTrue(modelBean0.isAutodetectTypes());
      assertNull(modelBean0.getReadMethod());
      assertNull(modelBean0.getWriteAllFields());
      assertNull(modelBean0.getClientIdProperty());
      assertEquals("Ext.data.Model", modelBean0.getExtend());
      assertFalse(modelBean0.isPaging());
      assertNull(modelBean0.getSuccessProperty());
      assertNull(modelBean0.getMessageProperty());
      assertFalse(modelBean0.isDisablePagingParameters());
      assertNull(modelBean0.getVersionProperty());
      assertNull(modelBean0.getIdProperty());
      assertNull(modelBean0.getCreateMethod());
      assertEquals("json", modelBean0.getWriter());
      assertNull(modelBean0.getIdentifier());
      assertNull(modelBean0.getRootProperty());
      assertNull(modelBean0.getTotalProperty());
      assertNotNull(modelBean0);
  }

  @Test(timeout = 4000000)
  public void test026()  throws Throwable  {
      Class<ModelFieldBean> class0 = ModelFieldBean.class;
      ModelBean modelBean0 = ModelGenerator.createModel(class0);
      assertNull(modelBean0.getIdentifier());
      assertNull(modelBean0.getVersionProperty());
      assertFalse(modelBean0.isPaging());
      assertNull(modelBean0.getSuccessProperty());
      assertFalse(modelBean0.isDisablePagingParameters());
      assertNull(modelBean0.getMessageProperty());
      assertNull(modelBean0.getDestroyMethod());
      assertEquals("json", modelBean0.getWriter());
      assertNull(modelBean0.getTotalProperty());
      assertNull(modelBean0.getIdProperty());
      assertNull(modelBean0.getRootProperty());
      assertEquals("json", modelBean0.getReader());
      assertNull(modelBean0.getUpdateMethod());
      assertNull(modelBean0.getCreateMethod());
      assertEquals("ch.rasc.extclassgenerator.ModelFieldBean", modelBean0.getName());
      assertTrue(modelBean0.isAutodetectTypes());
      assertNull(modelBean0.getReadMethod());
      assertFalse(modelBean0.isClientIdPropertyAddToWriter());
      assertEquals("Ext.data.Model", modelBean0.getExtend());
      assertNull(modelBean0.getWriteAllFields());
      assertNull(modelBean0.getClientIdProperty());
      assertNotNull(modelBean0);
      
      modelBean0.setIdentifier("sequential");
      assertNull(modelBean0.getVersionProperty());
      assertFalse(modelBean0.isPaging());
      assertNull(modelBean0.getSuccessProperty());
      assertFalse(modelBean0.isDisablePagingParameters());
      assertNull(modelBean0.getMessageProperty());
      assertNull(modelBean0.getDestroyMethod());
      assertEquals("json", modelBean0.getWriter());
      assertNull(modelBean0.getTotalProperty());
      assertNull(modelBean0.getIdProperty());
      assertNull(modelBean0.getRootProperty());
      assertEquals("json", modelBean0.getReader());
      assertNull(modelBean0.getUpdateMethod());
      assertNull(modelBean0.getCreateMethod());
      assertEquals("ch.rasc.extclassgenerator.ModelFieldBean", modelBean0.getName());
      assertTrue(modelBean0.isAutodetectTypes());
      assertNull(modelBean0.getReadMethod());
      assertEquals("sequential", modelBean0.getIdentifier());
      assertFalse(modelBean0.isClientIdPropertyAddToWriter());
      assertEquals("Ext.data.Model", modelBean0.getExtend());
      assertNull(modelBean0.getWriteAllFields());
      assertNull(modelBean0.getClientIdProperty());
      
      OutputFormat outputFormat0 = OutputFormat.EXTJS5;
      String string0 = ModelGenerator.generateJavascript(modelBean0, outputFormat0, true);
      assertNull(modelBean0.getVersionProperty());
      assertFalse(modelBean0.isPaging());
      assertNull(modelBean0.getSuccessProperty());
      assertFalse(modelBean0.isDisablePagingParameters());
      assertNull(modelBean0.getMessageProperty());
      assertNull(modelBean0.getDestroyMethod());
      assertEquals("json", modelBean0.getWriter());
      assertNull(modelBean0.getTotalProperty());
      assertNull(modelBean0.getIdProperty());
      assertNull(modelBean0.getRootProperty());
      assertEquals("json", modelBean0.getReader());
      assertNull(modelBean0.getUpdateMethod());
      assertNull(modelBean0.getCreateMethod());
      assertEquals("ch.rasc.extclassgenerator.ModelFieldBean", modelBean0.getName());
      assertTrue(modelBean0.isAutodetectTypes());
      assertNull(modelBean0.getReadMethod());
      assertEquals("sequential", modelBean0.getIdentifier());
      assertFalse(modelBean0.isClientIdPropertyAddToWriter());
      assertEquals("Ext.data.Model", modelBean0.getExtend());
      assertNull(modelBean0.getWriteAllFields());
      assertNull(modelBean0.getClientIdProperty());
      assertNotNull(string0);
  }

  @Test(timeout = 4000000)
  public void test027()  throws Throwable  {
      Class<HttpUpgradeHandler> class0 = HttpUpgradeHandler.class;
      ModelBean modelBean0 = ModelGenerator.createModel(class0);
      assertNull(modelBean0.getMessageProperty());
      assertFalse(modelBean0.isPaging());
      assertNull(modelBean0.getSuccessProperty());
      assertFalse(modelBean0.isDisablePagingParameters());
      assertNull(modelBean0.getReadMethod());
      assertEquals("json", modelBean0.getWriter());
      assertNull(modelBean0.getIdentifier());
      assertNull(modelBean0.getRootProperty());
      assertNull(modelBean0.getIdProperty());
      assertNull(modelBean0.getDestroyMethod());
      assertNull(modelBean0.getTotalProperty());
      assertFalse(modelBean0.isClientIdPropertyAddToWriter());
      assertNull(modelBean0.getCreateMethod());
      assertNull(modelBean0.getWriteAllFields());
      assertTrue(modelBean0.isAutodetectTypes());
      assertEquals("json", modelBean0.getReader());
      assertNull(modelBean0.getUpdateMethod());
      assertEquals("Ext.data.Model", modelBean0.getExtend());
      assertNull(modelBean0.getClientIdProperty());
      assertNull(modelBean0.getVersionProperty());
      assertEquals("javax.servlet.http.HttpUpgradeHandler", modelBean0.getName());
      assertNotNull(modelBean0);
      
      OutputConfig outputConfig0 = new OutputConfig();
      assertFalse(outputConfig0.isDebug());
      assertFalse(outputConfig0.isSurroundApiWithQuotes());
      assertFalse(outputConfig0.isUseSingleQuotes());
      assertNull(outputConfig0.getLineEnding());
      assertNull(outputConfig0.getIncludeValidation());
      assertNull(outputConfig0.getOutputFormat());
      assertNotNull(outputConfig0);
      
      LineEnding lineEnding0 = LineEnding.CRLF;
      outputConfig0.setLineEnding(lineEnding0);
      assertFalse(outputConfig0.isDebug());
      assertEquals(LineEnding.CRLF, outputConfig0.getLineEnding());
      assertFalse(outputConfig0.isSurroundApiWithQuotes());
      assertFalse(outputConfig0.isUseSingleQuotes());
      assertNull(outputConfig0.getIncludeValidation());
      assertNull(outputConfig0.getOutputFormat());
      
      String string0 = ModelGenerator.generateJavascript(modelBean0, outputConfig0);
      assertNull(modelBean0.getMessageProperty());
      assertFalse(modelBean0.isPaging());
      assertNull(modelBean0.getSuccessProperty());
      assertFalse(modelBean0.isDisablePagingParameters());
      assertNull(modelBean0.getReadMethod());
      assertEquals("json", modelBean0.getWriter());
      assertNull(modelBean0.getIdentifier());
      assertNull(modelBean0.getRootProperty());
      assertNull(modelBean0.getIdProperty());
      assertNull(modelBean0.getDestroyMethod());
      assertNull(modelBean0.getTotalProperty());
      assertFalse(modelBean0.isClientIdPropertyAddToWriter());
      assertNull(modelBean0.getCreateMethod());
      assertNull(modelBean0.getWriteAllFields());
      assertTrue(modelBean0.isAutodetectTypes());
      assertEquals("json", modelBean0.getReader());
      assertNull(modelBean0.getUpdateMethod());
      assertEquals("Ext.data.Model", modelBean0.getExtend());
      assertNull(modelBean0.getClientIdProperty());
      assertNull(modelBean0.getVersionProperty());
      assertEquals("javax.servlet.http.HttpUpgradeHandler", modelBean0.getName());
      assertFalse(outputConfig0.isDebug());
      assertEquals(LineEnding.CRLF, outputConfig0.getLineEnding());
      assertFalse(outputConfig0.isSurroundApiWithQuotes());
      assertFalse(outputConfig0.isUseSingleQuotes());
      assertNull(outputConfig0.getIncludeValidation());
      assertNull(outputConfig0.getOutputFormat());
      assertNotNull(string0);
      assertEquals("Ext.define(\"javax.servlet.http.HttpUpgradeHandler\",{extend:\"Ext.data.Model\",config:{fields:[]}});", string0);
      
      String string1 = ModelGenerator.generateJavascript(modelBean0, outputConfig0);
      assertNull(modelBean0.getMessageProperty());
      assertFalse(modelBean0.isPaging());
      assertNull(modelBean0.getSuccessProperty());
      assertFalse(modelBean0.isDisablePagingParameters());
      assertNull(modelBean0.getReadMethod());
      assertEquals("json", modelBean0.getWriter());
      assertNull(modelBean0.getIdentifier());
      assertNull(modelBean0.getRootProperty());
      assertNull(modelBean0.getIdProperty());
      assertNull(modelBean0.getDestroyMethod());
      assertNull(modelBean0.getTotalProperty());
      assertFalse(modelBean0.isClientIdPropertyAddToWriter());
      assertNull(modelBean0.getCreateMethod());
      assertNull(modelBean0.getWriteAllFields());
      assertTrue(modelBean0.isAutodetectTypes());
      assertEquals("json", modelBean0.getReader());
      assertNull(modelBean0.getUpdateMethod());
      assertEquals("Ext.data.Model", modelBean0.getExtend());
      assertNull(modelBean0.getClientIdProperty());
      assertNull(modelBean0.getVersionProperty());
      assertEquals("javax.servlet.http.HttpUpgradeHandler", modelBean0.getName());
      assertFalse(outputConfig0.isDebug());
      assertEquals(LineEnding.CRLF, outputConfig0.getLineEnding());
      assertFalse(outputConfig0.isSurroundApiWithQuotes());
      assertFalse(outputConfig0.isUseSingleQuotes());
      assertNull(outputConfig0.getIncludeValidation());
      assertNull(outputConfig0.getOutputFormat());
      assertNotNull(string1);
      assertEquals("Ext.define(\"javax.servlet.http.HttpUpgradeHandler\",{extend:\"Ext.data.Model\",config:{fields:[]}});", string1);
  }

  @Test(timeout = 4000000)
  public void test028()  throws Throwable  {
      HttpServletRequest httpServletRequest0 = mock(HttpServletRequest.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(httpServletRequest0).getHeader(anyString());
      HttpServletRequestWrapper httpServletRequestWrapper0 = new HttpServletRequestWrapper(httpServletRequest0);
      assertNotNull(httpServletRequestWrapper0);
      
      HttpServletResponse httpServletResponse0 = mock(HttpServletResponse.class, new ViolatedAssumptionAnswer());
      doReturn((ServletOutputStream) null).when(httpServletResponse0).getOutputStream();
      HttpServletResponseWrapper httpServletResponseWrapper0 = new HttpServletResponseWrapper(httpServletResponse0);
      assertNotNull(httpServletResponseWrapper0);
      
      Class<ModelFieldBean> class0 = ModelFieldBean.class;
      IncludeValidation includeValidation0 = IncludeValidation.NONE;
      ModelBean modelBean0 = ModelGenerator.createModel(class0, includeValidation0);
      assertEquals("Ext.data.Model", modelBean0.getExtend());
      assertNull(modelBean0.getClientIdProperty());
      assertNull(modelBean0.getWriteAllFields());
      assertNull(modelBean0.getReadMethod());
      assertTrue(modelBean0.isAutodetectTypes());
      assertFalse(modelBean0.isPaging());
      assertFalse(modelBean0.isDisablePagingParameters());
      assertNull(modelBean0.getRootProperty());
      assertNull(modelBean0.getDestroyMethod());
      assertNull(modelBean0.getIdentifier());
      assertNull(modelBean0.getIdProperty());
      assertFalse(modelBean0.isClientIdPropertyAddToWriter());
      assertEquals("ch.rasc.extclassgenerator.ModelFieldBean", modelBean0.getName());
      assertEquals("json", modelBean0.getWriter());
      assertNull(modelBean0.getTotalProperty());
      assertNull(modelBean0.getSuccessProperty());
      assertNull(modelBean0.getVersionProperty());
      assertNull(modelBean0.getCreateMethod());
      assertNull(modelBean0.getMessageProperty());
      assertNull(modelBean0.getUpdateMethod());
      assertEquals("json", modelBean0.getReader());
      assertNotNull(modelBean0);
      
      OutputFormat outputFormat0 = OutputFormat.EXTJS4;
      // Undeclared exception!
      try { 
        ModelGenerator.writeModel((HttpServletRequest) httpServletRequestWrapper0, (HttpServletResponse) httpServletResponseWrapper0, modelBean0, outputFormat0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("ch.rasc.extclassgenerator.ModelGenerator", e);
      }
  }

  @Test(timeout = 4000000)
  public void test029()  throws Throwable  {
      Class<Annotation> class0 = Annotation.class;
      ModelBean modelBean0 = ModelGenerator.createModel(class0);
      assertNull(modelBean0.getIdentifier());
      assertFalse(modelBean0.isDisablePagingParameters());
      assertNull(modelBean0.getRootProperty());
      assertEquals("json", modelBean0.getWriter());
      assertNull(modelBean0.getVersionProperty());
      assertNull(modelBean0.getMessageProperty());
      assertNull(modelBean0.getTotalProperty());
      assertEquals("json", modelBean0.getReader());
      assertNull(modelBean0.getUpdateMethod());
      assertNull(modelBean0.getCreateMethod());
      assertNull(modelBean0.getIdProperty());
      assertNull(modelBean0.getDestroyMethod());
      assertNull(modelBean0.getWriteAllFields());
      assertNull(modelBean0.getClientIdProperty());
      assertFalse(modelBean0.isClientIdPropertyAddToWriter());
      assertNull(modelBean0.getReadMethod());
      assertTrue(modelBean0.isAutodetectTypes());
      assertEquals("Ext.data.Model", modelBean0.getExtend());
      assertEquals("java.lang.annotation.Annotation", modelBean0.getName());
      assertFalse(modelBean0.isPaging());
      assertNull(modelBean0.getSuccessProperty());
      assertNotNull(modelBean0);
      
      OutputConfig outputConfig0 = new OutputConfig();
      assertNull(outputConfig0.getIncludeValidation());
      assertNull(outputConfig0.getOutputFormat());
      assertFalse(outputConfig0.isUseSingleQuotes());
      assertFalse(outputConfig0.isDebug());
      assertNull(outputConfig0.getLineEnding());
      assertFalse(outputConfig0.isSurroundApiWithQuotes());
      assertNotNull(outputConfig0);
      
      String string0 = ModelGenerator.generateJavascript(modelBean0, outputConfig0);
      assertNull(modelBean0.getIdentifier());
      assertFalse(modelBean0.isDisablePagingParameters());
      assertNull(modelBean0.getRootProperty());
      assertEquals("json", modelBean0.getWriter());
      assertNull(modelBean0.getVersionProperty());
      assertNull(modelBean0.getMessageProperty());
      assertNull(modelBean0.getTotalProperty());
      assertEquals("json", modelBean0.getReader());
      assertNull(modelBean0.getUpdateMethod());
      assertNull(modelBean0.getCreateMethod());
      assertNull(modelBean0.getIdProperty());
      assertNull(modelBean0.getDestroyMethod());
      assertNull(modelBean0.getWriteAllFields());
      assertNull(modelBean0.getClientIdProperty());
      assertFalse(modelBean0.isClientIdPropertyAddToWriter());
      assertNull(modelBean0.getReadMethod());
      assertTrue(modelBean0.isAutodetectTypes());
      assertEquals("Ext.data.Model", modelBean0.getExtend());
      assertEquals("java.lang.annotation.Annotation", modelBean0.getName());
      assertFalse(modelBean0.isPaging());
      assertNull(modelBean0.getSuccessProperty());
      assertNull(outputConfig0.getIncludeValidation());
      assertNull(outputConfig0.getOutputFormat());
      assertFalse(outputConfig0.isUseSingleQuotes());
      assertFalse(outputConfig0.isDebug());
      assertNull(outputConfig0.getLineEnding());
      assertFalse(outputConfig0.isSurroundApiWithQuotes());
      assertNotNull(string0);
  }

  @Test(timeout = 4000000)
  public void test030()  throws Throwable  {
      OutputConfig outputConfig0 = new OutputConfig();
      assertFalse(outputConfig0.isUseSingleQuotes());
      assertNull(outputConfig0.getLineEnding());
      assertNull(outputConfig0.getIncludeValidation());
      assertFalse(outputConfig0.isDebug());
      assertNull(outputConfig0.getOutputFormat());
      assertNotNull(outputConfig0);
      
      outputConfig0.setSurroundApiWithQuotes(true);
      assertFalse(outputConfig0.isUseSingleQuotes());
      assertNull(outputConfig0.getLineEnding());
      assertNull(outputConfig0.getIncludeValidation());
      assertFalse(outputConfig0.isDebug());
      assertNull(outputConfig0.getOutputFormat());
      
      ModelBean modelBean0 = new ModelBean();
      assertNull(modelBean0.getName());
      assertEquals("json", modelBean0.getWriter());
      assertNull(modelBean0.getTotalProperty());
      assertNull(modelBean0.getDestroyMethod());
      assertNull(modelBean0.getCreateMethod());
      assertEquals("json", modelBean0.getReader());
      assertNull(modelBean0.getVersionProperty());
      assertNull(modelBean0.getUpdateMethod());
      assertNull(modelBean0.getMessageProperty());
      assertNull(modelBean0.getClientIdProperty());
      assertEquals("Ext.data.Model", modelBean0.getExtend());
      assertTrue(modelBean0.isAutodetectTypes());
      assertNull(modelBean0.getWriteAllFields());
      assertNull(modelBean0.getIdProperty());
      assertNull(modelBean0.getRootProperty());
      assertNull(modelBean0.getSuccessProperty());
      assertNull(modelBean0.getIdentifier());
      assertFalse(modelBean0.isPaging());
      assertNull(modelBean0.getReadMethod());
      assertFalse(modelBean0.isDisablePagingParameters());
      assertFalse(modelBean0.isClientIdPropertyAddToWriter());
      assertNotNull(modelBean0);
      
      String string0 = ModelGenerator.generateJavascript(modelBean0, outputConfig0);
      assertFalse(outputConfig0.isUseSingleQuotes());
      assertNull(outputConfig0.getLineEnding());
      assertNull(outputConfig0.getIncludeValidation());
      assertFalse(outputConfig0.isDebug());
      assertNull(outputConfig0.getOutputFormat());
      assertNull(modelBean0.getName());
      assertEquals("json", modelBean0.getWriter());
      assertNull(modelBean0.getTotalProperty());
      assertNull(modelBean0.getDestroyMethod());
      assertNull(modelBean0.getCreateMethod());
      assertEquals("json", modelBean0.getReader());
      assertNull(modelBean0.getVersionProperty());
      assertNull(modelBean0.getUpdateMethod());
      assertNull(modelBean0.getMessageProperty());
      assertNull(modelBean0.getClientIdProperty());
      assertEquals("Ext.data.Model", modelBean0.getExtend());
      assertTrue(modelBean0.isAutodetectTypes());
      assertNull(modelBean0.getWriteAllFields());
      assertNull(modelBean0.getIdProperty());
      assertNull(modelBean0.getRootProperty());
      assertNull(modelBean0.getSuccessProperty());
      assertNull(modelBean0.getIdentifier());
      assertFalse(modelBean0.isPaging());
      assertNull(modelBean0.getReadMethod());
      assertFalse(modelBean0.isDisablePagingParameters());
      assertFalse(modelBean0.isClientIdPropertyAddToWriter());
      assertNotNull(string0);
      assertEquals("Ext.define(\"null\",{extend:\"Ext.data.Model\",config:{fields:[]}});", string0);
      
      String string1 = ModelGenerator.generateJavascript(modelBean0, outputConfig0);
      assertFalse(outputConfig0.isUseSingleQuotes());
      assertNull(outputConfig0.getLineEnding());
      assertNull(outputConfig0.getIncludeValidation());
      assertFalse(outputConfig0.isDebug());
      assertNull(outputConfig0.getOutputFormat());
      assertNull(modelBean0.getName());
      assertEquals("json", modelBean0.getWriter());
      assertNull(modelBean0.getTotalProperty());
      assertNull(modelBean0.getDestroyMethod());
      assertNull(modelBean0.getCreateMethod());
      assertEquals("json", modelBean0.getReader());
      assertNull(modelBean0.getVersionProperty());
      assertNull(modelBean0.getUpdateMethod());
      assertNull(modelBean0.getMessageProperty());
      assertNull(modelBean0.getClientIdProperty());
      assertEquals("Ext.data.Model", modelBean0.getExtend());
      assertTrue(modelBean0.isAutodetectTypes());
      assertNull(modelBean0.getWriteAllFields());
      assertNull(modelBean0.getIdProperty());
      assertNull(modelBean0.getRootProperty());
      assertNull(modelBean0.getSuccessProperty());
      assertNull(modelBean0.getIdentifier());
      assertFalse(modelBean0.isPaging());
      assertNull(modelBean0.getReadMethod());
      assertFalse(modelBean0.isDisablePagingParameters());
      assertFalse(modelBean0.isClientIdPropertyAddToWriter());
      assertNotNull(string1);
      assertEquals("Ext.define(\"null\",{extend:\"Ext.data.Model\",config:{fields:[]}});", string1);
      
      Class<ReturnStmt> class0 = ReturnStmt.class;
      OutputFormat outputFormat0 = OutputFormat.EXTJS4;
      // Undeclared exception!
      try { 
        ModelGenerator.writeModel((HttpServletRequest) null, (HttpServletResponse) null, class0, outputFormat0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("ch.rasc.extclassgenerator.ModelGenerator", e);
      }
  }

  @Test(timeout = 4000000)
  public void test031()  throws Throwable  {
      ModelBean modelBean0 = new ModelBean();
      assertFalse(modelBean0.isClientIdPropertyAddToWriter());
      assertNull(modelBean0.getTotalProperty());
      assertNull(modelBean0.getName());
      assertNull(modelBean0.getIdentifier());
      assertNull(modelBean0.getIdProperty());
      assertFalse(modelBean0.isDisablePagingParameters());
      assertNull(modelBean0.getRootProperty());
      assertNull(modelBean0.getDestroyMethod());
      assertEquals("json", modelBean0.getWriter());
      assertNull(modelBean0.getClientIdProperty());
      assertNull(modelBean0.getReadMethod());
      assertTrue(modelBean0.isAutodetectTypes());
      assertEquals("Ext.data.Model", modelBean0.getExtend());
      assertFalse(modelBean0.isPaging());
      assertNull(modelBean0.getSuccessProperty());
      assertNull(modelBean0.getCreateMethod());
      assertNull(modelBean0.getMessageProperty());
      assertNull(modelBean0.getWriteAllFields());
      assertNull(modelBean0.getUpdateMethod());
      assertNull(modelBean0.getVersionProperty());
      assertEquals("json", modelBean0.getReader());
      assertNotNull(modelBean0);
      
      modelBean0.setIdentifier("negative");
      assertFalse(modelBean0.isClientIdPropertyAddToWriter());
      assertNull(modelBean0.getTotalProperty());
      assertNull(modelBean0.getName());
      assertEquals("negative", modelBean0.getIdentifier());
      assertNull(modelBean0.getIdProperty());
      assertFalse(modelBean0.isDisablePagingParameters());
      assertNull(modelBean0.getRootProperty());
      assertNull(modelBean0.getDestroyMethod());
      assertEquals("json", modelBean0.getWriter());
      assertNull(modelBean0.getClientIdProperty());
      assertNull(modelBean0.getReadMethod());
      assertTrue(modelBean0.isAutodetectTypes());
      assertEquals("Ext.data.Model", modelBean0.getExtend());
      assertFalse(modelBean0.isPaging());
      assertNull(modelBean0.getSuccessProperty());
      assertNull(modelBean0.getCreateMethod());
      assertNull(modelBean0.getMessageProperty());
      assertNull(modelBean0.getWriteAllFields());
      assertNull(modelBean0.getUpdateMethod());
      assertNull(modelBean0.getVersionProperty());
      assertEquals("json", modelBean0.getReader());
      
      modelBean0.setDisablePagingParameters(false);
      assertFalse(modelBean0.isClientIdPropertyAddToWriter());
      assertNull(modelBean0.getTotalProperty());
      assertNull(modelBean0.getName());
      assertEquals("negative", modelBean0.getIdentifier());
      assertNull(modelBean0.getIdProperty());
      assertFalse(modelBean0.isDisablePagingParameters());
      assertNull(modelBean0.getRootProperty());
      assertNull(modelBean0.getDestroyMethod());
      assertEquals("json", modelBean0.getWriter());
      assertNull(modelBean0.getClientIdProperty());
      assertNull(modelBean0.getReadMethod());
      assertTrue(modelBean0.isAutodetectTypes());
      assertEquals("Ext.data.Model", modelBean0.getExtend());
      assertFalse(modelBean0.isPaging());
      assertNull(modelBean0.getSuccessProperty());
      assertNull(modelBean0.getCreateMethod());
      assertNull(modelBean0.getMessageProperty());
      assertNull(modelBean0.getWriteAllFields());
      assertNull(modelBean0.getUpdateMethod());
      assertNull(modelBean0.getVersionProperty());
      assertEquals("json", modelBean0.getReader());
      
      OutputFormat outputFormat0 = OutputFormat.EXTJS5;
      String string0 = ModelGenerator.generateJavascript(modelBean0, outputFormat0, false);
      assertFalse(modelBean0.isClientIdPropertyAddToWriter());
      assertNull(modelBean0.getTotalProperty());
      assertNull(modelBean0.getName());
      assertEquals("negative", modelBean0.getIdentifier());
      assertNull(modelBean0.getIdProperty());
      assertFalse(modelBean0.isDisablePagingParameters());
      assertNull(modelBean0.getRootProperty());
      assertNull(modelBean0.getDestroyMethod());
      assertEquals("json", modelBean0.getWriter());
      assertNull(modelBean0.getClientIdProperty());
      assertNull(modelBean0.getReadMethod());
      assertTrue(modelBean0.isAutodetectTypes());
      assertEquals("Ext.data.Model", modelBean0.getExtend());
      assertFalse(modelBean0.isPaging());
      assertNull(modelBean0.getSuccessProperty());
      assertNull(modelBean0.getCreateMethod());
      assertNull(modelBean0.getMessageProperty());
      assertNull(modelBean0.getWriteAllFields());
      assertNull(modelBean0.getUpdateMethod());
      assertNull(modelBean0.getVersionProperty());
      assertEquals("json", modelBean0.getReader());
      assertNotNull(string0);
      
      Class<String> class0 = String.class;
      ModelBean modelBean1 = ModelGenerator.createModel(class0);
      assertNull(modelBean1.getReadMethod());
      assertTrue(modelBean1.isAutodetectTypes());
      assertNull(modelBean1.getWriteAllFields());
      assertEquals("Ext.data.Model", modelBean1.getExtend());
      assertEquals("json", modelBean1.getReader());
      assertNull(modelBean1.getUpdateMethod());
      assertNull(modelBean1.getCreateMethod());
      assertNull(modelBean1.getMessageProperty());
      assertNull(modelBean1.getVersionProperty());
      assertFalse(modelBean1.isPaging());
      assertNull(modelBean1.getSuccessProperty());
      assertNull(modelBean1.getClientIdProperty());
      assertEquals("json", modelBean1.getWriter());
      assertFalse(modelBean1.isDisablePagingParameters());
      assertFalse(modelBean1.isClientIdPropertyAddToWriter());
      assertEquals("java.lang.String", modelBean1.getName());
      assertNull(modelBean1.getDestroyMethod());
      assertNull(modelBean1.getTotalProperty());
      assertNull(modelBean1.getIdentifier());
      assertNull(modelBean1.getIdProperty());
      assertNull(modelBean1.getRootProperty());
      assertNotSame(modelBean1, modelBean0);
      assertFalse(modelBean1.equals((Object)modelBean0));
      assertNotNull(modelBean1);
      
      String string1 = ModelGenerator.trimToNull("Cannot update object of type %s (using deserializer for type %s)");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("Cannot update object of type %s (using deserializer for type %s)", string1);
  }

  @Test(timeout = 4000000)
  public void test032()  throws Throwable  {
      HttpServletResponse httpServletResponse0 = mock(HttpServletResponse.class, new ViolatedAssumptionAnswer());
      OutputConfig outputConfig0 = new OutputConfig();
      assertFalse(outputConfig0.isUseSingleQuotes());
      assertNull(outputConfig0.getLineEnding());
      assertNull(outputConfig0.getOutputFormat());
      assertFalse(outputConfig0.isSurroundApiWithQuotes());
      assertFalse(outputConfig0.isDebug());
      assertNull(outputConfig0.getIncludeValidation());
      assertNotNull(outputConfig0);
      
      IncludeValidation includeValidation0 = IncludeValidation.ALL;
      outputConfig0.setIncludeValidation(includeValidation0);
      assertFalse(outputConfig0.isUseSingleQuotes());
      assertNull(outputConfig0.getLineEnding());
      assertNull(outputConfig0.getOutputFormat());
      assertFalse(outputConfig0.isSurroundApiWithQuotes());
      assertEquals(IncludeValidation.ALL, outputConfig0.getIncludeValidation());
      assertFalse(outputConfig0.isDebug());
      
      Class<HttpUpgradeHandler> class0 = HttpUpgradeHandler.class;
      outputConfig0.setUseSingleQuotes(false);
      assertFalse(outputConfig0.isUseSingleQuotes());
      assertNull(outputConfig0.getLineEnding());
      assertNull(outputConfig0.getOutputFormat());
      assertFalse(outputConfig0.isSurroundApiWithQuotes());
      assertEquals(IncludeValidation.ALL, outputConfig0.getIncludeValidation());
      assertFalse(outputConfig0.isDebug());
      
      Class<Object> class1 = Object.class;
      IncludeValidation includeValidation1 = IncludeValidation.BUILTIN;
      ModelBean modelBean0 = ModelGenerator.createModel(class1, includeValidation1);
      assertNull(modelBean0.getTotalProperty());
      assertFalse(modelBean0.isClientIdPropertyAddToWriter());
      assertNull(modelBean0.getDestroyMethod());
      assertEquals("`}zU`yZ19?l.J%Se", modelBean0.getIdentifier());
      assertEquals("d1WtV(zz", modelBean0.getReadMethod());
      assertEquals("json", modelBean0.getWriter());
      assertEquals("java.lang.Object", modelBean0.getName());
      assertFalse(modelBean0.isDisablePagingParameters());
      assertFalse(modelBean0.isPaging());
      assertEquals("Ext.data.Model", modelBean0.getExtend());
      assertNull(modelBean0.getSuccessProperty());
      assertTrue(modelBean0.isAutodetectTypes());
      assertNull(modelBean0.getMessageProperty());
      assertNull(modelBean0.getClientIdProperty());
      assertNull(modelBean0.getWriteAllFields());
      assertNull(modelBean0.getVersionProperty());
      assertNull(modelBean0.getIdProperty());
      assertNull(modelBean0.getUpdateMethod());
      assertEquals("json", modelBean0.getReader());
      assertNull(modelBean0.getRootProperty());
      assertNull(modelBean0.getCreateMethod());
      assertNotSame(includeValidation1, includeValidation0);
      assertFalse(includeValidation1.equals((Object)includeValidation0));
      assertNotNull(modelBean0);
      
      String string0 = ModelGenerator.generateJavascript(modelBean0, outputConfig0);
      assertFalse(outputConfig0.isUseSingleQuotes());
      assertNull(outputConfig0.getLineEnding());
      assertNull(outputConfig0.getOutputFormat());
      assertFalse(outputConfig0.isSurroundApiWithQuotes());
      assertEquals(IncludeValidation.ALL, outputConfig0.getIncludeValidation());
      assertFalse(outputConfig0.isDebug());
      assertNull(modelBean0.getTotalProperty());
      assertFalse(modelBean0.isClientIdPropertyAddToWriter());
      assertNull(modelBean0.getDestroyMethod());
      assertEquals("`}zU`yZ19?l.J%Se", modelBean0.getIdentifier());
      assertEquals("d1WtV(zz", modelBean0.getReadMethod());
      assertEquals("json", modelBean0.getWriter());
      assertEquals("java.lang.Object", modelBean0.getName());
      assertFalse(modelBean0.isDisablePagingParameters());
      assertFalse(modelBean0.isPaging());
      assertEquals("Ext.data.Model", modelBean0.getExtend());
      assertNull(modelBean0.getSuccessProperty());
      assertTrue(modelBean0.isAutodetectTypes());
      assertNull(modelBean0.getMessageProperty());
      assertNull(modelBean0.getClientIdProperty());
      assertNull(modelBean0.getWriteAllFields());
      assertNull(modelBean0.getVersionProperty());
      assertNull(modelBean0.getIdProperty());
      assertNull(modelBean0.getUpdateMethod());
      assertEquals("json", modelBean0.getReader());
      assertNull(modelBean0.getRootProperty());
      assertNull(modelBean0.getCreateMethod());
      assertNotSame(includeValidation1, includeValidation0);
      assertFalse(includeValidation1.equals((Object)includeValidation0));
      assertNotNull(string0);
      
      ModelBean modelBean1 = ModelGenerator.createModel(class0, outputConfig0);
      assertFalse(outputConfig0.isUseSingleQuotes());
      assertNull(outputConfig0.getLineEnding());
      assertNull(outputConfig0.getOutputFormat());
      assertFalse(outputConfig0.isSurroundApiWithQuotes());
      assertEquals(IncludeValidation.ALL, outputConfig0.getIncludeValidation());
      assertFalse(outputConfig0.isDebug());
      assertFalse(modelBean1.isClientIdPropertyAddToWriter());
      assertNull(modelBean1.getTotalProperty());
      assertNull(modelBean1.getIdentifier());
      assertFalse(modelBean1.isDisablePagingParameters());
      assertNull(modelBean1.getRootProperty());
      assertEquals("json", modelBean1.getWriter());
      assertNull(modelBean1.getDestroyMethod());
      assertNull(modelBean1.getIdProperty());
      assertEquals("Ext.data.Model", modelBean1.getExtend());
      assertNull(modelBean1.getClientIdProperty());
      assertNull(modelBean1.getReadMethod());
      assertNull(modelBean1.getMessageProperty());
      assertTrue(modelBean1.isAutodetectTypes());
      assertFalse(modelBean1.isPaging());
      assertNull(modelBean1.getCreateMethod());
      assertEquals("json", modelBean1.getReader());
      assertNull(modelBean1.getSuccessProperty());
      assertNull(modelBean1.getUpdateMethod());
      assertNull(modelBean1.getWriteAllFields());
      assertEquals("javax.servlet.http.HttpUpgradeHandler", modelBean1.getName());
      assertNull(modelBean1.getVersionProperty());
      assertNotSame(modelBean1, modelBean0);
      assertFalse(modelBean1.equals((Object)modelBean0));
      assertNotNull(modelBean1);
      
      System.setCurrentTimeMillis((-854L));
  }

  @Test(timeout = 4000000)
  public void test033()  throws Throwable  {
      String string0 = ModelGenerator.trimToNull("comment");
      assertNotNull(string0);
      assertEquals("comment", string0);
      
      HttpServletRequest httpServletRequest0 = mock(HttpServletRequest.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(httpServletRequest0).getHeader(anyString());
      HttpServletRequestWrapper httpServletRequestWrapper0 = new HttpServletRequestWrapper(httpServletRequest0);
      assertNotNull(httpServletRequestWrapper0);
      
      HttpServletResponse httpServletResponse0 = mock(HttpServletResponse.class, new ViolatedAssumptionAnswer());
      doReturn((ServletOutputStream) null).when(httpServletResponse0).getOutputStream();
      HttpServletResponseWrapper httpServletResponseWrapper0 = new HttpServletResponseWrapper(httpServletResponse0);
      assertNotNull(httpServletResponseWrapper0);
      
      Class<String> class0 = String.class;
      IncludeValidation includeValidation0 = IncludeValidation.ALL;
      ModelBean modelBean0 = ModelGenerator.createModel(class0, includeValidation0);
      assertNull(modelBean0.getTotalProperty());
      assertEquals("json", modelBean0.getReader());
      assertNull(modelBean0.getIdProperty());
      assertNull(modelBean0.getWriteAllFields());
      assertNull(modelBean0.getDestroyMethod());
      assertNull(modelBean0.getUpdateMethod());
      assertNull(modelBean0.getCreateMethod());
      assertNull(modelBean0.getMessageProperty());
      assertFalse(modelBean0.isPaging());
      assertNull(modelBean0.getVersionProperty());
      assertFalse(modelBean0.isDisablePagingParameters());
      assertNull(modelBean0.getRootProperty());
      assertNull(modelBean0.getSuccessProperty());
      assertEquals("json", modelBean0.getWriter());
      assertNull(modelBean0.getIdentifier());
      assertEquals("Ext.data.Model", modelBean0.getExtend());
      assertNull(modelBean0.getClientIdProperty());
      assertTrue(modelBean0.isAutodetectTypes());
      assertFalse(modelBean0.isClientIdPropertyAddToWriter());
      assertNull(modelBean0.getReadMethod());
      assertNotNull(modelBean0);
      
      modelBean0.setName("comment");
      assertNull(modelBean0.getTotalProperty());
      assertEquals("json", modelBean0.getReader());
      assertNull(modelBean0.getIdProperty());
      assertNull(modelBean0.getWriteAllFields());
      assertNull(modelBean0.getDestroyMethod());
      assertNull(modelBean0.getUpdateMethod());
      assertNull(modelBean0.getCreateMethod());
      assertNull(modelBean0.getMessageProperty());
      assertFalse(modelBean0.isPaging());
      assertNull(modelBean0.getVersionProperty());
      assertFalse(modelBean0.isDisablePagingParameters());
      assertNull(modelBean0.getRootProperty());
      assertNull(modelBean0.getSuccessProperty());
      assertEquals("json", modelBean0.getWriter());
      assertNull(modelBean0.getIdentifier());
      assertEquals("Ext.data.Model", modelBean0.getExtend());
      assertNull(modelBean0.getClientIdProperty());
      assertTrue(modelBean0.isAutodetectTypes());
      assertFalse(modelBean0.isClientIdPropertyAddToWriter());
      assertNull(modelBean0.getReadMethod());
      
      EmailValidation emailValidation0 = new EmailValidation("boolean");
      assertEquals("boolean", emailValidation0.getField());
      assertEquals("email", emailValidation0.getType());
      assertNotNull(emailValidation0);
      
      modelBean0.addValidation(emailValidation0);
      assertNull(modelBean0.getTotalProperty());
      assertEquals("json", modelBean0.getReader());
      assertNull(modelBean0.getIdProperty());
      assertNull(modelBean0.getWriteAllFields());
      assertNull(modelBean0.getDestroyMethod());
      assertNull(modelBean0.getUpdateMethod());
      assertNull(modelBean0.getCreateMethod());
      assertNull(modelBean0.getMessageProperty());
      assertFalse(modelBean0.isPaging());
      assertNull(modelBean0.getVersionProperty());
      assertFalse(modelBean0.isDisablePagingParameters());
      assertNull(modelBean0.getRootProperty());
      assertNull(modelBean0.getSuccessProperty());
      assertEquals("json", modelBean0.getWriter());
      assertNull(modelBean0.getIdentifier());
      assertEquals("Ext.data.Model", modelBean0.getExtend());
      assertNull(modelBean0.getClientIdProperty());
      assertTrue(modelBean0.isAutodetectTypes());
      assertFalse(modelBean0.isClientIdPropertyAddToWriter());
      assertNull(modelBean0.getReadMethod());
      assertEquals("boolean", emailValidation0.getField());
      assertEquals("email", emailValidation0.getType());
      
      modelBean0.setCreateMethod("bo'7dJ;UsvrFGu");
      assertNull(modelBean0.getTotalProperty());
      assertEquals("json", modelBean0.getReader());
      assertNull(modelBean0.getIdProperty());
      assertNull(modelBean0.getWriteAllFields());
      assertNull(modelBean0.getDestroyMethod());
      assertNull(modelBean0.getUpdateMethod());
      assertNull(modelBean0.getMessageProperty());
      assertFalse(modelBean0.isPaging());
      assertNull(modelBean0.getVersionProperty());
      assertFalse(modelBean0.isDisablePagingParameters());
      assertNull(modelBean0.getRootProperty());
      assertNull(modelBean0.getSuccessProperty());
      assertEquals("bo'7dJ;UsvrFGu", modelBean0.getCreateMethod());
      assertEquals("json", modelBean0.getWriter());
      assertNull(modelBean0.getIdentifier());
      assertEquals("Ext.data.Model", modelBean0.getExtend());
      assertNull(modelBean0.getClientIdProperty());
      assertTrue(modelBean0.isAutodetectTypes());
      assertFalse(modelBean0.isClientIdPropertyAddToWriter());
      assertNull(modelBean0.getReadMethod());
      
      httpServletResponseWrapper0.setBufferSize(1);
      OutputFormat outputFormat0 = OutputFormat.TOUCH2;
      // Undeclared exception!
      try { 
        ModelGenerator.writeModel((HttpServletRequest) httpServletRequestWrapper0, (HttpServletResponse) httpServletResponseWrapper0, modelBean0, outputFormat0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("ch.rasc.extclassgenerator.ModelGenerator", e);
      }
  }

  @Test(timeout = 4000000)
  public void test034()  throws Throwable  {
      Class<ConstructorDeclaration> class0 = ConstructorDeclaration.class;
      IncludeValidation includeValidation0 = IncludeValidation.ALL;
      ModelBean modelBean0 = ModelGenerator.createModel(class0, includeValidation0);
      assertEquals("com.github.javaparser.ast.body.ConstructorDeclaration", modelBean0.getName());
      assertEquals("json", modelBean0.getReader());
      assertNull(modelBean0.getUpdateMethod());
      assertNull(modelBean0.getTotalProperty());
      assertFalse(modelBean0.isClientIdPropertyAddToWriter());
      assertTrue(modelBean0.isAutodetectTypes());
      assertNull(modelBean0.getReadMethod());
      assertNull(modelBean0.getCreateMethod());
      assertNull(modelBean0.getClientIdProperty());
      assertEquals("Ext.data.Model", modelBean0.getExtend());
      assertNull(modelBean0.getWriteAllFields());
      assertFalse(modelBean0.isDisablePagingParameters());
      assertNull(modelBean0.getVersionProperty());
      assertNull(modelBean0.getRootProperty());
      assertFalse(modelBean0.isPaging());
      assertNull(modelBean0.getSuccessProperty());
      assertNull(modelBean0.getMessageProperty());
      assertNull(modelBean0.getIdProperty());
      assertNull(modelBean0.getDestroyMethod());
      assertEquals("json", modelBean0.getWriter());
      assertNull(modelBean0.getIdentifier());
      assertNotNull(modelBean0);
      
      ModelGenerator.clearCaches();
      OutputConfig outputConfig0 = new OutputConfig();
      assertFalse(outputConfig0.isSurroundApiWithQuotes());
      assertFalse(outputConfig0.isDebug());
      assertNull(outputConfig0.getIncludeValidation());
      assertNull(outputConfig0.getOutputFormat());
      assertNull(outputConfig0.getLineEnding());
      assertNotNull(outputConfig0);
      
      outputConfig0.setUseSingleQuotes(true);
      assertFalse(outputConfig0.isSurroundApiWithQuotes());
      assertFalse(outputConfig0.isDebug());
      assertNull(outputConfig0.getIncludeValidation());
      assertNull(outputConfig0.getOutputFormat());
      assertNull(outputConfig0.getLineEnding());
      
      IncludeValidation includeValidation1 = IncludeValidation.ALL;
      outputConfig0.setIncludeValidation(includeValidation1);
      assertEquals(IncludeValidation.ALL, outputConfig0.getIncludeValidation());
      assertFalse(outputConfig0.isSurroundApiWithQuotes());
      assertFalse(outputConfig0.isDebug());
      assertNull(outputConfig0.getOutputFormat());
      assertNull(outputConfig0.getLineEnding());
      assertSame(includeValidation1, includeValidation0);
      
      String string0 = ModelGenerator.generateJavascript(class0, outputConfig0);
      assertEquals(IncludeValidation.ALL, outputConfig0.getIncludeValidation());
      assertFalse(outputConfig0.isSurroundApiWithQuotes());
      assertFalse(outputConfig0.isDebug());
      assertNull(outputConfig0.getOutputFormat());
      assertNull(outputConfig0.getLineEnding());
      assertNotNull(string0);
      assertEquals("Ext.define('com.github.javaparser.ast.body.ConstructorDeclaration',{extend:'Ext.data.Model',config:{fields:[{name:'ABSOLUTE_BEGIN_LINE',type:'int'},{name:'ABSOLUTE_END_LINE',type:'int'}]}});", string0);
  }

  @Test(timeout = 4000000)
  public void test035()  throws Throwable  {
      System.setCurrentTimeMillis(0L);
      ModelBean modelBean0 = new ModelBean();
      assertNull(modelBean0.getMessageProperty());
      assertFalse(modelBean0.isPaging());
      assertNull(modelBean0.getSuccessProperty());
      assertFalse(modelBean0.isDisablePagingParameters());
      assertNull(modelBean0.getReadMethod());
      assertEquals("json", modelBean0.getWriter());
      assertNull(modelBean0.getIdentifier());
      assertNull(modelBean0.getRootProperty());
      assertNull(modelBean0.getIdProperty());
      assertNull(modelBean0.getDestroyMethod());
      assertNull(modelBean0.getTotalProperty());
      assertNull(modelBean0.getName());
      assertFalse(modelBean0.isClientIdPropertyAddToWriter());
      assertNull(modelBean0.getCreateMethod());
      assertNull(modelBean0.getWriteAllFields());
      assertTrue(modelBean0.isAutodetectTypes());
      assertNull(modelBean0.getUpdateMethod());
      assertEquals("Ext.data.Model", modelBean0.getExtend());
      assertEquals("json", modelBean0.getReader());
      assertNull(modelBean0.getClientIdProperty());
      assertNull(modelBean0.getVersionProperty());
      assertNotNull(modelBean0);
      
      ModelType modelType0 = ModelType.AUTO;
      ModelFieldBean modelFieldBean0 = new ModelFieldBean("BB=f6+mfTX;(]", modelType0);
      assertNull(modelFieldBean0.getAllowNull());
      assertEquals(ModelType.AUTO, modelFieldBean0.getModelType());
      assertNull(modelFieldBean0.getDateFormat());
      assertNull(modelFieldBean0.getCalculate());
      assertNull(modelFieldBean0.getCritical());
      assertNull(modelFieldBean0.getMapping());
      assertNull(modelFieldBean0.getUseNull());
      assertNull(modelFieldBean0.getPersist());
      assertNull(modelFieldBean0.getConvert());
      assertNull(modelFieldBean0.getUnique());
      assertEquals("BB=f6+mfTX;(]", modelFieldBean0.getName());
      assertNull(modelFieldBean0.getType());
      assertNull(modelFieldBean0.getAllowBlank());
      assertNotNull(modelFieldBean0);
      
      ObjectIdentityEqualsVisitor objectIdentityEqualsVisitor0 = new ObjectIdentityEqualsVisitor();
      assertNotNull(objectIdentityEqualsVisitor0);
      
      DoubleLiteralExpr doubleLiteralExpr0 = new DoubleLiteralExpr();
      assertFalse(doubleLiteralExpr0.isSingleMemberAnnotationExpr());
      assertFalse(doubleLiteralExpr0.isNormalAnnotationExpr());
      assertFalse(doubleLiteralExpr0.isObjectCreationExpr());
      assertFalse(doubleLiteralExpr0.isArrayCreationExpr());
      assertFalse(doubleLiteralExpr0.isSuperExpr());
      assertFalse(doubleLiteralExpr0.isConditionalExpr());
      assertFalse(doubleLiteralExpr0.isLambdaExpr());
      assertFalse(doubleLiteralExpr0.isTextBlockLiteralExpr());
      assertFalse(doubleLiteralExpr0.isStringLiteralExpr());
      assertTrue(doubleLiteralExpr0.isLiteralStringValueExpr());
      assertFalse(doubleLiteralExpr0.isCastExpr());
      assertFalse(doubleLiteralExpr0.isIntegerLiteralExpr());
      assertFalse(doubleLiteralExpr0.isLongLiteralExpr());
      assertFalse(doubleLiteralExpr0.isThisExpr());
      assertFalse(doubleLiteralExpr0.isBinaryExpr());
      assertTrue(doubleLiteralExpr0.isDoubleLiteralExpr());
      assertEquals(Node.Parsedness.PARSED, doubleLiteralExpr0.getParsed());
      assertFalse(doubleLiteralExpr0.isInstanceOfExpr());
      assertTrue(doubleLiteralExpr0.isLiteralExpr());
      assertFalse(doubleLiteralExpr0.isBooleanLiteralExpr());
      assertFalse(doubleLiteralExpr0.isCharLiteralExpr());
      assertFalse(doubleLiteralExpr0.isMarkerAnnotationExpr());
      assertFalse(doubleLiteralExpr0.isUnaryExpr());
      assertFalse(doubleLiteralExpr0.isAssignExpr());
      assertFalse(doubleLiteralExpr0.isMethodReferenceExpr());
      assertFalse(doubleLiteralExpr0.isAnnotationExpr());
      assertFalse(doubleLiteralExpr0.isFieldAccessExpr());
      assertFalse(doubleLiteralExpr0.isMethodCallExpr());
      assertFalse(doubleLiteralExpr0.isNameExpr());
      assertFalse(doubleLiteralExpr0.isEnclosedExpr());
      assertFalse(doubleLiteralExpr0.isArrayAccessExpr());
      assertFalse(doubleLiteralExpr0.isArrayInitializerExpr());
      assertFalse(doubleLiteralExpr0.isClassExpr());
      assertFalse(doubleLiteralExpr0.isVariableDeclarationExpr());
      assertEquals("0", doubleLiteralExpr0.getValue());
      assertFalse(doubleLiteralExpr0.isPatternExpr());
      assertFalse(doubleLiteralExpr0.isSwitchExpr());
      assertFalse(doubleLiteralExpr0.isTypeExpr());
      assertFalse(doubleLiteralExpr0.isNullLiteralExpr());
      assertEquals((-1), Node.ABSOLUTE_BEGIN_LINE);
      assertEquals((-2), Node.ABSOLUTE_END_LINE);
      assertNotNull(doubleLiteralExpr0);
      
      Boolean boolean0 = objectIdentityEqualsVisitor0.visit(doubleLiteralExpr0, (Visitable) doubleLiteralExpr0);
      assertFalse(doubleLiteralExpr0.isSingleMemberAnnotationExpr());
      assertFalse(doubleLiteralExpr0.isNormalAnnotationExpr());
      assertFalse(doubleLiteralExpr0.isObjectCreationExpr());
      assertFalse(doubleLiteralExpr0.isArrayCreationExpr());
      assertFalse(doubleLiteralExpr0.isSuperExpr());
      assertFalse(doubleLiteralExpr0.isConditionalExpr());
      assertFalse(doubleLiteralExpr0.isLambdaExpr());
      assertFalse(doubleLiteralExpr0.isTextBlockLiteralExpr());
      assertFalse(doubleLiteralExpr0.isStringLiteralExpr());
      assertTrue(doubleLiteralExpr0.isLiteralStringValueExpr());
      assertFalse(doubleLiteralExpr0.isCastExpr());
      assertFalse(doubleLiteralExpr0.isIntegerLiteralExpr());
      assertFalse(doubleLiteralExpr0.isLongLiteralExpr());
      assertFalse(doubleLiteralExpr0.isThisExpr());
      assertFalse(doubleLiteralExpr0.isBinaryExpr());
      assertTrue(doubleLiteralExpr0.isDoubleLiteralExpr());
      assertEquals(Node.Parsedness.PARSED, doubleLiteralExpr0.getParsed());
      assertFalse(doubleLiteralExpr0.isInstanceOfExpr());
      assertTrue(doubleLiteralExpr0.isLiteralExpr());
      assertFalse(doubleLiteralExpr0.isBooleanLiteralExpr());
      assertFalse(doubleLiteralExpr0.isCharLiteralExpr());
      assertFalse(doubleLiteralExpr0.isMarkerAnnotationExpr());
      assertFalse(doubleLiteralExpr0.isUnaryExpr());
      assertFalse(doubleLiteralExpr0.isAssignExpr());
      assertFalse(doubleLiteralExpr0.isMethodReferenceExpr());
      assertFalse(doubleLiteralExpr0.isAnnotationExpr());
      assertFalse(doubleLiteralExpr0.isFieldAccessExpr());
      assertFalse(doubleLiteralExpr0.isMethodCallExpr());
      assertFalse(doubleLiteralExpr0.isNameExpr());
      assertFalse(doubleLiteralExpr0.isEnclosedExpr());
      assertFalse(doubleLiteralExpr0.isArrayAccessExpr());
      assertFalse(doubleLiteralExpr0.isArrayInitializerExpr());
      assertFalse(doubleLiteralExpr0.isClassExpr());
      assertFalse(doubleLiteralExpr0.isVariableDeclarationExpr());
      assertEquals("0", doubleLiteralExpr0.getValue());
      assertFalse(doubleLiteralExpr0.isPatternExpr());
      assertFalse(doubleLiteralExpr0.isSwitchExpr());
      assertFalse(doubleLiteralExpr0.isTypeExpr());
      assertFalse(doubleLiteralExpr0.isNullLiteralExpr());
      assertEquals((-1), Node.ABSOLUTE_BEGIN_LINE);
      assertEquals((-2), Node.ABSOLUTE_END_LINE);
      assertNotNull(boolean0);
      assertTrue(boolean0);
      
      modelFieldBean0.setPersist(boolean0);
      assertTrue(modelFieldBean0.getPersist());
      assertNull(modelFieldBean0.getAllowNull());
      assertEquals(ModelType.AUTO, modelFieldBean0.getModelType());
      assertNull(modelFieldBean0.getDateFormat());
      assertNull(modelFieldBean0.getCalculate());
      assertNull(modelFieldBean0.getCritical());
      assertNull(modelFieldBean0.getMapping());
      assertNull(modelFieldBean0.getUseNull());
      assertNull(modelFieldBean0.getConvert());
      assertNull(modelFieldBean0.getUnique());
      assertEquals("BB=f6+mfTX;(]", modelFieldBean0.getName());
      assertNull(modelFieldBean0.getType());
      assertNull(modelFieldBean0.getAllowBlank());
      assertFalse(doubleLiteralExpr0.isSingleMemberAnnotationExpr());
      assertFalse(doubleLiteralExpr0.isNormalAnnotationExpr());
      assertFalse(doubleLiteralExpr0.isObjectCreationExpr());
      assertFalse(doubleLiteralExpr0.isArrayCreationExpr());
      assertFalse(doubleLiteralExpr0.isSuperExpr());
      assertFalse(doubleLiteralExpr0.isConditionalExpr());
      assertFalse(doubleLiteralExpr0.isLambdaExpr());
      assertFalse(doubleLiteralExpr0.isTextBlockLiteralExpr());
      assertFalse(doubleLiteralExpr0.isStringLiteralExpr());
      assertTrue(doubleLiteralExpr0.isLiteralStringValueExpr());
      assertFalse(doubleLiteralExpr0.isCastExpr());
      assertFalse(doubleLiteralExpr0.isIntegerLiteralExpr());
      assertFalse(doubleLiteralExpr0.isLongLiteralExpr());
      assertFalse(doubleLiteralExpr0.isThisExpr());
      assertFalse(doubleLiteralExpr0.isBinaryExpr());
      assertTrue(doubleLiteralExpr0.isDoubleLiteralExpr());
      assertEquals(Node.Parsedness.PARSED, doubleLiteralExpr0.getParsed());
      assertFalse(doubleLiteralExpr0.isInstanceOfExpr());
      assertTrue(doubleLiteralExpr0.isLiteralExpr());
      assertFalse(doubleLiteralExpr0.isBooleanLiteralExpr());
      assertFalse(doubleLiteralExpr0.isCharLiteralExpr());
      assertFalse(doubleLiteralExpr0.isMarkerAnnotationExpr());
      assertFalse(doubleLiteralExpr0.isUnaryExpr());
      assertFalse(doubleLiteralExpr0.isAssignExpr());
      assertFalse(doubleLiteralExpr0.isMethodReferenceExpr());
      assertFalse(doubleLiteralExpr0.isAnnotationExpr());
      assertFalse(doubleLiteralExpr0.isFieldAccessExpr());
      assertFalse(doubleLiteralExpr0.isMethodCallExpr());
      assertFalse(doubleLiteralExpr0.isNameExpr());
      assertFalse(doubleLiteralExpr0.isEnclosedExpr());
      assertFalse(doubleLiteralExpr0.isArrayAccessExpr());
      assertFalse(doubleLiteralExpr0.isArrayInitializerExpr());
      assertFalse(doubleLiteralExpr0.isClassExpr());
      assertFalse(doubleLiteralExpr0.isVariableDeclarationExpr());
      assertEquals("0", doubleLiteralExpr0.getValue());
      assertFalse(doubleLiteralExpr0.isPatternExpr());
      assertFalse(doubleLiteralExpr0.isSwitchExpr());
      assertFalse(doubleLiteralExpr0.isTypeExpr());
      assertFalse(doubleLiteralExpr0.isNullLiteralExpr());
      assertEquals((-1), Node.ABSOLUTE_BEGIN_LINE);
      assertEquals((-2), Node.ABSOLUTE_END_LINE);
      
      modelFieldBean0.setMapping("BB=f6+mfTX;(]");
      assertTrue(modelFieldBean0.getPersist());
      assertNull(modelFieldBean0.getAllowNull());
      assertEquals(ModelType.AUTO, modelFieldBean0.getModelType());
      assertNull(modelFieldBean0.getDateFormat());
      assertNull(modelFieldBean0.getCalculate());
      assertEquals("BB=f6+mfTX;(]", modelFieldBean0.getMapping());
      assertNull(modelFieldBean0.getCritical());
      assertNull(modelFieldBean0.getUseNull());
      assertNull(modelFieldBean0.getConvert());
      assertNull(modelFieldBean0.getUnique());
      assertEquals("BB=f6+mfTX;(]", modelFieldBean0.getName());
      assertNull(modelFieldBean0.getType());
      assertNull(modelFieldBean0.getAllowBlank());
      
      modelBean0.addField(modelFieldBean0);
      assertNull(modelBean0.getMessageProperty());
      assertFalse(modelBean0.isPaging());
      assertNull(modelBean0.getSuccessProperty());
      assertFalse(modelBean0.isDisablePagingParameters());
      assertNull(modelBean0.getReadMethod());
      assertEquals("json", modelBean0.getWriter());
      assertNull(modelBean0.getIdentifier());
      assertNull(modelBean0.getRootProperty());
      assertNull(modelBean0.getIdProperty());
      assertNull(modelBean0.getDestroyMethod());
      assertNull(modelBean0.getTotalProperty());
      assertNull(modelBean0.getName());
      assertFalse(modelBean0.isClientIdPropertyAddToWriter());
      assertNull(modelBean0.getCreateMethod());
      assertNull(modelBean0.getWriteAllFields());
      assertTrue(modelBean0.isAutodetectTypes());
      assertNull(modelBean0.getUpdateMethod());
      assertEquals("Ext.data.Model", modelBean0.getExtend());
      assertEquals("json", modelBean0.getReader());
      assertNull(modelBean0.getClientIdProperty());
      assertNull(modelBean0.getVersionProperty());
      assertTrue(modelFieldBean0.getPersist());
      assertNull(modelFieldBean0.getAllowNull());
      assertEquals(ModelType.AUTO, modelFieldBean0.getModelType());
      assertNull(modelFieldBean0.getDateFormat());
      assertNull(modelFieldBean0.getCalculate());
      assertEquals("BB=f6+mfTX;(]", modelFieldBean0.getMapping());
      assertNull(modelFieldBean0.getCritical());
      assertNull(modelFieldBean0.getUseNull());
      assertNull(modelFieldBean0.getConvert());
      assertNull(modelFieldBean0.getUnique());
      assertEquals("BB=f6+mfTX;(]", modelFieldBean0.getName());
      assertNull(modelFieldBean0.getType());
      assertNull(modelFieldBean0.getAllowBlank());
      
      OutputFormat outputFormat0 = OutputFormat.TOUCH2;
      String string0 = ModelGenerator.generateJavascript(modelBean0, outputFormat0, true);
      assertNull(modelBean0.getMessageProperty());
      assertFalse(modelBean0.isPaging());
      assertNull(modelBean0.getSuccessProperty());
      assertFalse(modelBean0.isDisablePagingParameters());
      assertNull(modelBean0.getReadMethod());
      assertEquals("json", modelBean0.getWriter());
      assertNull(modelBean0.getIdentifier());
      assertNull(modelBean0.getRootProperty());
      assertNull(modelBean0.getIdProperty());
      assertNull(modelBean0.getDestroyMethod());
      assertNull(modelBean0.getTotalProperty());
      assertNull(modelBean0.getName());
      assertFalse(modelBean0.isClientIdPropertyAddToWriter());
      assertNull(modelBean0.getCreateMethod());
      assertNull(modelBean0.getWriteAllFields());
      assertTrue(modelBean0.isAutodetectTypes());
      assertNull(modelBean0.getUpdateMethod());
      assertEquals("Ext.data.Model", modelBean0.getExtend());
      assertEquals("json", modelBean0.getReader());
      assertNull(modelBean0.getClientIdProperty());
      assertNull(modelBean0.getVersionProperty());
      assertNotNull(string0);
      assertEquals("Ext.define(\"null\",\r\n{\n  extend : \"Ext.data.Model\",\n  config : {\n    fields : [ {\n      name : \"BB=f6+mfTX;(]\",\n      persist : true,\n      mapping : \"BB=f6+mfTX;(]\"\n    } ]\n  }\n});", string0);
      
      Class<String> class0 = String.class;
      ModelBean modelBean1 = ModelGenerator.createModel(class0);
      assertNull(modelBean1.getCreateMethod());
      assertEquals("json", modelBean1.getReader());
      assertNull(modelBean1.getReadMethod());
      assertNull(modelBean1.getUpdateMethod());
      assertFalse(modelBean1.isClientIdPropertyAddToWriter());
      assertEquals("json", modelBean1.getWriter());
      assertNull(modelBean1.getTotalProperty());
      assertNull(modelBean1.getIdProperty());
      assertNull(modelBean1.getDestroyMethod());
      assertEquals("java.lang.String", modelBean1.getName());
      assertNull(modelBean1.getRootProperty());
      assertNull(modelBean1.getSuccessProperty());
      assertNull(modelBean1.getIdentifier());
      assertFalse(modelBean1.isPaging());
      assertNull(modelBean1.getVersionProperty());
      assertNull(modelBean1.getMessageProperty());
      assertFalse(modelBean1.isDisablePagingParameters());
      assertEquals("Ext.data.Model", modelBean1.getExtend());
      assertTrue(modelBean1.isAutodetectTypes());
      assertNull(modelBean1.getWriteAllFields());
      assertNull(modelBean1.getClientIdProperty());
      assertNotSame(modelBean1, modelBean0);
      assertFalse(modelBean1.equals((Object)modelBean0));
      assertNotNull(modelBean1);
      
      OutputConfig outputConfig0 = new OutputConfig();
      assertNull(outputConfig0.getLineEnding());
      assertFalse(outputConfig0.isSurroundApiWithQuotes());
      assertFalse(outputConfig0.isUseSingleQuotes());
      assertNull(outputConfig0.getIncludeValidation());
      assertNull(outputConfig0.getOutputFormat());
      assertNotNull(outputConfig0);
      
      outputConfig0.setDebug(true);
      assertNull(outputConfig0.getLineEnding());
      assertFalse(outputConfig0.isSurroundApiWithQuotes());
      assertFalse(outputConfig0.isUseSingleQuotes());
      assertNull(outputConfig0.getIncludeValidation());
      assertNull(outputConfig0.getOutputFormat());
      
      String string1 = ModelGenerator.generateJavascript(modelBean1, outputConfig0);
      assertNull(modelBean1.getCreateMethod());
      assertEquals("json", modelBean1.getReader());
      assertNull(modelBean1.getReadMethod());
      assertNull(modelBean1.getUpdateMethod());
      assertFalse(modelBean1.isClientIdPropertyAddToWriter());
      assertEquals("json", modelBean1.getWriter());
      assertNull(modelBean1.getTotalProperty());
      assertNull(modelBean1.getIdProperty());
      assertNull(modelBean1.getDestroyMethod());
      assertEquals("java.lang.String", modelBean1.getName());
      assertNull(modelBean1.getRootProperty());
      assertNull(modelBean1.getSuccessProperty());
      assertNull(modelBean1.getIdentifier());
      assertFalse(modelBean1.isPaging());
      assertNull(modelBean1.getVersionProperty());
      assertNull(modelBean1.getMessageProperty());
      assertFalse(modelBean1.isDisablePagingParameters());
      assertEquals("Ext.data.Model", modelBean1.getExtend());
      assertTrue(modelBean1.isAutodetectTypes());
      assertNull(modelBean1.getWriteAllFields());
      assertNull(modelBean1.getClientIdProperty());
      assertNull(outputConfig0.getLineEnding());
      assertFalse(outputConfig0.isSurroundApiWithQuotes());
      assertFalse(outputConfig0.isUseSingleQuotes());
      assertNull(outputConfig0.getIncludeValidation());
      assertNull(outputConfig0.getOutputFormat());
      assertNotSame(modelBean1, modelBean0);
      assertFalse(string1.equals((Object)string0));
      assertFalse(modelBean1.equals((Object)modelBean0));
      assertNotNull(string1);
      
      String string2 = ModelGenerator.trimToNull("Ext.define(\"null\",\r\n{\n  extend : \"Ext.data.Model\",\n  config : {\n    fields : [ {\n      name : \"BB=f6+mfTX;(]\",\n      persist : true,\n      mapping : \"BB=f6+mfTX;(]\"\n    } ]\n  }\n});");
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("Ext.define(\"null\",\r\n{\n  extend : \"Ext.data.Model\",\n  config : {\n    fields : [ {\n      name : \"BB=f6+mfTX;(]\",\n      persist : true,\n      mapping : \"BB=f6+mfTX;(]\"\n    } ]\n  }\n});", string2);
      
      System.setCurrentTimeMillis(0L);
      Class<HttpUpgradeHandler> class1 = HttpUpgradeHandler.class;
      OutputFormat outputFormat1 = OutputFormat.TOUCH2;
      String string3 = ModelGenerator.generateJavascript(class1, outputFormat1, true);
      assertSame(outputFormat1, outputFormat0);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      assertEquals("Ext.define(\"javax.servlet.http.HttpUpgradeHandler\",\r\n{\n  extend : \"Ext.data.Model\",\n  config : {\n    fields : [ ]\n  }\n});", string3);
      
      Class<String> class2 = String.class;
      IncludeValidation includeValidation0 = IncludeValidation.BUILTIN;
      String string4 = ModelGenerator.generateJavascript(class2, outputFormat1, includeValidation0, true);
      assertSame(outputFormat1, outputFormat0);
      assertSame(class2, class0);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertNotNull(string4);
      assertEquals("Ext.define(\"java.lang.String\",\r\n{\n  extend : \"Ext.data.Model\",\n  config : {\n    fields : [ ]\n  }\n});", string4);
      
      String string5 = ModelGenerator.trimToNull("Ext.define(\"null\",\r\n{\n  extend : \"Ext.data.Model\",\n  config : {\n    fields : [ {\n      name : \"BB=f6+mfTX;(]\",\n      persist : true,\n      mapping : \"BB=f6+mfTX;(]\"\n    } ]\n  }\n});");
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertTrue(string5.equals((Object)string0));
      assertTrue(string5.equals((Object)string2));
      assertNotNull(string5);
      assertEquals("Ext.define(\"null\",\r\n{\n  extend : \"Ext.data.Model\",\n  config : {\n    fields : [ {\n      name : \"BB=f6+mfTX;(]\",\n      persist : true,\n      mapping : \"BB=f6+mfTX;(]\"\n    } ]\n  }\n});", string5);
      
      String string6 = ModelGenerator.generateJavascript(modelBean1, outputFormat1, true);
      assertNull(modelBean1.getCreateMethod());
      assertEquals("json", modelBean1.getReader());
      assertNull(modelBean1.getReadMethod());
      assertNull(modelBean1.getUpdateMethod());
      assertFalse(modelBean1.isClientIdPropertyAddToWriter());
      assertEquals("json", modelBean1.getWriter());
      assertNull(modelBean1.getTotalProperty());
      assertNull(modelBean1.getIdProperty());
      assertNull(modelBean1.getDestroyMethod());
      assertEquals("java.lang.String", modelBean1.getName());
      assertNull(modelBean1.getRootProperty());
      assertNull(modelBean1.getSuccessProperty());
      assertNull(modelBean1.getIdentifier());
      assertFalse(modelBean1.isPaging());
      assertNull(modelBean1.getVersionProperty());
      assertNull(modelBean1.getMessageProperty());
      assertFalse(modelBean1.isDisablePagingParameters());
      assertEquals("Ext.data.Model", modelBean1.getExtend());
      assertTrue(modelBean1.isAutodetectTypes());
      assertNull(modelBean1.getWriteAllFields());
      assertNull(modelBean1.getClientIdProperty());
      assertSame(outputFormat1, outputFormat0);
      assertSame(class0, class2);
      assertNotSame(modelBean1, modelBean0);
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string0));
      assertTrue(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string5));
      assertFalse(modelBean1.equals((Object)modelBean0));
      assertNotNull(string6);
      
      HttpServletRequest httpServletRequest0 = mock(HttpServletRequest.class, new ViolatedAssumptionAnswer());
      HttpServletRequestWrapper httpServletRequestWrapper0 = new HttpServletRequestWrapper(httpServletRequest0);
      assertNotNull(httpServletRequestWrapper0);
      
      OutputConfig outputConfig1 = new OutputConfig();
      assertFalse(outputConfig1.isDebug());
      assertFalse(outputConfig1.isSurroundApiWithQuotes());
      assertNull(outputConfig1.getLineEnding());
      assertNull(outputConfig1.getIncludeValidation());
      assertNull(outputConfig1.getOutputFormat());
      assertFalse(outputConfig1.equals((Object)outputConfig0));
      assertNotNull(outputConfig1);
      
      outputConfig1.setUseSingleQuotes(true);
      assertFalse(outputConfig1.isDebug());
      assertFalse(outputConfig1.isSurroundApiWithQuotes());
      assertNull(outputConfig1.getLineEnding());
      assertNull(outputConfig1.getIncludeValidation());
      assertNull(outputConfig1.getOutputFormat());
      assertNotSame(outputConfig1, outputConfig0);
      assertFalse(outputConfig1.equals((Object)outputConfig0));
      
      String string7 = ModelGenerator.generateJavascript(modelBean1, outputConfig1);
      assertFalse(outputConfig1.isDebug());
      assertFalse(outputConfig1.isSurroundApiWithQuotes());
      assertNull(outputConfig1.getLineEnding());
      assertNull(outputConfig1.getIncludeValidation());
      assertNull(outputConfig1.getOutputFormat());
      assertNull(modelBean1.getCreateMethod());
      assertEquals("json", modelBean1.getReader());
      assertNull(modelBean1.getReadMethod());
      assertNull(modelBean1.getUpdateMethod());
      assertFalse(modelBean1.isClientIdPropertyAddToWriter());
      assertEquals("json", modelBean1.getWriter());
      assertNull(modelBean1.getTotalProperty());
      assertNull(modelBean1.getIdProperty());
      assertNull(modelBean1.getDestroyMethod());
      assertEquals("java.lang.String", modelBean1.getName());
      assertNull(modelBean1.getRootProperty());
      assertNull(modelBean1.getSuccessProperty());
      assertNull(modelBean1.getIdentifier());
      assertFalse(modelBean1.isPaging());
      assertNull(modelBean1.getVersionProperty());
      assertNull(modelBean1.getMessageProperty());
      assertFalse(modelBean1.isDisablePagingParameters());
      assertEquals("Ext.data.Model", modelBean1.getExtend());
      assertTrue(modelBean1.isAutodetectTypes());
      assertNull(modelBean1.getWriteAllFields());
      assertNull(modelBean1.getClientIdProperty());
      assertSame(class0, class2);
      assertNotSame(outputConfig1, outputConfig0);
      assertNotSame(modelBean1, modelBean0);
      assertFalse(outputConfig1.equals((Object)outputConfig0));
      assertFalse(modelBean1.equals((Object)modelBean0));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string3));
      assertNotNull(string7);
  }

  @Test(timeout = 4000000)
  public void test036()  throws Throwable  {
      ModelBean modelBean0 = new ModelBean();
      assertNull(modelBean0.getCreateMethod());
      assertNull(modelBean0.getDestroyMethod());
      assertNull(modelBean0.getUpdateMethod());
      assertFalse(modelBean0.isClientIdPropertyAddToWriter());
      assertEquals("json", modelBean0.getReader());
      assertEquals("Ext.data.Model", modelBean0.getExtend());
      assertNull(modelBean0.getReadMethod());
      assertTrue(modelBean0.isAutodetectTypes());
      assertNull(modelBean0.getWriteAllFields());
      assertNull(modelBean0.getClientIdProperty());
      assertFalse(modelBean0.isDisablePagingParameters());
      assertNull(modelBean0.getVersionProperty());
      assertFalse(modelBean0.isPaging());
      assertNull(modelBean0.getSuccessProperty());
      assertNull(modelBean0.getIdentifier());
      assertNull(modelBean0.getMessageProperty());
      assertEquals("json", modelBean0.getWriter());
      assertNull(modelBean0.getIdProperty());
      assertNull(modelBean0.getName());
      assertNull(modelBean0.getTotalProperty());
      assertNull(modelBean0.getRootProperty());
      assertNotNull(modelBean0);
      
      modelBean0.setIdentifier("identifier");
      assertNull(modelBean0.getCreateMethod());
      assertNull(modelBean0.getDestroyMethod());
      assertNull(modelBean0.getUpdateMethod());
      assertFalse(modelBean0.isClientIdPropertyAddToWriter());
      assertEquals("identifier", modelBean0.getIdentifier());
      assertEquals("json", modelBean0.getReader());
      assertEquals("Ext.data.Model", modelBean0.getExtend());
      assertNull(modelBean0.getReadMethod());
      assertTrue(modelBean0.isAutodetectTypes());
      assertNull(modelBean0.getWriteAllFields());
      assertNull(modelBean0.getClientIdProperty());
      assertFalse(modelBean0.isDisablePagingParameters());
      assertNull(modelBean0.getVersionProperty());
      assertFalse(modelBean0.isPaging());
      assertNull(modelBean0.getSuccessProperty());
      assertNull(modelBean0.getMessageProperty());
      assertEquals("json", modelBean0.getWriter());
      assertNull(modelBean0.getIdProperty());
      assertNull(modelBean0.getName());
      assertNull(modelBean0.getTotalProperty());
      assertNull(modelBean0.getRootProperty());
      
      OutputConfig outputConfig0 = new OutputConfig();
      assertNull(outputConfig0.getIncludeValidation());
      assertNull(outputConfig0.getOutputFormat());
      assertFalse(outputConfig0.isDebug());
      assertNull(outputConfig0.getLineEnding());
      assertFalse(outputConfig0.isSurroundApiWithQuotes());
      assertFalse(outputConfig0.isUseSingleQuotes());
      assertNotNull(outputConfig0);
      
      String string0 = ModelGenerator.generateJavascript(modelBean0, outputConfig0);
      assertNull(modelBean0.getCreateMethod());
      assertNull(modelBean0.getDestroyMethod());
      assertNull(modelBean0.getUpdateMethod());
      assertFalse(modelBean0.isClientIdPropertyAddToWriter());
      assertEquals("identifier", modelBean0.getIdentifier());
      assertEquals("json", modelBean0.getReader());
      assertEquals("Ext.data.Model", modelBean0.getExtend());
      assertNull(modelBean0.getReadMethod());
      assertTrue(modelBean0.isAutodetectTypes());
      assertNull(modelBean0.getWriteAllFields());
      assertNull(modelBean0.getClientIdProperty());
      assertFalse(modelBean0.isDisablePagingParameters());
      assertNull(modelBean0.getVersionProperty());
      assertFalse(modelBean0.isPaging());
      assertNull(modelBean0.getSuccessProperty());
      assertNull(modelBean0.getMessageProperty());
      assertEquals("json", modelBean0.getWriter());
      assertNull(modelBean0.getIdProperty());
      assertNull(modelBean0.getName());
      assertNull(modelBean0.getTotalProperty());
      assertNull(modelBean0.getRootProperty());
      assertNull(outputConfig0.getIncludeValidation());
      assertNull(outputConfig0.getOutputFormat());
      assertFalse(outputConfig0.isDebug());
      assertNull(outputConfig0.getLineEnding());
      assertFalse(outputConfig0.isSurroundApiWithQuotes());
      assertFalse(outputConfig0.isUseSingleQuotes());
      assertNotNull(string0);
  }

  @Test(timeout = 4000000)
  public void test037()  throws Throwable  {
      HttpServletRequest httpServletRequest0 = mock(HttpServletRequest.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(httpServletRequest0).isAsyncSupported();
      HttpServletRequestWrapper httpServletRequestWrapper0 = new HttpServletRequestWrapper(httpServletRequest0);
      assertNotNull(httpServletRequestWrapper0);
      
      HttpServletRequestWrapper httpServletRequestWrapper1 = new HttpServletRequestWrapper(httpServletRequestWrapper0);
      assertFalse(httpServletRequestWrapper1.equals((Object)httpServletRequestWrapper0));
      assertNotNull(httpServletRequestWrapper1);
      
      boolean boolean0 = httpServletRequestWrapper1.isAsyncSupported();
      assertNotSame(httpServletRequestWrapper0, httpServletRequestWrapper1);
      assertNotSame(httpServletRequestWrapper1, httpServletRequestWrapper0);
      assertFalse(httpServletRequestWrapper0.equals((Object)httpServletRequestWrapper1));
      assertFalse(httpServletRequestWrapper1.equals((Object)httpServletRequestWrapper0));
      assertFalse(boolean0);
      
      ModelBean modelBean0 = new ModelBean();
      assertNull(modelBean0.getName());
      assertNull(modelBean0.getDestroyMethod());
      assertNull(modelBean0.getTotalProperty());
      assertNull(modelBean0.getSuccessProperty());
      assertNull(modelBean0.getIdProperty());
      assertEquals("json", modelBean0.getWriter());
      assertNull(modelBean0.getIdentifier());
      assertNull(modelBean0.getReadMethod());
      assertFalse(modelBean0.isDisablePagingParameters());
      assertFalse(modelBean0.isClientIdPropertyAddToWriter());
      assertTrue(modelBean0.isAutodetectTypes());
      assertFalse(modelBean0.isPaging());
      assertEquals("Ext.data.Model", modelBean0.getExtend());
      assertNull(modelBean0.getRootProperty());
      assertNull(modelBean0.getClientIdProperty());
      assertNull(modelBean0.getCreateMethod());
      assertEquals("json", modelBean0.getReader());
      assertNull(modelBean0.getVersionProperty());
      assertNull(modelBean0.getWriteAllFields());
      assertNull(modelBean0.getMessageProperty());
      assertNull(modelBean0.getUpdateMethod());
      assertNotNull(modelBean0);
      
      modelBean0.setMessageProperty("a-&Y.");
      assertNull(modelBean0.getName());
      assertNull(modelBean0.getDestroyMethod());
      assertNull(modelBean0.getTotalProperty());
      assertNull(modelBean0.getSuccessProperty());
      assertNull(modelBean0.getIdProperty());
      assertEquals("json", modelBean0.getWriter());
      assertNull(modelBean0.getIdentifier());
      assertNull(modelBean0.getReadMethod());
      assertFalse(modelBean0.isDisablePagingParameters());
      assertFalse(modelBean0.isClientIdPropertyAddToWriter());
      assertEquals("a-&Y.", modelBean0.getMessageProperty());
      assertTrue(modelBean0.isAutodetectTypes());
      assertFalse(modelBean0.isPaging());
      assertEquals("Ext.data.Model", modelBean0.getExtend());
      assertNull(modelBean0.getRootProperty());
      assertNull(modelBean0.getClientIdProperty());
      assertNull(modelBean0.getCreateMethod());
      assertEquals("json", modelBean0.getReader());
      assertNull(modelBean0.getVersionProperty());
      assertNull(modelBean0.getWriteAllFields());
      assertNull(modelBean0.getUpdateMethod());
      
      modelBean0.setClientIdProperty("{`**za`y$GY");
      assertNull(modelBean0.getName());
      assertNull(modelBean0.getDestroyMethod());
      assertNull(modelBean0.getTotalProperty());
      assertNull(modelBean0.getSuccessProperty());
      assertNull(modelBean0.getIdProperty());
      assertEquals("json", modelBean0.getWriter());
      assertNull(modelBean0.getIdentifier());
      assertNull(modelBean0.getReadMethod());
      assertFalse(modelBean0.isDisablePagingParameters());
      assertFalse(modelBean0.isClientIdPropertyAddToWriter());
      assertEquals("a-&Y.", modelBean0.getMessageProperty());
      assertTrue(modelBean0.isAutodetectTypes());
      assertFalse(modelBean0.isPaging());
      assertEquals("Ext.data.Model", modelBean0.getExtend());
      assertNull(modelBean0.getRootProperty());
      assertNull(modelBean0.getCreateMethod());
      assertEquals("json", modelBean0.getReader());
      assertNull(modelBean0.getVersionProperty());
      assertNull(modelBean0.getWriteAllFields());
      assertNull(modelBean0.getUpdateMethod());
      assertEquals("{`**za`y$GY", modelBean0.getClientIdProperty());
      
      OutputConfig outputConfig0 = new OutputConfig();
      assertNull(outputConfig0.getOutputFormat());
      assertFalse(outputConfig0.isUseSingleQuotes());
      assertNull(outputConfig0.getLineEnding());
      assertNull(outputConfig0.getIncludeValidation());
      assertFalse(outputConfig0.isSurroundApiWithQuotes());
      assertFalse(outputConfig0.isDebug());
      assertNotNull(outputConfig0);
      
      LineEnding lineEnding0 = LineEnding.LF;
      outputConfig0.setLineEnding(lineEnding0);
      assertEquals(LineEnding.LF, outputConfig0.getLineEnding());
      assertNull(outputConfig0.getOutputFormat());
      assertFalse(outputConfig0.isUseSingleQuotes());
      assertNull(outputConfig0.getIncludeValidation());
      assertFalse(outputConfig0.isSurroundApiWithQuotes());
      assertFalse(outputConfig0.isDebug());
      
      String string0 = ModelGenerator.generateJavascript(modelBean0, outputConfig0);
      assertNull(modelBean0.getName());
      assertNull(modelBean0.getDestroyMethod());
      assertNull(modelBean0.getTotalProperty());
      assertNull(modelBean0.getSuccessProperty());
      assertNull(modelBean0.getIdProperty());
      assertEquals("json", modelBean0.getWriter());
      assertNull(modelBean0.getIdentifier());
      assertNull(modelBean0.getReadMethod());
      assertFalse(modelBean0.isDisablePagingParameters());
      assertFalse(modelBean0.isClientIdPropertyAddToWriter());
      assertEquals("a-&Y.", modelBean0.getMessageProperty());
      assertTrue(modelBean0.isAutodetectTypes());
      assertFalse(modelBean0.isPaging());
      assertEquals("Ext.data.Model", modelBean0.getExtend());
      assertNull(modelBean0.getRootProperty());
      assertNull(modelBean0.getCreateMethod());
      assertEquals("json", modelBean0.getReader());
      assertNull(modelBean0.getVersionProperty());
      assertNull(modelBean0.getWriteAllFields());
      assertNull(modelBean0.getUpdateMethod());
      assertEquals("{`**za`y$GY", modelBean0.getClientIdProperty());
      assertEquals(LineEnding.LF, outputConfig0.getLineEnding());
      assertNull(outputConfig0.getOutputFormat());
      assertFalse(outputConfig0.isUseSingleQuotes());
      assertNull(outputConfig0.getIncludeValidation());
      assertFalse(outputConfig0.isSurroundApiWithQuotes());
      assertFalse(outputConfig0.isDebug());
      assertNotNull(string0);
      assertEquals("Ext.define(\"null\",{extend:\"Ext.data.Model\",config:{fields:[],proxy:{type:\"direct\",reader:{messageProperty:\"a-&Y.\"}}}});", string0);
      
      HttpServletRequestWrapper httpServletRequestWrapper2 = new HttpServletRequestWrapper(httpServletRequestWrapper0);
      assertFalse(httpServletRequestWrapper0.equals((Object)httpServletRequestWrapper1));
      assertFalse(httpServletRequestWrapper2.equals((Object)httpServletRequestWrapper0));
      assertFalse(httpServletRequestWrapper2.equals((Object)httpServletRequestWrapper1));
      assertNotNull(httpServletRequestWrapper2);
      
      System.setCurrentTimeMillis((-2147483648L));
  }

  @Test(timeout = 4000000)
  public void test038()  throws Throwable  {
      Class<Object> class0 = Object.class;
      OutputConfig outputConfig0 = new OutputConfig();
      assertNull(outputConfig0.getLineEnding());
      assertNull(outputConfig0.getIncludeValidation());
      assertFalse(outputConfig0.isDebug());
      assertNull(outputConfig0.getOutputFormat());
      assertNotNull(outputConfig0);
      
      outputConfig0.setSurroundApiWithQuotes(true);
      assertNull(outputConfig0.getLineEnding());
      assertNull(outputConfig0.getIncludeValidation());
      assertFalse(outputConfig0.isDebug());
      assertNull(outputConfig0.getOutputFormat());
      
      IncludeValidation includeValidation0 = IncludeValidation.ALL;
      outputConfig0.setIncludeValidation(includeValidation0);
      assertNull(outputConfig0.getLineEnding());
      assertFalse(outputConfig0.isDebug());
      assertEquals(IncludeValidation.ALL, outputConfig0.getIncludeValidation());
      assertNull(outputConfig0.getOutputFormat());
      
      outputConfig0.setUseSingleQuotes(true);
      assertNull(outputConfig0.getLineEnding());
      assertFalse(outputConfig0.isDebug());
      assertEquals(IncludeValidation.ALL, outputConfig0.getIncludeValidation());
      assertNull(outputConfig0.getOutputFormat());
      
      outputConfig0.setUseSingleQuotes(false);
      assertNull(outputConfig0.getLineEnding());
      assertFalse(outputConfig0.isDebug());
      assertEquals(IncludeValidation.ALL, outputConfig0.getIncludeValidation());
      assertNull(outputConfig0.getOutputFormat());
      
      String string0 = ModelGenerator.generateJavascript(class0, outputConfig0);
      assertNull(outputConfig0.getLineEnding());
      assertFalse(outputConfig0.isDebug());
      assertEquals(IncludeValidation.ALL, outputConfig0.getIncludeValidation());
      assertNull(outputConfig0.getOutputFormat());
      assertNotNull(string0);
      assertEquals("Ext.define(\"java.lang.Object\",{extend:\"Ext.data.Model\",config:{fields:[]}});", string0);
      
      HttpServletResponse httpServletResponse0 = mock(HttpServletResponse.class, new ViolatedAssumptionAnswer());
      HttpServletResponseWrapper httpServletResponseWrapper0 = new HttpServletResponseWrapper(httpServletResponse0);
      assertNotNull(httpServletResponseWrapper0);
      
      ModelBean modelBean0 = ModelGenerator.createModel(class0);
      assertNull(modelBean0.getClientIdProperty());
      assertNull(modelBean0.getMessageProperty());
      assertNull(modelBean0.getReadMethod());
      assertFalse(modelBean0.isPaging());
      assertTrue(modelBean0.isAutodetectTypes());
      assertNull(modelBean0.getSuccessProperty());
      assertEquals("json", modelBean0.getReader());
      assertNull(modelBean0.getUpdateMethod());
      assertNull(modelBean0.getCreateMethod());
      assertEquals("java.lang.Object", modelBean0.getName());
      assertNull(modelBean0.getWriteAllFields());
      assertNull(modelBean0.getVersionProperty());
      assertFalse(modelBean0.isClientIdPropertyAddToWriter());
      assertNull(modelBean0.getTotalProperty());
      assertNull(modelBean0.getIdProperty());
      assertNull(modelBean0.getIdentifier());
      assertFalse(modelBean0.isDisablePagingParameters());
      assertNull(modelBean0.getRootProperty());
      assertEquals("json", modelBean0.getWriter());
      assertNull(modelBean0.getDestroyMethod());
      assertNotNull(modelBean0);
      
      OutputFormat outputFormat0 = OutputFormat.TOUCH2;
      // Undeclared exception!
      try { 
        ModelGenerator.writeModel((HttpServletRequest) null, (HttpServletResponse) httpServletResponseWrapper0, modelBean0, outputFormat0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("ch.rasc.extclassgenerator.ModelGenerator", e);
      }
  }

  @Test(timeout = 4000000)
  public void test039()  throws Throwable  {
      Class<ModelFieldBean> class0 = ModelFieldBean.class;
      ModelBean modelBean0 = ModelGenerator.createModel(class0);
      assertFalse(modelBean0.isClientIdPropertyAddToWriter());
      assertNull(modelBean0.getSuccessProperty());
      assertNull(modelBean0.getVersionProperty());
      assertFalse(modelBean0.isPaging());
      assertEquals("json", modelBean0.getReader());
      assertNull(modelBean0.getUpdateMethod());
      assertNull(modelBean0.getWriteAllFields());
      assertNull(modelBean0.getClientIdProperty());
      assertEquals("Ext.data.Model", modelBean0.getExtend());
      assertNull(modelBean0.getMessageProperty());
      assertTrue(modelBean0.isAutodetectTypes());
      assertNull(modelBean0.getReadMethod());
      assertNull(modelBean0.getCreateMethod());
      assertNull(modelBean0.getIdentifier());
      assertFalse(modelBean0.isDisablePagingParameters());
      assertEquals("ch.rasc.extclassgenerator.ModelFieldBean", modelBean0.getName());
      assertNull(modelBean0.getRootProperty());
      assertEquals("json", modelBean0.getWriter());
      assertNull(modelBean0.getTotalProperty());
      assertNull(modelBean0.getDestroyMethod());
      assertNotNull(modelBean0);
      
      modelBean0.setIdProperty("mapping");
      assertFalse(modelBean0.isClientIdPropertyAddToWriter());
      assertNull(modelBean0.getSuccessProperty());
      assertNull(modelBean0.getVersionProperty());
      assertFalse(modelBean0.isPaging());
      assertEquals("json", modelBean0.getReader());
      assertNull(modelBean0.getUpdateMethod());
      assertNull(modelBean0.getWriteAllFields());
      assertNull(modelBean0.getClientIdProperty());
      assertEquals("Ext.data.Model", modelBean0.getExtend());
      assertNull(modelBean0.getMessageProperty());
      assertTrue(modelBean0.isAutodetectTypes());
      assertNull(modelBean0.getReadMethod());
      assertNull(modelBean0.getCreateMethod());
      assertNull(modelBean0.getIdentifier());
      assertFalse(modelBean0.isDisablePagingParameters());
      assertEquals("ch.rasc.extclassgenerator.ModelFieldBean", modelBean0.getName());
      assertNull(modelBean0.getRootProperty());
      assertEquals("json", modelBean0.getWriter());
      assertNull(modelBean0.getTotalProperty());
      assertNull(modelBean0.getDestroyMethod());
      
      OutputFormat outputFormat0 = OutputFormat.TOUCH2;
      String string0 = ModelGenerator.generateJavascript(modelBean0, outputFormat0, true);
      assertFalse(modelBean0.isClientIdPropertyAddToWriter());
      assertNull(modelBean0.getSuccessProperty());
      assertNull(modelBean0.getVersionProperty());
      assertFalse(modelBean0.isPaging());
      assertEquals("json", modelBean0.getReader());
      assertNull(modelBean0.getUpdateMethod());
      assertNull(modelBean0.getWriteAllFields());
      assertNull(modelBean0.getClientIdProperty());
      assertEquals("Ext.data.Model", modelBean0.getExtend());
      assertNull(modelBean0.getMessageProperty());
      assertTrue(modelBean0.isAutodetectTypes());
      assertNull(modelBean0.getReadMethod());
      assertNull(modelBean0.getCreateMethod());
      assertNull(modelBean0.getIdentifier());
      assertFalse(modelBean0.isDisablePagingParameters());
      assertEquals("ch.rasc.extclassgenerator.ModelFieldBean", modelBean0.getName());
      assertNull(modelBean0.getRootProperty());
      assertEquals("json", modelBean0.getWriter());
      assertNull(modelBean0.getTotalProperty());
      assertNull(modelBean0.getDestroyMethod());
      assertNotNull(string0);
      assertEquals("Ext.define(\"ch.rasc.extclassgenerator.ModelFieldBean\",\r\n{\n  extend : \"Ext.data.Model\",\n  config : {\n    idProperty : \"mapping\",\n    fields : [ {\n      name : \"allowBlank\",\n      type : \"boolean\"\n    }, {\n      name : \"allowNull\",\n      type : \"boolean\"\n    }, {\n      name : \"critical\",\n      type : \"boolean\"\n    }, {\n      name : \"persist\",\n      type : \"boolean\"\n    }, {\n      name : \"unique\",\n      type : \"boolean\"\n    }, {\n      name : \"useNull\",\n      type : \"boolean\"\n    }, {\n      name : \"calculate\",\n      type : \"string\"\n    }, {\n      name : \"convert\",\n      type : \"string\"\n    }, {\n      name : \"dateFormat\",\n      type : \"string\"\n    }, {\n      name : \"mapping\",\n      type : \"string\"\n    }, {\n      name : \"name\",\n      type : \"string\"\n    }, {\n      name : \"type\",\n      type : \"string\"\n    } ],\n    proxy : {\n      idParam : \"mapping\",\n      type : \"direct\"\n    }\n  }\n});", string0);
  }

  @Test(timeout = 4000000)
  public void test040()  throws Throwable  {
      HttpServletRequest httpServletRequest0 = mock(HttpServletRequest.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(httpServletRequest0).isAsyncSupported();
      doReturn((String) null).when(httpServletRequest0).getHeader(anyString());
      HttpServletRequestWrapper httpServletRequestWrapper0 = new HttpServletRequestWrapper(httpServletRequest0);
      assertNotNull(httpServletRequestWrapper0);
      
      HttpServletResponse httpServletResponse0 = mock(HttpServletResponse.class, new ViolatedAssumptionAnswer());
      doReturn((ServletOutputStream) null).when(httpServletResponse0).getOutputStream();
      boolean boolean0 = httpServletRequestWrapper0.isAsyncSupported();
      assertFalse(boolean0);
      
      HttpServletResponseWrapper httpServletResponseWrapper0 = new HttpServletResponseWrapper(httpServletResponse0);
      assertNotNull(httpServletResponseWrapper0);
      
      ModelBean modelBean0 = new ModelBean();
      assertNull(modelBean0.getTotalProperty());
      assertNull(modelBean0.getName());
      assertNull(modelBean0.getSuccessProperty());
      assertNull(modelBean0.getIdentifier());
      assertFalse(modelBean0.isDisablePagingParameters());
      assertNull(modelBean0.getRootProperty());
      assertNull(modelBean0.getIdProperty());
      assertNull(modelBean0.getDestroyMethod());
      assertEquals("json", modelBean0.getWriter());
      assertFalse(modelBean0.isClientIdPropertyAddToWriter());
      assertNull(modelBean0.getClientIdProperty());
      assertNull(modelBean0.getReadMethod());
      assertTrue(modelBean0.isAutodetectTypes());
      assertFalse(modelBean0.isPaging());
      assertEquals("Ext.data.Model", modelBean0.getExtend());
      assertNull(modelBean0.getCreateMethod());
      assertNull(modelBean0.getVersionProperty());
      assertNull(modelBean0.getWriteAllFields());
      assertNull(modelBean0.getMessageProperty());
      assertEquals("json", modelBean0.getReader());
      assertNull(modelBean0.getUpdateMethod());
      assertNotNull(modelBean0);
      
      modelBean0.setClientIdProperty("h: !WlZO,k.DcuL");
      assertNull(modelBean0.getTotalProperty());
      assertNull(modelBean0.getName());
      assertNull(modelBean0.getSuccessProperty());
      assertNull(modelBean0.getIdentifier());
      assertFalse(modelBean0.isDisablePagingParameters());
      assertNull(modelBean0.getRootProperty());
      assertNull(modelBean0.getIdProperty());
      assertNull(modelBean0.getDestroyMethod());
      assertEquals("json", modelBean0.getWriter());
      assertFalse(modelBean0.isClientIdPropertyAddToWriter());
      assertEquals("h: !WlZO,k.DcuL", modelBean0.getClientIdProperty());
      assertNull(modelBean0.getReadMethod());
      assertTrue(modelBean0.isAutodetectTypes());
      assertFalse(modelBean0.isPaging());
      assertEquals("Ext.data.Model", modelBean0.getExtend());
      assertNull(modelBean0.getCreateMethod());
      assertNull(modelBean0.getVersionProperty());
      assertNull(modelBean0.getWriteAllFields());
      assertNull(modelBean0.getMessageProperty());
      assertEquals("json", modelBean0.getReader());
      assertNull(modelBean0.getUpdateMethod());
      
      OutputFormat outputFormat0 = OutputFormat.EXTJS4;
      // Undeclared exception!
      try { 
        ModelGenerator.writeModel((HttpServletRequest) httpServletRequestWrapper0, (HttpServletResponse) httpServletResponseWrapper0, modelBean0, outputFormat0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("ch.rasc.extclassgenerator.ModelGenerator", e);
      }
  }

  @Test(timeout = 4000000)
  public void test041()  throws Throwable  {
      Class<Object> class0 = Object.class;
      IncludeValidation includeValidation0 = IncludeValidation.BUILTIN;
      ModelBean modelBean0 = ModelGenerator.createModel(class0, includeValidation0);
      assertNull(modelBean0.getTotalProperty());
      assertNull(modelBean0.getDestroyMethod());
      assertFalse(modelBean0.isClientIdPropertyAddToWriter());
      assertEquals("json", modelBean0.getReader());
      assertNull(modelBean0.getIdProperty());
      assertNull(modelBean0.getUpdateMethod());
      assertNull(modelBean0.getWriteAllFields());
      assertNull(modelBean0.getReadMethod());
      assertNull(modelBean0.getClientIdProperty());
      assertEquals("java.lang.Object", modelBean0.getName());
      assertNull(modelBean0.getSuccessProperty());
      assertFalse(modelBean0.isPaging());
      assertTrue(modelBean0.isAutodetectTypes());
      assertFalse(modelBean0.isDisablePagingParameters());
      assertNull(modelBean0.getRootProperty());
      assertNull(modelBean0.getMessageProperty());
      assertNull(modelBean0.getIdentifier());
      assertNull(modelBean0.getVersionProperty());
      assertEquals("json", modelBean0.getWriter());
      assertNull(modelBean0.getCreateMethod());
      assertNotNull(modelBean0);
      
      LinkedList<AbstractAssociation> linkedList0 = new LinkedList<AbstractAssociation>();
      assertNotNull(linkedList0);
      
      Class<ConstructorDeclaration> class1 = ConstructorDeclaration.class;
      BelongsToAssociation belongsToAssociation0 = new BelongsToAssociation(class1);
      assertNull(belongsToAssociation0.getGetterName());
      assertNull(belongsToAssociation0.getSetterName());
      assertNull(belongsToAssociation0.getForeignKey());
      assertNull(belongsToAssociation0.getInstanceName());
      assertNull(belongsToAssociation0.getPrimaryKey());
      assertEquals("belongsTo", belongsToAssociation0.getType());
      assertNull(belongsToAssociation0.getAssociationKey());
      assertEquals("com.github.javaparser.ast.body.ConstructorDeclaration", belongsToAssociation0.getModel());
      assertNotNull(belongsToAssociation0);
      
      belongsToAssociation0.setInstanceName("zn;)Nkh?dT#L>n");
      assertNull(belongsToAssociation0.getGetterName());
      assertNull(belongsToAssociation0.getSetterName());
      assertEquals("zn;)Nkh?dT#L>n", belongsToAssociation0.getInstanceName());
      assertNull(belongsToAssociation0.getForeignKey());
      assertNull(belongsToAssociation0.getPrimaryKey());
      assertEquals("belongsTo", belongsToAssociation0.getType());
      assertNull(belongsToAssociation0.getAssociationKey());
      assertEquals("com.github.javaparser.ast.body.ConstructorDeclaration", belongsToAssociation0.getModel());
      
      boolean boolean0 = linkedList0.add((AbstractAssociation) belongsToAssociation0);
      assertNull(belongsToAssociation0.getGetterName());
      assertNull(belongsToAssociation0.getSetterName());
      assertEquals("zn;)Nkh?dT#L>n", belongsToAssociation0.getInstanceName());
      assertNull(belongsToAssociation0.getForeignKey());
      assertNull(belongsToAssociation0.getPrimaryKey());
      assertEquals("belongsTo", belongsToAssociation0.getType());
      assertNull(belongsToAssociation0.getAssociationKey());
      assertEquals("com.github.javaparser.ast.body.ConstructorDeclaration", belongsToAssociation0.getModel());
      assertTrue(boolean0);
      
      modelBean0.setAssociations(linkedList0);
      assertNull(modelBean0.getTotalProperty());
      assertNull(modelBean0.getDestroyMethod());
      assertFalse(modelBean0.isClientIdPropertyAddToWriter());
      assertEquals("json", modelBean0.getReader());
      assertNull(modelBean0.getIdProperty());
      assertNull(modelBean0.getUpdateMethod());
      assertNull(modelBean0.getWriteAllFields());
      assertNull(modelBean0.getReadMethod());
      assertNull(modelBean0.getClientIdProperty());
      assertEquals("java.lang.Object", modelBean0.getName());
      assertNull(modelBean0.getSuccessProperty());
      assertFalse(modelBean0.isPaging());
      assertTrue(modelBean0.isAutodetectTypes());
      assertFalse(modelBean0.isDisablePagingParameters());
      assertNull(modelBean0.getRootProperty());
      assertNull(modelBean0.getMessageProperty());
      assertNull(modelBean0.getIdentifier());
      assertNull(modelBean0.getVersionProperty());
      assertEquals("json", modelBean0.getWriter());
      assertNull(modelBean0.getCreateMethod());
      
      OutputFormat outputFormat0 = OutputFormat.TOUCH2;
      String string0 = ModelGenerator.generateJavascript(modelBean0, outputFormat0, false);
      assertNull(modelBean0.getTotalProperty());
      assertNull(modelBean0.getDestroyMethod());
      assertFalse(modelBean0.isClientIdPropertyAddToWriter());
      assertEquals("json", modelBean0.getReader());
      assertNull(modelBean0.getIdProperty());
      assertNull(modelBean0.getUpdateMethod());
      assertNull(modelBean0.getWriteAllFields());
      assertNull(modelBean0.getReadMethod());
      assertNull(modelBean0.getClientIdProperty());
      assertEquals("java.lang.Object", modelBean0.getName());
      assertNull(modelBean0.getSuccessProperty());
      assertFalse(modelBean0.isPaging());
      assertTrue(modelBean0.isAutodetectTypes());
      assertFalse(modelBean0.isDisablePagingParameters());
      assertNull(modelBean0.getRootProperty());
      assertNull(modelBean0.getMessageProperty());
      assertNull(modelBean0.getIdentifier());
      assertNull(modelBean0.getVersionProperty());
      assertEquals("json", modelBean0.getWriter());
      assertNull(modelBean0.getCreateMethod());
      assertNotNull(string0);
      assertEquals("Ext.define(\"java.lang.Object\",{extend:\"Unable to parse port\",uses:[\"com.github.javaparser.ast.body.ConstructorDeclaration\"],config:{fields:[],hasMany:[\"E6{'@\"],associations:[{instanceName:\"zn;)Nkh?dT#L>n\",model:\"com.github.javaparser.ast.body.ConstructorDeclaration\",type:\"belongsTo\"}]}});", string0);
      
      OutputConfig outputConfig0 = new OutputConfig();
      assertFalse(outputConfig0.isUseSingleQuotes());
      assertNull(outputConfig0.getLineEnding());
      assertNull(outputConfig0.getIncludeValidation());
      assertFalse(outputConfig0.isDebug());
      assertFalse(outputConfig0.isSurroundApiWithQuotes());
      assertNull(outputConfig0.getOutputFormat());
      assertNotNull(outputConfig0);
      
      String string1 = ModelGenerator.generateJavascript(modelBean0, outputConfig0);
      assertNull(modelBean0.getTotalProperty());
      assertNull(modelBean0.getDestroyMethod());
      assertFalse(modelBean0.isClientIdPropertyAddToWriter());
      assertEquals("json", modelBean0.getReader());
      assertNull(modelBean0.getIdProperty());
      assertNull(modelBean0.getUpdateMethod());
      assertNull(modelBean0.getWriteAllFields());
      assertNull(modelBean0.getReadMethod());
      assertNull(modelBean0.getClientIdProperty());
      assertEquals("java.lang.Object", modelBean0.getName());
      assertNull(modelBean0.getSuccessProperty());
      assertFalse(modelBean0.isPaging());
      assertTrue(modelBean0.isAutodetectTypes());
      assertFalse(modelBean0.isDisablePagingParameters());
      assertNull(modelBean0.getRootProperty());
      assertNull(modelBean0.getMessageProperty());
      assertNull(modelBean0.getIdentifier());
      assertNull(modelBean0.getVersionProperty());
      assertEquals("json", modelBean0.getWriter());
      assertNull(modelBean0.getCreateMethod());
      assertFalse(outputConfig0.isUseSingleQuotes());
      assertNull(outputConfig0.getLineEnding());
      assertNull(outputConfig0.getIncludeValidation());
      assertFalse(outputConfig0.isDebug());
      assertFalse(outputConfig0.isSurroundApiWithQuotes());
      assertNull(outputConfig0.getOutputFormat());
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("Ext.define(\"java.lang.Object\",{extend:\"Unable to parse port\",config:{fields:[],hasMany:[\"E6{'@\"]}});", string1);
      
      ModelBean modelBean1 = ModelGenerator.createModel(class0, includeValidation0);
      assertEquals("json", modelBean1.getWriter());
      assertNull(modelBean1.getSuccessProperty());
      assertFalse(modelBean1.isPaging());
      assertNull(modelBean1.getTotalProperty());
      assertNull(modelBean1.getDestroyMethod());
      assertFalse(modelBean1.isDisablePagingParameters());
      assertNull(modelBean1.getRootProperty());
      assertFalse(modelBean1.isClientIdPropertyAddToWriter());
      assertNull(modelBean1.getIdentifier());
      assertNull(modelBean1.getWriteAllFields());
      assertTrue(modelBean1.isAutodetectTypes());
      assertNull(modelBean1.getIdProperty());
      assertNull(modelBean1.getReadMethod());
      assertNull(modelBean1.getUpdateMethod());
      assertEquals("java.lang.Object", modelBean1.getName());
      assertNull(modelBean1.getClientIdProperty());
      assertNull(modelBean1.getCreateMethod());
      assertNull(modelBean1.getMessageProperty());
      assertEquals("json", modelBean1.getReader());
      assertNull(modelBean1.getVersionProperty());
      assertSame(modelBean1, modelBean0);
      assertNotNull(modelBean1);
      
      HttpServletRequest httpServletRequest0 = mock(HttpServletRequest.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(httpServletRequest0).isAsyncStarted();
      doReturn((String) null).when(httpServletRequest0).getHeader(anyString());
      HttpServletRequestWrapper httpServletRequestWrapper0 = new HttpServletRequestWrapper(httpServletRequest0);
      assertNotNull(httpServletRequestWrapper0);
      
      HttpServletResponse httpServletResponse0 = mock(HttpServletResponse.class, new ViolatedAssumptionAnswer());
      doReturn((ServletOutputStream) null).when(httpServletResponse0).getOutputStream();
      boolean boolean1 = httpServletRequestWrapper0.isAsyncStarted();
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      HttpServletResponseWrapper httpServletResponseWrapper0 = new HttpServletResponseWrapper(httpServletResponse0);
      assertNotNull(httpServletResponseWrapper0);
      
      Class<Object> class2 = Object.class;
      OutputFormat outputFormat1 = OutputFormat.EXTJS4;
      IncludeValidation includeValidation1 = IncludeValidation.BUILTIN;
      boolean boolean2 = false;
      // Undeclared exception!
      try { 
        ModelGenerator.writeModel((HttpServletRequest) httpServletRequestWrapper0, (HttpServletResponse) httpServletResponseWrapper0, (Class<?>) class2, outputFormat1, includeValidation1, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("ch.rasc.extclassgenerator.ModelGenerator", e);
      }
  }

  @Test(timeout = 4000000)
  public void test042()  throws Throwable  {
      Class<ConstructorDeclaration> class0 = ConstructorDeclaration.class;
      OutputConfig outputConfig0 = new OutputConfig();
      assertFalse(outputConfig0.isDebug());
      assertFalse(outputConfig0.isSurroundApiWithQuotes());
      assertNull(outputConfig0.getIncludeValidation());
      assertFalse(outputConfig0.isUseSingleQuotes());
      assertNull(outputConfig0.getLineEnding());
      assertNull(outputConfig0.getOutputFormat());
      assertNotNull(outputConfig0);
      
      IncludeValidation includeValidation0 = IncludeValidation.ALL;
      LineEnding lineEnding0 = LineEnding.LF;
      outputConfig0.setLineEnding(lineEnding0);
      assertFalse(outputConfig0.isDebug());
      assertFalse(outputConfig0.isSurroundApiWithQuotes());
      assertNull(outputConfig0.getIncludeValidation());
      assertFalse(outputConfig0.isUseSingleQuotes());
      assertNull(outputConfig0.getOutputFormat());
      
      outputConfig0.setIncludeValidation(includeValidation0);
      assertFalse(outputConfig0.isDebug());
      assertEquals(IncludeValidation.ALL, outputConfig0.getIncludeValidation());
      assertFalse(outputConfig0.isSurroundApiWithQuotes());
      assertFalse(outputConfig0.isUseSingleQuotes());
      assertNull(outputConfig0.getOutputFormat());
      
      LineEnding lineEnding1 = LineEnding.LF;
      outputConfig0.setLineEnding(lineEnding1);
      assertFalse(outputConfig0.isDebug());
      assertEquals(IncludeValidation.ALL, outputConfig0.getIncludeValidation());
      assertFalse(outputConfig0.isSurroundApiWithQuotes());
      assertFalse(outputConfig0.isUseSingleQuotes());
      assertNull(outputConfig0.getOutputFormat());
      assertSame(lineEnding1, lineEnding0);
      
      OutputFormat outputFormat0 = OutputFormat.TOUCH2;
      outputConfig0.setOutputFormat(outputFormat0);
      assertFalse(outputConfig0.isDebug());
      assertEquals(IncludeValidation.ALL, outputConfig0.getIncludeValidation());
      assertFalse(outputConfig0.isSurroundApiWithQuotes());
      assertEquals(OutputFormat.TOUCH2, outputConfig0.getOutputFormat());
      assertFalse(outputConfig0.isUseSingleQuotes());
      
      ModelBean modelBean0 = ModelGenerator.createModel(class0, outputConfig0);
      assertFalse(outputConfig0.isDebug());
      assertEquals(IncludeValidation.ALL, outputConfig0.getIncludeValidation());
      assertFalse(outputConfig0.isSurroundApiWithQuotes());
      assertEquals(OutputFormat.TOUCH2, outputConfig0.getOutputFormat());
      assertFalse(outputConfig0.isUseSingleQuotes());
      assertNull(modelBean0.getSuccessProperty());
      assertNull(modelBean0.getIdentifier());
      assertFalse(modelBean0.isPaging());
      assertNull(modelBean0.getVersionProperty());
      assertEquals("json", modelBean0.getWriter());
      assertNull(modelBean0.getRootProperty());
      assertEquals("Ext.data.Model", modelBean0.getExtend());
      assertNull(modelBean0.getReadMethod());
      assertFalse(modelBean0.isDisablePagingParameters());
      assertFalse(modelBean0.isClientIdPropertyAddToWriter());
      assertNull(modelBean0.getCreateMethod());
      assertEquals("com.github.javaparser.ast.body.ConstructorDeclaration", modelBean0.getName());
      assertEquals("json", modelBean0.getReader());
      assertNull(modelBean0.getWriteAllFields());
      assertTrue(modelBean0.isAutodetectTypes());
      assertNull(modelBean0.getTotalProperty());
      assertNull(modelBean0.getIdProperty());
      assertNull(modelBean0.getDestroyMethod());
      assertNull(modelBean0.getClientIdProperty());
      assertNull(modelBean0.getMessageProperty());
      assertNull(modelBean0.getUpdateMethod());
      assertNotNull(modelBean0);
      
      HttpServletRequest httpServletRequest0 = mock(HttpServletRequest.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(httpServletRequest0).getCharacterEncoding();
      doReturn((DispatcherType) null).when(httpServletRequest0).getDispatcherType();
      doReturn((String) null).when(httpServletRequest0).getLocalAddr();
      doReturn((Enumeration) null).when(httpServletRequest0).getParameterNames();
      doReturn(0).when(httpServletRequest0).getRemotePort();
      doReturn((String) null).when(httpServletRequest0).getHeader(anyString());
      HttpServletRequestWrapper httpServletRequestWrapper0 = new HttpServletRequestWrapper(httpServletRequest0);
      assertNotNull(httpServletRequestWrapper0);
      
      Enumeration<String> enumeration0 = httpServletRequestWrapper0.getParameterNames();
      assertNull(enumeration0);
      
      HttpServletResponse httpServletResponse0 = mock(HttpServletResponse.class, new ViolatedAssumptionAnswer());
      doReturn((ServletOutputStream) null).when(httpServletResponse0).getOutputStream();
      String string0 = httpServletRequestWrapper0.getLocalAddr();
      assertNull(string0);
      
      int int0 = httpServletRequestWrapper0.getRemotePort();
      assertEquals(0, int0);
      
      HttpServletResponseWrapper httpServletResponseWrapper0 = new HttpServletResponseWrapper(httpServletResponse0);
      assertNotNull(httpServletResponseWrapper0);
      
      LineEnding lineEnding2 = LineEnding.SYSTEM;
      String string1 = httpServletRequestWrapper0.getCharacterEncoding();
      assertNull(string1);
      
      outputConfig0.setLineEnding(lineEnding2);
      assertFalse(outputConfig0.isDebug());
      assertEquals(IncludeValidation.ALL, outputConfig0.getIncludeValidation());
      assertFalse(outputConfig0.isSurroundApiWithQuotes());
      assertEquals(OutputFormat.TOUCH2, outputConfig0.getOutputFormat());
      assertFalse(outputConfig0.isUseSingleQuotes());
      assertNotSame(lineEnding2, lineEnding1);
      assertNotSame(lineEnding2, lineEnding0);
      assertFalse(lineEnding2.equals((Object)lineEnding1));
      assertFalse(lineEnding2.equals((Object)lineEnding0));
      
      ModelBean modelBean1 = ModelGenerator.createModel(class0, outputConfig0);
      assertFalse(outputConfig0.isDebug());
      assertEquals(IncludeValidation.ALL, outputConfig0.getIncludeValidation());
      assertFalse(outputConfig0.isSurroundApiWithQuotes());
      assertEquals(OutputFormat.TOUCH2, outputConfig0.getOutputFormat());
      assertFalse(outputConfig0.isUseSingleQuotes());
      assertNull(modelBean1.getMessageProperty());
      assertNull(modelBean1.getClientIdProperty());
      assertNull(modelBean1.getRootProperty());
      assertNull(modelBean1.getVersionProperty());
      assertNull(modelBean1.getWriteAllFields());
      assertNull(modelBean1.getIdentifier());
      assertEquals("Ext.data.Model", modelBean1.getExtend());
      assertFalse(modelBean1.isDisablePagingParameters());
      assertNull(modelBean1.getSuccessProperty());
      assertFalse(modelBean1.isPaging());
      assertNull(modelBean1.getReadMethod());
      assertFalse(modelBean1.isClientIdPropertyAddToWriter());
      assertNull(modelBean1.getTotalProperty());
      assertEquals("com.github.javaparser.ast.body.ConstructorDeclaration", modelBean1.getName());
      assertNull(modelBean1.getIdProperty());
      assertNull(modelBean1.getDestroyMethod());
      assertEquals("json", modelBean1.getReader());
      assertNull(modelBean1.getUpdateMethod());
      assertNull(modelBean1.getCreateMethod());
      assertNotSame(modelBean1, modelBean0);
      assertFalse(modelBean1.equals((Object)modelBean0));
      assertNotNull(modelBean1);
      
      outputConfig0.setDebug(false);
      assertFalse(outputConfig0.isDebug());
      assertEquals(IncludeValidation.ALL, outputConfig0.getIncludeValidation());
      assertFalse(outputConfig0.isSurroundApiWithQuotes());
      assertEquals(OutputFormat.TOUCH2, outputConfig0.getOutputFormat());
      assertFalse(outputConfig0.isUseSingleQuotes());
      
      modelBean1.setWriter("9?^JO+p?!_(LTo:|");
      assertFalse(outputConfig0.isDebug());
      assertEquals(IncludeValidation.ALL, outputConfig0.getIncludeValidation());
      assertFalse(outputConfig0.isSurroundApiWithQuotes());
      assertEquals(OutputFormat.TOUCH2, outputConfig0.getOutputFormat());
      assertFalse(outputConfig0.isUseSingleQuotes());
      assertNull(modelBean1.getMessageProperty());
      assertNull(modelBean1.getClientIdProperty());
      assertNull(modelBean1.getRootProperty());
      assertNull(modelBean1.getVersionProperty());
      assertNull(modelBean1.getWriteAllFields());
      assertNull(modelBean1.getIdentifier());
      assertEquals("Ext.data.Model", modelBean1.getExtend());
      assertFalse(modelBean1.isDisablePagingParameters());
      assertNull(modelBean1.getSuccessProperty());
      assertFalse(modelBean1.isPaging());
      assertNull(modelBean1.getReadMethod());
      assertFalse(modelBean1.isClientIdPropertyAddToWriter());
      assertNull(modelBean1.getTotalProperty());
      assertEquals("com.github.javaparser.ast.body.ConstructorDeclaration", modelBean1.getName());
      assertNull(modelBean1.getIdProperty());
      assertNull(modelBean1.getDestroyMethod());
      assertEquals("json", modelBean1.getReader());
      assertNull(modelBean1.getUpdateMethod());
      assertNull(modelBean1.getCreateMethod());
      assertNotSame(modelBean1, modelBean0);
      assertFalse(modelBean1.equals((Object)modelBean0));
      
      httpServletRequestWrapper0.getDispatcherType();
      modelBean1.setAutodetectTypes(false);
      assertFalse(outputConfig0.isDebug());
      assertEquals(IncludeValidation.ALL, outputConfig0.getIncludeValidation());
      assertFalse(outputConfig0.isSurroundApiWithQuotes());
      assertEquals(OutputFormat.TOUCH2, outputConfig0.getOutputFormat());
      assertFalse(outputConfig0.isUseSingleQuotes());
      assertNull(modelBean1.getMessageProperty());
      assertNull(modelBean1.getClientIdProperty());
      assertNull(modelBean1.getRootProperty());
      assertNull(modelBean1.getVersionProperty());
      assertNull(modelBean1.getWriteAllFields());
      assertNull(modelBean1.getIdentifier());
      assertEquals("Ext.data.Model", modelBean1.getExtend());
      assertFalse(modelBean1.isDisablePagingParameters());
      assertNull(modelBean1.getSuccessProperty());
      assertFalse(modelBean1.isPaging());
      assertNull(modelBean1.getReadMethod());
      assertFalse(modelBean1.isClientIdPropertyAddToWriter());
      assertNull(modelBean1.getTotalProperty());
      assertEquals("com.github.javaparser.ast.body.ConstructorDeclaration", modelBean1.getName());
      assertNull(modelBean1.getIdProperty());
      assertNull(modelBean1.getDestroyMethod());
      assertEquals("json", modelBean1.getReader());
      assertNull(modelBean1.getUpdateMethod());
      assertNull(modelBean1.getCreateMethod());
      assertNotSame(modelBean1, modelBean0);
      assertFalse(modelBean1.equals((Object)modelBean0));
      
      // Undeclared exception!
      try { 
        ModelGenerator.writeModel((HttpServletRequest) httpServletRequestWrapper0, (HttpServletResponse) httpServletResponseWrapper0, modelBean1, outputConfig0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("ch.rasc.extclassgenerator.ModelGenerator", e);
      }
  }

  @Test(timeout = 4000000)
  public void test043()  throws Throwable  {
      HttpServletRequest httpServletRequest0 = mock(HttpServletRequest.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(httpServletRequest0).isAsyncSupported();
      HttpServletRequestWrapper httpServletRequestWrapper0 = new HttpServletRequestWrapper(httpServletRequest0);
      assertNotNull(httpServletRequestWrapper0);
      
      ServletRequest servletRequest0 = httpServletRequestWrapper0.getRequest();
      assertNotNull(servletRequest0);
      
      ServletRequestWrapper servletRequestWrapper0 = new ServletRequestWrapper(servletRequest0);
      assertNotNull(servletRequestWrapper0);
      
      httpServletRequestWrapper0.setRequest(servletRequestWrapper0);
      HttpServletRequestWrapper httpServletRequestWrapper1 = new HttpServletRequestWrapper(httpServletRequestWrapper0);
      assertFalse(httpServletRequestWrapper1.equals((Object)httpServletRequestWrapper0));
      assertNotNull(httpServletRequestWrapper1);
      
      boolean boolean0 = httpServletRequestWrapper0.isAsyncSupported();
      assertNotSame(httpServletRequestWrapper0, httpServletRequestWrapper1);
      assertFalse(httpServletRequestWrapper0.equals((Object)httpServletRequestWrapper1));
      assertFalse(boolean0);
      
      ModelBean modelBean0 = new ModelBean();
      assertNull(modelBean0.getTotalProperty());
      assertNull(modelBean0.getDestroyMethod());
      assertNull(modelBean0.getName());
      assertNull(modelBean0.getWriteAllFields());
      assertNull(modelBean0.getCreateMethod());
      assertEquals("json", modelBean0.getReader());
      assertNull(modelBean0.getUpdateMethod());
      assertNull(modelBean0.getMessageProperty());
      assertFalse(modelBean0.isPaging());
      assertNull(modelBean0.getVersionProperty());
      assertNull(modelBean0.getIdentifier());
      assertNull(modelBean0.getSuccessProperty());
      assertEquals("Ext.data.Model", modelBean0.getExtend());
      assertNull(modelBean0.getClientIdProperty());
      assertNull(modelBean0.getRootProperty());
      assertNull(modelBean0.getReadMethod());
      assertEquals("json", modelBean0.getWriter());
      assertTrue(modelBean0.isAutodetectTypes());
      assertNull(modelBean0.getIdProperty());
      assertFalse(modelBean0.isDisablePagingParameters());
      assertFalse(modelBean0.isClientIdPropertyAddToWriter());
      assertNotNull(modelBean0);
      
      modelBean0.setClientIdProperty("{`**za`y$GY");
      assertNull(modelBean0.getTotalProperty());
      assertNull(modelBean0.getDestroyMethod());
      assertNull(modelBean0.getName());
      assertNull(modelBean0.getWriteAllFields());
      assertNull(modelBean0.getCreateMethod());
      assertEquals("json", modelBean0.getReader());
      assertNull(modelBean0.getUpdateMethod());
      assertEquals("{`**za`y$GY", modelBean0.getClientIdProperty());
      assertNull(modelBean0.getMessageProperty());
      assertFalse(modelBean0.isPaging());
      assertNull(modelBean0.getVersionProperty());
      assertNull(modelBean0.getIdentifier());
      assertNull(modelBean0.getSuccessProperty());
      assertEquals("Ext.data.Model", modelBean0.getExtend());
      assertNull(modelBean0.getRootProperty());
      assertNull(modelBean0.getReadMethod());
      assertEquals("json", modelBean0.getWriter());
      assertTrue(modelBean0.isAutodetectTypes());
      assertNull(modelBean0.getIdProperty());
      assertFalse(modelBean0.isDisablePagingParameters());
      assertFalse(modelBean0.isClientIdPropertyAddToWriter());
      
      OutputConfig outputConfig0 = new OutputConfig();
      assertFalse(outputConfig0.isUseSingleQuotes());
      assertNull(outputConfig0.getLineEnding());
      assertNull(outputConfig0.getIncludeValidation());
      assertNull(outputConfig0.getOutputFormat());
      assertFalse(outputConfig0.isSurroundApiWithQuotes());
      assertFalse(outputConfig0.isDebug());
      assertNotNull(outputConfig0);
      
      OutputConfig outputConfig1 = new OutputConfig();
      assertFalse(outputConfig1.isUseSingleQuotes());
      assertNull(outputConfig1.getLineEnding());
      assertNull(outputConfig1.getIncludeValidation());
      assertNull(outputConfig1.getOutputFormat());
      assertFalse(outputConfig1.isSurroundApiWithQuotes());
      assertFalse(outputConfig1.isDebug());
      assertTrue(outputConfig1.equals((Object)outputConfig0));
      assertNotNull(outputConfig1);
      
      LinkedList<AbstractAssociation> linkedList0 = new LinkedList<AbstractAssociation>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      modelBean0.addAssociations(linkedList0);
      assertNull(modelBean0.getTotalProperty());
      assertNull(modelBean0.getDestroyMethod());
      assertNull(modelBean0.getName());
      assertNull(modelBean0.getWriteAllFields());
      assertNull(modelBean0.getCreateMethod());
      assertEquals("json", modelBean0.getReader());
      assertNull(modelBean0.getUpdateMethod());
      assertEquals("{`**za`y$GY", modelBean0.getClientIdProperty());
      assertNull(modelBean0.getMessageProperty());
      assertFalse(modelBean0.isPaging());
      assertNull(modelBean0.getVersionProperty());
      assertNull(modelBean0.getIdentifier());
      assertNull(modelBean0.getSuccessProperty());
      assertEquals("Ext.data.Model", modelBean0.getExtend());
      assertNull(modelBean0.getRootProperty());
      assertNull(modelBean0.getReadMethod());
      assertEquals("json", modelBean0.getWriter());
      assertTrue(modelBean0.isAutodetectTypes());
      assertNull(modelBean0.getIdProperty());
      assertFalse(modelBean0.isDisablePagingParameters());
      assertFalse(modelBean0.isClientIdPropertyAddToWriter());
      assertEquals(0, linkedList0.size());
      
      OutputConfig outputConfig2 = new OutputConfig();
      assertFalse(outputConfig2.isDebug());
      assertFalse(outputConfig2.isSurroundApiWithQuotes());
      assertNull(outputConfig2.getIncludeValidation());
      assertNull(outputConfig2.getLineEnding());
      assertFalse(outputConfig2.isUseSingleQuotes());
      assertNull(outputConfig2.getOutputFormat());
      assertTrue(outputConfig2.equals((Object)outputConfig1));
      assertTrue(outputConfig2.equals((Object)outputConfig0));
      assertNotNull(outputConfig2);
      
      String string0 = ModelGenerator.generateJavascript(modelBean0, outputConfig2);
      assertNull(modelBean0.getTotalProperty());
      assertNull(modelBean0.getDestroyMethod());
      assertNull(modelBean0.getName());
      assertNull(modelBean0.getWriteAllFields());
      assertNull(modelBean0.getCreateMethod());
      assertEquals("json", modelBean0.getReader());
      assertNull(modelBean0.getUpdateMethod());
      assertEquals("{`**za`y$GY", modelBean0.getClientIdProperty());
      assertNull(modelBean0.getMessageProperty());
      assertFalse(modelBean0.isPaging());
      assertNull(modelBean0.getVersionProperty());
      assertNull(modelBean0.getIdentifier());
      assertNull(modelBean0.getSuccessProperty());
      assertEquals("Ext.data.Model", modelBean0.getExtend());
      assertNull(modelBean0.getRootProperty());
      assertNull(modelBean0.getReadMethod());
      assertEquals("json", modelBean0.getWriter());
      assertTrue(modelBean0.isAutodetectTypes());
      assertNull(modelBean0.getIdProperty());
      assertFalse(modelBean0.isDisablePagingParameters());
      assertFalse(modelBean0.isClientIdPropertyAddToWriter());
      assertFalse(outputConfig2.isDebug());
      assertFalse(outputConfig2.isSurroundApiWithQuotes());
      assertNull(outputConfig2.getIncludeValidation());
      assertNull(outputConfig2.getLineEnding());
      assertFalse(outputConfig2.isUseSingleQuotes());
      assertNull(outputConfig2.getOutputFormat());
      assertNotSame(outputConfig2, outputConfig1);
      assertNotSame(outputConfig2, outputConfig0);
      assertTrue(outputConfig2.equals((Object)outputConfig1));
      assertTrue(outputConfig2.equals((Object)outputConfig0));
      assertNotNull(string0);
      
      HttpServletResponse httpServletResponse0 = mock(HttpServletResponse.class, new ViolatedAssumptionAnswer());
      HttpServletResponseWrapper httpServletResponseWrapper0 = new HttpServletResponseWrapper(httpServletResponse0);
      assertNotNull(httpServletResponseWrapper0);
      
      Class<String> class0 = String.class;
      OutputFormat outputFormat0 = OutputFormat.EXTJS4;
      IncludeValidation includeValidation0 = IncludeValidation.NONE;
      // Undeclared exception!
      try { 
        ModelGenerator.writeModel((HttpServletRequest) httpServletRequestWrapper1, (HttpServletResponse) httpServletResponseWrapper0, (Class<?>) class0, outputFormat0, includeValidation0, false);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000000)
  public void test044()  throws Throwable  {
      Class<ModelFieldBean> class0 = ModelFieldBean.class;
      OutputFormat outputFormat0 = OutputFormat.TOUCH2;
      IncludeValidation includeValidation0 = IncludeValidation.BUILTIN;
      String string0 = ModelGenerator.generateJavascript(class0, outputFormat0, includeValidation0, true);
      assertNotNull(string0);
      assertEquals("Ext.define(\"ch.rasc.extclassgenerator.ModelFieldBean\",\r\n{\n  extend : \"Ext.data.Model\",\n  config : {\n    fields : [ {\n      name : \"allowBlank\",\n      type : \"boolean\"\n    }, {\n      name : \"allowNull\",\n      type : \"boolean\"\n    }, {\n      name : \"critical\",\n      type : \"boolean\"\n    }, {\n      name : \"persist\",\n      type : \"boolean\"\n    }, {\n      name : \"unique\",\n      type : \"boolean\"\n    }, {\n      name : \"useNull\",\n      type : \"boolean\"\n    }, {\n      name : \"calculate\",\n      type : \"string\"\n    }, {\n      name : \"convert\",\n      type : \"string\"\n    }, {\n      name : \"dateFormat\",\n      type : \"string\"\n    }, {\n      name : \"mapping\",\n      type : \"string\"\n    }, {\n      name : \"name\",\n      type : \"string\"\n    }, {\n      name : \"type\",\n      type : \"string\"\n    } ]\n  }\n});", string0);
      
      HttpServletRequest httpServletRequest0 = mock(HttpServletRequest.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(httpServletRequest0).getServerName();
      HttpServletRequestWrapper httpServletRequestWrapper0 = new HttpServletRequestWrapper(httpServletRequest0);
      assertNotNull(httpServletRequestWrapper0);
      
      HttpServletResponse httpServletResponse0 = mock(HttpServletResponse.class, new ViolatedAssumptionAnswer());
      HttpServletResponseWrapper httpServletResponseWrapper0 = new HttpServletResponseWrapper(httpServletResponse0);
      assertNotNull(httpServletResponseWrapper0);
      
      ModelBean modelBean0 = ModelGenerator.createModel(class0);
      assertFalse(modelBean0.isDisablePagingParameters());
      assertNull(modelBean0.getVersionProperty());
      assertNull(modelBean0.getRootProperty());
      assertNull(modelBean0.getIdentifier());
      assertNull(modelBean0.getMessageProperty());
      assertFalse(modelBean0.isPaging());
      assertNull(modelBean0.getSuccessProperty());
      assertNull(modelBean0.getClientIdProperty());
      assertEquals("Ext.data.Model", modelBean0.getExtend());
      assertNull(modelBean0.getUpdateMethod());
      assertNull(modelBean0.getWriteAllFields());
      assertEquals("json", modelBean0.getReader());
      assertNull(modelBean0.getCreateMethod());
      assertNull(modelBean0.getDestroyMethod());
      assertNull(modelBean0.getTotalProperty());
      assertTrue(modelBean0.isAutodetectTypes());
      assertNull(modelBean0.getReadMethod());
      assertNull(modelBean0.getIdProperty());
      assertFalse(modelBean0.isClientIdPropertyAddToWriter());
      assertEquals("json", modelBean0.getWriter());
      assertEquals("ch.rasc.extclassgenerator.ModelFieldBean", modelBean0.getName());
      assertNotNull(modelBean0);
      
      String string1 = httpServletRequestWrapper0.getServerName();
      assertNull(string1);
      
      // Undeclared exception!
      try { 
        modelBean0.addAssociation((AbstractAssociation) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // AbstractAssociation must not be null
         //
         verifyException("org.springframework.util.Assert", e);
      }
  }

  @Test(timeout = 4000000)
  public void test045()  throws Throwable  {
      Class<ModelFieldBean> class0 = ModelFieldBean.class;
      IncludeValidation includeValidation0 = IncludeValidation.ALL;
      ModelBean modelBean0 = ModelGenerator.createModel(class0, includeValidation0);
      assertNull(modelBean0.getClientIdProperty());
      assertNull(modelBean0.getWriteAllFields());
      assertNull(modelBean0.getIdProperty());
      assertNull(modelBean0.getReadMethod());
      assertTrue(modelBean0.isAutodetectTypes());
      assertEquals("Ext.data.Model", modelBean0.getExtend());
      assertFalse(modelBean0.isPaging());
      assertFalse(modelBean0.isDisablePagingParameters());
      assertNull(modelBean0.getRootProperty());
      assertNull(modelBean0.getIdentifier());
      assertNull(modelBean0.getDestroyMethod());
      assertFalse(modelBean0.isClientIdPropertyAddToWriter());
      assertEquals("ch.rasc.extclassgenerator.ModelFieldBean", modelBean0.getName());
      assertEquals("json", modelBean0.getWriter());
      assertNull(modelBean0.getSuccessProperty());
      assertNull(modelBean0.getTotalProperty());
      assertNull(modelBean0.getVersionProperty());
      assertNull(modelBean0.getCreateMethod());
      assertNull(modelBean0.getMessageProperty());
      assertNull(modelBean0.getUpdateMethod());
      assertEquals("json", modelBean0.getReader());
      assertNotNull(modelBean0);
      
      modelBean0.setClientIdProperty("I");
      assertNull(modelBean0.getWriteAllFields());
      assertNull(modelBean0.getIdProperty());
      assertNull(modelBean0.getReadMethod());
      assertTrue(modelBean0.isAutodetectTypes());
      assertEquals("Ext.data.Model", modelBean0.getExtend());
      assertFalse(modelBean0.isPaging());
      assertEquals("I", modelBean0.getClientIdProperty());
      assertFalse(modelBean0.isDisablePagingParameters());
      assertNull(modelBean0.getRootProperty());
      assertNull(modelBean0.getIdentifier());
      assertNull(modelBean0.getDestroyMethod());
      assertFalse(modelBean0.isClientIdPropertyAddToWriter());
      assertEquals("ch.rasc.extclassgenerator.ModelFieldBean", modelBean0.getName());
      assertEquals("json", modelBean0.getWriter());
      assertNull(modelBean0.getSuccessProperty());
      assertNull(modelBean0.getTotalProperty());
      assertNull(modelBean0.getVersionProperty());
      assertNull(modelBean0.getCreateMethod());
      assertNull(modelBean0.getMessageProperty());
      assertNull(modelBean0.getUpdateMethod());
      assertEquals("json", modelBean0.getReader());
      
      OutputConfig outputConfig0 = new OutputConfig();
      assertFalse(outputConfig0.isSurroundApiWithQuotes());
      assertNull(outputConfig0.getLineEnding());
      assertNull(outputConfig0.getOutputFormat());
      assertNull(outputConfig0.getIncludeValidation());
      assertFalse(outputConfig0.isUseSingleQuotes());
      assertFalse(outputConfig0.isDebug());
      assertNotNull(outputConfig0);
      
      String string0 = ModelGenerator.generateJavascript(modelBean0, outputConfig0);
      assertNull(modelBean0.getWriteAllFields());
      assertNull(modelBean0.getIdProperty());
      assertNull(modelBean0.getReadMethod());
      assertTrue(modelBean0.isAutodetectTypes());
      assertEquals("Ext.data.Model", modelBean0.getExtend());
      assertFalse(modelBean0.isPaging());
      assertEquals("I", modelBean0.getClientIdProperty());
      assertFalse(modelBean0.isDisablePagingParameters());
      assertNull(modelBean0.getRootProperty());
      assertNull(modelBean0.getIdentifier());
      assertNull(modelBean0.getDestroyMethod());
      assertFalse(modelBean0.isClientIdPropertyAddToWriter());
      assertEquals("ch.rasc.extclassgenerator.ModelFieldBean", modelBean0.getName());
      assertEquals("json", modelBean0.getWriter());
      assertNull(modelBean0.getSuccessProperty());
      assertNull(modelBean0.getTotalProperty());
      assertNull(modelBean0.getVersionProperty());
      assertNull(modelBean0.getCreateMethod());
      assertNull(modelBean0.getMessageProperty());
      assertNull(modelBean0.getUpdateMethod());
      assertEquals("json", modelBean0.getReader());
      assertFalse(outputConfig0.isSurroundApiWithQuotes());
      assertNull(outputConfig0.getLineEnding());
      assertNull(outputConfig0.getOutputFormat());
      assertNull(outputConfig0.getIncludeValidation());
      assertFalse(outputConfig0.isUseSingleQuotes());
      assertFalse(outputConfig0.isDebug());
      assertNotNull(string0);
      assertEquals("Ext.define(\"ch.rasc.extclassgenerator.ModelFieldBean\",{extend:\"Ext.data.Model\",config:{fields:[{name:\"allowBlank\",type:\"boolean\"},{name:\"allowNull\",type:\"boolean\"},{name:\"critical\",type:\"boolean\"},{name:\"persist\",type:\"boolean\"},{name:\"unique\",type:\"boolean\"},{name:\"useNull\",type:\"boolean\"},{name:\"calculate\",type:\"string\"},{name:\"convert\",type:\"string\"},{name:\"dateFormat\",type:\"string\"},{name:\"mapping\",type:\"string\"},{name:\"name\",type:\"string\"},{name:\"type\",type:\"string\"}]}});", string0);
  }

  @Test(timeout = 4000000)
  public void test046()  throws Throwable  {
      IncludeValidation includeValidation0 = IncludeValidation.BUILTIN;
      Class<Object> class0 = Object.class;
      ModelBean modelBean0 = ModelGenerator.createModel(class0, includeValidation0);
      assertFalse(modelBean0.isDisablePagingParameters());
      assertNull(modelBean0.getSuccessProperty());
      assertFalse(modelBean0.isPaging());
      assertFalse(modelBean0.isClientIdPropertyAddToWriter());
      assertNull(modelBean0.getTotalProperty());
      assertNull(modelBean0.getRootProperty());
      assertNull(modelBean0.getIdProperty());
      assertEquals("json", modelBean0.getWriter());
      assertNull(modelBean0.getDestroyMethod());
      assertNull(modelBean0.getIdentifier());
      assertTrue(modelBean0.isAutodetectTypes());
      assertEquals("java.lang.Object", modelBean0.getName());
      assertEquals("json", modelBean0.getReader());
      assertNull(modelBean0.getUpdateMethod());
      assertEquals("Ext.data.Model", modelBean0.getExtend());
      assertNull(modelBean0.getReadMethod());
      assertNull(modelBean0.getCreateMethod());
      assertNull(modelBean0.getMessageProperty());
      assertNull(modelBean0.getClientIdProperty());
      assertNull(modelBean0.getVersionProperty());
      assertNull(modelBean0.getWriteAllFields());
      assertNotNull(modelBean0);
      
      HttpServletRequest httpServletRequest0 = mock(HttpServletRequest.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(httpServletRequest0).isAsyncSupported();
      HttpServletRequestWrapper httpServletRequestWrapper0 = new HttpServletRequestWrapper(httpServletRequest0);
      assertNotNull(httpServletRequestWrapper0);
      
      HttpServletRequestWrapper httpServletRequestWrapper1 = new HttpServletRequestWrapper(httpServletRequestWrapper0);
      assertFalse(httpServletRequestWrapper1.equals((Object)httpServletRequestWrapper0));
      assertNotNull(httpServletRequestWrapper1);
      
      boolean boolean0 = httpServletRequestWrapper1.isAsyncSupported();
      assertNotSame(httpServletRequestWrapper0, httpServletRequestWrapper1);
      assertNotSame(httpServletRequestWrapper1, httpServletRequestWrapper0);
      assertFalse(httpServletRequestWrapper0.equals((Object)httpServletRequestWrapper1));
      assertFalse(httpServletRequestWrapper1.equals((Object)httpServletRequestWrapper0));
      assertFalse(boolean0);
      
      OutputConfig outputConfig0 = new OutputConfig();
      assertNull(outputConfig0.getOutputFormat());
      assertNull(outputConfig0.getIncludeValidation());
      assertFalse(outputConfig0.isSurroundApiWithQuotes());
      assertFalse(outputConfig0.isUseSingleQuotes());
      assertNull(outputConfig0.getLineEnding());
      assertNotNull(outputConfig0);
      
      outputConfig0.setSurroundApiWithQuotes(false);
      assertNull(outputConfig0.getOutputFormat());
      assertNull(outputConfig0.getIncludeValidation());
      assertFalse(outputConfig0.isSurroundApiWithQuotes());
      assertFalse(outputConfig0.isUseSingleQuotes());
      assertNull(outputConfig0.getLineEnding());
      
      outputConfig0.setDebug(true);
      assertNull(outputConfig0.getOutputFormat());
      assertNull(outputConfig0.getIncludeValidation());
      assertFalse(outputConfig0.isSurroundApiWithQuotes());
      assertFalse(outputConfig0.isUseSingleQuotes());
      assertNull(outputConfig0.getLineEnding());
      
      ModelBean modelBean1 = new ModelBean();
      assertNull(modelBean1.getCreateMethod());
      assertEquals("json", modelBean1.getReader());
      assertNull(modelBean1.getIdProperty());
      assertNull(modelBean1.getWriteAllFields());
      assertNull(modelBean1.getTotalProperty());
      assertNull(modelBean1.getDestroyMethod());
      assertNull(modelBean1.getUpdateMethod());
      assertNull(modelBean1.getName());
      assertNull(modelBean1.getMessageProperty());
      assertFalse(modelBean1.isDisablePagingParameters());
      assertNull(modelBean1.getVersionProperty());
      assertNull(modelBean1.getRootProperty());
      assertNull(modelBean1.getIdentifier());
      assertFalse(modelBean1.isPaging());
      assertNull(modelBean1.getSuccessProperty());
      assertEquals("json", modelBean1.getWriter());
      assertEquals("Ext.data.Model", modelBean1.getExtend());
      assertNull(modelBean1.getClientIdProperty());
      assertTrue(modelBean1.isAutodetectTypes());
      assertFalse(modelBean1.isClientIdPropertyAddToWriter());
      assertNull(modelBean1.getReadMethod());
      assertFalse(modelBean1.equals((Object)modelBean0));
      assertNotNull(modelBean1);
      
      String string0 = ModelGenerator.generateJavascript(modelBean0, outputConfig0);
      assertFalse(modelBean0.isDisablePagingParameters());
      assertNull(modelBean0.getSuccessProperty());
      assertFalse(modelBean0.isPaging());
      assertFalse(modelBean0.isClientIdPropertyAddToWriter());
      assertNull(modelBean0.getTotalProperty());
      assertNull(modelBean0.getRootProperty());
      assertNull(modelBean0.getIdProperty());
      assertEquals("json", modelBean0.getWriter());
      assertNull(modelBean0.getDestroyMethod());
      assertNull(modelBean0.getIdentifier());
      assertTrue(modelBean0.isAutodetectTypes());
      assertEquals("java.lang.Object", modelBean0.getName());
      assertEquals("json", modelBean0.getReader());
      assertNull(modelBean0.getUpdateMethod());
      assertEquals("Ext.data.Model", modelBean0.getExtend());
      assertNull(modelBean0.getReadMethod());
      assertNull(modelBean0.getCreateMethod());
      assertNull(modelBean0.getMessageProperty());
      assertNull(modelBean0.getClientIdProperty());
      assertNull(modelBean0.getVersionProperty());
      assertNull(modelBean0.getWriteAllFields());
      assertNull(outputConfig0.getOutputFormat());
      assertNull(outputConfig0.getIncludeValidation());
      assertFalse(outputConfig0.isSurroundApiWithQuotes());
      assertFalse(outputConfig0.isUseSingleQuotes());
      assertNull(outputConfig0.getLineEnding());
      assertNotSame(modelBean0, modelBean1);
      assertFalse(modelBean0.equals((Object)modelBean1));
      assertNotNull(string0);
      assertEquals("Ext.define(\"java.lang.Object\",\r\n{\n  extend : \"Ext.data.Model\",\n  config : {\n    fields : [ ]\n  }\n});", string0);
      
      Class<Object> class1 = Object.class;
      ModelBean modelBean2 = ModelGenerator.createModel(class1);
      assertNull(modelBean2.getClientIdProperty());
      assertNull(modelBean2.getWriteAllFields());
      assertNull(modelBean2.getIdProperty());
      assertNull(modelBean2.getUpdateMethod());
      assertEquals("json", modelBean2.getReader());
      assertNull(modelBean2.getVersionProperty());
      assertNull(modelBean2.getSuccessProperty());
      assertEquals("java.lang.Object", modelBean2.getName());
      assertFalse(modelBean2.isDisablePagingParameters());
      assertNull(modelBean2.getReadMethod());
      assertFalse(modelBean2.isPaging());
      assertTrue(modelBean2.isAutodetectTypes());
      assertFalse(modelBean2.isClientIdPropertyAddToWriter());
      assertEquals("json", modelBean2.getWriter());
      assertNull(modelBean2.getDestroyMethod());
      assertNull(modelBean2.getIdentifier());
      assertNull(modelBean2.getCreateMethod());
      assertNull(modelBean2.getMessageProperty());
      assertNull(modelBean2.getRootProperty());
      assertNull(modelBean2.getTotalProperty());
      assertSame(class1, class0);
      assertNotSame(modelBean2, modelBean0);
      assertNotSame(modelBean2, modelBean1);
      assertFalse(modelBean2.equals((Object)modelBean0));
      assertFalse(modelBean2.equals((Object)modelBean1));
      assertNotNull(modelBean2);
      
      HttpServletResponseWrapper httpServletResponseWrapper0 = null;
      try {
        httpServletResponseWrapper0 = new HttpServletResponseWrapper((HttpServletResponse) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Response cannot be null
         //
         verifyException("javax.servlet.ServletResponseWrapper", e);
      }
  }

  @Test(timeout = 4000000)
  public void test047()  throws Throwable  {
      HttpServletResponse httpServletResponse0 = mock(HttpServletResponse.class, new ViolatedAssumptionAnswer());
      doReturn((ServletOutputStream) null).when(httpServletResponse0).getOutputStream();
      IncludeValidation includeValidation0 = IncludeValidation.BUILTIN;
      Class<Object> class0 = Object.class;
      ModelBean modelBean0 = ModelGenerator.createModel(class0, includeValidation0);
      assertNull(modelBean0.getIdProperty());
      assertTrue(modelBean0.isAutodetectTypes());
      assertNull(modelBean0.getWriteAllFields());
      assertNull(modelBean0.getCreateMethod());
      assertEquals("json", modelBean0.getReader());
      assertNull(modelBean0.getUpdateMethod());
      assertNull(modelBean0.getMessageProperty());
      assertNull(modelBean0.getDestroyMethod());
      assertNull(modelBean0.getRootProperty());
      assertEquals("`}zU`yZ19?l.J%Se", modelBean0.getIdentifier());
      assertNull(modelBean0.getTotalProperty());
      assertEquals("d1WtV(zz", modelBean0.getReadMethod());
      assertEquals("json", modelBean0.getWriter());
      assertFalse(modelBean0.isDisablePagingParameters());
      assertNull(modelBean0.getVersionProperty());
      assertFalse(modelBean0.isClientIdPropertyAddToWriter());
      assertNull(modelBean0.getClientIdProperty());
      assertEquals("Ext.data.Model", modelBean0.getExtend());
      assertFalse(modelBean0.isPaging());
      assertNull(modelBean0.getSuccessProperty());
      assertEquals("java.lang.Object", modelBean0.getName());
      assertNotNull(modelBean0);
      
      HttpServletResponseWrapper httpServletResponseWrapper0 = new HttpServletResponseWrapper(httpServletResponse0);
      assertNotNull(httpServletResponseWrapper0);
      
      HttpServletResponseWrapper httpServletResponseWrapper1 = new HttpServletResponseWrapper(httpServletResponseWrapper0);
      assertFalse(httpServletResponseWrapper1.equals((Object)httpServletResponseWrapper0));
      assertNotNull(httpServletResponseWrapper1);
      
      ServletResponseWrapper servletResponseWrapper0 = new ServletResponseWrapper(httpServletResponseWrapper0);
      assertFalse(httpServletResponseWrapper0.equals((Object)httpServletResponseWrapper1));
      assertNotNull(servletResponseWrapper0);
      
      ServletOutputStream servletOutputStream0 = httpServletResponseWrapper1.getOutputStream();
      assertNotSame(httpServletResponseWrapper0, httpServletResponseWrapper1);
      assertNotSame(httpServletResponseWrapper1, httpServletResponseWrapper0);
      assertFalse(httpServletResponseWrapper0.equals((Object)httpServletResponseWrapper1));
      assertFalse(httpServletResponseWrapper1.equals((Object)httpServletResponseWrapper0));
      assertNull(servletOutputStream0);
      
      HttpServletResponseWrapper httpServletResponseWrapper2 = new HttpServletResponseWrapper(httpServletResponseWrapper1);
      assertFalse(httpServletResponseWrapper0.equals((Object)httpServletResponseWrapper1));
      assertFalse(httpServletResponseWrapper1.equals((Object)httpServletResponseWrapper0));
      assertFalse(httpServletResponseWrapper2.equals((Object)httpServletResponseWrapper1));
      assertFalse(httpServletResponseWrapper2.equals((Object)httpServletResponseWrapper0));
      assertNotNull(httpServletResponseWrapper2);
      
      Class<Object> class1 = Object.class;
      ModelBean modelBean1 = ModelGenerator.createModel(class1);
      assertEquals("d1WtV(zz", modelBean1.getReadMethod());
      assertEquals("json", modelBean1.getWriter());
      assertFalse(modelBean1.isClientIdPropertyAddToWriter());
      assertNull(modelBean1.getRootProperty());
      assertNull(modelBean1.getCreateMethod());
      assertNull(modelBean1.getMessageProperty());
      assertNull(modelBean1.getDestroyMethod());
      assertNull(modelBean1.getTotalProperty());
      assertNull(modelBean1.getClientIdProperty());
      assertTrue(modelBean1.isAutodetectTypes());
      assertNull(modelBean1.getWriteAllFields());
      assertNull(modelBean1.getIdProperty());
      assertNull(modelBean1.getUpdateMethod());
      assertEquals("G02z4]Nf6A#kC(", modelBean1.getExtend());
      assertEquals("json", modelBean1.getReader());
      assertFalse(modelBean1.isPaging());
      assertFalse(modelBean1.isDisablePagingParameters());
      assertNull(modelBean1.getVersionProperty());
      assertEquals("java.lang.Object", modelBean1.getName());
      assertNull(modelBean1.getSuccessProperty());
      assertEquals("defaultValue", modelBean1.getIdentifier());
      assertSame(class1, class0);
      assertNotSame(modelBean1, modelBean0);
      assertFalse(modelBean1.equals((Object)modelBean0));
      assertNotNull(modelBean1);
      
      OutputFormat outputFormat0 = OutputFormat.EXTJS5;
      String string0 = ModelGenerator.generateJavascript(modelBean1, outputFormat0, false);
      assertEquals("d1WtV(zz", modelBean1.getReadMethod());
      assertEquals("json", modelBean1.getWriter());
      assertFalse(modelBean1.isClientIdPropertyAddToWriter());
      assertNull(modelBean1.getRootProperty());
      assertNull(modelBean1.getCreateMethod());
      assertNull(modelBean1.getMessageProperty());
      assertNull(modelBean1.getDestroyMethod());
      assertNull(modelBean1.getTotalProperty());
      assertNull(modelBean1.getClientIdProperty());
      assertTrue(modelBean1.isAutodetectTypes());
      assertNull(modelBean1.getWriteAllFields());
      assertNull(modelBean1.getIdProperty());
      assertNull(modelBean1.getUpdateMethod());
      assertEquals("G02z4]Nf6A#kC(", modelBean1.getExtend());
      assertEquals("json", modelBean1.getReader());
      assertFalse(modelBean1.isPaging());
      assertFalse(modelBean1.isDisablePagingParameters());
      assertNull(modelBean1.getVersionProperty());
      assertEquals("java.lang.Object", modelBean1.getName());
      assertNull(modelBean1.getSuccessProperty());
      assertEquals("defaultValue", modelBean1.getIdentifier());
      assertSame(class1, class0);
      assertNotSame(modelBean1, modelBean0);
      assertFalse(modelBean1.equals((Object)modelBean0));
      assertNotNull(string0);
  }

  @Test(timeout = 4000000)
  public void test048()  throws Throwable  {
      Class<Object> class0 = Object.class;
      IncludeValidation includeValidation0 = IncludeValidation.NONE;
      ModelBean modelBean0 = ModelGenerator.createModel(class0, includeValidation0);
      assertFalse(modelBean0.isDisablePagingParameters());
      assertNull(modelBean0.getRootProperty());
      assertFalse(modelBean0.isPaging());
      assertNull(modelBean0.getVersionProperty());
      assertNull(modelBean0.getSuccessProperty());
      assertEquals("json", modelBean0.getWriter());
      assertNull(modelBean0.getClientIdProperty());
      assertEquals("defaultValue", modelBean0.getIdentifier());
      assertTrue(modelBean0.isAutodetectTypes());
      assertFalse(modelBean0.isClientIdPropertyAddToWriter());
      assertNull(modelBean0.getReadMethod());
      assertNull(modelBean0.getCreateMethod());
      assertEquals("json", modelBean0.getReader());
      assertNull(modelBean0.getIdProperty());
      assertNull(modelBean0.getWriteAllFields());
      assertEquals("G02z4]Nf6A#kC(", modelBean0.getExtend());
      assertEquals("java.lang.Object", modelBean0.getName());
      assertNull(modelBean0.getTotalProperty());
      assertNull(modelBean0.getDestroyMethod());
      assertNull(modelBean0.getUpdateMethod());
      assertNull(modelBean0.getMessageProperty());
      assertNotNull(modelBean0);
      
      OutputConfig outputConfig0 = new OutputConfig();
      assertNull(outputConfig0.getOutputFormat());
      assertNull(outputConfig0.getLineEnding());
      assertNull(outputConfig0.getIncludeValidation());
      assertFalse(outputConfig0.isSurroundApiWithQuotes());
      assertNotNull(outputConfig0);
      
      outputConfig0.setUseSingleQuotes(true);
      assertNull(outputConfig0.getOutputFormat());
      assertNull(outputConfig0.getLineEnding());
      assertNull(outputConfig0.getIncludeValidation());
      assertFalse(outputConfig0.isSurroundApiWithQuotes());
      
      outputConfig0.setDebug(true);
      assertNull(outputConfig0.getOutputFormat());
      assertNull(outputConfig0.getLineEnding());
      assertNull(outputConfig0.getIncludeValidation());
      assertFalse(outputConfig0.isSurroundApiWithQuotes());
      
      modelBean0.setExtend("G02z4]Nf6A#kC(");
      assertFalse(modelBean0.isDisablePagingParameters());
      assertNull(modelBean0.getRootProperty());
      assertFalse(modelBean0.isPaging());
      assertNull(modelBean0.getVersionProperty());
      assertNull(modelBean0.getSuccessProperty());
      assertEquals("json", modelBean0.getWriter());
      assertNull(modelBean0.getClientIdProperty());
      assertEquals("defaultValue", modelBean0.getIdentifier());
      assertTrue(modelBean0.isAutodetectTypes());
      assertFalse(modelBean0.isClientIdPropertyAddToWriter());
      assertNull(modelBean0.getReadMethod());
      assertNull(modelBean0.getCreateMethod());
      assertEquals("json", modelBean0.getReader());
      assertNull(modelBean0.getIdProperty());
      assertNull(modelBean0.getWriteAllFields());
      assertEquals("G02z4]Nf6A#kC(", modelBean0.getExtend());
      assertEquals("java.lang.Object", modelBean0.getName());
      assertNull(modelBean0.getTotalProperty());
      assertNull(modelBean0.getDestroyMethod());
      assertNull(modelBean0.getUpdateMethod());
      assertNull(modelBean0.getMessageProperty());
      
      OutputFormat outputFormat0 = OutputFormat.EXTJS5;
      outputConfig0.setOutputFormat(outputFormat0);
      assertEquals(OutputFormat.EXTJS5, outputConfig0.getOutputFormat());
      assertNull(outputConfig0.getLineEnding());
      assertNull(outputConfig0.getIncludeValidation());
      assertFalse(outputConfig0.isSurroundApiWithQuotes());
      
      String string0 = ModelGenerator.generateJavascript(modelBean0, outputConfig0);
      assertFalse(modelBean0.isDisablePagingParameters());
      assertNull(modelBean0.getRootProperty());
      assertFalse(modelBean0.isPaging());
      assertNull(modelBean0.getVersionProperty());
      assertNull(modelBean0.getSuccessProperty());
      assertEquals("json", modelBean0.getWriter());
      assertNull(modelBean0.getClientIdProperty());
      assertEquals("defaultValue", modelBean0.getIdentifier());
      assertTrue(modelBean0.isAutodetectTypes());
      assertFalse(modelBean0.isClientIdPropertyAddToWriter());
      assertNull(modelBean0.getReadMethod());
      assertNull(modelBean0.getCreateMethod());
      assertEquals("json", modelBean0.getReader());
      assertNull(modelBean0.getIdProperty());
      assertNull(modelBean0.getWriteAllFields());
      assertEquals("G02z4]Nf6A#kC(", modelBean0.getExtend());
      assertEquals("java.lang.Object", modelBean0.getName());
      assertNull(modelBean0.getTotalProperty());
      assertNull(modelBean0.getDestroyMethod());
      assertNull(modelBean0.getUpdateMethod());
      assertNull(modelBean0.getMessageProperty());
      assertEquals(OutputFormat.EXTJS5, outputConfig0.getOutputFormat());
      assertNull(outputConfig0.getLineEnding());
      assertNull(outputConfig0.getIncludeValidation());
      assertFalse(outputConfig0.isSurroundApiWithQuotes());
      assertNotNull(string0);
      assertEquals("Ext.define('java.lang.Object',\r\n{\n  extend : 'G02z4]Nf6A#kC(',\n  identifier : 'defaultValue',\n  fields : [ ],\n  hasMany : [ ]\n});", string0);
      
      String string1 = ModelGenerator.trimToNull("Ext.define('java.lang.Object',\r\n{\n  extend : 'G02z4]Nf6A#kC(',\n  identifier : 'defaultValue',\n  fields : [ ],\n  hasMany : [ ]\n});");
      assertNotNull(string1);
      assertEquals("Ext.define('java.lang.Object',\r\n{\n  extend : 'G02z4]Nf6A#kC(',\n  identifier : 'defaultValue',\n  fields : [ ],\n  hasMany : [ ]\n});", string1);
      
      String string2 = ModelGenerator.generateJavascript(modelBean0, outputConfig0);
      assertFalse(modelBean0.isDisablePagingParameters());
      assertNull(modelBean0.getRootProperty());
      assertFalse(modelBean0.isPaging());
      assertNull(modelBean0.getVersionProperty());
      assertNull(modelBean0.getSuccessProperty());
      assertEquals("json", modelBean0.getWriter());
      assertNull(modelBean0.getClientIdProperty());
      assertEquals("defaultValue", modelBean0.getIdentifier());
      assertTrue(modelBean0.isAutodetectTypes());
      assertFalse(modelBean0.isClientIdPropertyAddToWriter());
      assertNull(modelBean0.getReadMethod());
      assertNull(modelBean0.getCreateMethod());
      assertEquals("json", modelBean0.getReader());
      assertNull(modelBean0.getIdProperty());
      assertNull(modelBean0.getWriteAllFields());
      assertEquals("G02z4]Nf6A#kC(", modelBean0.getExtend());
      assertEquals("java.lang.Object", modelBean0.getName());
      assertNull(modelBean0.getTotalProperty());
      assertNull(modelBean0.getDestroyMethod());
      assertNull(modelBean0.getUpdateMethod());
      assertNull(modelBean0.getMessageProperty());
      assertEquals(OutputFormat.EXTJS5, outputConfig0.getOutputFormat());
      assertNull(outputConfig0.getLineEnding());
      assertNull(outputConfig0.getIncludeValidation());
      assertFalse(outputConfig0.isSurroundApiWithQuotes());
      assertTrue(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("Ext.define('java.lang.Object',\r\n{\n  extend : 'G02z4]Nf6A#kC(',\n  identifier : 'defaultValue',\n  fields : [ ],\n  hasMany : [ ]\n});", string2);
      
      Class<Object> class1 = Object.class;
      ModelBean modelBean1 = ModelGenerator.createModel(class1, includeValidation0);
      assertEquals("json", modelBean1.getWriter());
      assertFalse(modelBean1.isDisablePagingParameters());
      assertFalse(modelBean1.isClientIdPropertyAddToWriter());
      assertFalse(modelBean1.isPaging());
      assertNull(modelBean1.getVersionProperty());
      assertNull(modelBean1.getSuccessProperty());
      assertEquals("java.lang.Object", modelBean1.getName());
      assertNull(modelBean1.getClientIdProperty());
      assertNull(modelBean1.getWriteAllFields());
      assertNull(modelBean1.getReadMethod());
      assertTrue(modelBean1.isAutodetectTypes());
      assertNull(modelBean1.getIdProperty());
      assertEquals("defaultValue", modelBean1.getIdentifier());
      assertEquals("G02z4]Nf6A#kC(", modelBean1.getExtend());
      assertNull(modelBean1.getCreateMethod());
      assertEquals("json", modelBean1.getReader());
      assertNull(modelBean1.getUpdateMethod());
      assertNull(modelBean1.getMessageProperty());
      assertNull(modelBean1.getTotalProperty());
      assertNull(modelBean1.getDestroyMethod());
      assertNull(modelBean1.getRootProperty());
      assertSame(class1, class0);
      assertSame(modelBean1, modelBean0);
      assertNotNull(modelBean1);
      
      HttpServletRequest httpServletRequest0 = mock(HttpServletRequest.class, new ViolatedAssumptionAnswer());
      doReturn("Ext.define('java.lang.Object',\r\n{\n  extend : 'G02z4]Nf6A#kC(',\n  identifier : 'defaultValue',\n  fields : [ ],\n  hasMany : [ ]\n});").when(httpServletRequest0).getHeader(anyString());
      doReturn((String) null).when(httpServletRequest0).getMethod();
      HttpServletRequestWrapper httpServletRequestWrapper0 = new HttpServletRequestWrapper(httpServletRequest0);
      assertNotNull(httpServletRequestWrapper0);
      
      HttpServletResponse httpServletResponse0 = mock(HttpServletResponse.class, new ViolatedAssumptionAnswer());
      doReturn((ServletOutputStream) null).when(httpServletResponse0).getOutputStream();
      HttpServletResponseWrapper httpServletResponseWrapper0 = new HttpServletResponseWrapper(httpServletResponse0);
      assertNotNull(httpServletResponseWrapper0);
      
      String[] stringArray0 = new String[0];
      modelBean1.setHasMany(stringArray0);
      assertEquals("json", modelBean1.getWriter());
      assertFalse(modelBean1.isDisablePagingParameters());
      assertFalse(modelBean1.isClientIdPropertyAddToWriter());
      assertFalse(modelBean1.isPaging());
      assertNull(modelBean1.getVersionProperty());
      assertNull(modelBean1.getSuccessProperty());
      assertEquals("java.lang.Object", modelBean1.getName());
      assertNull(modelBean1.getClientIdProperty());
      assertNull(modelBean1.getWriteAllFields());
      assertNull(modelBean1.getReadMethod());
      assertTrue(modelBean1.isAutodetectTypes());
      assertNull(modelBean1.getIdProperty());
      assertEquals("defaultValue", modelBean1.getIdentifier());
      assertEquals("G02z4]Nf6A#kC(", modelBean1.getExtend());
      assertNull(modelBean1.getCreateMethod());
      assertEquals("json", modelBean1.getReader());
      assertNull(modelBean1.getUpdateMethod());
      assertNull(modelBean1.getMessageProperty());
      assertNull(modelBean1.getTotalProperty());
      assertNull(modelBean1.getDestroyMethod());
      assertNull(modelBean1.getRootProperty());
      assertSame(class1, class0);
      assertSame(modelBean1, modelBean0);
      assertEquals(0, stringArray0.length);
      
      String string3 = httpServletRequestWrapper0.getMethod();
      assertNull(string3);
      
      Class<ModelFieldBean> class2 = ModelFieldBean.class;
      httpServletResponseWrapper0.setCharacterEncoding("G02z4]Nf6A#kC(");
      ModelBean modelBean2 = ModelGenerator.createModel(class2, includeValidation0);
      assertFalse(modelBean2.isDisablePagingParameters());
      assertNull(modelBean2.getRootProperty());
      assertFalse(modelBean2.isPaging());
      assertNull(modelBean2.getVersionProperty());
      assertNull(modelBean2.getSuccessProperty());
      assertEquals("map2ing", modelBean2.getIdProperty());
      assertEquals("json", modelBean2.getWriter());
      assertNull(modelBean2.getIdentifier());
      assertNull(modelBean2.getMessageProperty());
      assertNull(modelBean2.getCreateMethod());
      assertEquals("ch.rasc.extclassgenerator.ModelFieldBean", modelBean2.getName());
      assertEquals("json", modelBean2.getReader());
      assertNull(modelBean2.getUpdateMethod());
      assertNull(modelBean2.getTotalProperty());
      assertNull(modelBean2.getDestroyMethod());
      assertNull(modelBean2.getWriteAllFields());
      assertNull(modelBean2.getClientIdProperty());
      assertEquals("Ext.data.Model", modelBean2.getExtend());
      assertFalse(modelBean2.isClientIdPropertyAddToWriter());
      assertTrue(modelBean2.isAutodetectTypes());
      assertNull(modelBean2.getReadMethod());
      assertNotSame(modelBean2, modelBean0);
      assertNotSame(modelBean2, modelBean1);
      assertFalse(modelBean2.equals((Object)modelBean0));
      assertFalse(modelBean2.equals((Object)modelBean1));
      assertNotNull(modelBean2);
      
      OutputFormat outputFormat1 = OutputFormat.TOUCH2;
      // Undeclared exception!
      try { 
        ModelGenerator.writeModel((HttpServletRequest) httpServletRequestWrapper0, (HttpServletResponse) httpServletResponseWrapper0, modelBean0, outputFormat1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("ch.rasc.extclassgenerator.ModelGenerator", e);
      }
  }

  @Test(timeout = 4000000)
  public void test049()  throws Throwable  {
      Class<Object> class0 = Object.class;
      IncludeValidation includeValidation0 = IncludeValidation.BUILTIN;
      ModelBean modelBean0 = ModelGenerator.createModel(class0, includeValidation0);
      assertFalse(modelBean0.isClientIdPropertyAddToWriter());
      assertNull(modelBean0.getTotalProperty());
      assertNull(modelBean0.getCreateMethod());
      assertEquals("json", modelBean0.getWriter());
      assertNull(modelBean0.getRootProperty());
      assertNull(modelBean0.getIdentifier());
      assertNull(modelBean0.getIdProperty());
      assertNull(modelBean0.getDestroyMethod());
      assertNull(modelBean0.getMessageProperty());
      assertFalse(modelBean0.isPaging());
      assertNull(modelBean0.getSuccessProperty());
      assertFalse(modelBean0.isDisablePagingParameters());
      assertNull(modelBean0.getReadMethod());
      assertNull(modelBean0.getWriteAllFields());
      assertTrue(modelBean0.isAutodetectTypes());
      assertEquals("java.lang.Object", modelBean0.getName());
      assertEquals("json", modelBean0.getReader());
      assertNull(modelBean0.getUpdateMethod());
      assertEquals("Ext.data.Model", modelBean0.getExtend());
      assertNull(modelBean0.getClientIdProperty());
      assertNull(modelBean0.getVersionProperty());
      assertNotNull(modelBean0);
      
      HttpServletRequest httpServletRequest0 = mock(HttpServletRequest.class, new ViolatedAssumptionAnswer());
      doReturn((Map) null).when(httpServletRequest0).getParameterMap();
      doReturn(false).when(httpServletRequest0).isAsyncSupported();
      doReturn((String) null).when(httpServletRequest0).getRequestedSessionId();
      HttpServletRequestWrapper httpServletRequestWrapper0 = new HttpServletRequestWrapper(httpServletRequest0);
      assertNotNull(httpServletRequestWrapper0);
      
      boolean boolean0 = httpServletRequestWrapper0.isAsyncSupported();
      assertFalse(boolean0);
      
      String string0 = httpServletRequestWrapper0.getRequestedSessionId();
      assertNull(string0);
      
      OutputConfig outputConfig0 = new OutputConfig();
      assertFalse(outputConfig0.isDebug());
      assertNull(outputConfig0.getIncludeValidation());
      assertFalse(outputConfig0.isUseSingleQuotes());
      assertNull(outputConfig0.getLineEnding());
      assertNull(outputConfig0.getOutputFormat());
      assertNotNull(outputConfig0);
      
      Map<String, String[]> map0 = httpServletRequestWrapper0.getParameterMap();
      assertTrue(map0.isEmpty());
      assertEquals(0, map0.size());
      
      outputConfig0.setSurroundApiWithQuotes(true);
      assertFalse(outputConfig0.isDebug());
      assertNull(outputConfig0.getIncludeValidation());
      assertFalse(outputConfig0.isUseSingleQuotes());
      assertNull(outputConfig0.getLineEnding());
      assertNull(outputConfig0.getOutputFormat());
      
      outputConfig0.setDebug(false);
      assertFalse(outputConfig0.isDebug());
      assertNull(outputConfig0.getIncludeValidation());
      assertFalse(outputConfig0.isUseSingleQuotes());
      assertNull(outputConfig0.getLineEnding());
      assertNull(outputConfig0.getOutputFormat());
      
      ModelBean modelBean1 = new ModelBean();
      assertEquals("Ext.data.Model", modelBean1.getExtend());
      assertNull(modelBean1.getClientIdProperty());
      assertNull(modelBean1.getWriteAllFields());
      assertNull(modelBean1.getIdProperty());
      assertNull(modelBean1.getVersionProperty());
      assertNull(modelBean1.getCreateMethod());
      assertNull(modelBean1.getIdentifier());
      assertNull(modelBean1.getUpdateMethod());
      assertNull(modelBean1.getRootProperty());
      assertNull(modelBean1.getMessageProperty());
      assertNull(modelBean1.getTotalProperty());
      assertNull(modelBean1.getName());
      assertFalse(modelBean1.isClientIdPropertyAddToWriter());
      assertNull(modelBean1.getDestroyMethod());
      assertEquals("json", modelBean1.getWriter());
      assertNull(modelBean1.getSuccessProperty());
      assertFalse(modelBean1.isDisablePagingParameters());
      assertNull(modelBean1.getReadMethod());
      assertTrue(modelBean1.isAutodetectTypes());
      assertFalse(modelBean1.isPaging());
      assertFalse(modelBean1.equals((Object)modelBean0));
      assertNotNull(modelBean1);
      
      modelBean1.setReader("Failed to introspect meta-annotation ");
      assertEquals("Ext.data.Model", modelBean1.getExtend());
      assertNull(modelBean1.getClientIdProperty());
      assertNull(modelBean1.getWriteAllFields());
      assertNull(modelBean1.getIdProperty());
      assertNull(modelBean1.getVersionProperty());
      assertNull(modelBean1.getCreateMethod());
      assertNull(modelBean1.getIdentifier());
      assertNull(modelBean1.getUpdateMethod());
      assertNull(modelBean1.getRootProperty());
      assertNull(modelBean1.getMessageProperty());
      assertNull(modelBean1.getTotalProperty());
      assertNull(modelBean1.getName());
      assertFalse(modelBean1.isClientIdPropertyAddToWriter());
      assertNull(modelBean1.getDestroyMethod());
      assertEquals("json", modelBean1.getWriter());
      assertNull(modelBean1.getSuccessProperty());
      assertFalse(modelBean1.isDisablePagingParameters());
      assertNull(modelBean1.getReadMethod());
      assertTrue(modelBean1.isAutodetectTypes());
      assertFalse(modelBean1.isPaging());
      assertNotSame(modelBean1, modelBean0);
      assertFalse(modelBean1.equals((Object)modelBean0));
      
      String string1 = ModelGenerator.generateJavascript(modelBean1, outputConfig0);
      assertFalse(outputConfig0.isDebug());
      assertNull(outputConfig0.getIncludeValidation());
      assertFalse(outputConfig0.isUseSingleQuotes());
      assertNull(outputConfig0.getLineEnding());
      assertNull(outputConfig0.getOutputFormat());
      assertEquals("Ext.data.Model", modelBean1.getExtend());
      assertNull(modelBean1.getClientIdProperty());
      assertNull(modelBean1.getWriteAllFields());
      assertNull(modelBean1.getIdProperty());
      assertNull(modelBean1.getVersionProperty());
      assertNull(modelBean1.getCreateMethod());
      assertNull(modelBean1.getIdentifier());
      assertNull(modelBean1.getUpdateMethod());
      assertNull(modelBean1.getRootProperty());
      assertNull(modelBean1.getMessageProperty());
      assertNull(modelBean1.getTotalProperty());
      assertNull(modelBean1.getName());
      assertFalse(modelBean1.isClientIdPropertyAddToWriter());
      assertNull(modelBean1.getDestroyMethod());
      assertEquals("json", modelBean1.getWriter());
      assertNull(modelBean1.getSuccessProperty());
      assertFalse(modelBean1.isDisablePagingParameters());
      assertNull(modelBean1.getReadMethod());
      assertTrue(modelBean1.isAutodetectTypes());
      assertFalse(modelBean1.isPaging());
      assertNotSame(modelBean1, modelBean0);
      assertFalse(modelBean1.equals((Object)modelBean0));
      assertNotNull(string1);
      assertEquals("Ext.define(\"null\",{extend:\"Ext.data.Model\",config:{fields:[],proxy:{type:\"direct\",reader:{type:\"Failed to introspect meta-annotation \"}}}});", string1);
      
      Class<String> class1 = String.class;
      ModelBean modelBean2 = ModelGenerator.createModel(class1);
      assertFalse(modelBean2.isClientIdPropertyAddToWriter());
      assertFalse(modelBean2.isDisablePagingParameters());
      assertNull(modelBean2.getRootProperty());
      assertEquals("java.lang.String", modelBean2.getName());
      assertNull(modelBean2.getTotalProperty());
      assertNull(modelBean2.getIdProperty());
      assertEquals("json", modelBean2.getWriter());
      assertNull(modelBean2.getDestroyMethod());
      assertNull(modelBean2.getIdentifier());
      assertNull(modelBean2.getClientIdProperty());
      assertNull(modelBean2.getMessageProperty());
      assertTrue(modelBean2.isAutodetectTypes());
      assertNull(modelBean2.getReadMethod());
      assertNull(modelBean2.getCreateMethod());
      assertFalse(modelBean2.isPaging());
      assertNull(modelBean2.getVersionProperty());
      assertNull(modelBean2.getSuccessProperty());
      assertEquals("json", modelBean2.getReader());
      assertNull(modelBean2.getUpdateMethod());
      assertNull(modelBean2.getWriteAllFields());
      assertNotSame(modelBean2, modelBean1);
      assertNotSame(modelBean2, modelBean0);
      assertFalse(modelBean2.equals((Object)modelBean1));
      assertFalse(modelBean2.equals((Object)modelBean0));
      assertNotNull(modelBean2);
      
      IncludeValidation includeValidation1 = IncludeValidation.NONE;
      outputConfig0.setIncludeValidation(includeValidation1);
      assertEquals(IncludeValidation.NONE, outputConfig0.getIncludeValidation());
      assertFalse(outputConfig0.isDebug());
      assertFalse(outputConfig0.isUseSingleQuotes());
      assertNull(outputConfig0.getLineEnding());
      assertNull(outputConfig0.getOutputFormat());
      assertNotSame(includeValidation1, includeValidation0);
      assertFalse(includeValidation1.equals((Object)includeValidation0));
      
      outputConfig0.setSurroundApiWithQuotes(false);
      assertEquals(IncludeValidation.NONE, outputConfig0.getIncludeValidation());
      assertFalse(outputConfig0.isDebug());
      assertFalse(outputConfig0.isUseSingleQuotes());
      assertNull(outputConfig0.getLineEnding());
      assertNull(outputConfig0.getOutputFormat());
      
      String string2 = ModelGenerator.generateJavascript(modelBean0, outputConfig0);
      assertFalse(modelBean0.isClientIdPropertyAddToWriter());
      assertNull(modelBean0.getTotalProperty());
      assertNull(modelBean0.getCreateMethod());
      assertEquals("json", modelBean0.getWriter());
      assertNull(modelBean0.getRootProperty());
      assertNull(modelBean0.getIdentifier());
      assertNull(modelBean0.getIdProperty());
      assertNull(modelBean0.getDestroyMethod());
      assertNull(modelBean0.getMessageProperty());
      assertFalse(modelBean0.isPaging());
      assertNull(modelBean0.getSuccessProperty());
      assertFalse(modelBean0.isDisablePagingParameters());
      assertNull(modelBean0.getReadMethod());
      assertNull(modelBean0.getWriteAllFields());
      assertTrue(modelBean0.isAutodetectTypes());
      assertEquals("java.lang.Object", modelBean0.getName());
      assertEquals("json", modelBean0.getReader());
      assertNull(modelBean0.getUpdateMethod());
      assertEquals("Ext.data.Model", modelBean0.getExtend());
      assertNull(modelBean0.getClientIdProperty());
      assertNull(modelBean0.getVersionProperty());
      assertEquals(IncludeValidation.NONE, outputConfig0.getIncludeValidation());
      assertFalse(outputConfig0.isDebug());
      assertFalse(outputConfig0.isUseSingleQuotes());
      assertNull(outputConfig0.getLineEnding());
      assertNull(outputConfig0.getOutputFormat());
      assertNotSame(includeValidation0, includeValidation1);
      assertNotSame(modelBean0, modelBean1);
      assertNotSame(modelBean0, modelBean2);
      assertFalse(includeValidation0.equals((Object)includeValidation1));
      assertFalse(modelBean0.equals((Object)modelBean1));
      assertFalse(modelBean0.equals((Object)modelBean2));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("Ext.define(\"java.lang.Object\",{extend:\"Ext.data.Model\",config:{fields:[]}});", string2);
      
      Class<AssertStmt> class2 = AssertStmt.class;
      ModelBean modelBean3 = ModelGenerator.createModel(class2);
      assertEquals("json", modelBean3.getWriter());
      assertNull(modelBean3.getSuccessProperty());
      assertNull(modelBean3.getVersionProperty());
      assertNull(modelBean3.getRootProperty());
      assertNull(modelBean3.getIdentifier());
      assertNull(modelBean3.getTotalProperty());
      assertEquals("com.github.javaparser.ast.stmt.AssertStmt", modelBean3.getName());
      assertNull(modelBean3.getCreateMethod());
      assertNull(modelBean3.getMessageProperty());
      assertNull(modelBean3.getIdProperty());
      assertNull(modelBean3.getUpdateMethod());
      assertNull(modelBean3.getWriteAllFields());
      assertTrue(modelBean3.isAutodetectTypes());
      assertEquals("json", modelBean3.getReader());
      assertEquals("Ext.data.Model", modelBean3.getExtend());
      assertNull(modelBean3.getClientIdProperty());
      assertNull(modelBean3.getDestroyMethod());
      assertFalse(modelBean3.isClientIdPropertyAddToWriter());
      assertFalse(modelBean3.isPaging());
      assertFalse(modelBean3.isDisablePagingParameters());
      assertNull(modelBean3.getReadMethod());
      assertNotSame(modelBean3, modelBean2);
      assertNotSame(modelBean3, modelBean0);
      assertNotSame(modelBean3, modelBean1);
      assertFalse(modelBean3.equals((Object)modelBean2));
      assertFalse(modelBean3.equals((Object)modelBean0));
      assertFalse(modelBean3.equals((Object)modelBean1));
      assertNotNull(modelBean3);
  }

  @Test(timeout = 4000000)
  public void test050()  throws Throwable  {
      OutputConfig outputConfig0 = new OutputConfig();
      assertNull(outputConfig0.getIncludeValidation());
      assertNull(outputConfig0.getOutputFormat());
      assertFalse(outputConfig0.isUseSingleQuotes());
      assertFalse(outputConfig0.isDebug());
      assertNull(outputConfig0.getLineEnding());
      assertNotNull(outputConfig0);
      
      OutputFormat outputFormat0 = OutputFormat.EXTJS5;
      outputConfig0.setOutputFormat(outputFormat0);
      assertEquals(OutputFormat.EXTJS5, outputConfig0.getOutputFormat());
      assertNull(outputConfig0.getIncludeValidation());
      assertFalse(outputConfig0.isUseSingleQuotes());
      assertFalse(outputConfig0.isDebug());
      assertNull(outputConfig0.getLineEnding());
      
      ModelBean modelBean0 = new ModelBean();
      assertFalse(modelBean0.isClientIdPropertyAddToWriter());
      assertNull(modelBean0.getDestroyMethod());
      assertEquals("json", modelBean0.getWriter());
      assertFalse(modelBean0.isDisablePagingParameters());
      assertNull(modelBean0.getReadMethod());
      assertEquals("Ext.data.Model", modelBean0.getExtend());
      assertFalse(modelBean0.isPaging());
      assertTrue(modelBean0.isAutodetectTypes());
      assertNull(modelBean0.getSuccessProperty());
      assertNull(modelBean0.getClientIdProperty());
      assertNull(modelBean0.getMessageProperty());
      assertNull(modelBean0.getWriteAllFields());
      assertNull(modelBean0.getVersionProperty());
      assertEquals("json", modelBean0.getReader());
      assertNull(modelBean0.getUpdateMethod());
      assertNull(modelBean0.getCreateMethod());
      assertNull(modelBean0.getIdentifier());
      assertNull(modelBean0.getIdProperty());
      assertNull(modelBean0.getRootProperty());
      assertNull(modelBean0.getTotalProperty());
      assertNull(modelBean0.getName());
      assertNotNull(modelBean0);
      
      outputConfig0.setSurroundApiWithQuotes(true);
      assertEquals(OutputFormat.EXTJS5, outputConfig0.getOutputFormat());
      assertNull(outputConfig0.getIncludeValidation());
      assertFalse(outputConfig0.isUseSingleQuotes());
      assertFalse(outputConfig0.isDebug());
      assertNull(outputConfig0.getLineEnding());
      
      modelBean0.setClientIdProperty("j*Gr'Wuh-Amvu>Jlhx3");
      assertFalse(modelBean0.isClientIdPropertyAddToWriter());
      assertNull(modelBean0.getDestroyMethod());
      assertEquals("j*Gr'Wuh-Amvu>Jlhx3", modelBean0.getClientIdProperty());
      assertEquals("json", modelBean0.getWriter());
      assertFalse(modelBean0.isDisablePagingParameters());
      assertNull(modelBean0.getReadMethod());
      assertEquals("Ext.data.Model", modelBean0.getExtend());
      assertFalse(modelBean0.isPaging());
      assertTrue(modelBean0.isAutodetectTypes());
      assertNull(modelBean0.getSuccessProperty());
      assertNull(modelBean0.getMessageProperty());
      assertNull(modelBean0.getWriteAllFields());
      assertNull(modelBean0.getVersionProperty());
      assertEquals("json", modelBean0.getReader());
      assertNull(modelBean0.getUpdateMethod());
      assertNull(modelBean0.getCreateMethod());
      assertNull(modelBean0.getIdentifier());
      assertNull(modelBean0.getIdProperty());
      assertNull(modelBean0.getRootProperty());
      assertNull(modelBean0.getTotalProperty());
      assertNull(modelBean0.getName());
      
      String string0 = ModelGenerator.generateJavascript(modelBean0, outputConfig0);
      assertEquals(OutputFormat.EXTJS5, outputConfig0.getOutputFormat());
      assertNull(outputConfig0.getIncludeValidation());
      assertFalse(outputConfig0.isUseSingleQuotes());
      assertFalse(outputConfig0.isDebug());
      assertNull(outputConfig0.getLineEnding());
      assertFalse(modelBean0.isClientIdPropertyAddToWriter());
      assertNull(modelBean0.getDestroyMethod());
      assertEquals("j*Gr'Wuh-Amvu>Jlhx3", modelBean0.getClientIdProperty());
      assertEquals("json", modelBean0.getWriter());
      assertFalse(modelBean0.isDisablePagingParameters());
      assertNull(modelBean0.getReadMethod());
      assertEquals("Ext.data.Model", modelBean0.getExtend());
      assertFalse(modelBean0.isPaging());
      assertTrue(modelBean0.isAutodetectTypes());
      assertNull(modelBean0.getSuccessProperty());
      assertNull(modelBean0.getMessageProperty());
      assertNull(modelBean0.getWriteAllFields());
      assertNull(modelBean0.getVersionProperty());
      assertEquals("json", modelBean0.getReader());
      assertNull(modelBean0.getUpdateMethod());
      assertNull(modelBean0.getCreateMethod());
      assertNull(modelBean0.getIdentifier());
      assertNull(modelBean0.getIdProperty());
      assertNull(modelBean0.getRootProperty());
      assertNull(modelBean0.getTotalProperty());
      assertNull(modelBean0.getName());
      assertNotNull(string0);
      assertEquals("Ext.define(\"null\",{extend:\"Ext.data.Model\",clientIdProperty:\"j*Gr'Wuh-Amvu>Jlhx3\",fields:[]});", string0);
  }

  @Test(timeout = 4000000)
  public void test051()  throws Throwable  {
      Class<String> class0 = String.class;
      OutputFormat outputFormat0 = OutputFormat.EXTJS4;
      IncludeValidation includeValidation0 = IncludeValidation.NONE;
      // Undeclared exception!
      try { 
        ModelGenerator.writeModel((HttpServletRequest) null, (HttpServletResponse) null, class0, outputFormat0, includeValidation0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("ch.rasc.extclassgenerator.ModelGenerator", e);
      }
  }

  @Test(timeout = 4000000)
  public void test052()  throws Throwable  {
      HttpServletResponse httpServletResponse0 = mock(HttpServletResponse.class, new ViolatedAssumptionAnswer());
      IncludeValidation includeValidation0 = IncludeValidation.BUILTIN;
      Class<Object> class0 = Object.class;
      OutputConfig outputConfig0 = new OutputConfig();
      assertNull(outputConfig0.getIncludeValidation());
      assertNull(outputConfig0.getOutputFormat());
      assertFalse(outputConfig0.isUseSingleQuotes());
      assertNull(outputConfig0.getLineEnding());
      assertFalse(outputConfig0.isDebug());
      assertFalse(outputConfig0.isSurroundApiWithQuotes());
      assertNotNull(outputConfig0);
      
      outputConfig0.setIncludeValidation(includeValidation0);
      assertNull(outputConfig0.getOutputFormat());
      assertFalse(outputConfig0.isUseSingleQuotes());
      assertNull(outputConfig0.getLineEnding());
      assertFalse(outputConfig0.isDebug());
      assertEquals(IncludeValidation.BUILTIN, outputConfig0.getIncludeValidation());
      assertFalse(outputConfig0.isSurroundApiWithQuotes());
      
      Class<String> class1 = String.class;
      ModelBean modelBean0 = ModelGenerator.createModel(class1, outputConfig0);
      assertNull(outputConfig0.getOutputFormat());
      assertFalse(outputConfig0.isUseSingleQuotes());
      assertNull(outputConfig0.getLineEnding());
      assertFalse(outputConfig0.isDebug());
      assertEquals(IncludeValidation.BUILTIN, outputConfig0.getIncludeValidation());
      assertFalse(outputConfig0.isSurroundApiWithQuotes());
      assertNull(modelBean0.getReadMethod());
      assertNull(modelBean0.getMessageProperty());
      assertNull(modelBean0.getUpdateMethod());
      assertFalse(modelBean0.isDisablePagingParameters());
      assertNull(modelBean0.getCreateMethod());
      assertNull(modelBean0.getIdProperty());
      assertEquals("json", modelBean0.getWriter());
      assertNull(modelBean0.getIdentifier());
      assertEquals("java.lang.String", modelBean0.getName());
      assertNull(modelBean0.getTotalProperty());
      assertNull(modelBean0.getDestroyMethod());
      assertNull(modelBean0.getRootProperty());
      assertFalse(modelBean0.isClientIdPropertyAddToWriter());
      assertEquals("json", modelBean0.getReader());
      assertNull(modelBean0.getSuccessProperty());
      assertNull(modelBean0.getVersionProperty());
      assertNull(modelBean0.getWriteAllFields());
      assertTrue(modelBean0.isAutodetectTypes());
      assertFalse(modelBean0.isPaging());
      assertEquals("Ext.data.Model", modelBean0.getExtend());
      assertNull(modelBean0.getClientIdProperty());
      assertNotNull(modelBean0);
      
      OutputConfig outputConfig1 = new OutputConfig();
      assertNull(outputConfig1.getIncludeValidation());
      assertNull(outputConfig1.getOutputFormat());
      assertFalse(outputConfig1.isSurroundApiWithQuotes());
      assertFalse(outputConfig1.isDebug());
      assertNull(outputConfig1.getLineEnding());
      assertFalse(outputConfig1.isUseSingleQuotes());
      assertFalse(outputConfig1.equals((Object)outputConfig0));
      assertNotNull(outputConfig1);
      
      String string0 = ModelGenerator.generateJavascript(modelBean0, outputConfig1);
      assertNull(outputConfig0.getOutputFormat());
      assertFalse(outputConfig0.isUseSingleQuotes());
      assertNull(outputConfig0.getLineEnding());
      assertFalse(outputConfig0.isDebug());
      assertEquals(IncludeValidation.BUILTIN, outputConfig0.getIncludeValidation());
      assertFalse(outputConfig0.isSurroundApiWithQuotes());
      assertNull(modelBean0.getReadMethod());
      assertNull(modelBean0.getMessageProperty());
      assertNull(modelBean0.getUpdateMethod());
      assertFalse(modelBean0.isDisablePagingParameters());
      assertNull(modelBean0.getCreateMethod());
      assertNull(modelBean0.getIdProperty());
      assertEquals("json", modelBean0.getWriter());
      assertNull(modelBean0.getIdentifier());
      assertEquals("java.lang.String", modelBean0.getName());
      assertNull(modelBean0.getTotalProperty());
      assertNull(modelBean0.getDestroyMethod());
      assertNull(modelBean0.getRootProperty());
      assertFalse(modelBean0.isClientIdPropertyAddToWriter());
      assertEquals("json", modelBean0.getReader());
      assertNull(modelBean0.getSuccessProperty());
      assertNull(modelBean0.getVersionProperty());
      assertNull(modelBean0.getWriteAllFields());
      assertTrue(modelBean0.isAutodetectTypes());
      assertFalse(modelBean0.isPaging());
      assertEquals("Ext.data.Model", modelBean0.getExtend());
      assertNull(modelBean0.getClientIdProperty());
      assertNull(outputConfig1.getIncludeValidation());
      assertNull(outputConfig1.getOutputFormat());
      assertFalse(outputConfig1.isSurroundApiWithQuotes());
      assertFalse(outputConfig1.isDebug());
      assertNull(outputConfig1.getLineEnding());
      assertFalse(outputConfig1.isUseSingleQuotes());
      assertNotSame(outputConfig0, outputConfig1);
      assertNotSame(outputConfig1, outputConfig0);
      assertFalse(outputConfig0.equals((Object)outputConfig1));
      assertFalse(outputConfig1.equals((Object)outputConfig0));
      assertNotNull(string0);
      
      ModelBean modelBean1 = ModelGenerator.createModel(class0, includeValidation0);
      assertEquals("Ext.data.Model", modelBean1.getExtend());
      assertNull(modelBean1.getMessageProperty());
      assertTrue(modelBean1.isAutodetectTypes());
      assertFalse(modelBean1.isDisablePagingParameters());
      assertEquals("java.lang.Object", modelBean1.getName());
      assertNull(modelBean1.getUpdateMethod());
      assertNull(modelBean1.getVersionProperty());
      assertFalse(modelBean1.isPaging());
      assertEquals("json", modelBean1.getReader());
      assertNull(modelBean1.getSuccessProperty());
      assertNull(modelBean1.getWriteAllFields());
      assertNull(modelBean1.getClientIdProperty());
      assertFalse(modelBean1.isClientIdPropertyAddToWriter());
      assertNull(modelBean1.getCreateMethod());
      assertNull(modelBean1.getDestroyMethod());
      assertEquals("d1WtV(zz", modelBean1.getReadMethod());
      assertEquals("json", modelBean1.getWriter());
      assertNull(modelBean1.getTotalProperty());
      assertNull(modelBean1.getIdProperty());
      assertNull(modelBean1.getRootProperty());
      assertEquals("`}zU`yZ19?l.J%Se", modelBean1.getIdentifier());
      assertNotSame(modelBean1, modelBean0);
      assertFalse(modelBean1.equals((Object)modelBean0));
      assertNotNull(modelBean1);
      
      HttpServletRequest httpServletRequest0 = mock(HttpServletRequest.class, new ViolatedAssumptionAnswer());
      HttpServletRequestWrapper httpServletRequestWrapper0 = new HttpServletRequestWrapper(httpServletRequest0);
      assertNotNull(httpServletRequestWrapper0);
  }

  @Test(timeout = 4000000)
  public void test053()  throws Throwable  {
      Class<Object> class0 = Object.class;
      IncludeValidation includeValidation0 = IncludeValidation.NONE;
      ModelBean modelBean0 = ModelGenerator.createModel(class0, includeValidation0);
      assertNull(modelBean0.getSuccessProperty());
      assertFalse(modelBean0.isDisablePagingParameters());
      assertNull(modelBean0.getVersionProperty());
      assertNull(modelBean0.getRootProperty());
      assertFalse(modelBean0.isPaging());
      assertNull(modelBean0.getMessageProperty());
      assertNull(modelBean0.getClientIdProperty());
      assertEquals("defaultValue", modelBean0.getIdentifier());
      assertNull(modelBean0.getWriteAllFields());
      assertNull(modelBean0.getCreateMethod());
      assertNull(modelBean0.getUpdateMethod());
      assertEquals("java.lang.Object", modelBean0.getName());
      assertEquals("json", modelBean0.getReader());
      assertTrue(modelBean0.isAutodetectTypes());
      assertFalse(modelBean0.isClientIdPropertyAddToWriter());
      assertNull(modelBean0.getReadMethod());
      assertEquals("json", modelBean0.getWriter());
      assertNull(modelBean0.getTotalProperty());
      assertEquals("G02z4]Nf6A#kC(", modelBean0.getExtend());
      assertNull(modelBean0.getIdProperty());
      assertNull(modelBean0.getDestroyMethod());
      assertNotNull(modelBean0);
      
      OutputConfig outputConfig0 = new OutputConfig();
      assertFalse(outputConfig0.isDebug());
      assertFalse(outputConfig0.isSurroundApiWithQuotes());
      assertNull(outputConfig0.getOutputFormat());
      assertNull(outputConfig0.getLineEnding());
      assertNull(outputConfig0.getIncludeValidation());
      assertNotNull(outputConfig0);
      
      boolean boolean0 = true;
      outputConfig0.setUseSingleQuotes(true);
      assertFalse(outputConfig0.isDebug());
      assertFalse(outputConfig0.isSurroundApiWithQuotes());
      assertNull(outputConfig0.getOutputFormat());
      assertNull(outputConfig0.getLineEnding());
      assertNull(outputConfig0.getIncludeValidation());
      
      boolean boolean1 = false;
      outputConfig0.setDebug(false);
      assertFalse(outputConfig0.isDebug());
      assertFalse(outputConfig0.isSurroundApiWithQuotes());
      assertNull(outputConfig0.getOutputFormat());
      assertNull(outputConfig0.getLineEnding());
      assertNull(outputConfig0.getIncludeValidation());
      
      modelBean0.setExtend("G02z4]Nf6A#kC(");
      assertNull(modelBean0.getSuccessProperty());
      assertFalse(modelBean0.isDisablePagingParameters());
      assertNull(modelBean0.getVersionProperty());
      assertNull(modelBean0.getRootProperty());
      assertFalse(modelBean0.isPaging());
      assertNull(modelBean0.getMessageProperty());
      assertNull(modelBean0.getClientIdProperty());
      assertEquals("defaultValue", modelBean0.getIdentifier());
      assertNull(modelBean0.getWriteAllFields());
      assertNull(modelBean0.getCreateMethod());
      assertNull(modelBean0.getUpdateMethod());
      assertEquals("java.lang.Object", modelBean0.getName());
      assertEquals("json", modelBean0.getReader());
      assertTrue(modelBean0.isAutodetectTypes());
      assertFalse(modelBean0.isClientIdPropertyAddToWriter());
      assertNull(modelBean0.getReadMethod());
      assertEquals("json", modelBean0.getWriter());
      assertNull(modelBean0.getTotalProperty());
      assertEquals("G02z4]Nf6A#kC(", modelBean0.getExtend());
      assertNull(modelBean0.getIdProperty());
      assertNull(modelBean0.getDestroyMethod());
      
      OutputFormat outputFormat0 = OutputFormat.EXTJS5;
      outputConfig0.setOutputFormat(outputFormat0);
      assertEquals(OutputFormat.EXTJS5, outputConfig0.getOutputFormat());
      assertFalse(outputConfig0.isDebug());
      assertFalse(outputConfig0.isSurroundApiWithQuotes());
      assertNull(outputConfig0.getLineEnding());
      assertNull(outputConfig0.getIncludeValidation());
      
      String string0 = ModelGenerator.generateJavascript(modelBean0, outputConfig0);
      assertNull(modelBean0.getSuccessProperty());
      assertFalse(modelBean0.isDisablePagingParameters());
      assertNull(modelBean0.getVersionProperty());
      assertNull(modelBean0.getRootProperty());
      assertFalse(modelBean0.isPaging());
      assertNull(modelBean0.getMessageProperty());
      assertNull(modelBean0.getClientIdProperty());
      assertEquals("defaultValue", modelBean0.getIdentifier());
      assertNull(modelBean0.getWriteAllFields());
      assertNull(modelBean0.getCreateMethod());
      assertNull(modelBean0.getUpdateMethod());
      assertEquals("java.lang.Object", modelBean0.getName());
      assertEquals("json", modelBean0.getReader());
      assertTrue(modelBean0.isAutodetectTypes());
      assertFalse(modelBean0.isClientIdPropertyAddToWriter());
      assertNull(modelBean0.getReadMethod());
      assertEquals("json", modelBean0.getWriter());
      assertNull(modelBean0.getTotalProperty());
      assertEquals("G02z4]Nf6A#kC(", modelBean0.getExtend());
      assertNull(modelBean0.getIdProperty());
      assertNull(modelBean0.getDestroyMethod());
      assertEquals(OutputFormat.EXTJS5, outputConfig0.getOutputFormat());
      assertFalse(outputConfig0.isDebug());
      assertFalse(outputConfig0.isSurroundApiWithQuotes());
      assertNull(outputConfig0.getLineEnding());
      assertNull(outputConfig0.getIncludeValidation());
      assertNotNull(string0);
      assertEquals("Ext.define('java.lang.Object',{extend:'G02z4]Nf6A#kC(',identifier:'defaultValue',fields:[],hasMany:[]});", string0);
      
      String string1 = ModelGenerator.trimToNull("Ext.define('java.lang.Object',{extend:'G02z4]Nf6A#kC(',identifier:'defaultValue',fields:[],hasMany:[]});");
      assertNotNull(string1);
      assertEquals("Ext.define('java.lang.Object',{extend:'G02z4]Nf6A#kC(',identifier:'defaultValue',fields:[],hasMany:[]});", string1);
      
      String string2 = ModelGenerator.generateJavascript(modelBean0, outputConfig0);
      assertNull(modelBean0.getSuccessProperty());
      assertFalse(modelBean0.isDisablePagingParameters());
      assertNull(modelBean0.getVersionProperty());
      assertNull(modelBean0.getRootProperty());
      assertFalse(modelBean0.isPaging());
      assertNull(modelBean0.getMessageProperty());
      assertNull(modelBean0.getClientIdProperty());
      assertEquals("defaultValue", modelBean0.getIdentifier());
      assertNull(modelBean0.getWriteAllFields());
      assertNull(modelBean0.getCreateMethod());
      assertNull(modelBean0.getUpdateMethod());
      assertEquals("java.lang.Object", modelBean0.getName());
      assertEquals("json", modelBean0.getReader());
      assertTrue(modelBean0.isAutodetectTypes());
      assertFalse(modelBean0.isClientIdPropertyAddToWriter());
      assertNull(modelBean0.getReadMethod());
      assertEquals("json", modelBean0.getWriter());
      assertNull(modelBean0.getTotalProperty());
      assertEquals("G02z4]Nf6A#kC(", modelBean0.getExtend());
      assertNull(modelBean0.getIdProperty());
      assertNull(modelBean0.getDestroyMethod());
      assertEquals(OutputFormat.EXTJS5, outputConfig0.getOutputFormat());
      assertFalse(outputConfig0.isDebug());
      assertFalse(outputConfig0.isSurroundApiWithQuotes());
      assertNull(outputConfig0.getLineEnding());
      assertNull(outputConfig0.getIncludeValidation());
      assertNotNull(string2);
      assertEquals("Ext.define('java.lang.Object',{extend:'G02z4]Nf6A#kC(',identifier:'defaultValue',fields:[],hasMany:[]});", string2);
      
      Class<Object> class1 = Object.class;
      ModelBean modelBean1 = ModelGenerator.createModel(class1, includeValidation0);
      assertNull(modelBean1.getTotalProperty());
      assertNull(modelBean1.getVersionProperty());
      assertNull(modelBean1.getCreateMethod());
      assertNull(modelBean1.getWriteAllFields());
      assertNull(modelBean1.getMessageProperty());
      assertEquals("json", modelBean1.getReader());
      assertNull(modelBean1.getUpdateMethod());
      assertNull(modelBean1.getClientIdProperty());
      assertNull(modelBean1.getReadMethod());
      assertTrue(modelBean1.isAutodetectTypes());
      assertFalse(modelBean1.isPaging());
      assertEquals("java.lang.Object", modelBean1.getName());
      assertEquals("defaultValue", modelBean1.getIdentifier());
      assertNull(modelBean1.getSuccessProperty());
      assertFalse(modelBean1.isDisablePagingParameters());
      assertNull(modelBean1.getRootProperty());
      assertEquals("G02z4]Nf6A#kC(", modelBean1.getExtend());
      assertNull(modelBean1.getIdProperty());
      assertNull(modelBean1.getDestroyMethod());
      assertEquals("json", modelBean1.getWriter());
      assertFalse(modelBean1.isClientIdPropertyAddToWriter());
      assertSame(class1, class0);
      assertSame(modelBean1, modelBean0);
      assertNotNull(modelBean1);
      
      HttpServletRequest httpServletRequest0 = mock(HttpServletRequest.class, new ViolatedAssumptionAnswer());
      doReturn("Ext.define('java.lang.Object',{extend:'G02z4]Nf6A#kC(',identifier:'defaultValue',fields:[],hasMany:[]});").when(httpServletRequest0).getHeader(anyString());
      HttpServletRequestWrapper httpServletRequestWrapper0 = new HttpServletRequestWrapper(httpServletRequest0);
      assertNotNull(httpServletRequestWrapper0);
      
      HttpServletResponse httpServletResponse0 = mock(HttpServletResponse.class, new ViolatedAssumptionAnswer());
      doReturn((ServletOutputStream) null).when(httpServletResponse0).getOutputStream();
      HttpServletResponseWrapper httpServletResponseWrapper0 = new HttpServletResponseWrapper(httpServletResponse0);
      assertNotNull(httpServletResponseWrapper0);
      
      String[] stringArray0 = new String[0];
      OutputFormat outputFormat1 = OutputFormat.TOUCH2;
      // Undeclared exception!
      try { 
        ModelGenerator.writeModel((HttpServletRequest) httpServletRequestWrapper0, (HttpServletResponse) httpServletResponseWrapper0, (Class<?>) class0, outputFormat1, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("ch.rasc.extclassgenerator.ModelGenerator", e);
      }
  }

  @Test(timeout = 4000000)
  public void test054()  throws Throwable  {
      Class<ModelFieldBean> class0 = ModelFieldBean.class;
      ModelBean modelBean0 = ModelGenerator.createModel(class0);
      assertTrue(modelBean0.isAutodetectTypes());
      assertNull(modelBean0.getIdProperty());
      assertNull(modelBean0.getWriteAllFields());
      assertNull(modelBean0.getReadMethod());
      assertNull(modelBean0.getCreateMethod());
      assertEquals("ch.rasc.extclassgenerator.ModelFieldBean", modelBean0.getName());
      assertEquals("json", modelBean0.getReader());
      assertNull(modelBean0.getUpdateMethod());
      assertFalse(modelBean0.isClientIdPropertyAddToWriter());
      assertNull(modelBean0.getClientIdProperty());
      assertNull(modelBean0.getSuccessProperty());
      assertFalse(modelBean0.isPaging());
      assertEquals("Ext.data.Model", modelBean0.getExtend());
      assertEquals("json", modelBean0.getWriter());
      assertNull(modelBean0.getIdentifier());
      assertFalse(modelBean0.isDisablePagingParameters());
      assertNull(modelBean0.getVersionProperty());
      assertNull(modelBean0.getMessageProperty());
      assertNull(modelBean0.getDestroyMethod());
      assertNull(modelBean0.getRootProperty());
      assertNull(modelBean0.getTotalProperty());
      assertNotNull(modelBean0);
      
      OutputFormat outputFormat0 = OutputFormat.EXTJS4;
      String string0 = ModelGenerator.generateJavascript(modelBean0, outputFormat0, false);
      assertTrue(modelBean0.isAutodetectTypes());
      assertNull(modelBean0.getIdProperty());
      assertNull(modelBean0.getWriteAllFields());
      assertNull(modelBean0.getReadMethod());
      assertNull(modelBean0.getCreateMethod());
      assertEquals("ch.rasc.extclassgenerator.ModelFieldBean", modelBean0.getName());
      assertEquals("json", modelBean0.getReader());
      assertNull(modelBean0.getUpdateMethod());
      assertFalse(modelBean0.isClientIdPropertyAddToWriter());
      assertNull(modelBean0.getClientIdProperty());
      assertNull(modelBean0.getSuccessProperty());
      assertFalse(modelBean0.isPaging());
      assertEquals("Ext.data.Model", modelBean0.getExtend());
      assertEquals("json", modelBean0.getWriter());
      assertNull(modelBean0.getIdentifier());
      assertFalse(modelBean0.isDisablePagingParameters());
      assertNull(modelBean0.getVersionProperty());
      assertNull(modelBean0.getMessageProperty());
      assertNull(modelBean0.getDestroyMethod());
      assertNull(modelBean0.getRootProperty());
      assertNull(modelBean0.getTotalProperty());
      assertNotNull(string0);
  }

  @Test(timeout = 4000000)
  public void test055()  throws Throwable  {
      Class<ModelFieldBean> class0 = ModelFieldBean.class;
      ModelBean modelBean0 = ModelGenerator.createModel(class0);
      assertNull(modelBean0.getWriteAllFields());
      assertNull(modelBean0.getUpdateMethod());
      assertNull(modelBean0.getReadMethod());
      assertEquals("json", modelBean0.getReader());
      assertEquals("ch.rasc.extclassgenerator.ModelFieldBean", modelBean0.getName());
      assertTrue(modelBean0.isAutodetectTypes());
      assertEquals("Ext.data.Model", modelBean0.getExtend());
      assertNull(modelBean0.getClientIdProperty());
      assertNull(modelBean0.getDestroyMethod());
      assertEquals("map2ing", modelBean0.getIdProperty());
      assertFalse(modelBean0.isPaging());
      assertFalse(modelBean0.isDisablePagingParameters());
      assertFalse(modelBean0.isClientIdPropertyAddToWriter());
      assertEquals("json", modelBean0.getWriter());
      assertNull(modelBean0.getSuccessProperty());
      assertNull(modelBean0.getIdentifier());
      assertNull(modelBean0.getRootProperty());
      assertNull(modelBean0.getTotalProperty());
      assertNull(modelBean0.getVersionProperty());
      assertNull(modelBean0.getCreateMethod());
      assertNull(modelBean0.getMessageProperty());
      assertNotNull(modelBean0);
      
      HttpServletRequestWrapper httpServletRequestWrapper0 = null;
      try {
        httpServletRequestWrapper0 = new HttpServletRequestWrapper((HttpServletRequest) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Request cannot be null
         //
         verifyException("javax.servlet.ServletRequestWrapper", e);
      }
  }

  @Test(timeout = 4000000)
  public void test056()  throws Throwable  {
      ModelBean modelBean0 = new ModelBean();
      assertNull(modelBean0.getName());
      assertFalse(modelBean0.isClientIdPropertyAddToWriter());
      assertNull(modelBean0.getIdProperty());
      assertNull(modelBean0.getCreateMethod());
      assertEquals("json", modelBean0.getWriter());
      assertNull(modelBean0.getIdentifier());
      assertNull(modelBean0.getTotalProperty());
      assertNull(modelBean0.getDestroyMethod());
      assertNull(modelBean0.getRootProperty());
      assertNull(modelBean0.getReadMethod());
      assertFalse(modelBean0.isDisablePagingParameters());
      assertNull(modelBean0.getMessageProperty());
      assertEquals("json", modelBean0.getReader());
      assertNull(modelBean0.getUpdateMethod());
      assertNull(modelBean0.getSuccessProperty());
      assertNull(modelBean0.getVersionProperty());
      assertTrue(modelBean0.isAutodetectTypes());
      assertFalse(modelBean0.isPaging());
      assertNull(modelBean0.getWriteAllFields());
      assertEquals("Ext.data.Model", modelBean0.getExtend());
      assertNull(modelBean0.getClientIdProperty());
      assertNotNull(modelBean0);
      
      OutputConfig outputConfig0 = new OutputConfig();
      assertNull(outputConfig0.getOutputFormat());
      assertNull(outputConfig0.getIncludeValidation());
      assertFalse(outputConfig0.isSurroundApiWithQuotes());
      assertFalse(outputConfig0.isDebug());
      assertFalse(outputConfig0.isUseSingleQuotes());
      assertNull(outputConfig0.getLineEnding());
      assertNotNull(outputConfig0);
      
      String string0 = ModelGenerator.generateJavascript(modelBean0, outputConfig0);
      assertNull(modelBean0.getName());
      assertFalse(modelBean0.isClientIdPropertyAddToWriter());
      assertNull(modelBean0.getIdProperty());
      assertNull(modelBean0.getCreateMethod());
      assertEquals("json", modelBean0.getWriter());
      assertNull(modelBean0.getIdentifier());
      assertNull(modelBean0.getTotalProperty());
      assertNull(modelBean0.getDestroyMethod());
      assertNull(modelBean0.getRootProperty());
      assertNull(modelBean0.getReadMethod());
      assertFalse(modelBean0.isDisablePagingParameters());
      assertNull(modelBean0.getMessageProperty());
      assertEquals("json", modelBean0.getReader());
      assertNull(modelBean0.getUpdateMethod());
      assertNull(modelBean0.getSuccessProperty());
      assertNull(modelBean0.getVersionProperty());
      assertTrue(modelBean0.isAutodetectTypes());
      assertFalse(modelBean0.isPaging());
      assertNull(modelBean0.getWriteAllFields());
      assertEquals("Ext.data.Model", modelBean0.getExtend());
      assertNull(modelBean0.getClientIdProperty());
      assertNull(outputConfig0.getOutputFormat());
      assertNull(outputConfig0.getIncludeValidation());
      assertFalse(outputConfig0.isSurroundApiWithQuotes());
      assertFalse(outputConfig0.isDebug());
      assertFalse(outputConfig0.isUseSingleQuotes());
      assertNull(outputConfig0.getLineEnding());
      assertNotNull(string0);
      assertEquals("Ext.define(\"null\",{extend:\"Ext.data.Model\",config:{fields:[]}});", string0);
  }

  @Test(timeout = 4000000)
  public void test057()  throws Throwable  {
      Class<ModuleUsesDirective> class0 = ModuleUsesDirective.class;
      // Undeclared exception!
      try { 
        ModelGenerator.createModel(class0, (OutputConfig) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("ch.rasc.extclassgenerator.ModelGenerator", e);
      }
  }

  @Test(timeout = 4000000)
  public void test058()  throws Throwable  {
      Class<Object> class0 = Object.class;
      OutputFormat outputFormat0 = OutputFormat.TOUCH2;
      IncludeValidation includeValidation0 = IncludeValidation.NONE;
      String string0 = ModelGenerator.generateJavascript(class0, outputFormat0, includeValidation0, false);
      assertNotNull(string0);
      assertEquals("Ext.define(\"java.lang.Object\",{extend:\"Ext.data.Model\",config:{fields:[]}});", string0);
  }

  @Test(timeout = 4000000)
  public void test059()  throws Throwable  {
      Class<HttpUpgradeHandler> class0 = HttpUpgradeHandler.class;
      OutputFormat outputFormat0 = OutputFormat.TOUCH2;
      String string0 = ModelGenerator.generateJavascript(class0, outputFormat0, true);
      assertNotNull(string0);
      assertEquals("Ext.define(\"javax.servlet.http.HttpUpgradeHandler\",\r\n{\n  extend : \"Ext.data.Model\",\n  config : {\n    fields : [ ]\n  }\n});", string0);
  }

  @Test(timeout = 4000000)
  public void test060()  throws Throwable  {
      HttpServletResponse httpServletResponse0 = mock(HttpServletResponse.class, new ViolatedAssumptionAnswer());
      doReturn("\r\n").when(httpServletResponse0).getContentType();
      HttpServletResponseWrapper httpServletResponseWrapper0 = new HttpServletResponseWrapper(httpServletResponse0);
      assertNotNull(httpServletResponseWrapper0);
      
      String string0 = httpServletResponseWrapper0.getContentType();
      assertNotNull(string0);
      assertEquals("\r\n", string0);
      
      httpServletResponseWrapper0.setIntHeader("\r\n", 0);
      httpServletResponseWrapper0.setContentLengthLong(0);
      httpServletResponseWrapper0.setBufferSize(0);
      String string1 = ModelGenerator.trimToNull("\r\n");
      assertNull(string1);
      
      Class<ConstructorDeclaration> class0 = ConstructorDeclaration.class;
      OutputConfig outputConfig0 = null;
      // Undeclared exception!
      try { 
        ModelGenerator.createModel(class0, (OutputConfig) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("ch.rasc.extclassgenerator.ModelGenerator", e);
      }
  }

  @Test(timeout = 4000000)
  public void test061()  throws Throwable  {
      Class<Object> class0 = Object.class;
      IncludeValidation includeValidation0 = IncludeValidation.BUILTIN;
      ModelBean modelBean0 = ModelGenerator.createModel(class0, includeValidation0);
      assertNull(modelBean0.getTotalProperty());
      assertNull(modelBean0.getSuccessProperty());
      assertNull(modelBean0.getVersionProperty());
      assertNull(modelBean0.getCreateMethod());
      assertNull(modelBean0.getMessageProperty());
      assertNull(modelBean0.getUpdateMethod());
      assertNull(modelBean0.getWriteAllFields());
      assertEquals("json", modelBean0.getReader());
      assertEquals("Ext.data.Model", modelBean0.getExtend());
      assertNull(modelBean0.getClientIdProperty());
      assertNull(modelBean0.getReadMethod());
      assertEquals("java.lang.Object", modelBean0.getName());
      assertTrue(modelBean0.isAutodetectTypes());
      assertFalse(modelBean0.isPaging());
      assertFalse(modelBean0.isDisablePagingParameters());
      assertNull(modelBean0.getRootProperty());
      assertNull(modelBean0.getIdentifier());
      assertNull(modelBean0.getDestroyMethod());
      assertNull(modelBean0.getIdProperty());
      assertFalse(modelBean0.isClientIdPropertyAddToWriter());
      assertEquals("json", modelBean0.getWriter());
      assertNotNull(modelBean0);
      
      modelBean0.setReadMethod("d1WtV(zz");
      assertNull(modelBean0.getTotalProperty());
      assertNull(modelBean0.getSuccessProperty());
      assertNull(modelBean0.getVersionProperty());
      assertNull(modelBean0.getCreateMethod());
      assertNull(modelBean0.getMessageProperty());
      assertNull(modelBean0.getUpdateMethod());
      assertNull(modelBean0.getWriteAllFields());
      assertEquals("json", modelBean0.getReader());
      assertEquals("Ext.data.Model", modelBean0.getExtend());
      assertNull(modelBean0.getClientIdProperty());
      assertEquals("java.lang.Object", modelBean0.getName());
      assertTrue(modelBean0.isAutodetectTypes());
      assertFalse(modelBean0.isPaging());
      assertFalse(modelBean0.isDisablePagingParameters());
      assertNull(modelBean0.getRootProperty());
      assertNull(modelBean0.getIdentifier());
      assertNull(modelBean0.getDestroyMethod());
      assertNull(modelBean0.getIdProperty());
      assertFalse(modelBean0.isClientIdPropertyAddToWriter());
      assertEquals("d1WtV(zz", modelBean0.getReadMethod());
      assertEquals("json", modelBean0.getWriter());
      
      OutputConfig outputConfig0 = new OutputConfig();
      assertFalse(outputConfig0.isDebug());
      assertNull(outputConfig0.getIncludeValidation());
      assertNull(outputConfig0.getLineEnding());
      assertNull(outputConfig0.getOutputFormat());
      assertFalse(outputConfig0.isSurroundApiWithQuotes());
      assertFalse(outputConfig0.isUseSingleQuotes());
      assertNotNull(outputConfig0);
      
      String string0 = ModelGenerator.generateJavascript(modelBean0, outputConfig0);
      assertNull(modelBean0.getTotalProperty());
      assertNull(modelBean0.getSuccessProperty());
      assertNull(modelBean0.getVersionProperty());
      assertNull(modelBean0.getCreateMethod());
      assertNull(modelBean0.getMessageProperty());
      assertNull(modelBean0.getUpdateMethod());
      assertNull(modelBean0.getWriteAllFields());
      assertEquals("json", modelBean0.getReader());
      assertEquals("Ext.data.Model", modelBean0.getExtend());
      assertNull(modelBean0.getClientIdProperty());
      assertEquals("java.lang.Object", modelBean0.getName());
      assertTrue(modelBean0.isAutodetectTypes());
      assertFalse(modelBean0.isPaging());
      assertFalse(modelBean0.isDisablePagingParameters());
      assertNull(modelBean0.getRootProperty());
      assertNull(modelBean0.getIdentifier());
      assertNull(modelBean0.getDestroyMethod());
      assertNull(modelBean0.getIdProperty());
      assertFalse(modelBean0.isClientIdPropertyAddToWriter());
      assertEquals("d1WtV(zz", modelBean0.getReadMethod());
      assertEquals("json", modelBean0.getWriter());
      assertFalse(outputConfig0.isDebug());
      assertNull(outputConfig0.getIncludeValidation());
      assertNull(outputConfig0.getLineEnding());
      assertNull(outputConfig0.getOutputFormat());
      assertFalse(outputConfig0.isSurroundApiWithQuotes());
      assertFalse(outputConfig0.isUseSingleQuotes());
      assertNotNull(string0);
      
      String string1 = ModelGenerator.generateJavascript(modelBean0, outputConfig0);
      assertNull(modelBean0.getTotalProperty());
      assertNull(modelBean0.getSuccessProperty());
      assertNull(modelBean0.getVersionProperty());
      assertNull(modelBean0.getCreateMethod());
      assertNull(modelBean0.getMessageProperty());
      assertNull(modelBean0.getUpdateMethod());
      assertNull(modelBean0.getWriteAllFields());
      assertEquals("json", modelBean0.getReader());
      assertEquals("Ext.data.Model", modelBean0.getExtend());
      assertNull(modelBean0.getClientIdProperty());
      assertEquals("java.lang.Object", modelBean0.getName());
      assertTrue(modelBean0.isAutodetectTypes());
      assertFalse(modelBean0.isPaging());
      assertFalse(modelBean0.isDisablePagingParameters());
      assertNull(modelBean0.getRootProperty());
      assertNull(modelBean0.getIdentifier());
      assertNull(modelBean0.getDestroyMethod());
      assertNull(modelBean0.getIdProperty());
      assertFalse(modelBean0.isClientIdPropertyAddToWriter());
      assertEquals("d1WtV(zz", modelBean0.getReadMethod());
      assertEquals("json", modelBean0.getWriter());
      assertFalse(outputConfig0.isDebug());
      assertNull(outputConfig0.getIncludeValidation());
      assertNull(outputConfig0.getLineEnding());
      assertNull(outputConfig0.getOutputFormat());
      assertFalse(outputConfig0.isSurroundApiWithQuotes());
      assertFalse(outputConfig0.isUseSingleQuotes());
      assertNotNull(string1);
      
      HttpServletRequest httpServletRequest0 = mock(HttpServletRequest.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(httpServletRequest0).getHeader(anyString());
      HttpServletRequestWrapper httpServletRequestWrapper0 = new HttpServletRequestWrapper(httpServletRequest0);
      assertNotNull(httpServletRequestWrapper0);
      
      HttpServletRequestWrapper httpServletRequestWrapper1 = new HttpServletRequestWrapper(httpServletRequestWrapper0);
      assertFalse(httpServletRequestWrapper1.equals((Object)httpServletRequestWrapper0));
      assertNotNull(httpServletRequestWrapper1);
      
      HttpServletResponse httpServletResponse0 = mock(HttpServletResponse.class, new ViolatedAssumptionAnswer());
      doReturn((ServletOutputStream) null).when(httpServletResponse0).getOutputStream();
      HttpServletResponseWrapper httpServletResponseWrapper0 = new HttpServletResponseWrapper(httpServletResponse0);
      assertNotNull(httpServletResponseWrapper0);
      
      HttpServletResponseWrapper httpServletResponseWrapper1 = new HttpServletResponseWrapper(httpServletResponseWrapper0);
      assertFalse(httpServletResponseWrapper1.equals((Object)httpServletResponseWrapper0));
      assertNotNull(httpServletResponseWrapper1);
      
      HttpServletResponseWrapper httpServletResponseWrapper2 = new HttpServletResponseWrapper(httpServletResponseWrapper0);
      assertFalse(httpServletResponseWrapper0.equals((Object)httpServletResponseWrapper1));
      assertFalse(httpServletResponseWrapper2.equals((Object)httpServletResponseWrapper1));
      assertFalse(httpServletResponseWrapper2.equals((Object)httpServletResponseWrapper0));
      assertNotNull(httpServletResponseWrapper2);
      
      Class<Annotation> class1 = Annotation.class;
      IncludeValidation includeValidation1 = IncludeValidation.NONE;
      ModelBean modelBean1 = ModelGenerator.createModel(class1, includeValidation1);
      assertNull(modelBean1.getCreateMethod());
      assertNull(modelBean1.getIdProperty());
      assertNull(modelBean1.getReadMethod());
      assertTrue(modelBean1.isAutodetectTypes());
      assertNull(modelBean1.getTotalProperty());
      assertEquals("Ext.data.Model", modelBean1.getExtend());
      assertEquals("java.lang.annotation.Annotation", modelBean1.getName());
      assertEquals("json", modelBean1.getWriter());
      assertNull(modelBean1.getDestroyMethod());
      assertFalse(modelBean1.isClientIdPropertyAddToWriter());
      assertNull(modelBean1.getIdentifier());
      assertFalse(modelBean1.isDisablePagingParameters());
      assertNull(modelBean1.getRootProperty());
      assertFalse(modelBean1.isPaging());
      assertNull(modelBean1.getSuccessProperty());
      assertNull(modelBean1.getClientIdProperty());
      assertNull(modelBean1.getWriteAllFields());
      assertNull(modelBean1.getMessageProperty());
      assertNull(modelBean1.getUpdateMethod());
      assertNull(modelBean1.getVersionProperty());
      assertEquals("json", modelBean1.getReader());
      assertNotSame(modelBean1, modelBean0);
      assertNotSame(includeValidation1, includeValidation0);
      assertFalse(modelBean1.equals((Object)modelBean0));
      assertFalse(includeValidation1.equals((Object)includeValidation0));
      assertNotNull(modelBean1);
      
      OutputConfig outputConfig1 = new OutputConfig();
      assertFalse(outputConfig1.isDebug());
      assertNull(outputConfig1.getIncludeValidation());
      assertNull(outputConfig1.getLineEnding());
      assertFalse(outputConfig1.isUseSingleQuotes());
      assertFalse(outputConfig1.isSurroundApiWithQuotes());
      assertNull(outputConfig1.getOutputFormat());
      assertTrue(outputConfig1.equals((Object)outputConfig0));
      assertNotNull(outputConfig1);
      
      // Undeclared exception!
      try { 
        ModelGenerator.writeModel((HttpServletRequest) httpServletRequestWrapper0, (HttpServletResponse) httpServletResponseWrapper2, modelBean1, outputConfig1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("ch.rasc.extclassgenerator.ModelGenerator", e);
      }
  }

  @Test(timeout = 4000000)
  public void test062()  throws Throwable  {
      HttpServletRequest httpServletRequest0 = mock(HttpServletRequest.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(httpServletRequest0).getHeader(anyString());
      HttpServletRequestWrapper httpServletRequestWrapper0 = new HttpServletRequestWrapper(httpServletRequest0);
      assertNotNull(httpServletRequestWrapper0);
      
      HttpServletResponse httpServletResponse0 = mock(HttpServletResponse.class, new ViolatedAssumptionAnswer());
      doReturn((ServletOutputStream) null).when(httpServletResponse0).getOutputStream();
      HttpServletResponseWrapper httpServletResponseWrapper0 = new HttpServletResponseWrapper(httpServletResponse0);
      assertNotNull(httpServletResponseWrapper0);
      
      Class<ConstructorDeclaration> class0 = ConstructorDeclaration.class;
      OutputFormat outputFormat0 = OutputFormat.EXTJS5;
      // Undeclared exception!
      try { 
        ModelGenerator.writeModel((HttpServletRequest) httpServletRequestWrapper0, (HttpServletResponse) httpServletResponseWrapper0, (Class<?>) class0, outputFormat0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("ch.rasc.extclassgenerator.ModelGenerator", e);
      }
  }

  @Test(timeout = 4000000)
  public void test063()  throws Throwable  {
      Class<Object> class0 = Object.class;
      IncludeValidation includeValidation0 = IncludeValidation.NONE;
      ModelBean modelBean0 = ModelGenerator.createModel(class0, includeValidation0);
      assertNull(modelBean0.getClientIdProperty());
      assertNull(modelBean0.getVersionProperty());
      assertNull(modelBean0.getIdProperty());
      assertNull(modelBean0.getWriteAllFields());
      assertEquals("json", modelBean0.getReader());
      assertNull(modelBean0.getRootProperty());
      assertNull(modelBean0.getUpdateMethod());
      assertNull(modelBean0.getMessageProperty());
      assertNull(modelBean0.getCreateMethod());
      assertFalse(modelBean0.isClientIdPropertyAddToWriter());
      assertNull(modelBean0.getTotalProperty());
      assertEquals("json", modelBean0.getWriter());
      assertNull(modelBean0.getDestroyMethod());
      assertFalse(modelBean0.isDisablePagingParameters());
      assertNull(modelBean0.getSuccessProperty());
      assertEquals("java.lang.Object", modelBean0.getName());
      assertEquals("defaultValue", modelBean0.getIdentifier());
      assertFalse(modelBean0.isPaging());
      assertTrue(modelBean0.isAutodetectTypes());
      assertNull(modelBean0.getReadMethod());
      assertNotNull(modelBean0);
      
      OutputConfig outputConfig0 = new OutputConfig();
      assertNull(outputConfig0.getLineEnding());
      assertNull(outputConfig0.getIncludeValidation());
      assertNull(outputConfig0.getOutputFormat());
      assertFalse(outputConfig0.isSurroundApiWithQuotes());
      assertNotNull(outputConfig0);
      
      boolean boolean0 = true;
      outputConfig0.setUseSingleQuotes(true);
      assertNull(outputConfig0.getLineEnding());
      assertNull(outputConfig0.getIncludeValidation());
      assertNull(outputConfig0.getOutputFormat());
      assertFalse(outputConfig0.isSurroundApiWithQuotes());
      
      boolean boolean1 = true;
      outputConfig0.setDebug(true);
      assertNull(outputConfig0.getLineEnding());
      assertNull(outputConfig0.getIncludeValidation());
      assertNull(outputConfig0.getOutputFormat());
      assertFalse(outputConfig0.isSurroundApiWithQuotes());
      
      modelBean0.setExtend("G02z4]Nf6A#kC(");
      assertNull(modelBean0.getClientIdProperty());
      assertNull(modelBean0.getVersionProperty());
      assertNull(modelBean0.getIdProperty());
      assertNull(modelBean0.getWriteAllFields());
      assertEquals("json", modelBean0.getReader());
      assertNull(modelBean0.getRootProperty());
      assertNull(modelBean0.getUpdateMethod());
      assertNull(modelBean0.getMessageProperty());
      assertNull(modelBean0.getCreateMethod());
      assertFalse(modelBean0.isClientIdPropertyAddToWriter());
      assertNull(modelBean0.getTotalProperty());
      assertEquals("json", modelBean0.getWriter());
      assertNull(modelBean0.getDestroyMethod());
      assertFalse(modelBean0.isDisablePagingParameters());
      assertNull(modelBean0.getSuccessProperty());
      assertEquals("java.lang.Object", modelBean0.getName());
      assertEquals("defaultValue", modelBean0.getIdentifier());
      assertFalse(modelBean0.isPaging());
      assertTrue(modelBean0.isAutodetectTypes());
      assertNull(modelBean0.getReadMethod());
      
      OutputFormat outputFormat0 = OutputFormat.EXTJS5;
      outputConfig0.setOutputFormat(outputFormat0);
      assertNull(outputConfig0.getLineEnding());
      assertNull(outputConfig0.getIncludeValidation());
      assertEquals(OutputFormat.EXTJS5, outputConfig0.getOutputFormat());
      assertFalse(outputConfig0.isSurroundApiWithQuotes());
      
      String string0 = ModelGenerator.generateJavascript(modelBean0, outputConfig0);
      assertNull(modelBean0.getClientIdProperty());
      assertNull(modelBean0.getVersionProperty());
      assertNull(modelBean0.getIdProperty());
      assertNull(modelBean0.getWriteAllFields());
      assertEquals("json", modelBean0.getReader());
      assertNull(modelBean0.getRootProperty());
      assertNull(modelBean0.getUpdateMethod());
      assertNull(modelBean0.getMessageProperty());
      assertNull(modelBean0.getCreateMethod());
      assertFalse(modelBean0.isClientIdPropertyAddToWriter());
      assertNull(modelBean0.getTotalProperty());
      assertEquals("json", modelBean0.getWriter());
      assertNull(modelBean0.getDestroyMethod());
      assertFalse(modelBean0.isDisablePagingParameters());
      assertNull(modelBean0.getSuccessProperty());
      assertEquals("java.lang.Object", modelBean0.getName());
      assertEquals("defaultValue", modelBean0.getIdentifier());
      assertFalse(modelBean0.isPaging());
      assertTrue(modelBean0.isAutodetectTypes());
      assertNull(modelBean0.getReadMethod());
      assertNull(outputConfig0.getLineEnding());
      assertNull(outputConfig0.getIncludeValidation());
      assertEquals(OutputFormat.EXTJS5, outputConfig0.getOutputFormat());
      assertFalse(outputConfig0.isSurroundApiWithQuotes());
      assertNotNull(string0);
      assertEquals("Ext.define('java.lang.Object',\r\n{\n  extend : 'G02z4]Nf6A#kC(',\n  identifier : 'defaultValue',\n  fields : [ ]\n});", string0);
      
      String string1 = ModelGenerator.trimToNull("Ext.define('java.lang.Object',\r\n{\n  extend : 'G02z4]Nf6A#kC(',\n  identifier : 'defaultValue',\n  fields : [ ]\n});");
      assertNotNull(string1);
      assertEquals("Ext.define('java.lang.Object',\r\n{\n  extend : 'G02z4]Nf6A#kC(',\n  identifier : 'defaultValue',\n  fields : [ ]\n});", string1);
      
      String string2 = ModelGenerator.generateJavascript(modelBean0, outputConfig0);
      assertNull(modelBean0.getClientIdProperty());
      assertNull(modelBean0.getVersionProperty());
      assertNull(modelBean0.getIdProperty());
      assertNull(modelBean0.getWriteAllFields());
      assertEquals("json", modelBean0.getReader());
      assertNull(modelBean0.getRootProperty());
      assertNull(modelBean0.getUpdateMethod());
      assertNull(modelBean0.getMessageProperty());
      assertNull(modelBean0.getCreateMethod());
      assertFalse(modelBean0.isClientIdPropertyAddToWriter());
      assertNull(modelBean0.getTotalProperty());
      assertEquals("json", modelBean0.getWriter());
      assertNull(modelBean0.getDestroyMethod());
      assertFalse(modelBean0.isDisablePagingParameters());
      assertNull(modelBean0.getSuccessProperty());
      assertEquals("java.lang.Object", modelBean0.getName());
      assertEquals("defaultValue", modelBean0.getIdentifier());
      assertFalse(modelBean0.isPaging());
      assertTrue(modelBean0.isAutodetectTypes());
      assertNull(modelBean0.getReadMethod());
      assertNull(outputConfig0.getLineEnding());
      assertNull(outputConfig0.getIncludeValidation());
      assertEquals(OutputFormat.EXTJS5, outputConfig0.getOutputFormat());
      assertFalse(outputConfig0.isSurroundApiWithQuotes());
      assertTrue(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("Ext.define('java.lang.Object',\r\n{\n  extend : 'G02z4]Nf6A#kC(',\n  identifier : 'defaultValue',\n  fields : [ ]\n});", string2);
      
      Class<Object> class1 = Object.class;
      ModelBean modelBean1 = ModelGenerator.createModel(class1, includeValidation0);
      assertFalse(modelBean1.isClientIdPropertyAddToWriter());
      assertFalse(modelBean1.isPaging());
      assertNull(modelBean1.getMessageProperty());
      assertNull(modelBean1.getVersionProperty());
      assertNull(modelBean1.getSuccessProperty());
      assertEquals("java.lang.Object", modelBean1.getName());
      assertEquals("json", modelBean1.getReader());
      assertNull(modelBean1.getWriteAllFields());
      assertEquals("defaultValue", modelBean1.getIdentifier());
      assertTrue(modelBean1.isAutodetectTypes());
      assertNull(modelBean1.getClientIdProperty());
      assertNull(modelBean1.getUpdateMethod());
      assertNull(modelBean1.getReadMethod());
      assertNull(modelBean1.getCreateMethod());
      assertFalse(modelBean1.isDisablePagingParameters());
      assertNull(modelBean1.getRootProperty());
      assertNull(modelBean1.getTotalProperty());
      assertEquals("G02z4]Nf6A#kC(", modelBean1.getExtend());
      assertEquals("json", modelBean1.getWriter());
      assertNull(modelBean1.getIdProperty());
      assertNull(modelBean1.getDestroyMethod());
      assertSame(class1, class0);
      assertSame(modelBean1, modelBean0);
      assertNotNull(modelBean1);
      
      HttpServletRequest httpServletRequest0 = mock(HttpServletRequest.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(httpServletRequest0).getHeader(anyString());
      HttpServletRequestWrapper httpServletRequestWrapper0 = new HttpServletRequestWrapper(httpServletRequest0);
      assertNotNull(httpServletRequestWrapper0);
      
      HttpServletResponse httpServletResponse0 = mock(HttpServletResponse.class, new ViolatedAssumptionAnswer());
      doReturn((ServletOutputStream) null).when(httpServletResponse0).getOutputStream();
      HttpServletResponseWrapper httpServletResponseWrapper0 = new HttpServletResponseWrapper(httpServletResponse0);
      assertNotNull(httpServletResponseWrapper0);
      
      String[] stringArray0 = new String[0];
      modelBean1.setHasMany(stringArray0);
      assertFalse(modelBean1.isClientIdPropertyAddToWriter());
      assertFalse(modelBean1.isPaging());
      assertNull(modelBean1.getMessageProperty());
      assertNull(modelBean1.getVersionProperty());
      assertNull(modelBean1.getSuccessProperty());
      assertEquals("java.lang.Object", modelBean1.getName());
      assertEquals("json", modelBean1.getReader());
      assertNull(modelBean1.getWriteAllFields());
      assertEquals("defaultValue", modelBean1.getIdentifier());
      assertTrue(modelBean1.isAutodetectTypes());
      assertNull(modelBean1.getClientIdProperty());
      assertNull(modelBean1.getUpdateMethod());
      assertNull(modelBean1.getReadMethod());
      assertNull(modelBean1.getCreateMethod());
      assertFalse(modelBean1.isDisablePagingParameters());
      assertNull(modelBean1.getRootProperty());
      assertNull(modelBean1.getTotalProperty());
      assertEquals("G02z4]Nf6A#kC(", modelBean1.getExtend());
      assertEquals("json", modelBean1.getWriter());
      assertNull(modelBean1.getIdProperty());
      assertNull(modelBean1.getDestroyMethod());
      assertSame(class1, class0);
      assertSame(modelBean1, modelBean0);
      assertEquals(0, stringArray0.length);
      
      OutputFormat outputFormat1 = OutputFormat.TOUCH2;
      // Undeclared exception!
      try { 
        ModelGenerator.writeModel((HttpServletRequest) httpServletRequestWrapper0, (HttpServletResponse) httpServletResponseWrapper0, (Class<?>) class0, outputFormat1, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("ch.rasc.extclassgenerator.ModelGenerator", e);
      }
  }

  @Test(timeout = 4000000)
  public void test064()  throws Throwable  {
      Class<String> class0 = String.class;
      OutputConfig outputConfig0 = new OutputConfig();
      assertNull(outputConfig0.getOutputFormat());
      assertFalse(outputConfig0.isUseSingleQuotes());
      assertNull(outputConfig0.getLineEnding());
      assertNull(outputConfig0.getIncludeValidation());
      assertFalse(outputConfig0.isSurroundApiWithQuotes());
      assertFalse(outputConfig0.isDebug());
      assertNotNull(outputConfig0);
      
      IncludeValidation includeValidation0 = IncludeValidation.ALL;
      outputConfig0.setIncludeValidation(includeValidation0);
      assertNull(outputConfig0.getOutputFormat());
      assertEquals(IncludeValidation.ALL, outputConfig0.getIncludeValidation());
      assertFalse(outputConfig0.isUseSingleQuotes());
      assertNull(outputConfig0.getLineEnding());
      assertFalse(outputConfig0.isSurroundApiWithQuotes());
      assertFalse(outputConfig0.isDebug());
      
      // Undeclared exception!
      try { 
        ModelGenerator.writeModel((HttpServletRequest) null, (HttpServletResponse) null, class0, outputConfig0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("ch.rasc.extclassgenerator.ModelGenerator", e);
      }
  }

  @Test(timeout = 4000000)
  public void test065()  throws Throwable  {
      Class<String> class0 = String.class;
      OutputConfig outputConfig0 = new OutputConfig();
      assertFalse(outputConfig0.isDebug());
      assertFalse(outputConfig0.isSurroundApiWithQuotes());
      assertNull(outputConfig0.getOutputFormat());
      assertNull(outputConfig0.getIncludeValidation());
      assertNull(outputConfig0.getLineEnding());
      assertFalse(outputConfig0.isUseSingleQuotes());
      assertNotNull(outputConfig0);
      
      // Undeclared exception!
      try { 
        ModelGenerator.generateJavascript(class0, outputConfig0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // includeValidation must not be null
         //
         verifyException("org.springframework.util.Assert", e);
      }
  }

  @Test(timeout = 4000000)
  public void test066()  throws Throwable  {
      HttpServletRequest httpServletRequest0 = null;
      HttpServletResponse httpServletResponse0 = null;
      OutputConfig outputConfig0 = new OutputConfig();
      assertFalse(outputConfig0.isSurroundApiWithQuotes());
      assertNull(outputConfig0.getOutputFormat());
      assertFalse(outputConfig0.isUseSingleQuotes());
      assertNull(outputConfig0.getLineEnding());
      assertNull(outputConfig0.getIncludeValidation());
      assertFalse(outputConfig0.isDebug());
      assertNotNull(outputConfig0);
      
      ModelBean modelBean0 = new ModelBean();
      assertFalse(modelBean0.isClientIdPropertyAddToWriter());
      assertNull(modelBean0.getDestroyMethod());
      assertEquals("json", modelBean0.getWriter());
      assertNull(modelBean0.getCreateMethod());
      assertNull(modelBean0.getIdentifier());
      assertEquals("json", modelBean0.getReader());
      assertNull(modelBean0.getUpdateMethod());
      assertNull(modelBean0.getRootProperty());
      assertNull(modelBean0.getMessageProperty());
      assertNull(modelBean0.getTotalProperty());
      assertNull(modelBean0.getName());
      assertEquals("Ext.data.Model", modelBean0.getExtend());
      assertNull(modelBean0.getClientIdProperty());
      assertNull(modelBean0.getWriteAllFields());
      assertNull(modelBean0.getIdProperty());
      assertNull(modelBean0.getVersionProperty());
      assertNull(modelBean0.getSuccessProperty());
      assertFalse(modelBean0.isDisablePagingParameters());
      assertNull(modelBean0.getReadMethod());
      assertTrue(modelBean0.isAutodetectTypes());
      assertFalse(modelBean0.isPaging());
      assertNotNull(modelBean0);
      
      OutputFormat outputFormat0 = OutputFormat.EXTJS4;
      // Undeclared exception!
      try { 
        ModelGenerator.writeModel((HttpServletRequest) null, (HttpServletResponse) null, modelBean0, outputFormat0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("ch.rasc.extclassgenerator.ModelGenerator", e);
      }
  }

  @Test(timeout = 4000000)
  public void test067()  throws Throwable  {
      Class<Object> class0 = Object.class;
      IncludeValidation includeValidation0 = IncludeValidation.NONE;
      ModelBean modelBean0 = ModelGenerator.createModel(class0, includeValidation0);
      assertFalse(modelBean0.isClientIdPropertyAddToWriter());
      assertNull(modelBean0.getIdProperty());
      assertNull(modelBean0.getCreateMethod());
      assertEquals("json", modelBean0.getWriter());
      assertNull(modelBean0.getDestroyMethod());
      assertNull(modelBean0.getTotalProperty());
      assertNull(modelBean0.getRootProperty());
      assertNull(modelBean0.getReadMethod());
      assertFalse(modelBean0.isDisablePagingParameters());
      assertNull(modelBean0.getMessageProperty());
      assertEquals("java.lang.Object", modelBean0.getName());
      assertEquals("json", modelBean0.getReader());
      assertNull(modelBean0.getUpdateMethod());
      assertNull(modelBean0.getWriteAllFields());
      assertNull(modelBean0.getSuccessProperty());
      assertNull(modelBean0.getVersionProperty());
      assertTrue(modelBean0.isAutodetectTypes());
      assertFalse(modelBean0.isPaging());
      assertEquals("defaultValue", modelBean0.getIdentifier());
      assertNull(modelBean0.getClientIdProperty());
      assertNotNull(modelBean0);
      
      OutputConfig outputConfig0 = new OutputConfig();
      assertNull(outputConfig0.getIncludeValidation());
      assertNull(outputConfig0.getOutputFormat());
      assertNull(outputConfig0.getLineEnding());
      assertFalse(outputConfig0.isSurroundApiWithQuotes());
      assertNotNull(outputConfig0);
      
      boolean boolean0 = true;
      outputConfig0.setUseSingleQuotes(true);
      assertNull(outputConfig0.getIncludeValidation());
      assertNull(outputConfig0.getOutputFormat());
      assertNull(outputConfig0.getLineEnding());
      assertFalse(outputConfig0.isSurroundApiWithQuotes());
      
      boolean boolean1 = true;
      outputConfig0.setDebug(true);
      assertNull(outputConfig0.getIncludeValidation());
      assertNull(outputConfig0.getOutputFormat());
      assertNull(outputConfig0.getLineEnding());
      assertFalse(outputConfig0.isSurroundApiWithQuotes());
      
      modelBean0.setExtend("G02z4]Nf6A#kC(");
      assertFalse(modelBean0.isClientIdPropertyAddToWriter());
      assertNull(modelBean0.getIdProperty());
      assertNull(modelBean0.getCreateMethod());
      assertEquals("json", modelBean0.getWriter());
      assertNull(modelBean0.getDestroyMethod());
      assertNull(modelBean0.getTotalProperty());
      assertNull(modelBean0.getRootProperty());
      assertNull(modelBean0.getReadMethod());
      assertFalse(modelBean0.isDisablePagingParameters());
      assertNull(modelBean0.getMessageProperty());
      assertEquals("java.lang.Object", modelBean0.getName());
      assertEquals("json", modelBean0.getReader());
      assertNull(modelBean0.getUpdateMethod());
      assertNull(modelBean0.getWriteAllFields());
      assertNull(modelBean0.getSuccessProperty());
      assertNull(modelBean0.getVersionProperty());
      assertTrue(modelBean0.isAutodetectTypes());
      assertFalse(modelBean0.isPaging());
      assertEquals("defaultValue", modelBean0.getIdentifier());
      assertNull(modelBean0.getClientIdProperty());
      
      OutputFormat outputFormat0 = OutputFormat.TOUCH2;
      outputConfig0.setOutputFormat(outputFormat0);
      assertEquals(OutputFormat.TOUCH2, outputConfig0.getOutputFormat());
      assertNull(outputConfig0.getIncludeValidation());
      assertNull(outputConfig0.getLineEnding());
      assertFalse(outputConfig0.isSurroundApiWithQuotes());
      
      String string0 = ModelGenerator.generateJavascript(modelBean0, outputConfig0);
      assertFalse(modelBean0.isClientIdPropertyAddToWriter());
      assertNull(modelBean0.getIdProperty());
      assertNull(modelBean0.getCreateMethod());
      assertEquals("json", modelBean0.getWriter());
      assertNull(modelBean0.getDestroyMethod());
      assertNull(modelBean0.getTotalProperty());
      assertNull(modelBean0.getRootProperty());
      assertNull(modelBean0.getReadMethod());
      assertFalse(modelBean0.isDisablePagingParameters());
      assertNull(modelBean0.getMessageProperty());
      assertEquals("java.lang.Object", modelBean0.getName());
      assertEquals("json", modelBean0.getReader());
      assertNull(modelBean0.getUpdateMethod());
      assertNull(modelBean0.getWriteAllFields());
      assertNull(modelBean0.getSuccessProperty());
      assertNull(modelBean0.getVersionProperty());
      assertTrue(modelBean0.isAutodetectTypes());
      assertFalse(modelBean0.isPaging());
      assertEquals("defaultValue", modelBean0.getIdentifier());
      assertNull(modelBean0.getClientIdProperty());
      assertEquals(OutputFormat.TOUCH2, outputConfig0.getOutputFormat());
      assertNull(outputConfig0.getIncludeValidation());
      assertNull(outputConfig0.getLineEnding());
      assertFalse(outputConfig0.isSurroundApiWithQuotes());
      assertNotNull(string0);
      assertEquals("Ext.define('java.lang.Object',\r\n{\n  extend : 'G02z4]Nf6A#kC(',\n  config : {\n    identifier : 'defaultValue',\n    fields : [ ],\n    hasMany : [ ]\n  }\n});", string0);
      
      String string1 = ModelGenerator.trimToNull("Ext.define('java.lang.Object',\r\n{\n  extend : 'G02z4]Nf6A#kC(',\n  config : {\n    identifier : 'defaultValue',\n    fields : [ ],\n    hasMany : [ ]\n  }\n});");
      assertNotNull(string1);
      assertEquals("Ext.define('java.lang.Object',\r\n{\n  extend : 'G02z4]Nf6A#kC(',\n  config : {\n    identifier : 'defaultValue',\n    fields : [ ],\n    hasMany : [ ]\n  }\n});", string1);
      
      String string2 = ModelGenerator.generateJavascript(modelBean0, outputConfig0);
      assertFalse(modelBean0.isClientIdPropertyAddToWriter());
      assertNull(modelBean0.getIdProperty());
      assertNull(modelBean0.getCreateMethod());
      assertEquals("json", modelBean0.getWriter());
      assertNull(modelBean0.getDestroyMethod());
      assertNull(modelBean0.getTotalProperty());
      assertNull(modelBean0.getRootProperty());
      assertNull(modelBean0.getReadMethod());
      assertFalse(modelBean0.isDisablePagingParameters());
      assertNull(modelBean0.getMessageProperty());
      assertEquals("java.lang.Object", modelBean0.getName());
      assertEquals("json", modelBean0.getReader());
      assertNull(modelBean0.getUpdateMethod());
      assertNull(modelBean0.getWriteAllFields());
      assertNull(modelBean0.getSuccessProperty());
      assertNull(modelBean0.getVersionProperty());
      assertTrue(modelBean0.isAutodetectTypes());
      assertFalse(modelBean0.isPaging());
      assertEquals("defaultValue", modelBean0.getIdentifier());
      assertNull(modelBean0.getClientIdProperty());
      assertEquals(OutputFormat.TOUCH2, outputConfig0.getOutputFormat());
      assertNull(outputConfig0.getIncludeValidation());
      assertNull(outputConfig0.getLineEnding());
      assertFalse(outputConfig0.isSurroundApiWithQuotes());
      assertTrue(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("Ext.define('java.lang.Object',\r\n{\n  extend : 'G02z4]Nf6A#kC(',\n  config : {\n    identifier : 'defaultValue',\n    fields : [ ],\n    hasMany : [ ]\n  }\n});", string2);
      
      Class<Object> class1 = Object.class;
      ModelBean modelBean1 = ModelGenerator.createModel(class1, includeValidation0);
      assertNull(modelBean1.getMessageProperty());
      assertFalse(modelBean1.isPaging());
      assertNull(modelBean1.getClientIdProperty());
      assertNull(modelBean1.getVersionProperty());
      assertNull(modelBean1.getRootProperty());
      assertNull(modelBean1.getWriteAllFields());
      assertEquals("json", modelBean1.getReader());
      assertNull(modelBean1.getUpdateMethod());
      assertNull(modelBean1.getCreateMethod());
      assertNull(modelBean1.getTotalProperty());
      assertFalse(modelBean1.isClientIdPropertyAddToWriter());
      assertEquals("G02z4]Nf6A#kC(", modelBean1.getExtend());
      assertNull(modelBean1.getIdProperty());
      assertNull(modelBean1.getDestroyMethod());
      assertEquals("json", modelBean1.getWriter());
      assertTrue(modelBean1.isAutodetectTypes());
      assertEquals("java.lang.Object", modelBean1.getName());
      assertEquals("defaultValue", modelBean1.getIdentifier());
      assertNull(modelBean1.getSuccessProperty());
      assertFalse(modelBean1.isDisablePagingParameters());
      assertNull(modelBean1.getReadMethod());
      assertSame(class1, class0);
      assertSame(modelBean1, modelBean0);
      assertNotNull(modelBean1);
      
      HttpServletRequest httpServletRequest0 = mock(HttpServletRequest.class, new ViolatedAssumptionAnswer());
      doReturn("Ext.define('java.lang.Object',\r\n{\n  extend : 'G02z4]Nf6A#kC(',\n  config : {\n    identifier : 'defaultValue',\n    fields : [ ],\n    hasMany : [ ]\n  }\n});").when(httpServletRequest0).getHeader(anyString());
      HttpServletRequestWrapper httpServletRequestWrapper0 = new HttpServletRequestWrapper(httpServletRequest0);
      assertNotNull(httpServletRequestWrapper0);
      
      HttpServletResponse httpServletResponse0 = mock(HttpServletResponse.class, new ViolatedAssumptionAnswer());
      doReturn((ServletOutputStream) null).when(httpServletResponse0).getOutputStream();
      HttpServletResponseWrapper httpServletResponseWrapper0 = new HttpServletResponseWrapper(httpServletResponse0);
      assertNotNull(httpServletResponseWrapper0);
      
      String[] stringArray0 = new String[0];
      modelBean1.setHasMany(stringArray0);
      assertNull(modelBean1.getMessageProperty());
      assertFalse(modelBean1.isPaging());
      assertNull(modelBean1.getClientIdProperty());
      assertNull(modelBean1.getVersionProperty());
      assertNull(modelBean1.getRootProperty());
      assertNull(modelBean1.getWriteAllFields());
      assertEquals("json", modelBean1.getReader());
      assertNull(modelBean1.getUpdateMethod());
      assertNull(modelBean1.getCreateMethod());
      assertNull(modelBean1.getTotalProperty());
      assertFalse(modelBean1.isClientIdPropertyAddToWriter());
      assertEquals("G02z4]Nf6A#kC(", modelBean1.getExtend());
      assertNull(modelBean1.getIdProperty());
      assertNull(modelBean1.getDestroyMethod());
      assertEquals("json", modelBean1.getWriter());
      assertTrue(modelBean1.isAutodetectTypes());
      assertEquals("java.lang.Object", modelBean1.getName());
      assertEquals("defaultValue", modelBean1.getIdentifier());
      assertNull(modelBean1.getSuccessProperty());
      assertFalse(modelBean1.isDisablePagingParameters());
      assertNull(modelBean1.getReadMethod());
      assertSame(class1, class0);
      assertSame(modelBean1, modelBean0);
      assertEquals(0, stringArray0.length);
      
      LinkedList<AbstractValidation> linkedList0 = new LinkedList<AbstractValidation>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      modelBean0.addValidations(linkedList0);
      assertFalse(modelBean0.isClientIdPropertyAddToWriter());
      assertNull(modelBean0.getIdProperty());
      assertNull(modelBean0.getCreateMethod());
      assertEquals("json", modelBean0.getWriter());
      assertNull(modelBean0.getDestroyMethod());
      assertNull(modelBean0.getTotalProperty());
      assertNull(modelBean0.getRootProperty());
      assertNull(modelBean0.getReadMethod());
      assertFalse(modelBean0.isDisablePagingParameters());
      assertNull(modelBean0.getMessageProperty());
      assertEquals("java.lang.Object", modelBean0.getName());
      assertEquals("json", modelBean0.getReader());
      assertNull(modelBean0.getUpdateMethod());
      assertNull(modelBean0.getWriteAllFields());
      assertNull(modelBean0.getSuccessProperty());
      assertNull(modelBean0.getVersionProperty());
      assertTrue(modelBean0.isAutodetectTypes());
      assertFalse(modelBean0.isPaging());
      assertEquals("defaultValue", modelBean0.getIdentifier());
      assertNull(modelBean0.getClientIdProperty());
      assertEquals(0, linkedList0.size());
      assertSame(class0, class1);
      assertSame(modelBean0, modelBean1);
      
      OutputFormat outputFormat1 = OutputFormat.TOUCH2;
      // Undeclared exception!
      try { 
        ModelGenerator.writeModel((HttpServletRequest) httpServletRequestWrapper0, (HttpServletResponse) httpServletResponseWrapper0, (Class<?>) class0, outputFormat1, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("ch.rasc.extclassgenerator.ModelGenerator", e);
      }
  }

  @Test(timeout = 4000000)
  public void test068()  throws Throwable  {
      OutputConfig outputConfig0 = new OutputConfig();
      assertFalse(outputConfig0.isSurroundApiWithQuotes());
      assertNull(outputConfig0.getOutputFormat());
      assertNull(outputConfig0.getIncludeValidation());
      assertNull(outputConfig0.getLineEnding());
      assertFalse(outputConfig0.isUseSingleQuotes());
      assertFalse(outputConfig0.isDebug());
      assertNotNull(outputConfig0);
      
      OutputFormat outputFormat0 = OutputFormat.EXTJS5;
      outputConfig0.setOutputFormat(outputFormat0);
      assertFalse(outputConfig0.isSurroundApiWithQuotes());
      assertEquals(OutputFormat.EXTJS5, outputConfig0.getOutputFormat());
      assertNull(outputConfig0.getIncludeValidation());
      assertNull(outputConfig0.getLineEnding());
      assertFalse(outputConfig0.isUseSingleQuotes());
      assertFalse(outputConfig0.isDebug());
      
      Class<Object> class0 = Object.class;
      IncludeValidation includeValidation0 = IncludeValidation.NONE;
      ModelBean modelBean0 = ModelGenerator.createModel(class0, includeValidation0);
      assertNull(modelBean0.getIdProperty());
      assertTrue(modelBean0.isAutodetectTypes());
      assertEquals("json", modelBean0.getReader());
      assertEquals("defaultValue", modelBean0.getIdentifier());
      assertNull(modelBean0.getUpdateMethod());
      assertEquals("java.lang.Object", modelBean0.getName());
      assertNull(modelBean0.getDestroyMethod());
      assertNull(modelBean0.getWriteAllFields());
      assertFalse(modelBean0.isClientIdPropertyAddToWriter());
      assertEquals("_DfY]L", modelBean0.getClientIdProperty());
      assertFalse(modelBean0.isDisablePagingParameters());
      assertFalse(modelBean0.isPaging());
      assertNull(modelBean0.getSuccessProperty());
      assertEquals("d1WtV(zz", modelBean0.getReadMethod());
      assertNull(modelBean0.getRootProperty());
      assertNull(modelBean0.getVersionProperty());
      assertEquals("json", modelBean0.getWriter());
      assertNull(modelBean0.getMessageProperty());
      assertNull(modelBean0.getTotalProperty());
      assertNull(modelBean0.getCreateMethod());
      assertNotNull(modelBean0);
      
      modelBean0.setReadMethod("d1WtV(zz");
      assertNull(modelBean0.getIdProperty());
      assertTrue(modelBean0.isAutodetectTypes());
      assertEquals("json", modelBean0.getReader());
      assertEquals("defaultValue", modelBean0.getIdentifier());
      assertNull(modelBean0.getUpdateMethod());
      assertEquals("java.lang.Object", modelBean0.getName());
      assertNull(modelBean0.getDestroyMethod());
      assertNull(modelBean0.getWriteAllFields());
      assertFalse(modelBean0.isClientIdPropertyAddToWriter());
      assertEquals("_DfY]L", modelBean0.getClientIdProperty());
      assertFalse(modelBean0.isDisablePagingParameters());
      assertFalse(modelBean0.isPaging());
      assertNull(modelBean0.getSuccessProperty());
      assertEquals("d1WtV(zz", modelBean0.getReadMethod());
      assertNull(modelBean0.getRootProperty());
      assertNull(modelBean0.getVersionProperty());
      assertEquals("json", modelBean0.getWriter());
      assertNull(modelBean0.getMessageProperty());
      assertNull(modelBean0.getTotalProperty());
      assertNull(modelBean0.getCreateMethod());
      
      OutputConfig outputConfig1 = new OutputConfig();
      assertFalse(outputConfig1.isUseSingleQuotes());
      assertNull(outputConfig1.getLineEnding());
      assertNull(outputConfig1.getIncludeValidation());
      assertNull(outputConfig1.getOutputFormat());
      assertFalse(outputConfig1.isSurroundApiWithQuotes());
      assertFalse(outputConfig1.isDebug());
      assertFalse(outputConfig1.equals((Object)outputConfig0));
      assertNotNull(outputConfig1);
      
      String string0 = ModelGenerator.generateJavascript(modelBean0, outputConfig0);
      assertFalse(outputConfig0.isSurroundApiWithQuotes());
      assertEquals(OutputFormat.EXTJS5, outputConfig0.getOutputFormat());
      assertNull(outputConfig0.getIncludeValidation());
      assertNull(outputConfig0.getLineEnding());
      assertFalse(outputConfig0.isUseSingleQuotes());
      assertFalse(outputConfig0.isDebug());
      assertNull(modelBean0.getIdProperty());
      assertTrue(modelBean0.isAutodetectTypes());
      assertEquals("json", modelBean0.getReader());
      assertEquals("defaultValue", modelBean0.getIdentifier());
      assertNull(modelBean0.getUpdateMethod());
      assertEquals("java.lang.Object", modelBean0.getName());
      assertNull(modelBean0.getDestroyMethod());
      assertNull(modelBean0.getWriteAllFields());
      assertFalse(modelBean0.isClientIdPropertyAddToWriter());
      assertEquals("_DfY]L", modelBean0.getClientIdProperty());
      assertFalse(modelBean0.isDisablePagingParameters());
      assertFalse(modelBean0.isPaging());
      assertNull(modelBean0.getSuccessProperty());
      assertEquals("d1WtV(zz", modelBean0.getReadMethod());
      assertNull(modelBean0.getRootProperty());
      assertNull(modelBean0.getVersionProperty());
      assertEquals("json", modelBean0.getWriter());
      assertNull(modelBean0.getMessageProperty());
      assertNull(modelBean0.getTotalProperty());
      assertNull(modelBean0.getCreateMethod());
      assertNotSame(outputConfig0, outputConfig1);
      assertFalse(outputConfig0.equals((Object)outputConfig1));
      assertNotNull(string0);
      
      String string1 = ModelGenerator.generateJavascript(modelBean0, outputConfig0);
      assertFalse(outputConfig0.isSurroundApiWithQuotes());
      assertEquals(OutputFormat.EXTJS5, outputConfig0.getOutputFormat());
      assertNull(outputConfig0.getIncludeValidation());
      assertNull(outputConfig0.getLineEnding());
      assertFalse(outputConfig0.isUseSingleQuotes());
      assertFalse(outputConfig0.isDebug());
      assertNull(modelBean0.getIdProperty());
      assertTrue(modelBean0.isAutodetectTypes());
      assertEquals("json", modelBean0.getReader());
      assertEquals("defaultValue", modelBean0.getIdentifier());
      assertNull(modelBean0.getUpdateMethod());
      assertEquals("java.lang.Object", modelBean0.getName());
      assertNull(modelBean0.getDestroyMethod());
      assertNull(modelBean0.getWriteAllFields());
      assertFalse(modelBean0.isClientIdPropertyAddToWriter());
      assertEquals("_DfY]L", modelBean0.getClientIdProperty());
      assertFalse(modelBean0.isDisablePagingParameters());
      assertFalse(modelBean0.isPaging());
      assertNull(modelBean0.getSuccessProperty());
      assertEquals("d1WtV(zz", modelBean0.getReadMethod());
      assertNull(modelBean0.getRootProperty());
      assertNull(modelBean0.getVersionProperty());
      assertEquals("json", modelBean0.getWriter());
      assertNull(modelBean0.getMessageProperty());
      assertNull(modelBean0.getTotalProperty());
      assertNull(modelBean0.getCreateMethod());
      assertNotSame(outputConfig0, outputConfig1);
      assertFalse(outputConfig0.equals((Object)outputConfig1));
      assertNotNull(string1);
      
      HttpServletRequest httpServletRequest0 = mock(HttpServletRequest.class, new ViolatedAssumptionAnswer());
      doReturn("d1WtV(zz").when(httpServletRequest0).getHeader(anyString());
      HttpServletRequestWrapper httpServletRequestWrapper0 = new HttpServletRequestWrapper(httpServletRequest0);
      assertNotNull(httpServletRequestWrapper0);
      
      ServletOutputStream servletOutputStream0 = mock(ServletOutputStream.class, new ViolatedAssumptionAnswer());
      HttpServletResponse httpServletResponse0 = mock(HttpServletResponse.class, new ViolatedAssumptionAnswer());
      doReturn(servletOutputStream0).when(httpServletResponse0).getOutputStream();
      HttpServletResponseWrapper httpServletResponseWrapper0 = new HttpServletResponseWrapper(httpServletResponse0);
      assertNotNull(httpServletResponseWrapper0);
      
      ModelGenerator.writeModel((HttpServletRequest) httpServletRequestWrapper0, (HttpServletResponse) httpServletResponseWrapper0, modelBean0, outputConfig0);
      assertFalse(outputConfig0.isSurroundApiWithQuotes());
      assertEquals(OutputFormat.EXTJS5, outputConfig0.getOutputFormat());
      assertNull(outputConfig0.getIncludeValidation());
      assertNull(outputConfig0.getLineEnding());
      assertFalse(outputConfig0.isUseSingleQuotes());
      assertFalse(outputConfig0.isDebug());
      assertNull(modelBean0.getIdProperty());
      assertTrue(modelBean0.isAutodetectTypes());
      assertEquals("json", modelBean0.getReader());
      assertEquals("defaultValue", modelBean0.getIdentifier());
      assertNull(modelBean0.getUpdateMethod());
      assertEquals("java.lang.Object", modelBean0.getName());
      assertNull(modelBean0.getDestroyMethod());
      assertNull(modelBean0.getWriteAllFields());
      assertFalse(modelBean0.isClientIdPropertyAddToWriter());
      assertEquals("_DfY]L", modelBean0.getClientIdProperty());
      assertFalse(modelBean0.isDisablePagingParameters());
      assertFalse(modelBean0.isPaging());
      assertNull(modelBean0.getSuccessProperty());
      assertEquals("d1WtV(zz", modelBean0.getReadMethod());
      assertNull(modelBean0.getRootProperty());
      assertNull(modelBean0.getVersionProperty());
      assertEquals("json", modelBean0.getWriter());
      assertNull(modelBean0.getMessageProperty());
      assertNull(modelBean0.getTotalProperty());
      assertNull(modelBean0.getCreateMethod());
      assertNotSame(outputConfig0, outputConfig1);
      assertFalse(outputConfig0.equals((Object)outputConfig1));
  }

  @Test(timeout = 4000000)
  public void test069()  throws Throwable  {
      Class<ModelFieldBean> class0 = ModelFieldBean.class;
      ModelBean modelBean0 = ModelGenerator.createModel(class0);
      assertEquals("json", modelBean0.getReader());
      assertEquals("ch.rasc.extclassgenerator.ModelFieldBean", modelBean0.getName());
      assertNull(modelBean0.getUpdateMethod());
      assertTrue(modelBean0.isAutodetectTypes());
      assertNull(modelBean0.getReadMethod());
      assertNull(modelBean0.getCreateMethod());
      assertFalse(modelBean0.isClientIdPropertyAddToWriter());
      assertNull(modelBean0.getTotalProperty());
      assertEquals("json", modelBean0.getWriter());
      assertNull(modelBean0.getIdProperty());
      assertNull(modelBean0.getDestroyMethod());
      assertNull(modelBean0.getIdentifier());
      assertNull(modelBean0.getRootProperty());
      assertNull(modelBean0.getSuccessProperty());
      assertFalse(modelBean0.isPaging());
      assertFalse(modelBean0.isDisablePagingParameters());
      assertNull(modelBean0.getMessageProperty());
      assertNull(modelBean0.getClientIdProperty());
      assertEquals("Ext.data.Model", modelBean0.getExtend());
      assertNull(modelBean0.getVersionProperty());
      assertNull(modelBean0.getWriteAllFields());
      assertNotNull(modelBean0);
      
      modelBean0.setIdProperty("map2ing");
      assertEquals("json", modelBean0.getReader());
      assertEquals("ch.rasc.extclassgenerator.ModelFieldBean", modelBean0.getName());
      assertNull(modelBean0.getUpdateMethod());
      assertTrue(modelBean0.isAutodetectTypes());
      assertNull(modelBean0.getReadMethod());
      assertNull(modelBean0.getCreateMethod());
      assertEquals("map2ing", modelBean0.getIdProperty());
      assertFalse(modelBean0.isClientIdPropertyAddToWriter());
      assertNull(modelBean0.getTotalProperty());
      assertEquals("json", modelBean0.getWriter());
      assertNull(modelBean0.getDestroyMethod());
      assertNull(modelBean0.getIdentifier());
      assertNull(modelBean0.getRootProperty());
      assertNull(modelBean0.getSuccessProperty());
      assertFalse(modelBean0.isPaging());
      assertFalse(modelBean0.isDisablePagingParameters());
      assertNull(modelBean0.getMessageProperty());
      assertNull(modelBean0.getClientIdProperty());
      assertEquals("Ext.data.Model", modelBean0.getExtend());
      assertNull(modelBean0.getVersionProperty());
      assertNull(modelBean0.getWriteAllFields());
      
      OutputConfig outputConfig0 = new OutputConfig();
      assertFalse(outputConfig0.isDebug());
      assertFalse(outputConfig0.isUseSingleQuotes());
      assertNull(outputConfig0.getLineEnding());
      assertNull(outputConfig0.getOutputFormat());
      assertNull(outputConfig0.getIncludeValidation());
      assertNotNull(outputConfig0);
      
      outputConfig0.setSurroundApiWithQuotes(true);
      assertFalse(outputConfig0.isDebug());
      assertFalse(outputConfig0.isUseSingleQuotes());
      assertNull(outputConfig0.getLineEnding());
      assertNull(outputConfig0.getOutputFormat());
      assertNull(outputConfig0.getIncludeValidation());
      
      String string0 = ModelGenerator.generateJavascript(modelBean0, outputConfig0);
      assertEquals("json", modelBean0.getReader());
      assertEquals("ch.rasc.extclassgenerator.ModelFieldBean", modelBean0.getName());
      assertNull(modelBean0.getUpdateMethod());
      assertTrue(modelBean0.isAutodetectTypes());
      assertNull(modelBean0.getReadMethod());
      assertNull(modelBean0.getCreateMethod());
      assertEquals("map2ing", modelBean0.getIdProperty());
      assertFalse(modelBean0.isClientIdPropertyAddToWriter());
      assertNull(modelBean0.getTotalProperty());
      assertEquals("json", modelBean0.getWriter());
      assertNull(modelBean0.getDestroyMethod());
      assertNull(modelBean0.getIdentifier());
      assertNull(modelBean0.getRootProperty());
      assertNull(modelBean0.getSuccessProperty());
      assertFalse(modelBean0.isPaging());
      assertFalse(modelBean0.isDisablePagingParameters());
      assertNull(modelBean0.getMessageProperty());
      assertNull(modelBean0.getClientIdProperty());
      assertEquals("Ext.data.Model", modelBean0.getExtend());
      assertNull(modelBean0.getVersionProperty());
      assertNull(modelBean0.getWriteAllFields());
      assertFalse(outputConfig0.isDebug());
      assertFalse(outputConfig0.isUseSingleQuotes());
      assertNull(outputConfig0.getLineEnding());
      assertNull(outputConfig0.getOutputFormat());
      assertNull(outputConfig0.getIncludeValidation());
      assertNotNull(string0);
      assertEquals("Ext.define(\"ch.rasc.extclassgenerator.ModelFieldBean\",{extend:\"Ext.data.Model\",config:{idProperty:\"map2ing\",fields:[{name:\"allowBlank\",type:\"boolean\"},{name:\"allowNull\",type:\"boolean\"},{name:\"critical\",type:\"boolean\"},{name:\"persist\",type:\"boolean\"},{name:\"unique\",type:\"boolean\"},{name:\"useNull\",type:\"boolean\"},{name:\"calculate\",type:\"string\"},{name:\"convert\",type:\"string\"},{name:\"dateFormat\",type:\"string\"},{name:\"mapping\",type:\"string\"},{name:\"name\",type:\"string\"},{name:\"type\",type:\"string\"}],proxy:{idParam:\"map2ing\",type:\"direct\"}}});", string0);
      
      Class<AssertStmt> class1 = AssertStmt.class;
      ModelBean modelBean1 = ModelGenerator.createModel(class1);
      assertFalse(modelBean1.isClientIdPropertyAddToWriter());
      assertNull(modelBean1.getCreateMethod());
      assertNull(modelBean1.getIdentifier());
      assertNull(modelBean1.getDestroyMethod());
      assertEquals("json", modelBean1.getWriter());
      assertNull(modelBean1.getTotalProperty());
      assertNull(modelBean1.getIdProperty());
      assertNull(modelBean1.getRootProperty());
      assertEquals("Ext.data.Model", modelBean1.getExtend());
      assertNull(modelBean1.getReadMethod());
      assertFalse(modelBean1.isDisablePagingParameters());
      assertNull(modelBean1.getMessageProperty());
      assertEquals("json", modelBean1.getReader());
      assertNull(modelBean1.getUpdateMethod());
      assertEquals("com.github.javaparser.ast.stmt.AssertStmt", modelBean1.getName());
      assertNull(modelBean1.getVersionProperty());
      assertFalse(modelBean1.isPaging());
      assertTrue(modelBean1.isAutodetectTypes());
      assertNull(modelBean1.getSuccessProperty());
      assertNull(modelBean1.getWriteAllFields());
      assertNull(modelBean1.getClientIdProperty());
      assertNotSame(modelBean1, modelBean0);
      assertFalse(modelBean1.equals((Object)modelBean0));
      assertNotNull(modelBean1);
  }

  @Test(timeout = 4000000)
  public void test070()  throws Throwable  {
      Class<String> class0 = String.class;
      ModelBean modelBean0 = ModelGenerator.createModel(class0);
      assertEquals("Ext.data.Model", modelBean0.getExtend());
      assertNull(modelBean0.getClientIdProperty());
      assertTrue(modelBean0.isAutodetectTypes());
      assertNull(modelBean0.getUpdateMethod());
      assertNull(modelBean0.getReadMethod());
      assertNull(modelBean0.getCreateMethod());
      assertNull(modelBean0.getMessageProperty());
      assertNull(modelBean0.getVersionProperty());
      assertFalse(modelBean0.isPaging());
      assertEquals("json", modelBean0.getReader());
      assertNull(modelBean0.getSuccessProperty());
      assertNull(modelBean0.getWriteAllFields());
      assertFalse(modelBean0.isClientIdPropertyAddToWriter());
      assertFalse(modelBean0.isDisablePagingParameters());
      assertNull(modelBean0.getRootProperty());
      assertNull(modelBean0.getIdentifier());
      assertNull(modelBean0.getIdProperty());
      assertEquals("json", modelBean0.getWriter());
      assertNull(modelBean0.getTotalProperty());
      assertEquals("java.lang.String", modelBean0.getName());
      assertNull(modelBean0.getDestroyMethod());
      assertNotNull(modelBean0);
      
      HttpServletRequest httpServletRequest0 = mock(HttpServletRequest.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(httpServletRequest0).getHeader(anyString());
      doReturn((Part) null).when(httpServletRequest0).getPart(anyString());
      BelongsToAssociation belongsToAssociation0 = new BelongsToAssociation("ETXTGhlKK");
      assertEquals("belongsTo", belongsToAssociation0.getType());
      assertNull(belongsToAssociation0.getAssociationKey());
      assertNull(belongsToAssociation0.getGetterName());
      assertNull(belongsToAssociation0.getSetterName());
      assertEquals("ETXTGhlKK", belongsToAssociation0.getModel());
      assertNull(belongsToAssociation0.getForeignKey());
      assertNull(belongsToAssociation0.getPrimaryKey());
      assertNull(belongsToAssociation0.getInstanceName());
      assertNotNull(belongsToAssociation0);
      
      modelBean0.addAssociation(belongsToAssociation0);
      assertEquals("Ext.data.Model", modelBean0.getExtend());
      assertNull(modelBean0.getClientIdProperty());
      assertTrue(modelBean0.isAutodetectTypes());
      assertNull(modelBean0.getUpdateMethod());
      assertNull(modelBean0.getReadMethod());
      assertNull(modelBean0.getCreateMethod());
      assertNull(modelBean0.getMessageProperty());
      assertNull(modelBean0.getVersionProperty());
      assertFalse(modelBean0.isPaging());
      assertEquals("json", modelBean0.getReader());
      assertNull(modelBean0.getSuccessProperty());
      assertNull(modelBean0.getWriteAllFields());
      assertFalse(modelBean0.isClientIdPropertyAddToWriter());
      assertFalse(modelBean0.isDisablePagingParameters());
      assertNull(modelBean0.getRootProperty());
      assertNull(modelBean0.getIdentifier());
      assertNull(modelBean0.getIdProperty());
      assertEquals("json", modelBean0.getWriter());
      assertNull(modelBean0.getTotalProperty());
      assertEquals("java.lang.String", modelBean0.getName());
      assertNull(modelBean0.getDestroyMethod());
      assertEquals("belongsTo", belongsToAssociation0.getType());
      assertNull(belongsToAssociation0.getAssociationKey());
      assertNull(belongsToAssociation0.getGetterName());
      assertNull(belongsToAssociation0.getSetterName());
      assertEquals("ETXTGhlKK", belongsToAssociation0.getModel());
      assertNull(belongsToAssociation0.getForeignKey());
      assertNull(belongsToAssociation0.getPrimaryKey());
      assertNull(belongsToAssociation0.getInstanceName());
      
      HttpServletRequestWrapper httpServletRequestWrapper0 = new HttpServletRequestWrapper(httpServletRequest0);
      assertNotNull(httpServletRequestWrapper0);
      
      HttpServletResponse httpServletResponse0 = mock(HttpServletResponse.class, new ViolatedAssumptionAnswer());
      doReturn((ServletOutputStream) null).when(httpServletResponse0).getOutputStream();
      HttpServletResponseWrapper httpServletResponseWrapper0 = new HttpServletResponseWrapper(httpServletResponse0);
      assertNotNull(httpServletResponseWrapper0);
      
      Part part0 = httpServletRequestWrapper0.getPart("ETXTGhlKK");
      assertNull(part0);
      
      httpServletResponseWrapper0.setBufferSize(31);
      ServletResponse servletResponse0 = httpServletResponseWrapper0.getResponse();
      assertNotNull(servletResponse0);
      
      ServletResponseWrapper servletResponseWrapper0 = new ServletResponseWrapper(servletResponse0);
      assertNotNull(servletResponseWrapper0);
      
      ServletOutputStream servletOutputStream0 = servletResponseWrapper0.getOutputStream();
      assertNull(servletOutputStream0);
      
      httpServletResponseWrapper0.setResponse(servletResponseWrapper0);
      OutputConfig outputConfig0 = new OutputConfig();
      assertFalse(outputConfig0.isDebug());
      assertFalse(outputConfig0.isSurroundApiWithQuotes());
      assertNull(outputConfig0.getOutputFormat());
      assertFalse(outputConfig0.isUseSingleQuotes());
      assertNull(outputConfig0.getLineEnding());
      assertNull(outputConfig0.getIncludeValidation());
      assertNotNull(outputConfig0);
      
      // Undeclared exception!
      try { 
        ModelGenerator.writeModel((HttpServletRequest) httpServletRequestWrapper0, (HttpServletResponse) httpServletResponseWrapper0, modelBean0, outputConfig0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000000)
  public void test071()  throws Throwable  {
      OutputConfig outputConfig0 = new OutputConfig();
      assertFalse(outputConfig0.isSurroundApiWithQuotes());
      assertNull(outputConfig0.getLineEnding());
      assertFalse(outputConfig0.isDebug());
      assertNull(outputConfig0.getOutputFormat());
      assertNull(outputConfig0.getIncludeValidation());
      assertNotNull(outputConfig0);
      
      OutputFormat outputFormat0 = OutputFormat.EXTJS5;
      outputConfig0.setUseSingleQuotes(true);
      assertFalse(outputConfig0.isSurroundApiWithQuotes());
      assertNull(outputConfig0.getLineEnding());
      assertFalse(outputConfig0.isDebug());
      assertNull(outputConfig0.getOutputFormat());
      assertNull(outputConfig0.getIncludeValidation());
      
      outputConfig0.setOutputFormat(outputFormat0);
      assertFalse(outputConfig0.isSurroundApiWithQuotes());
      assertNull(outputConfig0.getLineEnding());
      assertFalse(outputConfig0.isDebug());
      assertEquals(OutputFormat.EXTJS5, outputConfig0.getOutputFormat());
      assertNull(outputConfig0.getIncludeValidation());
      
      ModelBean modelBean0 = new ModelBean();
      assertNull(modelBean0.getMessageProperty());
      assertFalse(modelBean0.isPaging());
      assertNull(modelBean0.getClientIdProperty());
      assertNull(modelBean0.getRootProperty());
      assertNull(modelBean0.getVersionProperty());
      assertNull(modelBean0.getWriteAllFields());
      assertNull(modelBean0.getIdentifier());
      assertEquals("json", modelBean0.getReader());
      assertNull(modelBean0.getUpdateMethod());
      assertNull(modelBean0.getCreateMethod());
      assertFalse(modelBean0.isClientIdPropertyAddToWriter());
      assertNull(modelBean0.getName());
      assertNull(modelBean0.getTotalProperty());
      assertNull(modelBean0.getIdProperty());
      assertEquals("json", modelBean0.getWriter());
      assertNull(modelBean0.getDestroyMethod());
      assertTrue(modelBean0.isAutodetectTypes());
      assertEquals("Ext.data.Model", modelBean0.getExtend());
      assertFalse(modelBean0.isDisablePagingParameters());
      assertNull(modelBean0.getSuccessProperty());
      assertNull(modelBean0.getReadMethod());
      assertNotNull(modelBean0);
      
      String string0 = ModelGenerator.generateJavascript(modelBean0, outputConfig0);
      assertFalse(outputConfig0.isSurroundApiWithQuotes());
      assertNull(outputConfig0.getLineEnding());
      assertFalse(outputConfig0.isDebug());
      assertEquals(OutputFormat.EXTJS5, outputConfig0.getOutputFormat());
      assertNull(outputConfig0.getIncludeValidation());
      assertNull(modelBean0.getMessageProperty());
      assertFalse(modelBean0.isPaging());
      assertNull(modelBean0.getClientIdProperty());
      assertNull(modelBean0.getRootProperty());
      assertNull(modelBean0.getVersionProperty());
      assertNull(modelBean0.getWriteAllFields());
      assertNull(modelBean0.getIdentifier());
      assertEquals("json", modelBean0.getReader());
      assertNull(modelBean0.getUpdateMethod());
      assertNull(modelBean0.getCreateMethod());
      assertFalse(modelBean0.isClientIdPropertyAddToWriter());
      assertNull(modelBean0.getName());
      assertNull(modelBean0.getTotalProperty());
      assertNull(modelBean0.getIdProperty());
      assertEquals("json", modelBean0.getWriter());
      assertNull(modelBean0.getDestroyMethod());
      assertTrue(modelBean0.isAutodetectTypes());
      assertEquals("Ext.data.Model", modelBean0.getExtend());
      assertFalse(modelBean0.isDisablePagingParameters());
      assertNull(modelBean0.getSuccessProperty());
      assertNull(modelBean0.getReadMethod());
      assertNotNull(string0);
      assertEquals("Ext.define('null',{extend:'Ext.data.Model',fields:[]});", string0);
  }

  @Test(timeout = 4000000)
  public void test072()  throws Throwable  {
      OutputConfig outputConfig0 = new OutputConfig();
      assertNull(outputConfig0.getIncludeValidation());
      assertFalse(outputConfig0.isUseSingleQuotes());
      assertFalse(outputConfig0.isDebug());
      assertFalse(outputConfig0.isSurroundApiWithQuotes());
      assertNull(outputConfig0.getLineEnding());
      assertNull(outputConfig0.getOutputFormat());
      assertNotNull(outputConfig0);
      
      OutputFormat outputFormat0 = OutputFormat.EXTJS5;
      outputConfig0.setOutputFormat(outputFormat0);
      assertNull(outputConfig0.getIncludeValidation());
      assertEquals(OutputFormat.EXTJS5, outputConfig0.getOutputFormat());
      assertFalse(outputConfig0.isUseSingleQuotes());
      assertFalse(outputConfig0.isDebug());
      assertFalse(outputConfig0.isSurroundApiWithQuotes());
      assertNull(outputConfig0.getLineEnding());
      
      Class<String> class0 = String.class;
      ModelBean modelBean0 = ModelGenerator.createModel(class0);
      assertNull(modelBean0.getDestroyMethod());
      assertFalse(modelBean0.isClientIdPropertyAddToWriter());
      assertNull(modelBean0.getTotalProperty());
      assertNull(modelBean0.getCreateMethod());
      assertNull(modelBean0.getReadMethod());
      assertNull(modelBean0.getIdProperty());
      assertEquals("json", modelBean0.getWriter());
      assertNull(modelBean0.getIdentifier());
      assertEquals("java.lang.String", modelBean0.getName());
      assertNull(modelBean0.getMessageProperty());
      assertFalse(modelBean0.isPaging());
      assertFalse(modelBean0.isDisablePagingParameters());
      assertNull(modelBean0.getRootProperty());
      assertNull(modelBean0.getSuccessProperty());
      assertTrue(modelBean0.isAutodetectTypes());
      assertNull(modelBean0.getUpdateMethod());
      assertNull(modelBean0.getClientIdProperty());
      assertEquals("json", modelBean0.getReader());
      assertNull(modelBean0.getVersionProperty());
      assertNull(modelBean0.getWriteAllFields());
      assertNotNull(modelBean0);
      
      OutputFormat outputFormat1 = OutputFormat.EXTJS5;
      String string0 = ModelGenerator.generateJavascript(modelBean0, outputFormat1, true);
      assertNull(modelBean0.getDestroyMethod());
      assertFalse(modelBean0.isClientIdPropertyAddToWriter());
      assertNull(modelBean0.getTotalProperty());
      assertNull(modelBean0.getCreateMethod());
      assertNull(modelBean0.getReadMethod());
      assertNull(modelBean0.getIdProperty());
      assertEquals("json", modelBean0.getWriter());
      assertNull(modelBean0.getIdentifier());
      assertEquals("java.lang.String", modelBean0.getName());
      assertNull(modelBean0.getMessageProperty());
      assertFalse(modelBean0.isPaging());
      assertFalse(modelBean0.isDisablePagingParameters());
      assertNull(modelBean0.getRootProperty());
      assertNull(modelBean0.getSuccessProperty());
      assertTrue(modelBean0.isAutodetectTypes());
      assertNull(modelBean0.getUpdateMethod());
      assertNull(modelBean0.getClientIdProperty());
      assertEquals("json", modelBean0.getReader());
      assertNull(modelBean0.getVersionProperty());
      assertNull(modelBean0.getWriteAllFields());
      assertSame(outputFormat1, outputFormat0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000000)
  public void test073()  throws Throwable  {
      Class<Object> class0 = Object.class;
      IncludeValidation includeValidation0 = IncludeValidation.BUILTIN;
      ModelBean modelBean0 = ModelGenerator.createModel(class0, includeValidation0);
      assertNull(modelBean0.getWriteAllFields());
      assertNull(modelBean0.getIdProperty());
      assertNull(modelBean0.getUpdateMethod());
      assertNull(modelBean0.getReadMethod());
      assertEquals("java.lang.Object", modelBean0.getName());
      assertNull(modelBean0.getClientIdProperty());
      assertNull(modelBean0.getCreateMethod());
      assertEquals("Ext.data.Model", modelBean0.getExtend());
      assertTrue(modelBean0.isAutodetectTypes());
      assertNull(modelBean0.getTotalProperty());
      assertNull(modelBean0.getDestroyMethod());
      assertFalse(modelBean0.isDisablePagingParameters());
      assertNull(modelBean0.getRootProperty());
      assertFalse(modelBean0.isClientIdPropertyAddToWriter());
      assertNull(modelBean0.getIdentifier());
      assertEquals("json", modelBean0.getWriter());
      assertNull(modelBean0.getSuccessProperty());
      assertFalse(modelBean0.isPaging());
      assertNull(modelBean0.getMessageProperty());
      assertEquals("json", modelBean0.getReader());
      assertNull(modelBean0.getVersionProperty());
      assertNotNull(modelBean0);
      
      HttpServletRequest httpServletRequest0 = mock(HttpServletRequest.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(httpServletRequest0).isAsyncSupported();
      doReturn((String) null).when(httpServletRequest0).getHeader(anyString());
      HttpServletRequestWrapper httpServletRequestWrapper0 = new HttpServletRequestWrapper(httpServletRequest0);
      assertNotNull(httpServletRequestWrapper0);
      
      boolean boolean0 = httpServletRequestWrapper0.isAsyncSupported();
      assertFalse(boolean0);
      
      HttpServletResponse httpServletResponse0 = mock(HttpServletResponse.class, new ViolatedAssumptionAnswer());
      doReturn((ServletOutputStream) null).when(httpServletResponse0).getOutputStream();
      HttpServletResponseWrapper httpServletResponseWrapper0 = new HttpServletResponseWrapper(httpServletResponse0);
      assertNotNull(httpServletResponseWrapper0);
      
      httpServletRequestWrapper0.login("modifiers", "org.assertj.core.internal.bytebuddy.asm.Advice$AssignReturned$ToFields$Handler");
      HttpServletResponseWrapper httpServletResponseWrapper1 = new HttpServletResponseWrapper(httpServletResponseWrapper0);
      assertFalse(httpServletResponseWrapper1.equals((Object)httpServletResponseWrapper0));
      assertNotNull(httpServletResponseWrapper1);
      
      ModelBean modelBean1 = new ModelBean();
      assertEquals("json", modelBean1.getWriter());
      assertFalse(modelBean1.isDisablePagingParameters());
      assertFalse(modelBean1.isClientIdPropertyAddToWriter());
      assertNull(modelBean1.getDestroyMethod());
      assertNull(modelBean1.getCreateMethod());
      assertNull(modelBean1.getIdentifier());
      assertNull(modelBean1.getName());
      assertNull(modelBean1.getIdProperty());
      assertNull(modelBean1.getTotalProperty());
      assertNull(modelBean1.getRootProperty());
      assertNull(modelBean1.getReadMethod());
      assertEquals("Ext.data.Model", modelBean1.getExtend());
      assertNull(modelBean1.getWriteAllFields());
      assertTrue(modelBean1.isAutodetectTypes());
      assertEquals("json", modelBean1.getReader());
      assertNull(modelBean1.getUpdateMethod());
      assertNull(modelBean1.getMessageProperty());
      assertFalse(modelBean1.isPaging());
      assertNull(modelBean1.getSuccessProperty());
      assertNull(modelBean1.getVersionProperty());
      assertNull(modelBean1.getClientIdProperty());
      assertFalse(modelBean1.equals((Object)modelBean0));
      assertNotNull(modelBean1);
      
      modelBean1.setClientIdProperty("k]UcmfyHol<}J&~ec");
      assertEquals("json", modelBean1.getWriter());
      assertFalse(modelBean1.isDisablePagingParameters());
      assertFalse(modelBean1.isClientIdPropertyAddToWriter());
      assertNull(modelBean1.getDestroyMethod());
      assertNull(modelBean1.getCreateMethod());
      assertNull(modelBean1.getIdentifier());
      assertNull(modelBean1.getName());
      assertNull(modelBean1.getIdProperty());
      assertNull(modelBean1.getTotalProperty());
      assertNull(modelBean1.getRootProperty());
      assertNull(modelBean1.getReadMethod());
      assertEquals("Ext.data.Model", modelBean1.getExtend());
      assertNull(modelBean1.getWriteAllFields());
      assertEquals("k]UcmfyHol<}J&~ec", modelBean1.getClientIdProperty());
      assertTrue(modelBean1.isAutodetectTypes());
      assertEquals("json", modelBean1.getReader());
      assertNull(modelBean1.getUpdateMethod());
      assertNull(modelBean1.getMessageProperty());
      assertFalse(modelBean1.isPaging());
      assertNull(modelBean1.getSuccessProperty());
      assertNull(modelBean1.getVersionProperty());
      assertNotSame(modelBean1, modelBean0);
      assertFalse(modelBean1.equals((Object)modelBean0));
      
      OutputFormat outputFormat0 = OutputFormat.TOUCH2;
      // Undeclared exception!
      try { 
        ModelGenerator.writeModel((HttpServletRequest) httpServletRequestWrapper0, (HttpServletResponse) httpServletResponseWrapper0, modelBean1, outputFormat0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("ch.rasc.extclassgenerator.ModelGenerator", e);
      }
  }

  @Test(timeout = 4000000)
  public void test074()  throws Throwable  {
      HttpServletResponse httpServletResponse0 = mock(HttpServletResponse.class, new ViolatedAssumptionAnswer());
      doReturn((ServletOutputStream) null).when(httpServletResponse0).getOutputStream();
      Class<ModelFieldBean> class0 = ModelFieldBean.class;
      IncludeValidation includeValidation0 = IncludeValidation.BUILTIN;
      EmailValidation emailValidation0 = new EmailValidation("boolean");
      assertEquals("boolean", emailValidation0.getField());
      assertEquals("email", emailValidation0.getType());
      assertNotNull(emailValidation0);
      
      ModelBean modelBean0 = ModelGenerator.createModel(class0, includeValidation0);
      assertEquals("Ext.data.Model", modelBean0.getExtend());
      assertNull(modelBean0.getVersionProperty());
      assertNull(modelBean0.getClientIdProperty());
      assertNull(modelBean0.getRootProperty());
      assertNull(modelBean0.getWriteAllFields());
      assertNull(modelBean0.getIdentifier());
      assertNull(modelBean0.getIdProperty());
      assertEquals("ch.rasc.extclassgenerator.ModelFieldBean", modelBean0.getName());
      assertTrue(modelBean0.isAutodetectTypes());
      assertNull(modelBean0.getSuccessProperty());
      assertFalse(modelBean0.isPaging());
      assertFalse(modelBean0.isDisablePagingParameters());
      assertNull(modelBean0.getReadMethod());
      assertFalse(modelBean0.isClientIdPropertyAddToWriter());
      assertNull(modelBean0.getTotalProperty());
      assertEquals("json", modelBean0.getWriter());
      assertNull(modelBean0.getDestroyMethod());
      assertNull(modelBean0.getUpdateMethod());
      assertEquals("json", modelBean0.getReader());
      assertNull(modelBean0.getCreateMethod());
      assertNull(modelBean0.getMessageProperty());
      assertNotNull(modelBean0);
      
      modelBean0.addValidation(emailValidation0);
      assertEquals("boolean", emailValidation0.getField());
      assertEquals("email", emailValidation0.getType());
      assertEquals("Ext.data.Model", modelBean0.getExtend());
      assertNull(modelBean0.getVersionProperty());
      assertNull(modelBean0.getClientIdProperty());
      assertNull(modelBean0.getRootProperty());
      assertNull(modelBean0.getWriteAllFields());
      assertNull(modelBean0.getIdentifier());
      assertNull(modelBean0.getIdProperty());
      assertEquals("ch.rasc.extclassgenerator.ModelFieldBean", modelBean0.getName());
      assertTrue(modelBean0.isAutodetectTypes());
      assertNull(modelBean0.getSuccessProperty());
      assertFalse(modelBean0.isPaging());
      assertFalse(modelBean0.isDisablePagingParameters());
      assertNull(modelBean0.getReadMethod());
      assertFalse(modelBean0.isClientIdPropertyAddToWriter());
      assertNull(modelBean0.getTotalProperty());
      assertEquals("json", modelBean0.getWriter());
      assertNull(modelBean0.getDestroyMethod());
      assertNull(modelBean0.getUpdateMethod());
      assertEquals("json", modelBean0.getReader());
      assertNull(modelBean0.getCreateMethod());
      assertNull(modelBean0.getMessageProperty());
      
      modelBean0.setCreateMethod("=E?QYWp>k$<_");
      assertEquals("Ext.data.Model", modelBean0.getExtend());
      assertNull(modelBean0.getVersionProperty());
      assertNull(modelBean0.getClientIdProperty());
      assertNull(modelBean0.getRootProperty());
      assertNull(modelBean0.getWriteAllFields());
      assertNull(modelBean0.getIdentifier());
      assertNull(modelBean0.getIdProperty());
      assertEquals("=E?QYWp>k$<_", modelBean0.getCreateMethod());
      assertEquals("ch.rasc.extclassgenerator.ModelFieldBean", modelBean0.getName());
      assertTrue(modelBean0.isAutodetectTypes());
      assertNull(modelBean0.getSuccessProperty());
      assertFalse(modelBean0.isPaging());
      assertFalse(modelBean0.isDisablePagingParameters());
      assertNull(modelBean0.getReadMethod());
      assertFalse(modelBean0.isClientIdPropertyAddToWriter());
      assertNull(modelBean0.getTotalProperty());
      assertEquals("json", modelBean0.getWriter());
      assertNull(modelBean0.getDestroyMethod());
      assertNull(modelBean0.getUpdateMethod());
      assertEquals("json", modelBean0.getReader());
      assertNull(modelBean0.getMessageProperty());
      
      HttpServletResponseWrapper httpServletResponseWrapper0 = new HttpServletResponseWrapper(httpServletResponse0);
      assertNotNull(httpServletResponseWrapper0);
      
      httpServletResponseWrapper0.setBufferSize((-93));
      OutputFormat outputFormat0 = OutputFormat.TOUCH2;
      HttpServletRequest httpServletRequest0 = mock(HttpServletRequest.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(httpServletRequest0).getHeader(anyString());
      HttpServletRequestWrapper httpServletRequestWrapper0 = new HttpServletRequestWrapper(httpServletRequest0);
      assertNotNull(httpServletRequestWrapper0);
      
      OutputFormat outputFormat1 = OutputFormat.EXTJS5;
      // Undeclared exception!
      try { 
        ModelGenerator.writeModel((HttpServletRequest) httpServletRequestWrapper0, (HttpServletResponse) httpServletResponseWrapper0, modelBean0, outputFormat1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("ch.rasc.extclassgenerator.ModelGenerator", e);
      }
  }

  @Test(timeout = 4000000)
  public void test075()  throws Throwable  {
      HttpServletRequest httpServletRequest0 = mock(HttpServletRequest.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(httpServletRequest0).isAsyncSupported();
      HttpServletRequestWrapper httpServletRequestWrapper0 = new HttpServletRequestWrapper(httpServletRequest0);
      assertNotNull(httpServletRequestWrapper0);
      
      HttpServletResponse httpServletResponse0 = mock(HttpServletResponse.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = httpServletRequestWrapper0.isAsyncSupported();
      assertTrue(boolean0);
      
      HttpServletResponseWrapper httpServletResponseWrapper0 = new HttpServletResponseWrapper(httpServletResponse0);
      assertNotNull(httpServletResponseWrapper0);
      
      ModelBean modelBean0 = new ModelBean();
      assertEquals("json", modelBean0.getWriter());
      assertNull(modelBean0.getIdentifier());
      assertFalse(modelBean0.isPaging());
      assertNull(modelBean0.getRootProperty());
      assertNull(modelBean0.getSuccessProperty());
      assertNull(modelBean0.getName());
      assertNull(modelBean0.getMessageProperty());
      assertNull(modelBean0.getVersionProperty());
      assertNull(modelBean0.getUpdateMethod());
      assertEquals("json", modelBean0.getReader());
      assertNull(modelBean0.getWriteAllFields());
      assertNull(modelBean0.getCreateMethod());
      assertNull(modelBean0.getIdProperty());
      assertNull(modelBean0.getReadMethod());
      assertNull(modelBean0.getClientIdProperty());
      assertTrue(modelBean0.isAutodetectTypes());
      assertNull(modelBean0.getTotalProperty());
      assertEquals("Ext.data.Model", modelBean0.getExtend());
      assertFalse(modelBean0.isClientIdPropertyAddToWriter());
      assertNull(modelBean0.getDestroyMethod());
      assertFalse(modelBean0.isDisablePagingParameters());
      assertNotNull(modelBean0);
      
      modelBean0.setMessageProperty("a-&Y.");
      assertEquals("json", modelBean0.getWriter());
      assertNull(modelBean0.getIdentifier());
      assertFalse(modelBean0.isPaging());
      assertNull(modelBean0.getRootProperty());
      assertNull(modelBean0.getSuccessProperty());
      assertNull(modelBean0.getName());
      assertEquals("a-&Y.", modelBean0.getMessageProperty());
      assertNull(modelBean0.getVersionProperty());
      assertNull(modelBean0.getUpdateMethod());
      assertEquals("json", modelBean0.getReader());
      assertNull(modelBean0.getWriteAllFields());
      assertNull(modelBean0.getCreateMethod());
      assertNull(modelBean0.getIdProperty());
      assertNull(modelBean0.getReadMethod());
      assertNull(modelBean0.getClientIdProperty());
      assertTrue(modelBean0.isAutodetectTypes());
      assertNull(modelBean0.getTotalProperty());
      assertEquals("Ext.data.Model", modelBean0.getExtend());
      assertFalse(modelBean0.isClientIdPropertyAddToWriter());
      assertNull(modelBean0.getDestroyMethod());
      assertFalse(modelBean0.isDisablePagingParameters());
      
      modelBean0.setClientIdProperty("h: !WlZO,k.DcuL");
      assertEquals("json", modelBean0.getWriter());
      assertNull(modelBean0.getIdentifier());
      assertFalse(modelBean0.isPaging());
      assertNull(modelBean0.getRootProperty());
      assertNull(modelBean0.getSuccessProperty());
      assertNull(modelBean0.getName());
      assertEquals("a-&Y.", modelBean0.getMessageProperty());
      assertNull(modelBean0.getVersionProperty());
      assertNull(modelBean0.getUpdateMethod());
      assertEquals("json", modelBean0.getReader());
      assertEquals("h: !WlZO,k.DcuL", modelBean0.getClientIdProperty());
      assertNull(modelBean0.getWriteAllFields());
      assertNull(modelBean0.getCreateMethod());
      assertNull(modelBean0.getIdProperty());
      assertNull(modelBean0.getReadMethod());
      assertTrue(modelBean0.isAutodetectTypes());
      assertNull(modelBean0.getTotalProperty());
      assertEquals("Ext.data.Model", modelBean0.getExtend());
      assertFalse(modelBean0.isClientIdPropertyAddToWriter());
      assertNull(modelBean0.getDestroyMethod());
      assertFalse(modelBean0.isDisablePagingParameters());
      
      OutputConfig outputConfig0 = new OutputConfig();
      assertFalse(outputConfig0.isSurroundApiWithQuotes());
      assertFalse(outputConfig0.isDebug());
      assertNull(outputConfig0.getIncludeValidation());
      assertNull(outputConfig0.getOutputFormat());
      assertFalse(outputConfig0.isUseSingleQuotes());
      assertNull(outputConfig0.getLineEnding());
      assertNotNull(outputConfig0);
      
      String string0 = ModelGenerator.generateJavascript(modelBean0, outputConfig0);
      assertEquals("json", modelBean0.getWriter());
      assertNull(modelBean0.getIdentifier());
      assertFalse(modelBean0.isPaging());
      assertNull(modelBean0.getRootProperty());
      assertNull(modelBean0.getSuccessProperty());
      assertNull(modelBean0.getName());
      assertEquals("a-&Y.", modelBean0.getMessageProperty());
      assertNull(modelBean0.getVersionProperty());
      assertNull(modelBean0.getUpdateMethod());
      assertEquals("json", modelBean0.getReader());
      assertEquals("h: !WlZO,k.DcuL", modelBean0.getClientIdProperty());
      assertNull(modelBean0.getWriteAllFields());
      assertNull(modelBean0.getCreateMethod());
      assertNull(modelBean0.getIdProperty());
      assertNull(modelBean0.getReadMethod());
      assertTrue(modelBean0.isAutodetectTypes());
      assertNull(modelBean0.getTotalProperty());
      assertEquals("Ext.data.Model", modelBean0.getExtend());
      assertFalse(modelBean0.isClientIdPropertyAddToWriter());
      assertNull(modelBean0.getDestroyMethod());
      assertFalse(modelBean0.isDisablePagingParameters());
      assertFalse(outputConfig0.isSurroundApiWithQuotes());
      assertFalse(outputConfig0.isDebug());
      assertNull(outputConfig0.getIncludeValidation());
      assertNull(outputConfig0.getOutputFormat());
      assertFalse(outputConfig0.isUseSingleQuotes());
      assertNull(outputConfig0.getLineEnding());
      assertNotNull(string0);
      assertEquals("Ext.define(\"null\",{extend:\"Ext.data.Model\",config:{fields:[],proxy:{type:\"direct\",reader:{messageProperty:\"a-&Y.\"}}}});", string0);
      
      String string1 = ModelGenerator.generateJavascript(modelBean0, outputConfig0);
      assertEquals("json", modelBean0.getWriter());
      assertNull(modelBean0.getIdentifier());
      assertFalse(modelBean0.isPaging());
      assertNull(modelBean0.getRootProperty());
      assertNull(modelBean0.getSuccessProperty());
      assertNull(modelBean0.getName());
      assertEquals("a-&Y.", modelBean0.getMessageProperty());
      assertNull(modelBean0.getVersionProperty());
      assertNull(modelBean0.getUpdateMethod());
      assertEquals("json", modelBean0.getReader());
      assertEquals("h: !WlZO,k.DcuL", modelBean0.getClientIdProperty());
      assertNull(modelBean0.getWriteAllFields());
      assertNull(modelBean0.getCreateMethod());
      assertNull(modelBean0.getIdProperty());
      assertNull(modelBean0.getReadMethod());
      assertTrue(modelBean0.isAutodetectTypes());
      assertNull(modelBean0.getTotalProperty());
      assertEquals("Ext.data.Model", modelBean0.getExtend());
      assertFalse(modelBean0.isClientIdPropertyAddToWriter());
      assertNull(modelBean0.getDestroyMethod());
      assertFalse(modelBean0.isDisablePagingParameters());
      assertFalse(outputConfig0.isSurroundApiWithQuotes());
      assertFalse(outputConfig0.isDebug());
      assertNull(outputConfig0.getIncludeValidation());
      assertNull(outputConfig0.getOutputFormat());
      assertFalse(outputConfig0.isUseSingleQuotes());
      assertNull(outputConfig0.getLineEnding());
      assertNotNull(string1);
      assertEquals("Ext.define(\"null\",{extend:\"Ext.data.Model\",config:{fields:[],proxy:{type:\"direct\",reader:{messageProperty:\"a-&Y.\"}}}});", string1);
      
      HttpServletRequestWrapper httpServletRequestWrapper1 = new HttpServletRequestWrapper(httpServletRequestWrapper0);
      assertFalse(httpServletRequestWrapper1.equals((Object)httpServletRequestWrapper0));
      assertNotNull(httpServletRequestWrapper1);
      
      System.setCurrentTimeMillis((-2147483648L));
  }

  @Test(timeout = 4000000)
  public void test076()  throws Throwable  {
      OutputConfig outputConfig0 = new OutputConfig();
      assertNull(outputConfig0.getIncludeValidation());
      assertNull(outputConfig0.getOutputFormat());
      assertFalse(outputConfig0.isSurroundApiWithQuotes());
      assertNull(outputConfig0.getLineEnding());
      assertFalse(outputConfig0.isUseSingleQuotes());
      assertFalse(outputConfig0.isDebug());
      assertNotNull(outputConfig0);
      
      Class<Object> class0 = Object.class;
      ModelBean modelBean0 = ModelGenerator.createModel(class0);
      assertNull(modelBean0.getWriteAllFields());
      assertNull(modelBean0.getReadMethod());
      assertTrue(modelBean0.isAutodetectTypes());
      assertNull(modelBean0.getIdProperty());
      assertEquals("Ext.data.Model", modelBean0.getExtend());
      assertNull(modelBean0.getClientIdProperty());
      assertEquals("java.lang.Object", modelBean0.getName());
      assertNull(modelBean0.getDestroyMethod());
      assertFalse(modelBean0.isPaging());
      assertFalse(modelBean0.isDisablePagingParameters());
      assertFalse(modelBean0.isClientIdPropertyAddToWriter());
      assertEquals("json", modelBean0.getWriter());
      assertNull(modelBean0.getIdentifier());
      assertNull(modelBean0.getSuccessProperty());
      assertNull(modelBean0.getRootProperty());
      assertNull(modelBean0.getMessageProperty());
      assertNull(modelBean0.getTotalProperty());
      assertNull(modelBean0.getVersionProperty());
      assertNull(modelBean0.getCreateMethod());
      assertEquals("json", modelBean0.getReader());
      assertNull(modelBean0.getUpdateMethod());
      assertNotNull(modelBean0);
      
      modelBean0.setIdentifier("defaultValue");
      assertNull(modelBean0.getWriteAllFields());
      assertNull(modelBean0.getReadMethod());
      assertTrue(modelBean0.isAutodetectTypes());
      assertEquals("defaultValue", modelBean0.getIdentifier());
      assertNull(modelBean0.getIdProperty());
      assertEquals("Ext.data.Model", modelBean0.getExtend());
      assertNull(modelBean0.getClientIdProperty());
      assertEquals("java.lang.Object", modelBean0.getName());
      assertNull(modelBean0.getDestroyMethod());
      assertFalse(modelBean0.isPaging());
      assertFalse(modelBean0.isDisablePagingParameters());
      assertFalse(modelBean0.isClientIdPropertyAddToWriter());
      assertEquals("json", modelBean0.getWriter());
      assertNull(modelBean0.getSuccessProperty());
      assertNull(modelBean0.getRootProperty());
      assertNull(modelBean0.getMessageProperty());
      assertNull(modelBean0.getTotalProperty());
      assertNull(modelBean0.getVersionProperty());
      assertNull(modelBean0.getCreateMethod());
      assertEquals("json", modelBean0.getReader());
      assertNull(modelBean0.getUpdateMethod());
      
      OutputFormat outputFormat0 = OutputFormat.EXTJS5;
      String string0 = ModelGenerator.generateJavascript(modelBean0, outputFormat0, true);
      assertNull(modelBean0.getWriteAllFields());
      assertNull(modelBean0.getReadMethod());
      assertTrue(modelBean0.isAutodetectTypes());
      assertEquals("defaultValue", modelBean0.getIdentifier());
      assertNull(modelBean0.getIdProperty());
      assertEquals("Ext.data.Model", modelBean0.getExtend());
      assertNull(modelBean0.getClientIdProperty());
      assertEquals("java.lang.Object", modelBean0.getName());
      assertNull(modelBean0.getDestroyMethod());
      assertFalse(modelBean0.isPaging());
      assertFalse(modelBean0.isDisablePagingParameters());
      assertFalse(modelBean0.isClientIdPropertyAddToWriter());
      assertEquals("json", modelBean0.getWriter());
      assertNull(modelBean0.getSuccessProperty());
      assertNull(modelBean0.getRootProperty());
      assertNull(modelBean0.getMessageProperty());
      assertNull(modelBean0.getTotalProperty());
      assertNull(modelBean0.getVersionProperty());
      assertNull(modelBean0.getCreateMethod());
      assertEquals("json", modelBean0.getReader());
      assertNull(modelBean0.getUpdateMethod());
      assertNotNull(string0);
      assertEquals("Ext.define(\"java.lang.Object\",\r\n{\n  extend : \"Ext.data.Model\",\n  identifier : \"defaultValue\",\n  fields : [ ]\n});", string0);
  }

  @Test(timeout = 4000000)
  public void test077()  throws Throwable  {
      HttpServletRequest httpServletRequest0 = mock(HttpServletRequest.class, new ViolatedAssumptionAnswer());
      doReturn("NODE_BY_BEGIN_POSITION").when(httpServletRequest0).getContentType();
      doReturn((-898L)).when(httpServletRequest0).getDateHeader(anyString());
      doReturn("SYMBOL_RESOLVER_KEY", "SYMBOL_RESOLVER_KEY").when(httpServletRequest0).getHeader(anyString());
      HttpServletRequestWrapper httpServletRequestWrapper0 = new HttpServletRequestWrapper(httpServletRequest0);
      assertNotNull(httpServletRequestWrapper0);
      
      ServletOutputStream servletOutputStream0 = mock(ServletOutputStream.class, new ViolatedAssumptionAnswer());
      HttpServletResponse httpServletResponse0 = mock(HttpServletResponse.class, new ViolatedAssumptionAnswer());
      doReturn(servletOutputStream0, servletOutputStream0).when(httpServletResponse0).getOutputStream();
      HttpServletResponseWrapper httpServletResponseWrapper0 = new HttpServletResponseWrapper(httpServletResponse0);
      assertNotNull(httpServletResponseWrapper0);
      
      ServletOutputStream servletOutputStream1 = httpServletResponseWrapper0.getOutputStream();
      assertSame(servletOutputStream1, servletOutputStream0);
      assertNotNull(servletOutputStream1);
      
      long long0 = httpServletRequestWrapper0.getDateHeader("SYMBOL_RESOLVER_KEY");
      assertEquals((-898L), long0);
      
      ModelBean modelBean0 = new ModelBean();
      assertNull(modelBean0.getMessageProperty());
      assertNull(modelBean0.getClientIdProperty());
      assertNull(modelBean0.getVersionProperty());
      assertNull(modelBean0.getRootProperty());
      assertNull(modelBean0.getWriteAllFields());
      assertNull(modelBean0.getIdentifier());
      assertFalse(modelBean0.isDisablePagingParameters());
      assertEquals("Ext.data.Model", modelBean0.getExtend());
      assertFalse(modelBean0.isPaging());
      assertNull(modelBean0.getSuccessProperty());
      assertNull(modelBean0.getReadMethod());
      assertTrue(modelBean0.isAutodetectTypes());
      assertNull(modelBean0.getName());
      assertFalse(modelBean0.isClientIdPropertyAddToWriter());
      assertNull(modelBean0.getTotalProperty());
      assertNull(modelBean0.getDestroyMethod());
      assertEquals("json", modelBean0.getWriter());
      assertNull(modelBean0.getIdProperty());
      assertNull(modelBean0.getUpdateMethod());
      assertEquals("json", modelBean0.getReader());
      assertNull(modelBean0.getCreateMethod());
      assertNotNull(modelBean0);
      
      OutputFormat outputFormat0 = OutputFormat.TOUCH2;
      HttpServletRequestWrapper httpServletRequestWrapper1 = new HttpServletRequestWrapper(httpServletRequestWrapper0);
      assertFalse(httpServletRequestWrapper1.equals((Object)httpServletRequestWrapper0));
      assertNotNull(httpServletRequestWrapper1);
      
      String string0 = httpServletRequestWrapper1.getContentType();
      assertNotSame(httpServletRequestWrapper0, httpServletRequestWrapper1);
      assertNotSame(httpServletRequestWrapper1, httpServletRequestWrapper0);
      assertFalse(httpServletRequestWrapper0.equals((Object)httpServletRequestWrapper1));
      assertFalse(httpServletRequestWrapper1.equals((Object)httpServletRequestWrapper0));
      assertNotNull(string0);
      assertEquals("NODE_BY_BEGIN_POSITION", string0);
      
      String string1 = httpServletRequestWrapper1.getHeader("4c_~e");
      assertNotSame(httpServletRequestWrapper0, httpServletRequestWrapper1);
      assertNotSame(httpServletRequestWrapper1, httpServletRequestWrapper0);
      assertFalse(httpServletRequestWrapper0.equals((Object)httpServletRequestWrapper1));
      assertFalse(httpServletRequestWrapper1.equals((Object)httpServletRequestWrapper0));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("SYMBOL_RESOLVER_KEY", string1);
      
      ModelGenerator.writeModel((HttpServletRequest) httpServletRequestWrapper0, (HttpServletResponse) httpServletResponseWrapper0, modelBean0, outputFormat0, true);
      assertNull(modelBean0.getMessageProperty());
      assertNull(modelBean0.getClientIdProperty());
      assertNull(modelBean0.getVersionProperty());
      assertNull(modelBean0.getRootProperty());
      assertNull(modelBean0.getWriteAllFields());
      assertNull(modelBean0.getIdentifier());
      assertFalse(modelBean0.isDisablePagingParameters());
      assertEquals("Ext.data.Model", modelBean0.getExtend());
      assertFalse(modelBean0.isPaging());
      assertNull(modelBean0.getSuccessProperty());
      assertNull(modelBean0.getReadMethod());
      assertTrue(modelBean0.isAutodetectTypes());
      assertNull(modelBean0.getName());
      assertFalse(modelBean0.isClientIdPropertyAddToWriter());
      assertNull(modelBean0.getTotalProperty());
      assertNull(modelBean0.getDestroyMethod());
      assertEquals("json", modelBean0.getWriter());
      assertNull(modelBean0.getIdProperty());
      assertNull(modelBean0.getUpdateMethod());
      assertEquals("json", modelBean0.getReader());
      assertNull(modelBean0.getCreateMethod());
      assertNotSame(httpServletRequestWrapper0, httpServletRequestWrapper1);
      assertFalse(httpServletRequestWrapper0.equals((Object)httpServletRequestWrapper1));
      
      Class<AssertStmt> class0 = AssertStmt.class;
      ModelBean modelBean1 = ModelGenerator.createModel(class0);
      assertFalse(modelBean1.isPaging());
      assertEquals("com.github.javaparser.ast.stmt.AssertStmt", modelBean1.getName());
      assertNull(modelBean1.getMessageProperty());
      assertFalse(modelBean1.isDisablePagingParameters());
      assertNull(modelBean1.getRootProperty());
      assertEquals("json", modelBean1.getWriter());
      assertNull(modelBean1.getIdentifier());
      assertNull(modelBean1.getVersionProperty());
      assertNull(modelBean1.getCreateMethod());
      assertNull(modelBean1.getDestroyMethod());
      assertNull(modelBean1.getTotalProperty());
      assertFalse(modelBean1.isClientIdPropertyAddToWriter());
      assertNull(modelBean1.getUpdateMethod());
      assertNull(modelBean1.getIdProperty());
      assertEquals("json", modelBean1.getReader());
      assertNull(modelBean1.getWriteAllFields());
      assertNull(modelBean1.getReadMethod());
      assertEquals("Ext.data.Model", modelBean1.getExtend());
      assertNull(modelBean1.getClientIdProperty());
      assertTrue(modelBean1.isAutodetectTypes());
      assertNull(modelBean1.getSuccessProperty());
      assertNotSame(modelBean1, modelBean0);
      assertFalse(modelBean1.equals((Object)modelBean0));
      assertNotNull(modelBean1);
  }

  @Test(timeout = 4000000)
  public void test078()  throws Throwable  {
      String string0 = ModelGenerator.trimToNull("proxy");
      assertNotNull(string0);
      assertEquals("proxy", string0);
      
      Class<Object> class0 = Object.class;
      OutputFormat outputFormat0 = OutputFormat.EXTJS5;
      String string1 = ModelGenerator.generateJavascript(class0, outputFormat0, true);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("Ext.define(\"java.lang.Object\",\r\n{\n  extend : \"Ext.data.Model\",\n  fields : [ ]\n});", string1);
      
      ModelBean modelBean0 = new ModelBean();
      assertNull(modelBean0.getMessageProperty());
      assertFalse(modelBean0.isPaging());
      assertEquals("Ext.data.Model", modelBean0.getExtend());
      assertNull(modelBean0.getClientIdProperty());
      assertNull(modelBean0.getRootProperty());
      assertTrue(modelBean0.isAutodetectTypes());
      assertNull(modelBean0.getSuccessProperty());
      assertNull(modelBean0.getIdProperty());
      assertNull(modelBean0.getReadMethod());
      assertEquals("json", modelBean0.getWriter());
      assertNull(modelBean0.getIdentifier());
      assertFalse(modelBean0.isDisablePagingParameters());
      assertNull(modelBean0.getName());
      assertFalse(modelBean0.isClientIdPropertyAddToWriter());
      assertNull(modelBean0.getDestroyMethod());
      assertNull(modelBean0.getTotalProperty());
      assertNull(modelBean0.getUpdateMethod());
      assertNull(modelBean0.getWriteAllFields());
      assertNull(modelBean0.getCreateMethod());
      assertNull(modelBean0.getVersionProperty());
      assertEquals("json", modelBean0.getReader());
      assertNotNull(modelBean0);
      
      ModelFieldBean modelFieldBean0 = new ModelFieldBean("Ext.define(\"java.lang.Object\",\r\n{\n  extend : \"Ext.data.Model\",\n  fields : [ ]\n});", "clazz must not be null");
      assertNull(modelFieldBean0.getPersist());
      assertEquals("Ext.define(\"java.lang.Object\",\r\n{\n  extend : \"Ext.data.Model\",\n  fields : [ ]\n});", modelFieldBean0.getName());
      assertNull(modelFieldBean0.getDateFormat());
      assertNull(modelFieldBean0.getAllowBlank());
      assertNull(modelFieldBean0.getCritical());
      assertEquals("clazz must not be null", modelFieldBean0.getType());
      assertNull(modelFieldBean0.getConvert());
      assertNull(modelFieldBean0.getUnique());
      assertNull(modelFieldBean0.getUseNull());
      assertNull(modelFieldBean0.getMapping());
      assertNull(modelFieldBean0.getModelType());
      assertNull(modelFieldBean0.getAllowNull());
      assertNull(modelFieldBean0.getCalculate());
      assertNotNull(modelFieldBean0);
      
      modelBean0.addField(modelFieldBean0);
      assertNull(modelBean0.getMessageProperty());
      assertFalse(modelBean0.isPaging());
      assertEquals("Ext.data.Model", modelBean0.getExtend());
      assertNull(modelBean0.getClientIdProperty());
      assertNull(modelBean0.getRootProperty());
      assertTrue(modelBean0.isAutodetectTypes());
      assertNull(modelBean0.getSuccessProperty());
      assertNull(modelBean0.getIdProperty());
      assertNull(modelBean0.getReadMethod());
      assertEquals("json", modelBean0.getWriter());
      assertNull(modelBean0.getIdentifier());
      assertFalse(modelBean0.isDisablePagingParameters());
      assertNull(modelBean0.getName());
      assertFalse(modelBean0.isClientIdPropertyAddToWriter());
      assertNull(modelBean0.getDestroyMethod());
      assertNull(modelBean0.getTotalProperty());
      assertNull(modelBean0.getUpdateMethod());
      assertNull(modelBean0.getWriteAllFields());
      assertNull(modelBean0.getCreateMethod());
      assertNull(modelBean0.getVersionProperty());
      assertEquals("json", modelBean0.getReader());
      assertNull(modelFieldBean0.getPersist());
      assertEquals("Ext.define(\"java.lang.Object\",\r\n{\n  extend : \"Ext.data.Model\",\n  fields : [ ]\n});", modelFieldBean0.getName());
      assertNull(modelFieldBean0.getDateFormat());
      assertNull(modelFieldBean0.getAllowBlank());
      assertNull(modelFieldBean0.getCritical());
      assertEquals("clazz must not be null", modelFieldBean0.getType());
      assertNull(modelFieldBean0.getConvert());
      assertNull(modelFieldBean0.getUnique());
      assertNull(modelFieldBean0.getUseNull());
      assertNull(modelFieldBean0.getMapping());
      assertNull(modelFieldBean0.getModelType());
      assertNull(modelFieldBean0.getAllowNull());
      assertNull(modelFieldBean0.getCalculate());
      
      OutputConfig outputConfig0 = new OutputConfig();
      assertFalse(outputConfig0.isUseSingleQuotes());
      assertNull(outputConfig0.getLineEnding());
      assertNull(outputConfig0.getIncludeValidation());
      assertFalse(outputConfig0.isSurroundApiWithQuotes());
      assertFalse(outputConfig0.isDebug());
      assertNull(outputConfig0.getOutputFormat());
      assertNotNull(outputConfig0);
      
      LineEnding lineEnding0 = LineEnding.SYSTEM;
      outputConfig0.setLineEnding(lineEnding0);
      assertEquals(LineEnding.SYSTEM, outputConfig0.getLineEnding());
      assertFalse(outputConfig0.isUseSingleQuotes());
      assertNull(outputConfig0.getIncludeValidation());
      assertFalse(outputConfig0.isSurroundApiWithQuotes());
      assertFalse(outputConfig0.isDebug());
      assertNull(outputConfig0.getOutputFormat());
      
      String string2 = ModelGenerator.generateJavascript(modelBean0, outputConfig0);
      assertNull(modelBean0.getMessageProperty());
      assertFalse(modelBean0.isPaging());
      assertEquals("Ext.data.Model", modelBean0.getExtend());
      assertNull(modelBean0.getClientIdProperty());
      assertNull(modelBean0.getRootProperty());
      assertTrue(modelBean0.isAutodetectTypes());
      assertNull(modelBean0.getSuccessProperty());
      assertNull(modelBean0.getIdProperty());
      assertNull(modelBean0.getReadMethod());
      assertEquals("json", modelBean0.getWriter());
      assertNull(modelBean0.getIdentifier());
      assertFalse(modelBean0.isDisablePagingParameters());
      assertNull(modelBean0.getName());
      assertFalse(modelBean0.isClientIdPropertyAddToWriter());
      assertNull(modelBean0.getDestroyMethod());
      assertNull(modelBean0.getTotalProperty());
      assertNull(modelBean0.getUpdateMethod());
      assertNull(modelBean0.getWriteAllFields());
      assertNull(modelBean0.getCreateMethod());
      assertNull(modelBean0.getVersionProperty());
      assertEquals("json", modelBean0.getReader());
      assertEquals(LineEnding.SYSTEM, outputConfig0.getLineEnding());
      assertFalse(outputConfig0.isUseSingleQuotes());
      assertNull(outputConfig0.getIncludeValidation());
      assertFalse(outputConfig0.isSurroundApiWithQuotes());
      assertFalse(outputConfig0.isDebug());
      assertNull(outputConfig0.getOutputFormat());
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("Ext.define(\"null\",{extend:\"Ext.data.Model\",config:{fields:[{name:\"Ext.define(\\\"java.lang.Object\\\",\\r\\n{\\n  extend : \\\"Ext.data.Model\\\",\\n  fields : [ ]\\n});\",type:\"clazz must not be null\"}]}});", string2);
      
      HttpServletRequestWrapper httpServletRequestWrapper0 = null;
      try {
        httpServletRequestWrapper0 = new HttpServletRequestWrapper((HttpServletRequest) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Request cannot be null
         //
         verifyException("javax.servlet.ServletRequestWrapper", e);
      }
  }

  @Test(timeout = 4000000)
  public void test079()  throws Throwable  {
      ModelBean modelBean0 = new ModelBean();
      assertFalse(modelBean0.isPaging());
      assertNull(modelBean0.getVersionProperty());
      assertFalse(modelBean0.isDisablePagingParameters());
      assertNull(modelBean0.getMessageProperty());
      assertNull(modelBean0.getUpdateMethod());
      assertNull(modelBean0.getWriteAllFields());
      assertNull(modelBean0.getReadMethod());
      assertEquals("json", modelBean0.getReader());
      assertTrue(modelBean0.isAutodetectTypes());
      assertNull(modelBean0.getClientIdProperty());
      assertNull(modelBean0.getSuccessProperty());
      assertEquals("Ext.data.Model", modelBean0.getExtend());
      assertFalse(modelBean0.isClientIdPropertyAddToWriter());
      assertNull(modelBean0.getTotalProperty());
      assertNull(modelBean0.getDestroyMethod());
      assertNull(modelBean0.getName());
      assertNull(modelBean0.getCreateMethod());
      assertNull(modelBean0.getIdProperty());
      assertEquals("json", modelBean0.getWriter());
      assertNull(modelBean0.getRootProperty());
      assertNull(modelBean0.getIdentifier());
      assertNotNull(modelBean0);
      
      Class<String> class0 = String.class;
      BelongsToAssociation belongsToAssociation0 = new BelongsToAssociation(class0);
      assertNull(belongsToAssociation0.getSetterName());
      assertNull(belongsToAssociation0.getForeignKey());
      assertNull(belongsToAssociation0.getInstanceName());
      assertEquals("java.lang.String", belongsToAssociation0.getModel());
      assertEquals("belongsTo", belongsToAssociation0.getType());
      assertNull(belongsToAssociation0.getPrimaryKey());
      assertNull(belongsToAssociation0.getAssociationKey());
      assertNull(belongsToAssociation0.getGetterName());
      assertNotNull(belongsToAssociation0);
      
      modelBean0.addAssociation(belongsToAssociation0);
      assertFalse(modelBean0.isPaging());
      assertNull(modelBean0.getVersionProperty());
      assertFalse(modelBean0.isDisablePagingParameters());
      assertNull(modelBean0.getMessageProperty());
      assertNull(modelBean0.getUpdateMethod());
      assertNull(modelBean0.getWriteAllFields());
      assertNull(modelBean0.getReadMethod());
      assertEquals("json", modelBean0.getReader());
      assertTrue(modelBean0.isAutodetectTypes());
      assertNull(modelBean0.getClientIdProperty());
      assertNull(modelBean0.getSuccessProperty());
      assertEquals("Ext.data.Model", modelBean0.getExtend());
      assertFalse(modelBean0.isClientIdPropertyAddToWriter());
      assertNull(modelBean0.getTotalProperty());
      assertNull(modelBean0.getDestroyMethod());
      assertNull(modelBean0.getName());
      assertNull(modelBean0.getCreateMethod());
      assertNull(modelBean0.getIdProperty());
      assertEquals("json", modelBean0.getWriter());
      assertNull(modelBean0.getRootProperty());
      assertNull(modelBean0.getIdentifier());
      assertNull(belongsToAssociation0.getSetterName());
      assertNull(belongsToAssociation0.getForeignKey());
      assertNull(belongsToAssociation0.getInstanceName());
      assertEquals("java.lang.String", belongsToAssociation0.getModel());
      assertEquals("belongsTo", belongsToAssociation0.getType());
      assertNull(belongsToAssociation0.getPrimaryKey());
      assertNull(belongsToAssociation0.getAssociationKey());
      assertNull(belongsToAssociation0.getGetterName());
      
      OutputConfig outputConfig0 = new OutputConfig();
      assertNull(outputConfig0.getIncludeValidation());
      assertNull(outputConfig0.getOutputFormat());
      assertFalse(outputConfig0.isUseSingleQuotes());
      assertNull(outputConfig0.getLineEnding());
      assertFalse(outputConfig0.isSurroundApiWithQuotes());
      assertFalse(outputConfig0.isDebug());
      assertNotNull(outputConfig0);
      
      String string0 = ModelGenerator.generateJavascript(modelBean0, outputConfig0);
      assertFalse(modelBean0.isPaging());
      assertNull(modelBean0.getVersionProperty());
      assertFalse(modelBean0.isDisablePagingParameters());
      assertNull(modelBean0.getMessageProperty());
      assertNull(modelBean0.getUpdateMethod());
      assertNull(modelBean0.getWriteAllFields());
      assertNull(modelBean0.getReadMethod());
      assertEquals("json", modelBean0.getReader());
      assertTrue(modelBean0.isAutodetectTypes());
      assertNull(modelBean0.getClientIdProperty());
      assertNull(modelBean0.getSuccessProperty());
      assertEquals("Ext.data.Model", modelBean0.getExtend());
      assertFalse(modelBean0.isClientIdPropertyAddToWriter());
      assertNull(modelBean0.getTotalProperty());
      assertNull(modelBean0.getDestroyMethod());
      assertNull(modelBean0.getName());
      assertNull(modelBean0.getCreateMethod());
      assertNull(modelBean0.getIdProperty());
      assertEquals("json", modelBean0.getWriter());
      assertNull(modelBean0.getRootProperty());
      assertNull(modelBean0.getIdentifier());
      assertNull(outputConfig0.getIncludeValidation());
      assertNull(outputConfig0.getOutputFormat());
      assertFalse(outputConfig0.isUseSingleQuotes());
      assertNull(outputConfig0.getLineEnding());
      assertFalse(outputConfig0.isSurroundApiWithQuotes());
      assertFalse(outputConfig0.isDebug());
      assertNotNull(string0);
  }

  @Test(timeout = 4000000)
  public void test080()  throws Throwable  {
      HttpServletRequest httpServletRequest0 = mock(HttpServletRequest.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(httpServletRequest0).getHeader(anyString());
      HttpServletRequestWrapper httpServletRequestWrapper0 = new HttpServletRequestWrapper(httpServletRequest0);
      assertNotNull(httpServletRequestWrapper0);
      
      HttpServletResponse httpServletResponse0 = mock(HttpServletResponse.class, new ViolatedAssumptionAnswer());
      doReturn((ServletOutputStream) null).when(httpServletResponse0).getOutputStream();
      HttpServletResponseWrapper httpServletResponseWrapper0 = new HttpServletResponseWrapper(httpServletResponse0);
      assertNotNull(httpServletResponseWrapper0);
      
      Class<ModelFieldBean> class0 = ModelFieldBean.class;
      OutputFormat outputFormat0 = OutputFormat.EXTJS4;
      // Undeclared exception!
      try { 
        ModelGenerator.writeModel((HttpServletRequest) httpServletRequestWrapper0, (HttpServletResponse) httpServletResponseWrapper0, (Class<?>) class0, outputFormat0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("ch.rasc.extclassgenerator.ModelGenerator", e);
      }
  }

  @Test(timeout = 4000000)
  public void test081()  throws Throwable  {
      Class<Object> class0 = Object.class;
      ModelBean modelBean0 = ModelGenerator.createModel(class0);
      assertNull(modelBean0.getDestroyMethod());
      assertFalse(modelBean0.isClientIdPropertyAddToWriter());
      assertNull(modelBean0.getTotalProperty());
      assertEquals("json", modelBean0.getReader());
      assertNull(modelBean0.getIdProperty());
      assertNull(modelBean0.getWriteAllFields());
      assertNull(modelBean0.getUpdateMethod());
      assertNull(modelBean0.getCreateMethod());
      assertNull(modelBean0.getMessageProperty());
      assertFalse(modelBean0.isPaging());
      assertFalse(modelBean0.isDisablePagingParameters());
      assertNull(modelBean0.getRootProperty());
      assertNull(modelBean0.getVersionProperty());
      assertEquals("json", modelBean0.getWriter());
      assertNull(modelBean0.getIdentifier());
      assertNull(modelBean0.getReadMethod());
      assertTrue(modelBean0.isAutodetectTypes());
      assertNull(modelBean0.getClientIdProperty());
      assertEquals("Ext.data.Model", modelBean0.getExtend());
      assertEquals("java.lang.Object", modelBean0.getName());
      assertNull(modelBean0.getSuccessProperty());
      assertNotNull(modelBean0);
      
      OutputFormat outputFormat0 = OutputFormat.EXTJS5;
      String string0 = ModelGenerator.generateJavascript(modelBean0, outputFormat0, true);
      assertNull(modelBean0.getDestroyMethod());
      assertFalse(modelBean0.isClientIdPropertyAddToWriter());
      assertNull(modelBean0.getTotalProperty());
      assertEquals("json", modelBean0.getReader());
      assertNull(modelBean0.getIdProperty());
      assertNull(modelBean0.getWriteAllFields());
      assertNull(modelBean0.getUpdateMethod());
      assertNull(modelBean0.getCreateMethod());
      assertNull(modelBean0.getMessageProperty());
      assertFalse(modelBean0.isPaging());
      assertFalse(modelBean0.isDisablePagingParameters());
      assertNull(modelBean0.getRootProperty());
      assertNull(modelBean0.getVersionProperty());
      assertEquals("json", modelBean0.getWriter());
      assertNull(modelBean0.getIdentifier());
      assertNull(modelBean0.getReadMethod());
      assertTrue(modelBean0.isAutodetectTypes());
      assertNull(modelBean0.getClientIdProperty());
      assertEquals("Ext.data.Model", modelBean0.getExtend());
      assertEquals("java.lang.Object", modelBean0.getName());
      assertNull(modelBean0.getSuccessProperty());
      assertNotNull(string0);
  }

  @Test(timeout = 4000000)
  public void test082()  throws Throwable  {
      Class<ModelFieldBean> class0 = ModelFieldBean.class;
      ModelBean modelBean0 = ModelGenerator.createModel(class0);
      assertNull(modelBean0.getIdentifier());
      assertNull(modelBean0.getSuccessProperty());
      assertFalse(modelBean0.isDisablePagingParameters());
      assertNull(modelBean0.getRootProperty());
      assertEquals("json", modelBean0.getWriter());
      assertNull(modelBean0.getVersionProperty());
      assertEquals("Ext.data.Model", modelBean0.getExtend());
      assertFalse(modelBean0.isClientIdPropertyAddToWriter());
      assertNull(modelBean0.getClientIdProperty());
      assertNull(modelBean0.getReadMethod());
      assertTrue(modelBean0.isAutodetectTypes());
      assertFalse(modelBean0.isPaging());
      assertNull(modelBean0.getCreateMethod());
      assertEquals("ch.rasc.extclassgenerator.ModelFieldBean", modelBean0.getName());
      assertEquals("json", modelBean0.getReader());
      assertNull(modelBean0.getUpdateMethod());
      assertNull(modelBean0.getWriteAllFields());
      assertNull(modelBean0.getDestroyMethod());
      assertNull(modelBean0.getIdProperty());
      assertNull(modelBean0.getMessageProperty());
      assertNull(modelBean0.getTotalProperty());
      assertNotNull(modelBean0);
      
      OutputFormat outputFormat0 = OutputFormat.EXTJS4;
      modelBean0.setIdProperty("mapping");
      assertNull(modelBean0.getIdentifier());
      assertNull(modelBean0.getSuccessProperty());
      assertFalse(modelBean0.isDisablePagingParameters());
      assertNull(modelBean0.getRootProperty());
      assertEquals("json", modelBean0.getWriter());
      assertNull(modelBean0.getVersionProperty());
      assertEquals("Ext.data.Model", modelBean0.getExtend());
      assertFalse(modelBean0.isClientIdPropertyAddToWriter());
      assertNull(modelBean0.getClientIdProperty());
      assertNull(modelBean0.getReadMethod());
      assertTrue(modelBean0.isAutodetectTypes());
      assertFalse(modelBean0.isPaging());
      assertEquals("mapping", modelBean0.getIdProperty());
      assertNull(modelBean0.getCreateMethod());
      assertEquals("ch.rasc.extclassgenerator.ModelFieldBean", modelBean0.getName());
      assertEquals("json", modelBean0.getReader());
      assertNull(modelBean0.getUpdateMethod());
      assertNull(modelBean0.getWriteAllFields());
      assertNull(modelBean0.getDestroyMethod());
      assertNull(modelBean0.getMessageProperty());
      assertNull(modelBean0.getTotalProperty());
      
      String string0 = ModelGenerator.generateJavascript(modelBean0, outputFormat0, true);
      assertNull(modelBean0.getIdentifier());
      assertNull(modelBean0.getSuccessProperty());
      assertFalse(modelBean0.isDisablePagingParameters());
      assertNull(modelBean0.getRootProperty());
      assertEquals("json", modelBean0.getWriter());
      assertNull(modelBean0.getVersionProperty());
      assertEquals("Ext.data.Model", modelBean0.getExtend());
      assertFalse(modelBean0.isClientIdPropertyAddToWriter());
      assertNull(modelBean0.getClientIdProperty());
      assertNull(modelBean0.getReadMethod());
      assertTrue(modelBean0.isAutodetectTypes());
      assertFalse(modelBean0.isPaging());
      assertEquals("mapping", modelBean0.getIdProperty());
      assertNull(modelBean0.getCreateMethod());
      assertEquals("ch.rasc.extclassgenerator.ModelFieldBean", modelBean0.getName());
      assertEquals("json", modelBean0.getReader());
      assertNull(modelBean0.getUpdateMethod());
      assertNull(modelBean0.getWriteAllFields());
      assertNull(modelBean0.getDestroyMethod());
      assertNull(modelBean0.getMessageProperty());
      assertNull(modelBean0.getTotalProperty());
      assertNotNull(string0);
      assertEquals("Ext.define(\"ch.rasc.extclassgenerator.ModelFieldBean\",\r\n{\n  extend : \"Ext.data.Model\",\n  idProperty : \"mapping\",\n  fields : [ {\n    name : \"allowBlank\",\n    type : \"boolean\"\n  }, {\n    name : \"allowNull\",\n    type : \"boolean\"\n  }, {\n    name : \"critical\",\n    type : \"boolean\"\n  }, {\n    name : \"persist\",\n    type : \"boolean\"\n  }, {\n    name : \"unique\",\n    type : \"boolean\"\n  }, {\n    name : \"useNull\",\n    type : \"boolean\"\n  }, {\n    name : \"calculate\",\n    type : \"string\"\n  }, {\n    name : \"convert\",\n    type : \"string\"\n  }, {\n    name : \"dateFormat\",\n    type : \"string\"\n  }, {\n    name : \"mapping\",\n    type : \"string\"\n  }, {\n    name : \"name\",\n    type : \"string\"\n  }, {\n    name : \"type\",\n    type : \"string\"\n  } ],\n  proxy : {\n    idParam : \"mapping\",\n    type : \"direct\"\n  }\n});", string0);
  }

  @Test(timeout = 4000000)
  public void test083()  throws Throwable  {
      System.setCurrentTimeMillis(0L);
      ModelBean modelBean0 = new ModelBean();
      assertEquals("json", modelBean0.getWriter());
      assertNull(modelBean0.getIdentifier());
      assertNull(modelBean0.getRootProperty());
      assertNull(modelBean0.getMessageProperty());
      assertNull(modelBean0.getTotalProperty());
      assertNull(modelBean0.getName());
      assertNull(modelBean0.getVersionProperty());
      assertNull(modelBean0.getCreateMethod());
      assertNull(modelBean0.getWriteAllFields());
      assertNull(modelBean0.getReadMethod());
      assertTrue(modelBean0.isAutodetectTypes());
      assertNull(modelBean0.getUpdateMethod());
      assertEquals("Ext.data.Model", modelBean0.getExtend());
      assertEquals("json", modelBean0.getReader());
      assertNull(modelBean0.getClientIdProperty());
      assertNull(modelBean0.getIdProperty());
      assertNull(modelBean0.getDestroyMethod());
      assertFalse(modelBean0.isClientIdPropertyAddToWriter());
      assertFalse(modelBean0.isPaging());
      assertNull(modelBean0.getSuccessProperty());
      assertFalse(modelBean0.isDisablePagingParameters());
      assertNotNull(modelBean0);
      
      ModelType modelType0 = ModelType.AUTO;
      ModelFieldBean modelFieldBean0 = new ModelFieldBean("BB=f6+mfTX;(]", modelType0);
      assertNull(modelFieldBean0.getType());
      assertNull(modelFieldBean0.getUseNull());
      assertNull(modelFieldBean0.getConvert());
      assertNull(modelFieldBean0.getCalculate());
      assertNull(modelFieldBean0.getDateFormat());
      assertNull(modelFieldBean0.getCritical());
      assertEquals(ModelType.AUTO, modelFieldBean0.getModelType());
      assertEquals("BB=f6+mfTX;(]", modelFieldBean0.getName());
      assertNull(modelFieldBean0.getMapping());
      assertNull(modelFieldBean0.getUnique());
      assertNull(modelFieldBean0.getAllowNull());
      assertNull(modelFieldBean0.getPersist());
      assertNull(modelFieldBean0.getAllowBlank());
      assertNotNull(modelFieldBean0);
      
      modelFieldBean0.setMapping("BB=f6+mfTX;(]");
      assertNull(modelFieldBean0.getType());
      assertNull(modelFieldBean0.getUseNull());
      assertNull(modelFieldBean0.getConvert());
      assertNull(modelFieldBean0.getCalculate());
      assertNull(modelFieldBean0.getDateFormat());
      assertNull(modelFieldBean0.getCritical());
      assertEquals("BB=f6+mfTX;(]", modelFieldBean0.getMapping());
      assertEquals(ModelType.AUTO, modelFieldBean0.getModelType());
      assertEquals("BB=f6+mfTX;(]", modelFieldBean0.getName());
      assertNull(modelFieldBean0.getUnique());
      assertNull(modelFieldBean0.getAllowNull());
      assertNull(modelFieldBean0.getPersist());
      assertNull(modelFieldBean0.getAllowBlank());
      
      modelBean0.addField(modelFieldBean0);
      assertEquals("json", modelBean0.getWriter());
      assertNull(modelBean0.getIdentifier());
      assertNull(modelBean0.getRootProperty());
      assertNull(modelBean0.getMessageProperty());
      assertNull(modelBean0.getTotalProperty());
      assertNull(modelBean0.getName());
      assertNull(modelBean0.getVersionProperty());
      assertNull(modelBean0.getCreateMethod());
      assertNull(modelBean0.getWriteAllFields());
      assertNull(modelBean0.getReadMethod());
      assertTrue(modelBean0.isAutodetectTypes());
      assertNull(modelBean0.getUpdateMethod());
      assertEquals("Ext.data.Model", modelBean0.getExtend());
      assertEquals("json", modelBean0.getReader());
      assertNull(modelBean0.getClientIdProperty());
      assertNull(modelBean0.getIdProperty());
      assertNull(modelBean0.getDestroyMethod());
      assertFalse(modelBean0.isClientIdPropertyAddToWriter());
      assertFalse(modelBean0.isPaging());
      assertNull(modelBean0.getSuccessProperty());
      assertFalse(modelBean0.isDisablePagingParameters());
      assertNull(modelFieldBean0.getType());
      assertNull(modelFieldBean0.getUseNull());
      assertNull(modelFieldBean0.getConvert());
      assertNull(modelFieldBean0.getCalculate());
      assertNull(modelFieldBean0.getDateFormat());
      assertNull(modelFieldBean0.getCritical());
      assertEquals("BB=f6+mfTX;(]", modelFieldBean0.getMapping());
      assertEquals(ModelType.AUTO, modelFieldBean0.getModelType());
      assertEquals("BB=f6+mfTX;(]", modelFieldBean0.getName());
      assertNull(modelFieldBean0.getUnique());
      assertNull(modelFieldBean0.getAllowNull());
      assertNull(modelFieldBean0.getPersist());
      assertNull(modelFieldBean0.getAllowBlank());
      
      OutputFormat outputFormat0 = OutputFormat.TOUCH2;
      String string0 = ModelGenerator.generateJavascript(modelBean0, outputFormat0, true);
      assertEquals("json", modelBean0.getWriter());
      assertNull(modelBean0.getIdentifier());
      assertNull(modelBean0.getRootProperty());
      assertNull(modelBean0.getMessageProperty());
      assertNull(modelBean0.getTotalProperty());
      assertNull(modelBean0.getName());
      assertNull(modelBean0.getVersionProperty());
      assertNull(modelBean0.getCreateMethod());
      assertNull(modelBean0.getWriteAllFields());
      assertNull(modelBean0.getReadMethod());
      assertTrue(modelBean0.isAutodetectTypes());
      assertNull(modelBean0.getUpdateMethod());
      assertEquals("Ext.data.Model", modelBean0.getExtend());
      assertEquals("json", modelBean0.getReader());
      assertNull(modelBean0.getClientIdProperty());
      assertNull(modelBean0.getIdProperty());
      assertNull(modelBean0.getDestroyMethod());
      assertFalse(modelBean0.isClientIdPropertyAddToWriter());
      assertFalse(modelBean0.isPaging());
      assertNull(modelBean0.getSuccessProperty());
      assertFalse(modelBean0.isDisablePagingParameters());
      assertNotNull(string0);
      assertEquals("Ext.define(\"null\",\r\n{\n  extend : \"Ext.data.Model\",\n  config : {\n    fields : [ {\n      name : \"BB=f6+mfTX;(]\",\n      mapping : \"BB=f6+mfTX;(]\"\n    } ]\n  }\n});", string0);
      
      Class<String> class0 = String.class;
      ModelBean modelBean1 = ModelGenerator.createModel(class0);
      assertFalse(modelBean1.isClientIdPropertyAddToWriter());
      assertFalse(modelBean1.isPaging());
      assertNull(modelBean1.getMessageProperty());
      assertNull(modelBean1.getVersionProperty());
      assertNull(modelBean1.getSuccessProperty());
      assertEquals("json", modelBean1.getReader());
      assertNull(modelBean1.getWriteAllFields());
      assertTrue(modelBean1.isAutodetectTypes());
      assertNull(modelBean1.getClientIdProperty());
      assertNull(modelBean1.getUpdateMethod());
      assertEquals("Ext.data.Model", modelBean1.getExtend());
      assertNull(modelBean1.getReadMethod());
      assertNull(modelBean1.getCreateMethod());
      assertFalse(modelBean1.isDisablePagingParameters());
      assertEquals("java.lang.String", modelBean1.getName());
      assertNull(modelBean1.getRootProperty());
      assertNull(modelBean1.getTotalProperty());
      assertEquals("json", modelBean1.getWriter());
      assertNull(modelBean1.getIdentifier());
      assertNull(modelBean1.getIdProperty());
      assertNull(modelBean1.getDestroyMethod());
      assertNotSame(modelBean1, modelBean0);
      assertFalse(modelBean1.equals((Object)modelBean0));
      assertNotNull(modelBean1);
      
      OutputConfig outputConfig0 = new OutputConfig();
      assertNull(outputConfig0.getIncludeValidation());
      assertFalse(outputConfig0.isSurroundApiWithQuotes());
      assertFalse(outputConfig0.isUseSingleQuotes());
      assertNull(outputConfig0.getLineEnding());
      assertNull(outputConfig0.getOutputFormat());
      assertNotNull(outputConfig0);
      
      outputConfig0.setDebug(true);
      assertNull(outputConfig0.getIncludeValidation());
      assertFalse(outputConfig0.isSurroundApiWithQuotes());
      assertFalse(outputConfig0.isUseSingleQuotes());
      assertNull(outputConfig0.getLineEnding());
      assertNull(outputConfig0.getOutputFormat());
      
      String string1 = ModelGenerator.generateJavascript(modelBean1, outputConfig0);
      assertFalse(modelBean1.isClientIdPropertyAddToWriter());
      assertFalse(modelBean1.isPaging());
      assertNull(modelBean1.getMessageProperty());
      assertNull(modelBean1.getVersionProperty());
      assertNull(modelBean1.getSuccessProperty());
      assertEquals("json", modelBean1.getReader());
      assertNull(modelBean1.getWriteAllFields());
      assertTrue(modelBean1.isAutodetectTypes());
      assertNull(modelBean1.getClientIdProperty());
      assertNull(modelBean1.getUpdateMethod());
      assertEquals("Ext.data.Model", modelBean1.getExtend());
      assertNull(modelBean1.getReadMethod());
      assertNull(modelBean1.getCreateMethod());
      assertFalse(modelBean1.isDisablePagingParameters());
      assertEquals("java.lang.String", modelBean1.getName());
      assertNull(modelBean1.getRootProperty());
      assertNull(modelBean1.getTotalProperty());
      assertEquals("json", modelBean1.getWriter());
      assertNull(modelBean1.getIdentifier());
      assertNull(modelBean1.getIdProperty());
      assertNull(modelBean1.getDestroyMethod());
      assertNull(outputConfig0.getIncludeValidation());
      assertFalse(outputConfig0.isSurroundApiWithQuotes());
      assertFalse(outputConfig0.isUseSingleQuotes());
      assertNull(outputConfig0.getLineEnding());
      assertNull(outputConfig0.getOutputFormat());
      assertNotSame(modelBean1, modelBean0);
      assertFalse(modelBean1.equals((Object)modelBean0));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("Ext.define(\"java.lang.String\",\r\n{\n  extend : \"Ext.data.Model\",\n  config : {\n    fields : [ ]\n  }\n});", string1);
      
      String string2 = ModelGenerator.trimToNull("ETag");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("ETag", string2);
      
      System.setCurrentTimeMillis(0L);
      Class<HttpUpgradeHandler> class1 = HttpUpgradeHandler.class;
      OutputFormat outputFormat1 = OutputFormat.TOUCH2;
      String string3 = ModelGenerator.generateJavascript(class1, outputFormat1, true);
      assertSame(outputFormat1, outputFormat0);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      assertEquals("Ext.define(\"javax.servlet.http.HttpUpgradeHandler\",\r\n{\n  extend : \"Ext.data.Model\",\n  config : {\n    fields : [ ]\n  }\n});", string3);
      
      Class<String> class2 = String.class;
      IncludeValidation includeValidation0 = IncludeValidation.BUILTIN;
      String string4 = ModelGenerator.generateJavascript(class2, outputFormat1, includeValidation0, true);
      assertSame(outputFormat1, outputFormat0);
      assertSame(class2, class0);
      assertTrue(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertNotNull(string4);
      assertEquals("Ext.define(\"java.lang.String\",\r\n{\n  extend : \"Ext.data.Model\",\n  config : {\n    fields : [ ]\n  }\n});", string4);
      
      String string5 = ModelGenerator.trimToNull("Ext.define(\"null\",\r\n{\n  extend : \"Ext.data.Model\",\n  config : {\n    fields : [ {\n      name : \"BB=f6+mfTX;(]\",\n      mapping : \"BB=f6+mfTX;(]\"\n    } ]\n  }\n});");
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertTrue(string5.equals((Object)string0));
      assertNotNull(string5);
      assertEquals("Ext.define(\"null\",\r\n{\n  extend : \"Ext.data.Model\",\n  config : {\n    fields : [ {\n      name : \"BB=f6+mfTX;(]\",\n      mapping : \"BB=f6+mfTX;(]\"\n    } ]\n  }\n});", string5);
      
      String string6 = ModelGenerator.generateJavascript(modelBean1, outputFormat1, true);
      assertFalse(modelBean1.isClientIdPropertyAddToWriter());
      assertFalse(modelBean1.isPaging());
      assertNull(modelBean1.getMessageProperty());
      assertNull(modelBean1.getVersionProperty());
      assertNull(modelBean1.getSuccessProperty());
      assertEquals("json", modelBean1.getReader());
      assertNull(modelBean1.getWriteAllFields());
      assertTrue(modelBean1.isAutodetectTypes());
      assertNull(modelBean1.getClientIdProperty());
      assertNull(modelBean1.getUpdateMethod());
      assertEquals("Ext.data.Model", modelBean1.getExtend());
      assertNull(modelBean1.getReadMethod());
      assertNull(modelBean1.getCreateMethod());
      assertFalse(modelBean1.isDisablePagingParameters());
      assertEquals("java.lang.String", modelBean1.getName());
      assertNull(modelBean1.getRootProperty());
      assertNull(modelBean1.getTotalProperty());
      assertEquals("json", modelBean1.getWriter());
      assertNull(modelBean1.getIdentifier());
      assertNull(modelBean1.getIdProperty());
      assertNull(modelBean1.getDestroyMethod());
      assertSame(outputFormat1, outputFormat0);
      assertSame(class0, class2);
      assertNotSame(modelBean1, modelBean0);
      assertFalse(string6.equals((Object)string2));
      assertTrue(string6.equals((Object)string4));
      assertTrue(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string3));
      assertFalse(modelBean1.equals((Object)modelBean0));
      assertNotNull(string6);
      assertEquals("Ext.define(\"java.lang.String\",\r\n{\n  extend : \"Ext.data.Model\",\n  config : {\n    fields : [ ]\n  }\n});", string6);
      
      HttpServletRequest httpServletRequest0 = mock(HttpServletRequest.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(httpServletRequest0).getRealPath(anyString());
      doReturn((String) null).when(httpServletRequest0).getHeader(anyString());
      HttpServletRequestWrapper httpServletRequestWrapper0 = new HttpServletRequestWrapper(httpServletRequest0);
      assertNotNull(httpServletRequestWrapper0);
      
      HttpServletResponse httpServletResponse0 = mock(HttpServletResponse.class, new ViolatedAssumptionAnswer());
      doReturn((ServletOutputStream) null).when(httpServletResponse0).getOutputStream();
      String string7 = httpServletRequestWrapper0.getRealPath("j8j+ftYQ{G8@Y04>O");
      assertNull(string7);
      
      HttpServletResponseWrapper httpServletResponseWrapper0 = new HttpServletResponseWrapper(httpServletResponse0);
      assertNotNull(httpServletResponseWrapper0);
      
      OutputFormat outputFormat2 = OutputFormat.EXTJS4;
      // Undeclared exception!
      try { 
        ModelGenerator.writeModel((HttpServletRequest) httpServletRequestWrapper0, (HttpServletResponse) httpServletResponseWrapper0, modelBean1, outputFormat2, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("ch.rasc.extclassgenerator.ModelGenerator", e);
      }
  }

  @Test(timeout = 4000000)
  public void test084()  throws Throwable  {
      HttpServletRequest httpServletRequest0 = null;
      HttpServletResponse httpServletResponse0 = null;
      OutputConfig outputConfig0 = new OutputConfig();
      assertFalse(outputConfig0.isDebug());
      assertFalse(outputConfig0.isUseSingleQuotes());
      assertNull(outputConfig0.getLineEnding());
      assertFalse(outputConfig0.isSurroundApiWithQuotes());
      assertNull(outputConfig0.getIncludeValidation());
      assertNull(outputConfig0.getOutputFormat());
      assertNotNull(outputConfig0);
      
      IncludeValidation includeValidation0 = IncludeValidation.BUILTIN;
      outputConfig0.setIncludeValidation(includeValidation0);
      assertFalse(outputConfig0.isDebug());
      assertEquals(IncludeValidation.BUILTIN, outputConfig0.getIncludeValidation());
      assertFalse(outputConfig0.isUseSingleQuotes());
      assertNull(outputConfig0.getLineEnding());
      assertFalse(outputConfig0.isSurroundApiWithQuotes());
      assertNull(outputConfig0.getOutputFormat());
      
      Class<TypeExpr> class0 = TypeExpr.class;
      ModelBean modelBean0 = ModelGenerator.createModel(class0);
      assertNull(modelBean0.getCreateMethod());
      assertEquals("com.github.javaparser.ast.expr.TypeExpr", modelBean0.getName());
      assertNull(modelBean0.getWriteAllFields());
      assertNull(modelBean0.getIdProperty());
      assertNull(modelBean0.getUpdateMethod());
      assertNull(modelBean0.getDestroyMethod());
      assertEquals("json", modelBean0.getReader());
      assertNull(modelBean0.getTotalProperty());
      assertNull(modelBean0.getSuccessProperty());
      assertNull(modelBean0.getIdentifier());
      assertFalse(modelBean0.isDisablePagingParameters());
      assertNull(modelBean0.getMessageProperty());
      assertNull(modelBean0.getRootProperty());
      assertEquals("json", modelBean0.getWriter());
      assertNull(modelBean0.getVersionProperty());
      assertNull(modelBean0.getClientIdProperty());
      assertEquals("Ext.data.Model", modelBean0.getExtend());
      assertFalse(modelBean0.isClientIdPropertyAddToWriter());
      assertNull(modelBean0.getReadMethod());
      assertFalse(modelBean0.isPaging());
      assertTrue(modelBean0.isAutodetectTypes());
      assertNotNull(modelBean0);
      
      // Undeclared exception!
      try { 
        ModelGenerator.writeModel((HttpServletRequest) null, (HttpServletResponse) null, modelBean0, outputConfig0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("ch.rasc.extclassgenerator.ModelGenerator", e);
      }
  }

  @Test(timeout = 4000000)
  public void test085()  throws Throwable  {
      OutputConfig outputConfig0 = new OutputConfig();
      assertFalse(outputConfig0.isDebug());
      assertFalse(outputConfig0.isSurroundApiWithQuotes());
      assertNull(outputConfig0.getOutputFormat());
      assertFalse(outputConfig0.isUseSingleQuotes());
      assertNull(outputConfig0.getLineEnding());
      assertNull(outputConfig0.getIncludeValidation());
      assertNotNull(outputConfig0);
      
      OutputFormat outputFormat0 = OutputFormat.EXTJS5;
      outputConfig0.setOutputFormat(outputFormat0);
      assertFalse(outputConfig0.isDebug());
      assertFalse(outputConfig0.isSurroundApiWithQuotes());
      assertFalse(outputConfig0.isUseSingleQuotes());
      assertNull(outputConfig0.getLineEnding());
      assertEquals(OutputFormat.EXTJS5, outputConfig0.getOutputFormat());
      assertNull(outputConfig0.getIncludeValidation());
      
      ModelBean modelBean0 = new ModelBean();
      assertNull(modelBean0.getClientIdProperty());
      assertEquals("Ext.data.Model", modelBean0.getExtend());
      assertNull(modelBean0.getMessageProperty());
      assertTrue(modelBean0.isAutodetectTypes());
      assertNull(modelBean0.getReadMethod());
      assertNull(modelBean0.getCreateMethod());
      assertNull(modelBean0.getIdentifier());
      assertFalse(modelBean0.isDisablePagingParameters());
      assertNull(modelBean0.getRootProperty());
      assertEquals("json", modelBean0.getWriter());
      assertNull(modelBean0.getTotalProperty());
      assertNull(modelBean0.getIdProperty());
      assertNull(modelBean0.getDestroyMethod());
      assertNull(modelBean0.getName());
      assertFalse(modelBean0.isClientIdPropertyAddToWriter());
      assertNull(modelBean0.getSuccessProperty());
      assertNull(modelBean0.getVersionProperty());
      assertFalse(modelBean0.isPaging());
      assertNull(modelBean0.getUpdateMethod());
      assertEquals("json", modelBean0.getReader());
      assertNull(modelBean0.getWriteAllFields());
      assertNotNull(modelBean0);
      
      modelBean0.setClientIdProperty("j*Gr'Wuh-Amvu>Jlhx3");
      assertEquals("Ext.data.Model", modelBean0.getExtend());
      assertNull(modelBean0.getMessageProperty());
      assertTrue(modelBean0.isAutodetectTypes());
      assertNull(modelBean0.getReadMethod());
      assertNull(modelBean0.getCreateMethod());
      assertNull(modelBean0.getIdentifier());
      assertFalse(modelBean0.isDisablePagingParameters());
      assertNull(modelBean0.getRootProperty());
      assertEquals("json", modelBean0.getWriter());
      assertNull(modelBean0.getTotalProperty());
      assertNull(modelBean0.getIdProperty());
      assertNull(modelBean0.getDestroyMethod());
      assertEquals("j*Gr'Wuh-Amvu>Jlhx3", modelBean0.getClientIdProperty());
      assertNull(modelBean0.getName());
      assertFalse(modelBean0.isClientIdPropertyAddToWriter());
      assertNull(modelBean0.getSuccessProperty());
      assertNull(modelBean0.getVersionProperty());
      assertFalse(modelBean0.isPaging());
      assertNull(modelBean0.getUpdateMethod());
      assertEquals("json", modelBean0.getReader());
      assertNull(modelBean0.getWriteAllFields());
      
      String string0 = ModelGenerator.generateJavascript(modelBean0, outputConfig0);
      assertFalse(outputConfig0.isDebug());
      assertFalse(outputConfig0.isSurroundApiWithQuotes());
      assertFalse(outputConfig0.isUseSingleQuotes());
      assertNull(outputConfig0.getLineEnding());
      assertEquals(OutputFormat.EXTJS5, outputConfig0.getOutputFormat());
      assertNull(outputConfig0.getIncludeValidation());
      assertEquals("Ext.data.Model", modelBean0.getExtend());
      assertNull(modelBean0.getMessageProperty());
      assertTrue(modelBean0.isAutodetectTypes());
      assertNull(modelBean0.getReadMethod());
      assertNull(modelBean0.getCreateMethod());
      assertNull(modelBean0.getIdentifier());
      assertFalse(modelBean0.isDisablePagingParameters());
      assertNull(modelBean0.getRootProperty());
      assertEquals("json", modelBean0.getWriter());
      assertNull(modelBean0.getTotalProperty());
      assertNull(modelBean0.getIdProperty());
      assertNull(modelBean0.getDestroyMethod());
      assertEquals("j*Gr'Wuh-Amvu>Jlhx3", modelBean0.getClientIdProperty());
      assertNull(modelBean0.getName());
      assertFalse(modelBean0.isClientIdPropertyAddToWriter());
      assertNull(modelBean0.getSuccessProperty());
      assertNull(modelBean0.getVersionProperty());
      assertFalse(modelBean0.isPaging());
      assertNull(modelBean0.getUpdateMethod());
      assertEquals("json", modelBean0.getReader());
      assertNull(modelBean0.getWriteAllFields());
      assertNotNull(string0);
      assertEquals("Ext.define(\"null\",{extend:\"Ext.data.Model\",clientIdProperty:\"j*Gr'Wuh-Amvu>Jlhx3\",fields:[]});", string0);
  }

  @Test(timeout = 4000000)
  public void test086()  throws Throwable  {
      HttpServletResponse httpServletResponse0 = mock(HttpServletResponse.class, new ViolatedAssumptionAnswer());
      doReturn((ServletOutputStream) null).when(httpServletResponse0).getOutputStream();
      Class<ModelFieldBean> class0 = ModelFieldBean.class;
      IncludeValidation includeValidation0 = IncludeValidation.BUILTIN;
      ModelBean modelBean0 = ModelGenerator.createModel(class0, includeValidation0);
      //  // Unstable assertion: assertEquals("=E?QYWp>k$<_", modelBean0.getCreateMethod());
      //  // Unstable assertion: assertEquals("json", modelBean0.getWriter());
      //  // Unstable assertion: assertNull(modelBean0.getRootProperty());
      //  // Unstable assertion: assertFalse(modelBean0.isPaging());
      //  // Unstable assertion: assertNull(modelBean0.getSuccessProperty());
      //  // Unstable assertion: assertNull(modelBean0.getMessageProperty());
      //  // Unstable assertion: assertNull(modelBean0.getVersionProperty());
      //  // Unstable assertion: assertEquals("json", modelBean0.getReader());
      //  // Unstable assertion: assertNull(modelBean0.getIdProperty());
      //  // Unstable assertion: assertNull(modelBean0.getUpdateMethod());
      //  // Unstable assertion: assertNull(modelBean0.getWriteAllFields());
      //  // Unstable assertion: assertNull(modelBean0.getReadMethod());
      //  // Unstable assertion: assertEquals("Ext.data.Model", modelBean0.getExtend());
      //  // Unstable assertion: assertNull(modelBean0.getClientIdProperty());
      //  // Unstable assertion: assertTrue(modelBean0.isAutodetectTypes());
      //  // Unstable assertion: assertFalse(modelBean0.isClientIdPropertyAddToWriter());
      //  // Unstable assertion: assertNull(modelBean0.getTotalProperty());
      //  // Unstable assertion: assertNull(modelBean0.getDestroyMethod());
      //  // Unstable assertion: assertFalse(modelBean0.isDisablePagingParameters());
      //  // Unstable assertion: assertNull(modelBean0.getIdentifier());
      //  // Unstable assertion: assertEquals("ch.rasc.extclassgenerator.ModelFieldBean", modelBean0.getName());
      //  // Unstable assertion: assertNotNull(modelBean0);
      
      OutputConfig outputConfig0 = new OutputConfig();
      //  // Unstable assertion: assertNull(outputConfig0.getIncludeValidation());
      //  // Unstable assertion: assertNull(outputConfig0.getOutputFormat());
      //  // Unstable assertion: assertNull(outputConfig0.getLineEnding());
      //  // Unstable assertion: assertFalse(outputConfig0.isDebug());
      //  // Unstable assertion: assertFalse(outputConfig0.isUseSingleQuotes());
      //  // Unstable assertion: assertNotNull(outputConfig0);
      
      outputConfig0.setSurroundApiWithQuotes(true);
      //  // Unstable assertion: assertNull(outputConfig0.getIncludeValidation());
      //  // Unstable assertion: assertNull(outputConfig0.getOutputFormat());
      //  // Unstable assertion: assertNull(outputConfig0.getLineEnding());
      //  // Unstable assertion: assertFalse(outputConfig0.isDebug());
      //  // Unstable assertion: assertFalse(outputConfig0.isUseSingleQuotes());
      
      String string0 = ModelGenerator.generateJavascript(modelBean0, outputConfig0);
      //  // Unstable assertion: assertEquals("=E?QYWp>k$<_", modelBean0.getCreateMethod());
      //  // Unstable assertion: assertEquals("json", modelBean0.getWriter());
      //  // Unstable assertion: assertNull(modelBean0.getRootProperty());
      //  // Unstable assertion: assertFalse(modelBean0.isPaging());
      //  // Unstable assertion: assertNull(modelBean0.getSuccessProperty());
      //  // Unstable assertion: assertNull(modelBean0.getMessageProperty());
      //  // Unstable assertion: assertNull(modelBean0.getVersionProperty());
      //  // Unstable assertion: assertEquals("json", modelBean0.getReader());
      //  // Unstable assertion: assertNull(modelBean0.getIdProperty());
      //  // Unstable assertion: assertNull(modelBean0.getUpdateMethod());
      //  // Unstable assertion: assertNull(modelBean0.getWriteAllFields());
      //  // Unstable assertion: assertNull(modelBean0.getReadMethod());
      //  // Unstable assertion: assertEquals("Ext.data.Model", modelBean0.getExtend());
      //  // Unstable assertion: assertNull(modelBean0.getClientIdProperty());
      //  // Unstable assertion: assertTrue(modelBean0.isAutodetectTypes());
      //  // Unstable assertion: assertFalse(modelBean0.isClientIdPropertyAddToWriter());
      //  // Unstable assertion: assertNull(modelBean0.getTotalProperty());
      //  // Unstable assertion: assertNull(modelBean0.getDestroyMethod());
      //  // Unstable assertion: assertFalse(modelBean0.isDisablePagingParameters());
      //  // Unstable assertion: assertNull(modelBean0.getIdentifier());
      //  // Unstable assertion: assertEquals("ch.rasc.extclassgenerator.ModelFieldBean", modelBean0.getName());
      //  // Unstable assertion: assertNull(outputConfig0.getIncludeValidation());
      //  // Unstable assertion: assertNull(outputConfig0.getOutputFormat());
      //  // Unstable assertion: assertNull(outputConfig0.getLineEnding());
      //  // Unstable assertion: assertFalse(outputConfig0.isDebug());
      //  // Unstable assertion: assertFalse(outputConfig0.isUseSingleQuotes());
      //  // Unstable assertion: assertNotNull(string0);
      
      OutputConfig outputConfig1 = new OutputConfig();
      //  // Unstable assertion: assertFalse(outputConfig1.isUseSingleQuotes());
      //  // Unstable assertion: assertNull(outputConfig1.getLineEnding());
      //  // Unstable assertion: assertNull(outputConfig1.getIncludeValidation());
      //  // Unstable assertion: assertNull(outputConfig1.getOutputFormat());
      //  // Unstable assertion: assertFalse(outputConfig1.isSurroundApiWithQuotes());
      //  // Unstable assertion: assertFalse(outputConfig1.isDebug());
      //  // Unstable assertion: assertFalse(outputConfig1.equals((Object)outputConfig0));
      //  // Unstable assertion: assertNotNull(outputConfig1);
      
      String string1 = ModelGenerator.generateJavascript(modelBean0, outputConfig1);
      //  // Unstable assertion: assertEquals("=E?QYWp>k$<_", modelBean0.getCreateMethod());
      //  // Unstable assertion: assertEquals("json", modelBean0.getWriter());
      //  // Unstable assertion: assertNull(modelBean0.getRootProperty());
      //  // Unstable assertion: assertFalse(modelBean0.isPaging());
      //  // Unstable assertion: assertNull(modelBean0.getSuccessProperty());
      //  // Unstable assertion: assertNull(modelBean0.getMessageProperty());
      //  // Unstable assertion: assertNull(modelBean0.getVersionProperty());
      //  // Unstable assertion: assertEquals("json", modelBean0.getReader());
      //  // Unstable assertion: assertNull(modelBean0.getIdProperty());
      //  // Unstable assertion: assertNull(modelBean0.getUpdateMethod());
      //  // Unstable assertion: assertNull(modelBean0.getWriteAllFields());
      //  // Unstable assertion: assertNull(modelBean0.getReadMethod());
      //  // Unstable assertion: assertEquals("Ext.data.Model", modelBean0.getExtend());
      //  // Unstable assertion: assertNull(modelBean0.getClientIdProperty());
      //  // Unstable assertion: assertTrue(modelBean0.isAutodetectTypes());
      //  // Unstable assertion: assertFalse(modelBean0.isClientIdPropertyAddToWriter());
      //  // Unstable assertion: assertNull(modelBean0.getTotalProperty());
      //  // Unstable assertion: assertNull(modelBean0.getDestroyMethod());
      //  // Unstable assertion: assertFalse(modelBean0.isDisablePagingParameters());
      //  // Unstable assertion: assertNull(modelBean0.getIdentifier());
      //  // Unstable assertion: assertEquals("ch.rasc.extclassgenerator.ModelFieldBean", modelBean0.getName());
      //  // Unstable assertion: assertFalse(outputConfig1.isUseSingleQuotes());
      //  // Unstable assertion: assertNull(outputConfig1.getLineEnding());
      //  // Unstable assertion: assertNull(outputConfig1.getIncludeValidation());
      //  // Unstable assertion: assertNull(outputConfig1.getOutputFormat());
      //  // Unstable assertion: assertFalse(outputConfig1.isSurroundApiWithQuotes());
      //  // Unstable assertion: assertFalse(outputConfig1.isDebug());
      //  // Unstable assertion: assertNotSame(outputConfig1, outputConfig0);
      //  // Unstable assertion: assertFalse(outputConfig1.equals((Object)outputConfig0));
      //  // Unstable assertion: assertNotNull(string1);
      
      HttpServletRequest httpServletRequest0 = mock(HttpServletRequest.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(httpServletRequest0).getHeader(anyString());
      HttpServletRequestWrapper httpServletRequestWrapper0 = new HttpServletRequestWrapper(httpServletRequest0);
      //  // Unstable assertion: assertNotNull(httpServletRequestWrapper0);
      
      Class<HttpUpgradeHandler> class1 = HttpUpgradeHandler.class;
      OutputFormat outputFormat0 = OutputFormat.EXTJS4;
      // Undeclared exception!
      try { 
        ModelGenerator.writeModel((HttpServletRequest) httpServletRequestWrapper0, httpServletResponse0, (Class<?>) class1, outputFormat0, true);
       //  fail("Expecting exception: NullPointerException");
       // Unstable assertion
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("ch.rasc.extclassgenerator.ModelGenerator", e);
      }
  }

  @Test(timeout = 4000000)
  public void test087()  throws Throwable  {
      Class<ModelFieldBean> class0 = ModelFieldBean.class;
      IncludeValidation includeValidation0 = IncludeValidation.ALL;
      ModelBean modelBean0 = ModelGenerator.createModel(class0, includeValidation0);
      assertFalse(modelBean0.isClientIdPropertyAddToWriter());
      assertNull(modelBean0.getTotalProperty());
      assertNull(modelBean0.getCreateMethod());
      assertNull(modelBean0.getIdProperty());
      assertEquals("ch.rasc.extclassgenerator.ModelFieldBean", modelBean0.getName());
      assertNull(modelBean0.getRootProperty());
      assertEquals("json", modelBean0.getWriter());
      assertNull(modelBean0.getDestroyMethod());
      assertNull(modelBean0.getIdentifier());
      assertEquals("Ext.data.Model", modelBean0.getExtend());
      assertFalse(modelBean0.isPaging());
      assertFalse(modelBean0.isDisablePagingParameters());
      assertNull(modelBean0.getReadMethod());
      assertNull(modelBean0.getMessageProperty());
      assertNull(modelBean0.getUpdateMethod());
      assertTrue(modelBean0.isAutodetectTypes());
      assertNull(modelBean0.getSuccessProperty());
      assertEquals("json", modelBean0.getReader());
      assertNull(modelBean0.getVersionProperty());
      assertNull(modelBean0.getClientIdProperty());
      assertNull(modelBean0.getWriteAllFields());
      assertNotNull(modelBean0);
      
      OutputConfig outputConfig0 = new OutputConfig();
      assertNull(outputConfig0.getIncludeValidation());
      assertFalse(outputConfig0.isDebug());
      assertFalse(outputConfig0.isSurroundApiWithQuotes());
      assertFalse(outputConfig0.isUseSingleQuotes());
      assertNull(outputConfig0.getLineEnding());
      assertNull(outputConfig0.getOutputFormat());
      assertNotNull(outputConfig0);
      
      OutputFormat outputFormat0 = OutputFormat.EXTJS4;
      String string0 = ModelGenerator.generateJavascript(modelBean0, outputFormat0, false);
      assertFalse(modelBean0.isClientIdPropertyAddToWriter());
      assertNull(modelBean0.getTotalProperty());
      assertNull(modelBean0.getCreateMethod());
      assertNull(modelBean0.getIdProperty());
      assertEquals("ch.rasc.extclassgenerator.ModelFieldBean", modelBean0.getName());
      assertNull(modelBean0.getRootProperty());
      assertEquals("json", modelBean0.getWriter());
      assertNull(modelBean0.getDestroyMethod());
      assertNull(modelBean0.getIdentifier());
      assertEquals("Ext.data.Model", modelBean0.getExtend());
      assertFalse(modelBean0.isPaging());
      assertFalse(modelBean0.isDisablePagingParameters());
      assertNull(modelBean0.getReadMethod());
      assertNull(modelBean0.getMessageProperty());
      assertNull(modelBean0.getUpdateMethod());
      assertTrue(modelBean0.isAutodetectTypes());
      assertNull(modelBean0.getSuccessProperty());
      assertEquals("json", modelBean0.getReader());
      assertNull(modelBean0.getVersionProperty());
      assertNull(modelBean0.getClientIdProperty());
      assertNull(modelBean0.getWriteAllFields());
      assertNotNull(string0);
      assertEquals("Ext.define(\"ch.rasc.extclassgenerator.ModelFieldBean\",{extend:\"Ext.data.Model\",fields:[{name:\"allowBlank\",type:\"boolean\"},{name:\"allowNull\",type:\"boolean\"},{name:\"critical\",type:\"boolean\"},{name:\"persist\",type:\"boolean\"},{name:\"unique\",type:\"boolean\"},{name:\"useNull\",type:\"boolean\"},{name:\"calculate\",type:\"string\"},{name:\"convert\",type:\"string\"},{name:\"dateFormat\",type:\"string\"},{name:\"mapping\",type:\"string\"},{name:\"name\",type:\"string\"},{name:\"type\",type:\"string\"}]});", string0);
  }

  @Test(timeout = 4000000)
  public void test088()  throws Throwable  {
      HttpServletResponse httpServletResponse0 = mock(HttpServletResponse.class, new ViolatedAssumptionAnswer());
      Class<ModelFieldBean> class0 = ModelFieldBean.class;
      IncludeValidation includeValidation0 = IncludeValidation.BUILTIN;
      ModelBean modelBean0 = ModelGenerator.createModel(class0, includeValidation0);
      //  // Unstable assertion: assertNull(modelBean0.getSuccessProperty());
      //  // Unstable assertion: assertNull(modelBean0.getIdentifier());
      //  // Unstable assertion: assertFalse(modelBean0.isDisablePagingParameters());
      //  // Unstable assertion: assertNull(modelBean0.getVersionProperty());
      //  // Unstable assertion: assertNull(modelBean0.getRootProperty());
      //  // Unstable assertion: assertFalse(modelBean0.isPaging());
      //  // Unstable assertion: assertNull(modelBean0.getMessageProperty());
      //  // Unstable assertion: assertNull(modelBean0.getClientIdProperty());
      //  // Unstable assertion: assertEquals("Ext.data.Model", modelBean0.getExtend());
      //  // Unstable assertion: assertNull(modelBean0.getWriteAllFields());
      //  // Unstable assertion: assertEquals("ch.rasc.extclassgenerator.ModelFieldBean", modelBean0.getName());
      //  // Unstable assertion: assertNull(modelBean0.getUpdateMethod());
      //  // Unstable assertion: assertEquals("json", modelBean0.getReader());
      //  // Unstable assertion: assertTrue(modelBean0.isAutodetectTypes());
      //  // Unstable assertion: assertFalse(modelBean0.isClientIdPropertyAddToWriter());
      //  // Unstable assertion: assertNull(modelBean0.getReadMethod());
      //  // Unstable assertion: assertEquals("json", modelBean0.getWriter());
      //  // Unstable assertion: assertNull(modelBean0.getTotalProperty());
      //  // Unstable assertion: assertEquals("=E?QYWp>k$<_", modelBean0.getCreateMethod());
      //  // Unstable assertion: assertNull(modelBean0.getIdProperty());
      //  // Unstable assertion: assertNull(modelBean0.getDestroyMethod());
      //  // Unstable assertion: assertNotNull(modelBean0);
      
      OutputConfig outputConfig0 = new OutputConfig();
      //  // Unstable assertion: assertNull(outputConfig0.getIncludeValidation());
      //  // Unstable assertion: assertNull(outputConfig0.getOutputFormat());
      //  // Unstable assertion: assertFalse(outputConfig0.isSurroundApiWithQuotes());
      //  // Unstable assertion: assertFalse(outputConfig0.isDebug());
      //  // Unstable assertion: assertFalse(outputConfig0.isUseSingleQuotes());
      //  // Unstable assertion: assertNull(outputConfig0.getLineEnding());
      //  // Unstable assertion: assertNotNull(outputConfig0);
      
      OutputFormat outputFormat0 = OutputFormat.EXTJS4;
      outputConfig0.setOutputFormat(outputFormat0);
      //  // Unstable assertion: assertNull(outputConfig0.getIncludeValidation());
      //  // Unstable assertion: assertFalse(outputConfig0.isSurroundApiWithQuotes());
      //  // Unstable assertion: assertEquals(OutputFormat.EXTJS4, outputConfig0.getOutputFormat());
      //  // Unstable assertion: assertFalse(outputConfig0.isDebug());
      //  // Unstable assertion: assertFalse(outputConfig0.isUseSingleQuotes());
      //  // Unstable assertion: assertNull(outputConfig0.getLineEnding());
      
      outputConfig0.setOutputFormat(outputFormat0);
      //  // Unstable assertion: assertNull(outputConfig0.getIncludeValidation());
      //  // Unstable assertion: assertFalse(outputConfig0.isSurroundApiWithQuotes());
      //  // Unstable assertion: assertEquals(OutputFormat.EXTJS4, outputConfig0.getOutputFormat());
      //  // Unstable assertion: assertFalse(outputConfig0.isDebug());
      //  // Unstable assertion: assertFalse(outputConfig0.isUseSingleQuotes());
      //  // Unstable assertion: assertNull(outputConfig0.getLineEnding());
      
      outputConfig0.setSurroundApiWithQuotes(false);
      //  // Unstable assertion: assertNull(outputConfig0.getIncludeValidation());
      //  // Unstable assertion: assertFalse(outputConfig0.isSurroundApiWithQuotes());
      //  // Unstable assertion: assertEquals(OutputFormat.EXTJS4, outputConfig0.getOutputFormat());
      //  // Unstable assertion: assertFalse(outputConfig0.isDebug());
      //  // Unstable assertion: assertFalse(outputConfig0.isUseSingleQuotes());
      //  // Unstable assertion: assertNull(outputConfig0.getLineEnding());
      
      outputConfig0.setIncludeValidation(includeValidation0);
      //  // Unstable assertion: assertEquals(IncludeValidation.BUILTIN, outputConfig0.getIncludeValidation());
      //  // Unstable assertion: assertFalse(outputConfig0.isSurroundApiWithQuotes());
      //  // Unstable assertion: assertEquals(OutputFormat.EXTJS4, outputConfig0.getOutputFormat());
      //  // Unstable assertion: assertFalse(outputConfig0.isDebug());
      //  // Unstable assertion: assertFalse(outputConfig0.isUseSingleQuotes());
      //  // Unstable assertion: assertNull(outputConfig0.getLineEnding());
      
      String string0 = ModelGenerator.generateJavascript(modelBean0, outputConfig0);
      //  // Unstable assertion: assertNull(modelBean0.getSuccessProperty());
      //  // Unstable assertion: assertNull(modelBean0.getIdentifier());
      //  // Unstable assertion: assertFalse(modelBean0.isDisablePagingParameters());
      //  // Unstable assertion: assertNull(modelBean0.getVersionProperty());
      //  // Unstable assertion: assertNull(modelBean0.getRootProperty());
      //  // Unstable assertion: assertFalse(modelBean0.isPaging());
      //  // Unstable assertion: assertNull(modelBean0.getMessageProperty());
      //  // Unstable assertion: assertNull(modelBean0.getClientIdProperty());
      //  // Unstable assertion: assertEquals("Ext.data.Model", modelBean0.getExtend());
      //  // Unstable assertion: assertNull(modelBean0.getWriteAllFields());
      //  // Unstable assertion: assertEquals("ch.rasc.extclassgenerator.ModelFieldBean", modelBean0.getName());
      //  // Unstable assertion: assertNull(modelBean0.getUpdateMethod());
      //  // Unstable assertion: assertEquals("json", modelBean0.getReader());
      //  // Unstable assertion: assertTrue(modelBean0.isAutodetectTypes());
      //  // Unstable assertion: assertFalse(modelBean0.isClientIdPropertyAddToWriter());
      //  // Unstable assertion: assertNull(modelBean0.getReadMethod());
      //  // Unstable assertion: assertEquals("json", modelBean0.getWriter());
      //  // Unstable assertion: assertNull(modelBean0.getTotalProperty());
      //  // Unstable assertion: assertEquals("=E?QYWp>k$<_", modelBean0.getCreateMethod());
      //  // Unstable assertion: assertNull(modelBean0.getIdProperty());
      //  // Unstable assertion: assertNull(modelBean0.getDestroyMethod());
      //  // Unstable assertion: assertEquals(IncludeValidation.BUILTIN, outputConfig0.getIncludeValidation());
      //  // Unstable assertion: assertFalse(outputConfig0.isSurroundApiWithQuotes());
      //  // Unstable assertion: assertEquals(OutputFormat.EXTJS4, outputConfig0.getOutputFormat());
      //  // Unstable assertion: assertFalse(outputConfig0.isDebug());
      //  // Unstable assertion: assertFalse(outputConfig0.isUseSingleQuotes());
      //  // Unstable assertion: assertNull(outputConfig0.getLineEnding());
      //  // Unstable assertion: assertNotNull(string0);
  }

  @Test(timeout = 4000000)
  public void test089()  throws Throwable  {
      OutputConfig outputConfig0 = new OutputConfig();
      assertNull(outputConfig0.getIncludeValidation());
      assertNull(outputConfig0.getOutputFormat());
      assertFalse(outputConfig0.isDebug());
      assertNull(outputConfig0.getLineEnding());
      assertFalse(outputConfig0.isSurroundApiWithQuotes());
      assertFalse(outputConfig0.isUseSingleQuotes());
      assertNotNull(outputConfig0);
      
      HttpServletResponse httpServletResponse0 = mock(HttpServletResponse.class, new ViolatedAssumptionAnswer());
      HttpServletResponseWrapper httpServletResponseWrapper0 = new HttpServletResponseWrapper(httpServletResponse0);
      assertNotNull(httpServletResponseWrapper0);
      
      HttpServletResponseWrapper httpServletResponseWrapper1 = new HttpServletResponseWrapper(httpServletResponseWrapper0);
      assertFalse(httpServletResponseWrapper1.equals((Object)httpServletResponseWrapper0));
      assertNotNull(httpServletResponseWrapper1);
      
      HttpServletResponseWrapper httpServletResponseWrapper2 = new HttpServletResponseWrapper(httpServletResponseWrapper1);
      assertFalse(httpServletResponseWrapper0.equals((Object)httpServletResponseWrapper1));
      assertFalse(httpServletResponseWrapper1.equals((Object)httpServletResponseWrapper0));
      assertFalse(httpServletResponseWrapper2.equals((Object)httpServletResponseWrapper0));
      assertFalse(httpServletResponseWrapper2.equals((Object)httpServletResponseWrapper1));
      assertNotNull(httpServletResponseWrapper2);
      
      Class<Annotation> class0 = Annotation.class;
      IncludeValidation includeValidation0 = IncludeValidation.BUILTIN;
      ModelBean modelBean0 = ModelGenerator.createModel(class0, includeValidation0);
      assertFalse(modelBean0.isClientIdPropertyAddToWriter());
      assertNull(modelBean0.getTotalProperty());
      assertEquals("java.lang.annotation.Annotation", modelBean0.getName());
      assertNull(modelBean0.getIdentifier());
      assertFalse(modelBean0.isDisablePagingParameters());
      assertNull(modelBean0.getRootProperty());
      assertEquals("json", modelBean0.getWriter());
      assertNull(modelBean0.getIdProperty());
      assertNull(modelBean0.getDestroyMethod());
      assertNull(modelBean0.getClientIdProperty());
      assertEquals("Ext.data.Model", modelBean0.getExtend());
      assertNull(modelBean0.getReadMethod());
      assertFalse(modelBean0.isPaging());
      assertTrue(modelBean0.isAutodetectTypes());
      assertNull(modelBean0.getSuccessProperty());
      assertNull(modelBean0.getCreateMethod());
      assertNull(modelBean0.getMessageProperty());
      assertNull(modelBean0.getWriteAllFields());
      assertNull(modelBean0.getUpdateMethod());
      assertEquals("json", modelBean0.getReader());
      assertNull(modelBean0.getVersionProperty());
      assertNotNull(modelBean0);
      
      OutputConfig outputConfig1 = new OutputConfig();
      assertFalse(outputConfig1.isUseSingleQuotes());
      assertNull(outputConfig1.getLineEnding());
      assertNull(outputConfig1.getOutputFormat());
      assertNull(outputConfig1.getIncludeValidation());
      assertFalse(outputConfig1.isSurroundApiWithQuotes());
      assertFalse(outputConfig1.isDebug());
      assertTrue(outputConfig1.equals((Object)outputConfig0));
      assertNotNull(outputConfig1);
  }

  @Test(timeout = 4000000)
  public void test090()  throws Throwable  {
      Class<ModelFieldBean> class0 = ModelFieldBean.class;
      OutputFormat outputFormat0 = OutputFormat.TOUCH2;
      String string0 = ModelGenerator.generateJavascript(class0, outputFormat0, true);
      assertNotNull(string0);
      assertEquals("Ext.define(\"ch.rasc.extclassgenerator.ModelFieldBean\",\r\n{\n  extend : \"Ext.data.Model\",\n  config : {\n    fields : [ {\n      name : \"allowBlank\",\n      type : \"boolean\"\n    }, {\n      name : \"allowNull\",\n      type : \"boolean\"\n    }, {\n      name : \"critical\",\n      type : \"boolean\"\n    }, {\n      name : \"persist\",\n      type : \"boolean\"\n    }, {\n      name : \"unique\",\n      type : \"boolean\"\n    }, {\n      name : \"useNull\",\n      type : \"boolean\"\n    }, {\n      name : \"calculate\",\n      type : \"string\"\n    }, {\n      name : \"convert\",\n      type : \"string\"\n    }, {\n      name : \"dateFormat\",\n      type : \"string\"\n    }, {\n      name : \"mapping\",\n      type : \"string\"\n    }, {\n      name : \"name\",\n      type : \"string\"\n    }, {\n      name : \"type\",\n      type : \"string\"\n    } ]\n  }\n});", string0);
  }

  @Test(timeout = 4000000)
  public void test091()  throws Throwable  {
      OutputConfig outputConfig0 = new OutputConfig();
      assertNull(outputConfig0.getIncludeValidation());
      assertNull(outputConfig0.getOutputFormat());
      assertFalse(outputConfig0.isUseSingleQuotes());
      assertNull(outputConfig0.getLineEnding());
      assertFalse(outputConfig0.isDebug());
      assertFalse(outputConfig0.isSurroundApiWithQuotes());
      assertNotNull(outputConfig0);
      
      // Undeclared exception!
      try { 
        ModelGenerator.generateJavascript((ModelBean) null, outputConfig0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("ch.rasc.extclassgenerator.JsCacheKey", e);
      }
  }

  @Test(timeout = 4000000)
  public void test092()  throws Throwable  {
      String string0 = ModelGenerator.trimToNull((String) null);
      assertNull(string0);
      
      HttpServletRequest httpServletRequest0 = mock(HttpServletRequest.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(httpServletRequest0).getHeader(anyString());
      HttpServletRequestWrapper httpServletRequestWrapper0 = new HttpServletRequestWrapper(httpServletRequest0);
      assertNotNull(httpServletRequestWrapper0);
      
      HttpServletRequestWrapper httpServletRequestWrapper1 = new HttpServletRequestWrapper(httpServletRequestWrapper0);
      assertFalse(httpServletRequestWrapper1.equals((Object)httpServletRequestWrapper0));
      assertNotNull(httpServletRequestWrapper1);
      
      IncludeValidation includeValidation0 = IncludeValidation.BUILTIN;
      Class<Object> class0 = Object.class;
      ModelBean modelBean0 = ModelGenerator.createModel(class0, includeValidation0);
      assertNull(modelBean0.getWriteAllFields());
      assertTrue(modelBean0.isAutodetectTypes());
      assertEquals("java.lang.Object", modelBean0.getName());
      assertEquals("json", modelBean0.getReader());
      assertNull(modelBean0.getUpdateMethod());
      assertEquals("Ext.data.Model", modelBean0.getExtend());
      assertNull(modelBean0.getReadMethod());
      assertNull(modelBean0.getCreateMethod());
      assertNull(modelBean0.getMessageProperty());
      assertFalse(modelBean0.isPaging());
      assertNull(modelBean0.getClientIdProperty());
      assertNull(modelBean0.getVersionProperty());
      assertEquals("json", modelBean0.getWriter());
      assertNull(modelBean0.getSuccessProperty());
      assertFalse(modelBean0.isDisablePagingParameters());
      assertNull(modelBean0.getTotalProperty());
      assertFalse(modelBean0.isClientIdPropertyAddToWriter());
      assertNull(modelBean0.getIdentifier());
      assertNull(modelBean0.getRootProperty());
      assertNull(modelBean0.getIdProperty());
      assertNull(modelBean0.getDestroyMethod());
      assertNotNull(modelBean0);
      
      List<AbstractValidation> list0 = modelBean0.getValidations();
      assertNull(modelBean0.getWriteAllFields());
      assertTrue(modelBean0.isAutodetectTypes());
      assertEquals("java.lang.Object", modelBean0.getName());
      assertEquals("json", modelBean0.getReader());
      assertNull(modelBean0.getUpdateMethod());
      assertEquals("Ext.data.Model", modelBean0.getExtend());
      assertNull(modelBean0.getReadMethod());
      assertNull(modelBean0.getCreateMethod());
      assertNull(modelBean0.getMessageProperty());
      assertFalse(modelBean0.isPaging());
      assertNull(modelBean0.getClientIdProperty());
      assertNull(modelBean0.getVersionProperty());
      assertEquals("json", modelBean0.getWriter());
      assertNull(modelBean0.getSuccessProperty());
      assertFalse(modelBean0.isDisablePagingParameters());
      assertNull(modelBean0.getTotalProperty());
      assertFalse(modelBean0.isClientIdPropertyAddToWriter());
      assertNull(modelBean0.getIdentifier());
      assertNull(modelBean0.getRootProperty());
      assertNull(modelBean0.getIdProperty());
      assertNull(modelBean0.getDestroyMethod());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNotNull(list0);
      
      List<AbstractValidation> list1 = modelBean0.getValidations();
      assertNull(modelBean0.getWriteAllFields());
      assertTrue(modelBean0.isAutodetectTypes());
      assertEquals("java.lang.Object", modelBean0.getName());
      assertEquals("json", modelBean0.getReader());
      assertNull(modelBean0.getUpdateMethod());
      assertEquals("Ext.data.Model", modelBean0.getExtend());
      assertNull(modelBean0.getReadMethod());
      assertNull(modelBean0.getCreateMethod());
      assertNull(modelBean0.getMessageProperty());
      assertFalse(modelBean0.isPaging());
      assertNull(modelBean0.getClientIdProperty());
      assertNull(modelBean0.getVersionProperty());
      assertEquals("json", modelBean0.getWriter());
      assertNull(modelBean0.getSuccessProperty());
      assertFalse(modelBean0.isDisablePagingParameters());
      assertNull(modelBean0.getTotalProperty());
      assertFalse(modelBean0.isClientIdPropertyAddToWriter());
      assertNull(modelBean0.getIdentifier());
      assertNull(modelBean0.getRootProperty());
      assertNull(modelBean0.getIdProperty());
      assertNull(modelBean0.getDestroyMethod());
      assertEquals(0, list1.size());
      assertTrue(list1.isEmpty());
      assertSame(list1, list0);
      assertNotNull(list1);
      
      modelBean0.addValidations(list1);
      assertNull(modelBean0.getWriteAllFields());
      assertTrue(modelBean0.isAutodetectTypes());
      assertEquals("java.lang.Object", modelBean0.getName());
      assertEquals("json", modelBean0.getReader());
      assertNull(modelBean0.getUpdateMethod());
      assertEquals("Ext.data.Model", modelBean0.getExtend());
      assertNull(modelBean0.getReadMethod());
      assertNull(modelBean0.getCreateMethod());
      assertNull(modelBean0.getMessageProperty());
      assertFalse(modelBean0.isPaging());
      assertNull(modelBean0.getClientIdProperty());
      assertNull(modelBean0.getVersionProperty());
      assertEquals("json", modelBean0.getWriter());
      assertNull(modelBean0.getSuccessProperty());
      assertFalse(modelBean0.isDisablePagingParameters());
      assertNull(modelBean0.getTotalProperty());
      assertFalse(modelBean0.isClientIdPropertyAddToWriter());
      assertNull(modelBean0.getIdentifier());
      assertNull(modelBean0.getRootProperty());
      assertNull(modelBean0.getIdProperty());
      assertNull(modelBean0.getDestroyMethod());
      assertEquals(0, list1.size());
      assertTrue(list1.isEmpty());
      assertSame(list1, list0);
      
      OutputFormat outputFormat0 = OutputFormat.EXTJS5;
      // Undeclared exception!
      try { 
        ModelGenerator.writeModel((HttpServletRequest) httpServletRequestWrapper0, (HttpServletResponse) null, modelBean0, outputFormat0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("ch.rasc.extclassgenerator.ModelGenerator", e);
      }
  }

  @Test(timeout = 4000000)
  public void test093()  throws Throwable  {
      HttpServletResponse httpServletResponse0 = mock(HttpServletResponse.class, new ViolatedAssumptionAnswer());
      OutputFormat outputFormat0 = OutputFormat.EXTJS4;
      OutputConfig outputConfig0 = new OutputConfig();
      //  // Unstable assertion: assertFalse(outputConfig0.isSurroundApiWithQuotes());
      //  // Unstable assertion: assertNull(outputConfig0.getOutputFormat());
      //  // Unstable assertion: assertFalse(outputConfig0.isUseSingleQuotes());
      //  // Unstable assertion: assertNull(outputConfig0.getLineEnding());
      //  // Unstable assertion: assertNull(outputConfig0.getIncludeValidation());
      //  // Unstable assertion: assertFalse(outputConfig0.isDebug());
      //  // Unstable assertion: assertNotNull(outputConfig0);
      
      outputConfig0.setOutputFormat(outputFormat0);
      //  // Unstable assertion: assertFalse(outputConfig0.isSurroundApiWithQuotes());
      //  // Unstable assertion: assertEquals(OutputFormat.EXTJS4, outputConfig0.getOutputFormat());
      //  // Unstable assertion: assertFalse(outputConfig0.isUseSingleQuotes());
      //  // Unstable assertion: assertNull(outputConfig0.getLineEnding());
      //  // Unstable assertion: assertNull(outputConfig0.getIncludeValidation());
      //  // Unstable assertion: assertFalse(outputConfig0.isDebug());
      
      ModelBean modelBean0 = new ModelBean();
      //  // Unstable assertion: assertFalse(modelBean0.isPaging());
      //  // Unstable assertion: assertNull(modelBean0.getVersionProperty());
      //  // Unstable assertion: assertNull(modelBean0.getClientIdProperty());
      //  // Unstable assertion: assertNull(modelBean0.getSuccessProperty());
      //  // Unstable assertion: assertNull(modelBean0.getIdentifier());
      //  // Unstable assertion: assertEquals("Ext.data.Model", modelBean0.getExtend());
      //  // Unstable assertion: assertNull(modelBean0.getRootProperty());
      //  // Unstable assertion: assertEquals("json", modelBean0.getWriter());
      //  // Unstable assertion: assertNull(modelBean0.getIdProperty());
      //  // Unstable assertion: assertNull(modelBean0.getReadMethod());
      //  // Unstable assertion: assertTrue(modelBean0.isAutodetectTypes());
      //  // Unstable assertion: assertFalse(modelBean0.isDisablePagingParameters());
      //  // Unstable assertion: assertFalse(modelBean0.isClientIdPropertyAddToWriter());
      //  // Unstable assertion: assertNull(modelBean0.getTotalProperty());
      //  // Unstable assertion: assertNull(modelBean0.getDestroyMethod());
      //  // Unstable assertion: assertNull(modelBean0.getName());
      //  // Unstable assertion: assertNull(modelBean0.getWriteAllFields());
      //  // Unstable assertion: assertNull(modelBean0.getUpdateMethod());
      //  // Unstable assertion: assertEquals("json", modelBean0.getReader());
      //  // Unstable assertion: assertNull(modelBean0.getCreateMethod());
      //  // Unstable assertion: assertNull(modelBean0.getMessageProperty());
      //  // Unstable assertion: assertNotNull(modelBean0);
      
      Class<Object> class0 = Object.class;
      ModelBean modelBean1 = ModelGenerator.createModel(class0);
      //  // Unstable assertion: assertFalse(modelBean1.isDisablePagingParameters());
      //  // Unstable assertion: assertNull(modelBean1.getRootProperty());
      //  // Unstable assertion: assertFalse(modelBean1.isPaging());
      //  // Unstable assertion: assertNull(modelBean1.getVersionProperty());
      //  // Unstable assertion: assertNull(modelBean1.getSuccessProperty());
      //  // Unstable assertion: assertNull(modelBean1.getMessageProperty());
      //  // Unstable assertion: assertNull(modelBean1.getIdProperty());
      //  // Unstable assertion: assertEquals("d1WtV(zz", modelBean1.getReadMethod());
      //  // Unstable assertion: assertEquals("json", modelBean1.getWriter());
      //  // Unstable assertion: assertNull(modelBean1.getTotalProperty());
      //  // Unstable assertion: assertNull(modelBean1.getDestroyMethod());
      //  // Unstable assertion: assertNull(modelBean1.getCreateMethod());
      //  // Unstable assertion: assertEquals("json", modelBean1.getReader());
      //  // Unstable assertion: assertFalse(modelBean1.isClientIdPropertyAddToWriter());
      //  // Unstable assertion: assertNull(modelBean1.getUpdateMethod());
      //  // Unstable assertion: assertNull(modelBean1.getClientIdProperty());
      //  // Unstable assertion: assertEquals("defaultValue", modelBean1.getIdentifier());
      //  // Unstable assertion: assertTrue(modelBean1.isAutodetectTypes());
      //  // Unstable assertion: assertNull(modelBean1.getWriteAllFields());
      //  // Unstable assertion: assertEquals("java.lang.Object", modelBean1.getName());
      //  // Unstable assertion: assertNotSame(modelBean1, modelBean0);
      //  // Unstable assertion: assertFalse(modelBean1.equals((Object)modelBean0));
      //  // Unstable assertion: assertNotNull(modelBean1);
      
      modelBean1.setClientIdProperty("_DfY]L");
      //  // Unstable assertion: assertFalse(modelBean1.isDisablePagingParameters());
      //  // Unstable assertion: assertNull(modelBean1.getRootProperty());
      //  // Unstable assertion: assertFalse(modelBean1.isPaging());
      //  // Unstable assertion: assertNull(modelBean1.getVersionProperty());
      //  // Unstable assertion: assertNull(modelBean1.getSuccessProperty());
      //  // Unstable assertion: assertNull(modelBean1.getMessageProperty());
      //  // Unstable assertion: assertNull(modelBean1.getIdProperty());
      //  // Unstable assertion: assertEquals("d1WtV(zz", modelBean1.getReadMethod());
      //  // Unstable assertion: assertEquals("json", modelBean1.getWriter());
      //  // Unstable assertion: assertNull(modelBean1.getTotalProperty());
      //  // Unstable assertion: assertNull(modelBean1.getDestroyMethod());
      //  // Unstable assertion: assertEquals("_DfY]L", modelBean1.getClientIdProperty());
      //  // Unstable assertion: assertNull(modelBean1.getCreateMethod());
      //  // Unstable assertion: assertEquals("json", modelBean1.getReader());
      //  // Unstable assertion: assertFalse(modelBean1.isClientIdPropertyAddToWriter());
      //  // Unstable assertion: assertNull(modelBean1.getUpdateMethod());
      //  // Unstable assertion: assertEquals("defaultValue", modelBean1.getIdentifier());
      //  // Unstable assertion: assertTrue(modelBean1.isAutodetectTypes());
      //  // Unstable assertion: assertNull(modelBean1.getWriteAllFields());
      //  // Unstable assertion: assertEquals("java.lang.Object", modelBean1.getName());
      //  // Unstable assertion: assertNotSame(modelBean1, modelBean0);
      //  // Unstable assertion: assertFalse(modelBean1.equals((Object)modelBean0));
      
      String string0 = ModelGenerator.generateJavascript(modelBean1, outputConfig0);
      //  // Unstable assertion: assertFalse(outputConfig0.isSurroundApiWithQuotes());
      //  // Unstable assertion: assertEquals(OutputFormat.EXTJS4, outputConfig0.getOutputFormat());
      //  // Unstable assertion: assertFalse(outputConfig0.isUseSingleQuotes());
      //  // Unstable assertion: assertNull(outputConfig0.getLineEnding());
      //  // Unstable assertion: assertNull(outputConfig0.getIncludeValidation());
      //  // Unstable assertion: assertFalse(outputConfig0.isDebug());
      //  // Unstable assertion: assertFalse(modelBean1.isDisablePagingParameters());
      //  // Unstable assertion: assertNull(modelBean1.getRootProperty());
      //  // Unstable assertion: assertFalse(modelBean1.isPaging());
      //  // Unstable assertion: assertNull(modelBean1.getVersionProperty());
      //  // Unstable assertion: assertNull(modelBean1.getSuccessProperty());
      //  // Unstable assertion: assertNull(modelBean1.getMessageProperty());
      //  // Unstable assertion: assertNull(modelBean1.getIdProperty());
      //  // Unstable assertion: assertEquals("d1WtV(zz", modelBean1.getReadMethod());
      //  // Unstable assertion: assertEquals("json", modelBean1.getWriter());
      //  // Unstable assertion: assertNull(modelBean1.getTotalProperty());
      //  // Unstable assertion: assertNull(modelBean1.getDestroyMethod());
      //  // Unstable assertion: assertEquals("_DfY]L", modelBean1.getClientIdProperty());
      //  // Unstable assertion: assertNull(modelBean1.getCreateMethod());
      //  // Unstable assertion: assertEquals("json", modelBean1.getReader());
      //  // Unstable assertion: assertFalse(modelBean1.isClientIdPropertyAddToWriter());
      //  // Unstable assertion: assertNull(modelBean1.getUpdateMethod());
      //  // Unstable assertion: assertEquals("defaultValue", modelBean1.getIdentifier());
      //  // Unstable assertion: assertTrue(modelBean1.isAutodetectTypes());
      //  // Unstable assertion: assertNull(modelBean1.getWriteAllFields());
      //  // Unstable assertion: assertEquals("java.lang.Object", modelBean1.getName());
      //  // Unstable assertion: assertNotSame(modelBean1, modelBean0);
      //  // Unstable assertion: assertFalse(modelBean1.equals((Object)modelBean0));
      //  // Unstable assertion: assertNotNull(string0);
  }

  @Test(timeout = 4000000)
  public void test094()  throws Throwable  {
      HttpServletRequest httpServletRequest0 = mock(HttpServletRequest.class, new ViolatedAssumptionAnswer());
      doReturn("\"0b2a94f0e8e3758pca185~971be592ea2\"", (String) null).when(httpServletRequest0).getHeader(anyString());
      doReturn("com.fasterxml.jackson.databind.ser.VirtualBeanPropertyWriter").when(httpServletRequest0).getRequestURI();
      HttpServletRequestWrapper httpServletRequestWrapper0 = new HttpServletRequestWrapper(httpServletRequest0);
      assertNotNull(httpServletRequestWrapper0);
      
      String string0 = httpServletRequestWrapper0.getRequestURI();
      assertNotNull(string0);
      assertEquals("com.fasterxml.jackson.databind.ser.VirtualBeanPropertyWriter", string0);
      
      Class<Object> class0 = Object.class;
      IncludeValidation includeValidation0 = IncludeValidation.ALL;
      ModelBean modelBean0 = ModelGenerator.createModel(class0, includeValidation0);
      assertNull(modelBean0.getCreateMethod());
      assertEquals("java.lang.Object", modelBean0.getName());
      assertNull(modelBean0.getUpdateMethod());
      assertEquals("json", modelBean0.getReader());
      assertNull(modelBean0.getTotalProperty());
      assertNull(modelBean0.getDestroyMethod());
      assertNull(modelBean0.getWriteAllFields());
      assertNull(modelBean0.getIdProperty());
      assertNull(modelBean0.getClientIdProperty());
      assertEquals("Ext.data.Model", modelBean0.getExtend());
      assertNull(modelBean0.getReadMethod());
      assertTrue(modelBean0.isAutodetectTypes());
      assertFalse(modelBean0.isDisablePagingParameters());
      assertFalse(modelBean0.isClientIdPropertyAddToWriter());
      assertNull(modelBean0.getRootProperty());
      assertNull(modelBean0.getIdentifier());
      assertNull(modelBean0.getVersionProperty());
      assertFalse(modelBean0.isPaging());
      assertNull(modelBean0.getSuccessProperty());
      assertEquals("json", modelBean0.getWriter());
      assertNull(modelBean0.getMessageProperty());
      assertNotNull(modelBean0);
      
      ServletOutputStream servletOutputStream0 = mock(ServletOutputStream.class, new ViolatedAssumptionAnswer());
      HttpServletResponse httpServletResponse0 = mock(HttpServletResponse.class, new ViolatedAssumptionAnswer());
      doReturn(servletOutputStream0, (ServletOutputStream) null).when(httpServletResponse0).getOutputStream();
      HttpServletResponseWrapper httpServletResponseWrapper0 = new HttpServletResponseWrapper(httpServletResponse0);
      assertNotNull(httpServletResponseWrapper0);
      
      HttpServletResponseWrapper httpServletResponseWrapper1 = new HttpServletResponseWrapper(httpServletResponseWrapper0);
      assertFalse(httpServletResponseWrapper1.equals((Object)httpServletResponseWrapper0));
      assertNotNull(httpServletResponseWrapper1);
      
      OutputFormat outputFormat0 = OutputFormat.TOUCH2;
      ModelGenerator.writeModel((HttpServletRequest) httpServletRequestWrapper0, (HttpServletResponse) httpServletResponseWrapper0, modelBean0, outputFormat0, false);
      assertNull(modelBean0.getCreateMethod());
      assertEquals("java.lang.Object", modelBean0.getName());
      assertNull(modelBean0.getUpdateMethod());
      assertEquals("json", modelBean0.getReader());
      assertNull(modelBean0.getTotalProperty());
      assertNull(modelBean0.getDestroyMethod());
      assertNull(modelBean0.getWriteAllFields());
      assertNull(modelBean0.getIdProperty());
      assertNull(modelBean0.getClientIdProperty());
      assertEquals("Ext.data.Model", modelBean0.getExtend());
      assertNull(modelBean0.getReadMethod());
      assertTrue(modelBean0.isAutodetectTypes());
      assertFalse(modelBean0.isDisablePagingParameters());
      assertFalse(modelBean0.isClientIdPropertyAddToWriter());
      assertNull(modelBean0.getRootProperty());
      assertNull(modelBean0.getIdentifier());
      assertNull(modelBean0.getVersionProperty());
      assertFalse(modelBean0.isPaging());
      assertNull(modelBean0.getSuccessProperty());
      assertEquals("json", modelBean0.getWriter());
      assertNull(modelBean0.getMessageProperty());
      assertNotSame(httpServletResponseWrapper0, httpServletResponseWrapper1);
      assertFalse(httpServletResponseWrapper0.equals((Object)httpServletResponseWrapper1));
      
      String string1 = ModelGenerator.generateJavascript(modelBean0, outputFormat0, false);
      assertNull(modelBean0.getCreateMethod());
      assertEquals("java.lang.Object", modelBean0.getName());
      assertNull(modelBean0.getUpdateMethod());
      assertEquals("json", modelBean0.getReader());
      assertNull(modelBean0.getTotalProperty());
      assertNull(modelBean0.getDestroyMethod());
      assertNull(modelBean0.getWriteAllFields());
      assertNull(modelBean0.getIdProperty());
      assertNull(modelBean0.getClientIdProperty());
      assertEquals("Ext.data.Model", modelBean0.getExtend());
      assertNull(modelBean0.getReadMethod());
      assertTrue(modelBean0.isAutodetectTypes());
      assertFalse(modelBean0.isDisablePagingParameters());
      assertFalse(modelBean0.isClientIdPropertyAddToWriter());
      assertNull(modelBean0.getRootProperty());
      assertNull(modelBean0.getIdentifier());
      assertNull(modelBean0.getVersionProperty());
      assertFalse(modelBean0.isPaging());
      assertNull(modelBean0.getSuccessProperty());
      assertEquals("json", modelBean0.getWriter());
      assertNull(modelBean0.getMessageProperty());
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("Ext.define(\"java.lang.Object\",{extend:\"Ext.data.Model\",config:{fields:[]}});", string1);
      
      Class<Object> class1 = Object.class;
      IncludeValidation includeValidation1 = IncludeValidation.ALL;
      // Undeclared exception!
      try { 
        ModelGenerator.writeModel((HttpServletRequest) httpServletRequestWrapper0, (HttpServletResponse) httpServletResponseWrapper0, (Class<?>) class1, outputFormat0, includeValidation1, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("ch.rasc.extclassgenerator.ModelGenerator", e);
      }
  }

  @Test(timeout = 4000000)
  public void test095()  throws Throwable  {
      Class<Object> class0 = Object.class;
      IncludeValidation includeValidation0 = IncludeValidation.BUILTIN;
      ModelBean modelBean0 = ModelGenerator.createModel(class0, includeValidation0);
      //  // Unstable assertion: assertEquals("json", modelBean0.getWriter());
      //  // Unstable assertion: assertNull(modelBean0.getSuccessProperty());
      //  // Unstable assertion: assertFalse(modelBean0.isPaging());
      //  // Unstable assertion: assertNull(modelBean0.getMessageProperty());
      //  // Unstable assertion: assertEquals("json", modelBean0.getReader());
      //  // Unstable assertion: assertNull(modelBean0.getVersionProperty());
      //  // Unstable assertion: assertNull(modelBean0.getWriteAllFields());
      //  // Unstable assertion: assertTrue(modelBean0.isAutodetectTypes());
      //  // Unstable assertion: assertNull(modelBean0.getUpdateMethod());
      //  // Unstable assertion: assertEquals("Ext.data.Model", modelBean0.getExtend());
      //  // Unstable assertion: assertEquals("java.lang.Object", modelBean0.getName());
      //  // Unstable assertion: assertNull(modelBean0.getClientIdProperty());
      //  // Unstable assertion: assertNull(modelBean0.getCreateMethod());
      //  // Unstable assertion: assertNull(modelBean0.getTotalProperty());
      //  // Unstable assertion: assertNull(modelBean0.getDestroyMethod());
      //  // Unstable assertion: assertFalse(modelBean0.isDisablePagingParameters());
      //  // Unstable assertion: assertNull(modelBean0.getRootProperty());
      //  // Unstable assertion: assertFalse(modelBean0.isClientIdPropertyAddToWriter());
      //  // Unstable assertion: assertNull(modelBean0.getIdentifier());
      //  // Unstable assertion: assertNull(modelBean0.getIdProperty());
      //  // Unstable assertion: assertEquals("d1WtV(zz", modelBean0.getReadMethod());
      //  // Unstable assertion: assertNotNull(modelBean0);
      
      HttpServletRequest httpServletRequest0 = mock(HttpServletRequest.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(httpServletRequest0).getRealPath(anyString());
      doReturn(false).when(httpServletRequest0).isAsyncSupported();
      HttpServletRequestWrapper httpServletRequestWrapper0 = new HttpServletRequestWrapper(httpServletRequest0);
      //  // Unstable assertion: assertNotNull(httpServletRequestWrapper0);
      
      boolean boolean0 = httpServletRequestWrapper0.isAsyncSupported();
      //  // Unstable assertion: assertFalse(boolean0);
      
      OutputConfig outputConfig0 = new OutputConfig();
      //  // Unstable assertion: assertNull(outputConfig0.getIncludeValidation());
      //  // Unstable assertion: assertNull(outputConfig0.getOutputFormat());
      //  // Unstable assertion: assertFalse(outputConfig0.isUseSingleQuotes());
      //  // Unstable assertion: assertFalse(outputConfig0.isDebug());
      //  // Unstable assertion: assertNull(outputConfig0.getLineEnding());
      //  // Unstable assertion: assertNotNull(outputConfig0);
      
      outputConfig0.setSurroundApiWithQuotes(true);
      //  // Unstable assertion: assertNull(outputConfig0.getIncludeValidation());
      //  // Unstable assertion: assertNull(outputConfig0.getOutputFormat());
      //  // Unstable assertion: assertFalse(outputConfig0.isUseSingleQuotes());
      //  // Unstable assertion: assertFalse(outputConfig0.isDebug());
      //  // Unstable assertion: assertNull(outputConfig0.getLineEnding());
      
      outputConfig0.setDebug(false);
      //  // Unstable assertion: assertNull(outputConfig0.getIncludeValidation());
      //  // Unstable assertion: assertNull(outputConfig0.getOutputFormat());
      //  // Unstable assertion: assertFalse(outputConfig0.isUseSingleQuotes());
      //  // Unstable assertion: assertFalse(outputConfig0.isDebug());
      //  // Unstable assertion: assertNull(outputConfig0.getLineEnding());
      
      ModelBean modelBean1 = new ModelBean();
      //  // Unstable assertion: assertEquals("json", modelBean1.getReader());
      //  // Unstable assertion: assertNull(modelBean1.getIdProperty());
      //  // Unstable assertion: assertNull(modelBean1.getWriteAllFields());
      //  // Unstable assertion: assertNull(modelBean1.getReadMethod());
      //  // Unstable assertion: assertNull(modelBean1.getCreateMethod());
      //  // Unstable assertion: assertFalse(modelBean1.isClientIdPropertyAddToWriter());
      //  // Unstable assertion: assertNull(modelBean1.getUpdateMethod());
      //  // Unstable assertion: assertFalse(modelBean1.isPaging());
      //  // Unstable assertion: assertTrue(modelBean1.isAutodetectTypes());
      //  // Unstable assertion: assertNull(modelBean1.getClientIdProperty());
      //  // Unstable assertion: assertEquals("Ext.data.Model", modelBean1.getExtend());
      //  // Unstable assertion: assertNull(modelBean1.getSuccessProperty());
      //  // Unstable assertion: assertEquals("json", modelBean1.getWriter());
      //  // Unstable assertion: assertNull(modelBean1.getIdentifier());
      //  // Unstable assertion: assertNull(modelBean1.getMessageProperty());
      //  // Unstable assertion: assertNull(modelBean1.getVersionProperty());
      //  // Unstable assertion: assertFalse(modelBean1.isDisablePagingParameters());
      //  // Unstable assertion: assertNull(modelBean1.getName());
      //  // Unstable assertion: assertNull(modelBean1.getDestroyMethod());
      //  // Unstable assertion: assertNull(modelBean1.getRootProperty());
      //  // Unstable assertion: assertNull(modelBean1.getTotalProperty());
      //  // Unstable assertion: assertFalse(modelBean1.equals((Object)modelBean0));
      //  // Unstable assertion: assertNotNull(modelBean1);
      
      Class<String> class1 = String.class;
      OutputFormat outputFormat0 = OutputFormat.EXTJS5;
      String string0 = ModelGenerator.generateJavascript(class1, outputFormat0, true);
      //  // Unstable assertion: assertNotNull(string0);
      //  // Unstable assertion: assertEquals("Ext.define(\"java.lang.String\",\r\n{\n  extend : \"Ext.data.Model\",\n  fields : [ ]\n});", string0);
      
      String string1 = ModelGenerator.generateJavascript(class0, outputFormat0, includeValidation0, false);
      //  // Unstable assertion: assertFalse(string1.equals((Object)string0));
      //  // Unstable assertion: assertNotNull(string1);
      //  // Unstable assertion: assertEquals("Ext.define(\"java.lang.Object\",{extend:\"Ext.data.Model\",fields:[]});", string1);
      
      String string2 = ModelGenerator.trimToNull("Failed to introspect meta-annotation ");
      //  // Unstable assertion: assertFalse(string2.equals((Object)string0));
      //  // Unstable assertion: assertFalse(string2.equals((Object)string1));
      //  // Unstable assertion: assertNotNull(string2);
      //  // Unstable assertion: assertEquals("Failed to introspect meta-annotation", string2);
      
      String string3 = ModelGenerator.generateJavascript(modelBean1, outputFormat0, true);
      //  // Unstable assertion: assertEquals("json", modelBean1.getReader());
      //  // Unstable assertion: assertNull(modelBean1.getIdProperty());
      //  // Unstable assertion: assertNull(modelBean1.getWriteAllFields());
      //  // Unstable assertion: assertNull(modelBean1.getReadMethod());
      //  // Unstable assertion: assertNull(modelBean1.getCreateMethod());
      //  // Unstable assertion: assertFalse(modelBean1.isClientIdPropertyAddToWriter());
      //  // Unstable assertion: assertNull(modelBean1.getUpdateMethod());
      //  // Unstable assertion: assertFalse(modelBean1.isPaging());
      //  // Unstable assertion: assertTrue(modelBean1.isAutodetectTypes());
      //  // Unstable assertion: assertNull(modelBean1.getClientIdProperty());
      //  // Unstable assertion: assertEquals("Ext.data.Model", modelBean1.getExtend());
      //  // Unstable assertion: assertNull(modelBean1.getSuccessProperty());
      //  // Unstable assertion: assertEquals("json", modelBean1.getWriter());
      //  // Unstable assertion: assertNull(modelBean1.getIdentifier());
      //  // Unstable assertion: assertNull(modelBean1.getMessageProperty());
      //  // Unstable assertion: assertNull(modelBean1.getVersionProperty());
      //  // Unstable assertion: assertFalse(modelBean1.isDisablePagingParameters());
      //  // Unstable assertion: assertNull(modelBean1.getName());
      //  // Unstable assertion: assertNull(modelBean1.getDestroyMethod());
      //  // Unstable assertion: assertNull(modelBean1.getRootProperty());
      //  // Unstable assertion: assertNull(modelBean1.getTotalProperty());
      //  // Unstable assertion: assertNotSame(modelBean1, modelBean0);
      //  // Unstable assertion: assertFalse(modelBean1.equals((Object)modelBean0));
      //  // Unstable assertion: assertFalse(string3.equals((Object)string2));
      //  // Unstable assertion: assertFalse(string3.equals((Object)string0));
      //  // Unstable assertion: assertFalse(string3.equals((Object)string1));
      //  // Unstable assertion: assertNotNull(string3);
      //  // Unstable assertion: assertEquals("Ext.define(\"null\",\r\n{\n  extend : \"Ext.data.Model\",\n  fields : [ ]\n});", string3);
      
      HttpServletRequestWrapper httpServletRequestWrapper1 = new HttpServletRequestWrapper(httpServletRequestWrapper0);
      //  // Unstable assertion: assertFalse(httpServletRequestWrapper1.equals((Object)httpServletRequestWrapper0));
      //  // Unstable assertion: assertNotNull(httpServletRequestWrapper1);
      
      String string4 = httpServletRequestWrapper0.getRealPath("Failed to introspect meta-annotation");
      //  // Unstable assertion: assertNotSame(httpServletRequestWrapper0, httpServletRequestWrapper1);
      //  // Unstable assertion: assertFalse(httpServletRequestWrapper0.equals((Object)httpServletRequestWrapper1));
      //  // Unstable assertion: assertNull(string4);
      
      HttpServletRequestWrapper httpServletRequestWrapper2 = new HttpServletRequestWrapper(httpServletRequestWrapper0);
      //  // Unstable assertion: assertFalse(httpServletRequestWrapper2.equals((Object)httpServletRequestWrapper0));
      //  // Unstable assertion: assertFalse(httpServletRequestWrapper2.equals((Object)httpServletRequestWrapper1));
      //  // Unstable assertion: assertFalse(httpServletRequestWrapper0.equals((Object)httpServletRequestWrapper1));
      //  // Unstable assertion: assertNotNull(httpServletRequestWrapper2);
  }

  @Test(timeout = 4000000)
  public void test096()  throws Throwable  {
      Class<String> class0 = String.class;
      OutputConfig outputConfig0 = new OutputConfig();
      assertFalse(outputConfig0.isUseSingleQuotes());
      assertNull(outputConfig0.getLineEnding());
      assertNull(outputConfig0.getOutputFormat());
      assertFalse(outputConfig0.isSurroundApiWithQuotes());
      assertNull(outputConfig0.getIncludeValidation());
      assertFalse(outputConfig0.isDebug());
      assertNotNull(outputConfig0);
      
      // Undeclared exception!
      try { 
        ModelGenerator.writeModel((HttpServletRequest) null, (HttpServletResponse) null, class0, outputConfig0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // includeValidation must not be null
         //
         verifyException("org.springframework.util.Assert", e);
      }
  }

  @Test(timeout = 4000000)
  public void test097()  throws Throwable  {
      Class<ModelFieldBean> class0 = ModelFieldBean.class;
      OutputFormat outputFormat0 = OutputFormat.EXTJS4;
      String string0 = ModelGenerator.generateJavascript(class0, outputFormat0, true);
      assertNotNull(string0);
      assertEquals("Ext.define(\"ch.rasc.extclassgenerator.ModelFieldBean\",\r\n{\n  extend : \"Ext.data.Model\",\n  fields : [ {\n    name : \"allowBlank\",\n    type : \"boolean\"\n  }, {\n    name : \"allowNull\",\n    type : \"boolean\"\n  }, {\n    name : \"critical\",\n    type : \"boolean\"\n  }, {\n    name : \"persist\",\n    type : \"boolean\"\n  }, {\n    name : \"unique\",\n    type : \"boolean\"\n  }, {\n    name : \"useNull\",\n    type : \"boolean\"\n  }, {\n    name : \"calculate\",\n    type : \"string\"\n  }, {\n    name : \"convert\",\n    type : \"string\"\n  }, {\n    name : \"dateFormat\",\n    type : \"string\"\n  }, {\n    name : \"mapping\",\n    type : \"string\"\n  }, {\n    name : \"name\",\n    type : \"string\"\n  }, {\n    name : \"type\",\n    type : \"string\"\n  } ]\n});", string0);
      
      ModelGenerator.clearCaches();
      OutputConfig outputConfig0 = new OutputConfig();
      assertNull(outputConfig0.getOutputFormat());
      assertFalse(outputConfig0.isUseSingleQuotes());
      assertNull(outputConfig0.getLineEnding());
      assertNull(outputConfig0.getIncludeValidation());
      assertFalse(outputConfig0.isDebug());
      assertFalse(outputConfig0.isSurroundApiWithQuotes());
      assertNotNull(outputConfig0);
      
      // Undeclared exception!
      try { 
        ModelGenerator.createModel(class0, outputConfig0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // includeValidation must not be null
         //
         verifyException("org.springframework.util.Assert", e);
      }
  }

  @Test(timeout = 4000000)
  public void test098()  throws Throwable  {
      Class<Object> class0 = Object.class;
      IncludeValidation includeValidation0 = IncludeValidation.BUILTIN;
      ModelBean modelBean0 = ModelGenerator.createModel(class0, includeValidation0);
      assertNull(modelBean0.getCreateMethod());
      assertNull(modelBean0.getDestroyMethod());
      assertEquals("java.lang.Object", modelBean0.getName());
      assertNull(modelBean0.getTotalProperty());
      assertNull(modelBean0.getClientIdProperty());
      assertNull(modelBean0.getWriteAllFields());
      assertNull(modelBean0.getUpdateMethod());
      assertEquals("json", modelBean0.getReader());
      assertFalse(modelBean0.isPaging());
      assertFalse(modelBean0.isDisablePagingParameters());
      assertNull(modelBean0.getVersionProperty());
      assertNull(modelBean0.getRootProperty());
      assertNull(modelBean0.getMessageProperty());
      assertNull(modelBean0.getIdentifier());
      assertNull(modelBean0.getSuccessProperty());
      assertTrue(modelBean0.isAutodetectTypes());
      assertEquals("json", modelBean0.getWriter());
      assertNull(modelBean0.getIdProperty());
      assertNull(modelBean0.getReadMethod());
      assertFalse(modelBean0.isClientIdPropertyAddToWriter());
      assertNotNull(modelBean0);
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = "E6{'@";
      modelBean0.setHasMany(stringArray0);
      assertNull(modelBean0.getCreateMethod());
      assertNull(modelBean0.getDestroyMethod());
      assertEquals("java.lang.Object", modelBean0.getName());
      assertNull(modelBean0.getTotalProperty());
      assertNull(modelBean0.getClientIdProperty());
      assertNull(modelBean0.getWriteAllFields());
      assertNull(modelBean0.getUpdateMethod());
      assertEquals("json", modelBean0.getReader());
      assertFalse(modelBean0.isPaging());
      assertFalse(modelBean0.isDisablePagingParameters());
      assertNull(modelBean0.getVersionProperty());
      assertNull(modelBean0.getRootProperty());
      assertNull(modelBean0.getMessageProperty());
      assertNull(modelBean0.getIdentifier());
      assertNull(modelBean0.getSuccessProperty());
      assertTrue(modelBean0.isAutodetectTypes());
      assertEquals("json", modelBean0.getWriter());
      assertNull(modelBean0.getIdProperty());
      assertNull(modelBean0.getReadMethod());
      assertFalse(modelBean0.isClientIdPropertyAddToWriter());
      assertEquals(1, stringArray0.length);
      
      modelBean0.setExtend("Unable to parse port");
      assertNull(modelBean0.getCreateMethod());
      assertNull(modelBean0.getDestroyMethod());
      assertEquals("java.lang.Object", modelBean0.getName());
      assertNull(modelBean0.getTotalProperty());
      assertNull(modelBean0.getClientIdProperty());
      assertNull(modelBean0.getWriteAllFields());
      assertNull(modelBean0.getUpdateMethod());
      assertEquals("json", modelBean0.getReader());
      assertFalse(modelBean0.isPaging());
      assertFalse(modelBean0.isDisablePagingParameters());
      assertNull(modelBean0.getVersionProperty());
      assertNull(modelBean0.getRootProperty());
      assertNull(modelBean0.getMessageProperty());
      assertNull(modelBean0.getIdentifier());
      assertNull(modelBean0.getSuccessProperty());
      assertTrue(modelBean0.isAutodetectTypes());
      assertEquals("json", modelBean0.getWriter());
      assertNull(modelBean0.getIdProperty());
      assertNull(modelBean0.getReadMethod());
      assertFalse(modelBean0.isClientIdPropertyAddToWriter());
      
      modelBean0.setClientIdPropertyAddToWriter(false);
      assertNull(modelBean0.getCreateMethod());
      assertNull(modelBean0.getDestroyMethod());
      assertEquals("java.lang.Object", modelBean0.getName());
      assertNull(modelBean0.getTotalProperty());
      assertNull(modelBean0.getClientIdProperty());
      assertNull(modelBean0.getWriteAllFields());
      assertNull(modelBean0.getUpdateMethod());
      assertEquals("json", modelBean0.getReader());
      assertFalse(modelBean0.isPaging());
      assertFalse(modelBean0.isDisablePagingParameters());
      assertNull(modelBean0.getVersionProperty());
      assertNull(modelBean0.getRootProperty());
      assertNull(modelBean0.getMessageProperty());
      assertNull(modelBean0.getIdentifier());
      assertNull(modelBean0.getSuccessProperty());
      assertTrue(modelBean0.isAutodetectTypes());
      assertEquals("json", modelBean0.getWriter());
      assertNull(modelBean0.getIdProperty());
      assertNull(modelBean0.getReadMethod());
      assertFalse(modelBean0.isClientIdPropertyAddToWriter());
      
      OutputConfig outputConfig0 = new OutputConfig();
      assertNull(outputConfig0.getLineEnding());
      assertFalse(outputConfig0.isUseSingleQuotes());
      assertNull(outputConfig0.getIncludeValidation());
      assertFalse(outputConfig0.isDebug());
      assertFalse(outputConfig0.isSurroundApiWithQuotes());
      assertNull(outputConfig0.getOutputFormat());
      assertNotNull(outputConfig0);
      
      String string0 = ModelGenerator.generateJavascript(modelBean0, outputConfig0);
      assertNull(modelBean0.getCreateMethod());
      assertNull(modelBean0.getDestroyMethod());
      assertEquals("java.lang.Object", modelBean0.getName());
      assertNull(modelBean0.getTotalProperty());
      assertNull(modelBean0.getClientIdProperty());
      assertNull(modelBean0.getWriteAllFields());
      assertNull(modelBean0.getUpdateMethod());
      assertEquals("json", modelBean0.getReader());
      assertFalse(modelBean0.isPaging());
      assertFalse(modelBean0.isDisablePagingParameters());
      assertNull(modelBean0.getVersionProperty());
      assertNull(modelBean0.getRootProperty());
      assertNull(modelBean0.getMessageProperty());
      assertNull(modelBean0.getIdentifier());
      assertNull(modelBean0.getSuccessProperty());
      assertTrue(modelBean0.isAutodetectTypes());
      assertEquals("json", modelBean0.getWriter());
      assertNull(modelBean0.getIdProperty());
      assertNull(modelBean0.getReadMethod());
      assertFalse(modelBean0.isClientIdPropertyAddToWriter());
      assertNull(outputConfig0.getLineEnding());
      assertFalse(outputConfig0.isUseSingleQuotes());
      assertNull(outputConfig0.getIncludeValidation());
      assertFalse(outputConfig0.isDebug());
      assertFalse(outputConfig0.isSurroundApiWithQuotes());
      assertNull(outputConfig0.getOutputFormat());
      assertNotNull(string0);
      assertEquals("Ext.define(\"java.lang.Object\",{extend:\"Unable to parse port\",config:{fields:[],hasMany:[\"E6{'@\"]}});", string0);
      
      String string1 = ModelGenerator.generateJavascript(modelBean0, outputConfig0);
      assertNull(modelBean0.getCreateMethod());
      assertNull(modelBean0.getDestroyMethod());
      assertEquals("java.lang.Object", modelBean0.getName());
      assertNull(modelBean0.getTotalProperty());
      assertNull(modelBean0.getClientIdProperty());
      assertNull(modelBean0.getWriteAllFields());
      assertNull(modelBean0.getUpdateMethod());
      assertEquals("json", modelBean0.getReader());
      assertFalse(modelBean0.isPaging());
      assertFalse(modelBean0.isDisablePagingParameters());
      assertNull(modelBean0.getVersionProperty());
      assertNull(modelBean0.getRootProperty());
      assertNull(modelBean0.getMessageProperty());
      assertNull(modelBean0.getIdentifier());
      assertNull(modelBean0.getSuccessProperty());
      assertTrue(modelBean0.isAutodetectTypes());
      assertEquals("json", modelBean0.getWriter());
      assertNull(modelBean0.getIdProperty());
      assertNull(modelBean0.getReadMethod());
      assertFalse(modelBean0.isClientIdPropertyAddToWriter());
      assertNull(outputConfig0.getLineEnding());
      assertFalse(outputConfig0.isUseSingleQuotes());
      assertNull(outputConfig0.getIncludeValidation());
      assertFalse(outputConfig0.isDebug());
      assertFalse(outputConfig0.isSurroundApiWithQuotes());
      assertNull(outputConfig0.getOutputFormat());
      assertNotNull(string1);
      assertEquals("Ext.define(\"java.lang.Object\",{extend:\"Unable to parse port\",config:{fields:[],hasMany:[\"E6{'@\"]}});", string1);
      
      HttpServletRequest httpServletRequest0 = mock(HttpServletRequest.class, new ViolatedAssumptionAnswer());
      HttpServletRequestWrapper httpServletRequestWrapper0 = new HttpServletRequestWrapper(httpServletRequest0);
      assertNotNull(httpServletRequestWrapper0);
      
      HttpServletResponse httpServletResponse0 = mock(HttpServletResponse.class, new ViolatedAssumptionAnswer());
      HttpServletResponseWrapper httpServletResponseWrapper0 = new HttpServletResponseWrapper(httpServletResponse0);
      assertNotNull(httpServletResponseWrapper0);
      
      Class<Object> class1 = Object.class;
      // Undeclared exception!
      try { 
        ModelGenerator.writeModel((HttpServletRequest) httpServletRequestWrapper0, (HttpServletResponse) httpServletResponseWrapper0, (Class<?>) class1, outputConfig0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // includeValidation must not be null
         //
         verifyException("org.springframework.util.Assert", e);
      }
  }

  @Test(timeout = 4000000)
  public void test099()  throws Throwable  {
      HttpServletResponse httpServletResponse0 = mock(HttpServletResponse.class, new ViolatedAssumptionAnswer());
      doReturn((ServletOutputStream) null, (ServletOutputStream) null).when(httpServletResponse0).getOutputStream();
      HttpServletRequest httpServletRequest0 = mock(HttpServletRequest.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(httpServletRequest0).getHeader(anyString());
      doReturn((String) null).when(httpServletRequest0).getMethod();
      HttpServletRequestWrapper httpServletRequestWrapper0 = new HttpServletRequestWrapper(httpServletRequest0);
      assertNotNull(httpServletRequestWrapper0);
      
      HttpServletRequestWrapper httpServletRequestWrapper1 = new HttpServletRequestWrapper(httpServletRequestWrapper0);
      assertFalse(httpServletRequestWrapper1.equals((Object)httpServletRequestWrapper0));
      assertNotNull(httpServletRequestWrapper1);
      
      HttpServletResponseWrapper httpServletResponseWrapper0 = new HttpServletResponseWrapper(httpServletResponse0);
      assertNotNull(httpServletResponseWrapper0);
      
      ServletResponseWrapper servletResponseWrapper0 = new ServletResponseWrapper(httpServletResponseWrapper0);
      assertNotNull(servletResponseWrapper0);
      
      ServletOutputStream servletOutputStream0 = servletResponseWrapper0.getOutputStream();
      assertNull(servletOutputStream0);
      
      HttpServletResponseWrapper httpServletResponseWrapper1 = new HttpServletResponseWrapper(httpServletResponseWrapper0);
      assertFalse(httpServletResponseWrapper1.equals((Object)httpServletResponseWrapper0));
      assertNotNull(httpServletResponseWrapper1);
      
      String string0 = httpServletRequestWrapper1.getMethod();
      assertNotSame(httpServletRequestWrapper0, httpServletRequestWrapper1);
      assertNotSame(httpServletRequestWrapper1, httpServletRequestWrapper0);
      assertFalse(httpServletRequestWrapper0.equals((Object)httpServletRequestWrapper1));
      assertFalse(httpServletRequestWrapper1.equals((Object)httpServletRequestWrapper0));
      assertNull(string0);
      
      Class<ModelFieldBean> class0 = ModelFieldBean.class;
      httpServletResponseWrapper0.setCharacterEncoding((String) null);
      assertNotSame(httpServletResponseWrapper0, httpServletResponseWrapper1);
      assertFalse(httpServletResponseWrapper0.equals((Object)httpServletResponseWrapper1));
      
      IncludeValidation includeValidation0 = IncludeValidation.NONE;
      ModelBean modelBean0 = ModelGenerator.createModel(class0, includeValidation0);
      assertEquals("ch.rasc.extclassgenerator.ModelFieldBean", modelBean0.getName());
      assertNull(modelBean0.getCreateMethod());
      assertNull(modelBean0.getDestroyMethod());
      assertFalse(modelBean0.isClientIdPropertyAddToWriter());
      assertEquals("json", modelBean0.getReader());
      assertNull(modelBean0.getUpdateMethod());
      assertNull(modelBean0.getClientIdProperty());
      assertNull(modelBean0.getWriteAllFields());
      assertNull(modelBean0.getReadMethod());
      assertTrue(modelBean0.isAutodetectTypes());
      assertFalse(modelBean0.isPaging());
      assertEquals("Ext.data.Model", modelBean0.getExtend());
      assertFalse(modelBean0.isDisablePagingParameters());
      assertNull(modelBean0.getRootProperty());
      assertNull(modelBean0.getSuccessProperty());
      assertNull(modelBean0.getVersionProperty());
      assertNull(modelBean0.getIdentifier());
      assertNull(modelBean0.getMessageProperty());
      assertEquals("json", modelBean0.getWriter());
      assertNull(modelBean0.getTotalProperty());
      assertNotNull(modelBean0);
      
      OutputFormat outputFormat0 = OutputFormat.EXTJS5;
      // Undeclared exception!
      try { 
        ModelGenerator.writeModel((HttpServletRequest) httpServletRequestWrapper0, (HttpServletResponse) httpServletResponseWrapper0, modelBean0, outputFormat0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("ch.rasc.extclassgenerator.ModelGenerator", e);
      }
  }

  @Test(timeout = 4000000)
  public void test100()  throws Throwable  {
      // Undeclared exception!
      try { 
        ModelGenerator.createModel((Class<?>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // clazz must not be null
         //
         verifyException("org.springframework.util.Assert", e);
      }
  }

  @Test(timeout = 4000000)
  public void test101()  throws Throwable  {
      Class<Object> class0 = Object.class;
      OutputConfig outputConfig0 = new OutputConfig();
      assertFalse(outputConfig0.isDebug());
      assertNull(outputConfig0.getIncludeValidation());
      assertFalse(outputConfig0.isSurroundApiWithQuotes());
      assertNull(outputConfig0.getOutputFormat());
      assertFalse(outputConfig0.isUseSingleQuotes());
      assertNull(outputConfig0.getLineEnding());
      assertNotNull(outputConfig0);
      
      // Undeclared exception!
      try { 
        ModelGenerator.createModel(class0, outputConfig0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // includeValidation must not be null
         //
         verifyException("org.springframework.util.Assert", e);
      }
  }

  @Test(timeout = 4000000)
  public void test102()  throws Throwable  {
      Class<CompilationUnit> class0 = CompilationUnit.class;
      OutputConfig outputConfig0 = new OutputConfig();
      assertNull(outputConfig0.getOutputFormat());
      assertFalse(outputConfig0.isUseSingleQuotes());
      assertNull(outputConfig0.getLineEnding());
      assertFalse(outputConfig0.isSurroundApiWithQuotes());
      assertFalse(outputConfig0.isDebug());
      assertNull(outputConfig0.getIncludeValidation());
      assertNotNull(outputConfig0);
      
      Class<CompilationUnit> class1 = CompilationUnit.class;
      ModelBean modelBean0 = ModelGenerator.createModel(class1);
      assertNull(modelBean0.getTotalProperty());
      assertEquals("json", modelBean0.getReader());
      assertNull(modelBean0.getWriteAllFields());
      assertNull(modelBean0.getIdProperty());
      assertNull(modelBean0.getDestroyMethod());
      assertNull(modelBean0.getClientIdProperty());
      assertTrue(modelBean0.isAutodetectTypes());
      assertEquals("Ext.data.Model", modelBean0.getExtend());
      assertFalse(modelBean0.isClientIdPropertyAddToWriter());
      assertNull(modelBean0.getReadMethod());
      assertFalse(modelBean0.isPaging());
      assertFalse(modelBean0.isDisablePagingParameters());
      assertNull(modelBean0.getVersionProperty());
      assertNull(modelBean0.getRootProperty());
      assertNull(modelBean0.getSuccessProperty());
      assertEquals("json", modelBean0.getWriter());
      assertNull(modelBean0.getIdentifier());
      assertEquals("com.github.javaparser.ast.CompilationUnit", modelBean0.getName());
      assertNull(modelBean0.getUpdateMethod());
      assertNull(modelBean0.getCreateMethod());
      assertNull(modelBean0.getMessageProperty());
      assertSame(class1, class0);
      assertNotNull(modelBean0);
      
      // Undeclared exception!
      try { 
        ModelGenerator.generateJavascript(class0, outputConfig0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // includeValidation must not be null
         //
         verifyException("org.springframework.util.Assert", e);
      }
  }

  @Test(timeout = 4000000)
  public void test103()  throws Throwable  {
      OutputConfig outputConfig0 = new OutputConfig();
      //  // Unstable assertion: assertFalse(outputConfig0.isDebug());
      //  // Unstable assertion: assertNull(outputConfig0.getIncludeValidation());
      //  // Unstable assertion: assertNull(outputConfig0.getOutputFormat());
      //  // Unstable assertion: assertFalse(outputConfig0.isSurroundApiWithQuotes());
      //  // Unstable assertion: assertFalse(outputConfig0.isUseSingleQuotes());
      //  // Unstable assertion: assertNull(outputConfig0.getLineEnding());
      //  // Unstable assertion: assertNotNull(outputConfig0);
      
      OutputFormat outputFormat0 = OutputFormat.EXTJS5;
      outputConfig0.setOutputFormat(outputFormat0);
      //  // Unstable assertion: assertFalse(outputConfig0.isDebug());
      //  // Unstable assertion: assertEquals(OutputFormat.EXTJS5, outputConfig0.getOutputFormat());
      //  // Unstable assertion: assertNull(outputConfig0.getIncludeValidation());
      //  // Unstable assertion: assertFalse(outputConfig0.isSurroundApiWithQuotes());
      //  // Unstable assertion: assertFalse(outputConfig0.isUseSingleQuotes());
      //  // Unstable assertion: assertNull(outputConfig0.getLineEnding());
      
      Class<Object> class0 = Object.class;
      IncludeValidation includeValidation0 = IncludeValidation.NONE;
      ModelBean modelBean0 = ModelGenerator.createModel(class0, includeValidation0);
      //  // Unstable assertion: assertEquals("defaultValue", modelBean0.getIdentifier());
      //  // Unstable assertion: assertTrue(modelBean0.isAutodetectTypes());
      //  // Unstable assertion: assertNull(modelBean0.getUpdateMethod());
      //  // Unstable assertion: assertEquals("java.lang.Object", modelBean0.getName());
      //  // Unstable assertion: assertEquals("_DfY]L", modelBean0.getClientIdProperty());
      //  // Unstable assertion: assertNull(modelBean0.getCreateMethod());
      //  // Unstable assertion: assertFalse(modelBean0.isDisablePagingParameters());
      //  // Unstable assertion: assertNull(modelBean0.getRootProperty());
      //  // Unstable assertion: assertFalse(modelBean0.isClientIdPropertyAddToWriter());
      //  // Unstable assertion: assertNull(modelBean0.getTotalProperty());
      //  // Unstable assertion: assertEquals("d1WtV(zz", modelBean0.getReadMethod());
      //  // Unstable assertion: assertNull(modelBean0.getIdProperty());
      //  // Unstable assertion: assertEquals("json", modelBean0.getWriter());
      //  // Unstable assertion: assertNull(modelBean0.getDestroyMethod());
      //  // Unstable assertion: assertNull(modelBean0.getSuccessProperty());
      //  // Unstable assertion: assertFalse(modelBean0.isPaging());
      //  // Unstable assertion: assertNull(modelBean0.getMessageProperty());
      //  // Unstable assertion: assertNull(modelBean0.getVersionProperty());
      //  // Unstable assertion: assertEquals("json", modelBean0.getReader());
      //  // Unstable assertion: assertNull(modelBean0.getWriteAllFields());
      //  // Unstable assertion: assertNotNull(modelBean0);
      
      OutputConfig outputConfig1 = new OutputConfig();
      //  // Unstable assertion: assertNull(outputConfig1.getOutputFormat());
      //  // Unstable assertion: assertFalse(outputConfig1.isUseSingleQuotes());
      //  // Unstable assertion: assertNull(outputConfig1.getLineEnding());
      //  // Unstable assertion: assertFalse(outputConfig1.isSurroundApiWithQuotes());
      //  // Unstable assertion: assertNull(outputConfig1.getIncludeValidation());
      //  // Unstable assertion: assertFalse(outputConfig1.isDebug());
      //  // Unstable assertion: assertFalse(outputConfig1.equals((Object)outputConfig0));
      //  // Unstable assertion: assertNotNull(outputConfig1);
      
      String string0 = ModelGenerator.generateJavascript(modelBean0, outputConfig0);
      //  // Unstable assertion: assertFalse(outputConfig0.isDebug());
      //  // Unstable assertion: assertEquals(OutputFormat.EXTJS5, outputConfig0.getOutputFormat());
      //  // Unstable assertion: assertNull(outputConfig0.getIncludeValidation());
      //  // Unstable assertion: assertFalse(outputConfig0.isSurroundApiWithQuotes());
      //  // Unstable assertion: assertFalse(outputConfig0.isUseSingleQuotes());
      //  // Unstable assertion: assertNull(outputConfig0.getLineEnding());
      //  // Unstable assertion: assertEquals("defaultValue", modelBean0.getIdentifier());
      //  // Unstable assertion: assertTrue(modelBean0.isAutodetectTypes());
      //  // Unstable assertion: assertNull(modelBean0.getUpdateMethod());
      //  // Unstable assertion: assertEquals("java.lang.Object", modelBean0.getName());
      //  // Unstable assertion: assertEquals("_DfY]L", modelBean0.getClientIdProperty());
      //  // Unstable assertion: assertNull(modelBean0.getCreateMethod());
      //  // Unstable assertion: assertFalse(modelBean0.isDisablePagingParameters());
      //  // Unstable assertion: assertNull(modelBean0.getRootProperty());
      //  // Unstable assertion: assertFalse(modelBean0.isClientIdPropertyAddToWriter());
      //  // Unstable assertion: assertNull(modelBean0.getTotalProperty());
      //  // Unstable assertion: assertEquals("d1WtV(zz", modelBean0.getReadMethod());
      //  // Unstable assertion: assertNull(modelBean0.getIdProperty());
      //  // Unstable assertion: assertEquals("json", modelBean0.getWriter());
      //  // Unstable assertion: assertNull(modelBean0.getDestroyMethod());
      //  // Unstable assertion: assertNull(modelBean0.getSuccessProperty());
      //  // Unstable assertion: assertFalse(modelBean0.isPaging());
      //  // Unstable assertion: assertNull(modelBean0.getMessageProperty());
      //  // Unstable assertion: assertNull(modelBean0.getVersionProperty());
      //  // Unstable assertion: assertEquals("json", modelBean0.getReader());
      //  // Unstable assertion: assertNull(modelBean0.getWriteAllFields());
      //  // Unstable assertion: assertNotSame(outputConfig0, outputConfig1);
      //  // Unstable assertion: assertFalse(outputConfig0.equals((Object)outputConfig1));
      //  // Unstable assertion: assertNotNull(string0);
      
      OutputConfig outputConfig2 = new OutputConfig();
      //  // Unstable assertion: assertNull(outputConfig2.getIncludeValidation());
      //  // Unstable assertion: assertNull(outputConfig2.getOutputFormat());
      //  // Unstable assertion: assertFalse(outputConfig2.isDebug());
      //  // Unstable assertion: assertFalse(outputConfig2.isSurroundApiWithQuotes());
      //  // Unstable assertion: assertFalse(outputConfig2.isUseSingleQuotes());
      //  // Unstable assertion: assertNull(outputConfig2.getLineEnding());
      //  // Unstable assertion: assertFalse(outputConfig2.equals((Object)outputConfig0));
      //  // Unstable assertion: assertTrue(outputConfig2.equals((Object)outputConfig1));
      //  // Unstable assertion: assertNotNull(outputConfig2);
      
      String string1 = ModelGenerator.generateJavascript(modelBean0, outputConfig1);
      //  // Unstable assertion: assertEquals("defaultValue", modelBean0.getIdentifier());
      //  // Unstable assertion: assertTrue(modelBean0.isAutodetectTypes());
      //  // Unstable assertion: assertNull(modelBean0.getUpdateMethod());
      //  // Unstable assertion: assertEquals("java.lang.Object", modelBean0.getName());
      //  // Unstable assertion: assertEquals("_DfY]L", modelBean0.getClientIdProperty());
      //  // Unstable assertion: assertNull(modelBean0.getCreateMethod());
      //  // Unstable assertion: assertFalse(modelBean0.isDisablePagingParameters());
      //  // Unstable assertion: assertNull(modelBean0.getRootProperty());
      //  // Unstable assertion: assertFalse(modelBean0.isClientIdPropertyAddToWriter());
      //  // Unstable assertion: assertNull(modelBean0.getTotalProperty());
      //  // Unstable assertion: assertEquals("d1WtV(zz", modelBean0.getReadMethod());
      //  // Unstable assertion: assertNull(modelBean0.getIdProperty());
      //  // Unstable assertion: assertEquals("json", modelBean0.getWriter());
      //  // Unstable assertion: assertNull(modelBean0.getDestroyMethod());
      //  // Unstable assertion: assertNull(modelBean0.getSuccessProperty());
      //  // Unstable assertion: assertFalse(modelBean0.isPaging());
      //  // Unstable assertion: assertNull(modelBean0.getMessageProperty());
      //  // Unstable assertion: assertNull(modelBean0.getVersionProperty());
      //  // Unstable assertion: assertEquals("json", modelBean0.getReader());
      //  // Unstable assertion: assertNull(modelBean0.getWriteAllFields());
      //  // Unstable assertion: assertNull(outputConfig1.getOutputFormat());
      //  // Unstable assertion: assertFalse(outputConfig1.isUseSingleQuotes());
      //  // Unstable assertion: assertNull(outputConfig1.getLineEnding());
      //  // Unstable assertion: assertFalse(outputConfig1.isSurroundApiWithQuotes());
      //  // Unstable assertion: assertNull(outputConfig1.getIncludeValidation());
      //  // Unstable assertion: assertFalse(outputConfig1.isDebug());
      //  // Unstable assertion: assertNotSame(outputConfig1, outputConfig2);
      //  // Unstable assertion: assertNotSame(outputConfig1, outputConfig0);
      //  // Unstable assertion: assertTrue(outputConfig1.equals((Object)outputConfig2));
      //  // Unstable assertion: assertFalse(outputConfig1.equals((Object)outputConfig0));
      //  // Unstable assertion: assertFalse(string1.equals((Object)string0));
      //  // Unstable assertion: assertNotNull(string1);
  }

  @Test(timeout = 4000000)
  public void test104()  throws Throwable  {
      Class<Object> class0 = Object.class;
      IncludeValidation includeValidation0 = IncludeValidation.ALL;
      ModelBean modelBean0 = ModelGenerator.createModel(class0, includeValidation0);
      assertNull(modelBean0.getClientIdProperty());
      assertEquals("Ext.data.Model", modelBean0.getExtend());
      assertTrue(modelBean0.isAutodetectTypes());
      assertNull(modelBean0.getIdProperty());
      assertNull(modelBean0.getWriteAllFields());
      assertEquals("java.lang.Object", modelBean0.getName());
      assertNull(modelBean0.getRootProperty());
      assertNull(modelBean0.getCreateMethod());
      assertEquals("json", modelBean0.getReader());
      assertNull(modelBean0.getVersionProperty());
      assertNull(modelBean0.getUpdateMethod());
      assertNull(modelBean0.getMessageProperty());
      assertEquals("json", modelBean0.getWriter());
      assertNull(modelBean0.getTotalProperty());
      assertNull(modelBean0.getDestroyMethod());
      assertFalse(modelBean0.isDisablePagingParameters());
      assertNull(modelBean0.getSuccessProperty());
      assertNull(modelBean0.getIdentifier());
      assertFalse(modelBean0.isPaging());
      assertNull(modelBean0.getReadMethod());
      assertFalse(modelBean0.isClientIdPropertyAddToWriter());
      assertNotNull(modelBean0);
      
      HttpServletRequest httpServletRequest0 = mock(HttpServletRequest.class, new ViolatedAssumptionAnswer());
      doReturn((ServletContext) null).when(httpServletRequest0).getServletContext();
      doReturn((String) null).when(httpServletRequest0).getHeader(anyString());
      HttpServletRequestWrapper httpServletRequestWrapper0 = new HttpServletRequestWrapper(httpServletRequest0);
      assertNotNull(httpServletRequestWrapper0);
      
      HttpServletResponse httpServletResponse0 = null;
      OutputFormat outputFormat0 = OutputFormat.TOUCH2;
      ServletContext servletContext0 = httpServletRequestWrapper0.getServletContext();
      assertNull(servletContext0);
      
      // Undeclared exception!
      try { 
        ModelGenerator.writeModel((HttpServletRequest) httpServletRequestWrapper0, (HttpServletResponse) null, (Class<?>) class0, outputFormat0, includeValidation0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("ch.rasc.extclassgenerator.ModelGenerator", e);
      }
  }

  @Test(timeout = 4000000)
  public void test105()  throws Throwable  {
      Class<Object> class0 = Object.class;
      OutputFormat outputFormat0 = OutputFormat.EXTJS4;
      String string0 = ModelGenerator.generateJavascript(class0, outputFormat0, true);
      assertNotNull(string0);
      assertEquals("Ext.define(\"java.lang.Object\",\r\n{\n  extend : \"Ext.data.Model\",\n  fields : [ ]\n});", string0);
      
      HttpServletRequest httpServletRequest0 = mock(HttpServletRequest.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(httpServletRequest0).getHeader(anyString());
      HttpServletRequestWrapper httpServletRequestWrapper0 = new HttpServletRequestWrapper(httpServletRequest0);
      assertNotNull(httpServletRequestWrapper0);
      
      HttpServletResponse httpServletResponse0 = mock(HttpServletResponse.class, new ViolatedAssumptionAnswer());
      doReturn((ServletOutputStream) null).when(httpServletResponse0).getOutputStream();
      HttpServletResponseWrapper httpServletResponseWrapper0 = new HttpServletResponseWrapper(httpServletResponse0);
      assertNotNull(httpServletResponseWrapper0);
      
      OutputFormat outputFormat1 = OutputFormat.EXTJS5;
      httpServletResponseWrapper0.sendRedirect("Ext.define(\"java.lang.Object\",\r\n{\n  extend : \"Ext.data.Model\",\n  fields : [ ]\n});");
      // Undeclared exception!
      try { 
        ModelGenerator.writeModel((HttpServletRequest) httpServletRequestWrapper0, (HttpServletResponse) httpServletResponseWrapper0, (Class<?>) class0, outputFormat1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("ch.rasc.extclassgenerator.ModelGenerator", e);
      }
  }

  @Test(timeout = 4000000)
  public void test106()  throws Throwable  {
      Class<Object> class0 = Object.class;
      IncludeValidation includeValidation0 = IncludeValidation.BUILTIN;
      ModelBean modelBean0 = ModelGenerator.createModel(class0, includeValidation0);
      //  // Unstable assertion: assertNull(modelBean0.getTotalProperty());
      //  // Unstable assertion: assertEquals("java.lang.Object", modelBean0.getName());
      //  // Unstable assertion: assertFalse(modelBean0.isClientIdPropertyAddToWriter());
      //  // Unstable assertion: assertNull(modelBean0.getCreateMethod());
      //  // Unstable assertion: assertTrue(modelBean0.isAutodetectTypes());
      //  // Unstable assertion: assertEquals("Ext.data.Model", modelBean0.getExtend());
      //  // Unstable assertion: assertNull(modelBean0.getClientIdProperty());
      //  // Unstable assertion: assertNull(modelBean0.getUpdateMethod());
      //  // Unstable assertion: assertEquals("json", modelBean0.getReader());
      //  // Unstable assertion: assertNull(modelBean0.getWriteAllFields());
      //  // Unstable assertion: assertNull(modelBean0.getVersionProperty());
      //  // Unstable assertion: assertFalse(modelBean0.isPaging());
      //  // Unstable assertion: assertNull(modelBean0.getSuccessProperty());
      //  // Unstable assertion: assertNull(modelBean0.getMessageProperty());
      //  // Unstable assertion: assertFalse(modelBean0.isDisablePagingParameters());
      //  // Unstable assertion: assertNull(modelBean0.getRootProperty());
      //  // Unstable assertion: assertNull(modelBean0.getIdProperty());
      //  // Unstable assertion: assertEquals("json", modelBean0.getWriter());
      //  // Unstable assertion: assertNull(modelBean0.getDestroyMethod());
      //  // Unstable assertion: assertNull(modelBean0.getIdentifier());
      //  // Unstable assertion: assertEquals("d1WtV(zz", modelBean0.getReadMethod());
      //  // Unstable assertion: assertNotNull(modelBean0);
      
      HttpServletRequest httpServletRequest0 = mock(HttpServletRequest.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(httpServletRequest0).isAsyncSupported();
      HttpServletRequestWrapper httpServletRequestWrapper0 = new HttpServletRequestWrapper(httpServletRequest0);
      //  // Unstable assertion: assertNotNull(httpServletRequestWrapper0);
      
      boolean boolean0 = httpServletRequestWrapper0.isAsyncSupported();
      //  // Unstable assertion: assertFalse(boolean0);
      
      OutputConfig outputConfig0 = new OutputConfig();
      //  // Unstable assertion: assertFalse(outputConfig0.isDebug());
      //  // Unstable assertion: assertFalse(outputConfig0.isUseSingleQuotes());
      //  // Unstable assertion: assertNull(outputConfig0.getLineEnding());
      //  // Unstable assertion: assertNull(outputConfig0.getOutputFormat());
      //  // Unstable assertion: assertNull(outputConfig0.getIncludeValidation());
      //  // Unstable assertion: assertNotNull(outputConfig0);
      
      outputConfig0.setSurroundApiWithQuotes(true);
      //  // Unstable assertion: assertFalse(outputConfig0.isDebug());
      //  // Unstable assertion: assertFalse(outputConfig0.isUseSingleQuotes());
      //  // Unstable assertion: assertNull(outputConfig0.getLineEnding());
      //  // Unstable assertion: assertNull(outputConfig0.getOutputFormat());
      //  // Unstable assertion: assertNull(outputConfig0.getIncludeValidation());
      
      outputConfig0.setDebug(false);
      //  // Unstable assertion: assertFalse(outputConfig0.isDebug());
      //  // Unstable assertion: assertFalse(outputConfig0.isUseSingleQuotes());
      //  // Unstable assertion: assertNull(outputConfig0.getLineEnding());
      //  // Unstable assertion: assertNull(outputConfig0.getOutputFormat());
      //  // Unstable assertion: assertNull(outputConfig0.getIncludeValidation());
      
      modelBean0.setIdentifier("`}zU`yZ19?l.J%Se");
      //  // Unstable assertion: assertNull(modelBean0.getTotalProperty());
      //  // Unstable assertion: assertEquals("java.lang.Object", modelBean0.getName());
      //  // Unstable assertion: assertFalse(modelBean0.isClientIdPropertyAddToWriter());
      //  // Unstable assertion: assertNull(modelBean0.getCreateMethod());
      //  // Unstable assertion: assertTrue(modelBean0.isAutodetectTypes());
      //  // Unstable assertion: assertEquals("Ext.data.Model", modelBean0.getExtend());
      //  // Unstable assertion: assertNull(modelBean0.getClientIdProperty());
      //  // Unstable assertion: assertNull(modelBean0.getUpdateMethod());
      //  // Unstable assertion: assertEquals("json", modelBean0.getReader());
      //  // Unstable assertion: assertNull(modelBean0.getWriteAllFields());
      //  // Unstable assertion: assertNull(modelBean0.getVersionProperty());
      //  // Unstable assertion: assertFalse(modelBean0.isPaging());
      //  // Unstable assertion: assertNull(modelBean0.getSuccessProperty());
      //  // Unstable assertion: assertNull(modelBean0.getMessageProperty());
      //  // Unstable assertion: assertFalse(modelBean0.isDisablePagingParameters());
      //  // Unstable assertion: assertNull(modelBean0.getRootProperty());
      //  // Unstable assertion: assertEquals("`}zU`yZ19?l.J%Se", modelBean0.getIdentifier());
      //  // Unstable assertion: assertNull(modelBean0.getIdProperty());
      //  // Unstable assertion: assertEquals("json", modelBean0.getWriter());
      //  // Unstable assertion: assertNull(modelBean0.getDestroyMethod());
      //  // Unstable assertion: assertEquals("d1WtV(zz", modelBean0.getReadMethod());
      
      outputConfig0.setSurroundApiWithQuotes(false);
      //  // Unstable assertion: assertFalse(outputConfig0.isDebug());
      //  // Unstable assertion: assertFalse(outputConfig0.isUseSingleQuotes());
      //  // Unstable assertion: assertNull(outputConfig0.getLineEnding());
      //  // Unstable assertion: assertNull(outputConfig0.getOutputFormat());
      //  // Unstable assertion: assertNull(outputConfig0.getIncludeValidation());
      
      ModelBean modelBean1 = new ModelBean();
      //  // Unstable assertion: assertNull(modelBean1.getMessageProperty());
      //  // Unstable assertion: assertFalse(modelBean1.isDisablePagingParameters());
      //  // Unstable assertion: assertNull(modelBean1.getRootProperty());
      //  // Unstable assertion: assertNull(modelBean1.getIdentifier());
      //  // Unstable assertion: assertNull(modelBean1.getVersionProperty());
      //  // Unstable assertion: assertNull(modelBean1.getReadMethod());
      //  // Unstable assertion: assertTrue(modelBean1.isAutodetectTypes());
      //  // Unstable assertion: assertNull(modelBean1.getWriteAllFields());
      //  // Unstable assertion: assertNull(modelBean1.getClientIdProperty());
      //  // Unstable assertion: assertEquals("Ext.data.Model", modelBean1.getExtend());
      //  // Unstable assertion: assertFalse(modelBean1.isPaging());
      //  // Unstable assertion: assertNull(modelBean1.getSuccessProperty());
      //  // Unstable assertion: assertNull(modelBean1.getDestroyMethod());
      //  // Unstable assertion: assertNull(modelBean1.getTotalProperty());
      //  // Unstable assertion: assertFalse(modelBean1.isClientIdPropertyAddToWriter());
      //  // Unstable assertion: assertNull(modelBean1.getUpdateMethod());
      //  // Unstable assertion: assertEquals("json", modelBean1.getReader());
      //  // Unstable assertion: assertEquals("json", modelBean1.getWriter());
      //  // Unstable assertion: assertNull(modelBean1.getIdProperty());
      //  // Unstable assertion: assertNull(modelBean1.getCreateMethod());
      //  // Unstable assertion: assertNull(modelBean1.getName());
      //  // Unstable assertion: assertFalse(modelBean1.equals((Object)modelBean0));
      //  // Unstable assertion: assertNotNull(modelBean1);
      
      String string0 = ModelGenerator.generateJavascript(modelBean1, outputConfig0);
      //  // Unstable assertion: assertFalse(outputConfig0.isDebug());
      //  // Unstable assertion: assertFalse(outputConfig0.isUseSingleQuotes());
      //  // Unstable assertion: assertNull(outputConfig0.getLineEnding());
      //  // Unstable assertion: assertNull(outputConfig0.getOutputFormat());
      //  // Unstable assertion: assertNull(outputConfig0.getIncludeValidation());
      //  // Unstable assertion: assertNull(modelBean1.getMessageProperty());
      //  // Unstable assertion: assertFalse(modelBean1.isDisablePagingParameters());
      //  // Unstable assertion: assertNull(modelBean1.getRootProperty());
      //  // Unstable assertion: assertNull(modelBean1.getIdentifier());
      //  // Unstable assertion: assertNull(modelBean1.getVersionProperty());
      //  // Unstable assertion: assertNull(modelBean1.getReadMethod());
      //  // Unstable assertion: assertTrue(modelBean1.isAutodetectTypes());
      //  // Unstable assertion: assertNull(modelBean1.getWriteAllFields());
      //  // Unstable assertion: assertNull(modelBean1.getClientIdProperty());
      //  // Unstable assertion: assertEquals("Ext.data.Model", modelBean1.getExtend());
      //  // Unstable assertion: assertFalse(modelBean1.isPaging());
      //  // Unstable assertion: assertNull(modelBean1.getSuccessProperty());
      //  // Unstable assertion: assertNull(modelBean1.getDestroyMethod());
      //  // Unstable assertion: assertNull(modelBean1.getTotalProperty());
      //  // Unstable assertion: assertFalse(modelBean1.isClientIdPropertyAddToWriter());
      //  // Unstable assertion: assertNull(modelBean1.getUpdateMethod());
      //  // Unstable assertion: assertEquals("json", modelBean1.getReader());
      //  // Unstable assertion: assertEquals("json", modelBean1.getWriter());
      //  // Unstable assertion: assertNull(modelBean1.getIdProperty());
      //  // Unstable assertion: assertNull(modelBean1.getCreateMethod());
      //  // Unstable assertion: assertNull(modelBean1.getName());
      //  // Unstable assertion: assertNotSame(modelBean1, modelBean0);
      //  // Unstable assertion: assertFalse(modelBean1.equals((Object)modelBean0));
      //  // Unstable assertion: assertNotNull(string0);
      //  // Unstable assertion: assertEquals("Ext.define(\"null\",{extend:\"Ext.data.Model\",config:{fields:[]}});", string0);
      
      OutputFormat outputFormat0 = OutputFormat.EXTJS5;
      String string1 = ModelGenerator.generateJavascript(modelBean0, outputFormat0, false);
      //  // Unstable assertion: assertNull(modelBean0.getTotalProperty());
      //  // Unstable assertion: assertEquals("java.lang.Object", modelBean0.getName());
      //  // Unstable assertion: assertFalse(modelBean0.isClientIdPropertyAddToWriter());
      //  // Unstable assertion: assertNull(modelBean0.getCreateMethod());
      //  // Unstable assertion: assertTrue(modelBean0.isAutodetectTypes());
      //  // Unstable assertion: assertEquals("Ext.data.Model", modelBean0.getExtend());
      //  // Unstable assertion: assertNull(modelBean0.getClientIdProperty());
      //  // Unstable assertion: assertNull(modelBean0.getUpdateMethod());
      //  // Unstable assertion: assertEquals("json", modelBean0.getReader());
      //  // Unstable assertion: assertNull(modelBean0.getWriteAllFields());
      //  // Unstable assertion: assertNull(modelBean0.getVersionProperty());
      //  // Unstable assertion: assertFalse(modelBean0.isPaging());
      //  // Unstable assertion: assertNull(modelBean0.getSuccessProperty());
      //  // Unstable assertion: assertNull(modelBean0.getMessageProperty());
      //  // Unstable assertion: assertFalse(modelBean0.isDisablePagingParameters());
      //  // Unstable assertion: assertNull(modelBean0.getRootProperty());
      //  // Unstable assertion: assertEquals("`}zU`yZ19?l.J%Se", modelBean0.getIdentifier());
      //  // Unstable assertion: assertNull(modelBean0.getIdProperty());
      //  // Unstable assertion: assertEquals("json", modelBean0.getWriter());
      //  // Unstable assertion: assertNull(modelBean0.getDestroyMethod());
      //  // Unstable assertion: assertEquals("d1WtV(zz", modelBean0.getReadMethod());
      //  // Unstable assertion: assertNotSame(modelBean0, modelBean1);
      //  // Unstable assertion: assertFalse(modelBean0.equals((Object)modelBean1));
      //  // Unstable assertion: assertFalse(string1.equals((Object)string0));
      //  // Unstable assertion: assertNotNull(string1);
      
      String string2 = ModelGenerator.trimToNull("calculate");
      //  // Unstable assertion: assertFalse(string2.equals((Object)string0));
      //  // Unstable assertion: assertFalse(string2.equals((Object)string1));
      //  // Unstable assertion: assertNotNull(string2);
      //  // Unstable assertion: assertEquals("calculate", string2);
  }

  @Test(timeout = 4000000)
  public void test107()  throws Throwable  {
      HttpServletRequest httpServletRequest0 = mock(HttpServletRequest.class, new ViolatedAssumptionAnswer());
      doReturn("SYMBOL_RESOLVER_KEY").when(httpServletRequest0).getHeader(anyString());
      HttpServletRequestWrapper httpServletRequestWrapper0 = new HttpServletRequestWrapper(httpServletRequest0);
      assertNotNull(httpServletRequestWrapper0);
      
      ServletOutputStream servletOutputStream0 = mock(ServletOutputStream.class, new ViolatedAssumptionAnswer());
      HttpServletResponse httpServletResponse0 = mock(HttpServletResponse.class, new ViolatedAssumptionAnswer());
      doReturn(servletOutputStream0).when(httpServletResponse0).getOutputStream();
      HttpServletResponseWrapper httpServletResponseWrapper0 = new HttpServletResponseWrapper(httpServletResponse0);
      assertNotNull(httpServletResponseWrapper0);
      
      ModelBean modelBean0 = new ModelBean();
      assertFalse(modelBean0.isClientIdPropertyAddToWriter());
      assertNull(modelBean0.getTotalProperty());
      assertNull(modelBean0.getName());
      assertNull(modelBean0.getIdentifier());
      assertFalse(modelBean0.isDisablePagingParameters());
      assertNull(modelBean0.getRootProperty());
      assertEquals("json", modelBean0.getWriter());
      assertNull(modelBean0.getIdProperty());
      assertNull(modelBean0.getDestroyMethod());
      assertEquals("Ext.data.Model", modelBean0.getExtend());
      assertNull(modelBean0.getClientIdProperty());
      assertNull(modelBean0.getReadMethod());
      assertNull(modelBean0.getMessageProperty());
      assertTrue(modelBean0.isAutodetectTypes());
      assertFalse(modelBean0.isPaging());
      assertNull(modelBean0.getCreateMethod());
      assertNull(modelBean0.getSuccessProperty());
      assertEquals("json", modelBean0.getReader());
      assertNull(modelBean0.getUpdateMethod());
      assertNull(modelBean0.getWriteAllFields());
      assertNull(modelBean0.getVersionProperty());
      assertNotNull(modelBean0);
      
      OutputFormat outputFormat0 = OutputFormat.EXTJS4;
      ModelGenerator.writeModel((HttpServletRequest) httpServletRequestWrapper0, (HttpServletResponse) httpServletResponseWrapper0, modelBean0, outputFormat0);
      assertFalse(modelBean0.isClientIdPropertyAddToWriter());
      assertNull(modelBean0.getTotalProperty());
      assertNull(modelBean0.getName());
      assertNull(modelBean0.getIdentifier());
      assertFalse(modelBean0.isDisablePagingParameters());
      assertNull(modelBean0.getRootProperty());
      assertEquals("json", modelBean0.getWriter());
      assertNull(modelBean0.getIdProperty());
      assertNull(modelBean0.getDestroyMethod());
      assertEquals("Ext.data.Model", modelBean0.getExtend());
      assertNull(modelBean0.getClientIdProperty());
      assertNull(modelBean0.getReadMethod());
      assertNull(modelBean0.getMessageProperty());
      assertTrue(modelBean0.isAutodetectTypes());
      assertFalse(modelBean0.isPaging());
      assertNull(modelBean0.getCreateMethod());
      assertNull(modelBean0.getSuccessProperty());
      assertEquals("json", modelBean0.getReader());
      assertNull(modelBean0.getUpdateMethod());
      assertNull(modelBean0.getWriteAllFields());
      assertNull(modelBean0.getVersionProperty());
  }

  @Test(timeout = 4000000)
  public void test108()  throws Throwable  {
      HttpServletRequest httpServletRequest0 = null;
      HttpServletResponse httpServletResponse0 = mock(HttpServletResponse.class, new ViolatedAssumptionAnswer());
      HttpServletResponseWrapper httpServletResponseWrapper0 = new HttpServletResponseWrapper(httpServletResponse0);
      assertNotNull(httpServletResponseWrapper0);
      
      Class<Object> class0 = Object.class;
      OutputConfig outputConfig0 = new OutputConfig();
      assertFalse(outputConfig0.isDebug());
      assertFalse(outputConfig0.isSurroundApiWithQuotes());
      assertNull(outputConfig0.getIncludeValidation());
      assertFalse(outputConfig0.isUseSingleQuotes());
      assertNull(outputConfig0.getLineEnding());
      assertNull(outputConfig0.getOutputFormat());
      assertNotNull(outputConfig0);
      
      outputConfig0.setDebug(false);
      assertFalse(outputConfig0.isDebug());
      assertFalse(outputConfig0.isSurroundApiWithQuotes());
      assertNull(outputConfig0.getIncludeValidation());
      assertFalse(outputConfig0.isUseSingleQuotes());
      assertNull(outputConfig0.getLineEnding());
      assertNull(outputConfig0.getOutputFormat());
      
      // Undeclared exception!
      try { 
        ModelGenerator.createModel(class0, outputConfig0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // includeValidation must not be null
         //
         verifyException("org.springframework.util.Assert", e);
      }
  }

  @Test(timeout = 4000000)
  public void test109()  throws Throwable  {
      Class<ModelFieldBean> class0 = ModelFieldBean.class;
      ModelBean modelBean0 = ModelGenerator.createModel(class0);
      assertNull(modelBean0.getTotalProperty());
      assertNull(modelBean0.getDestroyMethod());
      assertFalse(modelBean0.isClientIdPropertyAddToWriter());
      assertEquals("json", modelBean0.getReader());
      assertEquals("ch.rasc.extclassgenerator.ModelFieldBean", modelBean0.getName());
      assertNull(modelBean0.getWriteAllFields());
      assertNull(modelBean0.getReadMethod());
      assertNull(modelBean0.getClientIdProperty());
      assertNull(modelBean0.getSuccessProperty());
      assertEquals("Ext.data.Model", modelBean0.getExtend());
      assertFalse(modelBean0.isPaging());
      assertTrue(modelBean0.isAutodetectTypes());
      assertFalse(modelBean0.isDisablePagingParameters());
      assertNull(modelBean0.getMessageProperty());
      assertNull(modelBean0.getIdentifier());
      assertNull(modelBean0.getVersionProperty());
      assertEquals("json", modelBean0.getWriter());
      assertNull(modelBean0.getIdProperty());
      assertNull(modelBean0.getUpdateMethod());
      assertNull(modelBean0.getRootProperty());
      assertNull(modelBean0.getCreateMethod());
      assertNotNull(modelBean0);
      
      OutputFormat outputFormat0 = OutputFormat.EXTJS4;
      modelBean0.setIdProperty("mapping");
      assertNull(modelBean0.getTotalProperty());
      assertNull(modelBean0.getDestroyMethod());
      assertFalse(modelBean0.isClientIdPropertyAddToWriter());
      assertEquals("json", modelBean0.getReader());
      assertEquals("ch.rasc.extclassgenerator.ModelFieldBean", modelBean0.getName());
      assertNull(modelBean0.getWriteAllFields());
      assertNull(modelBean0.getReadMethod());
      assertNull(modelBean0.getClientIdProperty());
      assertNull(modelBean0.getSuccessProperty());
      assertEquals("Ext.data.Model", modelBean0.getExtend());
      assertEquals("mapping", modelBean0.getIdProperty());
      assertFalse(modelBean0.isPaging());
      assertTrue(modelBean0.isAutodetectTypes());
      assertFalse(modelBean0.isDisablePagingParameters());
      assertNull(modelBean0.getMessageProperty());
      assertNull(modelBean0.getIdentifier());
      assertNull(modelBean0.getVersionProperty());
      assertEquals("json", modelBean0.getWriter());
      assertNull(modelBean0.getUpdateMethod());
      assertNull(modelBean0.getRootProperty());
      assertNull(modelBean0.getCreateMethod());
      
      String string0 = ModelGenerator.generateJavascript(modelBean0, outputFormat0, false);
      assertNull(modelBean0.getTotalProperty());
      assertNull(modelBean0.getDestroyMethod());
      assertFalse(modelBean0.isClientIdPropertyAddToWriter());
      assertEquals("json", modelBean0.getReader());
      assertEquals("ch.rasc.extclassgenerator.ModelFieldBean", modelBean0.getName());
      assertNull(modelBean0.getWriteAllFields());
      assertNull(modelBean0.getReadMethod());
      assertNull(modelBean0.getClientIdProperty());
      assertNull(modelBean0.getSuccessProperty());
      assertEquals("Ext.data.Model", modelBean0.getExtend());
      assertEquals("mapping", modelBean0.getIdProperty());
      assertFalse(modelBean0.isPaging());
      assertTrue(modelBean0.isAutodetectTypes());
      assertFalse(modelBean0.isDisablePagingParameters());
      assertNull(modelBean0.getMessageProperty());
      assertNull(modelBean0.getIdentifier());
      assertNull(modelBean0.getVersionProperty());
      assertEquals("json", modelBean0.getWriter());
      assertNull(modelBean0.getUpdateMethod());
      assertNull(modelBean0.getRootProperty());
      assertNull(modelBean0.getCreateMethod());
      assertNotNull(string0);
      assertEquals("Ext.define(\"ch.rasc.extclassgenerator.ModelFieldBean\",{extend:\"Ext.data.Model\",idProperty:\"mapping\",fields:[{name:\"allowBlank\",type:\"boolean\"},{name:\"allowNull\",type:\"boolean\"},{name:\"critical\",type:\"boolean\"},{name:\"persist\",type:\"boolean\"},{name:\"unique\",type:\"boolean\"},{name:\"useNull\",type:\"boolean\"},{name:\"calculate\",type:\"string\"},{name:\"convert\",type:\"string\"},{name:\"dateFormat\",type:\"string\"},{name:\"mapping\",type:\"string\"},{name:\"name\",type:\"string\"},{name:\"type\",type:\"string\"}],proxy:{idParam:\"mapping\",type:\"direct\"}});", string0);
  }

  @Test(timeout = 4000000)
  public void test110()  throws Throwable  {
      Class<HttpUpgradeHandler> class0 = HttpUpgradeHandler.class;
      OutputFormat outputFormat0 = OutputFormat.EXTJS5;
      String string0 = ModelGenerator.generateJavascript(class0, outputFormat0, false);
      assertNotNull(string0);
      assertEquals("Ext.define(\"javax.servlet.http.HttpUpgradeHandler\",{extend:\"Ext.data.Model\",fields:[]});", string0);
  }

  @Test(timeout = 4000000)
  public void test111()  throws Throwable  {
      OutputConfig outputConfig0 = new OutputConfig();
      //  // Unstable assertion: assertNull(outputConfig0.getOutputFormat());
      //  // Unstable assertion: assertFalse(outputConfig0.isUseSingleQuotes());
      //  // Unstable assertion: assertNull(outputConfig0.getLineEnding());
      //  // Unstable assertion: assertNull(outputConfig0.getIncludeValidation());
      //  // Unstable assertion: assertFalse(outputConfig0.isSurroundApiWithQuotes());
      //  // Unstable assertion: assertFalse(outputConfig0.isDebug());
      //  // Unstable assertion: assertNotNull(outputConfig0);
      
      OutputFormat outputFormat0 = OutputFormat.EXTJS5;
      outputConfig0.setOutputFormat(outputFormat0);
      //  // Unstable assertion: assertEquals(OutputFormat.EXTJS5, outputConfig0.getOutputFormat());
      //  // Unstable assertion: assertFalse(outputConfig0.isUseSingleQuotes());
      //  // Unstable assertion: assertNull(outputConfig0.getLineEnding());
      //  // Unstable assertion: assertNull(outputConfig0.getIncludeValidation());
      //  // Unstable assertion: assertFalse(outputConfig0.isSurroundApiWithQuotes());
      //  // Unstable assertion: assertFalse(outputConfig0.isDebug());
      
      Class<Object> class0 = Object.class;
      IncludeValidation includeValidation0 = IncludeValidation.NONE;
      ModelBean modelBean0 = ModelGenerator.createModel(class0, includeValidation0);
      //  // Unstable assertion: assertTrue(modelBean0.isAutodetectTypes());
      //  // Unstable assertion: assertNull(modelBean0.getClientIdProperty());
      //  // Unstable assertion: assertNull(modelBean0.getUpdateMethod());
      //  // Unstable assertion: assertEquals("defaultValue", modelBean0.getIdentifier());
      //  // Unstable assertion: assertNull(modelBean0.getReadMethod());
      //  // Unstable assertion: assertNull(modelBean0.getCreateMethod());
      //  // Unstable assertion: assertFalse(modelBean0.isDisablePagingParameters());
      //  // Unstable assertion: assertNull(modelBean0.getRootProperty());
      //  // Unstable assertion: assertNull(modelBean0.getTotalProperty());
      //  // Unstable assertion: assertEquals("json", modelBean0.getWriter());
      //  // Unstable assertion: assertNull(modelBean0.getIdProperty());
      //  // Unstable assertion: assertNull(modelBean0.getDestroyMethod());
      //  // Unstable assertion: assertFalse(modelBean0.isClientIdPropertyAddToWriter());
      //  // Unstable assertion: assertFalse(modelBean0.isPaging());
      //  // Unstable assertion: assertNull(modelBean0.getMessageProperty());
      //  // Unstable assertion: assertNull(modelBean0.getVersionProperty());
      //  // Unstable assertion: assertNull(modelBean0.getSuccessProperty());
      //  // Unstable assertion: assertEquals("java.lang.Object", modelBean0.getName());
      //  // Unstable assertion: assertEquals("json", modelBean0.getReader());
      //  // Unstable assertion: assertNull(modelBean0.getWriteAllFields());
      //  // Unstable assertion: assertNotNull(modelBean0);
      
      modelBean0.setReadMethod("d1WtV(zz");
      //  // Unstable assertion: assertTrue(modelBean0.isAutodetectTypes());
      //  // Unstable assertion: assertNull(modelBean0.getClientIdProperty());
      //  // Unstable assertion: assertNull(modelBean0.getUpdateMethod());
      //  // Unstable assertion: assertEquals("defaultValue", modelBean0.getIdentifier());
      //  // Unstable assertion: assertNull(modelBean0.getCreateMethod());
      //  // Unstable assertion: assertFalse(modelBean0.isDisablePagingParameters());
      //  // Unstable assertion: assertNull(modelBean0.getRootProperty());
      //  // Unstable assertion: assertNull(modelBean0.getTotalProperty());
      //  // Unstable assertion: assertEquals("d1WtV(zz", modelBean0.getReadMethod());
      //  // Unstable assertion: assertEquals("json", modelBean0.getWriter());
      //  // Unstable assertion: assertNull(modelBean0.getIdProperty());
      //  // Unstable assertion: assertNull(modelBean0.getDestroyMethod());
      //  // Unstable assertion: assertFalse(modelBean0.isClientIdPropertyAddToWriter());
      //  // Unstable assertion: assertFalse(modelBean0.isPaging());
      //  // Unstable assertion: assertNull(modelBean0.getMessageProperty());
      //  // Unstable assertion: assertNull(modelBean0.getVersionProperty());
      //  // Unstable assertion: assertNull(modelBean0.getSuccessProperty());
      //  // Unstable assertion: assertEquals("java.lang.Object", modelBean0.getName());
      //  // Unstable assertion: assertEquals("json", modelBean0.getReader());
      //  // Unstable assertion: assertNull(modelBean0.getWriteAllFields());
      
      OutputConfig outputConfig1 = new OutputConfig();
      //  // Unstable assertion: assertFalse(outputConfig1.isDebug());
      //  // Unstable assertion: assertFalse(outputConfig1.isSurroundApiWithQuotes());
      //  // Unstable assertion: assertFalse(outputConfig1.isUseSingleQuotes());
      //  // Unstable assertion: assertNull(outputConfig1.getLineEnding());
      //  // Unstable assertion: assertNull(outputConfig1.getOutputFormat());
      //  // Unstable assertion: assertNull(outputConfig1.getIncludeValidation());
      //  // Unstable assertion: assertFalse(outputConfig1.equals((Object)outputConfig0));
      //  // Unstable assertion: assertNotNull(outputConfig1);
      
      outputConfig0.setIncludeValidation(includeValidation0);
      //  // Unstable assertion: assertEquals(OutputFormat.EXTJS5, outputConfig0.getOutputFormat());
      //  // Unstable assertion: assertFalse(outputConfig0.isUseSingleQuotes());
      //  // Unstable assertion: assertNull(outputConfig0.getLineEnding());
      //  // Unstable assertion: assertFalse(outputConfig0.isSurroundApiWithQuotes());
      //  // Unstable assertion: assertEquals(IncludeValidation.NONE, outputConfig0.getIncludeValidation());
      //  // Unstable assertion: assertFalse(outputConfig0.isDebug());
      //  // Unstable assertion: assertNotSame(outputConfig0, outputConfig1);
      //  // Unstable assertion: assertFalse(outputConfig0.equals((Object)outputConfig1));
      
      String string0 = ModelGenerator.generateJavascript(modelBean0, outputConfig0);
      //  // Unstable assertion: assertEquals(OutputFormat.EXTJS5, outputConfig0.getOutputFormat());
      //  // Unstable assertion: assertFalse(outputConfig0.isUseSingleQuotes());
      //  // Unstable assertion: assertNull(outputConfig0.getLineEnding());
      //  // Unstable assertion: assertFalse(outputConfig0.isSurroundApiWithQuotes());
      //  // Unstable assertion: assertEquals(IncludeValidation.NONE, outputConfig0.getIncludeValidation());
      //  // Unstable assertion: assertFalse(outputConfig0.isDebug());
      //  // Unstable assertion: assertTrue(modelBean0.isAutodetectTypes());
      //  // Unstable assertion: assertNull(modelBean0.getClientIdProperty());
      //  // Unstable assertion: assertNull(modelBean0.getUpdateMethod());
      //  // Unstable assertion: assertEquals("defaultValue", modelBean0.getIdentifier());
      //  // Unstable assertion: assertNull(modelBean0.getCreateMethod());
      //  // Unstable assertion: assertFalse(modelBean0.isDisablePagingParameters());
      //  // Unstable assertion: assertNull(modelBean0.getRootProperty());
      //  // Unstable assertion: assertNull(modelBean0.getTotalProperty());
      //  // Unstable assertion: assertEquals("d1WtV(zz", modelBean0.getReadMethod());
      //  // Unstable assertion: assertEquals("json", modelBean0.getWriter());
      //  // Unstable assertion: assertNull(modelBean0.getIdProperty());
      //  // Unstable assertion: assertNull(modelBean0.getDestroyMethod());
      //  // Unstable assertion: assertFalse(modelBean0.isClientIdPropertyAddToWriter());
      //  // Unstable assertion: assertFalse(modelBean0.isPaging());
      //  // Unstable assertion: assertNull(modelBean0.getMessageProperty());
      //  // Unstable assertion: assertNull(modelBean0.getVersionProperty());
      //  // Unstable assertion: assertNull(modelBean0.getSuccessProperty());
      //  // Unstable assertion: assertEquals("java.lang.Object", modelBean0.getName());
      //  // Unstable assertion: assertEquals("json", modelBean0.getReader());
      //  // Unstable assertion: assertNull(modelBean0.getWriteAllFields());
      //  // Unstable assertion: assertNotSame(outputConfig0, outputConfig1);
      //  // Unstable assertion: assertFalse(outputConfig0.equals((Object)outputConfig1));
      //  // Unstable assertion: assertNotNull(string0);
      
      String string1 = ModelGenerator.generateJavascript(modelBean0, outputConfig0);
      //  // Unstable assertion: assertEquals(OutputFormat.EXTJS5, outputConfig0.getOutputFormat());
      //  // Unstable assertion: assertFalse(outputConfig0.isUseSingleQuotes());
      //  // Unstable assertion: assertNull(outputConfig0.getLineEnding());
      //  // Unstable assertion: assertFalse(outputConfig0.isSurroundApiWithQuotes());
      //  // Unstable assertion: assertEquals(IncludeValidation.NONE, outputConfig0.getIncludeValidation());
      //  // Unstable assertion: assertFalse(outputConfig0.isDebug());
      //  // Unstable assertion: assertTrue(modelBean0.isAutodetectTypes());
      //  // Unstable assertion: assertNull(modelBean0.getClientIdProperty());
      //  // Unstable assertion: assertNull(modelBean0.getUpdateMethod());
      //  // Unstable assertion: assertEquals("defaultValue", modelBean0.getIdentifier());
      //  // Unstable assertion: assertNull(modelBean0.getCreateMethod());
      //  // Unstable assertion: assertFalse(modelBean0.isDisablePagingParameters());
      //  // Unstable assertion: assertNull(modelBean0.getRootProperty());
      //  // Unstable assertion: assertNull(modelBean0.getTotalProperty());
      //  // Unstable assertion: assertEquals("d1WtV(zz", modelBean0.getReadMethod());
      //  // Unstable assertion: assertEquals("json", modelBean0.getWriter());
      //  // Unstable assertion: assertNull(modelBean0.getIdProperty());
      //  // Unstable assertion: assertNull(modelBean0.getDestroyMethod());
      //  // Unstable assertion: assertFalse(modelBean0.isClientIdPropertyAddToWriter());
      //  // Unstable assertion: assertFalse(modelBean0.isPaging());
      //  // Unstable assertion: assertNull(modelBean0.getMessageProperty());
      //  // Unstable assertion: assertNull(modelBean0.getVersionProperty());
      //  // Unstable assertion: assertNull(modelBean0.getSuccessProperty());
      //  // Unstable assertion: assertEquals("java.lang.Object", modelBean0.getName());
      //  // Unstable assertion: assertEquals("json", modelBean0.getReader());
      //  // Unstable assertion: assertNull(modelBean0.getWriteAllFields());
      //  // Unstable assertion: assertNotSame(outputConfig0, outputConfig1);
      //  // Unstable assertion: assertFalse(outputConfig0.equals((Object)outputConfig1));
      //  // Unstable assertion: assertNotNull(string1);
      
      HttpServletResponse httpServletResponse0 = mock(HttpServletResponse.class, new ViolatedAssumptionAnswer());
      HttpServletResponseWrapper httpServletResponseWrapper0 = new HttpServletResponseWrapper(httpServletResponse0);
      //  // Unstable assertion: assertNotNull(httpServletResponseWrapper0);
      
      HttpServletResponseWrapper httpServletResponseWrapper1 = new HttpServletResponseWrapper(httpServletResponseWrapper0);
      //  // Unstable assertion: assertFalse(httpServletResponseWrapper1.equals((Object)httpServletResponseWrapper0));
      //  // Unstable assertion: assertNotNull(httpServletResponseWrapper1);
      
      HttpServletRequest httpServletRequest0 = mock(HttpServletRequest.class, new ViolatedAssumptionAnswer());
      HttpServletRequestWrapper httpServletRequestWrapper0 = new HttpServletRequestWrapper(httpServletRequest0);
      //  // Unstable assertion: assertNotNull(httpServletRequestWrapper0);
      
      HttpServletRequestWrapper httpServletRequestWrapper1 = new HttpServletRequestWrapper(httpServletRequestWrapper0);
      //  // Unstable assertion: assertFalse(httpServletRequestWrapper1.equals((Object)httpServletRequestWrapper0));
      //  // Unstable assertion: assertNotNull(httpServletRequestWrapper1);
      
      httpServletRequestWrapper0.setRequest(httpServletRequestWrapper1);
      //  // Unstable assertion: assertNotSame(httpServletRequestWrapper1, httpServletRequestWrapper0);
      //  // Unstable assertion: assertNotSame(httpServletRequestWrapper0, httpServletRequestWrapper1);
      //  // Unstable assertion: assertFalse(httpServletRequestWrapper1.equals((Object)httpServletRequestWrapper0));
      //  // Unstable assertion: assertFalse(httpServletRequestWrapper0.equals((Object)httpServletRequestWrapper1));
      
      // Undeclared exception!
      try { 
        ModelGenerator.writeModel((HttpServletRequest) httpServletRequestWrapper0, (HttpServletResponse) httpServletResponseWrapper1, modelBean0, outputConfig1);
       //  fail("Expecting exception: StackOverflowError");
       // Unstable assertion
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000000)
  public void test112()  throws Throwable  {
      String string0 = ModelGenerator.trimToNull("`}zU`yZ19?l.J%Se");
      assertNotNull(string0);
      assertEquals("`}zU`yZ19?l.J%Se", string0);
      
      HttpServletRequest httpServletRequest0 = mock(HttpServletRequest.class, new ViolatedAssumptionAnswer());
      doReturn("`}zU`yZ19?l.J%Se").when(httpServletRequest0).getHeader(anyString());
      HttpServletRequestWrapper httpServletRequestWrapper0 = new HttpServletRequestWrapper(httpServletRequest0);
      assertNotNull(httpServletRequestWrapper0);
      
      HttpServletResponse httpServletResponse0 = null;
      Class<Object> class0 = Object.class;
      IncludeValidation includeValidation0 = IncludeValidation.BUILTIN;
      ModelBean modelBean0 = ModelGenerator.createModel(class0, includeValidation0);
      assertNull(modelBean0.getSuccessProperty());
      assertFalse(modelBean0.isPaging());
      assertFalse(modelBean0.isDisablePagingParameters());
      assertNull(modelBean0.getMessageProperty());
      assertNull(modelBean0.getClientIdProperty());
      assertNull(modelBean0.getVersionProperty());
      assertNull(modelBean0.getWriteAllFields());
      assertEquals("java.lang.Object", modelBean0.getName());
      assertEquals("json", modelBean0.getReader());
      assertNull(modelBean0.getUpdateMethod());
      assertTrue(modelBean0.isAutodetectTypes());
      assertNull(modelBean0.getCreateMethod());
      assertNull(modelBean0.getReadMethod());
      assertFalse(modelBean0.isClientIdPropertyAddToWriter());
      assertNull(modelBean0.getTotalProperty());
      assertNull(modelBean0.getRootProperty());
      assertEquals("json", modelBean0.getWriter());
      assertNull(modelBean0.getIdentifier());
      assertNull(modelBean0.getIdProperty());
      assertNull(modelBean0.getDestroyMethod());
      assertNotNull(modelBean0);
      
      LinkedList<AbstractValidation> linkedList0 = new LinkedList<AbstractValidation>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      modelBean0.addValidations(linkedList0);
      assertNull(modelBean0.getSuccessProperty());
      assertFalse(modelBean0.isPaging());
      assertFalse(modelBean0.isDisablePagingParameters());
      assertNull(modelBean0.getMessageProperty());
      assertNull(modelBean0.getClientIdProperty());
      assertNull(modelBean0.getVersionProperty());
      assertNull(modelBean0.getWriteAllFields());
      assertEquals("java.lang.Object", modelBean0.getName());
      assertEquals("json", modelBean0.getReader());
      assertNull(modelBean0.getUpdateMethod());
      assertTrue(modelBean0.isAutodetectTypes());
      assertNull(modelBean0.getCreateMethod());
      assertNull(modelBean0.getReadMethod());
      assertFalse(modelBean0.isClientIdPropertyAddToWriter());
      assertNull(modelBean0.getTotalProperty());
      assertNull(modelBean0.getRootProperty());
      assertEquals("json", modelBean0.getWriter());
      assertNull(modelBean0.getIdentifier());
      assertNull(modelBean0.getIdProperty());
      assertNull(modelBean0.getDestroyMethod());
      assertEquals(0, linkedList0.size());
      
      OutputFormat outputFormat0 = OutputFormat.EXTJS5;
      // Undeclared exception!
      try { 
        ModelGenerator.writeModel((HttpServletRequest) httpServletRequestWrapper0, (HttpServletResponse) null, modelBean0, outputFormat0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("ch.rasc.extclassgenerator.ModelGenerator", e);
      }
  }

  @Test(timeout = 4000000)
  public void test113()  throws Throwable  {
      HttpServletRequest httpServletRequest0 = mock(HttpServletRequest.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(httpServletRequest0).getHeader(anyString());
      HttpServletRequestWrapper httpServletRequestWrapper0 = new HttpServletRequestWrapper(httpServletRequest0);
      assertNotNull(httpServletRequestWrapper0);
      
      HttpServletResponse httpServletResponse0 = mock(HttpServletResponse.class, new ViolatedAssumptionAnswer());
      doReturn((Locale) null).when(httpServletResponse0).getLocale();
      doReturn((ServletOutputStream) null).when(httpServletResponse0).getOutputStream();
      HttpServletResponseWrapper httpServletResponseWrapper0 = new HttpServletResponseWrapper(httpServletResponse0);
      assertNotNull(httpServletResponseWrapper0);
      
      Class<Object> class0 = Object.class;
      OutputConfig outputConfig0 = new OutputConfig();
      assertNull(outputConfig0.getIncludeValidation());
      assertNull(outputConfig0.getOutputFormat());
      assertNull(outputConfig0.getLineEnding());
      assertFalse(outputConfig0.isSurroundApiWithQuotes());
      assertFalse(outputConfig0.isUseSingleQuotes());
      assertFalse(outputConfig0.isDebug());
      assertNotNull(outputConfig0);
      
      IncludeValidation includeValidation0 = IncludeValidation.BUILTIN;
      Locale locale0 = httpServletResponseWrapper0.getLocale();
      assertNull(locale0);
      
      outputConfig0.setIncludeValidation(includeValidation0);
      assertNull(outputConfig0.getOutputFormat());
      assertNull(outputConfig0.getLineEnding());
      assertEquals(IncludeValidation.BUILTIN, outputConfig0.getIncludeValidation());
      assertFalse(outputConfig0.isSurroundApiWithQuotes());
      assertFalse(outputConfig0.isUseSingleQuotes());
      assertFalse(outputConfig0.isDebug());
      
      // Undeclared exception!
      try { 
        ModelGenerator.writeModel((HttpServletRequest) httpServletRequestWrapper0, (HttpServletResponse) httpServletResponseWrapper0, (Class<?>) class0, outputConfig0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("ch.rasc.extclassgenerator.ModelGenerator", e);
      }
  }

  @Test(timeout = 4000000)
  public void test114()  throws Throwable  {
      HttpServletResponse httpServletResponse0 = mock(HttpServletResponse.class, new ViolatedAssumptionAnswer());
      IncludeValidation includeValidation0 = IncludeValidation.BUILTIN;
      Class<Object> class0 = Object.class;
      ModelBean modelBean0 = ModelGenerator.createModel(class0, includeValidation0);
      //  // Unstable assertion: assertFalse(modelBean0.isClientIdPropertyAddToWriter());
      //  // Unstable assertion: assertNull(modelBean0.getTotalProperty());
      //  // Unstable assertion: assertNull(modelBean0.getCreateMethod());
      //  // Unstable assertion: assertNull(modelBean0.getIdProperty());
      //  // Unstable assertion: assertEquals("d1WtV(zz", modelBean0.getReadMethod());
      //  // Unstable assertion: assertEquals("json", modelBean0.getWriter());
      //  // Unstable assertion: assertNull(modelBean0.getRootProperty());
      //  // Unstable assertion: assertEquals("`}zU`yZ19?l.J%Se", modelBean0.getIdentifier());
      //  // Unstable assertion: assertNull(modelBean0.getDestroyMethod());
      //  // Unstable assertion: assertFalse(modelBean0.isPaging());
      //  // Unstable assertion: assertNull(modelBean0.getVersionProperty());
      //  // Unstable assertion: assertFalse(modelBean0.isDisablePagingParameters());
      //  // Unstable assertion: assertNull(modelBean0.getMessageProperty());
      //  // Unstable assertion: assertNull(modelBean0.getUpdateMethod());
      //  // Unstable assertion: assertNull(modelBean0.getWriteAllFields());
      //  // Unstable assertion: assertEquals("java.lang.Object", modelBean0.getName());
      //  // Unstable assertion: assertEquals("json", modelBean0.getReader());
      //  // Unstable assertion: assertTrue(modelBean0.isAutodetectTypes());
      //  // Unstable assertion: assertNull(modelBean0.getSuccessProperty());
      //  // Unstable assertion: assertNull(modelBean0.getClientIdProperty());
      //  // Unstable assertion: assertEquals("Ext.data.Model", modelBean0.getExtend());
      //  // Unstable assertion: assertNotNull(modelBean0);
      
      LinkedList<AbstractAssociation> linkedList0 = new LinkedList<AbstractAssociation>();
      //  // Unstable assertion: assertEquals(0, linkedList0.size());
      //  // Unstable assertion: assertNotNull(linkedList0);
      
      modelBean0.addAssociations(linkedList0);
      //  // Unstable assertion: assertFalse(modelBean0.isClientIdPropertyAddToWriter());
      //  // Unstable assertion: assertNull(modelBean0.getTotalProperty());
      //  // Unstable assertion: assertNull(modelBean0.getCreateMethod());
      //  // Unstable assertion: assertNull(modelBean0.getIdProperty());
      //  // Unstable assertion: assertEquals("d1WtV(zz", modelBean0.getReadMethod());
      //  // Unstable assertion: assertEquals("json", modelBean0.getWriter());
      //  // Unstable assertion: assertNull(modelBean0.getRootProperty());
      //  // Unstable assertion: assertEquals("`}zU`yZ19?l.J%Se", modelBean0.getIdentifier());
      //  // Unstable assertion: assertNull(modelBean0.getDestroyMethod());
      //  // Unstable assertion: assertFalse(modelBean0.isPaging());
      //  // Unstable assertion: assertNull(modelBean0.getVersionProperty());
      //  // Unstable assertion: assertFalse(modelBean0.isDisablePagingParameters());
      //  // Unstable assertion: assertNull(modelBean0.getMessageProperty());
      //  // Unstable assertion: assertNull(modelBean0.getUpdateMethod());
      //  // Unstable assertion: assertNull(modelBean0.getWriteAllFields());
      //  // Unstable assertion: assertEquals("java.lang.Object", modelBean0.getName());
      //  // Unstable assertion: assertEquals("json", modelBean0.getReader());
      //  // Unstable assertion: assertTrue(modelBean0.isAutodetectTypes());
      //  // Unstable assertion: assertNull(modelBean0.getSuccessProperty());
      //  // Unstable assertion: assertNull(modelBean0.getClientIdProperty());
      //  // Unstable assertion: assertEquals("Ext.data.Model", modelBean0.getExtend());
      //  // Unstable assertion: assertEquals(0, linkedList0.size());
      
      OutputFormat outputFormat0 = OutputFormat.TOUCH2;
      String string0 = ModelGenerator.generateJavascript(modelBean0, outputFormat0, true);
      //  // Unstable assertion: assertFalse(modelBean0.isClientIdPropertyAddToWriter());
      //  // Unstable assertion: assertNull(modelBean0.getTotalProperty());
      //  // Unstable assertion: assertNull(modelBean0.getCreateMethod());
      //  // Unstable assertion: assertNull(modelBean0.getIdProperty());
      //  // Unstable assertion: assertEquals("d1WtV(zz", modelBean0.getReadMethod());
      //  // Unstable assertion: assertEquals("json", modelBean0.getWriter());
      //  // Unstable assertion: assertNull(modelBean0.getRootProperty());
      //  // Unstable assertion: assertEquals("`}zU`yZ19?l.J%Se", modelBean0.getIdentifier());
      //  // Unstable assertion: assertNull(modelBean0.getDestroyMethod());
      //  // Unstable assertion: assertFalse(modelBean0.isPaging());
      //  // Unstable assertion: assertNull(modelBean0.getVersionProperty());
      //  // Unstable assertion: assertFalse(modelBean0.isDisablePagingParameters());
      //  // Unstable assertion: assertNull(modelBean0.getMessageProperty());
      //  // Unstable assertion: assertNull(modelBean0.getUpdateMethod());
      //  // Unstable assertion: assertNull(modelBean0.getWriteAllFields());
      //  // Unstable assertion: assertEquals("java.lang.Object", modelBean0.getName());
      //  // Unstable assertion: assertEquals("json", modelBean0.getReader());
      //  // Unstable assertion: assertTrue(modelBean0.isAutodetectTypes());
      //  // Unstable assertion: assertNull(modelBean0.getSuccessProperty());
      //  // Unstable assertion: assertNull(modelBean0.getClientIdProperty());
      //  // Unstable assertion: assertEquals("Ext.data.Model", modelBean0.getExtend());
      //  // Unstable assertion: assertNotNull(string0);
      
      OutputConfig outputConfig0 = new OutputConfig();
      //  // Unstable assertion: assertFalse(outputConfig0.isSurroundApiWithQuotes());
      //  // Unstable assertion: assertFalse(outputConfig0.isDebug());
      //  // Unstable assertion: assertNull(outputConfig0.getIncludeValidation());
      //  // Unstable assertion: assertNull(outputConfig0.getOutputFormat());
      //  // Unstable assertion: assertFalse(outputConfig0.isUseSingleQuotes());
      //  // Unstable assertion: assertNull(outputConfig0.getLineEnding());
      //  // Unstable assertion: assertNotNull(outputConfig0);
      
      // Undeclared exception!
      try { 
        ModelGenerator.generateJavascript(class0, outputConfig0);
       //  fail("Expecting exception: IllegalArgumentException");
       // Unstable assertion
      } catch(IllegalArgumentException e) {
         //
         // includeValidation must not be null
         //
         verifyException("org.springframework.util.Assert", e);
      }
  }

  @Test(timeout = 4000000)
  public void test115()  throws Throwable  {
      ModelGenerator.clearCaches();
  }

  @Test(timeout = 4000000)
  public void test116()  throws Throwable  {
      HttpServletResponse httpServletResponse0 = mock(HttpServletResponse.class, new ViolatedAssumptionAnswer());
      Class<ModelFieldBean> class0 = ModelFieldBean.class;
      IncludeValidation includeValidation0 = IncludeValidation.ALL;
      ModelBean modelBean0 = ModelGenerator.createModel(class0, includeValidation0);
      assertEquals("json", modelBean0.getWriter());
      assertNull(modelBean0.getSuccessProperty());
      assertNull(modelBean0.getTotalProperty());
      assertNull(modelBean0.getDestroyMethod());
      assertFalse(modelBean0.isDisablePagingParameters());
      assertNull(modelBean0.getRootProperty());
      assertFalse(modelBean0.isClientIdPropertyAddToWriter());
      assertEquals("ch.rasc.extclassgenerator.ModelFieldBean", modelBean0.getName());
      assertNull(modelBean0.getIdentifier());
      assertNull(modelBean0.getIdProperty());
      assertNull(modelBean0.getWriteAllFields());
      assertNull(modelBean0.getReadMethod());
      assertTrue(modelBean0.isAutodetectTypes());
      assertNull(modelBean0.getUpdateMethod());
      assertEquals("Ext.data.Model", modelBean0.getExtend());
      assertNull(modelBean0.getClientIdProperty());
      assertNull(modelBean0.getCreateMethod());
      assertNull(modelBean0.getMessageProperty());
      assertFalse(modelBean0.isPaging());
      assertEquals("json", modelBean0.getReader());
      assertNull(modelBean0.getVersionProperty());
      assertNotNull(modelBean0);
      
      OutputConfig outputConfig0 = new OutputConfig();
      assertNull(outputConfig0.getIncludeValidation());
      assertNull(outputConfig0.getOutputFormat());
      assertNull(outputConfig0.getLineEnding());
      assertFalse(outputConfig0.isSurroundApiWithQuotes());
      assertFalse(outputConfig0.isUseSingleQuotes());
      assertFalse(outputConfig0.isDebug());
      assertNotNull(outputConfig0);
      
      outputConfig0.setIncludeValidation(includeValidation0);
      assertNull(outputConfig0.getOutputFormat());
      assertEquals(IncludeValidation.ALL, outputConfig0.getIncludeValidation());
      assertNull(outputConfig0.getLineEnding());
      assertFalse(outputConfig0.isSurroundApiWithQuotes());
      assertFalse(outputConfig0.isUseSingleQuotes());
      assertFalse(outputConfig0.isDebug());
      
      String string0 = ModelGenerator.generateJavascript(modelBean0, outputConfig0);
      assertEquals("json", modelBean0.getWriter());
      assertNull(modelBean0.getSuccessProperty());
      assertNull(modelBean0.getTotalProperty());
      assertNull(modelBean0.getDestroyMethod());
      assertFalse(modelBean0.isDisablePagingParameters());
      assertNull(modelBean0.getRootProperty());
      assertFalse(modelBean0.isClientIdPropertyAddToWriter());
      assertEquals("ch.rasc.extclassgenerator.ModelFieldBean", modelBean0.getName());
      assertNull(modelBean0.getIdentifier());
      assertNull(modelBean0.getIdProperty());
      assertNull(modelBean0.getWriteAllFields());
      assertNull(modelBean0.getReadMethod());
      assertTrue(modelBean0.isAutodetectTypes());
      assertNull(modelBean0.getUpdateMethod());
      assertEquals("Ext.data.Model", modelBean0.getExtend());
      assertNull(modelBean0.getClientIdProperty());
      assertNull(modelBean0.getCreateMethod());
      assertNull(modelBean0.getMessageProperty());
      assertFalse(modelBean0.isPaging());
      assertEquals("json", modelBean0.getReader());
      assertNull(modelBean0.getVersionProperty());
      assertNull(outputConfig0.getOutputFormat());
      assertEquals(IncludeValidation.ALL, outputConfig0.getIncludeValidation());
      assertNull(outputConfig0.getLineEnding());
      assertFalse(outputConfig0.isSurroundApiWithQuotes());
      assertFalse(outputConfig0.isUseSingleQuotes());
      assertFalse(outputConfig0.isDebug());
      assertNotNull(string0);
      assertEquals("Ext.define(\"ch.rasc.extclassgenerator.ModelFieldBean\",{extend:\"Ext.data.Model\",config:{fields:[{name:\"allowBlank\",type:\"boolean\"},{name:\"allowNull\",type:\"boolean\"},{name:\"critical\",type:\"boolean\"},{name:\"persist\",type:\"boolean\"},{name:\"unique\",type:\"boolean\"},{name:\"useNull\",type:\"boolean\"},{name:\"calculate\",type:\"string\"},{name:\"convert\",type:\"string\"},{name:\"dateFormat\",type:\"string\"},{name:\"mapping\",type:\"string\"},{name:\"name\",type:\"string\"},{name:\"type\",type:\"string\"}]}});", string0);
  }

  @Test(timeout = 4000000)
  public void test117()  throws Throwable  {
      Class<ModelFieldBean> class0 = ModelFieldBean.class;
      ModelBean modelBean0 = ModelGenerator.createModel(class0);
      //  // Unstable assertion: assertNull(modelBean0.getReadMethod());
      //  // Unstable assertion: assertNull(modelBean0.getWriteAllFields());
      //  // Unstable assertion: assertEquals("Ext.data.Model", modelBean0.getExtend());
      //  // Unstable assertion: assertTrue(modelBean0.isAutodetectTypes());
      //  // Unstable assertion: assertEquals("json", modelBean0.getReader());
      //  // Unstable assertion: assertNull(modelBean0.getUpdateMethod());
      //  // Unstable assertion: assertNull(modelBean0.getCreateMethod());
      //  // Unstable assertion: assertNull(modelBean0.getMessageProperty());
      //  // Unstable assertion: assertEquals("sequential", modelBean0.getIdentifier());
      //  // Unstable assertion: assertFalse(modelBean0.isPaging());
      //  // Unstable assertion: assertNull(modelBean0.getVersionProperty());
      //  // Unstable assertion: assertNull(modelBean0.getSuccessProperty());
      //  // Unstable assertion: assertNull(modelBean0.getClientIdProperty());
      //  // Unstable assertion: assertEquals("json", modelBean0.getWriter());
      //  // Unstable assertion: assertFalse(modelBean0.isDisablePagingParameters());
      //  // Unstable assertion: assertFalse(modelBean0.isClientIdPropertyAddToWriter());
      //  // Unstable assertion: assertNull(modelBean0.getDestroyMethod());
      //  // Unstable assertion: assertNull(modelBean0.getTotalProperty());
      //  // Unstable assertion: assertEquals("ch.rasc.extclassgenerator.ModelFieldBean", modelBean0.getName());
      //  // Unstable assertion: assertNull(modelBean0.getIdProperty());
      //  // Unstable assertion: assertNull(modelBean0.getRootProperty());
      //  // Unstable assertion: assertNotNull(modelBean0);
      
      IncludeValidation includeValidation0 = IncludeValidation.ALL;
      OutputConfig outputConfig0 = new OutputConfig();
      //  // Unstable assertion: assertNull(outputConfig0.getIncludeValidation());
      //  // Unstable assertion: assertNull(outputConfig0.getOutputFormat());
      //  // Unstable assertion: assertFalse(outputConfig0.isDebug());
      //  // Unstable assertion: assertNull(outputConfig0.getLineEnding());
      //  // Unstable assertion: assertFalse(outputConfig0.isSurroundApiWithQuotes());
      //  // Unstable assertion: assertFalse(outputConfig0.isUseSingleQuotes());
      //  // Unstable assertion: assertNotNull(outputConfig0);
      
      Class<Object> class1 = Object.class;
      ModelBean modelBean1 = ModelGenerator.createModel(class1, includeValidation0);
      //  // Unstable assertion: assertNull(modelBean1.getMessageProperty());
      //  // Unstable assertion: assertNull(modelBean1.getClientIdProperty());
      //  // Unstable assertion: assertNull(modelBean1.getRootProperty());
      //  // Unstable assertion: assertNull(modelBean1.getSuccessProperty());
      //  // Unstable assertion: assertFalse(modelBean1.isPaging());
      //  // Unstable assertion: assertEquals("Ext.data.Model", modelBean1.getExtend());
      //  // Unstable assertion: assertNull(modelBean1.getWriteAllFields());
      //  // Unstable assertion: assertNull(modelBean1.getCreateMethod());
      //  // Unstable assertion: assertNull(modelBean1.getVersionProperty());
      //  // Unstable assertion: assertEquals("json", modelBean1.getReader());
      //  // Unstable assertion: assertNull(modelBean1.getUpdateMethod());
      //  // Unstable assertion: assertFalse(modelBean1.isClientIdPropertyAddToWriter());
      //  // Unstable assertion: assertNull(modelBean1.getDestroyMethod());
      //  // Unstable assertion: assertEquals("java.lang.Object", modelBean1.getName());
      //  // Unstable assertion: assertNull(modelBean1.getTotalProperty());
      //  // Unstable assertion: assertTrue(modelBean1.isAutodetectTypes());
      //  // Unstable assertion: assertNull(modelBean1.getIdProperty());
      //  // Unstable assertion: assertNull(modelBean1.getReadMethod());
      //  // Unstable assertion: assertEquals("json", modelBean1.getWriter());
      //  // Unstable assertion: assertNull(modelBean1.getIdentifier());
      //  // Unstable assertion: assertFalse(modelBean1.isDisablePagingParameters());
      //  // Unstable assertion: assertNotSame(modelBean1, modelBean0);
      //  // Unstable assertion: assertFalse(modelBean1.equals((Object)modelBean0));
      //  // Unstable assertion: assertNotNull(modelBean1);
      
      OutputConfig outputConfig1 = new OutputConfig();
      //  // Unstable assertion: assertFalse(outputConfig1.isUseSingleQuotes());
      //  // Unstable assertion: assertNull(outputConfig1.getLineEnding());
      //  // Unstable assertion: assertNull(outputConfig1.getIncludeValidation());
      //  // Unstable assertion: assertNull(outputConfig1.getOutputFormat());
      //  // Unstable assertion: assertFalse(outputConfig1.isDebug());
      //  // Unstable assertion: assertFalse(outputConfig1.isSurroundApiWithQuotes());
      //  // Unstable assertion: assertTrue(outputConfig1.equals((Object)outputConfig0));
      //  // Unstable assertion: assertNotNull(outputConfig1);
      
      String string0 = ModelGenerator.generateJavascript(modelBean1, outputConfig1);
      //  // Unstable assertion: assertNull(modelBean1.getMessageProperty());
      //  // Unstable assertion: assertNull(modelBean1.getClientIdProperty());
      //  // Unstable assertion: assertNull(modelBean1.getRootProperty());
      //  // Unstable assertion: assertNull(modelBean1.getSuccessProperty());
      //  // Unstable assertion: assertFalse(modelBean1.isPaging());
      //  // Unstable assertion: assertEquals("Ext.data.Model", modelBean1.getExtend());
      //  // Unstable assertion: assertNull(modelBean1.getWriteAllFields());
      //  // Unstable assertion: assertNull(modelBean1.getCreateMethod());
      //  // Unstable assertion: assertNull(modelBean1.getVersionProperty());
      //  // Unstable assertion: assertEquals("json", modelBean1.getReader());
      //  // Unstable assertion: assertNull(modelBean1.getUpdateMethod());
      //  // Unstable assertion: assertFalse(modelBean1.isClientIdPropertyAddToWriter());
      //  // Unstable assertion: assertNull(modelBean1.getDestroyMethod());
      //  // Unstable assertion: assertEquals("java.lang.Object", modelBean1.getName());
      //  // Unstable assertion: assertNull(modelBean1.getTotalProperty());
      //  // Unstable assertion: assertTrue(modelBean1.isAutodetectTypes());
      //  // Unstable assertion: assertNull(modelBean1.getIdProperty());
      //  // Unstable assertion: assertNull(modelBean1.getReadMethod());
      //  // Unstable assertion: assertEquals("json", modelBean1.getWriter());
      //  // Unstable assertion: assertNull(modelBean1.getIdentifier());
      //  // Unstable assertion: assertFalse(modelBean1.isDisablePagingParameters());
      //  // Unstable assertion: assertFalse(outputConfig1.isUseSingleQuotes());
      //  // Unstable assertion: assertNull(outputConfig1.getLineEnding());
      //  // Unstable assertion: assertNull(outputConfig1.getIncludeValidation());
      //  // Unstable assertion: assertNull(outputConfig1.getOutputFormat());
      //  // Unstable assertion: assertFalse(outputConfig1.isDebug());
      //  // Unstable assertion: assertFalse(outputConfig1.isSurroundApiWithQuotes());
      //  // Unstable assertion: assertNotSame(modelBean1, modelBean0);
      //  // Unstable assertion: assertNotSame(outputConfig1, outputConfig0);
      //  // Unstable assertion: assertFalse(modelBean1.equals((Object)modelBean0));
      //  // Unstable assertion: assertTrue(outputConfig1.equals((Object)outputConfig0));
      //  // Unstable assertion: assertNotNull(string0);
      //  // Unstable assertion: assertEquals("Ext.define(\"java.lang.Object\",{extend:\"Ext.data.Model\",config:{fields:[]}});", string0);
      
      String string1 = ModelGenerator.generateJavascript(modelBean0, outputConfig0);
      //  // Unstable assertion: assertNull(modelBean0.getReadMethod());
      //  // Unstable assertion: assertNull(modelBean0.getWriteAllFields());
      //  // Unstable assertion: assertEquals("Ext.data.Model", modelBean0.getExtend());
      //  // Unstable assertion: assertTrue(modelBean0.isAutodetectTypes());
      //  // Unstable assertion: assertEquals("json", modelBean0.getReader());
      //  // Unstable assertion: assertNull(modelBean0.getUpdateMethod());
      //  // Unstable assertion: assertNull(modelBean0.getCreateMethod());
      //  // Unstable assertion: assertNull(modelBean0.getMessageProperty());
      //  // Unstable assertion: assertEquals("sequential", modelBean0.getIdentifier());
      //  // Unstable assertion: assertFalse(modelBean0.isPaging());
      //  // Unstable assertion: assertNull(modelBean0.getVersionProperty());
      //  // Unstable assertion: assertNull(modelBean0.getSuccessProperty());
      //  // Unstable assertion: assertNull(modelBean0.getClientIdProperty());
      //  // Unstable assertion: assertEquals("json", modelBean0.getWriter());
      //  // Unstable assertion: assertFalse(modelBean0.isDisablePagingParameters());
      //  // Unstable assertion: assertFalse(modelBean0.isClientIdPropertyAddToWriter());
      //  // Unstable assertion: assertNull(modelBean0.getDestroyMethod());
      //  // Unstable assertion: assertNull(modelBean0.getTotalProperty());
      //  // Unstable assertion: assertEquals("ch.rasc.extclassgenerator.ModelFieldBean", modelBean0.getName());
      //  // Unstable assertion: assertNull(modelBean0.getIdProperty());
      //  // Unstable assertion: assertNull(modelBean0.getRootProperty());
      //  // Unstable assertion: assertNull(outputConfig0.getIncludeValidation());
      //  // Unstable assertion: assertNull(outputConfig0.getOutputFormat());
      //  // Unstable assertion: assertFalse(outputConfig0.isDebug());
      //  // Unstable assertion: assertNull(outputConfig0.getLineEnding());
      //  // Unstable assertion: assertFalse(outputConfig0.isSurroundApiWithQuotes());
      //  // Unstable assertion: assertFalse(outputConfig0.isUseSingleQuotes());
      //  // Unstable assertion: assertNotSame(modelBean0, modelBean1);
      //  // Unstable assertion: assertNotSame(outputConfig0, outputConfig1);
      //  // Unstable assertion: assertFalse(modelBean0.equals((Object)modelBean1));
      //  // Unstable assertion: assertTrue(outputConfig0.equals((Object)outputConfig1));
      //  // Unstable assertion: assertFalse(string1.equals((Object)string0));
      //  // Unstable assertion: assertNotNull(string1);
      //  // Unstable assertion: assertEquals("Ext.define(\"ch.rasc.extclassgenerator.ModelFieldBean\",{extend:\"Ext.data.Model\",config:{idgen:\"sequential\",fields:[{name:\"allowBlank\",type:\"boolean\"},{name:\"allowNull\",type:\"boolean\"},{name:\"critical\",type:\"boolean\"},{name:\"persist\",type:\"boolean\"},{name:\"unique\",type:\"boolean\"},{name:\"useNull\",type:\"boolean\"},{name:\"calculate\",type:\"string\"},{name:\"convert\",type:\"string\"},{name:\"dateFormat\",type:\"string\"},{name:\"mapping\",type:\"string\"},{name:\"name\",type:\"string\"},{name:\"type\",type:\"string\"}]}});", string1);
      
      OutputFormat outputFormat0 = OutputFormat.EXTJS4;
      // Undeclared exception!
      try { 
        ModelGenerator.writeModel((HttpServletRequest) null, (HttpServletResponse) null, class0, outputFormat0, false);
       //  fail("Expecting exception: NullPointerException");
       // Unstable assertion
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("ch.rasc.extclassgenerator.ModelGenerator", e);
      }
  }

  @Test(timeout = 4000000)
  public void test118()  throws Throwable  {
      Class<Object> class0 = Object.class;
      OutputFormat outputFormat0 = OutputFormat.EXTJS5;
      // Undeclared exception!
      try { 
        ModelGenerator.generateJavascript(class0, outputFormat0, (IncludeValidation) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // includeValidation must not be null
         //
         verifyException("org.springframework.util.Assert", e);
      }
  }

  @Test(timeout = 4000000)
  public void test119()  throws Throwable  {
      Class<ModelFieldBean> class0 = ModelFieldBean.class;
      IncludeValidation includeValidation0 = IncludeValidation.BUILTIN;
      ModelBean modelBean0 = ModelGenerator.createModel(class0, includeValidation0);
      assertNull(modelBean0.getClientIdProperty());
      assertEquals("Ext.data.Model", modelBean0.getExtend());
      assertNull(modelBean0.getMessageProperty());
      assertNull(modelBean0.getReadMethod());
      assertTrue(modelBean0.isAutodetectTypes());
      assertNull(modelBean0.getCreateMethod());
      assertNull(modelBean0.getVersionProperty());
      assertFalse(modelBean0.isPaging());
      assertNull(modelBean0.getSuccessProperty());
      assertEquals("json", modelBean0.getReader());
      assertNull(modelBean0.getUpdateMethod());
      assertNull(modelBean0.getWriteAllFields());
      assertFalse(modelBean0.isClientIdPropertyAddToWriter());
      assertFalse(modelBean0.isDisablePagingParameters());
      assertNull(modelBean0.getRootProperty());
      assertNull(modelBean0.getTotalProperty());
      assertNull(modelBean0.getIdProperty());
      assertEquals("ch.rasc.extclassgenerator.ModelFieldBean", modelBean0.getName());
      assertNull(modelBean0.getDestroyMethod());
      assertEquals("json", modelBean0.getWriter());
      assertNull(modelBean0.getIdentifier());
      assertNotNull(modelBean0);
      
      OutputConfig outputConfig0 = new OutputConfig();
      assertNull(outputConfig0.getOutputFormat());
      assertFalse(outputConfig0.isUseSingleQuotes());
      assertNull(outputConfig0.getLineEnding());
      assertNull(outputConfig0.getIncludeValidation());
      assertFalse(outputConfig0.isDebug());
      assertNotNull(outputConfig0);
      
      outputConfig0.setSurroundApiWithQuotes(true);
      assertNull(outputConfig0.getOutputFormat());
      assertFalse(outputConfig0.isUseSingleQuotes());
      assertNull(outputConfig0.getLineEnding());
      assertNull(outputConfig0.getIncludeValidation());
      assertFalse(outputConfig0.isDebug());
      
      String string0 = ModelGenerator.generateJavascript(modelBean0, outputConfig0);
      assertNull(modelBean0.getClientIdProperty());
      assertEquals("Ext.data.Model", modelBean0.getExtend());
      assertNull(modelBean0.getMessageProperty());
      assertNull(modelBean0.getReadMethod());
      assertTrue(modelBean0.isAutodetectTypes());
      assertNull(modelBean0.getCreateMethod());
      assertNull(modelBean0.getVersionProperty());
      assertFalse(modelBean0.isPaging());
      assertNull(modelBean0.getSuccessProperty());
      assertEquals("json", modelBean0.getReader());
      assertNull(modelBean0.getUpdateMethod());
      assertNull(modelBean0.getWriteAllFields());
      assertFalse(modelBean0.isClientIdPropertyAddToWriter());
      assertFalse(modelBean0.isDisablePagingParameters());
      assertNull(modelBean0.getRootProperty());
      assertNull(modelBean0.getTotalProperty());
      assertNull(modelBean0.getIdProperty());
      assertEquals("ch.rasc.extclassgenerator.ModelFieldBean", modelBean0.getName());
      assertNull(modelBean0.getDestroyMethod());
      assertEquals("json", modelBean0.getWriter());
      assertNull(modelBean0.getIdentifier());
      assertNull(outputConfig0.getOutputFormat());
      assertFalse(outputConfig0.isUseSingleQuotes());
      assertNull(outputConfig0.getLineEnding());
      assertNull(outputConfig0.getIncludeValidation());
      assertFalse(outputConfig0.isDebug());
      assertNotNull(string0);
      
      OutputFormat outputFormat0 = OutputFormat.EXTJS5;
      outputConfig0.setOutputFormat(outputFormat0);
      assertFalse(outputConfig0.isUseSingleQuotes());
      assertNull(outputConfig0.getLineEnding());
      assertNull(outputConfig0.getIncludeValidation());
      assertFalse(outputConfig0.isDebug());
      assertEquals(OutputFormat.EXTJS5, outputConfig0.getOutputFormat());
      
      String string1 = ModelGenerator.generateJavascript(modelBean0, outputConfig0);
      assertNull(modelBean0.getClientIdProperty());
      assertEquals("Ext.data.Model", modelBean0.getExtend());
      assertNull(modelBean0.getMessageProperty());
      assertNull(modelBean0.getReadMethod());
      assertTrue(modelBean0.isAutodetectTypes());
      assertNull(modelBean0.getCreateMethod());
      assertNull(modelBean0.getVersionProperty());
      assertFalse(modelBean0.isPaging());
      assertNull(modelBean0.getSuccessProperty());
      assertEquals("json", modelBean0.getReader());
      assertNull(modelBean0.getUpdateMethod());
      assertNull(modelBean0.getWriteAllFields());
      assertFalse(modelBean0.isClientIdPropertyAddToWriter());
      assertFalse(modelBean0.isDisablePagingParameters());
      assertNull(modelBean0.getRootProperty());
      assertNull(modelBean0.getTotalProperty());
      assertNull(modelBean0.getIdProperty());
      assertEquals("ch.rasc.extclassgenerator.ModelFieldBean", modelBean0.getName());
      assertNull(modelBean0.getDestroyMethod());
      assertEquals("json", modelBean0.getWriter());
      assertNull(modelBean0.getIdentifier());
      assertFalse(outputConfig0.isUseSingleQuotes());
      assertNull(outputConfig0.getLineEnding());
      assertNull(outputConfig0.getIncludeValidation());
      assertFalse(outputConfig0.isDebug());
      assertEquals(OutputFormat.EXTJS5, outputConfig0.getOutputFormat());
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = ModelGenerator.trimToNull("j8j+ftYQ{G8@Y04>O");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("j8j+ftYQ{G8@Y04>O", string2);
      
      ModelBean modelBean1 = new ModelBean();
      assertNull(modelBean1.getCreateMethod());
      assertEquals("json", modelBean1.getReader());
      assertNull(modelBean1.getWriteAllFields());
      assertNull(modelBean1.getTotalProperty());
      assertNull(modelBean1.getIdProperty());
      assertNull(modelBean1.getDestroyMethod());
      assertNull(modelBean1.getClientIdProperty());
      assertNull(modelBean1.getName());
      assertNull(modelBean1.getUpdateMethod());
      assertNull(modelBean1.getMessageProperty());
      assertNull(modelBean1.getSuccessProperty());
      assertNull(modelBean1.getIdentifier());
      assertFalse(modelBean1.isPaging());
      assertNull(modelBean1.getVersionProperty());
      assertEquals("json", modelBean1.getWriter());
      assertNull(modelBean1.getRootProperty());
      assertEquals("Ext.data.Model", modelBean1.getExtend());
      assertTrue(modelBean1.isAutodetectTypes());
      assertNull(modelBean1.getReadMethod());
      assertFalse(modelBean1.isDisablePagingParameters());
      assertFalse(modelBean1.isClientIdPropertyAddToWriter());
      assertFalse(modelBean1.equals((Object)modelBean0));
      assertNotNull(modelBean1);
      
      ModelBean modelBean2 = new ModelBean();
      assertNull(modelBean2.getDestroyMethod());
      assertNull(modelBean2.getTotalProperty());
      assertFalse(modelBean2.isClientIdPropertyAddToWriter());
      assertEquals("json", modelBean2.getReader());
      assertNull(modelBean2.getUpdateMethod());
      assertNull(modelBean2.getReadMethod());
      assertNull(modelBean2.getWriteAllFields());
      assertNull(modelBean2.getClientIdProperty());
      assertEquals("Ext.data.Model", modelBean2.getExtend());
      assertFalse(modelBean2.isPaging());
      assertTrue(modelBean2.isAutodetectTypes());
      assertNull(modelBean2.getSuccessProperty());
      assertFalse(modelBean2.isDisablePagingParameters());
      assertNull(modelBean2.getRootProperty());
      assertNull(modelBean2.getMessageProperty());
      assertNull(modelBean2.getIdentifier());
      assertNull(modelBean2.getVersionProperty());
      assertEquals("json", modelBean2.getWriter());
      assertNull(modelBean2.getIdProperty());
      assertNull(modelBean2.getCreateMethod());
      assertNull(modelBean2.getName());
      assertFalse(modelBean2.equals((Object)modelBean1));
      assertFalse(modelBean2.equals((Object)modelBean0));
      assertNotNull(modelBean2);
      
      OutputConfig outputConfig1 = new OutputConfig();
      assertFalse(outputConfig1.isDebug());
      assertFalse(outputConfig1.isSurroundApiWithQuotes());
      assertNull(outputConfig1.getIncludeValidation());
      assertNull(outputConfig1.getOutputFormat());
      assertFalse(outputConfig1.isUseSingleQuotes());
      assertNull(outputConfig1.getLineEnding());
      assertFalse(outputConfig1.equals((Object)outputConfig0));
      assertNotNull(outputConfig1);
      
      String string3 = ModelGenerator.generateJavascript(modelBean2, outputConfig1);
      assertNull(modelBean2.getDestroyMethod());
      assertNull(modelBean2.getTotalProperty());
      assertFalse(modelBean2.isClientIdPropertyAddToWriter());
      assertEquals("json", modelBean2.getReader());
      assertNull(modelBean2.getUpdateMethod());
      assertNull(modelBean2.getReadMethod());
      assertNull(modelBean2.getWriteAllFields());
      assertNull(modelBean2.getClientIdProperty());
      assertEquals("Ext.data.Model", modelBean2.getExtend());
      assertFalse(modelBean2.isPaging());
      assertTrue(modelBean2.isAutodetectTypes());
      assertNull(modelBean2.getSuccessProperty());
      assertFalse(modelBean2.isDisablePagingParameters());
      assertNull(modelBean2.getRootProperty());
      assertNull(modelBean2.getMessageProperty());
      assertNull(modelBean2.getIdentifier());
      assertNull(modelBean2.getVersionProperty());
      assertEquals("json", modelBean2.getWriter());
      assertNull(modelBean2.getIdProperty());
      assertNull(modelBean2.getCreateMethod());
      assertNull(modelBean2.getName());
      assertFalse(outputConfig1.isDebug());
      assertFalse(outputConfig1.isSurroundApiWithQuotes());
      assertNull(outputConfig1.getIncludeValidation());
      assertNull(outputConfig1.getOutputFormat());
      assertFalse(outputConfig1.isUseSingleQuotes());
      assertNull(outputConfig1.getLineEnding());
      assertNotSame(modelBean2, modelBean1);
      assertNotSame(modelBean2, modelBean0);
      assertNotSame(outputConfig1, outputConfig0);
      assertFalse(modelBean2.equals((Object)modelBean1));
      assertFalse(modelBean2.equals((Object)modelBean0));
      assertFalse(outputConfig1.equals((Object)outputConfig0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      assertEquals("Ext.define(\"null\",{extend:\"Ext.data.Model\",config:{fields:[]}});", string3);
      
      OutputConfig outputConfig2 = new OutputConfig();
      assertNull(outputConfig2.getLineEnding());
      assertFalse(outputConfig2.isDebug());
      assertFalse(outputConfig2.isSurroundApiWithQuotes());
      assertFalse(outputConfig2.isUseSingleQuotes());
      assertNull(outputConfig2.getIncludeValidation());
      assertNull(outputConfig2.getOutputFormat());
      assertFalse(outputConfig2.equals((Object)outputConfig0));
      assertTrue(outputConfig2.equals((Object)outputConfig1));
      assertNotNull(outputConfig2);
      
      ModelBean modelBean3 = ModelGenerator.createModel(class0);
      assertNull(modelBean3.getClientIdProperty());
      assertEquals("Ext.data.Model", modelBean3.getExtend());
      assertTrue(modelBean3.isAutodetectTypes());
      assertNull(modelBean3.getWriteAllFields());
      assertNull(modelBean3.getIdProperty());
      assertNull(modelBean3.getRootProperty());
      assertNull(modelBean3.getCreateMethod());
      assertEquals("json", modelBean3.getReader());
      assertNull(modelBean3.getVersionProperty());
      assertNull(modelBean3.getUpdateMethod());
      assertNull(modelBean3.getMessageProperty());
      assertEquals("json", modelBean3.getWriter());
      assertNull(modelBean3.getTotalProperty());
      assertNull(modelBean3.getDestroyMethod());
      assertNull(modelBean3.getSuccessProperty());
      assertNull(modelBean3.getIdentifier());
      assertFalse(modelBean3.isPaging());
      assertEquals("ch.rasc.extclassgenerator.ModelFieldBean", modelBean3.getName());
      assertNull(modelBean3.getReadMethod());
      assertFalse(modelBean3.isDisablePagingParameters());
      assertFalse(modelBean3.isClientIdPropertyAddToWriter());
      assertNotSame(modelBean3, modelBean2);
      assertNotSame(modelBean3, modelBean1);
      assertNotSame(modelBean3, modelBean0);
      assertFalse(modelBean3.equals((Object)modelBean2));
      assertFalse(modelBean3.equals((Object)modelBean1));
      assertFalse(modelBean3.equals((Object)modelBean0));
      assertNotNull(modelBean3);
      
      String string4 = ModelGenerator.generateJavascript(modelBean3, outputConfig1);
      assertFalse(outputConfig1.isDebug());
      assertFalse(outputConfig1.isSurroundApiWithQuotes());
      assertNull(outputConfig1.getIncludeValidation());
      assertNull(outputConfig1.getOutputFormat());
      assertFalse(outputConfig1.isUseSingleQuotes());
      assertNull(outputConfig1.getLineEnding());
      assertNull(modelBean3.getClientIdProperty());
      assertEquals("Ext.data.Model", modelBean3.getExtend());
      assertTrue(modelBean3.isAutodetectTypes());
      assertNull(modelBean3.getWriteAllFields());
      assertNull(modelBean3.getIdProperty());
      assertNull(modelBean3.getRootProperty());
      assertNull(modelBean3.getCreateMethod());
      assertEquals("json", modelBean3.getReader());
      assertNull(modelBean3.getVersionProperty());
      assertNull(modelBean3.getUpdateMethod());
      assertNull(modelBean3.getMessageProperty());
      assertEquals("json", modelBean3.getWriter());
      assertNull(modelBean3.getTotalProperty());
      assertNull(modelBean3.getDestroyMethod());
      assertNull(modelBean3.getSuccessProperty());
      assertNull(modelBean3.getIdentifier());
      assertFalse(modelBean3.isPaging());
      assertEquals("ch.rasc.extclassgenerator.ModelFieldBean", modelBean3.getName());
      assertNull(modelBean3.getReadMethod());
      assertFalse(modelBean3.isDisablePagingParameters());
      assertFalse(modelBean3.isClientIdPropertyAddToWriter());
      assertNotSame(outputConfig1, outputConfig2);
      assertNotSame(outputConfig1, outputConfig0);
      assertNotSame(modelBean3, modelBean2);
      assertNotSame(modelBean3, modelBean1);
      assertNotSame(modelBean3, modelBean0);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(outputConfig1.equals((Object)outputConfig0));
      assertTrue(outputConfig1.equals((Object)outputConfig2));
      assertFalse(modelBean3.equals((Object)modelBean2));
      assertFalse(modelBean3.equals((Object)modelBean1));
      assertFalse(modelBean3.equals((Object)modelBean0));
      assertNotNull(string4);
      assertEquals("Ext.define(\"ch.rasc.extclassgenerator.ModelFieldBean\",{extend:\"Ext.data.Model\",config:{fields:[{name:\"allowBlank\",type:\"boolean\"},{name:\"allowNull\",type:\"boolean\"},{name:\"critical\",type:\"boolean\"},{name:\"persist\",type:\"boolean\"},{name:\"unique\",type:\"boolean\"},{name:\"useNull\",type:\"boolean\"},{name:\"calculate\",type:\"string\"},{name:\"convert\",type:\"string\"},{name:\"dateFormat\",type:\"string\"},{name:\"mapping\",type:\"string\"},{name:\"name\",type:\"string\"},{name:\"type\",type:\"string\"}]}});", string4);
  }

  @Test(timeout = 4000000)
  public void test120()  throws Throwable  {
      HttpServletResponse httpServletResponse0 = mock(HttpServletResponse.class, new ViolatedAssumptionAnswer());
      doReturn((ServletOutputStream) null).when(httpServletResponse0).getOutputStream();
      HttpServletResponseWrapper httpServletResponseWrapper0 = new HttpServletResponseWrapper(httpServletResponse0);
      //  // Unstable assertion: assertNotNull(httpServletResponseWrapper0);
      
      ServletOutputStream servletOutputStream0 = httpServletResponseWrapper0.getOutputStream();
      //  // Unstable assertion: assertNull(servletOutputStream0);
      
      IncludeValidation includeValidation0 = IncludeValidation.BUILTIN;
      OutputConfig outputConfig0 = new OutputConfig();
      //  // Unstable assertion: assertFalse(outputConfig0.isDebug());
      //  // Unstable assertion: assertFalse(outputConfig0.isSurroundApiWithQuotes());
      //  // Unstable assertion: assertNull(outputConfig0.getOutputFormat());
      //  // Unstable assertion: assertFalse(outputConfig0.isUseSingleQuotes());
      //  // Unstable assertion: assertNull(outputConfig0.getLineEnding());
      //  // Unstable assertion: assertNull(outputConfig0.getIncludeValidation());
      //  // Unstable assertion: assertNotNull(outputConfig0);
      
      outputConfig0.setSurroundApiWithQuotes(false);
      //  // Unstable assertion: assertFalse(outputConfig0.isDebug());
      //  // Unstable assertion: assertFalse(outputConfig0.isSurroundApiWithQuotes());
      //  // Unstable assertion: assertNull(outputConfig0.getOutputFormat());
      //  // Unstable assertion: assertFalse(outputConfig0.isUseSingleQuotes());
      //  // Unstable assertion: assertNull(outputConfig0.getLineEnding());
      //  // Unstable assertion: assertNull(outputConfig0.getIncludeValidation());
      
      HttpServletRequest httpServletRequest0 = mock(HttpServletRequest.class, new ViolatedAssumptionAnswer());
      doReturn("negative").when(httpServletRequest0).getRealPath(anyString());
      HttpServletRequestWrapper httpServletRequestWrapper0 = new HttpServletRequestWrapper(httpServletRequest0);
      //  // Unstable assertion: assertNotNull(httpServletRequestWrapper0);
      
      String string0 = httpServletRequestWrapper0.getRealPath("j8j+ftYQ{G8@Y04>O");
      //  // Unstable assertion: assertNotNull(string0);
      //  // Unstable assertion: assertEquals("negative", string0);
      
      ObjectIdentityEqualsVisitor objectIdentityEqualsVisitor0 = new ObjectIdentityEqualsVisitor();
      //  // Unstable assertion: assertNotNull(objectIdentityEqualsVisitor0);
      
      LabeledStmt labeledStmt0 = new LabeledStmt();
      //  // Unstable assertion: assertFalse(labeledStmt0.isForStmt());
      //  // Unstable assertion: assertFalse(labeledStmt0.isAssertStmt());
      //  // Unstable assertion: assertFalse(labeledStmt0.isIfStmt());
      //  // Unstable assertion: assertFalse(labeledStmt0.isEmptyStmt());
      //  // Unstable assertion: assertFalse(labeledStmt0.isExpressionStmt());
      //  // Unstable assertion: assertFalse(labeledStmt0.isUnparsableStmt());
      //  // Unstable assertion: assertFalse(labeledStmt0.isYieldStmt());
      //  // Unstable assertion: assertFalse(labeledStmt0.isBlockStmt());
      //  // Unstable assertion: assertFalse(labeledStmt0.isExplicitConstructorInvocationStmt());
      //  // Unstable assertion: assertFalse(labeledStmt0.isTryStmt());
      //  // Unstable assertion: assertFalse(labeledStmt0.isWhileStmt());
      //  // Unstable assertion: assertFalse(labeledStmt0.isSwitchStmt());
      //  // Unstable assertion: assertTrue(labeledStmt0.isLabeledStmt());
      //  // Unstable assertion: assertFalse(labeledStmt0.isLocalClassDeclarationStmt());
      //  // Unstable assertion: assertFalse(labeledStmt0.isLocalRecordDeclarationStmt());
      //  // Unstable assertion: assertFalse(labeledStmt0.isBreakStmt());
      //  // Unstable assertion: assertFalse(labeledStmt0.isSynchronizedStmt());
      //  // Unstable assertion: assertFalse(labeledStmt0.isReturnStmt());
      //  // Unstable assertion: assertFalse(labeledStmt0.isForEachStmt());
      //  // Unstable assertion: assertFalse(labeledStmt0.isContinueStmt());
      //  // Unstable assertion: assertEquals(Node.Parsedness.PARSED, labeledStmt0.getParsed());
      //  // Unstable assertion: assertFalse(labeledStmt0.isThrowStmt());
      //  // Unstable assertion: assertFalse(labeledStmt0.isDoStmt());
      //  // Unstable assertion: assertEquals((-2), Node.ABSOLUTE_END_LINE);
      //  // Unstable assertion: assertEquals((-1), Node.ABSOLUTE_BEGIN_LINE);
      //  // Unstable assertion: assertNotNull(labeledStmt0);
      
      Class<Object> class0 = Object.class;
      LineEnding lineEnding0 = LineEnding.CRLF;
      outputConfig0.setLineEnding(lineEnding0);
      //  // Unstable assertion: assertFalse(outputConfig0.isDebug());
      //  // Unstable assertion: assertFalse(outputConfig0.isSurroundApiWithQuotes());
      //  // Unstable assertion: assertNull(outputConfig0.getOutputFormat());
      //  // Unstable assertion: assertEquals(LineEnding.CRLF, outputConfig0.getLineEnding());
      //  // Unstable assertion: assertFalse(outputConfig0.isUseSingleQuotes());
      //  // Unstable assertion: assertNull(outputConfig0.getIncludeValidation());
      
      ModelBean modelBean0 = ModelGenerator.createModel(class0, includeValidation0);
      //  // Unstable assertion: assertNull(modelBean0.getMessageProperty());
      //  // Unstable assertion: assertNull(modelBean0.getUpdateMethod());
      //  // Unstable assertion: assertFalse(modelBean0.isDisablePagingParameters());
      //  // Unstable assertion: assertNull(modelBean0.getCreateMethod());
      //  // Unstable assertion: assertNull(modelBean0.getIdProperty());
      //  // Unstable assertion: assertEquals("d1WtV(zz", modelBean0.getReadMethod());
      //  // Unstable assertion: assertEquals("json", modelBean0.getWriter());
      //  // Unstable assertion: assertNull(modelBean0.getTotalProperty());
      //  // Unstable assertion: assertNull(modelBean0.getDestroyMethod());
      //  // Unstable assertion: assertNull(modelBean0.getRootProperty());
      //  // Unstable assertion: assertEquals("`}zU`yZ19?l.J%Se", modelBean0.getIdentifier());
      //  // Unstable assertion: assertFalse(modelBean0.isClientIdPropertyAddToWriter());
      //  // Unstable assertion: assertEquals("json", modelBean0.getReader());
      //  // Unstable assertion: assertNull(modelBean0.getSuccessProperty());
      //  // Unstable assertion: assertNull(modelBean0.getVersionProperty());
      //  // Unstable assertion: assertNull(modelBean0.getWriteAllFields());
      //  // Unstable assertion: assertTrue(modelBean0.isAutodetectTypes());
      //  // Unstable assertion: assertFalse(modelBean0.isPaging());
      //  // Unstable assertion: assertNull(modelBean0.getClientIdProperty());
      //  // Unstable assertion: assertEquals("java.lang.Object", modelBean0.getName());
      //  // Unstable assertion: assertNotNull(modelBean0);
      
      String string1 = ModelGenerator.generateJavascript(modelBean0, outputConfig0);
      //  // Unstable assertion: assertFalse(outputConfig0.isDebug());
      //  // Unstable assertion: assertFalse(outputConfig0.isSurroundApiWithQuotes());
      //  // Unstable assertion: assertNull(outputConfig0.getOutputFormat());
      //  // Unstable assertion: assertEquals(LineEnding.CRLF, outputConfig0.getLineEnding());
      //  // Unstable assertion: assertFalse(outputConfig0.isUseSingleQuotes());
      //  // Unstable assertion: assertNull(outputConfig0.getIncludeValidation());
      //  // Unstable assertion: assertNull(modelBean0.getMessageProperty());
      //  // Unstable assertion: assertNull(modelBean0.getUpdateMethod());
      //  // Unstable assertion: assertFalse(modelBean0.isDisablePagingParameters());
      //  // Unstable assertion: assertNull(modelBean0.getCreateMethod());
      //  // Unstable assertion: assertNull(modelBean0.getIdProperty());
      //  // Unstable assertion: assertEquals("d1WtV(zz", modelBean0.getReadMethod());
      //  // Unstable assertion: assertEquals("json", modelBean0.getWriter());
      //  // Unstable assertion: assertNull(modelBean0.getTotalProperty());
      //  // Unstable assertion: assertNull(modelBean0.getDestroyMethod());
      //  // Unstable assertion: assertNull(modelBean0.getRootProperty());
      //  // Unstable assertion: assertEquals("`}zU`yZ19?l.J%Se", modelBean0.getIdentifier());
      //  // Unstable assertion: assertFalse(modelBean0.isClientIdPropertyAddToWriter());
      //  // Unstable assertion: assertEquals("json", modelBean0.getReader());
      //  // Unstable assertion: assertNull(modelBean0.getSuccessProperty());
      //  // Unstable assertion: assertNull(modelBean0.getVersionProperty());
      //  // Unstable assertion: assertNull(modelBean0.getWriteAllFields());
      //  // Unstable assertion: assertTrue(modelBean0.isAutodetectTypes());
      //  // Unstable assertion: assertFalse(modelBean0.isPaging());
      //  // Unstable assertion: assertNull(modelBean0.getClientIdProperty());
      //  // Unstable assertion: assertEquals("java.lang.Object", modelBean0.getName());
      //  // Unstable assertion: assertFalse(string1.equals((Object)string0));
      //  // Unstable assertion: assertNotNull(string1);
  }

  @Test(timeout = 4000000)
  public void test121()  throws Throwable  {
      OutputFormat outputFormat0 = OutputFormat.TOUCH2;
      ModelBean modelBean0 = new ModelBean();
      assertFalse(modelBean0.isDisablePagingParameters());
      assertNull(modelBean0.getSuccessProperty());
      assertNull(modelBean0.getMessageProperty());
      assertFalse(modelBean0.isPaging());
      assertNull(modelBean0.getClientIdProperty());
      assertNull(modelBean0.getVersionProperty());
      assertNull(modelBean0.getWriteAllFields());
      assertTrue(modelBean0.isAutodetectTypes());
      assertEquals("json", modelBean0.getReader());
      assertNull(modelBean0.getUpdateMethod());
      assertEquals("Ext.data.Model", modelBean0.getExtend());
      assertNull(modelBean0.getReadMethod());
      assertNull(modelBean0.getCreateMethod());
      assertFalse(modelBean0.isClientIdPropertyAddToWriter());
      assertNull(modelBean0.getName());
      assertNull(modelBean0.getTotalProperty());
      assertNull(modelBean0.getRootProperty());
      assertNull(modelBean0.getIdProperty());
      assertEquals("json", modelBean0.getWriter());
      assertNull(modelBean0.getDestroyMethod());
      assertNull(modelBean0.getIdentifier());
      assertNotNull(modelBean0);
      
      String string0 = ModelGenerator.generateJavascript(modelBean0, outputFormat0, true);
      assertFalse(modelBean0.isDisablePagingParameters());
      assertNull(modelBean0.getSuccessProperty());
      assertNull(modelBean0.getMessageProperty());
      assertFalse(modelBean0.isPaging());
      assertNull(modelBean0.getClientIdProperty());
      assertNull(modelBean0.getVersionProperty());
      assertNull(modelBean0.getWriteAllFields());
      assertTrue(modelBean0.isAutodetectTypes());
      assertEquals("json", modelBean0.getReader());
      assertNull(modelBean0.getUpdateMethod());
      assertEquals("Ext.data.Model", modelBean0.getExtend());
      assertNull(modelBean0.getReadMethod());
      assertNull(modelBean0.getCreateMethod());
      assertFalse(modelBean0.isClientIdPropertyAddToWriter());
      assertNull(modelBean0.getName());
      assertNull(modelBean0.getTotalProperty());
      assertNull(modelBean0.getRootProperty());
      assertNull(modelBean0.getIdProperty());
      assertEquals("json", modelBean0.getWriter());
      assertNull(modelBean0.getDestroyMethod());
      assertNull(modelBean0.getIdentifier());
      assertNotNull(string0);
      assertEquals("Ext.define(\"null\",\r\n{\n  extend : \"Ext.data.Model\",\n  config : {\n    fields : [ ]\n  }\n});", string0);
  }

  @Test(timeout = 4000000)
  public void test122()  throws Throwable  {
      OutputFormat outputFormat0 = OutputFormat.TOUCH2;
      // Undeclared exception!
      try { 
        ModelGenerator.generateJavascript((ModelBean) null, outputFormat0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("ch.rasc.extclassgenerator.ModelGenerator", e);
      }
  }

  @Test(timeout = 4000000)
  public void test123()  throws Throwable  {
      OutputConfig outputConfig0 = new OutputConfig();
      //  // Unstable assertion: assertNull(outputConfig0.getIncludeValidation());
      //  // Unstable assertion: assertNull(outputConfig0.getOutputFormat());
      //  // Unstable assertion: assertFalse(outputConfig0.isUseSingleQuotes());
      //  // Unstable assertion: assertFalse(outputConfig0.isSurroundApiWithQuotes());
      //  // Unstable assertion: assertFalse(outputConfig0.isDebug());
      //  // Unstable assertion: assertNull(outputConfig0.getLineEnding());
      //  // Unstable assertion: assertNotNull(outputConfig0);
      
      OutputFormat outputFormat0 = OutputFormat.EXTJS5;
      outputConfig0.setOutputFormat(outputFormat0);
      //  // Unstable assertion: assertNull(outputConfig0.getIncludeValidation());
      //  // Unstable assertion: assertFalse(outputConfig0.isUseSingleQuotes());
      //  // Unstable assertion: assertEquals(OutputFormat.EXTJS5, outputConfig0.getOutputFormat());
      //  // Unstable assertion: assertFalse(outputConfig0.isSurroundApiWithQuotes());
      //  // Unstable assertion: assertFalse(outputConfig0.isDebug());
      //  // Unstable assertion: assertNull(outputConfig0.getLineEnding());
      
      Class<Object> class0 = Object.class;
      IncludeValidation includeValidation0 = IncludeValidation.NONE;
      ModelBean modelBean0 = ModelGenerator.createModel(class0, includeValidation0);
      //  // Unstable assertion: assertEquals("d1WtV(zz", modelBean0.getReadMethod());
      //  // Unstable assertion: assertEquals("json", modelBean0.getWriter());
      //  // Unstable assertion: assertFalse(modelBean0.isDisablePagingParameters());
      //  // Unstable assertion: assertFalse(modelBean0.isClientIdPropertyAddToWriter());
      //  // Unstable assertion: assertFalse(modelBean0.isPaging());
      //  // Unstable assertion: assertNull(modelBean0.getSuccessProperty());
      //  // Unstable assertion: assertNull(modelBean0.getVersionProperty());
      //  // Unstable assertion: assertEquals("java.lang.Object", modelBean0.getName());
      //  // Unstable assertion: assertEquals("defaultValue", modelBean0.getIdentifier());
      //  // Unstable assertion: assertNull(modelBean0.getWriteAllFields());
      //  // Unstable assertion: assertTrue(modelBean0.isAutodetectTypes());
      //  // Unstable assertion: assertNull(modelBean0.getUpdateMethod());
      //  // Unstable assertion: assertEquals("json", modelBean0.getReader());
      //  // Unstable assertion: assertEquals("_DfY]L", modelBean0.getClientIdProperty());
      //  // Unstable assertion: assertNull(modelBean0.getMessageProperty());
      //  // Unstable assertion: assertNull(modelBean0.getDestroyMethod());
      //  // Unstable assertion: assertNull(modelBean0.getCreateMethod());
      //  // Unstable assertion: assertEquals("G02z4]Nf6A#kC(", modelBean0.getExtend());
      //  // Unstable assertion: assertNull(modelBean0.getIdProperty());
      //  // Unstable assertion: assertNull(modelBean0.getTotalProperty());
      //  // Unstable assertion: assertNull(modelBean0.getRootProperty());
      //  // Unstable assertion: assertNotNull(modelBean0);
      
      modelBean0.setReadMethod("d1WtV(zz");
      //  // Unstable assertion: assertEquals("d1WtV(zz", modelBean0.getReadMethod());
      //  // Unstable assertion: assertEquals("json", modelBean0.getWriter());
      //  // Unstable assertion: assertFalse(modelBean0.isDisablePagingParameters());
      //  // Unstable assertion: assertFalse(modelBean0.isClientIdPropertyAddToWriter());
      //  // Unstable assertion: assertFalse(modelBean0.isPaging());
      //  // Unstable assertion: assertNull(modelBean0.getSuccessProperty());
      //  // Unstable assertion: assertNull(modelBean0.getVersionProperty());
      //  // Unstable assertion: assertEquals("java.lang.Object", modelBean0.getName());
      //  // Unstable assertion: assertEquals("defaultValue", modelBean0.getIdentifier());
      //  // Unstable assertion: assertNull(modelBean0.getWriteAllFields());
      //  // Unstable assertion: assertTrue(modelBean0.isAutodetectTypes());
      //  // Unstable assertion: assertNull(modelBean0.getUpdateMethod());
      //  // Unstable assertion: assertEquals("json", modelBean0.getReader());
      //  // Unstable assertion: assertEquals("_DfY]L", modelBean0.getClientIdProperty());
      //  // Unstable assertion: assertNull(modelBean0.getMessageProperty());
      //  // Unstable assertion: assertNull(modelBean0.getDestroyMethod());
      //  // Unstable assertion: assertNull(modelBean0.getCreateMethod());
      //  // Unstable assertion: assertEquals("G02z4]Nf6A#kC(", modelBean0.getExtend());
      //  // Unstable assertion: assertNull(modelBean0.getIdProperty());
      //  // Unstable assertion: assertNull(modelBean0.getTotalProperty());
      //  // Unstable assertion: assertNull(modelBean0.getRootProperty());
      
      OutputConfig outputConfig1 = new OutputConfig();
      //  // Unstable assertion: assertFalse(outputConfig1.isDebug());
      //  // Unstable assertion: assertNull(outputConfig1.getLineEnding());
      //  // Unstable assertion: assertFalse(outputConfig1.isSurroundApiWithQuotes());
      //  // Unstable assertion: assertFalse(outputConfig1.isUseSingleQuotes());
      //  // Unstable assertion: assertNull(outputConfig1.getOutputFormat());
      //  // Unstable assertion: assertNull(outputConfig1.getIncludeValidation());
      //  // Unstable assertion: assertFalse(outputConfig1.equals((Object)outputConfig0));
      //  // Unstable assertion: assertNotNull(outputConfig1);
      
      String string0 = ModelGenerator.generateJavascript(modelBean0, outputConfig0);
      //  // Unstable assertion: assertNull(outputConfig0.getIncludeValidation());
      //  // Unstable assertion: assertFalse(outputConfig0.isUseSingleQuotes());
      //  // Unstable assertion: assertEquals(OutputFormat.EXTJS5, outputConfig0.getOutputFormat());
      //  // Unstable assertion: assertFalse(outputConfig0.isSurroundApiWithQuotes());
      //  // Unstable assertion: assertFalse(outputConfig0.isDebug());
      //  // Unstable assertion: assertNull(outputConfig0.getLineEnding());
      //  // Unstable assertion: assertEquals("d1WtV(zz", modelBean0.getReadMethod());
      //  // Unstable assertion: assertEquals("json", modelBean0.getWriter());
      //  // Unstable assertion: assertFalse(modelBean0.isDisablePagingParameters());
      //  // Unstable assertion: assertFalse(modelBean0.isClientIdPropertyAddToWriter());
      //  // Unstable assertion: assertFalse(modelBean0.isPaging());
      //  // Unstable assertion: assertNull(modelBean0.getSuccessProperty());
      //  // Unstable assertion: assertNull(modelBean0.getVersionProperty());
      //  // Unstable assertion: assertEquals("java.lang.Object", modelBean0.getName());
      //  // Unstable assertion: assertEquals("defaultValue", modelBean0.getIdentifier());
      //  // Unstable assertion: assertNull(modelBean0.getWriteAllFields());
      //  // Unstable assertion: assertTrue(modelBean0.isAutodetectTypes());
      //  // Unstable assertion: assertNull(modelBean0.getUpdateMethod());
      //  // Unstable assertion: assertEquals("json", modelBean0.getReader());
      //  // Unstable assertion: assertEquals("_DfY]L", modelBean0.getClientIdProperty());
      //  // Unstable assertion: assertNull(modelBean0.getMessageProperty());
      //  // Unstable assertion: assertNull(modelBean0.getDestroyMethod());
      //  // Unstable assertion: assertNull(modelBean0.getCreateMethod());
      //  // Unstable assertion: assertEquals("G02z4]Nf6A#kC(", modelBean0.getExtend());
      //  // Unstable assertion: assertNull(modelBean0.getIdProperty());
      //  // Unstable assertion: assertNull(modelBean0.getTotalProperty());
      //  // Unstable assertion: assertNull(modelBean0.getRootProperty());
      //  // Unstable assertion: assertNotSame(outputConfig0, outputConfig1);
      //  // Unstable assertion: assertFalse(outputConfig0.equals((Object)outputConfig1));
      //  // Unstable assertion: assertNotNull(string0);
      
      String string1 = ModelGenerator.generateJavascript(modelBean0, outputConfig0);
      //  // Unstable assertion: assertNull(outputConfig0.getIncludeValidation());
      //  // Unstable assertion: assertFalse(outputConfig0.isUseSingleQuotes());
      //  // Unstable assertion: assertEquals(OutputFormat.EXTJS5, outputConfig0.getOutputFormat());
      //  // Unstable assertion: assertFalse(outputConfig0.isSurroundApiWithQuotes());
      //  // Unstable assertion: assertFalse(outputConfig0.isDebug());
      //  // Unstable assertion: assertNull(outputConfig0.getLineEnding());
      //  // Unstable assertion: assertEquals("d1WtV(zz", modelBean0.getReadMethod());
      //  // Unstable assertion: assertEquals("json", modelBean0.getWriter());
      //  // Unstable assertion: assertFalse(modelBean0.isDisablePagingParameters());
      //  // Unstable assertion: assertFalse(modelBean0.isClientIdPropertyAddToWriter());
      //  // Unstable assertion: assertFalse(modelBean0.isPaging());
      //  // Unstable assertion: assertNull(modelBean0.getSuccessProperty());
      //  // Unstable assertion: assertNull(modelBean0.getVersionProperty());
      //  // Unstable assertion: assertEquals("java.lang.Object", modelBean0.getName());
      //  // Unstable assertion: assertEquals("defaultValue", modelBean0.getIdentifier());
      //  // Unstable assertion: assertNull(modelBean0.getWriteAllFields());
      //  // Unstable assertion: assertTrue(modelBean0.isAutodetectTypes());
      //  // Unstable assertion: assertNull(modelBean0.getUpdateMethod());
      //  // Unstable assertion: assertEquals("json", modelBean0.getReader());
      //  // Unstable assertion: assertEquals("_DfY]L", modelBean0.getClientIdProperty());
      //  // Unstable assertion: assertNull(modelBean0.getMessageProperty());
      //  // Unstable assertion: assertNull(modelBean0.getDestroyMethod());
      //  // Unstable assertion: assertNull(modelBean0.getCreateMethod());
      //  // Unstable assertion: assertEquals("G02z4]Nf6A#kC(", modelBean0.getExtend());
      //  // Unstable assertion: assertNull(modelBean0.getIdProperty());
      //  // Unstable assertion: assertNull(modelBean0.getTotalProperty());
      //  // Unstable assertion: assertNull(modelBean0.getRootProperty());
      //  // Unstable assertion: assertNotSame(outputConfig0, outputConfig1);
      //  // Unstable assertion: assertFalse(outputConfig0.equals((Object)outputConfig1));
      //  // Unstable assertion: assertNotNull(string1);
      
      HttpServletRequest httpServletRequest0 = mock(HttpServletRequest.class, new ViolatedAssumptionAnswer());
      HttpServletRequestWrapper httpServletRequestWrapper0 = new HttpServletRequestWrapper(httpServletRequest0);
      //  // Unstable assertion: assertNotNull(httpServletRequestWrapper0);
      
      HttpServletResponse httpServletResponse0 = mock(HttpServletResponse.class, new ViolatedAssumptionAnswer());
      doReturn((ServletOutputStream) null).when(httpServletResponse0).getOutputStream();
      HttpServletResponseWrapper httpServletResponseWrapper0 = new HttpServletResponseWrapper(httpServletResponse0);
      //  // Unstable assertion: assertNotNull(httpServletResponseWrapper0);
      
      ServletResponse servletResponse0 = httpServletResponseWrapper0.getResponse();
      //  // Unstable assertion: assertNotNull(servletResponse0);
      
      ServletResponseWrapper servletResponseWrapper0 = new ServletResponseWrapper(servletResponse0);
      //  // Unstable assertion: assertNotNull(servletResponseWrapper0);
      
      ServletOutputStream servletOutputStream0 = servletResponseWrapper0.getOutputStream();
      //  // Unstable assertion: assertNull(servletOutputStream0);
      
      OutputFormat outputFormat1 = OutputFormat.EXTJS4;
      String string2 = ModelGenerator.generateJavascript(modelBean0, outputFormat1, true);
      //  // Unstable assertion: assertEquals("d1WtV(zz", modelBean0.getReadMethod());
      //  // Unstable assertion: assertEquals("json", modelBean0.getWriter());
      //  // Unstable assertion: assertFalse(modelBean0.isDisablePagingParameters());
      //  // Unstable assertion: assertFalse(modelBean0.isClientIdPropertyAddToWriter());
      //  // Unstable assertion: assertFalse(modelBean0.isPaging());
      //  // Unstable assertion: assertNull(modelBean0.getSuccessProperty());
      //  // Unstable assertion: assertNull(modelBean0.getVersionProperty());
      //  // Unstable assertion: assertEquals("java.lang.Object", modelBean0.getName());
      //  // Unstable assertion: assertEquals("defaultValue", modelBean0.getIdentifier());
      //  // Unstable assertion: assertNull(modelBean0.getWriteAllFields());
      //  // Unstable assertion: assertTrue(modelBean0.isAutodetectTypes());
      //  // Unstable assertion: assertNull(modelBean0.getUpdateMethod());
      //  // Unstable assertion: assertEquals("json", modelBean0.getReader());
      //  // Unstable assertion: assertEquals("_DfY]L", modelBean0.getClientIdProperty());
      //  // Unstable assertion: assertNull(modelBean0.getMessageProperty());
      //  // Unstable assertion: assertNull(modelBean0.getDestroyMethod());
      //  // Unstable assertion: assertNull(modelBean0.getCreateMethod());
      //  // Unstable assertion: assertEquals("G02z4]Nf6A#kC(", modelBean0.getExtend());
      //  // Unstable assertion: assertNull(modelBean0.getIdProperty());
      //  // Unstable assertion: assertNull(modelBean0.getTotalProperty());
      //  // Unstable assertion: assertNull(modelBean0.getRootProperty());
      //  // Unstable assertion: assertNotSame(outputFormat1, outputFormat0);
      //  // Unstable assertion: assertFalse(outputFormat1.equals((Object)outputFormat0));
      //  // Unstable assertion: assertFalse(string2.equals((Object)string0));
      //  // Unstable assertion: assertFalse(string2.equals((Object)string1));
      //  // Unstable assertion: assertNotNull(string2);
  }

  @Test(timeout = 4000000)
  public void test124()  throws Throwable  {
      Class<String> class0 = String.class;
      ModelBean modelBean0 = ModelGenerator.createModel(class0);
      assertNull(modelBean0.getCreateMethod());
      assertNull(modelBean0.getDestroyMethod());
      assertNull(modelBean0.getTotalProperty());
      assertNull(modelBean0.getClientIdProperty());
      assertNull(modelBean0.getWriteAllFields());
      assertNull(modelBean0.getUpdateMethod());
      assertEquals("json", modelBean0.getReader());
      assertFalse(modelBean0.isPaging());
      assertFalse(modelBean0.isDisablePagingParameters());
      assertEquals("java.lang.String", modelBean0.getName());
      assertNull(modelBean0.getMessageProperty());
      assertNull(modelBean0.getVersionProperty());
      assertNull(modelBean0.getRootProperty());
      assertNull(modelBean0.getIdentifier());
      assertNull(modelBean0.getSuccessProperty());
      assertTrue(modelBean0.isAutodetectTypes());
      assertEquals("json", modelBean0.getWriter());
      assertNull(modelBean0.getIdProperty());
      assertNull(modelBean0.getReadMethod());
      assertFalse(modelBean0.isClientIdPropertyAddToWriter());
      assertNotNull(modelBean0);
      
      BelongsToAssociation belongsToAssociation0 = new BelongsToAssociation(class0);
      assertNull(belongsToAssociation0.getGetterName());
      assertNull(belongsToAssociation0.getSetterName());
      assertNull(belongsToAssociation0.getInstanceName());
      assertNull(belongsToAssociation0.getForeignKey());
      assertEquals("java.lang.String", belongsToAssociation0.getModel());
      assertNull(belongsToAssociation0.getPrimaryKey());
      assertEquals("belongsTo", belongsToAssociation0.getType());
      assertNull(belongsToAssociation0.getAssociationKey());
      assertNotNull(belongsToAssociation0);
      
      OutputConfig outputConfig0 = new OutputConfig();
      assertNull(outputConfig0.getOutputFormat());
      assertNull(outputConfig0.getIncludeValidation());
      assertFalse(outputConfig0.isSurroundApiWithQuotes());
      assertFalse(outputConfig0.isDebug());
      assertFalse(outputConfig0.isUseSingleQuotes());
      assertNull(outputConfig0.getLineEnding());
      assertNotNull(outputConfig0);
      
      String string0 = ModelGenerator.generateJavascript(modelBean0, outputConfig0);
      assertNull(modelBean0.getCreateMethod());
      assertNull(modelBean0.getDestroyMethod());
      assertNull(modelBean0.getTotalProperty());
      assertNull(modelBean0.getClientIdProperty());
      assertNull(modelBean0.getWriteAllFields());
      assertNull(modelBean0.getUpdateMethod());
      assertEquals("json", modelBean0.getReader());
      assertFalse(modelBean0.isPaging());
      assertFalse(modelBean0.isDisablePagingParameters());
      assertEquals("java.lang.String", modelBean0.getName());
      assertNull(modelBean0.getMessageProperty());
      assertNull(modelBean0.getVersionProperty());
      assertNull(modelBean0.getRootProperty());
      assertNull(modelBean0.getIdentifier());
      assertNull(modelBean0.getSuccessProperty());
      assertTrue(modelBean0.isAutodetectTypes());
      assertEquals("json", modelBean0.getWriter());
      assertNull(modelBean0.getIdProperty());
      assertNull(modelBean0.getReadMethod());
      assertFalse(modelBean0.isClientIdPropertyAddToWriter());
      assertNull(outputConfig0.getOutputFormat());
      assertNull(outputConfig0.getIncludeValidation());
      assertFalse(outputConfig0.isSurroundApiWithQuotes());
      assertFalse(outputConfig0.isDebug());
      assertFalse(outputConfig0.isUseSingleQuotes());
      assertNull(outputConfig0.getLineEnding());
      assertNotNull(string0);
  }

  @Test(timeout = 4000000)
  public void test125()  throws Throwable  {
      OutputFormat outputFormat0 = OutputFormat.TOUCH2;
      HttpServletRequest httpServletRequest0 = mock(HttpServletRequest.class, new ViolatedAssumptionAnswer());
      doReturn("bUtRcT;w.").when(httpServletRequest0).getHeader(anyString());
      HttpServletRequestWrapper httpServletRequestWrapper0 = new HttpServletRequestWrapper(httpServletRequest0);
      assertNotNull(httpServletRequestWrapper0);
      
      HttpServletResponse httpServletResponse0 = mock(HttpServletResponse.class, new ViolatedAssumptionAnswer());
      doReturn((ServletOutputStream) null).when(httpServletResponse0).getOutputStream();
      HttpServletResponseWrapper httpServletResponseWrapper0 = new HttpServletResponseWrapper(httpServletResponse0);
      assertNotNull(httpServletResponseWrapper0);
      
      ServletResponseWrapper servletResponseWrapper0 = new ServletResponseWrapper(httpServletResponseWrapper0);
      assertNotNull(servletResponseWrapper0);
      
      ServletOutputStream servletOutputStream0 = httpServletResponseWrapper0.getOutputStream();
      assertNull(servletOutputStream0);
      
      httpServletResponseWrapper0.setResponse(servletResponseWrapper0);
      Class<LabeledStmt> class0 = LabeledStmt.class;
      ModelBean modelBean0 = ModelGenerator.createModel(class0);
      assertFalse(modelBean0.isDisablePagingParameters());
      assertNull(modelBean0.getVersionProperty());
      assertNull(modelBean0.getRootProperty());
      assertNull(modelBean0.getIdentifier());
      assertNull(modelBean0.getMessageProperty());
      assertEquals("json", modelBean0.getWriter());
      assertNull(modelBean0.getClientIdProperty());
      assertEquals("Ext.data.Model", modelBean0.getExtend());
      assertNull(modelBean0.getReadMethod());
      assertEquals("com.github.javaparser.ast.stmt.LabeledStmt", modelBean0.getName());
      assertTrue(modelBean0.isAutodetectTypes());
      assertFalse(modelBean0.isPaging());
      assertNull(modelBean0.getSuccessProperty());
      assertNull(modelBean0.getCreateMethod());
      assertNull(modelBean0.getDestroyMethod());
      assertNull(modelBean0.getIdProperty());
      assertNull(modelBean0.getUpdateMethod());
      assertFalse(modelBean0.isClientIdPropertyAddToWriter());
      assertNull(modelBean0.getWriteAllFields());
      assertEquals("json", modelBean0.getReader());
      assertNull(modelBean0.getTotalProperty());
      assertNotNull(modelBean0);
      
      // Undeclared exception!
      try { 
        ModelGenerator.writeModel((HttpServletRequest) httpServletRequestWrapper0, (HttpServletResponse) httpServletResponseWrapper0, modelBean0, outputFormat0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000000)
  public void test126()  throws Throwable  {
      HttpServletResponse httpServletResponse0 = mock(HttpServletResponse.class, new ViolatedAssumptionAnswer());
      OutputConfig outputConfig0 = new OutputConfig();
      //  // Unstable assertion: assertFalse(outputConfig0.isSurroundApiWithQuotes());
      //  // Unstable assertion: assertFalse(outputConfig0.isDebug());
      //  // Unstable assertion: assertFalse(outputConfig0.isUseSingleQuotes());
      //  // Unstable assertion: assertNull(outputConfig0.getLineEnding());
      //  // Unstable assertion: assertNull(outputConfig0.getIncludeValidation());
      //  // Unstable assertion: assertNull(outputConfig0.getOutputFormat());
      //  // Unstable assertion: assertNotNull(outputConfig0);
      
      outputConfig0.setUseSingleQuotes(false);
      //  // Unstable assertion: assertFalse(outputConfig0.isSurroundApiWithQuotes());
      //  // Unstable assertion: assertFalse(outputConfig0.isDebug());
      //  // Unstable assertion: assertFalse(outputConfig0.isUseSingleQuotes());
      //  // Unstable assertion: assertNull(outputConfig0.getLineEnding());
      //  // Unstable assertion: assertNull(outputConfig0.getIncludeValidation());
      //  // Unstable assertion: assertNull(outputConfig0.getOutputFormat());
      
      outputConfig0.setDebug(false);
      //  // Unstable assertion: assertFalse(outputConfig0.isSurroundApiWithQuotes());
      //  // Unstable assertion: assertFalse(outputConfig0.isDebug());
      //  // Unstable assertion: assertFalse(outputConfig0.isUseSingleQuotes());
      //  // Unstable assertion: assertNull(outputConfig0.getLineEnding());
      //  // Unstable assertion: assertNull(outputConfig0.getIncludeValidation());
      //  // Unstable assertion: assertNull(outputConfig0.getOutputFormat());
      
      ModelBean modelBean0 = new ModelBean();
      //  // Unstable assertion: assertNull(modelBean0.getDestroyMethod());
      //  // Unstable assertion: assertFalse(modelBean0.isClientIdPropertyAddToWriter());
      //  // Unstable assertion: assertNull(modelBean0.getTotalProperty());
      //  // Unstable assertion: assertNull(modelBean0.getName());
      //  // Unstable assertion: assertNull(modelBean0.getCreateMethod());
      //  // Unstable assertion: assertTrue(modelBean0.isAutodetectTypes());
      //  // Unstable assertion: assertNull(modelBean0.getUpdateMethod());
      //  // Unstable assertion: assertNull(modelBean0.getClientIdProperty());
      //  // Unstable assertion: assertEquals("json", modelBean0.getReader());
      //  // Unstable assertion: assertNull(modelBean0.getVersionProperty());
      //  // Unstable assertion: assertNull(modelBean0.getWriteAllFields());
      //  // Unstable assertion: assertNull(modelBean0.getMessageProperty());
      //  // Unstable assertion: assertFalse(modelBean0.isPaging());
      //  // Unstable assertion: assertFalse(modelBean0.isDisablePagingParameters());
      //  // Unstable assertion: assertNull(modelBean0.getRootProperty());
      //  // Unstable assertion: assertNull(modelBean0.getSuccessProperty());
      //  // Unstable assertion: assertNull(modelBean0.getReadMethod());
      //  // Unstable assertion: assertNull(modelBean0.getIdProperty());
      //  // Unstable assertion: assertEquals("json", modelBean0.getWriter());
      //  // Unstable assertion: assertNull(modelBean0.getIdentifier());
      //  // Unstable assertion: assertNotNull(modelBean0);
      
      modelBean0.setExtend("G02z4]Nf6A#kC(");
      //  // Unstable assertion: assertNull(modelBean0.getDestroyMethod());
      //  // Unstable assertion: assertFalse(modelBean0.isClientIdPropertyAddToWriter());
      //  // Unstable assertion: assertNull(modelBean0.getTotalProperty());
      //  // Unstable assertion: assertNull(modelBean0.getName());
      //  // Unstable assertion: assertNull(modelBean0.getCreateMethod());
      //  // Unstable assertion: assertTrue(modelBean0.isAutodetectTypes());
      //  // Unstable assertion: assertNull(modelBean0.getUpdateMethod());
      //  // Unstable assertion: assertNull(modelBean0.getClientIdProperty());
      //  // Unstable assertion: assertEquals("json", modelBean0.getReader());
      //  // Unstable assertion: assertNull(modelBean0.getVersionProperty());
      //  // Unstable assertion: assertNull(modelBean0.getWriteAllFields());
      //  // Unstable assertion: assertNull(modelBean0.getMessageProperty());
      //  // Unstable assertion: assertFalse(modelBean0.isPaging());
      //  // Unstable assertion: assertFalse(modelBean0.isDisablePagingParameters());
      //  // Unstable assertion: assertNull(modelBean0.getRootProperty());
      //  // Unstable assertion: assertNull(modelBean0.getSuccessProperty());
      //  // Unstable assertion: assertNull(modelBean0.getReadMethod());
      //  // Unstable assertion: assertNull(modelBean0.getIdProperty());
      //  // Unstable assertion: assertEquals("json", modelBean0.getWriter());
      //  // Unstable assertion: assertNull(modelBean0.getIdentifier());
      
      OutputFormat outputFormat0 = OutputFormat.EXTJS5;
      outputConfig0.setOutputFormat(outputFormat0);
      //  // Unstable assertion: assertEquals(OutputFormat.EXTJS5, outputConfig0.getOutputFormat());
      //  // Unstable assertion: assertFalse(outputConfig0.isSurroundApiWithQuotes());
      //  // Unstable assertion: assertFalse(outputConfig0.isDebug());
      //  // Unstable assertion: assertFalse(outputConfig0.isUseSingleQuotes());
      //  // Unstable assertion: assertNull(outputConfig0.getLineEnding());
      //  // Unstable assertion: assertNull(outputConfig0.getIncludeValidation());
      
      modelBean0.setClientIdProperty("G02z4]Nf6A#kC(");
      //  // Unstable assertion: assertNull(modelBean0.getDestroyMethod());
      //  // Unstable assertion: assertFalse(modelBean0.isClientIdPropertyAddToWriter());
      //  // Unstable assertion: assertNull(modelBean0.getTotalProperty());
      //  // Unstable assertion: assertNull(modelBean0.getName());
      //  // Unstable assertion: assertNull(modelBean0.getCreateMethod());
      //  // Unstable assertion: assertTrue(modelBean0.isAutodetectTypes());
      //  // Unstable assertion: assertNull(modelBean0.getUpdateMethod());
      //  // Unstable assertion: assertEquals("json", modelBean0.getReader());
      //  // Unstable assertion: assertNull(modelBean0.getVersionProperty());
      //  // Unstable assertion: assertNull(modelBean0.getWriteAllFields());
      //  // Unstable assertion: assertNull(modelBean0.getMessageProperty());
      //  // Unstable assertion: assertFalse(modelBean0.isPaging());
      //  // Unstable assertion: assertFalse(modelBean0.isDisablePagingParameters());
      //  // Unstable assertion: assertNull(modelBean0.getRootProperty());
      //  // Unstable assertion: assertNull(modelBean0.getSuccessProperty());
      //  // Unstable assertion: assertNull(modelBean0.getReadMethod());
      //  // Unstable assertion: assertNull(modelBean0.getIdProperty());
      //  // Unstable assertion: assertEquals("G02z4]Nf6A#kC(", modelBean0.getClientIdProperty());
      //  // Unstable assertion: assertEquals("json", modelBean0.getWriter());
      //  // Unstable assertion: assertNull(modelBean0.getIdentifier());
      
      String string0 = ModelGenerator.generateJavascript(modelBean0, outputConfig0);
      //  // Unstable assertion: assertEquals(OutputFormat.EXTJS5, outputConfig0.getOutputFormat());
      //  // Unstable assertion: assertFalse(outputConfig0.isSurroundApiWithQuotes());
      //  // Unstable assertion: assertFalse(outputConfig0.isDebug());
      //  // Unstable assertion: assertFalse(outputConfig0.isUseSingleQuotes());
      //  // Unstable assertion: assertNull(outputConfig0.getLineEnding());
      //  // Unstable assertion: assertNull(outputConfig0.getIncludeValidation());
      //  // Unstable assertion: assertNull(modelBean0.getDestroyMethod());
      //  // Unstable assertion: assertFalse(modelBean0.isClientIdPropertyAddToWriter());
      //  // Unstable assertion: assertNull(modelBean0.getTotalProperty());
      //  // Unstable assertion: assertNull(modelBean0.getName());
      //  // Unstable assertion: assertNull(modelBean0.getCreateMethod());
      //  // Unstable assertion: assertTrue(modelBean0.isAutodetectTypes());
      //  // Unstable assertion: assertNull(modelBean0.getUpdateMethod());
      //  // Unstable assertion: assertEquals("json", modelBean0.getReader());
      //  // Unstable assertion: assertNull(modelBean0.getVersionProperty());
      //  // Unstable assertion: assertNull(modelBean0.getWriteAllFields());
      //  // Unstable assertion: assertNull(modelBean0.getMessageProperty());
      //  // Unstable assertion: assertFalse(modelBean0.isPaging());
      //  // Unstable assertion: assertFalse(modelBean0.isDisablePagingParameters());
      //  // Unstable assertion: assertNull(modelBean0.getRootProperty());
      //  // Unstable assertion: assertNull(modelBean0.getSuccessProperty());
      //  // Unstable assertion: assertNull(modelBean0.getReadMethod());
      //  // Unstable assertion: assertNull(modelBean0.getIdProperty());
      //  // Unstable assertion: assertEquals("G02z4]Nf6A#kC(", modelBean0.getClientIdProperty());
      //  // Unstable assertion: assertEquals("json", modelBean0.getWriter());
      //  // Unstable assertion: assertNull(modelBean0.getIdentifier());
      //  // Unstable assertion: assertNotNull(string0);
      //  // Unstable assertion: assertEquals("Ext.define(\"null\",{extend:\"Ext.data.Model\",clientIdProperty:\"j*Gr'Wuh-Amvu>Jlhx3\",fields:[]});", string0);
      
      String string1 = ModelGenerator.trimToNull("Ext.define(\"null\",{extend:\"Ext.data.Model\",clientIdProperty:\"j*Gr'Wuh-Amvu>Jlhx3\",fields:[]});");
      //  // Unstable assertion: assertTrue(string1.equals((Object)string0));
      //  // Unstable assertion: assertNotNull(string1);
      //  // Unstable assertion: assertEquals("Ext.define(\"null\",{extend:\"Ext.data.Model\",clientIdProperty:\"j*Gr'Wuh-Amvu>Jlhx3\",fields:[]});", string1);
      
      ModelBean modelBean1 = new ModelBean();
      //  // Unstable assertion: assertNull(modelBean1.getReadMethod());
      //  // Unstable assertion: assertNull(modelBean1.getWriteAllFields());
      //  // Unstable assertion: assertNull(modelBean1.getIdProperty());
      //  // Unstable assertion: assertNull(modelBean1.getClientIdProperty());
      //  // Unstable assertion: assertEquals("json", modelBean1.getReader());
      //  // Unstable assertion: assertNull(modelBean1.getUpdateMethod());
      //  // Unstable assertion: assertFalse(modelBean1.isDisablePagingParameters());
      //  // Unstable assertion: assertFalse(modelBean1.isClientIdPropertyAddToWriter());
      //  // Unstable assertion: assertEquals("Ext.data.Model", modelBean1.getExtend());
      //  // Unstable assertion: assertFalse(modelBean1.isPaging());
      //  // Unstable assertion: assertTrue(modelBean1.isAutodetectTypes());
      //  // Unstable assertion: assertNull(modelBean1.getSuccessProperty());
      //  // Unstable assertion: assertEquals("json", modelBean1.getWriter());
      //  // Unstable assertion: assertNull(modelBean1.getIdentifier());
      //  // Unstable assertion: assertNull(modelBean1.getVersionProperty());
      //  // Unstable assertion: assertNull(modelBean1.getDestroyMethod());
      //  // Unstable assertion: assertNull(modelBean1.getTotalProperty());
      //  // Unstable assertion: assertNull(modelBean1.getRootProperty());
      //  // Unstable assertion: assertNull(modelBean1.getMessageProperty());
      //  // Unstable assertion: assertNull(modelBean1.getCreateMethod());
      //  // Unstable assertion: assertNull(modelBean1.getName());
      //  // Unstable assertion: assertFalse(modelBean1.equals((Object)modelBean0));
      //  // Unstable assertion: assertNotNull(modelBean1);
      
      ModelBean modelBean2 = null;
      // Undeclared exception!
      try { 
        ModelGenerator.generateJavascript((ModelBean) null, outputConfig0);
       //  fail("Expecting exception: NullPointerException");
       // Unstable assertion
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("ch.rasc.extclassgenerator.JsCacheKey", e);
      }
  }

  @Test(timeout = 4000000)
  public void test127()  throws Throwable  {
      Class<ModelFieldBean> class0 = ModelFieldBean.class;
      ModelBean modelBean0 = ModelGenerator.createModel(class0);
      assertNull(modelBean0.getTotalProperty());
      assertNull(modelBean0.getDestroyMethod());
      assertFalse(modelBean0.isClientIdPropertyAddToWriter());
      assertEquals("ch.rasc.extclassgenerator.ModelFieldBean", modelBean0.getName());
      assertEquals("json", modelBean0.getReader());
      assertNull(modelBean0.getWriteAllFields());
      assertTrue(modelBean0.isAutodetectTypes());
      assertNull(modelBean0.getReadMethod());
      assertNull(modelBean0.getClientIdProperty());
      assertNull(modelBean0.getSuccessProperty());
      assertEquals("Ext.data.Model", modelBean0.getExtend());
      assertFalse(modelBean0.isPaging());
      assertNull(modelBean0.getMessageProperty());
      assertFalse(modelBean0.isDisablePagingParameters());
      assertNull(modelBean0.getRootProperty());
      assertNull(modelBean0.getIdentifier());
      assertNull(modelBean0.getVersionProperty());
      assertEquals("json", modelBean0.getWriter());
      assertNull(modelBean0.getUpdateMethod());
      assertNull(modelBean0.getCreateMethod());
      assertNotNull(modelBean0);
      
      OutputFormat outputFormat0 = OutputFormat.EXTJS5;
      String string0 = ModelGenerator.generateJavascript(modelBean0, outputFormat0, true);
      assertNull(modelBean0.getTotalProperty());
      assertNull(modelBean0.getDestroyMethod());
      assertFalse(modelBean0.isClientIdPropertyAddToWriter());
      assertEquals("ch.rasc.extclassgenerator.ModelFieldBean", modelBean0.getName());
      assertEquals("json", modelBean0.getReader());
      assertNull(modelBean0.getWriteAllFields());
      assertTrue(modelBean0.isAutodetectTypes());
      assertNull(modelBean0.getReadMethod());
      assertNull(modelBean0.getClientIdProperty());
      assertNull(modelBean0.getSuccessProperty());
      assertEquals("Ext.data.Model", modelBean0.getExtend());
      assertFalse(modelBean0.isPaging());
      assertNull(modelBean0.getMessageProperty());
      assertFalse(modelBean0.isDisablePagingParameters());
      assertNull(modelBean0.getRootProperty());
      assertNull(modelBean0.getIdentifier());
      assertNull(modelBean0.getVersionProperty());
      assertEquals("json", modelBean0.getWriter());
      assertNull(modelBean0.getUpdateMethod());
      assertNull(modelBean0.getCreateMethod());
      assertNotNull(string0);
  }

  @Test(timeout = 4000000)
  public void test128()  throws Throwable  {
      Class<Object> class0 = Object.class;
      IncludeValidation includeValidation0 = IncludeValidation.BUILTIN;
      ModelBean modelBean0 = ModelGenerator.createModel(class0, includeValidation0);
      assertFalse(modelBean0.isClientIdPropertyAddToWriter());
      assertFalse(modelBean0.isDisablePagingParameters());
      assertNull(modelBean0.getRootProperty());
      assertNull(modelBean0.getTotalProperty());
      assertNull(modelBean0.getIdProperty());
      assertNull(modelBean0.getDestroyMethod());
      assertEquals("json", modelBean0.getWriter());
      assertNull(modelBean0.getIdentifier());
      assertNull(modelBean0.getClientIdProperty());
      assertNull(modelBean0.getMessageProperty());
      assertTrue(modelBean0.isAutodetectTypes());
      assertNull(modelBean0.getReadMethod());
      assertNull(modelBean0.getCreateMethod());
      assertFalse(modelBean0.isPaging());
      assertNull(modelBean0.getVersionProperty());
      assertNull(modelBean0.getSuccessProperty());
      assertEquals("json", modelBean0.getReader());
      assertNull(modelBean0.getUpdateMethod());
      assertEquals("java.lang.Object", modelBean0.getName());
      assertNull(modelBean0.getWriteAllFields());
      assertNotNull(modelBean0);
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = "E6{'@";
      modelBean0.setHasMany(stringArray0);
      assertFalse(modelBean0.isClientIdPropertyAddToWriter());
      assertFalse(modelBean0.isDisablePagingParameters());
      assertNull(modelBean0.getRootProperty());
      assertNull(modelBean0.getTotalProperty());
      assertNull(modelBean0.getIdProperty());
      assertNull(modelBean0.getDestroyMethod());
      assertEquals("json", modelBean0.getWriter());
      assertNull(modelBean0.getIdentifier());
      assertNull(modelBean0.getClientIdProperty());
      assertNull(modelBean0.getMessageProperty());
      assertTrue(modelBean0.isAutodetectTypes());
      assertNull(modelBean0.getReadMethod());
      assertNull(modelBean0.getCreateMethod());
      assertFalse(modelBean0.isPaging());
      assertNull(modelBean0.getVersionProperty());
      assertNull(modelBean0.getSuccessProperty());
      assertEquals("json", modelBean0.getReader());
      assertNull(modelBean0.getUpdateMethod());
      assertEquals("java.lang.Object", modelBean0.getName());
      assertNull(modelBean0.getWriteAllFields());
      assertEquals(1, stringArray0.length);
      
      modelBean0.setExtend("Unable to parse port");
      assertFalse(modelBean0.isClientIdPropertyAddToWriter());
      assertFalse(modelBean0.isDisablePagingParameters());
      assertNull(modelBean0.getRootProperty());
      assertNull(modelBean0.getTotalProperty());
      assertNull(modelBean0.getIdProperty());
      assertNull(modelBean0.getDestroyMethod());
      assertEquals("json", modelBean0.getWriter());
      assertNull(modelBean0.getIdentifier());
      assertNull(modelBean0.getClientIdProperty());
      assertNull(modelBean0.getMessageProperty());
      assertTrue(modelBean0.isAutodetectTypes());
      assertNull(modelBean0.getReadMethod());
      assertNull(modelBean0.getCreateMethod());
      assertFalse(modelBean0.isPaging());
      assertNull(modelBean0.getVersionProperty());
      assertNull(modelBean0.getSuccessProperty());
      assertEquals("json", modelBean0.getReader());
      assertNull(modelBean0.getUpdateMethod());
      assertEquals("java.lang.Object", modelBean0.getName());
      assertNull(modelBean0.getWriteAllFields());
      
      modelBean0.setClientIdPropertyAddToWriter(false);
      assertFalse(modelBean0.isClientIdPropertyAddToWriter());
      assertFalse(modelBean0.isDisablePagingParameters());
      assertNull(modelBean0.getRootProperty());
      assertNull(modelBean0.getTotalProperty());
      assertNull(modelBean0.getIdProperty());
      assertNull(modelBean0.getDestroyMethod());
      assertEquals("json", modelBean0.getWriter());
      assertNull(modelBean0.getIdentifier());
      assertNull(modelBean0.getClientIdProperty());
      assertNull(modelBean0.getMessageProperty());
      assertTrue(modelBean0.isAutodetectTypes());
      assertNull(modelBean0.getReadMethod());
      assertNull(modelBean0.getCreateMethod());
      assertFalse(modelBean0.isPaging());
      assertNull(modelBean0.getVersionProperty());
      assertNull(modelBean0.getSuccessProperty());
      assertEquals("json", modelBean0.getReader());
      assertNull(modelBean0.getUpdateMethod());
      assertEquals("java.lang.Object", modelBean0.getName());
      assertNull(modelBean0.getWriteAllFields());
      
      OutputConfig outputConfig0 = new OutputConfig();
      assertFalse(outputConfig0.isUseSingleQuotes());
      assertNull(outputConfig0.getLineEnding());
      assertNull(outputConfig0.getOutputFormat());
      assertFalse(outputConfig0.isDebug());
      assertFalse(outputConfig0.isSurroundApiWithQuotes());
      assertNull(outputConfig0.getIncludeValidation());
      assertNotNull(outputConfig0);
      
      String string0 = ModelGenerator.generateJavascript(modelBean0, outputConfig0);
      assertFalse(modelBean0.isClientIdPropertyAddToWriter());
      assertFalse(modelBean0.isDisablePagingParameters());
      assertNull(modelBean0.getRootProperty());
      assertNull(modelBean0.getTotalProperty());
      assertNull(modelBean0.getIdProperty());
      assertNull(modelBean0.getDestroyMethod());
      assertEquals("json", modelBean0.getWriter());
      assertNull(modelBean0.getIdentifier());
      assertNull(modelBean0.getClientIdProperty());
      assertNull(modelBean0.getMessageProperty());
      assertTrue(modelBean0.isAutodetectTypes());
      assertNull(modelBean0.getReadMethod());
      assertNull(modelBean0.getCreateMethod());
      assertFalse(modelBean0.isPaging());
      assertNull(modelBean0.getVersionProperty());
      assertNull(modelBean0.getSuccessProperty());
      assertEquals("json", modelBean0.getReader());
      assertNull(modelBean0.getUpdateMethod());
      assertEquals("java.lang.Object", modelBean0.getName());
      assertNull(modelBean0.getWriteAllFields());
      assertFalse(outputConfig0.isUseSingleQuotes());
      assertNull(outputConfig0.getLineEnding());
      assertNull(outputConfig0.getOutputFormat());
      assertFalse(outputConfig0.isDebug());
      assertFalse(outputConfig0.isSurroundApiWithQuotes());
      assertNull(outputConfig0.getIncludeValidation());
      assertNotNull(string0);
      assertEquals("Ext.define(\"java.lang.Object\",{extend:\"Unable to parse port\",config:{fields:[],hasMany:[\"E6{'@\"]}});", string0);
      
      String string1 = ModelGenerator.generateJavascript(modelBean0, outputConfig0);
      assertFalse(modelBean0.isClientIdPropertyAddToWriter());
      assertFalse(modelBean0.isDisablePagingParameters());
      assertNull(modelBean0.getRootProperty());
      assertNull(modelBean0.getTotalProperty());
      assertNull(modelBean0.getIdProperty());
      assertNull(modelBean0.getDestroyMethod());
      assertEquals("json", modelBean0.getWriter());
      assertNull(modelBean0.getIdentifier());
      assertNull(modelBean0.getClientIdProperty());
      assertNull(modelBean0.getMessageProperty());
      assertTrue(modelBean0.isAutodetectTypes());
      assertNull(modelBean0.getReadMethod());
      assertNull(modelBean0.getCreateMethod());
      assertFalse(modelBean0.isPaging());
      assertNull(modelBean0.getVersionProperty());
      assertNull(modelBean0.getSuccessProperty());
      assertEquals("json", modelBean0.getReader());
      assertNull(modelBean0.getUpdateMethod());
      assertEquals("java.lang.Object", modelBean0.getName());
      assertNull(modelBean0.getWriteAllFields());
      assertFalse(outputConfig0.isUseSingleQuotes());
      assertNull(outputConfig0.getLineEnding());
      assertNull(outputConfig0.getOutputFormat());
      assertFalse(outputConfig0.isDebug());
      assertFalse(outputConfig0.isSurroundApiWithQuotes());
      assertNull(outputConfig0.getIncludeValidation());
      assertNotNull(string1);
      assertEquals("Ext.define(\"java.lang.Object\",{extend:\"Unable to parse port\",config:{fields:[],hasMany:[\"E6{'@\"]}});", string1);
      
      HttpServletRequest httpServletRequest0 = mock(HttpServletRequest.class, new ViolatedAssumptionAnswer());
      HttpServletRequestWrapper httpServletRequestWrapper0 = new HttpServletRequestWrapper(httpServletRequest0);
      assertNotNull(httpServletRequestWrapper0);
      
      String string2 = ModelGenerator.generateJavascript(modelBean0, outputConfig0);
      assertFalse(modelBean0.isClientIdPropertyAddToWriter());
      assertFalse(modelBean0.isDisablePagingParameters());
      assertNull(modelBean0.getRootProperty());
      assertNull(modelBean0.getTotalProperty());
      assertNull(modelBean0.getIdProperty());
      assertNull(modelBean0.getDestroyMethod());
      assertEquals("json", modelBean0.getWriter());
      assertNull(modelBean0.getIdentifier());
      assertNull(modelBean0.getClientIdProperty());
      assertNull(modelBean0.getMessageProperty());
      assertTrue(modelBean0.isAutodetectTypes());
      assertNull(modelBean0.getReadMethod());
      assertNull(modelBean0.getCreateMethod());
      assertFalse(modelBean0.isPaging());
      assertNull(modelBean0.getVersionProperty());
      assertNull(modelBean0.getSuccessProperty());
      assertEquals("json", modelBean0.getReader());
      assertNull(modelBean0.getUpdateMethod());
      assertEquals("java.lang.Object", modelBean0.getName());
      assertNull(modelBean0.getWriteAllFields());
      assertFalse(outputConfig0.isUseSingleQuotes());
      assertNull(outputConfig0.getLineEnding());
      assertNull(outputConfig0.getOutputFormat());
      assertFalse(outputConfig0.isDebug());
      assertFalse(outputConfig0.isSurroundApiWithQuotes());
      assertNull(outputConfig0.getIncludeValidation());
      assertNotNull(string2);
      assertEquals("Ext.define(\"java.lang.Object\",{extend:\"Unable to parse port\",config:{fields:[],hasMany:[\"E6{'@\"]}});", string2);
  }
}
