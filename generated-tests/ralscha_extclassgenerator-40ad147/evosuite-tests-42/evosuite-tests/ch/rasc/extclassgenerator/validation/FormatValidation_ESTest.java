/*
 * This file was automatically generated by EvoSuite
 * Fri Jan 26 00:23:46 GMT 2024
 */

package ch.rasc.extclassgenerator.validation;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import ch.rasc.extclassgenerator.ModelBean;
import ch.rasc.extclassgenerator.ModelFieldBean;
import ch.rasc.extclassgenerator.OutputConfig;
import ch.rasc.extclassgenerator.association.HasOneAssociation;
import ch.rasc.extclassgenerator.validation.AbstractValidation;
import ch.rasc.extclassgenerator.validation.FormatValidation;
import com.github.javaparser.ast.body.MethodDeclaration;
import java.lang.annotation.Annotation;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, resetStaticState = true) 
public class FormatValidation_ESTest extends FormatValidation_ESTest_scaffolding {

  @Test(timeout = 4000000)
  public void test0()  throws Throwable  {
      FormatValidation formatValidation0 = new FormatValidation((String) null, "Z +UnR`_}JPej");
      assertNotNull(formatValidation0);
      assertNull(formatValidation0.getField());
      assertEquals("format", formatValidation0.getType());
      assertEquals("/Z +UnR`_}JPej/", formatValidation0.getMatcher());
      
      ModelBean modelBean0 = new ModelBean();
      assertNotNull(modelBean0);
      assertNull(modelBean0.getTotalProperty());
      assertFalse(modelBean0.isClientIdPropertyAddToWriter());
      assertNull(modelBean0.getCreateMethod());
      assertNull(modelBean0.getName());
      assertNull(modelBean0.getUpdateMethod());
      assertEquals("json", modelBean0.getReader());
      assertNull(modelBean0.getWriteAllFields());
      assertNull(modelBean0.getVersionProperty());
      assertNull(modelBean0.getMessageProperty());
      assertNull(modelBean0.getClientIdProperty());
      assertFalse(modelBean0.isPaging());
      assertNull(modelBean0.getReadMethod());
      assertEquals("Ext.data.Model", modelBean0.getExtend());
      assertNull(modelBean0.getSuccessProperty());
      assertTrue(modelBean0.isAutodetectTypes());
      assertNull(modelBean0.getIdProperty());
      assertNull(modelBean0.getRootProperty());
      assertFalse(modelBean0.isDisablePagingParameters());
      assertNull(modelBean0.getDestroyMethod());
      assertEquals("json", modelBean0.getWriter());
      assertNull(modelBean0.getIdentifier());
      
      Class<MethodDeclaration> class0 = MethodDeclaration.class;
      HasOneAssociation hasOneAssociation0 = new HasOneAssociation(class0);
      assertNotNull(hasOneAssociation0);
      assertNull(hasOneAssociation0.getName());
      assertNull(hasOneAssociation0.getGetterName());
      assertNull(hasOneAssociation0.getAssociationKey());
      assertNull(hasOneAssociation0.getForeignKey());
      assertNull(hasOneAssociation0.getSetterName());
      assertEquals("hasOne", hasOneAssociation0.getType());
      assertEquals("com.github.javaparser.ast.body.MethodDeclaration", hasOneAssociation0.getModel());
      assertNull(hasOneAssociation0.getInstanceName());
      assertNull(hasOneAssociation0.getPrimaryKey());
      
      modelBean0.addAssociation(hasOneAssociation0);
      assertNull(modelBean0.getTotalProperty());
      assertFalse(modelBean0.isClientIdPropertyAddToWriter());
      assertNull(modelBean0.getCreateMethod());
      assertNull(modelBean0.getName());
      assertNull(modelBean0.getUpdateMethod());
      assertEquals("json", modelBean0.getReader());
      assertNull(modelBean0.getWriteAllFields());
      assertNull(modelBean0.getVersionProperty());
      assertNull(modelBean0.getMessageProperty());
      assertNull(modelBean0.getClientIdProperty());
      assertFalse(modelBean0.isPaging());
      assertNull(modelBean0.getReadMethod());
      assertEquals("Ext.data.Model", modelBean0.getExtend());
      assertNull(modelBean0.getSuccessProperty());
      assertTrue(modelBean0.isAutodetectTypes());
      assertNull(modelBean0.getIdProperty());
      assertNull(modelBean0.getRootProperty());
      assertFalse(modelBean0.isDisablePagingParameters());
      assertNull(modelBean0.getDestroyMethod());
      assertEquals("json", modelBean0.getWriter());
      assertNull(modelBean0.getIdentifier());
      assertNull(hasOneAssociation0.getName());
      assertNull(hasOneAssociation0.getGetterName());
      assertNull(hasOneAssociation0.getAssociationKey());
      assertNull(hasOneAssociation0.getForeignKey());
      assertNull(hasOneAssociation0.getSetterName());
      assertEquals("hasOne", hasOneAssociation0.getType());
      assertEquals("com.github.javaparser.ast.body.MethodDeclaration", hasOneAssociation0.getModel());
      assertNull(hasOneAssociation0.getInstanceName());
      assertNull(hasOneAssociation0.getPrimaryKey());
      
      ModelFieldBean modelFieldBean0 = modelBean0.getField("");
      assertNull(modelFieldBean0);
      assertNull(modelBean0.getTotalProperty());
      assertFalse(modelBean0.isClientIdPropertyAddToWriter());
      assertNull(modelBean0.getCreateMethod());
      assertNull(modelBean0.getName());
      assertNull(modelBean0.getUpdateMethod());
      assertEquals("json", modelBean0.getReader());
      assertNull(modelBean0.getWriteAllFields());
      assertNull(modelBean0.getVersionProperty());
      assertNull(modelBean0.getMessageProperty());
      assertNull(modelBean0.getClientIdProperty());
      assertFalse(modelBean0.isPaging());
      assertNull(modelBean0.getReadMethod());
      assertEquals("Ext.data.Model", modelBean0.getExtend());
      assertNull(modelBean0.getSuccessProperty());
      assertTrue(modelBean0.isAutodetectTypes());
      assertNull(modelBean0.getIdProperty());
      assertNull(modelBean0.getRootProperty());
      assertFalse(modelBean0.isDisablePagingParameters());
      assertNull(modelBean0.getDestroyMethod());
      assertEquals("json", modelBean0.getWriter());
      assertNull(modelBean0.getIdentifier());
      
      Annotation annotation0 = mock(Annotation.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(annotation0).annotationType();
      OutputConfig outputConfig0 = new OutputConfig();
      assertNotNull(outputConfig0);
      assertFalse(outputConfig0.isSurroundApiWithQuotes());
      assertFalse(outputConfig0.isDebug());
      assertNull(outputConfig0.getIncludeValidation());
      assertFalse(outputConfig0.isUseSingleQuotes());
      assertNull(outputConfig0.getLineEnding());
      assertNull(outputConfig0.getOutputFormat());
      
      // Undeclared exception!
      try { 
        AbstractValidation.addValidationToModel(modelBean0, (ModelFieldBean) null, annotation0, outputConfig0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("ch.rasc.extclassgenerator.validation.AbstractValidation", e);
      }
  }

  @Test(timeout = 4000000)
  public void test1()  throws Throwable  {
      FormatValidation formatValidation0 = new FormatValidation("+V57]6h<rQYG_,;rM$S", "+V57]6h<rQYG_,;rM$S");
      assertNotNull(formatValidation0);
      assertEquals("/+V57]6h<rQYG_,;rM$S/", formatValidation0.getMatcher());
      assertEquals("format", formatValidation0.getType());
      assertEquals("+V57]6h<rQYG_,;rM$S", formatValidation0.getField());
      
      String string0 = formatValidation0.getMatcher();
      assertNotNull(string0);
      assertEquals("/+V57]6h<rQYG_,;rM$S/", string0);
      assertEquals("/+V57]6h<rQYG_,;rM$S/", formatValidation0.getMatcher());
      assertEquals("format", formatValidation0.getType());
      assertEquals("+V57]6h<rQYG_,;rM$S", formatValidation0.getField());
      
      String string1 = formatValidation0.getMatcher();
      assertNotNull(string1);
      assertEquals("/+V57]6h<rQYG_,;rM$S/", string1);
      assertEquals("/+V57]6h<rQYG_,;rM$S/", formatValidation0.getMatcher());
      assertEquals("format", formatValidation0.getType());
      assertEquals("+V57]6h<rQYG_,;rM$S", formatValidation0.getField());
      
      String string2 = formatValidation0.getMatcher();
      assertNotNull(string2);
      assertEquals("/+V57]6h<rQYG_,;rM$S/", string2);
      assertEquals("/+V57]6h<rQYG_,;rM$S/", formatValidation0.getMatcher());
      assertEquals("format", formatValidation0.getType());
      assertEquals("+V57]6h<rQYG_,;rM$S", formatValidation0.getField());
  }

  @Test(timeout = 4000000)
  public void test2()  throws Throwable  {
      FormatValidation formatValidation0 = null;
      try {
        formatValidation0 = new FormatValidation((String) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("ch.rasc.extclassgenerator.validation.FormatValidation", e);
      }
  }

  @Test(timeout = 4000000)
  public void test3()  throws Throwable  {
      FormatValidation formatValidation0 = new FormatValidation("R", "R");
      assertNotNull(formatValidation0);
      assertEquals("format", formatValidation0.getType());
      assertEquals("/R/", formatValidation0.getMatcher());
      assertEquals("R", formatValidation0.getField());
      
      String string0 = formatValidation0.getMatcher();
      assertNotNull(string0);
      assertEquals("/R/", string0);
      assertEquals("format", formatValidation0.getType());
      assertEquals("/R/", formatValidation0.getMatcher());
      assertEquals("R", formatValidation0.getField());
  }
}
