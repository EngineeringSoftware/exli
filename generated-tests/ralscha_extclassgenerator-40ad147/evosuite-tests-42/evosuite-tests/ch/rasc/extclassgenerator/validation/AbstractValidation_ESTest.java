/*
 * This file was automatically generated by EvoSuite
 * Fri Jan 26 00:28:36 GMT 2024
 */

package ch.rasc.extclassgenerator.validation;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import ch.rasc.extclassgenerator.IncludeValidation;
import ch.rasc.extclassgenerator.ModelBean;
import ch.rasc.extclassgenerator.ModelFieldBean;
import ch.rasc.extclassgenerator.ModelType;
import ch.rasc.extclassgenerator.ModelValidation;
import ch.rasc.extclassgenerator.ModelValidationParameter;
import ch.rasc.extclassgenerator.ModelValidationType;
import ch.rasc.extclassgenerator.OutputConfig;
import ch.rasc.extclassgenerator.OutputFormat;
import ch.rasc.extclassgenerator.validation.AbstractValidation;
import ch.rasc.extclassgenerator.validation.CreditCardNumberValidation;
import ch.rasc.extclassgenerator.validation.DigitsValidation;
import ch.rasc.extclassgenerator.validation.ExclusionValidation;
import ch.rasc.extclassgenerator.validation.FormatValidation;
import ch.rasc.extclassgenerator.validation.FutureValidation;
import ch.rasc.extclassgenerator.validation.GenericValidation;
import ch.rasc.extclassgenerator.validation.InclusionValidation;
import ch.rasc.extclassgenerator.validation.InclusionValidationArray;
import ch.rasc.extclassgenerator.validation.LengthValidation;
import ch.rasc.extclassgenerator.validation.PresenceValidation;
import com.github.javaparser.ast.Node;
import com.github.javaparser.ast.stmt.ExpressionStmt;
import com.github.javaparser.ast.stmt.LocalClassDeclarationStmt;
import com.github.javaparser.ast.visitor.ObjectIdentityEqualsVisitor;
import com.github.javaparser.ast.visitor.Visitable;
import java.lang.annotation.Annotation;
import java.math.BigDecimal;
import java.util.Collection;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.Optional;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, resetStaticState = true) 
public class AbstractValidation_ESTest extends AbstractValidation_ESTest_scaffolding {

  @Test(timeout = 4000000)
  public void test00()  throws Throwable  {
      IncludeValidation includeValidation0 = IncludeValidation.ALL;
      ModelValidationType modelValidationType0 = ModelValidationType.NOTBLANK;
      ModelValidation modelValidation0 = mock(ModelValidation.class, new ViolatedAssumptionAnswer());
      doReturn(modelValidationType0).when(modelValidation0).value();
      AbstractValidation abstractValidation0 = AbstractValidation.createValidation("org.hibernate.validator.constraints.NotEmpty", modelValidation0, includeValidation0);
      assertNotNull(abstractValidation0);
      assertEquals("org.hibernate.validator.constraints.NotEmpty", abstractValidation0.getField());
      assertEquals("notBlank", abstractValidation0.getType());
  }

  @Test(timeout = 4000000)
  public void test01()  throws Throwable  {
      PresenceValidation presenceValidation0 = new PresenceValidation("s%:%Vwg4),Y");
      assertNotNull(presenceValidation0);
      assertEquals("presence", presenceValidation0.getType());
      assertEquals("s%:%Vwg4),Y", presenceValidation0.getField());
      
      String string0 = presenceValidation0.getField();
      assertNotNull(string0);
      assertEquals("s%:%Vwg4),Y", string0);
      assertEquals("presence", presenceValidation0.getType());
      assertEquals("s%:%Vwg4),Y", presenceValidation0.getField());
  }

  @Test(timeout = 4000000)
  public void test02()  throws Throwable  {
      String string0 = ">ooh=+9+(8:&8G'bMG";
      PresenceValidation presenceValidation0 = new PresenceValidation(">ooh=+9+(8:&8G'bMG");
      assertNotNull(presenceValidation0);
      assertEquals("presence", presenceValidation0.getType());
      assertEquals(">ooh=+9+(8:&8G'bMG", presenceValidation0.getField());
      
      String string1 = "o";
      ModelValidation modelValidation0 = mock(ModelValidation.class, new ViolatedAssumptionAnswer());
      ModelBean modelBean0 = new ModelBean();
      assertNotNull(modelBean0);
      assertNull(modelBean0.getSuccessProperty());
      assertFalse(modelBean0.isPaging());
      assertFalse(modelBean0.isDisablePagingParameters());
      assertNull(modelBean0.getMessageProperty());
      assertEquals("Ext.data.Model", modelBean0.getExtend());
      assertNull(modelBean0.getVersionProperty());
      assertNull(modelBean0.getClientIdProperty());
      assertNull(modelBean0.getWriteAllFields());
      assertNull(modelBean0.getUpdateMethod());
      assertNull(modelBean0.getIdProperty());
      assertTrue(modelBean0.isAutodetectTypes());
      assertEquals("json", modelBean0.getReader());
      assertNull(modelBean0.getCreateMethod());
      assertNull(modelBean0.getReadMethod());
      assertNull(modelBean0.getName());
      assertFalse(modelBean0.isClientIdPropertyAddToWriter());
      assertNull(modelBean0.getTotalProperty());
      assertNull(modelBean0.getRootProperty());
      assertNull(modelBean0.getIdentifier());
      assertEquals("json", modelBean0.getWriter());
      assertNull(modelBean0.getDestroyMethod());
      
      ModelValidationType modelValidationType0 = ModelValidationType.DIGITS;
      ModelValidation modelValidation1 = mock(ModelValidation.class, new ViolatedAssumptionAnswer());
      doReturn(modelValidationType0).when(modelValidation1).value();
      IncludeValidation includeValidation0 = IncludeValidation.NONE;
      AbstractValidation abstractValidation0 = AbstractValidation.createValidation("ch.rasc.extclassgenerator.validation.RangeValidation", modelValidation1, includeValidation0);
      assertNull(abstractValidation0);
      
      ModelValidationType modelValidationType1 = ModelValidationType.FUTURE;
      ModelValidation modelValidation2 = mock(ModelValidation.class, new ViolatedAssumptionAnswer());
      doReturn(modelValidationType1).when(modelValidation2).value();
      IncludeValidation includeValidation1 = IncludeValidation.ALL;
      AbstractValidation abstractValidation1 = AbstractValidation.createValidation(">ooh=+9+(8:&8G'bMG", modelValidation2, includeValidation1);
      assertNotNull(abstractValidation1);
      assertNotSame(includeValidation1, includeValidation0);
      assertFalse(modelValidationType1.equals((Object)modelValidationType0));
      assertFalse(includeValidation1.equals((Object)includeValidation0));
      assertEquals("future", abstractValidation1.getType());
      assertEquals(">ooh=+9+(8:&8G'bMG", abstractValidation1.getField());
      
      ModelFieldBean modelFieldBean0 = null;
      Annotation annotation0 = mock(Annotation.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(annotation0).annotationType();
      OutputConfig outputConfig0 = new OutputConfig();
      assertNotNull(outputConfig0);
      assertNull(outputConfig0.getIncludeValidation());
      assertNull(outputConfig0.getOutputFormat());
      assertFalse(outputConfig0.isDebug());
      assertFalse(outputConfig0.isSurroundApiWithQuotes());
      assertFalse(outputConfig0.isUseSingleQuotes());
      assertNull(outputConfig0.getLineEnding());
      
      outputConfig0.setSurroundApiWithQuotes(false);
      assertNull(outputConfig0.getIncludeValidation());
      assertNull(outputConfig0.getOutputFormat());
      assertFalse(outputConfig0.isDebug());
      assertFalse(outputConfig0.isSurroundApiWithQuotes());
      assertFalse(outputConfig0.isUseSingleQuotes());
      assertNull(outputConfig0.getLineEnding());
      
      // Undeclared exception!
      try { 
        AbstractValidation.addValidationToModel(modelBean0, (ModelFieldBean) null, annotation0, outputConfig0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("ch.rasc.extclassgenerator.validation.AbstractValidation", e);
      }
  }

  @Test(timeout = 4000000)
  public void test03()  throws Throwable  {
      ModelValidationType modelValidationType0 = ModelValidationType.EXCLUSION;
      String[] stringArray0 = new String[6];
      stringArray0[0] = "f*iZi|";
      stringArray0[2] = "f*iZi|";
      String[] stringArray1 = new String[5];
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      stringArray1[3] = "f*iZi|";
      ModelValidation modelValidation0 = mock(ModelValidation.class, new ViolatedAssumptionAnswer());
      doReturn((Object) stringArray0, (Object) stringArray1, (Object) stringArray1).when(modelValidation0).exclusionOrInclusionList();
      doReturn(modelValidationType0).when(modelValidation0).value();
      IncludeValidation includeValidation0 = IncludeValidation.ALL;
      AbstractValidation abstractValidation0 = AbstractValidation.createValidation("f*iZi|", modelValidation0, includeValidation0);
      assertNotNull(abstractValidation0);
      assertEquals(6, stringArray0.length);
      assertEquals(5, stringArray1.length);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals("f*iZi|", abstractValidation0.getField());
      assertEquals("exclusion", abstractValidation0.getType());
  }

  @Test(timeout = 4000000)
  public void test04()  throws Throwable  {
      ModelFieldBean modelFieldBean0 = new ModelFieldBean((String) null, (String) null);
      assertNotNull(modelFieldBean0);
      assertNull(modelFieldBean0.getAllowNull());
      assertNull(modelFieldBean0.getCalculate());
      assertNull(modelFieldBean0.getUnique());
      assertNull(modelFieldBean0.getType());
      assertNull(modelFieldBean0.getPersist());
      assertNull(modelFieldBean0.getAllowBlank());
      assertNull(modelFieldBean0.getUseNull());
      assertNull(modelFieldBean0.getMapping());
      assertNull(modelFieldBean0.getConvert());
      assertNull(modelFieldBean0.getModelType());
      assertNull(modelFieldBean0.getDateFormat());
      assertNull(modelFieldBean0.getCritical());
      assertNull(modelFieldBean0.getName());
      
      modelFieldBean0.setValidators((List<AbstractValidation>) null);
      assertNull(modelFieldBean0.getAllowNull());
      assertNull(modelFieldBean0.getCalculate());
      assertNull(modelFieldBean0.getUnique());
      assertNull(modelFieldBean0.getType());
      assertNull(modelFieldBean0.getPersist());
      assertNull(modelFieldBean0.getAllowBlank());
      assertNull(modelFieldBean0.getUseNull());
      assertNull(modelFieldBean0.getMapping());
      assertNull(modelFieldBean0.getConvert());
      assertNull(modelFieldBean0.getModelType());
      assertNull(modelFieldBean0.getDateFormat());
      assertNull(modelFieldBean0.getCritical());
      assertNull(modelFieldBean0.getName());
      
      Class<Annotation> class0 = Annotation.class;
      Annotation annotation0 = mock(Annotation.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(annotation0).annotationType();
      OutputConfig outputConfig0 = new OutputConfig();
      assertNotNull(outputConfig0);
      assertFalse(outputConfig0.isDebug());
      assertNull(outputConfig0.getIncludeValidation());
      assertNull(outputConfig0.getLineEnding());
      assertNull(outputConfig0.getOutputFormat());
      assertFalse(outputConfig0.isUseSingleQuotes());
      assertFalse(outputConfig0.isSurroundApiWithQuotes());
      
      IncludeValidation includeValidation0 = IncludeValidation.ALL;
      outputConfig0.setIncludeValidation(includeValidation0);
      assertFalse(outputConfig0.isDebug());
      assertNull(outputConfig0.getLineEnding());
      assertNull(outputConfig0.getOutputFormat());
      assertEquals(IncludeValidation.ALL, outputConfig0.getIncludeValidation());
      assertFalse(outputConfig0.isUseSingleQuotes());
      assertFalse(outputConfig0.isSurroundApiWithQuotes());
      
      outputConfig0.setSurroundApiWithQuotes(false);
      assertFalse(outputConfig0.isDebug());
      assertNull(outputConfig0.getLineEnding());
      assertNull(outputConfig0.getOutputFormat());
      assertEquals(IncludeValidation.ALL, outputConfig0.getIncludeValidation());
      assertFalse(outputConfig0.isUseSingleQuotes());
      assertFalse(outputConfig0.isSurroundApiWithQuotes());
      
      AbstractValidation.addValidationToModel((ModelBean) null, modelFieldBean0, annotation0, outputConfig0);
      assertNull(modelFieldBean0.getAllowNull());
      assertNull(modelFieldBean0.getCalculate());
      assertNull(modelFieldBean0.getUnique());
      assertNull(modelFieldBean0.getType());
      assertNull(modelFieldBean0.getPersist());
      assertNull(modelFieldBean0.getAllowBlank());
      assertNull(modelFieldBean0.getUseNull());
      assertNull(modelFieldBean0.getMapping());
      assertNull(modelFieldBean0.getConvert());
      assertNull(modelFieldBean0.getModelType());
      assertNull(modelFieldBean0.getDateFormat());
      assertNull(modelFieldBean0.getCritical());
      assertNull(modelFieldBean0.getName());
      assertFalse(outputConfig0.isDebug());
      assertNull(outputConfig0.getLineEnding());
      assertNull(outputConfig0.getOutputFormat());
      assertEquals(IncludeValidation.ALL, outputConfig0.getIncludeValidation());
      assertFalse(outputConfig0.isUseSingleQuotes());
      assertFalse(outputConfig0.isSurroundApiWithQuotes());
  }

  @Test(timeout = 4000000)
  public void test05()  throws Throwable  {
      ModelValidationType modelValidationType0 = ModelValidationType.PAST;
      ModelValidation modelValidation0 = mock(ModelValidation.class, new ViolatedAssumptionAnswer());
      doReturn(modelValidationType0).when(modelValidation0).value();
      IncludeValidation includeValidation0 = IncludeValidation.BUILTIN;
      AbstractValidation abstractValidation0 = AbstractValidation.createValidation("org.hiZernate.va6idator.constraints.NotEmpty", modelValidation0, includeValidation0);
      assertNull(abstractValidation0);
  }

  @Test(timeout = 4000000)
  public void test06()  throws Throwable  {
      ModelValidationType modelValidationType0 = ModelValidationType.PRESENCE;
      ModelValidation modelValidation0 = mock(ModelValidation.class, new ViolatedAssumptionAnswer());
      doReturn(modelValidationType0).when(modelValidation0).value();
      IncludeValidation includeValidation0 = IncludeValidation.BUILTIN;
      AbstractValidation abstractValidation0 = AbstractValidation.createValidation("org.hibernate.validator.constraints.NotEmpty", modelValidation0, includeValidation0);
      assertNotNull(abstractValidation0);
      assertEquals("presence", abstractValidation0.getType());
      assertEquals("org.hibernate.validator.constraints.NotEmpty", abstractValidation0.getField());
      
      ModelValidation modelValidation1 = mock(ModelValidation.class, new ViolatedAssumptionAnswer());
      doReturn((ModelValidationType) null).when(modelValidation1).value();
      IncludeValidation includeValidation1 = IncludeValidation.BUILTIN;
      // Undeclared exception!
      try { 
        AbstractValidation.createValidation("org.hibernate.validator.constraints.NotEmpty", modelValidation1, includeValidation1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("ch.rasc.extclassgenerator.validation.AbstractValidation", e);
      }
  }

  @Test(timeout = 4000000)
  public void test07()  throws Throwable  {
      String string0 = "f*iZi|";
      ModelValidationType modelValidationType0 = ModelValidationType.INCLUSION;
      String[] stringArray0 = new String[6];
      stringArray0[0] = "f*iZi|";
      stringArray0[1] = "f*iZi|";
      stringArray0[2] = "f*iZi|";
      stringArray0[3] = "f*iZi|";
      stringArray0[4] = "f*iZi|";
      stringArray0[5] = "f*iZi|";
      ModelValidation modelValidation0 = mock(ModelValidation.class, new ViolatedAssumptionAnswer());
      doReturn((Object) stringArray0, (Object) null).when(modelValidation0).exclusionOrInclusionList();
      doReturn(modelValidationType0).when(modelValidation0).value();
      IncludeValidation includeValidation0 = IncludeValidation.BUILTIN;
      // Undeclared exception!
      try { 
        AbstractValidation.createValidation("f*iZi|", modelValidation0, includeValidation0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("ch.rasc.extclassgenerator.validation.AbstractValidation", e);
      }
  }

  @Test(timeout = 4000000)
  public void test08()  throws Throwable  {
      ModelValidationType modelValidationType0 = ModelValidationType.INCLUSION;
      String[] stringArray0 = new String[3];
      ModelValidation modelValidation0 = mock(ModelValidation.class, new ViolatedAssumptionAnswer());
      doReturn((Object) stringArray0, (Object) stringArray0, (Object) stringArray0).when(modelValidation0).exclusionOrInclusionList();
      doReturn(modelValidationType0).when(modelValidation0).value();
      IncludeValidation includeValidation0 = IncludeValidation.BUILTIN;
      AbstractValidation abstractValidation0 = AbstractValidation.createValidation("v2", modelValidation0, includeValidation0);
      assertNotNull(abstractValidation0);
      assertEquals(3, stringArray0.length);
      assertEquals("v2", abstractValidation0.getField());
      assertEquals("inclusion", abstractValidation0.getType());
  }

  @Test(timeout = 4000000)
  public void test09()  throws Throwable  {
      String string0 = "f*iZi|";
      ModelValidationType modelValidationType0 = ModelValidationType.INCLUSION;
      ModelValidation modelValidation0 = mock(ModelValidation.class, new ViolatedAssumptionAnswer());
      doReturn((String[]) null).when(modelValidation0).exclusionOrInclusionList();
      doReturn(modelValidationType0).when(modelValidation0).value();
      IncludeValidation includeValidation0 = IncludeValidation.BUILTIN;
      // Undeclared exception!
      try { 
        AbstractValidation.createValidation("f*iZi|", modelValidation0, includeValidation0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("ch.rasc.extclassgenerator.ModelValidationType$7", e);
      }
  }

  @Test(timeout = 4000000)
  public void test10()  throws Throwable  {
      ModelValidationType modelValidationType0 = ModelValidationType.CREDITCARDNUMBER;
      ModelValidation modelValidation0 = mock(ModelValidation.class, new ViolatedAssumptionAnswer());
      doReturn(modelValidationType0).when(modelValidation0).value();
      IncludeValidation includeValidation0 = IncludeValidation.ALL;
      AbstractValidation abstractValidation0 = AbstractValidation.createValidation("e", modelValidation0, includeValidation0);
      assertNotNull(abstractValidation0);
      assertEquals("e", abstractValidation0.getField());
      assertEquals("creditCardNumber", abstractValidation0.getType());
  }

  @Test(timeout = 4000000)
  public void test11()  throws Throwable  {
      ExclusionValidation exclusionValidation0 = new ExclusionValidation((String) null, "PZI");
      assertNotNull(exclusionValidation0);
      assertNull(exclusionValidation0.getField());
      assertEquals("exclusion", exclusionValidation0.getType());
      assertEquals("PZI", exclusionValidation0.getList());
      
      ModelFieldBean modelFieldBean0 = new ModelFieldBean("PZI", "PZI");
      assertNotNull(modelFieldBean0);
      assertNull(modelFieldBean0.getModelType());
      assertNull(modelFieldBean0.getAllowBlank());
      assertNull(modelFieldBean0.getDateFormat());
      assertEquals("PZI", modelFieldBean0.getType());
      assertNull(modelFieldBean0.getMapping());
      assertNull(modelFieldBean0.getUseNull());
      assertNull(modelFieldBean0.getConvert());
      assertNull(modelFieldBean0.getCritical());
      assertEquals("PZI", modelFieldBean0.getName());
      assertNull(modelFieldBean0.getCalculate());
      assertNull(modelFieldBean0.getUnique());
      assertNull(modelFieldBean0.getAllowNull());
      assertNull(modelFieldBean0.getPersist());
      
      Class<Annotation> class0 = Annotation.class;
      Annotation annotation0 = mock(Annotation.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(annotation0).annotationType();
      OutputConfig outputConfig0 = new OutputConfig();
      assertNotNull(outputConfig0);
      assertNull(outputConfig0.getIncludeValidation());
      assertNull(outputConfig0.getOutputFormat());
      assertNull(outputConfig0.getLineEnding());
      assertFalse(outputConfig0.isUseSingleQuotes());
      assertFalse(outputConfig0.isSurroundApiWithQuotes());
      assertFalse(outputConfig0.isDebug());
      
      AbstractValidation.addValidationToModel((ModelBean) null, modelFieldBean0, annotation0, outputConfig0);
      assertNull(modelFieldBean0.getModelType());
      assertNull(modelFieldBean0.getAllowBlank());
      assertNull(modelFieldBean0.getDateFormat());
      assertEquals("PZI", modelFieldBean0.getType());
      assertNull(modelFieldBean0.getMapping());
      assertNull(modelFieldBean0.getUseNull());
      assertNull(modelFieldBean0.getConvert());
      assertNull(modelFieldBean0.getCritical());
      assertEquals("PZI", modelFieldBean0.getName());
      assertNull(modelFieldBean0.getCalculate());
      assertNull(modelFieldBean0.getUnique());
      assertNull(modelFieldBean0.getAllowNull());
      assertNull(modelFieldBean0.getPersist());
      assertNull(outputConfig0.getIncludeValidation());
      assertNull(outputConfig0.getOutputFormat());
      assertNull(outputConfig0.getLineEnding());
      assertFalse(outputConfig0.isUseSingleQuotes());
      assertFalse(outputConfig0.isSurroundApiWithQuotes());
      assertFalse(outputConfig0.isDebug());
      
      String string0 = exclusionValidation0.getField();
      assertNull(string0);
      assertNull(exclusionValidation0.getField());
      assertEquals("exclusion", exclusionValidation0.getType());
      assertEquals("PZI", exclusionValidation0.getList());
  }

  @Test(timeout = 4000000)
  public void test12()  throws Throwable  {
      String string0 = "";
      Long long0 = new Long((-2535L));
      assertNotNull(long0);
      assertEquals((-2535L), (long)long0);
      
      Long long1 = new Long(0L);
      assertNotNull(long1);
      assertFalse(long1.equals((Object)long0));
      assertEquals(0L, (long)long1);
      
      LengthValidation lengthValidation0 = new LengthValidation("", long0, long1);
      assertNotNull(lengthValidation0);
      assertFalse(long0.equals((Object)long1));
      assertFalse(long1.equals((Object)long0));
      assertEquals(0L, (long)lengthValidation0.getMax());
      assertEquals((-2535L), (long)lengthValidation0.getMin());
      assertEquals("length", lengthValidation0.getType());
      assertEquals("", lengthValidation0.getField());
      
      String string1 = "";
      ExclusionValidation exclusionValidation0 = new ExclusionValidation("", "");
      assertNotNull(exclusionValidation0);
      assertEquals("", exclusionValidation0.getField());
      assertEquals("exclusion", exclusionValidation0.getType());
      assertEquals("", exclusionValidation0.getList());
      
      String string2 = "blza)I";
      ModelValidation modelValidation0 = mock(ModelValidation.class, new ViolatedAssumptionAnswer());
      doReturn((ModelValidationType) null).when(modelValidation0).value();
      IncludeValidation includeValidation0 = IncludeValidation.BUILTIN;
      // Undeclared exception!
      try { 
        AbstractValidation.createValidation("blza)I", modelValidation0, includeValidation0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("ch.rasc.extclassgenerator.validation.AbstractValidation", e);
      }
  }

  @Test(timeout = 4000000)
  public void test13()  throws Throwable  {
      CreditCardNumberValidation creditCardNumberValidation0 = new CreditCardNumberValidation("max");
      assertNotNull(creditCardNumberValidation0);
      assertEquals("max", creditCardNumberValidation0.getField());
      assertEquals("creditCardNumber", creditCardNumberValidation0.getType());
      
      String string0 = "dDiHJf";
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      ModelType modelType0 = ModelType.INTEGER;
      ModelFieldBean modelFieldBean0 = new ModelFieldBean("dDiHJf", modelType0);
      assertNotNull(modelFieldBean0);
      assertEquals("int", modelFieldBean0.getType());
      assertEquals(ModelType.INTEGER, modelFieldBean0.getModelType());
      assertNull(modelFieldBean0.getDateFormat());
      assertNull(modelFieldBean0.getAllowNull());
      assertEquals("dDiHJf", modelFieldBean0.getName());
      assertNull(modelFieldBean0.getCritical());
      assertNull(modelFieldBean0.getCalculate());
      assertNull(modelFieldBean0.getAllowBlank());
      assertNull(modelFieldBean0.getPersist());
      assertNull(modelFieldBean0.getUseNull());
      assertNull(modelFieldBean0.getConvert());
      assertNull(modelFieldBean0.getMapping());
      assertNull(modelFieldBean0.getUnique());
      
      List<String> list0 = modelFieldBean0.getDepends();
      assertNull(list0);
      assertEquals("int", modelFieldBean0.getType());
      assertEquals(ModelType.INTEGER, modelFieldBean0.getModelType());
      assertNull(modelFieldBean0.getDateFormat());
      assertNull(modelFieldBean0.getAllowNull());
      assertEquals("dDiHJf", modelFieldBean0.getName());
      assertNull(modelFieldBean0.getCritical());
      assertNull(modelFieldBean0.getCalculate());
      assertNull(modelFieldBean0.getAllowBlank());
      assertNull(modelFieldBean0.getPersist());
      assertNull(modelFieldBean0.getUseNull());
      assertNull(modelFieldBean0.getConvert());
      assertNull(modelFieldBean0.getMapping());
      assertNull(modelFieldBean0.getUnique());
      
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      List<String> list1 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) null, locale_FilteringMode0);
      assertNotNull(list1);
      assertFalse(list1.contains("max"));
      assertEquals(0, linkedList0.size());
      assertEquals(0, list1.size());
      assertTrue(list1.isEmpty());
      
      InclusionValidationArray inclusionValidationArray0 = new InclusionValidationArray("dDiHJf", list1);
      assertNotNull(inclusionValidationArray0);
      assertFalse(list1.contains("max"));
      assertEquals(0, linkedList0.size());
      assertEquals(0, list1.size());
      assertTrue(list1.isEmpty());
      assertEquals("inclusion", inclusionValidationArray0.getType());
      assertEquals("dDiHJf", inclusionValidationArray0.getField());
      
      List<String> list2 = inclusionValidationArray0.getList();
      assertNotNull(list2);
      assertFalse(list1.contains("max"));
      assertFalse(list2.contains("max"));
      assertSame(list1, list2);
      assertSame(list2, list1);
      assertEquals(0, linkedList0.size());
      assertEquals(0, list1.size());
      assertTrue(list1.isEmpty());
      assertEquals("inclusion", inclusionValidationArray0.getType());
      assertEquals("dDiHJf", inclusionValidationArray0.getField());
      assertTrue(list2.isEmpty());
      assertEquals(0, list2.size());
      
      String string1 = ":GCaS!;L!oAMn/8~\\";
      ModelValidation modelValidation0 = mock(ModelValidation.class, new ViolatedAssumptionAnswer());
      doReturn((ModelValidationType) null).when(modelValidation0).value();
      IncludeValidation includeValidation0 = IncludeValidation.ALL;
      // Undeclared exception!
      try { 
        AbstractValidation.createValidation(":GCaS!;L!oAMn/8~", modelValidation0, includeValidation0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("ch.rasc.extclassgenerator.validation.AbstractValidation", e);
      }
  }

  @Test(timeout = 4000000)
  public void test14()  throws Throwable  {
      Long long0 = new Long(1078L);
      assertNotNull(long0);
      assertEquals(1078L, (long)long0);
      
      LengthValidation lengthValidation0 = new LengthValidation("fraction", long0, long0);
      assertNotNull(lengthValidation0);
      assertEquals("length", lengthValidation0.getType());
      assertEquals("fraction", lengthValidation0.getField());
      assertEquals(1078L, (long)lengthValidation0.getMax());
      assertEquals(1078L, (long)lengthValidation0.getMin());
      
      String string0 = lengthValidation0.getType();
      assertNotNull(string0);
      assertEquals("length", string0);
      assertEquals("length", lengthValidation0.getType());
      assertEquals("fraction", lengthValidation0.getField());
      assertEquals(1078L, (long)lengthValidation0.getMax());
      assertEquals(1078L, (long)lengthValidation0.getMin());
      
      DigitsValidation digitsValidation0 = new DigitsValidation("A#oeVCv`bt?o", 115, 115);
      assertNotNull(digitsValidation0);
      assertEquals(115, digitsValidation0.getInteger());
      assertEquals("A#oeVCv`bt?o", digitsValidation0.getField());
      assertEquals(115, digitsValidation0.getFraction());
      assertEquals("digits", digitsValidation0.getType());
      
      int int0 = digitsValidation0.getFraction();
      assertEquals(115, int0);
      assertEquals(115, digitsValidation0.getInteger());
      assertEquals("A#oeVCv`bt?o", digitsValidation0.getField());
      assertEquals(115, digitsValidation0.getFraction());
      assertEquals("digits", digitsValidation0.getType());
      
      String string1 = digitsValidation0.getField();
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("A#oeVCv`bt?o", string1);
      assertEquals(115, digitsValidation0.getInteger());
      assertEquals("A#oeVCv`bt?o", digitsValidation0.getField());
      assertEquals(115, digitsValidation0.getFraction());
      assertEquals("digits", digitsValidation0.getType());
  }

  @Test(timeout = 4000000)
  public void test15()  throws Throwable  {
      String string0 = ">ooh=+9+(8:&8G'bMG";
      PresenceValidation presenceValidation0 = new PresenceValidation(">ooh=+9+(8:&8G'bMG");
      assertNotNull(presenceValidation0);
      assertEquals("presence", presenceValidation0.getType());
      assertEquals(">ooh=+9+(8:&8G'bMG", presenceValidation0.getField());
      
      String string1 = "o";
      ModelValidation modelValidation0 = mock(ModelValidation.class, new ViolatedAssumptionAnswer());
      ModelBean modelBean0 = new ModelBean();
      assertNotNull(modelBean0);
      assertTrue(modelBean0.isAutodetectTypes());
      assertNull(modelBean0.getClientIdProperty());
      assertEquals("Ext.data.Model", modelBean0.getExtend());
      assertNull(modelBean0.getUpdateMethod());
      assertNull(modelBean0.getCreateMethod());
      assertNull(modelBean0.getReadMethod());
      assertFalse(modelBean0.isPaging());
      assertNull(modelBean0.getVersionProperty());
      assertNull(modelBean0.getMessageProperty());
      assertNull(modelBean0.getSuccessProperty());
      assertEquals("json", modelBean0.getReader());
      assertNull(modelBean0.getWriteAllFields());
      assertFalse(modelBean0.isClientIdPropertyAddToWriter());
      assertNull(modelBean0.getName());
      assertNull(modelBean0.getRootProperty());
      assertFalse(modelBean0.isDisablePagingParameters());
      assertNull(modelBean0.getTotalProperty());
      assertEquals("json", modelBean0.getWriter());
      assertNull(modelBean0.getIdentifier());
      assertNull(modelBean0.getIdProperty());
      assertNull(modelBean0.getDestroyMethod());
      
      ModelValidationType modelValidationType0 = ModelValidationType.CREDITCARDNUMBER;
      ModelValidation modelValidation1 = mock(ModelValidation.class, new ViolatedAssumptionAnswer());
      doReturn(modelValidationType0).when(modelValidation1).value();
      IncludeValidation includeValidation0 = IncludeValidation.NONE;
      AbstractValidation abstractValidation0 = AbstractValidation.createValidation("ch.rasc.extclassgenerator.validation.RangeValidation", modelValidation1, includeValidation0);
      assertNull(abstractValidation0);
      
      ModelValidationType modelValidationType1 = ModelValidationType.EMAIL;
      ModelValidation modelValidation2 = mock(ModelValidation.class, new ViolatedAssumptionAnswer());
      doReturn(modelValidationType1).when(modelValidation2).value();
      IncludeValidation includeValidation1 = IncludeValidation.ALL;
      AbstractValidation abstractValidation1 = AbstractValidation.createValidation(">ooh=+9+(8:&8G'bMG", modelValidation2, includeValidation1);
      assertNotNull(abstractValidation1);
      assertNotSame(includeValidation1, includeValidation0);
      assertFalse(modelValidationType1.equals((Object)modelValidationType0));
      assertFalse(includeValidation1.equals((Object)includeValidation0));
      assertEquals(">ooh=+9+(8:&8G'bMG", abstractValidation1.getField());
      assertEquals("email", abstractValidation1.getType());
      
      Annotation annotation0 = mock(Annotation.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(annotation0).annotationType();
      OutputConfig outputConfig0 = new OutputConfig();
      assertNotNull(outputConfig0);
      assertNull(outputConfig0.getOutputFormat());
      assertNull(outputConfig0.getIncludeValidation());
      assertFalse(outputConfig0.isSurroundApiWithQuotes());
      assertFalse(outputConfig0.isUseSingleQuotes());
      assertNull(outputConfig0.getLineEnding());
      assertFalse(outputConfig0.isDebug());
      
      outputConfig0.setSurroundApiWithQuotes(false);
      assertNull(outputConfig0.getOutputFormat());
      assertNull(outputConfig0.getIncludeValidation());
      assertFalse(outputConfig0.isSurroundApiWithQuotes());
      assertFalse(outputConfig0.isUseSingleQuotes());
      assertNull(outputConfig0.getLineEnding());
      assertFalse(outputConfig0.isDebug());
      
      // Undeclared exception!
      try { 
        AbstractValidation.addValidationToModel(modelBean0, (ModelFieldBean) null, annotation0, outputConfig0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("ch.rasc.extclassgenerator.validation.AbstractValidation", e);
      }
  }

  @Test(timeout = 4000000)
  public void test16()  throws Throwable  {
      ModelFieldBean modelFieldBean0 = new ModelFieldBean((String) null, (String) null);
      assertNotNull(modelFieldBean0);
      assertNull(modelFieldBean0.getType());
      assertNull(modelFieldBean0.getConvert());
      assertNull(modelFieldBean0.getCalculate());
      assertNull(modelFieldBean0.getModelType());
      assertNull(modelFieldBean0.getUnique());
      assertNull(modelFieldBean0.getDateFormat());
      assertNull(modelFieldBean0.getUseNull());
      assertNull(modelFieldBean0.getMapping());
      assertNull(modelFieldBean0.getCritical());
      assertNull(modelFieldBean0.getName());
      assertNull(modelFieldBean0.getPersist());
      assertNull(modelFieldBean0.getAllowBlank());
      assertNull(modelFieldBean0.getAllowNull());
      
      Class<Annotation> class0 = Annotation.class;
      Annotation annotation0 = mock(Annotation.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(annotation0).annotationType();
      modelFieldBean0.setDateFormat("z6N|@r");
      assertNull(modelFieldBean0.getType());
      assertNull(modelFieldBean0.getConvert());
      assertNull(modelFieldBean0.getCalculate());
      assertNull(modelFieldBean0.getModelType());
      assertNull(modelFieldBean0.getUnique());
      assertEquals("z6N|@r", modelFieldBean0.getDateFormat());
      assertNull(modelFieldBean0.getUseNull());
      assertNull(modelFieldBean0.getMapping());
      assertNull(modelFieldBean0.getCritical());
      assertNull(modelFieldBean0.getName());
      assertNull(modelFieldBean0.getPersist());
      assertNull(modelFieldBean0.getAllowBlank());
      assertNull(modelFieldBean0.getAllowNull());
      
      OutputConfig outputConfig0 = new OutputConfig();
      assertNotNull(outputConfig0);
      assertNull(outputConfig0.getOutputFormat());
      assertNull(outputConfig0.getIncludeValidation());
      assertFalse(outputConfig0.isUseSingleQuotes());
      assertNull(outputConfig0.getLineEnding());
      assertFalse(outputConfig0.isSurroundApiWithQuotes());
      assertFalse(outputConfig0.isDebug());
      
      IncludeValidation includeValidation0 = IncludeValidation.ALL;
      outputConfig0.setIncludeValidation(includeValidation0);
      assertNull(outputConfig0.getOutputFormat());
      assertFalse(outputConfig0.isUseSingleQuotes());
      assertNull(outputConfig0.getLineEnding());
      assertFalse(outputConfig0.isSurroundApiWithQuotes());
      assertEquals(IncludeValidation.ALL, outputConfig0.getIncludeValidation());
      assertFalse(outputConfig0.isDebug());
      
      ModelBean modelBean0 = new ModelBean();
      assertNotNull(modelBean0);
      assertNull(modelBean0.getClientIdProperty());
      assertEquals("Ext.data.Model", modelBean0.getExtend());
      assertTrue(modelBean0.isAutodetectTypes());
      assertNull(modelBean0.getMessageProperty());
      assertNull(modelBean0.getCreateMethod());
      assertNull(modelBean0.getReadMethod());
      assertNull(modelBean0.getRootProperty());
      assertFalse(modelBean0.isDisablePagingParameters());
      assertNull(modelBean0.getTotalProperty());
      assertEquals("json", modelBean0.getWriter());
      assertNull(modelBean0.getIdentifier());
      assertNull(modelBean0.getIdProperty());
      assertNull(modelBean0.getDestroyMethod());
      assertFalse(modelBean0.isClientIdPropertyAddToWriter());
      assertNull(modelBean0.getName());
      assertNull(modelBean0.getSuccessProperty());
      assertNull(modelBean0.getVersionProperty());
      assertEquals("json", modelBean0.getReader());
      assertFalse(modelBean0.isPaging());
      assertNull(modelBean0.getUpdateMethod());
      assertNull(modelBean0.getWriteAllFields());
      
      AbstractValidation.addValidationToModel(modelBean0, modelFieldBean0, annotation0, outputConfig0);
      assertNull(modelFieldBean0.getType());
      assertNull(modelFieldBean0.getConvert());
      assertNull(modelFieldBean0.getCalculate());
      assertNull(modelFieldBean0.getModelType());
      assertNull(modelFieldBean0.getUnique());
      assertEquals("z6N|@r", modelFieldBean0.getDateFormat());
      assertNull(modelFieldBean0.getUseNull());
      assertNull(modelFieldBean0.getMapping());
      assertNull(modelFieldBean0.getCritical());
      assertNull(modelFieldBean0.getName());
      assertNull(modelFieldBean0.getPersist());
      assertNull(modelFieldBean0.getAllowBlank());
      assertNull(modelFieldBean0.getAllowNull());
      assertNull(outputConfig0.getOutputFormat());
      assertFalse(outputConfig0.isUseSingleQuotes());
      assertNull(outputConfig0.getLineEnding());
      assertFalse(outputConfig0.isSurroundApiWithQuotes());
      assertEquals(IncludeValidation.ALL, outputConfig0.getIncludeValidation());
      assertFalse(outputConfig0.isDebug());
      assertNull(modelBean0.getClientIdProperty());
      assertEquals("Ext.data.Model", modelBean0.getExtend());
      assertTrue(modelBean0.isAutodetectTypes());
      assertNull(modelBean0.getMessageProperty());
      assertNull(modelBean0.getCreateMethod());
      assertNull(modelBean0.getReadMethod());
      assertNull(modelBean0.getRootProperty());
      assertFalse(modelBean0.isDisablePagingParameters());
      assertNull(modelBean0.getTotalProperty());
      assertEquals("json", modelBean0.getWriter());
      assertNull(modelBean0.getIdentifier());
      assertNull(modelBean0.getIdProperty());
      assertNull(modelBean0.getDestroyMethod());
      assertFalse(modelBean0.isClientIdPropertyAddToWriter());
      assertNull(modelBean0.getName());
      assertNull(modelBean0.getSuccessProperty());
      assertNull(modelBean0.getVersionProperty());
      assertEquals("json", modelBean0.getReader());
      assertFalse(modelBean0.isPaging());
      assertNull(modelBean0.getUpdateMethod());
      assertNull(modelBean0.getWriteAllFields());
      
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      GenericValidation genericValidation0 = new GenericValidation((String) null, "z6N|@r", hashMap0);
      assertNotNull(genericValidation0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals("z6N|@r", genericValidation0.getField());
      assertNull(genericValidation0.getType());
      
      String string0 = genericValidation0.getType();
      assertNull(string0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals("z6N|@r", genericValidation0.getField());
      assertNull(genericValidation0.getType());
  }

  @Test(timeout = 4000000)
  public void test17()  throws Throwable  {
      ExclusionValidation exclusionValidation0 = new ExclusionValidation((String) null, "dPZI");
      assertNotNull(exclusionValidation0);
      assertEquals("exclusion", exclusionValidation0.getType());
      assertNull(exclusionValidation0.getField());
      assertEquals("dPZI", exclusionValidation0.getList());
      
      ModelFieldBean modelFieldBean0 = new ModelFieldBean("dPZI", "double");
      assertNotNull(modelFieldBean0);
      assertNull(modelFieldBean0.getAllowNull());
      assertNull(modelFieldBean0.getUnique());
      assertNull(modelFieldBean0.getConvert());
      assertNull(modelFieldBean0.getModelType());
      assertNull(modelFieldBean0.getUseNull());
      assertNull(modelFieldBean0.getPersist());
      assertNull(modelFieldBean0.getMapping());
      assertNull(modelFieldBean0.getCritical());
      assertNull(modelFieldBean0.getAllowBlank());
      assertEquals("dPZI", modelFieldBean0.getName());
      assertEquals("double", modelFieldBean0.getType());
      assertNull(modelFieldBean0.getDateFormat());
      assertNull(modelFieldBean0.getCalculate());
      
      Class<Annotation> class0 = Annotation.class;
      Annotation annotation0 = mock(Annotation.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(annotation0).annotationType();
      OutputConfig outputConfig0 = new OutputConfig();
      assertNotNull(outputConfig0);
      assertNull(outputConfig0.getIncludeValidation());
      assertFalse(outputConfig0.isDebug());
      assertFalse(outputConfig0.isUseSingleQuotes());
      assertNull(outputConfig0.getLineEnding());
      assertFalse(outputConfig0.isSurroundApiWithQuotes());
      assertNull(outputConfig0.getOutputFormat());
      
      FormatValidation formatValidation0 = new FormatValidation((String) null, "org.hibernate.validator.constraints.Email");
      assertNotNull(formatValidation0);
      assertNull(formatValidation0.getField());
      assertEquals("format", formatValidation0.getType());
      assertEquals("/org.hibernate.validator.constraints.Email/", formatValidation0.getMatcher());
      
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertNotNull(linkedList0);
      assertFalse(linkedList0.contains("double"));
      assertEquals(0, linkedList0.size());
      
      modelFieldBean0.setDepends(linkedList0);
      assertFalse(linkedList0.contains("double"));
      assertNull(modelFieldBean0.getAllowNull());
      assertNull(modelFieldBean0.getUnique());
      assertNull(modelFieldBean0.getConvert());
      assertNull(modelFieldBean0.getModelType());
      assertNull(modelFieldBean0.getUseNull());
      assertNull(modelFieldBean0.getPersist());
      assertNull(modelFieldBean0.getMapping());
      assertNull(modelFieldBean0.getCritical());
      assertNull(modelFieldBean0.getAllowBlank());
      assertEquals("dPZI", modelFieldBean0.getName());
      assertEquals("double", modelFieldBean0.getType());
      assertNull(modelFieldBean0.getDateFormat());
      assertNull(modelFieldBean0.getCalculate());
      assertEquals(0, linkedList0.size());
      
      String string0 = formatValidation0.getMatcher();
      assertNotNull(string0);
      assertEquals("/org.hibernate.validator.constraints.Email/", string0);
      assertNull(formatValidation0.getField());
      assertEquals("format", formatValidation0.getType());
      assertEquals("/org.hibernate.validator.constraints.Email/", formatValidation0.getMatcher());
      
      AbstractValidation.addValidationToModel((ModelBean) null, modelFieldBean0, annotation0, outputConfig0);
      assertNull(modelFieldBean0.getAllowNull());
      assertNull(modelFieldBean0.getUnique());
      assertNull(modelFieldBean0.getConvert());
      assertNull(modelFieldBean0.getModelType());
      assertNull(modelFieldBean0.getUseNull());
      assertNull(modelFieldBean0.getPersist());
      assertNull(modelFieldBean0.getMapping());
      assertNull(modelFieldBean0.getCritical());
      assertNull(modelFieldBean0.getAllowBlank());
      assertEquals("dPZI", modelFieldBean0.getName());
      assertEquals("double", modelFieldBean0.getType());
      assertNull(modelFieldBean0.getDateFormat());
      assertNull(modelFieldBean0.getCalculate());
      assertNull(outputConfig0.getIncludeValidation());
      assertFalse(outputConfig0.isDebug());
      assertFalse(outputConfig0.isUseSingleQuotes());
      assertNull(outputConfig0.getLineEnding());
      assertFalse(outputConfig0.isSurroundApiWithQuotes());
      assertNull(outputConfig0.getOutputFormat());
      
      String string1 = exclusionValidation0.getType();
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("exclusion", string1);
      assertEquals("exclusion", exclusionValidation0.getType());
      assertNull(exclusionValidation0.getField());
      assertEquals("dPZI", exclusionValidation0.getList());
  }

  @Test(timeout = 4000000)
  public void test18()  throws Throwable  {
      ModelFieldBean modelFieldBean0 = new ModelFieldBean((String) null, (String) null);
      assertNotNull(modelFieldBean0);
      assertNull(modelFieldBean0.getDateFormat());
      assertNull(modelFieldBean0.getType());
      assertNull(modelFieldBean0.getUseNull());
      assertNull(modelFieldBean0.getMapping());
      assertNull(modelFieldBean0.getModelType());
      assertNull(modelFieldBean0.getConvert());
      assertNull(modelFieldBean0.getUnique());
      assertNull(modelFieldBean0.getName());
      assertNull(modelFieldBean0.getCalculate());
      assertNull(modelFieldBean0.getCritical());
      assertNull(modelFieldBean0.getPersist());
      assertNull(modelFieldBean0.getAllowNull());
      assertNull(modelFieldBean0.getAllowBlank());
      
      Class<Annotation> class0 = Annotation.class;
      Annotation annotation0 = mock(Annotation.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(annotation0).annotationType();
      OutputConfig outputConfig0 = new OutputConfig();
      assertNotNull(outputConfig0);
      assertFalse(outputConfig0.isDebug());
      assertFalse(outputConfig0.isSurroundApiWithQuotes());
      assertNull(outputConfig0.getIncludeValidation());
      assertFalse(outputConfig0.isUseSingleQuotes());
      assertNull(outputConfig0.getLineEnding());
      assertNull(outputConfig0.getOutputFormat());
      
      IncludeValidation includeValidation0 = IncludeValidation.BUILTIN;
      outputConfig0.setIncludeValidation(includeValidation0);
      assertFalse(outputConfig0.isDebug());
      assertFalse(outputConfig0.isSurroundApiWithQuotes());
      assertFalse(outputConfig0.isUseSingleQuotes());
      assertNull(outputConfig0.getLineEnding());
      assertEquals(IncludeValidation.BUILTIN, outputConfig0.getIncludeValidation());
      assertNull(outputConfig0.getOutputFormat());
      
      ModelBean modelBean0 = new ModelBean();
      assertNotNull(modelBean0);
      assertNull(modelBean0.getSuccessProperty());
      assertNull(modelBean0.getRootProperty());
      assertNull(modelBean0.getIdentifier());
      assertNull(modelBean0.getVersionProperty());
      assertFalse(modelBean0.isDisablePagingParameters());
      assertEquals("json", modelBean0.getWriter());
      assertNull(modelBean0.getMessageProperty());
      assertNull(modelBean0.getName());
      assertNull(modelBean0.getTotalProperty());
      assertNull(modelBean0.getCreateMethod());
      assertNull(modelBean0.getIdProperty());
      assertNull(modelBean0.getDestroyMethod());
      assertNull(modelBean0.getWriteAllFields());
      assertFalse(modelBean0.isClientIdPropertyAddToWriter());
      assertEquals("json", modelBean0.getReader());
      assertNull(modelBean0.getUpdateMethod());
      assertNull(modelBean0.getClientIdProperty());
      assertNull(modelBean0.getReadMethod());
      assertTrue(modelBean0.isAutodetectTypes());
      assertFalse(modelBean0.isPaging());
      assertEquals("Ext.data.Model", modelBean0.getExtend());
      
      AbstractValidation.addValidationToModel(modelBean0, modelFieldBean0, annotation0, outputConfig0);
      assertNull(modelFieldBean0.getDateFormat());
      assertNull(modelFieldBean0.getType());
      assertNull(modelFieldBean0.getUseNull());
      assertNull(modelFieldBean0.getMapping());
      assertNull(modelFieldBean0.getModelType());
      assertNull(modelFieldBean0.getConvert());
      assertNull(modelFieldBean0.getUnique());
      assertNull(modelFieldBean0.getName());
      assertNull(modelFieldBean0.getCalculate());
      assertNull(modelFieldBean0.getCritical());
      assertNull(modelFieldBean0.getPersist());
      assertNull(modelFieldBean0.getAllowNull());
      assertNull(modelFieldBean0.getAllowBlank());
      assertFalse(outputConfig0.isDebug());
      assertFalse(outputConfig0.isSurroundApiWithQuotes());
      assertFalse(outputConfig0.isUseSingleQuotes());
      assertNull(outputConfig0.getLineEnding());
      assertEquals(IncludeValidation.BUILTIN, outputConfig0.getIncludeValidation());
      assertNull(outputConfig0.getOutputFormat());
      assertNull(modelBean0.getSuccessProperty());
      assertNull(modelBean0.getRootProperty());
      assertNull(modelBean0.getIdentifier());
      assertNull(modelBean0.getVersionProperty());
      assertFalse(modelBean0.isDisablePagingParameters());
      assertEquals("json", modelBean0.getWriter());
      assertNull(modelBean0.getMessageProperty());
      assertNull(modelBean0.getName());
      assertNull(modelBean0.getTotalProperty());
      assertNull(modelBean0.getCreateMethod());
      assertNull(modelBean0.getIdProperty());
      assertNull(modelBean0.getDestroyMethod());
      assertNull(modelBean0.getWriteAllFields());
      assertFalse(modelBean0.isClientIdPropertyAddToWriter());
      assertEquals("json", modelBean0.getReader());
      assertNull(modelBean0.getUpdateMethod());
      assertNull(modelBean0.getClientIdProperty());
      assertNull(modelBean0.getReadMethod());
      assertTrue(modelBean0.isAutodetectTypes());
      assertFalse(modelBean0.isPaging());
      assertEquals("Ext.data.Model", modelBean0.getExtend());
  }

  @Test(timeout = 4000000)
  public void test19()  throws Throwable  {
      CreditCardNumberValidation creditCardNumberValidation0 = new CreditCardNumberValidation("max");
      assertNotNull(creditCardNumberValidation0);
      assertEquals("max", creditCardNumberValidation0.getField());
      assertEquals("creditCardNumber", creditCardNumberValidation0.getType());
      
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      ModelValidationType modelValidationType0 = ModelValidationType.CREDITCARDNUMBER;
      ModelValidation modelValidation0 = mock(ModelValidation.class, new ViolatedAssumptionAnswer());
      doReturn(modelValidationType0).when(modelValidation0).value();
      IncludeValidation includeValidation0 = IncludeValidation.ALL;
      AbstractValidation abstractValidation0 = AbstractValidation.createValidation(":GCaS!;L!oAMn/8~", modelValidation0, includeValidation0);
      assertNotNull(abstractValidation0);
      assertNotSame(abstractValidation0, creditCardNumberValidation0);
      assertFalse(abstractValidation0.equals((Object)creditCardNumberValidation0));
      assertEquals("creditCardNumber", abstractValidation0.getType());
      assertEquals(":GCaS!;L!oAMn/8~", abstractValidation0.getField());
      
      ModelValidationType modelValidationType1 = ModelValidationType.PAST;
      ModelValidation modelValidation1 = mock(ModelValidation.class, new ViolatedAssumptionAnswer());
      doReturn(modelValidationType1).when(modelValidation1).value();
      ObjectIdentityEqualsVisitor objectIdentityEqualsVisitor0 = new ObjectIdentityEqualsVisitor();
      assertNotNull(objectIdentityEqualsVisitor0);
      
      LocalClassDeclarationStmt localClassDeclarationStmt0 = new LocalClassDeclarationStmt();
      assertNotNull(localClassDeclarationStmt0);
      assertEquals((-1), Node.ABSOLUTE_BEGIN_LINE);
      assertEquals((-2), Node.ABSOLUTE_END_LINE);
      assertFalse(localClassDeclarationStmt0.isForStmt());
      assertFalse(localClassDeclarationStmt0.isIfStmt());
      assertFalse(localClassDeclarationStmt0.isExpressionStmt());
      assertFalse(localClassDeclarationStmt0.isBlockStmt());
      assertTrue(localClassDeclarationStmt0.isLocalClassDeclarationStmt());
      assertFalse(localClassDeclarationStmt0.isDoStmt());
      assertFalse(localClassDeclarationStmt0.isReturnStmt());
      assertFalse(localClassDeclarationStmt0.isForEachStmt());
      assertFalse(localClassDeclarationStmt0.isEmptyStmt());
      assertFalse(localClassDeclarationStmt0.isYieldStmt());
      assertFalse(localClassDeclarationStmt0.isSwitchStmt());
      assertFalse(localClassDeclarationStmt0.isLocalRecordDeclarationStmt());
      assertFalse(localClassDeclarationStmt0.isAssertStmt());
      assertFalse(localClassDeclarationStmt0.isSynchronizedStmt());
      assertFalse(localClassDeclarationStmt0.isExplicitConstructorInvocationStmt());
      assertFalse(localClassDeclarationStmt0.isTryStmt());
      assertFalse(localClassDeclarationStmt0.isContinueStmt());
      assertFalse(localClassDeclarationStmt0.isThrowStmt());
      assertFalse(localClassDeclarationStmt0.isUnparsableStmt());
      assertFalse(localClassDeclarationStmt0.isWhileStmt());
      assertEquals(Node.Parsedness.PARSED, localClassDeclarationStmt0.getParsed());
      assertFalse(localClassDeclarationStmt0.isBreakStmt());
      assertFalse(localClassDeclarationStmt0.isLabeledStmt());
      
      Optional<ExpressionStmt> optional0 = localClassDeclarationStmt0.toExpressionStmt();
      assertNotNull(optional0);
      assertEquals((-1), Node.ABSOLUTE_BEGIN_LINE);
      assertEquals((-2), Node.ABSOLUTE_END_LINE);
      assertFalse(localClassDeclarationStmt0.isForStmt());
      assertFalse(localClassDeclarationStmt0.isIfStmt());
      assertFalse(localClassDeclarationStmt0.isExpressionStmt());
      assertFalse(localClassDeclarationStmt0.isBlockStmt());
      assertTrue(localClassDeclarationStmt0.isLocalClassDeclarationStmt());
      assertFalse(localClassDeclarationStmt0.isDoStmt());
      assertFalse(localClassDeclarationStmt0.isReturnStmt());
      assertFalse(localClassDeclarationStmt0.isForEachStmt());
      assertFalse(localClassDeclarationStmt0.isEmptyStmt());
      assertFalse(localClassDeclarationStmt0.isYieldStmt());
      assertFalse(localClassDeclarationStmt0.isSwitchStmt());
      assertFalse(localClassDeclarationStmt0.isLocalRecordDeclarationStmt());
      assertFalse(localClassDeclarationStmt0.isAssertStmt());
      assertFalse(localClassDeclarationStmt0.isSynchronizedStmt());
      assertFalse(localClassDeclarationStmt0.isExplicitConstructorInvocationStmt());
      assertFalse(localClassDeclarationStmt0.isTryStmt());
      assertFalse(localClassDeclarationStmt0.isContinueStmt());
      assertFalse(localClassDeclarationStmt0.isThrowStmt());
      assertFalse(localClassDeclarationStmt0.isUnparsableStmt());
      assertFalse(localClassDeclarationStmt0.isWhileStmt());
      assertEquals(Node.Parsedness.PARSED, localClassDeclarationStmt0.getParsed());
      assertFalse(localClassDeclarationStmt0.isBreakStmt());
      assertFalse(localClassDeclarationStmt0.isLabeledStmt());
      
      Boolean boolean0 = objectIdentityEqualsVisitor0.visit(localClassDeclarationStmt0, (Visitable) localClassDeclarationStmt0);
      assertNotNull(boolean0);
      assertEquals((-1), Node.ABSOLUTE_BEGIN_LINE);
      assertEquals((-2), Node.ABSOLUTE_END_LINE);
      assertTrue(boolean0);
      assertFalse(localClassDeclarationStmt0.isForStmt());
      assertFalse(localClassDeclarationStmt0.isIfStmt());
      assertFalse(localClassDeclarationStmt0.isExpressionStmt());
      assertFalse(localClassDeclarationStmt0.isBlockStmt());
      assertTrue(localClassDeclarationStmt0.isLocalClassDeclarationStmt());
      assertFalse(localClassDeclarationStmt0.isDoStmt());
      assertFalse(localClassDeclarationStmt0.isReturnStmt());
      assertFalse(localClassDeclarationStmt0.isForEachStmt());
      assertFalse(localClassDeclarationStmt0.isEmptyStmt());
      assertFalse(localClassDeclarationStmt0.isYieldStmt());
      assertFalse(localClassDeclarationStmt0.isSwitchStmt());
      assertFalse(localClassDeclarationStmt0.isLocalRecordDeclarationStmt());
      assertFalse(localClassDeclarationStmt0.isAssertStmt());
      assertFalse(localClassDeclarationStmt0.isSynchronizedStmt());
      assertFalse(localClassDeclarationStmt0.isExplicitConstructorInvocationStmt());
      assertFalse(localClassDeclarationStmt0.isTryStmt());
      assertFalse(localClassDeclarationStmt0.isContinueStmt());
      assertFalse(localClassDeclarationStmt0.isThrowStmt());
      assertFalse(localClassDeclarationStmt0.isUnparsableStmt());
      assertFalse(localClassDeclarationStmt0.isWhileStmt());
      assertEquals(Node.Parsedness.PARSED, localClassDeclarationStmt0.getParsed());
      assertFalse(localClassDeclarationStmt0.isBreakStmt());
      assertFalse(localClassDeclarationStmt0.isLabeledStmt());
      
      AbstractValidation abstractValidation1 = AbstractValidation.createValidation(":GCaS!;L!oAMn/8~", modelValidation1, includeValidation0);
      assertNotNull(abstractValidation1);
      assertFalse(modelValidationType1.equals((Object)modelValidationType0));
      assertEquals("past", abstractValidation1.getType());
      assertEquals(":GCaS!;L!oAMn/8~", abstractValidation1.getField());
      
      ModelValidation modelValidation2 = mock(ModelValidation.class, new ViolatedAssumptionAnswer());
      AbstractValidation abstractValidation2 = AbstractValidation.createValidation("", modelValidation2, includeValidation0);
      assertNull(abstractValidation2);
      
      ModelBean modelBean0 = new ModelBean();
      assertNotNull(modelBean0);
      assertTrue(modelBean0.isAutodetectTypes());
      assertNull(modelBean0.getWriteAllFields());
      assertNull(modelBean0.getReadMethod());
      assertNull(modelBean0.getIdProperty());
      assertEquals("Ext.data.Model", modelBean0.getExtend());
      assertNull(modelBean0.getClientIdProperty());
      assertNull(modelBean0.getMessageProperty());
      assertNull(modelBean0.getTotalProperty());
      assertNull(modelBean0.getVersionProperty());
      assertNull(modelBean0.getName());
      assertNull(modelBean0.getCreateMethod());
      assertEquals("json", modelBean0.getReader());
      assertNull(modelBean0.getUpdateMethod());
      assertEquals("json", modelBean0.getWriter());
      assertNull(modelBean0.getSuccessProperty());
      assertNull(modelBean0.getIdentifier());
      assertNull(modelBean0.getRootProperty());
      assertNull(modelBean0.getDestroyMethod());
      assertFalse(modelBean0.isPaging());
      assertFalse(modelBean0.isClientIdPropertyAddToWriter());
      assertFalse(modelBean0.isDisablePagingParameters());
      
      BigDecimal bigDecimal0 = new BigDecimal((-2887.3024736359));
      assertNotNull(bigDecimal0);
      assertEquals((short) (-2887), bigDecimal0.shortValue());
      assertEquals((byte) (-71), bigDecimal0.byteValue());
      
      InclusionValidation inclusionValidation0 = new InclusionValidation(":GCaS!;L!oAMn/8~", "OD,)n^Fz");
      assertNotNull(inclusionValidation0);
      assertEquals("inclusion", inclusionValidation0.getType());
      assertEquals(":GCaS!;L!oAMn/8~", inclusionValidation0.getField());
      assertEquals("OD,)n^Fz", inclusionValidation0.getList());
  }

  @Test(timeout = 4000000)
  public void test20()  throws Throwable  {
      Long long0 = new Long((-2535L));
      assertNotNull(long0);
      assertEquals((-2535L), (long)long0);
      
      Long long1 = new Long(0L);
      assertNotNull(long1);
      assertFalse(long1.equals((Object)long0));
      assertEquals(0L, (long)long1);
      
      LengthValidation lengthValidation0 = new LengthValidation("", long0, long1);
      assertNotNull(lengthValidation0);
      assertFalse(long0.equals((Object)long1));
      assertFalse(long1.equals((Object)long0));
      assertEquals(0L, (long)lengthValidation0.getMax());
      assertEquals("", lengthValidation0.getField());
      assertEquals("length", lengthValidation0.getType());
      assertEquals((-2535L), (long)lengthValidation0.getMin());
      
      ExclusionValidation exclusionValidation0 = new ExclusionValidation("", "");
      assertNotNull(exclusionValidation0);
      assertEquals("", exclusionValidation0.getList());
      assertEquals("exclusion", exclusionValidation0.getType());
      assertEquals("", exclusionValidation0.getField());
      
      ModelValidationType modelValidationType0 = ModelValidationType.PRESENCE;
      ModelValidation modelValidation0 = mock(ModelValidation.class, new ViolatedAssumptionAnswer());
      String string0 = exclusionValidation0.getField();
      assertNotNull(string0);
      assertEquals("", string0);
      assertEquals("", exclusionValidation0.getList());
      assertEquals("exclusion", exclusionValidation0.getType());
      assertEquals("", exclusionValidation0.getField());
  }

  @Test(timeout = 4000000)
  public void test21()  throws Throwable  {
      CreditCardNumberValidation creditCardNumberValidation0 = new CreditCardNumberValidation("max");
      assertNotNull(creditCardNumberValidation0);
      assertEquals("max", creditCardNumberValidation0.getField());
      assertEquals("creditCardNumber", creditCardNumberValidation0.getType());
      
      String string0 = "dDiHJf";
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      ModelType modelType0 = ModelType.INTEGER;
      ModelFieldBean modelFieldBean0 = new ModelFieldBean("dDiHJf", modelType0);
      assertNotNull(modelFieldBean0);
      assertNull(modelFieldBean0.getUseNull());
      assertNull(modelFieldBean0.getMapping());
      assertEquals("dDiHJf", modelFieldBean0.getName());
      assertNull(modelFieldBean0.getAllowBlank());
      assertNull(modelFieldBean0.getPersist());
      assertNull(modelFieldBean0.getCritical());
      assertNull(modelFieldBean0.getUnique());
      assertNull(modelFieldBean0.getDateFormat());
      assertNull(modelFieldBean0.getCalculate());
      assertNull(modelFieldBean0.getConvert());
      assertNull(modelFieldBean0.getAllowNull());
      assertEquals("int", modelFieldBean0.getType());
      assertEquals(ModelType.INTEGER, modelFieldBean0.getModelType());
      
      List<String> list0 = modelFieldBean0.getDepends();
      assertNull(list0);
      assertNull(modelFieldBean0.getUseNull());
      assertNull(modelFieldBean0.getMapping());
      assertEquals("dDiHJf", modelFieldBean0.getName());
      assertNull(modelFieldBean0.getAllowBlank());
      assertNull(modelFieldBean0.getPersist());
      assertNull(modelFieldBean0.getCritical());
      assertNull(modelFieldBean0.getUnique());
      assertNull(modelFieldBean0.getDateFormat());
      assertNull(modelFieldBean0.getCalculate());
      assertNull(modelFieldBean0.getConvert());
      assertNull(modelFieldBean0.getAllowNull());
      assertEquals("int", modelFieldBean0.getType());
      assertEquals(ModelType.INTEGER, modelFieldBean0.getModelType());
      
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      List<String> list1 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) null, locale_FilteringMode0);
      assertNotNull(list1);
      assertFalse(list1.contains("max"));
      assertEquals(0, linkedList0.size());
      assertTrue(list1.isEmpty());
      assertEquals(0, list1.size());
      
      InclusionValidationArray inclusionValidationArray0 = new InclusionValidationArray("dDiHJf", list1);
      assertNotNull(inclusionValidationArray0);
      assertFalse(list1.contains("max"));
      assertEquals(0, linkedList0.size());
      assertTrue(list1.isEmpty());
      assertEquals(0, list1.size());
      assertEquals("dDiHJf", inclusionValidationArray0.getField());
      assertEquals("inclusion", inclusionValidationArray0.getType());
      
      List<String> list2 = inclusionValidationArray0.getList();
      assertNotNull(list2);
      assertFalse(list1.contains("max"));
      assertFalse(list2.contains("max"));
      assertSame(list1, list2);
      assertSame(list2, list1);
      assertEquals(0, linkedList0.size());
      assertTrue(list1.isEmpty());
      assertEquals(0, list1.size());
      assertEquals("dDiHJf", inclusionValidationArray0.getField());
      assertEquals("inclusion", inclusionValidationArray0.getType());
      assertEquals(0, list2.size());
      assertTrue(list2.isEmpty());
      
      ModelValidationType modelValidationType0 = ModelValidationType.DIGITS;
      ModelValidation modelValidation0 = mock(ModelValidation.class, new ViolatedAssumptionAnswer());
      doReturn((ModelValidationParameter[]) null).when(modelValidation0).parameters();
      doReturn(modelValidationType0).when(modelValidation0).value();
      IncludeValidation includeValidation0 = IncludeValidation.ALL;
      AbstractValidation abstractValidation0 = AbstractValidation.createValidation(":GCaS!;L!oAMn/8~", modelValidation0, includeValidation0);
      assertNull(abstractValidation0);
      
      ModelValidation modelValidation1 = mock(ModelValidation.class, new ViolatedAssumptionAnswer());
      doReturn((ModelValidationType) null).when(modelValidation1).value();
      IncludeValidation includeValidation1 = IncludeValidation.NONE;
      ObjectIdentityEqualsVisitor objectIdentityEqualsVisitor0 = new ObjectIdentityEqualsVisitor();
      assertNotNull(objectIdentityEqualsVisitor0);
      
      LocalClassDeclarationStmt localClassDeclarationStmt0 = new LocalClassDeclarationStmt();
      assertNotNull(localClassDeclarationStmt0);
      assertEquals((-2), Node.ABSOLUTE_END_LINE);
      assertEquals((-1), Node.ABSOLUTE_BEGIN_LINE);
      assertFalse(localClassDeclarationStmt0.isDoStmt());
      assertFalse(localClassDeclarationStmt0.isUnparsableStmt());
      assertFalse(localClassDeclarationStmt0.isYieldStmt());
      assertFalse(localClassDeclarationStmt0.isLabeledStmt());
      assertFalse(localClassDeclarationStmt0.isEmptyStmt());
      assertFalse(localClassDeclarationStmt0.isAssertStmt());
      assertFalse(localClassDeclarationStmt0.isSwitchStmt());
      assertFalse(localClassDeclarationStmt0.isIfStmt());
      assertFalse(localClassDeclarationStmt0.isExpressionStmt());
      assertFalse(localClassDeclarationStmt0.isSynchronizedStmt());
      assertFalse(localClassDeclarationStmt0.isBlockStmt());
      assertFalse(localClassDeclarationStmt0.isWhileStmt());
      assertFalse(localClassDeclarationStmt0.isThrowStmt());
      assertFalse(localClassDeclarationStmt0.isReturnStmt());
      assertFalse(localClassDeclarationStmt0.isExplicitConstructorInvocationStmt());
      assertFalse(localClassDeclarationStmt0.isBreakStmt());
      assertFalse(localClassDeclarationStmt0.isLocalRecordDeclarationStmt());
      assertEquals(Node.Parsedness.PARSED, localClassDeclarationStmt0.getParsed());
      assertFalse(localClassDeclarationStmt0.isForEachStmt());
      assertFalse(localClassDeclarationStmt0.isContinueStmt());
      assertFalse(localClassDeclarationStmt0.isForStmt());
      assertFalse(localClassDeclarationStmt0.isTryStmt());
      assertTrue(localClassDeclarationStmt0.isLocalClassDeclarationStmt());
      
      Boolean boolean0 = objectIdentityEqualsVisitor0.visit(localClassDeclarationStmt0, (Visitable) localClassDeclarationStmt0);
      assertNotNull(boolean0);
      assertEquals((-2), Node.ABSOLUTE_END_LINE);
      assertEquals((-1), Node.ABSOLUTE_BEGIN_LINE);
      assertTrue(boolean0);
      assertFalse(localClassDeclarationStmt0.isDoStmt());
      assertFalse(localClassDeclarationStmt0.isUnparsableStmt());
      assertFalse(localClassDeclarationStmt0.isYieldStmt());
      assertFalse(localClassDeclarationStmt0.isLabeledStmt());
      assertFalse(localClassDeclarationStmt0.isEmptyStmt());
      assertFalse(localClassDeclarationStmt0.isAssertStmt());
      assertFalse(localClassDeclarationStmt0.isSwitchStmt());
      assertFalse(localClassDeclarationStmt0.isIfStmt());
      assertFalse(localClassDeclarationStmt0.isExpressionStmt());
      assertFalse(localClassDeclarationStmt0.isSynchronizedStmt());
      assertFalse(localClassDeclarationStmt0.isBlockStmt());
      assertFalse(localClassDeclarationStmt0.isWhileStmt());
      assertFalse(localClassDeclarationStmt0.isThrowStmt());
      assertFalse(localClassDeclarationStmt0.isReturnStmt());
      assertFalse(localClassDeclarationStmt0.isExplicitConstructorInvocationStmt());
      assertFalse(localClassDeclarationStmt0.isBreakStmt());
      assertFalse(localClassDeclarationStmt0.isLocalRecordDeclarationStmt());
      assertEquals(Node.Parsedness.PARSED, localClassDeclarationStmt0.getParsed());
      assertFalse(localClassDeclarationStmt0.isForEachStmt());
      assertFalse(localClassDeclarationStmt0.isContinueStmt());
      assertFalse(localClassDeclarationStmt0.isForStmt());
      assertFalse(localClassDeclarationStmt0.isTryStmt());
      assertTrue(localClassDeclarationStmt0.isLocalClassDeclarationStmt());
      
      modelFieldBean0.setAllowBlank(boolean0);
      assertEquals((-2), Node.ABSOLUTE_END_LINE);
      assertEquals((-1), Node.ABSOLUTE_BEGIN_LINE);
      assertFalse(localClassDeclarationStmt0.isDoStmt());
      assertFalse(localClassDeclarationStmt0.isUnparsableStmt());
      assertFalse(localClassDeclarationStmt0.isYieldStmt());
      assertFalse(localClassDeclarationStmt0.isLabeledStmt());
      assertFalse(localClassDeclarationStmt0.isEmptyStmt());
      assertFalse(localClassDeclarationStmt0.isAssertStmt());
      assertFalse(localClassDeclarationStmt0.isSwitchStmt());
      assertFalse(localClassDeclarationStmt0.isIfStmt());
      assertFalse(localClassDeclarationStmt0.isExpressionStmt());
      assertFalse(localClassDeclarationStmt0.isSynchronizedStmt());
      assertFalse(localClassDeclarationStmt0.isBlockStmt());
      assertFalse(localClassDeclarationStmt0.isWhileStmt());
      assertFalse(localClassDeclarationStmt0.isThrowStmt());
      assertFalse(localClassDeclarationStmt0.isReturnStmt());
      assertFalse(localClassDeclarationStmt0.isExplicitConstructorInvocationStmt());
      assertFalse(localClassDeclarationStmt0.isBreakStmt());
      assertFalse(localClassDeclarationStmt0.isLocalRecordDeclarationStmt());
      assertEquals(Node.Parsedness.PARSED, localClassDeclarationStmt0.getParsed());
      assertFalse(localClassDeclarationStmt0.isForEachStmt());
      assertFalse(localClassDeclarationStmt0.isContinueStmt());
      assertFalse(localClassDeclarationStmt0.isForStmt());
      assertFalse(localClassDeclarationStmt0.isTryStmt());
      assertTrue(localClassDeclarationStmt0.isLocalClassDeclarationStmt());
      assertNull(modelFieldBean0.getUseNull());
      assertNull(modelFieldBean0.getMapping());
      assertEquals("dDiHJf", modelFieldBean0.getName());
      assertNull(modelFieldBean0.getPersist());
      assertNull(modelFieldBean0.getCritical());
      assertNull(modelFieldBean0.getUnique());
      assertNull(modelFieldBean0.getDateFormat());
      assertNull(modelFieldBean0.getCalculate());
      assertTrue(modelFieldBean0.getAllowBlank());
      assertNull(modelFieldBean0.getConvert());
      assertNull(modelFieldBean0.getAllowNull());
      assertEquals("int", modelFieldBean0.getType());
      assertEquals(ModelType.INTEGER, modelFieldBean0.getModelType());
      
      AbstractValidation abstractValidation1 = AbstractValidation.createValidation(":GCaS!;L!oAMn/8~", modelValidation1, includeValidation1);
      assertNull(abstractValidation1);
      assertNotSame(includeValidation1, includeValidation0);
      assertFalse(includeValidation1.equals((Object)includeValidation0));
      
      String string1 = "";
      ModelValidation modelValidation2 = mock(ModelValidation.class, new ViolatedAssumptionAnswer());
      IncludeValidation includeValidation2 = IncludeValidation.ALL;
      AbstractValidation abstractValidation2 = AbstractValidation.createValidation("", modelValidation2, includeValidation2);
      assertNull(abstractValidation2);
      assertSame(includeValidation2, includeValidation0);
      assertNotSame(includeValidation2, includeValidation1);
      assertFalse(includeValidation2.equals((Object)includeValidation1));
      
      ModelBean modelBean0 = new ModelBean();
      assertNotNull(modelBean0);
      assertNull(modelBean0.getMessageProperty());
      assertNull(modelBean0.getReadMethod());
      assertNull(modelBean0.getUpdateMethod());
      assertFalse(modelBean0.isDisablePagingParameters());
      assertNull(modelBean0.getSuccessProperty());
      assertEquals("json", modelBean0.getReader());
      assertNull(modelBean0.getVersionProperty());
      assertNull(modelBean0.getWriteAllFields());
      assertTrue(modelBean0.isAutodetectTypes());
      assertFalse(modelBean0.isPaging());
      assertEquals("Ext.data.Model", modelBean0.getExtend());
      assertNull(modelBean0.getClientIdProperty());
      assertNull(modelBean0.getName());
      assertFalse(modelBean0.isClientIdPropertyAddToWriter());
      assertNull(modelBean0.getCreateMethod());
      assertNull(modelBean0.getIdProperty());
      assertNull(modelBean0.getIdentifier());
      assertEquals("json", modelBean0.getWriter());
      assertNull(modelBean0.getDestroyMethod());
      assertNull(modelBean0.getRootProperty());
      assertNull(modelBean0.getTotalProperty());
      
      Annotation annotation0 = mock(Annotation.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(annotation0).annotationType();
      OutputConfig outputConfig0 = new OutputConfig();
      assertNotNull(outputConfig0);
      assertNull(outputConfig0.getOutputFormat());
      assertNull(outputConfig0.getIncludeValidation());
      assertFalse(outputConfig0.isSurroundApiWithQuotes());
      assertFalse(outputConfig0.isUseSingleQuotes());
      assertNull(outputConfig0.getLineEnding());
      assertFalse(outputConfig0.isDebug());
      
      // Undeclared exception!
      try { 
        AbstractValidation.addValidationToModel(modelBean0, modelFieldBean0, annotation0, outputConfig0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("ch.rasc.extclassgenerator.validation.AbstractValidation", e);
      }
  }

  @Test(timeout = 4000000)
  public void test22()  throws Throwable  {
      IncludeValidation includeValidation0 = IncludeValidation.NONE;
      AbstractValidation abstractValidation0 = AbstractValidation.createValidation((String) null, (ModelValidation) null, includeValidation0);
      assertNull(abstractValidation0);
  }

  @Test(timeout = 4000000)
  public void test23()  throws Throwable  {
      ModelFieldBean modelFieldBean0 = new ModelFieldBean((String) null, (String) null);
      assertNotNull(modelFieldBean0);
      assertNull(modelFieldBean0.getUnique());
      assertNull(modelFieldBean0.getCritical());
      assertNull(modelFieldBean0.getCalculate());
      assertNull(modelFieldBean0.getAllowNull());
      assertNull(modelFieldBean0.getName());
      assertNull(modelFieldBean0.getDateFormat());
      assertNull(modelFieldBean0.getConvert());
      assertNull(modelFieldBean0.getAllowBlank());
      assertNull(modelFieldBean0.getPersist());
      assertNull(modelFieldBean0.getMapping());
      assertNull(modelFieldBean0.getUseNull());
      assertNull(modelFieldBean0.getModelType());
      assertNull(modelFieldBean0.getType());
      
      Class<Annotation> class0 = Annotation.class;
      Annotation annotation0 = mock(Annotation.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(annotation0).annotationType();
      OutputConfig outputConfig0 = new OutputConfig();
      assertNotNull(outputConfig0);
      assertNull(outputConfig0.getLineEnding());
      assertFalse(outputConfig0.isUseSingleQuotes());
      assertNull(outputConfig0.getOutputFormat());
      assertFalse(outputConfig0.isDebug());
      assertFalse(outputConfig0.isSurroundApiWithQuotes());
      assertNull(outputConfig0.getIncludeValidation());
      
      AbstractValidation.addValidationToModel((ModelBean) null, modelFieldBean0, annotation0, outputConfig0);
      assertNull(modelFieldBean0.getUnique());
      assertNull(modelFieldBean0.getCritical());
      assertNull(modelFieldBean0.getCalculate());
      assertNull(modelFieldBean0.getAllowNull());
      assertNull(modelFieldBean0.getName());
      assertNull(modelFieldBean0.getDateFormat());
      assertNull(modelFieldBean0.getConvert());
      assertNull(modelFieldBean0.getAllowBlank());
      assertNull(modelFieldBean0.getPersist());
      assertNull(modelFieldBean0.getMapping());
      assertNull(modelFieldBean0.getUseNull());
      assertNull(modelFieldBean0.getModelType());
      assertNull(modelFieldBean0.getType());
      assertNull(outputConfig0.getLineEnding());
      assertFalse(outputConfig0.isUseSingleQuotes());
      assertNull(outputConfig0.getOutputFormat());
      assertFalse(outputConfig0.isDebug());
      assertFalse(outputConfig0.isSurroundApiWithQuotes());
      assertNull(outputConfig0.getIncludeValidation());
  }

  @Test(timeout = 4000000)
  public void test24()  throws Throwable  {
      IncludeValidation includeValidation0 = IncludeValidation.NONE;
      ModelValidation modelValidation0 = mock(ModelValidation.class, new ViolatedAssumptionAnswer());
      doReturn((ModelValidationType) null).when(modelValidation0).value();
      AbstractValidation abstractValidation0 = AbstractValidation.createValidation("z,rS)6c(4U", modelValidation0, includeValidation0);
      assertNull(abstractValidation0);
  }

  @Test(timeout = 4000000)
  public void test25()  throws Throwable  {
      ModelFieldBean modelFieldBean0 = new ModelFieldBean((String) null, (String) null);
      assertNotNull(modelFieldBean0);
      assertNull(modelFieldBean0.getType());
      assertNull(modelFieldBean0.getDateFormat());
      assertNull(modelFieldBean0.getAllowBlank());
      assertNull(modelFieldBean0.getAllowNull());
      assertNull(modelFieldBean0.getName());
      assertNull(modelFieldBean0.getPersist());
      assertNull(modelFieldBean0.getCalculate());
      assertNull(modelFieldBean0.getCritical());
      assertNull(modelFieldBean0.getUseNull());
      assertNull(modelFieldBean0.getUnique());
      assertNull(modelFieldBean0.getConvert());
      assertNull(modelFieldBean0.getMapping());
      assertNull(modelFieldBean0.getModelType());
      
      Class<Annotation> class0 = Annotation.class;
      Annotation annotation0 = mock(Annotation.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(annotation0).annotationType();
      OutputConfig outputConfig0 = new OutputConfig();
      assertNotNull(outputConfig0);
      assertFalse(outputConfig0.isDebug());
      assertFalse(outputConfig0.isSurroundApiWithQuotes());
      assertFalse(outputConfig0.isUseSingleQuotes());
      assertNull(outputConfig0.getIncludeValidation());
      assertNull(outputConfig0.getLineEnding());
      assertNull(outputConfig0.getOutputFormat());
      
      IncludeValidation includeValidation0 = IncludeValidation.ALL;
      outputConfig0.setIncludeValidation(includeValidation0);
      assertFalse(outputConfig0.isDebug());
      assertFalse(outputConfig0.isSurroundApiWithQuotes());
      assertEquals(IncludeValidation.ALL, outputConfig0.getIncludeValidation());
      assertFalse(outputConfig0.isUseSingleQuotes());
      assertNull(outputConfig0.getLineEnding());
      assertNull(outputConfig0.getOutputFormat());
      
      ModelBean modelBean0 = new ModelBean();
      assertNotNull(modelBean0);
      assertNull(modelBean0.getVersionProperty());
      assertFalse(modelBean0.isPaging());
      assertFalse(modelBean0.isDisablePagingParameters());
      assertNull(modelBean0.getMessageProperty());
      assertNull(modelBean0.getWriteAllFields());
      assertNull(modelBean0.getReadMethod());
      assertNull(modelBean0.getUpdateMethod());
      assertEquals("json", modelBean0.getReader());
      assertNull(modelBean0.getSuccessProperty());
      assertTrue(modelBean0.isAutodetectTypes());
      assertNull(modelBean0.getClientIdProperty());
      assertEquals("Ext.data.Model", modelBean0.getExtend());
      assertFalse(modelBean0.isClientIdPropertyAddToWriter());
      assertNull(modelBean0.getDestroyMethod());
      assertNull(modelBean0.getTotalProperty());
      assertNull(modelBean0.getName());
      assertNull(modelBean0.getCreateMethod());
      assertNull(modelBean0.getIdProperty());
      assertEquals("json", modelBean0.getWriter());
      assertNull(modelBean0.getRootProperty());
      assertNull(modelBean0.getIdentifier());
      
      AbstractValidation.addValidationToModel(modelBean0, modelFieldBean0, annotation0, outputConfig0);
      assertNull(modelFieldBean0.getType());
      assertNull(modelFieldBean0.getDateFormat());
      assertNull(modelFieldBean0.getAllowBlank());
      assertNull(modelFieldBean0.getAllowNull());
      assertNull(modelFieldBean0.getName());
      assertNull(modelFieldBean0.getPersist());
      assertNull(modelFieldBean0.getCalculate());
      assertNull(modelFieldBean0.getCritical());
      assertNull(modelFieldBean0.getUseNull());
      assertNull(modelFieldBean0.getUnique());
      assertNull(modelFieldBean0.getConvert());
      assertNull(modelFieldBean0.getMapping());
      assertNull(modelFieldBean0.getModelType());
      assertFalse(outputConfig0.isDebug());
      assertFalse(outputConfig0.isSurroundApiWithQuotes());
      assertEquals(IncludeValidation.ALL, outputConfig0.getIncludeValidation());
      assertFalse(outputConfig0.isUseSingleQuotes());
      assertNull(outputConfig0.getLineEnding());
      assertNull(outputConfig0.getOutputFormat());
      assertNull(modelBean0.getVersionProperty());
      assertFalse(modelBean0.isPaging());
      assertFalse(modelBean0.isDisablePagingParameters());
      assertNull(modelBean0.getMessageProperty());
      assertNull(modelBean0.getWriteAllFields());
      assertNull(modelBean0.getReadMethod());
      assertNull(modelBean0.getUpdateMethod());
      assertEquals("json", modelBean0.getReader());
      assertNull(modelBean0.getSuccessProperty());
      assertTrue(modelBean0.isAutodetectTypes());
      assertNull(modelBean0.getClientIdProperty());
      assertEquals("Ext.data.Model", modelBean0.getExtend());
      assertFalse(modelBean0.isClientIdPropertyAddToWriter());
      assertNull(modelBean0.getDestroyMethod());
      assertNull(modelBean0.getTotalProperty());
      assertNull(modelBean0.getName());
      assertNull(modelBean0.getCreateMethod());
      assertNull(modelBean0.getIdProperty());
      assertEquals("json", modelBean0.getWriter());
      assertNull(modelBean0.getRootProperty());
      assertNull(modelBean0.getIdentifier());
  }

  @Test(timeout = 4000000)
  public void test26()  throws Throwable  {
      ModelValidation modelValidation0 = mock(ModelValidation.class, new ViolatedAssumptionAnswer());
      doReturn((ModelValidationType) null).when(modelValidation0).value();
      IncludeValidation includeValidation0 = IncludeValidation.ALL;
      // Undeclared exception!
      try { 
        AbstractValidation.createValidation("s%:%Vwg4),Y", modelValidation0, includeValidation0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("ch.rasc.extclassgenerator.validation.AbstractValidation", e);
      }
  }

  @Test(timeout = 4000000)
  public void test27()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      assertNotNull(hashMap0);
      
      Object object0 = hashMap0.put((String) null, (Object) null);
      assertNull(object0);
      
      Object object1 = hashMap0.remove((Object) null);
      assertNull(object1);
      
      GenericValidation genericValidation0 = new GenericValidation((String) null, "Z +UnR`_}JPej", hashMap0);
      assertNotNull(genericValidation0);
      assertNull(genericValidation0.getType());
      assertEquals("Z +UnR`_}JPej", genericValidation0.getField());
      
      ModelValidation modelValidation0 = mock(ModelValidation.class, new ViolatedAssumptionAnswer());
      IncludeValidation includeValidation0 = IncludeValidation.NONE;
      AbstractValidation abstractValidation0 = AbstractValidation.createValidation((String) null, modelValidation0, includeValidation0);
      assertNull(abstractValidation0);
      
      Map<String, Object> map0 = genericValidation0.getOptions();
      assertNotNull(map0);
      assertNull(genericValidation0.getType());
      assertEquals("Z +UnR`_}JPej", genericValidation0.getField());
      assertTrue(map0.isEmpty());
      assertEquals(0, map0.size());
  }

  @Test(timeout = 4000000)
  public void test28()  throws Throwable  {
      ModelValidationType modelValidationType0 = ModelValidationType.DIGITS;
      ModelValidation modelValidation0 = mock(ModelValidation.class, new ViolatedAssumptionAnswer());
      doReturn((ModelValidationParameter[]) null).when(modelValidation0).parameters();
      doReturn(modelValidationType0).when(modelValidation0).value();
      IncludeValidation includeValidation0 = IncludeValidation.ALL;
      AbstractValidation abstractValidation0 = AbstractValidation.createValidation("s%:%Vwg4),Y", modelValidation0, includeValidation0);
      assertNull(abstractValidation0);
  }

  @Test(timeout = 4000000)
  public void test29()  throws Throwable  {
      ModelValidationType modelValidationType0 = ModelValidationType.EMAIL;
      ModelValidation modelValidation0 = mock(ModelValidation.class, new ViolatedAssumptionAnswer());
      doReturn(modelValidationType0).when(modelValidation0).value();
      IncludeValidation includeValidation0 = IncludeValidation.ALL;
      AbstractValidation abstractValidation0 = AbstractValidation.createValidation("UzgD`EA#'7dvV-}9", modelValidation0, includeValidation0);
      assertNotNull(abstractValidation0);
      assertEquals("UzgD`EA#'7dvV-}9", abstractValidation0.getField());
      assertEquals("email", abstractValidation0.getType());
  }

  @Test(timeout = 4000000)
  public void test30()  throws Throwable  {
      IncludeValidation includeValidation0 = IncludeValidation.ALL;
      // Undeclared exception!
      try { 
        AbstractValidation.createValidation(">oo4v+9+(8:&8G'bMG", (ModelValidation) null, includeValidation0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("ch.rasc.extclassgenerator.validation.AbstractValidation", e);
      }
  }

  @Test(timeout = 4000000)
  public void test31()  throws Throwable  {
      String string0 = "f*iZi|";
      ModelValidationType modelValidationType0 = ModelValidationType.RANGE;
      ModelValidation modelValidation0 = mock(ModelValidation.class, new ViolatedAssumptionAnswer());
      doReturn(modelValidationType0).when(modelValidation0).value();
      IncludeValidation includeValidation0 = IncludeValidation.BUILTIN;
      AbstractValidation abstractValidation0 = AbstractValidation.createValidation("f*iZi|", modelValidation0, includeValidation0);
      assertNull(abstractValidation0);
      
      String string1 = "SELECTOR";
      ModelValidation modelValidation1 = mock(ModelValidation.class, new ViolatedAssumptionAnswer());
      doReturn((ModelValidationType) null).when(modelValidation1).value();
      // Undeclared exception!
      try { 
        AbstractValidation.createValidation("SELECTOR", modelValidation1, includeValidation0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("ch.rasc.extclassgenerator.validation.AbstractValidation", e);
      }
  }

  @Test(timeout = 4000000)
  public void test32()  throws Throwable  {
      PresenceValidation presenceValidation0 = new PresenceValidation("s%:%Vwg4),Y");
      assertNotNull(presenceValidation0);
      assertEquals("presence", presenceValidation0.getType());
      assertEquals("s%:%Vwg4),Y", presenceValidation0.getField());
      
      String string0 = presenceValidation0.getType();
      assertNotNull(string0);
      assertEquals("presence", string0);
      assertEquals("presence", presenceValidation0.getType());
      assertEquals("s%:%Vwg4),Y", presenceValidation0.getField());
  }

  @Test(timeout = 4000000)
  public void test33()  throws Throwable  {
      PresenceValidation presenceValidation0 = new PresenceValidation(">ooh=+9+(8:&8G'bMG");
      assertNotNull(presenceValidation0);
      assertEquals(">ooh=+9+(8:&8G'bMG", presenceValidation0.getField());
      assertEquals("presence", presenceValidation0.getType());
      
      ModelValidation modelValidation0 = mock(ModelValidation.class, new ViolatedAssumptionAnswer());
      ModelBean modelBean0 = new ModelBean();
      assertNotNull(modelBean0);
      assertFalse(modelBean0.isDisablePagingParameters());
      assertNull(modelBean0.getSuccessProperty());
      assertFalse(modelBean0.isPaging());
      assertNull(modelBean0.getMessageProperty());
      assertNull(modelBean0.getClientIdProperty());
      assertNull(modelBean0.getVersionProperty());
      assertNull(modelBean0.getWriteAllFields());
      assertNull(modelBean0.getIdProperty());
      assertTrue(modelBean0.isAutodetectTypes());
      assertEquals("json", modelBean0.getReader());
      assertNull(modelBean0.getUpdateMethod());
      assertEquals("Ext.data.Model", modelBean0.getExtend());
      assertNull(modelBean0.getReadMethod());
      assertNull(modelBean0.getCreateMethod());
      assertFalse(modelBean0.isClientIdPropertyAddToWriter());
      assertNull(modelBean0.getName());
      assertNull(modelBean0.getTotalProperty());
      assertNull(modelBean0.getRootProperty());
      assertNull(modelBean0.getDestroyMethod());
      assertNull(modelBean0.getIdentifier());
      assertEquals("json", modelBean0.getWriter());
      
      modelBean0.setTotalProperty("Classes related to Java security cannot be proxied: ");
      assertFalse(modelBean0.isDisablePagingParameters());
      assertNull(modelBean0.getSuccessProperty());
      assertFalse(modelBean0.isPaging());
      assertNull(modelBean0.getMessageProperty());
      assertNull(modelBean0.getClientIdProperty());
      assertNull(modelBean0.getVersionProperty());
      assertNull(modelBean0.getWriteAllFields());
      assertEquals("Classes related to Java security cannot be proxied: ", modelBean0.getTotalProperty());
      assertNull(modelBean0.getIdProperty());
      assertTrue(modelBean0.isAutodetectTypes());
      assertEquals("json", modelBean0.getReader());
      assertNull(modelBean0.getUpdateMethod());
      assertEquals("Ext.data.Model", modelBean0.getExtend());
      assertNull(modelBean0.getReadMethod());
      assertNull(modelBean0.getCreateMethod());
      assertFalse(modelBean0.isClientIdPropertyAddToWriter());
      assertNull(modelBean0.getName());
      assertNull(modelBean0.getRootProperty());
      assertNull(modelBean0.getDestroyMethod());
      assertNull(modelBean0.getIdentifier());
      assertEquals("json", modelBean0.getWriter());
      
      ModelValidationType modelValidationType0 = ModelValidationType.CREDITCARDNUMBER;
      ModelValidation modelValidation1 = mock(ModelValidation.class, new ViolatedAssumptionAnswer());
      doReturn(modelValidationType0).when(modelValidation1).value();
      IncludeValidation includeValidation0 = IncludeValidation.NONE;
      AbstractValidation abstractValidation0 = AbstractValidation.createValidation("ch.rasc.extclassgenerator.validation.RangeValidation", modelValidation1, includeValidation0);
      assertNull(abstractValidation0);
      
      ModelValidation modelValidation2 = mock(ModelValidation.class, new ViolatedAssumptionAnswer());
      doReturn(modelValidationType0).when(modelValidation2).value();
      IncludeValidation includeValidation1 = IncludeValidation.ALL;
      AbstractValidation abstractValidation1 = AbstractValidation.createValidation(">ooh=+9+(8:&8G'bMG", modelValidation2, includeValidation1);
      assertNotNull(abstractValidation1);
      assertNotSame(includeValidation1, includeValidation0);
      assertFalse(includeValidation1.equals((Object)includeValidation0));
      assertEquals(">ooh=+9+(8:&8G'bMG", abstractValidation1.getField());
      assertEquals("creditCardNumber", abstractValidation1.getType());
      
      PresenceValidation presenceValidation1 = new PresenceValidation("IYZN5[&");
      assertNotNull(presenceValidation1);
      assertFalse(presenceValidation1.equals((Object)presenceValidation0));
      assertEquals("IYZN5[&", presenceValidation1.getField());
      assertEquals("presence", presenceValidation1.getType());
      
      BigDecimal bigDecimal0 = new BigDecimal(0.0);
      assertNotNull(bigDecimal0);
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      
      InclusionValidation inclusionValidation0 = new InclusionValidation("Classes related to Java security cannot be proxied: ", "]dtJ3=");
      assertNotNull(inclusionValidation0);
      assertEquals("]dtJ3=", inclusionValidation0.getList());
      assertEquals("Classes related to Java security cannot be proxied: ", inclusionValidation0.getField());
      assertEquals("inclusion", inclusionValidation0.getType());
      
      String string0 = inclusionValidation0.getList();
      assertNotNull(string0);
      assertEquals("]dtJ3=", string0);
      assertEquals("]dtJ3=", inclusionValidation0.getList());
      assertEquals("Classes related to Java security cannot be proxied: ", inclusionValidation0.getField());
      assertEquals("inclusion", inclusionValidation0.getType());
  }

  @Test(timeout = 4000000)
  public void test34()  throws Throwable  {
      FutureValidation futureValidation0 = new FutureValidation("q");
      assertNotNull(futureValidation0);
      assertEquals("q", futureValidation0.getField());
      assertEquals("future", futureValidation0.getType());
      
      ModelBean modelBean0 = new ModelBean();
      assertNotNull(modelBean0);
      assertFalse(modelBean0.isClientIdPropertyAddToWriter());
      assertNull(modelBean0.getTotalProperty());
      assertNull(modelBean0.getDestroyMethod());
      assertNull(modelBean0.getCreateMethod());
      assertNull(modelBean0.getName());
      assertNull(modelBean0.getIdProperty());
      assertEquals("json", modelBean0.getWriter());
      assertNull(modelBean0.getReadMethod());
      assertFalse(modelBean0.isDisablePagingParameters());
      assertNull(modelBean0.getIdentifier());
      assertNull(modelBean0.getMessageProperty());
      assertNull(modelBean0.getRootProperty());
      assertNull(modelBean0.getClientIdProperty());
      assertEquals("Ext.data.Model", modelBean0.getExtend());
      assertNull(modelBean0.getSuccessProperty());
      assertTrue(modelBean0.isAutodetectTypes());
      assertFalse(modelBean0.isPaging());
      assertNull(modelBean0.getWriteAllFields());
      assertNull(modelBean0.getUpdateMethod());
      assertEquals("json", modelBean0.getReader());
      assertNull(modelBean0.getVersionProperty());
      
      String string0 = "KE8Q}0P>y52Ea";
      ModelType modelType0 = ModelType.STRING;
      ModelFieldBean modelFieldBean0 = new ModelFieldBean("KE8Q}0P>y52Ea", modelType0);
      assertNotNull(modelFieldBean0);
      assertNull(modelFieldBean0.getAllowNull());
      assertNull(modelFieldBean0.getCalculate());
      assertNull(modelFieldBean0.getUnique());
      assertEquals("KE8Q}0P>y52Ea", modelFieldBean0.getName());
      assertNull(modelFieldBean0.getPersist());
      assertEquals("string", modelFieldBean0.getType());
      assertNull(modelFieldBean0.getAllowBlank());
      assertNull(modelFieldBean0.getUseNull());
      assertNull(modelFieldBean0.getMapping());
      assertNull(modelFieldBean0.getConvert());
      assertEquals(ModelType.STRING, modelFieldBean0.getModelType());
      assertNull(modelFieldBean0.getDateFormat());
      assertNull(modelFieldBean0.getCritical());
      
      Annotation annotation0 = mock(Annotation.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(annotation0).annotationType();
      // Undeclared exception!
      try { 
        AbstractValidation.addValidationToModel(modelBean0, modelFieldBean0, annotation0, (OutputConfig) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("ch.rasc.extclassgenerator.validation.AbstractValidation", e);
      }
  }

  @Test(timeout = 4000000)
  public void test35()  throws Throwable  {
      ModelValidation modelValidation0 = mock(ModelValidation.class, new ViolatedAssumptionAnswer());
      doReturn((ModelValidationType) null).when(modelValidation0).value();
      IncludeValidation includeValidation0 = IncludeValidation.BUILTIN;
      // Undeclared exception!
      try { 
        AbstractValidation.createValidation("max", modelValidation0, includeValidation0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("ch.rasc.extclassgenerator.validation.AbstractValidation", e);
      }
  }

  @Test(timeout = 4000000)
  public void test36()  throws Throwable  {
      CreditCardNumberValidation creditCardNumberValidation0 = new CreditCardNumberValidation("max");
      assertNotNull(creditCardNumberValidation0);
      assertEquals("max", creditCardNumberValidation0.getField());
      assertEquals("creditCardNumber", creditCardNumberValidation0.getType());
      
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      ModelType modelType0 = ModelType.INTEGER;
      ModelFieldBean modelFieldBean0 = new ModelFieldBean("dDiHJf", modelType0);
      assertNotNull(modelFieldBean0);
      assertEquals("int", modelFieldBean0.getType());
      assertNull(modelFieldBean0.getDateFormat());
      assertNull(modelFieldBean0.getMapping());
      assertNull(modelFieldBean0.getUseNull());
      assertEquals("dDiHJf", modelFieldBean0.getName());
      assertNull(modelFieldBean0.getConvert());
      assertNull(modelFieldBean0.getUnique());
      assertNull(modelFieldBean0.getCalculate());
      assertNull(modelFieldBean0.getCritical());
      assertNull(modelFieldBean0.getPersist());
      assertNull(modelFieldBean0.getAllowNull());
      assertNull(modelFieldBean0.getAllowBlank());
      assertEquals(ModelType.INTEGER, modelFieldBean0.getModelType());
      
      List<String> list0 = modelFieldBean0.getDepends();
      assertNull(list0);
      assertEquals("int", modelFieldBean0.getType());
      assertNull(modelFieldBean0.getDateFormat());
      assertNull(modelFieldBean0.getMapping());
      assertNull(modelFieldBean0.getUseNull());
      assertEquals("dDiHJf", modelFieldBean0.getName());
      assertNull(modelFieldBean0.getConvert());
      assertNull(modelFieldBean0.getUnique());
      assertNull(modelFieldBean0.getCalculate());
      assertNull(modelFieldBean0.getCritical());
      assertNull(modelFieldBean0.getPersist());
      assertNull(modelFieldBean0.getAllowNull());
      assertNull(modelFieldBean0.getAllowBlank());
      assertEquals(ModelType.INTEGER, modelFieldBean0.getModelType());
      
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      List<String> list1 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) null, locale_FilteringMode0);
      assertNotNull(list1);
      assertFalse(list1.contains("dDiHJf"));
      assertEquals(0, linkedList0.size());
      assertEquals(0, list1.size());
      assertTrue(list1.isEmpty());
      
      InclusionValidationArray inclusionValidationArray0 = new InclusionValidationArray("dDiHJf", list1);
      assertNotNull(inclusionValidationArray0);
      assertFalse(list1.contains("dDiHJf"));
      assertEquals(0, linkedList0.size());
      assertEquals(0, list1.size());
      assertTrue(list1.isEmpty());
      assertEquals("dDiHJf", inclusionValidationArray0.getField());
      assertEquals("inclusion", inclusionValidationArray0.getType());
      
      List<String> list2 = inclusionValidationArray0.getList();
      assertNotNull(list2);
      assertFalse(list1.contains("dDiHJf"));
      assertFalse(list2.contains("dDiHJf"));
      assertSame(list1, list2);
      assertSame(list2, list1);
      assertEquals(0, linkedList0.size());
      assertEquals(0, list1.size());
      assertTrue(list1.isEmpty());
      assertEquals("dDiHJf", inclusionValidationArray0.getField());
      assertEquals("inclusion", inclusionValidationArray0.getType());
      assertEquals(0, list2.size());
      assertTrue(list2.isEmpty());
      
      ModelValidationType modelValidationType0 = ModelValidationType.CREDITCARDNUMBER;
      ModelValidationParameter[] modelValidationParameterArray0 = new ModelValidationParameter[0];
      ModelValidation modelValidation0 = mock(ModelValidation.class, new ViolatedAssumptionAnswer());
      doReturn(modelValidationType0).when(modelValidation0).value();
      IncludeValidation includeValidation0 = IncludeValidation.ALL;
      AbstractValidation abstractValidation0 = AbstractValidation.createValidation(":GCaS!;L!oAMn/8~", modelValidation0, includeValidation0);
      assertNotNull(abstractValidation0);
      assertNotSame(abstractValidation0, creditCardNumberValidation0);
      assertFalse(abstractValidation0.equals((Object)creditCardNumberValidation0));
      assertEquals(":GCaS!;L!oAMn/8~", abstractValidation0.getField());
      assertEquals("creditCardNumber", abstractValidation0.getType());
      
      ModelValidationType modelValidationType1 = ModelValidationType.NOTBLANK;
      ModelValidation modelValidation1 = mock(ModelValidation.class, new ViolatedAssumptionAnswer());
      doReturn(modelValidationType1).when(modelValidation1).value();
      ObjectIdentityEqualsVisitor objectIdentityEqualsVisitor0 = new ObjectIdentityEqualsVisitor();
      assertNotNull(objectIdentityEqualsVisitor0);
      
      LocalClassDeclarationStmt localClassDeclarationStmt0 = new LocalClassDeclarationStmt();
      assertNotNull(localClassDeclarationStmt0);
      assertEquals((-1), Node.ABSOLUTE_BEGIN_LINE);
      assertEquals((-2), Node.ABSOLUTE_END_LINE);
      assertFalse(localClassDeclarationStmt0.isBreakStmt());
      assertFalse(localClassDeclarationStmt0.isTryStmt());
      assertFalse(localClassDeclarationStmt0.isSwitchStmt());
      assertFalse(localClassDeclarationStmt0.isSynchronizedStmt());
      assertFalse(localClassDeclarationStmt0.isReturnStmt());
      assertFalse(localClassDeclarationStmt0.isLocalRecordDeclarationStmt());
      assertFalse(localClassDeclarationStmt0.isThrowStmt());
      assertTrue(localClassDeclarationStmt0.isLocalClassDeclarationStmt());
      assertFalse(localClassDeclarationStmt0.isDoStmt());
      assertFalse(localClassDeclarationStmt0.isExplicitConstructorInvocationStmt());
      assertFalse(localClassDeclarationStmt0.isForEachStmt());
      assertFalse(localClassDeclarationStmt0.isContinueStmt());
      assertFalse(localClassDeclarationStmt0.isIfStmt());
      assertEquals(Node.Parsedness.PARSED, localClassDeclarationStmt0.getParsed());
      assertFalse(localClassDeclarationStmt0.isAssertStmt());
      assertFalse(localClassDeclarationStmt0.isForStmt());
      assertFalse(localClassDeclarationStmt0.isEmptyStmt());
      assertFalse(localClassDeclarationStmt0.isUnparsableStmt());
      assertFalse(localClassDeclarationStmt0.isYieldStmt());
      assertFalse(localClassDeclarationStmt0.isLabeledStmt());
      assertFalse(localClassDeclarationStmt0.isWhileStmt());
      assertFalse(localClassDeclarationStmt0.isBlockStmt());
      assertFalse(localClassDeclarationStmt0.isExpressionStmt());
      
      Optional<ExpressionStmt> optional0 = localClassDeclarationStmt0.toExpressionStmt();
      assertNotNull(optional0);
      assertEquals((-1), Node.ABSOLUTE_BEGIN_LINE);
      assertEquals((-2), Node.ABSOLUTE_END_LINE);
      assertFalse(localClassDeclarationStmt0.isBreakStmt());
      assertFalse(localClassDeclarationStmt0.isTryStmt());
      assertFalse(localClassDeclarationStmt0.isSwitchStmt());
      assertFalse(localClassDeclarationStmt0.isSynchronizedStmt());
      assertFalse(localClassDeclarationStmt0.isReturnStmt());
      assertFalse(localClassDeclarationStmt0.isLocalRecordDeclarationStmt());
      assertFalse(localClassDeclarationStmt0.isThrowStmt());
      assertTrue(localClassDeclarationStmt0.isLocalClassDeclarationStmt());
      assertFalse(localClassDeclarationStmt0.isDoStmt());
      assertFalse(localClassDeclarationStmt0.isExplicitConstructorInvocationStmt());
      assertFalse(localClassDeclarationStmt0.isForEachStmt());
      assertFalse(localClassDeclarationStmt0.isContinueStmt());
      assertFalse(localClassDeclarationStmt0.isIfStmt());
      assertEquals(Node.Parsedness.PARSED, localClassDeclarationStmt0.getParsed());
      assertFalse(localClassDeclarationStmt0.isAssertStmt());
      assertFalse(localClassDeclarationStmt0.isForStmt());
      assertFalse(localClassDeclarationStmt0.isEmptyStmt());
      assertFalse(localClassDeclarationStmt0.isUnparsableStmt());
      assertFalse(localClassDeclarationStmt0.isYieldStmt());
      assertFalse(localClassDeclarationStmt0.isLabeledStmt());
      assertFalse(localClassDeclarationStmt0.isWhileStmt());
      assertFalse(localClassDeclarationStmt0.isBlockStmt());
      assertFalse(localClassDeclarationStmt0.isExpressionStmt());
      
      Boolean boolean0 = objectIdentityEqualsVisitor0.visit(localClassDeclarationStmt0, (Visitable) localClassDeclarationStmt0);
      assertNotNull(boolean0);
      assertEquals((-1), Node.ABSOLUTE_BEGIN_LINE);
      assertEquals((-2), Node.ABSOLUTE_END_LINE);
      assertTrue(boolean0);
      assertFalse(localClassDeclarationStmt0.isBreakStmt());
      assertFalse(localClassDeclarationStmt0.isTryStmt());
      assertFalse(localClassDeclarationStmt0.isSwitchStmt());
      assertFalse(localClassDeclarationStmt0.isSynchronizedStmt());
      assertFalse(localClassDeclarationStmt0.isReturnStmt());
      assertFalse(localClassDeclarationStmt0.isLocalRecordDeclarationStmt());
      assertFalse(localClassDeclarationStmt0.isThrowStmt());
      assertTrue(localClassDeclarationStmt0.isLocalClassDeclarationStmt());
      assertFalse(localClassDeclarationStmt0.isDoStmt());
      assertFalse(localClassDeclarationStmt0.isExplicitConstructorInvocationStmt());
      assertFalse(localClassDeclarationStmt0.isForEachStmt());
      assertFalse(localClassDeclarationStmt0.isContinueStmt());
      assertFalse(localClassDeclarationStmt0.isIfStmt());
      assertEquals(Node.Parsedness.PARSED, localClassDeclarationStmt0.getParsed());
      assertFalse(localClassDeclarationStmt0.isAssertStmt());
      assertFalse(localClassDeclarationStmt0.isForStmt());
      assertFalse(localClassDeclarationStmt0.isEmptyStmt());
      assertFalse(localClassDeclarationStmt0.isUnparsableStmt());
      assertFalse(localClassDeclarationStmt0.isYieldStmt());
      assertFalse(localClassDeclarationStmt0.isLabeledStmt());
      assertFalse(localClassDeclarationStmt0.isWhileStmt());
      assertFalse(localClassDeclarationStmt0.isBlockStmt());
      assertFalse(localClassDeclarationStmt0.isExpressionStmt());
      
      modelFieldBean0.setAllowBlank(boolean0);
      assertEquals((-1), Node.ABSOLUTE_BEGIN_LINE);
      assertEquals((-2), Node.ABSOLUTE_END_LINE);
      assertFalse(localClassDeclarationStmt0.isBreakStmt());
      assertFalse(localClassDeclarationStmt0.isTryStmt());
      assertFalse(localClassDeclarationStmt0.isSwitchStmt());
      assertFalse(localClassDeclarationStmt0.isSynchronizedStmt());
      assertFalse(localClassDeclarationStmt0.isReturnStmt());
      assertFalse(localClassDeclarationStmt0.isLocalRecordDeclarationStmt());
      assertFalse(localClassDeclarationStmt0.isThrowStmt());
      assertTrue(localClassDeclarationStmt0.isLocalClassDeclarationStmt());
      assertFalse(localClassDeclarationStmt0.isDoStmt());
      assertFalse(localClassDeclarationStmt0.isExplicitConstructorInvocationStmt());
      assertFalse(localClassDeclarationStmt0.isForEachStmt());
      assertFalse(localClassDeclarationStmt0.isContinueStmt());
      assertFalse(localClassDeclarationStmt0.isIfStmt());
      assertEquals(Node.Parsedness.PARSED, localClassDeclarationStmt0.getParsed());
      assertFalse(localClassDeclarationStmt0.isAssertStmt());
      assertFalse(localClassDeclarationStmt0.isForStmt());
      assertFalse(localClassDeclarationStmt0.isEmptyStmt());
      assertFalse(localClassDeclarationStmt0.isUnparsableStmt());
      assertFalse(localClassDeclarationStmt0.isYieldStmt());
      assertFalse(localClassDeclarationStmt0.isLabeledStmt());
      assertFalse(localClassDeclarationStmt0.isWhileStmt());
      assertFalse(localClassDeclarationStmt0.isBlockStmt());
      assertFalse(localClassDeclarationStmt0.isExpressionStmt());
      assertEquals("int", modelFieldBean0.getType());
      assertNull(modelFieldBean0.getDateFormat());
      assertNull(modelFieldBean0.getMapping());
      assertNull(modelFieldBean0.getUseNull());
      assertEquals("dDiHJf", modelFieldBean0.getName());
      assertTrue(modelFieldBean0.getAllowBlank());
      assertNull(modelFieldBean0.getConvert());
      assertNull(modelFieldBean0.getUnique());
      assertNull(modelFieldBean0.getCalculate());
      assertNull(modelFieldBean0.getCritical());
      assertNull(modelFieldBean0.getPersist());
      assertNull(modelFieldBean0.getAllowNull());
      assertEquals(ModelType.INTEGER, modelFieldBean0.getModelType());
      
      AbstractValidation abstractValidation1 = AbstractValidation.createValidation(":GCaS!;L!oAMn/8~", modelValidation1, includeValidation0);
      assertNotNull(abstractValidation1);
      assertFalse(modelValidationType1.equals((Object)modelValidationType0));
      assertEquals("notBlank", abstractValidation1.getType());
      assertEquals(":GCaS!;L!oAMn/8~", abstractValidation1.getField());
      
      ModelValidation modelValidation2 = mock(ModelValidation.class, new ViolatedAssumptionAnswer());
      AbstractValidation abstractValidation2 = AbstractValidation.createValidation("", modelValidation2, includeValidation0);
      assertNull(abstractValidation2);
      
      ModelBean modelBean0 = new ModelBean();
      assertNotNull(modelBean0);
      assertNull(modelBean0.getCreateMethod());
      assertNull(modelBean0.getUpdateMethod());
      assertEquals("json", modelBean0.getReader());
      assertTrue(modelBean0.isAutodetectTypes());
      assertNull(modelBean0.getReadMethod());
      assertFalse(modelBean0.isClientIdPropertyAddToWriter());
      assertNull(modelBean0.getClientIdProperty());
      assertEquals("Ext.data.Model", modelBean0.getExtend());
      assertNull(modelBean0.getWriteAllFields());
      assertNull(modelBean0.getIdentifier());
      assertNull(modelBean0.getRootProperty());
      assertFalse(modelBean0.isDisablePagingParameters());
      assertNull(modelBean0.getVersionProperty());
      assertNull(modelBean0.getSuccessProperty());
      assertFalse(modelBean0.isPaging());
      assertNull(modelBean0.getMessageProperty());
      assertNull(modelBean0.getName());
      assertEquals("json", modelBean0.getWriter());
      assertNull(modelBean0.getDestroyMethod());
      assertNull(modelBean0.getTotalProperty());
      assertNull(modelBean0.getIdProperty());
      
      Class<Annotation> class0 = Annotation.class;
      Annotation annotation0 = mock(Annotation.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(annotation0).annotationType();
      OutputConfig outputConfig0 = new OutputConfig();
      assertNotNull(outputConfig0);
      assertNull(outputConfig0.getOutputFormat());
      assertNull(outputConfig0.getIncludeValidation());
      assertNull(outputConfig0.getLineEnding());
      assertFalse(outputConfig0.isUseSingleQuotes());
      assertFalse(outputConfig0.isDebug());
      assertFalse(outputConfig0.isSurroundApiWithQuotes());
      
      AbstractValidation.addValidationToModel(modelBean0, modelFieldBean0, annotation0, outputConfig0);
      assertEquals("int", modelFieldBean0.getType());
      assertNull(modelFieldBean0.getDateFormat());
      assertNull(modelFieldBean0.getMapping());
      assertNull(modelFieldBean0.getUseNull());
      assertEquals("dDiHJf", modelFieldBean0.getName());
      assertTrue(modelFieldBean0.getAllowBlank());
      assertNull(modelFieldBean0.getConvert());
      assertNull(modelFieldBean0.getUnique());
      assertNull(modelFieldBean0.getCalculate());
      assertNull(modelFieldBean0.getCritical());
      assertNull(modelFieldBean0.getPersist());
      assertNull(modelFieldBean0.getAllowNull());
      assertEquals(ModelType.INTEGER, modelFieldBean0.getModelType());
      assertNull(modelBean0.getCreateMethod());
      assertNull(modelBean0.getUpdateMethod());
      assertEquals("json", modelBean0.getReader());
      assertTrue(modelBean0.isAutodetectTypes());
      assertNull(modelBean0.getReadMethod());
      assertFalse(modelBean0.isClientIdPropertyAddToWriter());
      assertNull(modelBean0.getClientIdProperty());
      assertEquals("Ext.data.Model", modelBean0.getExtend());
      assertNull(modelBean0.getWriteAllFields());
      assertNull(modelBean0.getIdentifier());
      assertNull(modelBean0.getRootProperty());
      assertFalse(modelBean0.isDisablePagingParameters());
      assertNull(modelBean0.getVersionProperty());
      assertNull(modelBean0.getSuccessProperty());
      assertFalse(modelBean0.isPaging());
      assertNull(modelBean0.getMessageProperty());
      assertNull(modelBean0.getName());
      assertEquals("json", modelBean0.getWriter());
      assertNull(modelBean0.getDestroyMethod());
      assertNull(modelBean0.getTotalProperty());
      assertNull(modelBean0.getIdProperty());
      assertNull(outputConfig0.getOutputFormat());
      assertNull(outputConfig0.getIncludeValidation());
      assertNull(outputConfig0.getLineEnding());
      assertFalse(outputConfig0.isUseSingleQuotes());
      assertFalse(outputConfig0.isDebug());
      assertFalse(outputConfig0.isSurroundApiWithQuotes());
      
      InclusionValidation inclusionValidation0 = new InclusionValidation("", "dDiHJf");
      assertNotNull(inclusionValidation0);
      assertEquals("inclusion", inclusionValidation0.getType());
      assertEquals("dDiHJf", inclusionValidation0.getList());
      assertEquals("", inclusionValidation0.getField());
      
      String string0 = inclusionValidation0.getList();
      assertNotNull(string0);
      assertEquals("dDiHJf", string0);
      assertEquals("inclusion", inclusionValidation0.getType());
      assertEquals("dDiHJf", inclusionValidation0.getList());
      assertEquals("", inclusionValidation0.getField());
  }

  @Test(timeout = 4000000)
  public void test37()  throws Throwable  {
      ModelValidationType modelValidationType0 = ModelValidationType.FUTURE;
      ModelValidation modelValidation0 = mock(ModelValidation.class, new ViolatedAssumptionAnswer());
      doReturn(modelValidationType0).when(modelValidation0).value();
      IncludeValidation includeValidation0 = IncludeValidation.ALL;
      AbstractValidation abstractValidation0 = AbstractValidation.createValidation(">ooh=+9+(8:&8G'bMG", modelValidation0, includeValidation0);
      assertNotNull(abstractValidation0);
      assertEquals("future", abstractValidation0.getType());
      assertEquals(">ooh=+9+(8:&8G'bMG", abstractValidation0.getField());
  }

  @Test(timeout = 4000000)
  public void test38()  throws Throwable  {
      String string0 = "%S OFVM84H";
      DigitsValidation digitsValidation0 = new DigitsValidation("%S OFVM84H", 11, 0);
      assertNotNull(digitsValidation0);
      assertEquals("digits", digitsValidation0.getType());
      assertEquals("%S OFVM84H", digitsValidation0.getField());
      assertEquals(11, digitsValidation0.getInteger());
      assertEquals(0, digitsValidation0.getFraction());
      
      int int0 = digitsValidation0.getFraction();
      assertEquals(0, int0);
      assertEquals("digits", digitsValidation0.getType());
      assertEquals("%S OFVM84H", digitsValidation0.getField());
      assertEquals(11, digitsValidation0.getInteger());
      assertEquals(0, digitsValidation0.getFraction());
      
      ExclusionValidation exclusionValidation0 = new ExclusionValidation("Can't find native request in ", "Can't find native request in ");
      assertNotNull(exclusionValidation0);
      assertEquals("exclusion", exclusionValidation0.getType());
      assertEquals("Can't find native request in ", exclusionValidation0.getField());
      assertEquals("Can't find native request in ", exclusionValidation0.getList());
      
      ModelValidation modelValidation0 = mock(ModelValidation.class, new ViolatedAssumptionAnswer());
      doReturn((ModelValidationType) null).when(modelValidation0).value();
      IncludeValidation includeValidation0 = IncludeValidation.NONE;
      AbstractValidation abstractValidation0 = AbstractValidation.createValidation("%S OFVM84H", modelValidation0, includeValidation0);
      assertNull(abstractValidation0);
      
      String string1 = exclusionValidation0.getList();
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("Can't find native request in ", string1);
      assertEquals("exclusion", exclusionValidation0.getType());
      assertEquals("Can't find native request in ", exclusionValidation0.getField());
      assertEquals("Can't find native request in ", exclusionValidation0.getList());
      
      String string2 = exclusionValidation0.getList();
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertEquals("Can't find native request in ", string2);
      assertEquals("exclusion", exclusionValidation0.getType());
      assertEquals("Can't find native request in ", exclusionValidation0.getField());
      assertEquals("Can't find native request in ", exclusionValidation0.getList());
      
      ModelValidation modelValidation1 = mock(ModelValidation.class, new ViolatedAssumptionAnswer());
      doReturn((ModelValidationType) null).when(modelValidation1).value();
      IncludeValidation includeValidation1 = IncludeValidation.BUILTIN;
      // Undeclared exception!
      try { 
        AbstractValidation.createValidation("Can't find native request in ", modelValidation1, includeValidation1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("ch.rasc.extclassgenerator.validation.AbstractValidation", e);
      }
  }

  @Test(timeout = 4000000)
  public void test39()  throws Throwable  {
      IncludeValidation includeValidation0 = IncludeValidation.ALL;
      ModelValidationType modelValidationType0 = ModelValidationType.PAST;
      ModelValidation modelValidation0 = mock(ModelValidation.class, new ViolatedAssumptionAnswer());
      doReturn(modelValidationType0).when(modelValidation0).value();
      AbstractValidation abstractValidation0 = AbstractValidation.createValidation("org.hibernate.validator.constraints.NotEmpty", modelValidation0, includeValidation0);
      assertNotNull(abstractValidation0);
      assertEquals("org.hibernate.validator.constraints.NotEmpty", abstractValidation0.getField());
      assertEquals("past", abstractValidation0.getType());
  }

  @Test(timeout = 4000000)
  public void test40()  throws Throwable  {
      ModelFieldBean modelFieldBean0 = new ModelFieldBean("", "");
      assertNotNull(modelFieldBean0);
      assertNull(modelFieldBean0.getConvert());
      assertNull(modelFieldBean0.getAllowBlank());
      assertNull(modelFieldBean0.getDateFormat());
      assertNull(modelFieldBean0.getModelType());
      assertNull(modelFieldBean0.getPersist());
      assertNull(modelFieldBean0.getCritical());
      assertEquals("", modelFieldBean0.getName());
      assertNull(modelFieldBean0.getCalculate());
      assertNull(modelFieldBean0.getUnique());
      assertNull(modelFieldBean0.getAllowNull());
      assertNull(modelFieldBean0.getUseNull());
      assertNull(modelFieldBean0.getMapping());
      assertEquals("", modelFieldBean0.getType());
      
      OutputConfig outputConfig0 = new OutputConfig();
      assertNotNull(outputConfig0);
      assertFalse(outputConfig0.isDebug());
      assertNull(outputConfig0.getOutputFormat());
      assertFalse(outputConfig0.isSurroundApiWithQuotes());
      assertNull(outputConfig0.getLineEnding());
      assertFalse(outputConfig0.isUseSingleQuotes());
      assertNull(outputConfig0.getIncludeValidation());
      
      // Undeclared exception!
      try { 
        AbstractValidation.addValidationToModel((ModelBean) null, modelFieldBean0, (Annotation) null, outputConfig0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("ch.rasc.extclassgenerator.validation.AbstractValidation", e);
      }
  }

  @Test(timeout = 4000000)
  public void test41()  throws Throwable  {
      ModelValidationType modelValidationType0 = ModelValidationType.PRESENCE;
      ModelValidation modelValidation0 = mock(ModelValidation.class, new ViolatedAssumptionAnswer());
      doReturn(modelValidationType0).when(modelValidation0).value();
      IncludeValidation includeValidation0 = IncludeValidation.ALL;
      AbstractValidation abstractValidation0 = AbstractValidation.createValidation("org.hibernate.validator.constraints.NotEmpty", modelValidation0, includeValidation0);
      assertNotNull(abstractValidation0);
      assertEquals("org.hibernate.validator.constraints.NotEmpty", abstractValidation0.getField());
      assertEquals("presence", abstractValidation0.getType());
  }

  @Test(timeout = 4000000)
  public void test42()  throws Throwable  {
      ModelValidationType modelValidationType0 = ModelValidationType.EXCLUSION;
      String[] stringArray0 = new String[5];
      ModelValidation modelValidation0 = mock(ModelValidation.class, new ViolatedAssumptionAnswer());
      doReturn((Object) stringArray0, (Object) stringArray0, (Object) stringArray0).when(modelValidation0).exclusionOrInclusionList();
      doReturn(modelValidationType0).when(modelValidation0).value();
      IncludeValidation includeValidation0 = IncludeValidation.ALL;
      AbstractValidation abstractValidation0 = AbstractValidation.createValidation("f*iZi|", modelValidation0, includeValidation0);
      assertNotNull(abstractValidation0);
      assertEquals(5, stringArray0.length);
      assertEquals("exclusion", abstractValidation0.getType());
      assertEquals("f*iZi|", abstractValidation0.getField());
  }

  @Test(timeout = 4000000)
  public void test43()  throws Throwable  {
      ModelValidationType modelValidationType0 = ModelValidationType.PRESENCE;
      ModelValidation modelValidation0 = mock(ModelValidation.class, new ViolatedAssumptionAnswer());
      doReturn(modelValidationType0).when(modelValidation0).value();
      IncludeValidation includeValidation0 = IncludeValidation.BUILTIN;
      AbstractValidation abstractValidation0 = AbstractValidation.createValidation("org.hibernate.validator.constraints.NotEmpty", modelValidation0, includeValidation0);
      assertNotNull(abstractValidation0);
      assertEquals("presence", abstractValidation0.getType());
      assertEquals("org.hibernate.validator.constraints.NotEmpty", abstractValidation0.getField());
      
      ModelValidationType modelValidationType1 = ModelValidationType.EMAIL;
      ModelValidation modelValidation1 = mock(ModelValidation.class, new ViolatedAssumptionAnswer());
      doReturn(modelValidationType1).when(modelValidation1).value();
      IncludeValidation includeValidation1 = IncludeValidation.BUILTIN;
      AbstractValidation abstractValidation1 = AbstractValidation.createValidation("org.hibernate.validator.constraints.NotEmpty", modelValidation1, includeValidation1);
      assertNotNull(abstractValidation1);
      assertSame(includeValidation1, includeValidation0);
      assertFalse(modelValidationType1.equals((Object)modelValidationType0));
      assertEquals("org.hibernate.validator.constraints.NotEmpty", abstractValidation1.getField());
      assertEquals("email", abstractValidation1.getType());
      
      Random.setNextRandom(126);
      ModelValidationType modelValidationType2 = ModelValidationType.RANGE;
      ModelValidation modelValidation2 = mock(ModelValidation.class, new ViolatedAssumptionAnswer());
      doReturn(modelValidationType2).when(modelValidation2).value();
      IncludeValidation includeValidation2 = IncludeValidation.BUILTIN;
      AbstractValidation abstractValidation2 = AbstractValidation.createValidation("org.hibernate.validator.constraints.NotEmpty", modelValidation2, includeValidation2);
      assertNull(abstractValidation2);
      assertSame(includeValidation2, includeValidation1);
      assertSame(includeValidation2, includeValidation0);
      assertFalse(modelValidationType2.equals((Object)modelValidationType1));
      assertFalse(modelValidationType2.equals((Object)modelValidationType0));
      
      ModelBean modelBean0 = new ModelBean();
      assertNotNull(modelBean0);
      assertNull(modelBean0.getClientIdProperty());
      assertNull(modelBean0.getReadMethod());
      assertNull(modelBean0.getMessageProperty());
      assertNull(modelBean0.getWriteAllFields());
      assertNull(modelBean0.getVersionProperty());
      assertNull(modelBean0.getUpdateMethod());
      assertEquals("json", modelBean0.getReader());
      assertNull(modelBean0.getSuccessProperty());
      assertFalse(modelBean0.isDisablePagingParameters());
      assertTrue(modelBean0.isAutodetectTypes());
      assertFalse(modelBean0.isPaging());
      assertEquals("Ext.data.Model", modelBean0.getExtend());
      assertEquals("json", modelBean0.getWriter());
      assertFalse(modelBean0.isClientIdPropertyAddToWriter());
      assertNull(modelBean0.getIdentifier());
      assertNull(modelBean0.getCreateMethod());
      assertNull(modelBean0.getRootProperty());
      assertNull(modelBean0.getIdProperty());
      assertNull(modelBean0.getDestroyMethod());
      assertNull(modelBean0.getTotalProperty());
      assertNull(modelBean0.getName());
      
      ModelFieldBean modelFieldBean0 = modelBean0.getField("org.hibernate.validator.constraints.NotEmpty");
      assertNull(modelFieldBean0);
      assertNull(modelBean0.getClientIdProperty());
      assertNull(modelBean0.getReadMethod());
      assertNull(modelBean0.getMessageProperty());
      assertNull(modelBean0.getWriteAllFields());
      assertNull(modelBean0.getVersionProperty());
      assertNull(modelBean0.getUpdateMethod());
      assertEquals("json", modelBean0.getReader());
      assertNull(modelBean0.getSuccessProperty());
      assertFalse(modelBean0.isDisablePagingParameters());
      assertTrue(modelBean0.isAutodetectTypes());
      assertFalse(modelBean0.isPaging());
      assertEquals("Ext.data.Model", modelBean0.getExtend());
      assertEquals("json", modelBean0.getWriter());
      assertFalse(modelBean0.isClientIdPropertyAddToWriter());
      assertNull(modelBean0.getIdentifier());
      assertNull(modelBean0.getCreateMethod());
      assertNull(modelBean0.getRootProperty());
      assertNull(modelBean0.getIdProperty());
      assertNull(modelBean0.getDestroyMethod());
      assertNull(modelBean0.getTotalProperty());
      assertNull(modelBean0.getName());
      
      Class<Annotation> class0 = Annotation.class;
      Annotation annotation0 = mock(Annotation.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(annotation0).annotationType();
      modelBean0.setCreateMethod("org.hibernate.validator.constraints.NotEmpty");
      assertNull(modelBean0.getClientIdProperty());
      assertNull(modelBean0.getReadMethod());
      assertNull(modelBean0.getMessageProperty());
      assertNull(modelBean0.getWriteAllFields());
      assertNull(modelBean0.getVersionProperty());
      assertNull(modelBean0.getUpdateMethod());
      assertEquals("json", modelBean0.getReader());
      assertNull(modelBean0.getSuccessProperty());
      assertFalse(modelBean0.isDisablePagingParameters());
      assertTrue(modelBean0.isAutodetectTypes());
      assertFalse(modelBean0.isPaging());
      assertEquals("Ext.data.Model", modelBean0.getExtend());
      assertEquals("org.hibernate.validator.constraints.NotEmpty", modelBean0.getCreateMethod());
      assertEquals("json", modelBean0.getWriter());
      assertFalse(modelBean0.isClientIdPropertyAddToWriter());
      assertNull(modelBean0.getIdentifier());
      assertNull(modelBean0.getRootProperty());
      assertNull(modelBean0.getIdProperty());
      assertNull(modelBean0.getDestroyMethod());
      assertNull(modelBean0.getTotalProperty());
      assertNull(modelBean0.getName());
      
      OutputConfig outputConfig0 = new OutputConfig();
      assertNotNull(outputConfig0);
      assertFalse(outputConfig0.isSurroundApiWithQuotes());
      assertNull(outputConfig0.getIncludeValidation());
      assertFalse(outputConfig0.isDebug());
      assertFalse(outputConfig0.isUseSingleQuotes());
      assertNull(outputConfig0.getLineEnding());
      assertNull(outputConfig0.getOutputFormat());
      
      IncludeValidation includeValidation3 = IncludeValidation.BUILTIN;
      outputConfig0.setIncludeValidation(includeValidation3);
      assertSame(includeValidation3, includeValidation0);
      assertSame(includeValidation3, includeValidation1);
      assertSame(includeValidation3, includeValidation2);
      assertFalse(outputConfig0.isSurroundApiWithQuotes());
      assertFalse(outputConfig0.isDebug());
      assertFalse(outputConfig0.isUseSingleQuotes());
      assertNull(outputConfig0.getLineEnding());
      assertNull(outputConfig0.getOutputFormat());
      assertEquals(IncludeValidation.BUILTIN, outputConfig0.getIncludeValidation());
      
      AbstractValidation.addValidationToModel(modelBean0, (ModelFieldBean) null, annotation0, outputConfig0);
      assertFalse(outputConfig0.isSurroundApiWithQuotes());
      assertFalse(outputConfig0.isDebug());
      assertFalse(outputConfig0.isUseSingleQuotes());
      assertNull(outputConfig0.getLineEnding());
      assertNull(outputConfig0.getOutputFormat());
      assertEquals(IncludeValidation.BUILTIN, outputConfig0.getIncludeValidation());
      assertNull(modelBean0.getClientIdProperty());
      assertNull(modelBean0.getReadMethod());
      assertNull(modelBean0.getMessageProperty());
      assertNull(modelBean0.getWriteAllFields());
      assertNull(modelBean0.getVersionProperty());
      assertNull(modelBean0.getUpdateMethod());
      assertEquals("json", modelBean0.getReader());
      assertNull(modelBean0.getSuccessProperty());
      assertFalse(modelBean0.isDisablePagingParameters());
      assertTrue(modelBean0.isAutodetectTypes());
      assertFalse(modelBean0.isPaging());
      assertEquals("Ext.data.Model", modelBean0.getExtend());
      assertEquals("org.hibernate.validator.constraints.NotEmpty", modelBean0.getCreateMethod());
      assertEquals("json", modelBean0.getWriter());
      assertFalse(modelBean0.isClientIdPropertyAddToWriter());
      assertNull(modelBean0.getIdentifier());
      assertNull(modelBean0.getRootProperty());
      assertNull(modelBean0.getIdProperty());
      assertNull(modelBean0.getDestroyMethod());
      assertNull(modelBean0.getTotalProperty());
      assertNull(modelBean0.getName());
      
      ModelValidation modelValidation3 = mock(ModelValidation.class, new ViolatedAssumptionAnswer());
      doReturn(modelValidationType2).when(modelValidation3).value();
      AbstractValidation abstractValidation3 = AbstractValidation.createValidation("org.hibernate.validator.constraints.NotEmpty", modelValidation3, includeValidation1);
      assertNull(abstractValidation3);
      assertSame(includeValidation1, includeValidation0);
      assertSame(includeValidation1, includeValidation2);
      assertSame(includeValidation1, includeValidation3);
      assertFalse(modelValidationType2.equals((Object)modelValidationType1));
      assertFalse(modelValidationType2.equals((Object)modelValidationType0));
  }

  @Test(timeout = 4000000)
  public void test44()  throws Throwable  {
      ModelFieldBean modelFieldBean0 = new ModelFieldBean((String) null, (String) null);
      assertNotNull(modelFieldBean0);
      assertNull(modelFieldBean0.getAllowBlank());
      assertNull(modelFieldBean0.getModelType());
      assertNull(modelFieldBean0.getConvert());
      assertNull(modelFieldBean0.getDateFormat());
      assertNull(modelFieldBean0.getPersist());
      assertNull(modelFieldBean0.getName());
      assertNull(modelFieldBean0.getCritical());
      assertNull(modelFieldBean0.getAllowNull());
      assertNull(modelFieldBean0.getCalculate());
      assertNull(modelFieldBean0.getType());
      assertNull(modelFieldBean0.getMapping());
      assertNull(modelFieldBean0.getUseNull());
      assertNull(modelFieldBean0.getUnique());
      
      Class<Annotation> class0 = Annotation.class;
      Annotation annotation0 = mock(Annotation.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(annotation0).annotationType();
      OutputConfig outputConfig0 = new OutputConfig();
      assertNotNull(outputConfig0);
      assertFalse(outputConfig0.isDebug());
      assertFalse(outputConfig0.isSurroundApiWithQuotes());
      assertNull(outputConfig0.getOutputFormat());
      assertFalse(outputConfig0.isUseSingleQuotes());
      assertNull(outputConfig0.getLineEnding());
      assertNull(outputConfig0.getIncludeValidation());
      
      OutputFormat outputFormat0 = OutputFormat.EXTJS5;
      outputConfig0.setOutputFormat(outputFormat0);
      assertFalse(outputConfig0.isDebug());
      assertFalse(outputConfig0.isSurroundApiWithQuotes());
      assertFalse(outputConfig0.isUseSingleQuotes());
      assertNull(outputConfig0.getLineEnding());
      assertEquals(OutputFormat.EXTJS5, outputConfig0.getOutputFormat());
      assertNull(outputConfig0.getIncludeValidation());
      
      IncludeValidation includeValidation0 = IncludeValidation.BUILTIN;
      outputConfig0.setIncludeValidation(includeValidation0);
      assertFalse(outputConfig0.isDebug());
      assertEquals(IncludeValidation.BUILTIN, outputConfig0.getIncludeValidation());
      assertFalse(outputConfig0.isSurroundApiWithQuotes());
      assertFalse(outputConfig0.isUseSingleQuotes());
      assertNull(outputConfig0.getLineEnding());
      assertEquals(OutputFormat.EXTJS5, outputConfig0.getOutputFormat());
      
      ModelBean modelBean0 = new ModelBean();
      assertNotNull(modelBean0);
      assertNull(modelBean0.getSuccessProperty());
      assertNull(modelBean0.getRootProperty());
      assertFalse(modelBean0.isDisablePagingParameters());
      assertNull(modelBean0.getMessageProperty());
      assertFalse(modelBean0.isPaging());
      assertNull(modelBean0.getClientIdProperty());
      assertEquals("Ext.data.Model", modelBean0.getExtend());
      assertNull(modelBean0.getVersionProperty());
      assertNull(modelBean0.getWriteAllFields());
      assertEquals("json", modelBean0.getReader());
      assertNull(modelBean0.getUpdateMethod());
      assertTrue(modelBean0.isAutodetectTypes());
      assertNull(modelBean0.getCreateMethod());
      assertNull(modelBean0.getReadMethod());
      assertNull(modelBean0.getName());
      assertFalse(modelBean0.isClientIdPropertyAddToWriter());
      assertNull(modelBean0.getTotalProperty());
      assertNull(modelBean0.getIdentifier());
      assertEquals("json", modelBean0.getWriter());
      assertNull(modelBean0.getIdProperty());
      assertNull(modelBean0.getDestroyMethod());
      
      AbstractValidation.addValidationToModel(modelBean0, modelFieldBean0, annotation0, outputConfig0);
      assertNull(modelFieldBean0.getAllowBlank());
      assertNull(modelFieldBean0.getModelType());
      assertNull(modelFieldBean0.getConvert());
      assertNull(modelFieldBean0.getDateFormat());
      assertNull(modelFieldBean0.getPersist());
      assertNull(modelFieldBean0.getName());
      assertNull(modelFieldBean0.getCritical());
      assertNull(modelFieldBean0.getAllowNull());
      assertNull(modelFieldBean0.getCalculate());
      assertNull(modelFieldBean0.getType());
      assertNull(modelFieldBean0.getMapping());
      assertNull(modelFieldBean0.getUseNull());
      assertNull(modelFieldBean0.getUnique());
      assertFalse(outputConfig0.isDebug());
      assertEquals(IncludeValidation.BUILTIN, outputConfig0.getIncludeValidation());
      assertFalse(outputConfig0.isSurroundApiWithQuotes());
      assertFalse(outputConfig0.isUseSingleQuotes());
      assertNull(outputConfig0.getLineEnding());
      assertEquals(OutputFormat.EXTJS5, outputConfig0.getOutputFormat());
      assertNull(modelBean0.getSuccessProperty());
      assertNull(modelBean0.getRootProperty());
      assertFalse(modelBean0.isDisablePagingParameters());
      assertNull(modelBean0.getMessageProperty());
      assertFalse(modelBean0.isPaging());
      assertNull(modelBean0.getClientIdProperty());
      assertEquals("Ext.data.Model", modelBean0.getExtend());
      assertNull(modelBean0.getVersionProperty());
      assertNull(modelBean0.getWriteAllFields());
      assertEquals("json", modelBean0.getReader());
      assertNull(modelBean0.getUpdateMethod());
      assertTrue(modelBean0.isAutodetectTypes());
      assertNull(modelBean0.getCreateMethod());
      assertNull(modelBean0.getReadMethod());
      assertNull(modelBean0.getName());
      assertFalse(modelBean0.isClientIdPropertyAddToWriter());
      assertNull(modelBean0.getTotalProperty());
      assertNull(modelBean0.getIdentifier());
      assertEquals("json", modelBean0.getWriter());
      assertNull(modelBean0.getIdProperty());
      assertNull(modelBean0.getDestroyMethod());
  }

  @Test(timeout = 4000000)
  public void test45()  throws Throwable  {
      ModelFieldBean modelFieldBean0 = new ModelFieldBean((String) null, (String) null);
      assertNotNull(modelFieldBean0);
      assertNull(modelFieldBean0.getName());
      assertNull(modelFieldBean0.getCalculate());
      assertNull(modelFieldBean0.getCritical());
      assertNull(modelFieldBean0.getAllowNull());
      assertNull(modelFieldBean0.getAllowBlank());
      assertNull(modelFieldBean0.getPersist());
      assertNull(modelFieldBean0.getType());
      assertNull(modelFieldBean0.getDateFormat());
      assertNull(modelFieldBean0.getMapping());
      assertNull(modelFieldBean0.getUnique());
      assertNull(modelFieldBean0.getModelType());
      assertNull(modelFieldBean0.getUseNull());
      assertNull(modelFieldBean0.getConvert());
      
      Class<Annotation> class0 = Annotation.class;
      Annotation annotation0 = mock(Annotation.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(annotation0).annotationType();
      OutputConfig outputConfig0 = new OutputConfig();
      assertNotNull(outputConfig0);
      assertNull(outputConfig0.getLineEnding());
      assertFalse(outputConfig0.isDebug());
      assertFalse(outputConfig0.isSurroundApiWithQuotes());
      assertNull(outputConfig0.getIncludeValidation());
      assertNull(outputConfig0.getOutputFormat());
      
      IncludeValidation includeValidation0 = IncludeValidation.BUILTIN;
      outputConfig0.setUseSingleQuotes(true);
      assertNull(outputConfig0.getLineEnding());
      assertFalse(outputConfig0.isDebug());
      assertFalse(outputConfig0.isSurroundApiWithQuotes());
      assertNull(outputConfig0.getIncludeValidation());
      assertNull(outputConfig0.getOutputFormat());
      
      outputConfig0.setIncludeValidation(includeValidation0);
      assertEquals(IncludeValidation.BUILTIN, outputConfig0.getIncludeValidation());
      assertNull(outputConfig0.getLineEnding());
      assertFalse(outputConfig0.isDebug());
      assertFalse(outputConfig0.isSurroundApiWithQuotes());
      assertNull(outputConfig0.getOutputFormat());
      
      OutputFormat outputFormat0 = OutputFormat.EXTJS5;
      outputConfig0.setOutputFormat(outputFormat0);
      assertEquals(OutputFormat.EXTJS5, outputConfig0.getOutputFormat());
      assertEquals(IncludeValidation.BUILTIN, outputConfig0.getIncludeValidation());
      assertNull(outputConfig0.getLineEnding());
      assertFalse(outputConfig0.isDebug());
      assertFalse(outputConfig0.isSurroundApiWithQuotes());
      
      ModelBean modelBean0 = new ModelBean();
      assertNotNull(modelBean0);
      assertFalse(modelBean0.isClientIdPropertyAddToWriter());
      assertNull(modelBean0.getTotalProperty());
      assertNull(modelBean0.getName());
      assertNull(modelBean0.getRootProperty());
      assertNull(modelBean0.getIdentifier());
      assertFalse(modelBean0.isDisablePagingParameters());
      assertNull(modelBean0.getIdProperty());
      assertNull(modelBean0.getDestroyMethod());
      assertEquals("json", modelBean0.getWriter());
      assertNull(modelBean0.getClientIdProperty());
      assertTrue(modelBean0.isAutodetectTypes());
      assertNull(modelBean0.getReadMethod());
      assertEquals("Ext.data.Model", modelBean0.getExtend());
      assertNull(modelBean0.getSuccessProperty());
      assertFalse(modelBean0.isPaging());
      assertNull(modelBean0.getCreateMethod());
      assertNull(modelBean0.getMessageProperty());
      assertNull(modelBean0.getWriteAllFields());
      assertNull(modelBean0.getVersionProperty());
      assertNull(modelBean0.getUpdateMethod());
      assertEquals("json", modelBean0.getReader());
      
      AbstractValidation.addValidationToModel(modelBean0, modelFieldBean0, annotation0, outputConfig0);
      assertNull(modelFieldBean0.getName());
      assertNull(modelFieldBean0.getCalculate());
      assertNull(modelFieldBean0.getCritical());
      assertNull(modelFieldBean0.getAllowNull());
      assertNull(modelFieldBean0.getAllowBlank());
      assertNull(modelFieldBean0.getPersist());
      assertNull(modelFieldBean0.getType());
      assertNull(modelFieldBean0.getDateFormat());
      assertNull(modelFieldBean0.getMapping());
      assertNull(modelFieldBean0.getUnique());
      assertNull(modelFieldBean0.getModelType());
      assertNull(modelFieldBean0.getUseNull());
      assertNull(modelFieldBean0.getConvert());
      assertEquals(OutputFormat.EXTJS5, outputConfig0.getOutputFormat());
      assertEquals(IncludeValidation.BUILTIN, outputConfig0.getIncludeValidation());
      assertNull(outputConfig0.getLineEnding());
      assertFalse(outputConfig0.isDebug());
      assertFalse(outputConfig0.isSurroundApiWithQuotes());
      assertFalse(modelBean0.isClientIdPropertyAddToWriter());
      assertNull(modelBean0.getTotalProperty());
      assertNull(modelBean0.getName());
      assertNull(modelBean0.getRootProperty());
      assertNull(modelBean0.getIdentifier());
      assertFalse(modelBean0.isDisablePagingParameters());
      assertNull(modelBean0.getIdProperty());
      assertNull(modelBean0.getDestroyMethod());
      assertEquals("json", modelBean0.getWriter());
      assertNull(modelBean0.getClientIdProperty());
      assertTrue(modelBean0.isAutodetectTypes());
      assertNull(modelBean0.getReadMethod());
      assertEquals("Ext.data.Model", modelBean0.getExtend());
      assertNull(modelBean0.getSuccessProperty());
      assertFalse(modelBean0.isPaging());
      assertNull(modelBean0.getCreateMethod());
      assertNull(modelBean0.getMessageProperty());
      assertNull(modelBean0.getWriteAllFields());
      assertNull(modelBean0.getVersionProperty());
      assertNull(modelBean0.getUpdateMethod());
      assertEquals("json", modelBean0.getReader());
  }
}
