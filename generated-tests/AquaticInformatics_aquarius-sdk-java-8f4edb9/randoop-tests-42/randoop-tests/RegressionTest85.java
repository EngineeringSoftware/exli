import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest85 {

    public static boolean debug = false;

    @Test
    public void test42501() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest85.test42501");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetChartDataV2 getChartDataV2_0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetChartDataV2();
        java.lang.String str1 = getChartDataV2_0.getActivityCustomId();
        java.lang.String str2 = getChartDataV2_0.DepthUnitId;
        java.util.List<java.lang.String> strList3 = getChartDataV2_0.SpecimenIds;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetChartDataV2 getChartDataV2_4 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetChartDataV2();
        getChartDataV2_4.DetectionCondition = "/AQUARIUS/Acquisition/v2://9999-12-31T23:59:59.999Z";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.GageHeightReading gageHeightReading7 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.GageHeightReading();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ControlConditionActivity controlConditionActivity8 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ControlConditionActivity();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ControlCleanedType controlCleanedType9 = null;
        controlConditionActivity8.ControlCleaned = controlCleanedType9;
        java.lang.String str11 = controlConditionActivity8.getComments();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary12 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        dischargeSummary12.Reviewer = "";
        java.time.Instant instant15 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        dischargeSummary12.MeasurementTime = instant15;
        controlConditionActivity8.DateCleaned = instant15;
        gageHeightReading7.ReadingTime = instant15;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay19 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay21 = doubleWithDisplay19.setNumeric((java.lang.Double) 10.0d);
        java.lang.String str22 = doubleWithDisplay21.getDisplay();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.GageHeightReading gageHeightReading23 = gageHeightReading7.setGageHeight(doubleWithDisplay21);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetChartDataV2 getChartDataV2_24 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetChartDataV2();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary25 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary27 = dischargeSummary25.setMeanGageHeightMethod("hi!");
        java.lang.String str28 = dischargeSummary27.MeasurementId;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary30 = dischargeSummary27.setDischargeMethod("yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSSSSSZZZZZ");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CalibrationCheck calibrationCheck31 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CalibrationCheck();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CalibrationCheckType calibrationCheckType32 = calibrationCheck31.getCalibrationCheckType();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay33 = calibrationCheck31.Value;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse34 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary35 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary37 = dischargeSummary35.setPublish((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse38 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant39 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse40 = locationDescriptionListServiceResponse38.setNextToken(instant39);
        dischargeSummary35.MeasurementTime = instant39;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse42 = locationDescriptionListServiceResponse34.setNextToken(instant39);
        java.time.Instant instant43 = locationDescriptionListServiceResponse34.getNextToken();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CalibrationCheck calibrationCheck44 = calibrationCheck31.setTime(instant43);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary45 = dischargeSummary27.setMeasurementTime(instant43);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetChartDataV2 getChartDataV2_46 = getChartDataV2_24.setStartResultTime(instant43);
        gageHeightReading7.ReadingTime = instant43;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetChartDataV2 getChartDataV2_48 = getChartDataV2_4.setStartObservedTime(instant43);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetChartDataV2 getChartDataV2_49 = getChartDataV2_0.setEndResultTime(instant43);
        java.util.List<java.lang.String> strList50 = getChartDataV2_0.getLabResultLabAnalysisMethodIds();
        java.lang.String str51 = getChartDataV2_0.getDepthUnitId();
        java.util.List<java.lang.String> strList52 = getChartDataV2_0.getDataClassifications();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(strList3);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNotNull(instant15);
        org.junit.Assert.assertNotNull(doubleWithDisplay21);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertNotNull(gageHeightReading23);
        org.junit.Assert.assertNotNull(dischargeSummary27);
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertNotNull(dischargeSummary30);
        org.junit.Assert.assertNull(calibrationCheckType32);
        org.junit.Assert.assertNull(doubleWithDisplay33);
        org.junit.Assert.assertNotNull(dischargeSummary37);
        org.junit.Assert.assertNotNull(instant39);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse40);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse42);
        org.junit.Assert.assertNotNull(instant43);
        org.junit.Assert.assertNotNull(calibrationCheck44);
        org.junit.Assert.assertNotNull(dischargeSummary45);
        org.junit.Assert.assertNotNull(getChartDataV2_46);
        org.junit.Assert.assertNotNull(getChartDataV2_48);
        org.junit.Assert.assertNotNull(getChartDataV2_49);
        org.junit.Assert.assertNull(strList50);
        org.junit.Assert.assertNull(str51);
        org.junit.Assert.assertNull(strList52);
    }

    @Test
    public void test42502() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest85.test42502");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutActivityTemplate putActivityTemplate0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutActivityTemplate();
        java.lang.String str1 = putActivityTemplate0.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.CollectionMethod collectionMethod2 = putActivityTemplate0.CollectionMethod;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutActivityTemplate putActivityTemplate4 = putActivityTemplate0.setComment("ZZZZZ");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity postActivity5 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity();
        postActivity5.LoggerFileName = "hi!";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity plannedActivity8 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity postActivity9 = postActivity5.setPlannedActivity(plannedActivity8);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ActivityType activityType10 = postActivity5.Type;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFieldVisitActivityWithTemplate postFieldVisitActivityWithTemplate11 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFieldVisitActivityWithTemplate();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate12 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate();
        specimenTemplate12.CustomId = "hi!";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate15 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate16 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate();
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabInstructionTemplate> labInstructionTemplateList17 = specimenTemplate16.getLabInstructionTemplates();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate18 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate20 = specimenTemplate18.setCustomId("hi!");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate21 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate22 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate();
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabInstructionTemplate> labInstructionTemplateList23 = specimenTemplate22.LabInstructionTemplates;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate[] specimenTemplateArray24 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate[] { specimenTemplate12, specimenTemplate15, specimenTemplate16, specimenTemplate20, specimenTemplate21, specimenTemplate22 };
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate> specimenTemplateList25 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate>) specimenTemplateList25, specimenTemplateArray24);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFieldVisitActivityWithTemplate postFieldVisitActivityWithTemplate27 = postFieldVisitActivityWithTemplate11.setSpecimenTemplates((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate>) specimenTemplateList25);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.CollectionMethod collectionMethod28 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.CollectionMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFieldVisitActivityWithTemplate postFieldVisitActivityWithTemplate29 = postFieldVisitActivityWithTemplate27.setCollectionMethod(collectionMethod28);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity postActivity30 = postActivity5.setCollectionMethod(collectionMethod28);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutActivityTemplate putActivityTemplate31 = putActivityTemplate0.setCollectionMethod(collectionMethod28);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity quantity32 = putActivityTemplate31.getDepth();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes33 = putActivityTemplate31.AuditAttributes;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes34 = null;
        putActivityTemplate31.AuditAttributes = auditAttributes34;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(collectionMethod2);
        org.junit.Assert.assertNotNull(putActivityTemplate4);
        org.junit.Assert.assertNotNull(postActivity9);
        org.junit.Assert.assertNull(activityType10);
        org.junit.Assert.assertNull(labInstructionTemplateList17);
        org.junit.Assert.assertNotNull(specimenTemplate20);
        org.junit.Assert.assertNull(labInstructionTemplateList23);
        org.junit.Assert.assertNotNull(specimenTemplateArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(postFieldVisitActivityWithTemplate27);
        org.junit.Assert.assertNotNull(postFieldVisitActivityWithTemplate29);
        org.junit.Assert.assertNotNull(postActivity30);
        org.junit.Assert.assertNotNull(putActivityTemplate31);
        org.junit.Assert.assertNull(quantity32);
        org.junit.Assert.assertNull(auditAttributes33);
    }

    @Test
    public void test42503() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest85.test42503");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeUncertainty dischargeUncertainty0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeUncertainty();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay1 = dischargeUncertainty0.getQuantitativeUncertainty();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay2 = dischargeUncertainty0.getQuantitativeUncertainty();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Vertical vertical3 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Vertical();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay4 = vertical3.SoundedDepth;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VerticalType verticalType5 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VerticalType.StartEdgeNoWaterBefore;
        vertical3.VerticalType = verticalType5;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.AdcpDischargeActivity adcpDischargeActivity7 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.AdcpDischargeActivity();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay8 = null;
        adcpDischargeActivity7.TransducerDepth = quantityWithDisplay8;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary10 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        dischargeSummary10.Reviewer = "";
        java.time.Instant instant13 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        dischargeSummary10.MeasurementTime = instant13;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.BaseFlowType baseFlowType15 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.BaseFlowType.BaseFlow;
        dischargeSummary10.BaseFlow = baseFlowType15;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeUncertainty dischargeUncertainty17 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeUncertainty();
        dischargeSummary10.DischargeUncertainty = dischargeUncertainty17;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary19 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay20 = dischargeSummary19.getMeanGageHeight();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay21 = dischargeSummary19.Discharge;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay22 = dischargeSummary19.DurationInHours;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay23 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay25 = doubleWithDisplay23.setNumeric((java.lang.Double) 10.0d);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary26 = dischargeSummary19.setDurationInHours(doubleWithDisplay23);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeUncertainty dischargeUncertainty27 = dischargeUncertainty17.setQuantitativeUncertainty(doubleWithDisplay23);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.AdcpDischargeActivity adcpDischargeActivity28 = adcpDischargeActivity7.setTopEstimateExponent(doubleWithDisplay23);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.AdcpDischargeActivity adcpDischargeActivity30 = adcpDischargeActivity7.setDepthReference("/AQUARIUS/Provisioning/v1");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay31 = adcpDischargeActivity7.getBottomEstimateExponent();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DatumConvertedQuantityWithDisplay datumConvertedQuantityWithDisplay32 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DatumConvertedQuantityWithDisplay();
        java.lang.String str33 = datumConvertedQuantityWithDisplay32.TargetDatum;
        adcpDischargeActivity7.Area = datumConvertedQuantityWithDisplay32;
        vertical3.SegmentDischarge = datumConvertedQuantityWithDisplay32;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeUncertainty dischargeUncertainty36 = dischargeUncertainty0.setQuantitativeUncertainty((com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay) datumConvertedQuantityWithDisplay32);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ControlConditionActivity controlConditionActivity37 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ControlConditionActivity();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ControlCleanedType controlCleanedType38 = null;
        controlConditionActivity37.ControlCleaned = controlCleanedType38;
        java.time.Instant instant40 = controlConditionActivity37.getDateCleaned();
        java.lang.String str41 = controlConditionActivity37.FlowOverControl;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ControlConditionActivity controlConditionActivity43 = controlConditionActivity37.setComments("yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSSSSSZZZZZ");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CrossSectionPoint crossSectionPoint44 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CrossSectionPoint();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay45 = null;
        crossSectionPoint44.Distance = quantityWithDisplay45;
        crossSectionPoint44.PointOrder = 1;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay49 = crossSectionPoint44.getElevation();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CrossSectionPoint crossSectionPoint51 = crossSectionPoint44.setComments("hi!");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay52 = null;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CrossSectionPoint crossSectionPoint53 = crossSectionPoint51.setElevation(quantityWithDisplay52);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay54 = null;
        crossSectionPoint53.Depth = quantityWithDisplay54;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DatumConvertedQuantityWithDisplay datumConvertedQuantityWithDisplay56 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DatumConvertedQuantityWithDisplay();
        crossSectionPoint53.Depth = datumConvertedQuantityWithDisplay56;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay58 = crossSectionPoint53.getDepth();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ControlConditionActivity controlConditionActivity59 = controlConditionActivity37.setDistanceToGage(quantityWithDisplay58);
        dischargeUncertainty0.QuantitativeUncertainty = quantityWithDisplay58;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay62 = quantityWithDisplay58.setNumeric((java.lang.Double) 1.0d);
        org.junit.Assert.assertNull(doubleWithDisplay1);
        org.junit.Assert.assertNull(doubleWithDisplay2);
        org.junit.Assert.assertNull(quantityWithDisplay4);
        org.junit.Assert.assertTrue("'" + verticalType5 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VerticalType.StartEdgeNoWaterBefore + "'", verticalType5.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VerticalType.StartEdgeNoWaterBefore));
        org.junit.Assert.assertNotNull(instant13);
        org.junit.Assert.assertTrue("'" + baseFlowType15 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.BaseFlowType.BaseFlow + "'", baseFlowType15.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.BaseFlowType.BaseFlow));
        org.junit.Assert.assertNull(quantityWithDisplay20);
        org.junit.Assert.assertNull(quantityWithDisplay21);
        org.junit.Assert.assertNull(doubleWithDisplay22);
        org.junit.Assert.assertNotNull(doubleWithDisplay25);
        org.junit.Assert.assertNotNull(dischargeSummary26);
        org.junit.Assert.assertNotNull(dischargeUncertainty27);
        org.junit.Assert.assertNotNull(adcpDischargeActivity28);
        org.junit.Assert.assertNotNull(adcpDischargeActivity30);
        org.junit.Assert.assertNull(doubleWithDisplay31);
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertNotNull(dischargeUncertainty36);
        org.junit.Assert.assertNull(instant40);
        org.junit.Assert.assertNull(str41);
        org.junit.Assert.assertNotNull(controlConditionActivity43);
        org.junit.Assert.assertNull(quantityWithDisplay49);
        org.junit.Assert.assertNotNull(crossSectionPoint51);
        org.junit.Assert.assertNotNull(crossSectionPoint53);
        org.junit.Assert.assertNotNull(quantityWithDisplay58);
        org.junit.Assert.assertNotNull(controlConditionActivity59);
        org.junit.Assert.assertNotNull(doubleWithDisplay62);
    }

    @Test
    public void test42504() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest85.test42504");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Report report0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Report();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Report report2 = report0.setUserName("/AQUARIUS/Acquisition/v2");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Report report4 = report2.setUserName("'.'SSSSSSS");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Report report6 = report4.setDescription("yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ");
        java.lang.String str7 = report4.UserUniqueId;
        java.lang.String str8 = report4.LocationUniqueId;
        report4.LocationUniqueId = "/api";
        org.junit.Assert.assertNotNull(report2);
        org.junit.Assert.assertNotNull(report4);
        org.junit.Assert.assertNotNull(report6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(str8);
    }

    @Test
    public void test42505() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest85.test42505");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Activity activity0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Activity();
        java.time.OffsetDateTime offsetDateTime1 = activity0.getStartTime();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Activity activity3 = activity0.setLoggerFileName("'.'SSSSSSS");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocation samplingLocation4 = activity0.SamplingLocation;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutActivity putActivity5 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutActivity();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity plannedActivity6 = putActivity5.PlannedActivity;
        java.time.OffsetDateTime offsetDateTime7 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutActivity putActivity8 = putActivity5.setEndTime(offsetDateTime7);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Device device9 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Device();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Device device11 = device9.setType("/AQUARIUS/Acquisition/v2");
        putActivity5.Device = device11;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Device device14 = device11.setDescription("9999-12-31T23:59:59.999Z");
        activity0.Device = device14;
        java.lang.String str16 = activity0.getLoggerFileName();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity postActivity17 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity();
        postActivity17.LoggerFileName = "hi!";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity postActivity21 = postActivity17.setCustomId("");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutActivity putActivity22 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutActivity();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity plannedActivity23 = null;
        putActivity22.PlannedActivity = plannedActivity23;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity postActivity25 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity();
        postActivity25.LoggerFileName = "hi!";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity plannedActivity28 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity postActivity29 = postActivity25.setPlannedActivity(plannedActivity28);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag samplingContextTag30 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag();
        java.lang.String str31 = samplingContextTag30.getDescription();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes32 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag samplingContextTag33 = samplingContextTag30.setAuditAttributes(auditAttributes32);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag samplingContextTag35 = samplingContextTag33.setId("yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag samplingContextTag36 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag();
        java.lang.String str37 = samplingContextTag36.getDescription();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag samplingContextTag38 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag();
        java.lang.String str39 = samplingContextTag38.getDescription();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes40 = null;
        samplingContextTag38.AuditAttributes = auditAttributes40;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag samplingContextTag42 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag();
        java.lang.String str43 = samplingContextTag42.getDescription();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes44 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag samplingContextTag45 = samplingContextTag42.setAuditAttributes(auditAttributes44);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag[] samplingContextTagArray46 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag[] { samplingContextTag35, samplingContextTag36, samplingContextTag38, samplingContextTag45 };
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag> samplingContextTagList47 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag>();
        boolean boolean48 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag>) samplingContextTagList47, samplingContextTagArray46);
        postActivity25.SamplingContextTags = samplingContextTagList47;
        putActivity22.SamplingContextTags = samplingContextTagList47;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity postActivity51 = postActivity21.setSamplingContextTags((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag>) samplingContextTagList47);
        activity0.SamplingContextTags = samplingContextTagList47;
        java.time.OffsetDateTime offsetDateTime53 = null;
        activity0.EndTime = offsetDateTime53;
        java.lang.String str55 = activity0.getLoggerFileName();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity plannedActivity56 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Activity activity57 = activity0.setPlannedActivity(plannedActivity56);
        java.lang.String str58 = activity57.Comment;
        java.lang.String str59 = activity57.Comment;
        org.junit.Assert.assertNull(offsetDateTime1);
        org.junit.Assert.assertNotNull(activity3);
        org.junit.Assert.assertNull(samplingLocation4);
        org.junit.Assert.assertNull(plannedActivity6);
        org.junit.Assert.assertNotNull(putActivity8);
        org.junit.Assert.assertNotNull(device11);
        org.junit.Assert.assertNotNull(device14);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "'.'SSSSSSS" + "'", str16, "'.'SSSSSSS");
        org.junit.Assert.assertNotNull(postActivity21);
        org.junit.Assert.assertNotNull(postActivity29);
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertNotNull(samplingContextTag33);
        org.junit.Assert.assertNotNull(samplingContextTag35);
        org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertNotNull(samplingContextTag45);
        org.junit.Assert.assertNotNull(samplingContextTagArray46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(postActivity51);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "'.'SSSSSSS" + "'", str55, "'.'SSSSSSS");
        org.junit.Assert.assertNotNull(activity57);
        org.junit.Assert.assertNull(str58);
        org.junit.Assert.assertNull(str59);
    }

    @Test
    public void test42506() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest85.test42506");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Reading reading0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Reading();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay1 = reading0.getValue();
        reading0.ReferencePointUniqueId = "hi!";
        java.lang.String str4 = reading0.Parameter;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary5 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary7 = dischargeSummary5.setPublish((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay8 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay();
        dischargeSummary7.DifferenceDuringVisit = doubleWithDisplay8;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay11 = doubleWithDisplay8.setNumeric((java.lang.Double) 100.0d);
        reading0.Value = doubleWithDisplay11;
        java.lang.Boolean boolean13 = reading0.isPublish();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Reading reading15 = reading0.setParameterId("/AQUARIUS/Acquisition/v2://9999-12-31T23:59:59.999Z");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.AdcpDischargeActivity adcpDischargeActivity16 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.AdcpDischargeActivity();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.AdcpDischargeActivity adcpDischargeActivity18 = adcpDischargeActivity16.setSoftwareVersion("yyyy'-'MM'-'dd'T'HH':'mm':'ss");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay19 = adcpDischargeActivity18.getDischargeCoefficientVariation();
        adcpDischargeActivity18.NodeDetails = "yyyy'-'MM'-'dd'T'HH':'mm':'ss";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary22 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay23 = dischargeSummary22.getMeanGageHeight();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay24 = dischargeSummary22.Discharge;
        java.lang.Integer int25 = dischargeSummary22.getGradeCode();
        java.lang.String str26 = dischargeSummary22.MeasurementId;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DatumConvertedQuantityWithDisplay datumConvertedQuantityWithDisplay27 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DatumConvertedQuantityWithDisplay();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary28 = dischargeSummary22.setAlternateRatingDischarge((com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay) datumConvertedQuantityWithDisplay27);
        adcpDischargeActivity18.Area = datumConvertedQuantityWithDisplay27;
        reading15.Uncertainty = datumConvertedQuantityWithDisplay27;
        java.lang.Integer int31 = reading15.getGradeCode();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Reading reading33 = reading15.setUnit("2021.8.9990");
        java.lang.String str34 = reading15.getReferencePointUniqueId();
        org.junit.Assert.assertNull(doubleWithDisplay1);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNotNull(dischargeSummary7);
        org.junit.Assert.assertNotNull(doubleWithDisplay11);
        org.junit.Assert.assertNull(boolean13);
        org.junit.Assert.assertNotNull(reading15);
        org.junit.Assert.assertNotNull(adcpDischargeActivity18);
        org.junit.Assert.assertNull(doubleWithDisplay19);
        org.junit.Assert.assertNull(quantityWithDisplay23);
        org.junit.Assert.assertNull(quantityWithDisplay24);
        org.junit.Assert.assertNull(int25);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertNotNull(dischargeSummary28);
        org.junit.Assert.assertNull(int31);
        org.junit.Assert.assertNotNull(reading33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "hi!" + "'", str34, "hi!");
    }

    @Test
    public void test42507() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest85.test42507");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.PostLocationAttachmentResponse postLocationAttachmentResponse0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.PostLocationAttachmentResponse();
        java.lang.String str1 = postLocationAttachmentResponse0.getComments();
        java.lang.String str2 = postLocationAttachmentResponse0.Comments;
        java.lang.String str3 = postLocationAttachmentResponse0.LocationUniqueId;
        postLocationAttachmentResponse0.UniqueId = "multipart/form-data; boundary=****1eab67e1-84c8-4b82-aa06-d6c7526551f8****";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.PostLocationAttachmentResponse postLocationAttachmentResponse7 = postLocationAttachmentResponse0.setUrl("MaxInstant");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.PostLocationAttachment postLocationAttachment8 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.PostLocationAttachment();
        java.lang.String str9 = postLocationAttachment8.getComments();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.IHttpFile iHttpFile10 = null;
        postLocationAttachment8.File = iHttpFile10;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.IHttpFile iHttpFile12 = null;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.PostLocationAttachment postLocationAttachment13 = postLocationAttachment8.setFile(iHttpFile12);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.AttachmentCategory attachmentCategory14 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.AttachmentCategory.None;
        postLocationAttachment13.AttachmentCategory = attachmentCategory14;
        postLocationAttachment13.Comments = "multipart/form-data; boundary=****2d077bad-cd27-4736-8ba0-2a8d8a85733d****";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.AttachmentCategory attachmentCategory18 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.AttachmentCategory.LevelSurvey;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.PostLocationAttachment postLocationAttachment19 = postLocationAttachment13.setAttachmentCategory(attachmentCategory18);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.PostLocationAttachmentResponse postLocationAttachmentResponse20 = postLocationAttachmentResponse7.setAttachmentCategory(attachmentCategory18);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.PostLocationAttachmentResponse postLocationAttachmentResponse21 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.PostLocationAttachmentResponse();
        java.lang.String str22 = postLocationAttachmentResponse21.getComments();
        java.lang.String str23 = postLocationAttachmentResponse21.Comments;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.AttachmentType attachmentType24 = null;
        postLocationAttachmentResponse21.AttachmentType = attachmentType24;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.AttachmentCategory attachmentCategory26 = postLocationAttachmentResponse21.getAttachmentCategory();
        java.lang.String str27 = postLocationAttachmentResponse21.getFileName();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.AttachmentType attachmentType28 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.AttachmentType.Swami;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.PostLocationAttachmentResponse postLocationAttachmentResponse29 = postLocationAttachmentResponse21.setAttachmentType(attachmentType28);
        java.lang.String str30 = postLocationAttachmentResponse29.FileName;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.AttachmentType attachmentType31 = postLocationAttachmentResponse29.AttachmentType;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.PostLocationAttachmentResponse postLocationAttachmentResponse32 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.PostLocationAttachmentResponse();
        java.lang.String str33 = postLocationAttachmentResponse32.getComments();
        java.lang.String str34 = postLocationAttachmentResponse32.Comments;
        java.lang.String str35 = postLocationAttachmentResponse32.LocationUniqueId;
        postLocationAttachmentResponse32.Url = "MaxInstant";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.PostLocationAttachmentResponse postLocationAttachmentResponse39 = postLocationAttachmentResponse32.setLocationUniqueId("9999-12-31T23:59:59.999Z");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.PostLocationAttachmentResponse postLocationAttachmentResponse40 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.PostLocationAttachmentResponse();
        java.lang.String str41 = postLocationAttachmentResponse40.getComments();
        java.lang.String str42 = postLocationAttachmentResponse40.Comments;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.AttachmentType attachmentType43 = null;
        postLocationAttachmentResponse40.AttachmentType = attachmentType43;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.AttachmentCategory attachmentCategory45 = postLocationAttachmentResponse40.getAttachmentCategory();
        java.lang.String str46 = postLocationAttachmentResponse40.getFileName();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.AttachmentType attachmentType47 = postLocationAttachmentResponse40.getAttachmentType();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.PostLocationAttachmentResponse postLocationAttachmentResponse48 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.PostLocationAttachmentResponse();
        java.lang.String str49 = postLocationAttachmentResponse48.getComments();
        java.lang.String str50 = postLocationAttachmentResponse48.Comments;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.PostLocationAttachmentResponse postLocationAttachmentResponse52 = postLocationAttachmentResponse48.setComments("");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.AppliedTag appliedTag53 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.AppliedTag();
        appliedTag53.Key = "9999-12-31T23:59:59.999Z";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.AppliedTag appliedTag57 = appliedTag53.setKey("http");
        java.lang.String str58 = appliedTag57.UniqueId;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.AppliedTag appliedTag59 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.AppliedTag();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.AppliedTag appliedTag61 = appliedTag59.setValue("'.'SSSSSSS");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.AppliedTag appliedTag63 = appliedTag59.setValue("/AQUARIUS/Acquisition/v2://9999-12-31T23:59:59.999Z");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.AppliedTag appliedTag65 = appliedTag59.setValue("");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.AppliedTag[] appliedTagArray66 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.AppliedTag[] { appliedTag57, appliedTag59 };
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.AppliedTag> appliedTagList67 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.AppliedTag>();
        boolean boolean68 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.AppliedTag>) appliedTagList67, appliedTagArray66);
        postLocationAttachmentResponse48.Tags = appliedTagList67;
        postLocationAttachmentResponse40.Tags = appliedTagList67;
        postLocationAttachmentResponse32.Tags = appliedTagList67;
        postLocationAttachmentResponse29.Tags = appliedTagList67;
        postLocationAttachmentResponse7.Tags = appliedTagList67;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(postLocationAttachmentResponse7);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(postLocationAttachment13);
        org.junit.Assert.assertTrue("'" + attachmentCategory14 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.AttachmentCategory.None + "'", attachmentCategory14.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.AttachmentCategory.None));
        org.junit.Assert.assertTrue("'" + attachmentCategory18 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.AttachmentCategory.LevelSurvey + "'", attachmentCategory18.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.AttachmentCategory.LevelSurvey));
        org.junit.Assert.assertNotNull(postLocationAttachment19);
        org.junit.Assert.assertNotNull(postLocationAttachmentResponse20);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertNull(attachmentCategory26);
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertTrue("'" + attachmentType28 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.AttachmentType.Swami + "'", attachmentType28.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.AttachmentType.Swami));
        org.junit.Assert.assertNotNull(postLocationAttachmentResponse29);
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertTrue("'" + attachmentType31 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.AttachmentType.Swami + "'", attachmentType31.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.AttachmentType.Swami));
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertNotNull(postLocationAttachmentResponse39);
        org.junit.Assert.assertNull(str41);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertNull(attachmentCategory45);
        org.junit.Assert.assertNull(str46);
        org.junit.Assert.assertNull(attachmentType47);
        org.junit.Assert.assertNull(str49);
        org.junit.Assert.assertNull(str50);
        org.junit.Assert.assertNotNull(postLocationAttachmentResponse52);
        org.junit.Assert.assertNotNull(appliedTag57);
        org.junit.Assert.assertNull(str58);
        org.junit.Assert.assertNotNull(appliedTag61);
        org.junit.Assert.assertNotNull(appliedTag63);
        org.junit.Assert.assertNotNull(appliedTag65);
        org.junit.Assert.assertNotNull(appliedTagArray66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
    }

    @Test
    public void test42508() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest85.test42508");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetCollectionMethod getCollectionMethod0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetCollectionMethod();
        java.lang.Object obj1 = getCollectionMethod0.getResponseType();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetCollectionMethod getCollectionMethod3 = getCollectionMethod0.setId("MaxInstant");
        java.lang.Object obj4 = getCollectionMethod3.getResponseType();
        java.lang.String str5 = getCollectionMethod3.getId();
        java.lang.String str6 = getCollectionMethod3.Id;
        java.lang.String str7 = getCollectionMethod3.Id;
        getCollectionMethod3.Id = "MaxInstant";
        java.lang.Object obj10 = getCollectionMethod3.getResponseType();
        org.junit.Assert.assertNotNull(obj1);
        org.junit.Assert.assertEquals(obj1.toString(), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$CollectionMethod");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj1), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$CollectionMethod");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj1), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$CollectionMethod");
        org.junit.Assert.assertNotNull(getCollectionMethod3);
        org.junit.Assert.assertNotNull(obj4);
        org.junit.Assert.assertEquals(obj4.toString(), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$CollectionMethod");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj4), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$CollectionMethod");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj4), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$CollectionMethod");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "MaxInstant" + "'", str5, "MaxInstant");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "MaxInstant" + "'", str6, "MaxInstant");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "MaxInstant" + "'", str7, "MaxInstant");
        org.junit.Assert.assertNotNull(obj10);
        org.junit.Assert.assertEquals(obj10.toString(), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$CollectionMethod");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj10), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$CollectionMethod");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj10), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$CollectionMethod");
    }

    @Test
    public void test42509() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest85.test42509");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RecurringReport recurringReport0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RecurringReport();
        recurringReport0.JsonTemplate = "2021.4.62.0";
        recurringReport0.JsonTemplate = "";
        recurringReport0.JsonTemplate = "hi!";
        java.lang.String str7 = recurringReport0.getTitle();
        org.junit.Assert.assertNull(str7);
    }

    @Test
    public void test42510() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest85.test42510");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetGroupedObservationsV2 getGroupedObservationsV2_0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetGroupedObservationsV2();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TagDefinition tagDefinition1 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TagDefinition();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TagValueType tagValueType2 = null;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TagDefinition tagDefinition3 = tagDefinition1.setValueType(tagValueType2);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TagDefinition tagDefinition5 = tagDefinition1.setAppliesToAttachments((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TagDefinition tagDefinition7 = tagDefinition5.setKey("yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TagDefinition tagDefinition9 = tagDefinition5.setAppliesToReports((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest10 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest();
        java.lang.Object obj11 = timeAlignedDataServiceRequest10.getResponseType();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse12 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant13 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse14 = locationDescriptionListServiceResponse12.setNextToken(instant13);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest15 = timeAlignedDataServiceRequest10.setQueryFrom(instant13);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags16 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray20 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList21 = new java.util.ArrayList<java.lang.String>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList21, strArray20);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags23 = putLocationTags16.setTagUniqueIds(strList21);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest24 = timeAlignedDataServiceRequest10.setTimeSeriesOutputUnitIds(strList21);
        tagDefinition9.PickListValues = strList21;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetGroupedObservationsV2 getGroupedObservationsV2_26 = getGroupedObservationsV2_0.setLabResultLabAnalysisMethodIds((java.util.List<java.lang.String>) strList21);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetGroupedObservationsV2 getGroupedObservationsV2_28 = getGroupedObservationsV2_0.setCustomId("multipart/form-data; boundary=****231224c4-98ce-4e30-bd65-1d25287c4abe****");
        java.lang.String str29 = getGroupedObservationsV2_28.getActivityCustomId();
        java.lang.Double double30 = getGroupedObservationsV2_28.getMaxNumericResultValue();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationExportIIV2 getObservationExportIIV2_31 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationExportIIV2();
        java.util.List<java.lang.String> strList32 = getObservationExportIIV2_31.getCollectionMethodIds();
        java.util.List<java.lang.String> strList33 = getObservationExportIIV2_31.AnalyticalGroupIds;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationExportIIV2 getObservationExportIIV2_35 = getObservationExportIIV2_31.setNumericResultValue((java.lang.Double) 100.0d);
        java.util.List<java.lang.String> strList36 = getObservationExportIIV2_35.getAnalysisMethodIds();
        java.util.List<java.lang.String> strList37 = getObservationExportIIV2_35.getSpecimenIds();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.TimeSeriesPoint timeSeriesPoint38 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.TimeSeriesPoint();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.PointType pointType39 = timeSeriesPoint38.Type;
        java.time.Instant instant40 = timeSeriesPoint38.getTime();
        java.lang.Double double41 = timeSeriesPoint38.getValue();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportObservations getExportObservations42 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportObservations();
        java.util.List<java.lang.String> strList43 = getExportObservations42.getLabReportIds();
        java.lang.String str44 = getExportObservations42.DepthUnitCustomId;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetActivityTemplates getActivityTemplates45 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetActivityTemplates();
        java.lang.Object obj46 = getActivityTemplates45.getResponseType();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_47 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray49 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList50 = new java.util.ArrayList<java.lang.String>();
        boolean boolean51 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList50, strArray49);
        getObservationsV2_47.SpecimenIds = strList50;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags53 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray57 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList58 = new java.util.ArrayList<java.lang.String>();
        boolean boolean59 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList58, strArray57);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags60 = putLocationTags53.setTagUniqueIds(strList58);
        getObservationsV2_47.QualityControlTypes = strList58;
        getActivityTemplates45.Type = strList58;
        getExportObservations42.AnalyticalGroupIds = strList58;
        timeSeriesPoint38.Qualifiers = strList58;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationExportIIV2 getObservationExportIIV2_65 = getObservationExportIIV2_35.setDataClassifications((java.util.List<java.lang.String>) strList58);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetGroupedObservationsV2 getGroupedObservationsV2_66 = getGroupedObservationsV2_28.setSamplingLocationIds((java.util.List<java.lang.String>) strList58);
        java.util.List<java.lang.String> strList67 = getGroupedObservationsV2_66.getAnalysisMethodIds();
        org.junit.Assert.assertNotNull(tagDefinition3);
        org.junit.Assert.assertNotNull(tagDefinition5);
        org.junit.Assert.assertNotNull(tagDefinition7);
        org.junit.Assert.assertNotNull(tagDefinition9);
        org.junit.Assert.assertNotNull(obj11);
        org.junit.Assert.assertEquals(obj11.toString(), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj11), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj11), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertNotNull(instant13);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse14);
        org.junit.Assert.assertNotNull(timeAlignedDataServiceRequest15);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(putLocationTags23);
        org.junit.Assert.assertNotNull(timeAlignedDataServiceRequest24);
        org.junit.Assert.assertNotNull(getGroupedObservationsV2_26);
        org.junit.Assert.assertNotNull(getGroupedObservationsV2_28);
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertNull(double30);
        org.junit.Assert.assertNull(strList32);
        org.junit.Assert.assertNull(strList33);
        org.junit.Assert.assertNotNull(getObservationExportIIV2_35);
        org.junit.Assert.assertNull(strList36);
        org.junit.Assert.assertNull(strList37);
        org.junit.Assert.assertNull(pointType39);
        org.junit.Assert.assertNull(instant40);
        org.junit.Assert.assertNull(double41);
        org.junit.Assert.assertNull(strList43);
        org.junit.Assert.assertNull(str44);
        org.junit.Assert.assertNotNull(obj46);
        org.junit.Assert.assertEquals(obj46.toString(), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$SearchResultActivityTemplate");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj46), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$SearchResultActivityTemplate");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj46), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$SearchResultActivityTemplate");
        org.junit.Assert.assertNotNull(strArray49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNotNull(strArray57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(putLocationTags60);
        org.junit.Assert.assertNotNull(getObservationExportIIV2_65);
        org.junit.Assert.assertNotNull(getGroupedObservationsV2_66);
        org.junit.Assert.assertNull(strList67);
    }

    @Test
    public void test42511() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest85.test42511");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutLaboratory putLaboratory0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutLaboratory();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutLaboratory putLaboratory2 = putLaboratory0.setPhoneNumber("multipart/form-data; boundary=****7eff1774-b6b0-471a-961c-156c64359366****");
        java.lang.String str3 = putLaboratory0.getDescription();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutLaboratory putLaboratory5 = putLaboratory0.setPhoneNumber("http://MaxDurationhttp");
        putLaboratory5.PhoneNumber = "multipart/form-data; boundary=****1165d1f3-8b30-4f2e-8d0b-ffebab458859****";
        putLaboratory5.Id = "multipart/form-data; boundary=****871ccc7e-c9d9-467b-8c95-d6f9599f0e81****";
        putLaboratory5.PointOfContact = "multipart/form-data; boundary=****e0afd3ef-ab93-4371-a368-4a6f5ef58c71****";
        org.junit.Assert.assertNotNull(putLaboratory2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(putLaboratory5);
    }

    @Test
    public void test42512() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest85.test42512");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostUnit postUnit0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostUnit();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.UnitBase unitBase2 = postUnit0.setSymbol("9999-12-31T23:59:59.999Z");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.UnitBase unitBase4 = postUnit0.setBaseOffset((java.lang.Double) 100.0d);
        java.lang.Double double5 = postUnit0.BaseMultiplier;
        postUnit0.Symbol = "http";
        java.lang.String str8 = postUnit0.GroupIdentifier;
        postUnit0.GroupIdentifier = "multipart/form-data; boundary=****26835278-3e68-484a-a157-468aab2e69a2****";
        org.junit.Assert.assertNotNull(unitBase2);
        org.junit.Assert.assertNotNull(unitBase4);
        org.junit.Assert.assertNull(double5);
        org.junit.Assert.assertNull(str8);
    }

    @Test
    public void test42513() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest85.test42513");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutUserRoleBase putUserRoleBase0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutUserRoleBase();
        java.lang.String str1 = putUserRoleBase0.getUserUniqueId();
        putUserRoleBase0.UserUniqueId = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ";
        java.lang.String str4 = putUserRoleBase0.getRoleUniqueId();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutUserRoleBase putUserRoleBase6 = putUserRoleBase0.setRoleUniqueId("multipart/form-data; boundary=****2d077bad-cd27-4736-8ba0-2a8d8a85733d****");
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNotNull(putUserRoleBase6);
    }

    @Test
    public void test42514() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest85.test42514");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay1 = dischargeSummary0.getMeanGageHeight();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay2 = dischargeSummary0.Discharge;
        java.lang.Integer int3 = dischargeSummary0.getGradeCode();
        java.lang.String str4 = dischargeSummary0.getQualityAssuranceComments();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Attachment attachment5 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Attachment();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse6 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary7 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary9 = dischargeSummary7.setPublish((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse10 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant11 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse12 = locationDescriptionListServiceResponse10.setNextToken(instant11);
        dischargeSummary7.MeasurementTime = instant11;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse14 = locationDescriptionListServiceResponse6.setNextToken(instant11);
        java.time.Instant instant15 = locationDescriptionListServiceResponse6.getNextToken();
        attachment5.DateLastAccessed = instant15;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary17 = dischargeSummary0.setMeasurementStartTime(instant15);
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.GageHeightReading> gageHeightReadingList18 = dischargeSummary17.GageHeightReadings;
        java.lang.String str19 = dischargeSummary17.MeasurementId;
        org.junit.Assert.assertNull(quantityWithDisplay1);
        org.junit.Assert.assertNull(quantityWithDisplay2);
        org.junit.Assert.assertNull(int3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNotNull(dischargeSummary9);
        org.junit.Assert.assertNotNull(instant11);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse12);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse14);
        org.junit.Assert.assertNotNull(instant15);
        org.junit.Assert.assertNotNull(dischargeSummary17);
        org.junit.Assert.assertNull(gageHeightReadingList18);
        org.junit.Assert.assertNull(str19);
    }

    @Test
    public void test42515() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest85.test42515");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEvent importHistoryEvent0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEvent();
        java.time.OffsetDateTime offsetDateTime1 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEvent importHistoryEvent2 = importHistoryEvent0.setImportTime(offsetDateTime1);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportType importType3 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportType.OBSERVED_PROPERTIES_CSV;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEvent importHistoryEvent4 = importHistoryEvent2.setImportType(importType3);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UserProfile userProfile5 = importHistoryEvent2.ImportedBy;
        java.time.OffsetDateTime offsetDateTime6 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEvent importHistoryEvent7 = importHistoryEvent2.setImportTime(offsetDateTime6);
        java.util.List<java.lang.String> strList8 = importHistoryEvent2.getDomainObjectIds();
        org.junit.Assert.assertNotNull(importHistoryEvent2);
        org.junit.Assert.assertTrue("'" + importType3 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportType.OBSERVED_PROPERTIES_CSV + "'", importType3.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportType.OBSERVED_PROPERTIES_CSV));
        org.junit.Assert.assertNotNull(importHistoryEvent4);
        org.junit.Assert.assertNull(userProfile5);
        org.junit.Assert.assertNotNull(importHistoryEvent7);
        org.junit.Assert.assertNull(strList8);
    }

    @Test
    public void test42516() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest85.test42516");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSchedule putSchedule0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSchedule();
        java.time.OffsetDateTime offsetDateTime1 = putSchedule0.StartDate;
        java.time.OffsetDateTime offsetDateTime2 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSchedule putSchedule3 = putSchedule0.setEndDate(offsetDateTime2);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationGroup samplingLocationGroup4 = putSchedule3.getSamplingLocationGroup();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Schedule schedule5 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Schedule();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Schedule schedule7 = schedule5.setCustomId("");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SchedulePlannedActivity[] schedulePlannedActivityArray8 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SchedulePlannedActivity[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SchedulePlannedActivity> schedulePlannedActivityList9 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SchedulePlannedActivity>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SchedulePlannedActivity>) schedulePlannedActivityList9, schedulePlannedActivityArray8);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Schedule schedule11 = schedule7.setSchedulePlannedActivities((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SchedulePlannedActivity>) schedulePlannedActivityList9);
        putSchedule3.SchedulePlannedActivities = schedulePlannedActivityList9;
        java.time.OffsetDateTime offsetDateTime13 = putSchedule3.getEndDate();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostSchedule postSchedule14 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostSchedule();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationGroupSelectionType samplingLocationGroupSelectionType15 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationGroupSelectionType.ALL;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostSchedule postSchedule16 = postSchedule14.setSamplingLocationGroupSelectionType(samplingLocationGroupSelectionType15);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSchedule putSchedule17 = putSchedule3.setSamplingLocationGroupSelectionType(samplingLocationGroupSelectionType15);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabInstructionTemplate labInstructionTemplate18 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabInstructionTemplate();
        java.lang.String str19 = labInstructionTemplate18.HoldingTime;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSchedule putSchedule20 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSchedule();
        java.time.OffsetDateTime offsetDateTime21 = putSchedule20.StartDate;
        java.time.OffsetDateTime offsetDateTime22 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSchedule putSchedule23 = putSchedule20.setEndDate(offsetDateTime22);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes24 = putSchedule23.AuditAttributes;
        java.time.OffsetDateTime offsetDateTime25 = null;
        putSchedule23.LastGenerationDate = offsetDateTime25;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.RecurrenceDayMonthlyType recurrenceDayMonthlyType27 = putSchedule23.RecurrenceDayMonthly;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedFieldResult plannedFieldResult28 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedFieldResult();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes29 = plannedFieldResult28.AuditAttributes;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails30 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails32 = labResultDetails30.setAnalysisComment("/AQUARIUS/Acquisition/v2");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes33 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails34 = labResultDetails32.setAuditAttributes(auditAttributes33);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedFieldResult plannedFieldResult35 = plannedFieldResult28.setAuditAttributes(auditAttributes33);
        putSchedule23.AuditAttributes = auditAttributes33;
        labInstructionTemplate18.AuditAttributes = auditAttributes33;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSchedule putSchedule38 = putSchedule17.setAuditAttributes(auditAttributes33);
        org.junit.Assert.assertNull(offsetDateTime1);
        org.junit.Assert.assertNotNull(putSchedule3);
        org.junit.Assert.assertNull(samplingLocationGroup4);
        org.junit.Assert.assertNotNull(schedule7);
        org.junit.Assert.assertNotNull(schedulePlannedActivityArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(schedule11);
        org.junit.Assert.assertNull(offsetDateTime13);
        org.junit.Assert.assertTrue("'" + samplingLocationGroupSelectionType15 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationGroupSelectionType.ALL + "'", samplingLocationGroupSelectionType15.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationGroupSelectionType.ALL));
        org.junit.Assert.assertNotNull(postSchedule16);
        org.junit.Assert.assertNotNull(putSchedule17);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertNull(offsetDateTime21);
        org.junit.Assert.assertNotNull(putSchedule23);
        org.junit.Assert.assertNull(auditAttributes24);
        org.junit.Assert.assertNull(recurrenceDayMonthlyType27);
        org.junit.Assert.assertNull(auditAttributes29);
        org.junit.Assert.assertNotNull(labResultDetails32);
        org.junit.Assert.assertNotNull(labResultDetails34);
        org.junit.Assert.assertNotNull(plannedFieldResult35);
        org.junit.Assert.assertNotNull(putSchedule38);
    }

    @Test
    public void test42517() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest85.test42517");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TagDefinition tagDefinition0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TagDefinition();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TagValueType tagValueType1 = null;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TagDefinition tagDefinition2 = tagDefinition0.setValueType(tagValueType1);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TagDefinition tagDefinition4 = tagDefinition0.setAppliesToAttachments((java.lang.Boolean) false);
        java.lang.Boolean boolean5 = tagDefinition0.AppliesToAttachments;
        java.lang.String str6 = tagDefinition0.Key;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TagDefinition tagDefinition8 = tagDefinition0.setAppliesToLocationNotes((java.lang.Boolean) false);
        tagDefinition8.AppliesToLocations = true;
        tagDefinition8.AppliesToAttachments = false;
        org.junit.Assert.assertNotNull(tagDefinition2);
        org.junit.Assert.assertNotNull(tagDefinition4);
        org.junit.Assert.assertEquals("'" + boolean5 + "' != '" + false + "'", boolean5, false);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNotNull(tagDefinition8);
    }

    @Test
    public void test42518() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest85.test42518");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetChartDataV2 getChartDataV2_0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetChartDataV2();
        java.lang.String str1 = getChartDataV2_0.getActivityCustomId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetChartDataV2 getChartDataV2_3 = getChartDataV2_0.setFilterId("");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetChartDataV2 getChartDataV2_5 = getChartDataV2_0.setSort("yyyy'-'MM'-'dd'T'HH':'mm':'ss");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportObservations getExportObservations6 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportObservations();
        java.lang.Double double7 = getExportObservations6.NumericResultValue;
        java.util.List<java.lang.String> strList8 = getExportObservations6.LabResultLaboratoryIds;
        getExportObservations6.ImportHistoryEventId = "multipart/form-data; boundary=****d9f5d551-383a-4365-87fd-ae7094da6f3b****";
        java.util.List<java.lang.String> strList11 = getExportObservations6.QualityControlTypes;
        java.util.List<java.lang.String> strList12 = getExportObservations6.getMedia();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetActivities getActivities13 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetActivities();
        java.util.List<java.lang.String> strList14 = getActivities13.Media;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportObservations getExportObservations15 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportObservations();
        java.util.List<java.lang.String> strList16 = getExportObservations15.getLabReportIds();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationType putLocationType17 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationType();
        java.lang.Object obj18 = putLocationType17.getResponseType();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ReportListServiceRequest reportListServiceRequest19 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ReportListServiceRequest();
        reportListServiceRequest19.ReportTitle = "MinDuration";
        java.lang.String str22 = reportListServiceRequest19.getLocationUniqueId();
        java.time.Instant instant23 = null;
        reportListServiceRequest19.CreatedFrom = instant23;
        java.lang.String[] strArray37 = new java.lang.String[] { "https", "", "MinDuration", "/AQUARIUS/Acquisition/v2", "hi!", "", "2021.4.62.0", "MaxInstant", "http", "MinDuration", "2021.4.62.0", "/AQUARIUS" };
        java.util.ArrayList<java.lang.String> strList38 = new java.util.ArrayList<java.lang.String>();
        boolean boolean39 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList38, strArray37);
        reportListServiceRequest19.TagValues = strList38;
        putLocationType17.ExtendedAttributeDefinitionIds = strList38;
        getExportObservations15.SpecimenIds = strList38;
        getActivities13.Ids = strList38;
        getExportObservations6.SamplingContextTagIds = strList38;
        getChartDataV2_0.AnalysisMethodSimpleIds = strList38;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(getChartDataV2_3);
        org.junit.Assert.assertNotNull(getChartDataV2_5);
        org.junit.Assert.assertNull(double7);
        org.junit.Assert.assertNull(strList8);
        org.junit.Assert.assertNull(strList11);
        org.junit.Assert.assertNull(strList12);
        org.junit.Assert.assertNull(strList14);
        org.junit.Assert.assertNull(strList16);
        org.junit.Assert.assertNotNull(obj18);
        org.junit.Assert.assertEquals(obj18.toString(), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning$LocationType");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj18), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning$LocationType");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj18), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning$LocationType");
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
    }

    @Test
    public void test42519() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest85.test42519");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SearchResultActivity searchResultActivity0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SearchResultActivity();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Activity[] activityArray1 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Activity[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Activity> activityList2 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Activity>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Activity>) activityList2, activityArray1);
        searchResultActivity0.DomainObjects = activityList2;
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Activity> activityList5 = searchResultActivity0.DomainObjects;
        java.lang.String str6 = searchResultActivity0.getCursor();
        java.lang.String str7 = searchResultActivity0.Cursor;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SearchResultActivity searchResultActivity9 = searchResultActivity0.setTotalCount((java.lang.Integer) 4);
        org.junit.Assert.assertNotNull(activityArray1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(activityList5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(searchResultActivity9);
    }

    @Test
    public void test42520() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest85.test42520");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportObservations getExportObservations0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportObservations();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_1 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray4 = new java.lang.String[] { "", "" };
        java.util.ArrayList<java.lang.String> strList5 = new java.util.ArrayList<java.lang.String>();
        boolean boolean6 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList5, strArray4);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_7 = getObservationsV2_1.setDataClassifications((java.util.List<java.lang.String>) strList5);
        java.time.Instant instant8 = getObservationsV2_1.getStartObservedTime();
        getObservationsV2_1.MinNumericResultValue = (-1.0d);
        java.util.List<java.lang.String> strList11 = null;
        getObservationsV2_1.SamplingContextTagIds = strList11;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescription locationDescription13 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescription();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescription locationDescription15 = locationDescription13.setIdentifier("");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ControlConditionActivity controlConditionActivity16 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ControlConditionActivity();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ControlCleanedType controlCleanedType17 = null;
        controlConditionActivity16.ControlCleaned = controlCleanedType17;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse19 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant20 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse21 = locationDescriptionListServiceResponse19.setNextToken(instant20);
        controlConditionActivity16.DateCleaned = instant20;
        locationDescription15.LastModified = instant20;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_24 = getObservationsV2_1.setStartResultTime(instant20);
        getExportObservations0.StartObservedTime = instant20;
        java.util.List<java.lang.String> strList26 = getExportObservations0.getLabReportIds();
        java.lang.String str27 = getExportObservations0.Sort;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutUser putUser28 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutUser();
        putUser28.CustomId = "POST";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetActivities getActivities31 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetActivities();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse32 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary33 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary35 = dischargeSummary33.setPublish((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse36 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant37 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse38 = locationDescriptionListServiceResponse36.setNextToken(instant37);
        dischargeSummary33.MeasurementTime = instant37;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse40 = locationDescriptionListServiceResponse32.setNextToken(instant37);
        java.time.Instant instant41 = locationDescriptionListServiceResponse32.getNextToken();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetActivities getActivities42 = getActivities31.setToStartTime(instant41);
        java.lang.String str43 = getActivities42.getSort();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetActivities getActivities45 = getActivities42.setLimit((java.lang.Integer) 1);
        getActivities45.Cursor = "";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_48 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray51 = new java.lang.String[] { "", "" };
        java.util.ArrayList<java.lang.String> strList52 = new java.util.ArrayList<java.lang.String>();
        boolean boolean53 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList52, strArray51);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_54 = getObservationsV2_48.setDataClassifications((java.util.List<java.lang.String>) strList52);
        java.util.List<java.lang.String> strList55 = getObservationsV2_48.ResultGrades;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary56 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        dischargeSummary56.Reviewer = "";
        java.time.Instant instant59 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        dischargeSummary56.MeasurementTime = instant59;
        getObservationsV2_48.StartResultTime = instant59;
        java.lang.String[] strArray71 = new java.lang.String[] { "https", "/AQUARIUS/Provisioning/v1", "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ", "2021.4.62.0", "hi!", "2021.4.62.0", "2021.4.62.0", "/AQUARIUS/Acquisition/v2", "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ" };
        java.util.ArrayList<java.lang.String> strList72 = new java.util.ArrayList<java.lang.String>();
        boolean boolean73 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList72, strArray71);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_74 = getObservationsV2_48.setAnalyticalGroupIds((java.util.List<java.lang.String>) strList72);
        getActivities45.ActivityTypes = strList72;
        putUser28.AccessGroups = strList72;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportObservations getExportObservations77 = getExportObservations0.setAnalyticalGroupIds((java.util.List<java.lang.String>) strList72);
        java.util.List<java.lang.String> strList78 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportObservations getExportObservations79 = getExportObservations77.setAnalyticalGroupIds(strList78);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportObservations getExportObservations81 = getExportObservations77.setDepthUnitId("'.'SSSSSSS");
        java.util.List<java.lang.String> strList82 = getExportObservations77.getLabReportIds();
        org.junit.Assert.assertNotNull(strArray4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(getObservationsV2_7);
        org.junit.Assert.assertNull(instant8);
        org.junit.Assert.assertNotNull(locationDescription15);
        org.junit.Assert.assertNotNull(instant20);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse21);
        org.junit.Assert.assertNotNull(getObservationsV2_24);
        org.junit.Assert.assertNull(strList26);
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertNotNull(dischargeSummary35);
        org.junit.Assert.assertNotNull(instant37);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse38);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse40);
        org.junit.Assert.assertNotNull(instant41);
        org.junit.Assert.assertNotNull(getActivities42);
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertNotNull(getActivities45);
        org.junit.Assert.assertNotNull(strArray51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(getObservationsV2_54);
        org.junit.Assert.assertNull(strList55);
        org.junit.Assert.assertNotNull(instant59);
        org.junit.Assert.assertNotNull(strArray71);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertNotNull(getObservationsV2_74);
        org.junit.Assert.assertNotNull(getExportObservations77);
        org.junit.Assert.assertNotNull(getExportObservations79);
        org.junit.Assert.assertNotNull(getExportObservations81);
        org.junit.Assert.assertNull(strList82);
    }

    @Test
    public void test42521() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest85.test42521");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItem importItem0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_1 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray3 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList4 = new java.util.ArrayList<java.lang.String>();
        boolean boolean5 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList4, strArray3);
        getObservationsV2_1.SpecimenIds = strList4;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags7 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray11 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList12 = new java.util.ArrayList<java.lang.String>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList12, strArray11);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags14 = putLocationTags7.setTagUniqueIds(strList12);
        getObservationsV2_1.QualityControlTypes = strList12;
        java.util.List<java.lang.String> strList16 = getObservationsV2_1.getLabReportIds();
        importItem0.Errors = getObservationsV2_1;
        java.lang.Object obj18 = importItem0.getExistingItem();
        java.util.List<java.lang.String> strList19 = importItem0.getFields();
        importItem0.Errors = '4';
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Uncertainty uncertainty22 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Uncertainty();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.UncertaintyType uncertaintyType23 = null;
        uncertainty22.UncertaintyType = uncertaintyType23;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay25 = uncertainty22.getQuantitativeUncertainty();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Uncertainty uncertainty26 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Uncertainty();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QualitativeUncertaintyType qualitativeUncertaintyType27 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QualitativeUncertaintyType.Excellent;
        uncertainty26.QualitativeUncertainty = qualitativeUncertaintyType27;
        uncertainty22.QualitativeUncertainty = qualitativeUncertaintyType27;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QualitativeUncertaintyType qualitativeUncertaintyType30 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QualitativeUncertaintyType.Excellent;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Uncertainty uncertainty31 = uncertainty22.setQualitativeUncertainty(qualitativeUncertaintyType30);
        importItem0.Item = qualitativeUncertaintyType30;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostSpreadsheetTemplate postSpreadsheetTemplate33 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostSpreadsheetTemplate();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostSpreadsheetTemplate postSpreadsheetTemplate35 = postSpreadsheetTemplate33.setId("/AQUARIUS/Acquisition/v2");
        java.lang.Object obj36 = postSpreadsheetTemplate35.getResponseType();
        importItem0.Errors = obj36;
        importItem0.Input = "0001-01-01T00:00:00.0000000Z";
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(putLocationTags14);
        org.junit.Assert.assertNull(strList16);
        org.junit.Assert.assertNull(obj18);
        org.junit.Assert.assertNull(strList19);
        org.junit.Assert.assertNull(doubleWithDisplay25);
        org.junit.Assert.assertTrue("'" + qualitativeUncertaintyType27 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QualitativeUncertaintyType.Excellent + "'", qualitativeUncertaintyType27.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QualitativeUncertaintyType.Excellent));
        org.junit.Assert.assertTrue("'" + qualitativeUncertaintyType30 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QualitativeUncertaintyType.Excellent + "'", qualitativeUncertaintyType30.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QualitativeUncertaintyType.Excellent));
        org.junit.Assert.assertNotNull(uncertainty31);
        org.junit.Assert.assertNotNull(postSpreadsheetTemplate35);
        org.junit.Assert.assertNotNull(obj36);
        org.junit.Assert.assertEquals(obj36.toString(), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$SpreadsheetTemplate");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj36), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$SpreadsheetTemplate");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj36), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$SpreadsheetTemplate");
    }

    @Test
    public void test42522() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest85.test42522");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.TimeSeriesPoint timeSeriesPoint0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.TimeSeriesPoint();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.PointType pointType1 = timeSeriesPoint0.Type;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Setting setting2 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Setting();
        java.lang.String str3 = setting2.getKey();
        java.lang.String str4 = setting2.getDescription();
        java.lang.String str5 = setting2.Value;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary6 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary8 = dischargeSummary6.setMeanGageHeightMethod("hi!");
        java.lang.String str9 = dischargeSummary8.MeasurementId;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary11 = dischargeSummary8.setDischargeMethod("yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSSSSSZZZZZ");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest12 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest();
        java.lang.Object obj13 = timeAlignedDataServiceRequest12.getResponseType();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Sensor sensor14 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Sensor();
        java.time.Instant instant15 = sensor14.getLastModifiedUtc();
        java.time.Instant instant16 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Sensor sensor17 = sensor14.setLastModifiedUtc(instant16);
        java.time.Instant instant18 = sensor14.LastModifiedUtc;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest19 = timeAlignedDataServiceRequest12.setQueryTo(instant18);
        dischargeSummary11.MeasurementStartTime = instant18;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Setting setting21 = setting2.setLastModifiedTime(instant18);
        java.time.Instant instant22 = setting2.getLastModifiedTime();
        timeSeriesPoint0.Time = instant22;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.TimeSeriesPoint timeSeriesPoint24 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.TimeSeriesPoint();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.PointType pointType25 = timeSeriesPoint24.Type;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.PointType pointType26 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.PointType.Gap;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.TimeSeriesPoint timeSeriesPoint27 = timeSeriesPoint24.setType(pointType26);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.TimeSeriesPoint timeSeriesPoint28 = timeSeriesPoint0.setType(pointType26);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.TimeSeriesPoint timeSeriesPoint29 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.TimeSeriesPoint();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.PointType pointType30 = timeSeriesPoint29.Type;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.PointType pointType31 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.PointType.Gap;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.TimeSeriesPoint timeSeriesPoint32 = timeSeriesPoint29.setType(pointType31);
        java.lang.Double double33 = timeSeriesPoint29.getValue();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.PointType pointType34 = timeSeriesPoint29.getType();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.TimeSeriesPoint timeSeriesPoint35 = timeSeriesPoint0.setType(pointType34);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DownchainProcessorListByRatingModelServiceRequest downchainProcessorListByRatingModelServiceRequest36 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DownchainProcessorListByRatingModelServiceRequest();
        java.time.Instant instant37 = null;
        downchainProcessorListByRatingModelServiceRequest36.QueryFrom = instant37;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_39 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray42 = new java.lang.String[] { "", "" };
        java.util.ArrayList<java.lang.String> strList43 = new java.util.ArrayList<java.lang.String>();
        boolean boolean44 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList43, strArray42);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_45 = getObservationsV2_39.setDataClassifications((java.util.List<java.lang.String>) strList43);
        getObservationsV2_45.DepthUnitCustomId = "hi!";
        java.lang.String str48 = getObservationsV2_45.CustomId;
        java.util.List<java.lang.String> strList49 = getObservationsV2_45.getSearch();
        java.util.List<java.lang.String> strList50 = getObservationsV2_45.getAnalysisMethodSimpleIds();
        java.util.List<java.lang.String> strList51 = getObservationsV2_45.ActivityIds;
        java.lang.Object obj52 = getObservationsV2_45.getResponseType();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MethodOperation methodOperation53 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MethodOperation();
        java.time.Instant instant54 = methodOperation53.getDateAppliedUtc();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary55 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary57 = dischargeSummary55.setPublish((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse58 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant59 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse60 = locationDescriptionListServiceResponse58.setNextToken(instant59);
        dischargeSummary55.MeasurementTime = instant59;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MethodOperation methodOperation62 = methodOperation53.setDateAppliedUtc(instant59);
        methodOperation53.Comments = "/AQUARIUS";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MethodOperation methodOperation66 = methodOperation53.setStackPosition((java.lang.Integer) 0);
        java.time.Instant instant67 = methodOperation53.DateAppliedUtc;
        getObservationsV2_45.EndResultTime = instant67;
        downchainProcessorListByRatingModelServiceRequest36.QueryTo = instant67;
        downchainProcessorListByRatingModelServiceRequest36.RatingModelIdentifier = "multipart/form-data; boundary=****3dee2050-7d6c-400f-bd51-383a1324f5dd****";
        java.time.Instant instant72 = downchainProcessorListByRatingModelServiceRequest36.getQueryTo();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.TimeSeriesPoint timeSeriesPoint73 = timeSeriesPoint35.setTime(instant72);
        java.lang.Integer int74 = timeSeriesPoint35.getGradeCode();
        java.lang.Double double75 = timeSeriesPoint35.getValue();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.TimeSeriesPoint timeSeriesPoint77 = timeSeriesPoint35.setGradeCode((java.lang.Integer) (-1));
        org.junit.Assert.assertNull(pointType1);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(dischargeSummary8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(dischargeSummary11);
        org.junit.Assert.assertNotNull(obj13);
        org.junit.Assert.assertEquals(obj13.toString(), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj13), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj13), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertNull(instant15);
        org.junit.Assert.assertNotNull(instant16);
        org.junit.Assert.assertNotNull(sensor17);
        org.junit.Assert.assertNotNull(instant18);
        org.junit.Assert.assertNotNull(timeAlignedDataServiceRequest19);
        org.junit.Assert.assertNotNull(setting21);
        org.junit.Assert.assertNotNull(instant22);
        org.junit.Assert.assertNull(pointType25);
        org.junit.Assert.assertTrue("'" + pointType26 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.PointType.Gap + "'", pointType26.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.PointType.Gap));
        org.junit.Assert.assertNotNull(timeSeriesPoint27);
        org.junit.Assert.assertNotNull(timeSeriesPoint28);
        org.junit.Assert.assertNull(pointType30);
        org.junit.Assert.assertTrue("'" + pointType31 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.PointType.Gap + "'", pointType31.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.PointType.Gap));
        org.junit.Assert.assertNotNull(timeSeriesPoint32);
        org.junit.Assert.assertNull(double33);
        org.junit.Assert.assertTrue("'" + pointType34 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.PointType.Gap + "'", pointType34.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.PointType.Gap));
        org.junit.Assert.assertNotNull(timeSeriesPoint35);
        org.junit.Assert.assertNotNull(strArray42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(getObservationsV2_45);
        org.junit.Assert.assertNull(str48);
        org.junit.Assert.assertNull(strList49);
        org.junit.Assert.assertNull(strList50);
        org.junit.Assert.assertNull(strList51);
        org.junit.Assert.assertNotNull(obj52);
        org.junit.Assert.assertEquals(obj52.toString(), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$SearchResultObservation");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj52), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$SearchResultObservation");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj52), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$SearchResultObservation");
        org.junit.Assert.assertNull(instant54);
        org.junit.Assert.assertNotNull(dischargeSummary57);
        org.junit.Assert.assertNotNull(instant59);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse60);
        org.junit.Assert.assertNotNull(methodOperation62);
        org.junit.Assert.assertNotNull(methodOperation66);
        org.junit.Assert.assertNotNull(instant67);
        org.junit.Assert.assertNotNull(instant72);
        org.junit.Assert.assertNotNull(timeSeriesPoint73);
        org.junit.Assert.assertNull(int74);
        org.junit.Assert.assertNull(double75);
        org.junit.Assert.assertNotNull(timeSeriesPoint77);
    }

    @Test
    public void test42523() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest85.test42523");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ActivityWithDetails activityWithDetails0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ActivityWithDetails();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.FieldVisit fieldVisit1 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.FieldVisit();
        java.time.OffsetDateTime offsetDateTime2 = fieldVisit1.getStartTime();
        java.time.OffsetDateTime offsetDateTime3 = fieldVisit1.StartTime;
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedFieldResult> plannedFieldResultList4 = fieldVisit1.getPlannedFieldResults();
        activityWithDetails0.FieldVisit = fieldVisit1;
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity> plannedActivityList6 = fieldVisit1.getPlannedActivities();
        org.junit.Assert.assertNull(offsetDateTime2);
        org.junit.Assert.assertNull(offsetDateTime3);
        org.junit.Assert.assertNull(plannedFieldResultList4);
        org.junit.Assert.assertNull(plannedActivityList6);
    }

    @Test
    public void test42524() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest85.test42524");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CalibrationCheck calibrationCheck0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CalibrationCheck();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CalibrationCheckType calibrationCheckType1 = calibrationCheck0.getCalibrationCheckType();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay2 = calibrationCheck0.Value;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse3 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary4 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary6 = dischargeSummary4.setPublish((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse7 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant8 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse9 = locationDescriptionListServiceResponse7.setNextToken(instant8);
        dischargeSummary4.MeasurementTime = instant8;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse11 = locationDescriptionListServiceResponse3.setNextToken(instant8);
        java.time.Instant instant12 = locationDescriptionListServiceResponse3.getNextToken();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CalibrationCheck calibrationCheck13 = calibrationCheck0.setTime(instant12);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Reading reading14 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Reading();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary15 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary17 = dischargeSummary15.setPublish((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay18 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay();
        dischargeSummary17.DifferenceDuringVisit = doubleWithDisplay18;
        reading14.Value = doubleWithDisplay18;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CalibrationCheck calibrationCheck21 = calibrationCheck13.setValue(doubleWithDisplay18);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingCurveListServiceRequest ratingCurveListServiceRequest22 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingCurveListServiceRequest();
        java.time.Instant instant23 = ratingCurveListServiceRequest22.QueryTo;
        java.lang.String str24 = ratingCurveListServiceRequest22.getRatingModelIdentifier();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse25 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary26 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary28 = dischargeSummary26.setPublish((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse29 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant30 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse31 = locationDescriptionListServiceResponse29.setNextToken(instant30);
        dischargeSummary26.MeasurementTime = instant30;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse33 = locationDescriptionListServiceResponse25.setNextToken(instant30);
        java.time.Instant instant34 = locationDescriptionListServiceResponse25.getNextToken();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest35 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ControlConditionActivity controlConditionActivity36 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ControlConditionActivity();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ControlCleanedType controlCleanedType37 = null;
        controlConditionActivity36.ControlCleaned = controlCleanedType37;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse39 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant40 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse41 = locationDescriptionListServiceResponse39.setNextToken(instant40);
        controlConditionActivity36.DateCleaned = instant40;
        timeAlignedDataServiceRequest35.QueryFrom = instant40;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse44 = locationDescriptionListServiceResponse25.setNextToken(instant40);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingCurveListServiceRequest ratingCurveListServiceRequest45 = ratingCurveListServiceRequest22.setQueryTo(instant40);
        java.time.Instant instant46 = ratingCurveListServiceRequest45.getQueryTo();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CalibrationCheck calibrationCheck47 = calibrationCheck21.setTime(instant46);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity pointVelocityDischargeActivity48 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity();
        java.lang.String str49 = pointVelocityDischargeActivity48.SoftwareVersion;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity pointVelocityDischargeActivity51 = pointVelocityDischargeActivity48.setIsValid((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity pointVelocityDischargeActivity53 = pointVelocityDischargeActivity48.setMethodCoefficientUsed((java.lang.Boolean) true);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Vertical vertical54 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Vertical();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay55 = vertical54.SoundedDepth;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VerticalType verticalType56 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VerticalType.StartEdgeNoWaterBefore;
        vertical54.VerticalType = verticalType56;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VelocityObservation velocityObservation58 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VelocityObservation();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DeploymentMethodType deploymentMethodType59 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DeploymentMethodType.Unknown;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VelocityObservation velocityObservation60 = velocityObservation58.setDeploymentMethod(deploymentMethodType59);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VelocityObservation velocityObservation61 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VelocityObservation();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DeploymentMethodType deploymentMethodType62 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DeploymentMethodType.Unknown;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VelocityObservation velocityObservation63 = velocityObservation61.setDeploymentMethod(deploymentMethodType62);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VelocityDepthObservation[] velocityDepthObservationArray64 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VelocityDepthObservation[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VelocityDepthObservation> velocityDepthObservationList65 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VelocityDepthObservation>();
        boolean boolean66 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VelocityDepthObservation>) velocityDepthObservationList65, velocityDepthObservationArray64);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VelocityObservation velocityObservation67 = velocityObservation63.setObservations((java.util.List<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VelocityDepthObservation>) velocityDepthObservationList65);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VelocityObservation velocityObservation68 = velocityObservation58.setObservations((java.util.List<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VelocityDepthObservation>) velocityDepthObservationList65);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Vertical vertical69 = vertical54.setVelocityObservation(velocityObservation58);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DatumConvertedQuantityWithDisplay datumConvertedQuantityWithDisplay70 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DatumConvertedQuantityWithDisplay();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Vertical vertical71 = vertical69.setEffectiveDepth((com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay) datumConvertedQuantityWithDisplay70);
        pointVelocityDischargeActivity48.Width = datumConvertedQuantityWithDisplay70;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CalibrationCheck calibrationCheck73 = calibrationCheck47.setValue((com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay) datumConvertedQuantityWithDisplay70);
        java.lang.String str74 = calibrationCheck47.getParameterId();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CalibrationCheck calibrationCheck76 = calibrationCheck47.setSerialNumber("multipart/form-data; boundary=****231224c4-98ce-4e30-bd65-1d25287c4abe****");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.StandardDetails standardDetails77 = calibrationCheck47.getStandardDetails();
        org.junit.Assert.assertNull(calibrationCheckType1);
        org.junit.Assert.assertNull(doubleWithDisplay2);
        org.junit.Assert.assertNotNull(dischargeSummary6);
        org.junit.Assert.assertNotNull(instant8);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse9);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse11);
        org.junit.Assert.assertNotNull(instant12);
        org.junit.Assert.assertNotNull(calibrationCheck13);
        org.junit.Assert.assertNotNull(dischargeSummary17);
        org.junit.Assert.assertNotNull(calibrationCheck21);
        org.junit.Assert.assertNull(instant23);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNotNull(dischargeSummary28);
        org.junit.Assert.assertNotNull(instant30);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse31);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse33);
        org.junit.Assert.assertNotNull(instant34);
        org.junit.Assert.assertNotNull(instant40);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse41);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse44);
        org.junit.Assert.assertNotNull(ratingCurveListServiceRequest45);
        org.junit.Assert.assertNotNull(instant46);
        org.junit.Assert.assertNotNull(calibrationCheck47);
        org.junit.Assert.assertNull(str49);
        org.junit.Assert.assertNotNull(pointVelocityDischargeActivity51);
        org.junit.Assert.assertNotNull(pointVelocityDischargeActivity53);
        org.junit.Assert.assertNull(quantityWithDisplay55);
        org.junit.Assert.assertTrue("'" + verticalType56 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VerticalType.StartEdgeNoWaterBefore + "'", verticalType56.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VerticalType.StartEdgeNoWaterBefore));
        org.junit.Assert.assertTrue("'" + deploymentMethodType59 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DeploymentMethodType.Unknown + "'", deploymentMethodType59.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DeploymentMethodType.Unknown));
        org.junit.Assert.assertNotNull(velocityObservation60);
        org.junit.Assert.assertTrue("'" + deploymentMethodType62 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DeploymentMethodType.Unknown + "'", deploymentMethodType62.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DeploymentMethodType.Unknown));
        org.junit.Assert.assertNotNull(velocityObservation63);
        org.junit.Assert.assertNotNull(velocityDepthObservationArray64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(velocityObservation67);
        org.junit.Assert.assertNotNull(velocityObservation68);
        org.junit.Assert.assertNotNull(vertical69);
        org.junit.Assert.assertNotNull(vertical71);
        org.junit.Assert.assertNotNull(calibrationCheck73);
        org.junit.Assert.assertNull(str74);
        org.junit.Assert.assertNotNull(calibrationCheck76);
        org.junit.Assert.assertNull(standardDetails77);
    }

    @Test
    public void test42525() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest85.test42525");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostTaxon postTaxon0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostTaxon();
        postTaxon0.ItisUrl = "MinInstant";
        java.lang.String str3 = postTaxon0.getCommonName();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostTaxon postTaxon5 = postTaxon0.setScientificName("http");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostTaxon postTaxon7 = postTaxon5.setItisComment("9999-12-31T23:59:59.999Z");
        java.lang.String str8 = postTaxon7.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostTaxon postTaxon10 = postTaxon7.setScientificName("****231224c4-98ce-4e30-bd65-1d25287c4abe****");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostTaxon postTaxon12 = postTaxon10.setId("MinInstant");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes13 = postTaxon12.getAuditAttributes();
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(postTaxon5);
        org.junit.Assert.assertNotNull(postTaxon7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(postTaxon10);
        org.junit.Assert.assertNotNull(postTaxon12);
        org.junit.Assert.assertNull(auditAttributes13);
    }

    @Test
    public void test42526() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest85.test42526");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutCollectionMethod putCollectionMethod0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutCollectionMethod();
        java.lang.String str1 = putCollectionMethod0.IdentifierOrganization;
        putCollectionMethod0.Id = "multipart/form-data; boundary=****9fadde69-3f13-40c4-a87c-0f3f51c2dd35****";
        java.lang.Object obj4 = putCollectionMethod0.getResponseType();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(obj4);
        org.junit.Assert.assertEquals(obj4.toString(), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$CollectionMethod");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj4), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$CollectionMethod");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj4), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$CollectionMethod");
    }

    @Test
    public void test42527() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest85.test42527");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary2 = dischargeSummary0.setMeanGageHeightMethod("hi!");
        java.lang.String str3 = dischargeSummary2.MeasurementId;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay4 = dischargeSummary2.DifferenceDuringVisit;
        dischargeSummary2.MeasurementId = "/AQUARIUS/Provisioning/v1";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MonitoringMethodListServiceResponse monitoringMethodListServiceResponse7 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MonitoringMethodListServiceResponse();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CalibrationCheck calibrationCheck8 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CalibrationCheck();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CalibrationCheckType calibrationCheckType9 = calibrationCheck8.getCalibrationCheckType();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay10 = calibrationCheck8.Value;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse11 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary12 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary14 = dischargeSummary12.setPublish((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse15 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant16 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse17 = locationDescriptionListServiceResponse15.setNextToken(instant16);
        dischargeSummary12.MeasurementTime = instant16;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse19 = locationDescriptionListServiceResponse11.setNextToken(instant16);
        java.time.Instant instant20 = locationDescriptionListServiceResponse11.getNextToken();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CalibrationCheck calibrationCheck21 = calibrationCheck8.setTime(instant20);
        monitoringMethodListServiceResponse7.ResponseTime = instant20;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CorrectionListServiceRequest correctionListServiceRequest23 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CorrectionListServiceRequest();
        correctionListServiceRequest23.TimeSeriesUniqueId = "/AQUARIUS";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse26 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary27 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary29 = dischargeSummary27.setPublish((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse30 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant31 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse32 = locationDescriptionListServiceResponse30.setNextToken(instant31);
        dischargeSummary27.MeasurementTime = instant31;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse34 = locationDescriptionListServiceResponse26.setNextToken(instant31);
        java.time.Instant instant35 = locationDescriptionListServiceResponse26.getNextToken();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest36 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ControlConditionActivity controlConditionActivity37 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ControlConditionActivity();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ControlCleanedType controlCleanedType38 = null;
        controlConditionActivity37.ControlCleaned = controlCleanedType38;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse40 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant41 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse42 = locationDescriptionListServiceResponse40.setNextToken(instant41);
        controlConditionActivity37.DateCleaned = instant41;
        timeAlignedDataServiceRequest36.QueryFrom = instant41;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse45 = locationDescriptionListServiceResponse26.setNextToken(instant41);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CorrectionListServiceRequest correctionListServiceRequest46 = correctionListServiceRequest23.setQueryTo(instant41);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse47 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary48 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary50 = dischargeSummary48.setPublish((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse51 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant52 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse53 = locationDescriptionListServiceResponse51.setNextToken(instant52);
        dischargeSummary48.MeasurementTime = instant52;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse55 = locationDescriptionListServiceResponse47.setNextToken(instant52);
        java.time.Instant instant56 = locationDescriptionListServiceResponse47.getNextToken();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest57 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ControlConditionActivity controlConditionActivity58 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ControlConditionActivity();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ControlCleanedType controlCleanedType59 = null;
        controlConditionActivity58.ControlCleaned = controlCleanedType59;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse61 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant62 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse63 = locationDescriptionListServiceResponse61.setNextToken(instant62);
        controlConditionActivity58.DateCleaned = instant62;
        timeAlignedDataServiceRequest57.QueryFrom = instant62;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse66 = locationDescriptionListServiceResponse47.setNextToken(instant62);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CorrectionListServiceRequest correctionListServiceRequest67 = correctionListServiceRequest23.setQueryTo(instant62);
        monitoringMethodListServiceResponse7.ResponseTime = instant62;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary69 = dischargeSummary2.setMeasurementEndTime(instant62);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary70 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        dischargeSummary70.Reviewer = "";
        java.time.Instant instant73 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        dischargeSummary70.MeasurementTime = instant73;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.BaseFlowType baseFlowType75 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.BaseFlowType.BaseFlow;
        dischargeSummary70.BaseFlow = baseFlowType75;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeUncertainty dischargeUncertainty77 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeUncertainty();
        dischargeSummary70.DischargeUncertainty = dischargeUncertainty77;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary79 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay80 = dischargeSummary79.getMeanGageHeight();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay81 = dischargeSummary79.Discharge;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay82 = dischargeSummary79.DurationInHours;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay83 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay85 = doubleWithDisplay83.setNumeric((java.lang.Double) 10.0d);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary86 = dischargeSummary79.setDurationInHours(doubleWithDisplay83);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeUncertainty dischargeUncertainty87 = dischargeUncertainty77.setQuantitativeUncertainty(doubleWithDisplay83);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.UncertaintyType uncertaintyType88 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.UncertaintyType.Qualitative;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeUncertainty dischargeUncertainty89 = dischargeUncertainty87.setActiveUncertaintyType(uncertaintyType88);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.UncertaintyType uncertaintyType90 = null;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeUncertainty dischargeUncertainty91 = dischargeUncertainty89.setActiveUncertaintyType(uncertaintyType90);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay92 = dischargeUncertainty89.QuantitativeUncertainty;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary93 = dischargeSummary2.setDifferenceDuringVisit(doubleWithDisplay92);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.BaseFlowType baseFlowType94 = dischargeSummary93.getBaseFlow();
        org.junit.Assert.assertNotNull(dischargeSummary2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(doubleWithDisplay4);
        org.junit.Assert.assertNull(calibrationCheckType9);
        org.junit.Assert.assertNull(doubleWithDisplay10);
        org.junit.Assert.assertNotNull(dischargeSummary14);
        org.junit.Assert.assertNotNull(instant16);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse17);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse19);
        org.junit.Assert.assertNotNull(instant20);
        org.junit.Assert.assertNotNull(calibrationCheck21);
        org.junit.Assert.assertNotNull(dischargeSummary29);
        org.junit.Assert.assertNotNull(instant31);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse32);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse34);
        org.junit.Assert.assertNotNull(instant35);
        org.junit.Assert.assertNotNull(instant41);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse42);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse45);
        org.junit.Assert.assertNotNull(correctionListServiceRequest46);
        org.junit.Assert.assertNotNull(dischargeSummary50);
        org.junit.Assert.assertNotNull(instant52);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse53);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse55);
        org.junit.Assert.assertNotNull(instant56);
        org.junit.Assert.assertNotNull(instant62);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse63);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse66);
        org.junit.Assert.assertNotNull(correctionListServiceRequest67);
        org.junit.Assert.assertNotNull(dischargeSummary69);
        org.junit.Assert.assertNotNull(instant73);
        org.junit.Assert.assertTrue("'" + baseFlowType75 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.BaseFlowType.BaseFlow + "'", baseFlowType75.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.BaseFlowType.BaseFlow));
        org.junit.Assert.assertNull(quantityWithDisplay80);
        org.junit.Assert.assertNull(quantityWithDisplay81);
        org.junit.Assert.assertNull(doubleWithDisplay82);
        org.junit.Assert.assertNotNull(doubleWithDisplay85);
        org.junit.Assert.assertNotNull(dischargeSummary86);
        org.junit.Assert.assertNotNull(dischargeUncertainty87);
        org.junit.Assert.assertTrue("'" + uncertaintyType88 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.UncertaintyType.Qualitative + "'", uncertaintyType88.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.UncertaintyType.Qualitative));
        org.junit.Assert.assertNotNull(dischargeUncertainty89);
        org.junit.Assert.assertNotNull(dischargeUncertainty91);
        org.junit.Assert.assertNotNull(doubleWithDisplay92);
        org.junit.Assert.assertNotNull(dischargeSummary93);
        org.junit.Assert.assertNull(baseFlowType94);
    }

    @Test
    public void test42528() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest85.test42528");
        java.util.Map<java.lang.Object, java.lang.reflect.Type> objMap2 = null;
        com.aquaticinformatics.aquarius.sdk.timeseries.FieldNamer fieldNamer3 = new com.aquaticinformatics.aquarius.sdk.timeseries.FieldNamer();
        com.aquaticinformatics.aquarius.sdk.helpers.SdkServiceClient sdkServiceClient5 = com.aquaticinformatics.aquarius.sdk.helpers.SdkServiceClient.Create("multipart/form-data; boundary=****bbcf5f9e-6ccf-4b63-91ab-6e645caf02af****", "0001-01-01T00:00:00.000Z", objMap2, (com.aquaticinformatics.aquarius.sdk.helpers.IFieldNamer) fieldNamer3, false);
        java.net.HttpURLConnection httpURLConnection7 = sdkServiceClient5.delete("multipart/form-data; boundary=****f2ce0d54-dac7-4cd0-b74f-1024089261f9****");
        boolean boolean8 = sdkServiceClient5.getAlwaysSendBasicAuthHeaders();
        net.servicestack.client.ConnectionFilter connectionFilter9 = null;
        sdkServiceClient5.ResponseFilter = connectionFilter9;
        net.servicestack.client.ConnectionFilter connectionFilter11 = sdkServiceClient5.ResponseFilter;
        java.net.HttpURLConnection httpURLConnection13 = sdkServiceClient5.get("****82feecb1-0c54-43a1-b60a-302dc897d638****");
        org.junit.Assert.assertNotNull(sdkServiceClient5);
        org.junit.Assert.assertNotNull(httpURLConnection7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(connectionFilter11);
        org.junit.Assert.assertNotNull(httpURLConnection13);
    }

    @Test
    public void test42529() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest85.test42529");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Activity activity0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Activity();
        java.time.OffsetDateTime offsetDateTime1 = activity0.getStartTime();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Activity activity3 = activity0.setLoggerFileName("'.'SSSSSSS");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocation samplingLocation4 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocation();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricConfiguration metricConfiguration5 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricConfiguration();
        java.lang.String str6 = metricConfiguration5.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty observedProperty7 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty();
        observedProperty7.CasNumber = "MinDuration";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricConfiguration metricConfiguration10 = metricConfiguration5.setObservedProperty(observedProperty7);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultType resultType11 = observedProperty7.ResultType;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservedProperty postObservedProperty12 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservedProperty();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UnitGroup unitGroup13 = postObservedProperty12.UnitGroup;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity quantity14 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Unit unit15 = null;
        quantity14.Unit = unit15;
        postObservedProperty12.LowerLimit = quantity14;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity quantity18 = postObservedProperty12.LowerLimit;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Unit unit19 = quantity18.Unit;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty observedProperty20 = observedProperty7.setUpperLimit(quantity18);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocation samplingLocation21 = samplingLocation4.setElevation(quantity18);
        activity0.SamplingLocation = samplingLocation21;
        java.lang.String str23 = samplingLocation21.VerticalCollectionMethod;
        org.junit.Assert.assertNull(offsetDateTime1);
        org.junit.Assert.assertNotNull(activity3);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNotNull(metricConfiguration10);
        org.junit.Assert.assertNull(resultType11);
        org.junit.Assert.assertNull(unitGroup13);
        org.junit.Assert.assertNotNull(quantity18);
        org.junit.Assert.assertNull(unit19);
        org.junit.Assert.assertNotNull(observedProperty20);
        org.junit.Assert.assertNotNull(samplingLocation21);
        org.junit.Assert.assertNull(str23);
    }

    @Test
    public void test42530() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest85.test42530");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ChartDataPoint chartDataPoint0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ChartDataPoint();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ChartDataPoint chartDataPoint2 = chartDataPoint0.setMdlValueUnitCustomId("MaxInstant");
        java.lang.Double double3 = chartDataPoint2.Value;
        java.lang.String str4 = chartDataPoint2.getNumericResultUnitCustomId();
        java.lang.Double double5 = chartDataPoint2.MdlValue;
        java.lang.String str6 = chartDataPoint2.MdlValueUnitCustomId;
        org.junit.Assert.assertNotNull(chartDataPoint2);
        org.junit.Assert.assertNull(double3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(double5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "MaxInstant" + "'", str6, "MaxInstant");
    }

    @Test
    public void test42531() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest85.test42531");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditHistory auditHistory0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditHistory();
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditChange> auditChangeList1 = auditHistory0.getAuditChanges();
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditChange> auditChangeList2 = auditHistory0.getAuditChanges();
        java.time.OffsetDateTime offsetDateTime3 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditHistory auditHistory4 = auditHistory0.setModificationTime(offsetDateTime3);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditHistory auditHistory5 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditHistory();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.OperationType operationType6 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.OperationType.DELETE;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditHistory auditHistory7 = auditHistory5.setOperation(operationType6);
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditChange> auditChangeList8 = auditHistory7.getAuditChanges();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UserProfile userProfile9 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditHistory auditHistory10 = auditHistory7.setUserProfile(userProfile9);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditChange auditChange11 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditChange();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditChange auditChange12 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditChange();
        java.lang.String str13 = auditChange12.ToId;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditChange[] auditChangeArray14 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditChange[] { auditChange11, auditChange12 };
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditChange> auditChangeList15 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditChange>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditChange>) auditChangeList15, auditChangeArray14);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditHistory auditHistory17 = auditHistory7.setAuditChanges((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditChange>) auditChangeList15);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditHistory auditHistory18 = auditHistory4.setAuditChanges((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditChange>) auditChangeList15);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UserProfile userProfile19 = auditHistory4.UserProfile;
        org.junit.Assert.assertNull(auditChangeList1);
        org.junit.Assert.assertNull(auditChangeList2);
        org.junit.Assert.assertNotNull(auditHistory4);
        org.junit.Assert.assertTrue("'" + operationType6 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.OperationType.DELETE + "'", operationType6.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.OperationType.DELETE));
        org.junit.Assert.assertNotNull(auditHistory7);
        org.junit.Assert.assertNull(auditChangeList8);
        org.junit.Assert.assertNotNull(auditHistory10);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNotNull(auditChangeArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(auditHistory17);
        org.junit.Assert.assertNotNull(auditHistory18);
        org.junit.Assert.assertNull(userProfile19);
    }

    @Test
    public void test42532() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest85.test42532");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutFilter putFilter0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutFilter();
        putFilter0.Id = "multipart/form-data; boundary=****231224c4-98ce-4e30-bd65-1d25287c4abe****";
        java.lang.String str3 = putFilter0.CustomId;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutFilter putFilter5 = putFilter0.setCustomId("multipart/form-data; boundary=****3dee2050-7d6c-400f-bd51-383a1324f5dd****");
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocation> samplingLocationList6 = putFilter5.getSamplingLocations();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLabAnalysisMethod postLabAnalysisMethod7 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLabAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation8 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation();
        observation8.CustomId = "hi!";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.CategoricalResult categoricalResult11 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation12 = observation8.setCategoricalResult(categoricalResult11);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple[] importHistoryEventSimpleArray13 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple> importHistoryEventSimpleList14 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple>) importHistoryEventSimpleList14, importHistoryEventSimpleArray13);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation16 = observation8.setImportHistoryEventSimples((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple>) importHistoryEventSimpleList14);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLabAnalysisMethod postLabAnalysisMethod17 = postLabAnalysisMethod7.setImportHistoryEventSimples((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple>) importHistoryEventSimpleList14);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutUnit putUnit18 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutUnit();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes19 = putUnit18.getAuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutDetectioncondition putDetectioncondition20 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutDetectioncondition();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes21 = putDetectioncondition20.getAuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutDetectioncondition putDetectioncondition23 = putDetectioncondition20.setCustomId("http");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivity samplingPlanPlannedActivity24 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivity();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes25 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivity samplingPlanPlannedActivity26 = samplingPlanPlannedActivity24.setAuditAttributes(auditAttributes25);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes27 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes29 = auditAttributes27.setCreationUserProfileId("'.'SSSSSSS");
        samplingPlanPlannedActivity26.AuditAttributes = auditAttributes27;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes31 = samplingPlanPlannedActivity26.AuditAttributes;
        putDetectioncondition20.AuditAttributes = auditAttributes31;
        putUnit18.AuditAttributes = auditAttributes31;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLabAnalysisMethod postLabAnalysisMethod34 = postLabAnalysisMethod17.setAuditAttributes(auditAttributes31);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLabAnalysisMethod postLabAnalysisMethod36 = postLabAnalysisMethod17.setDescription("yyyy'-'MM'-'dd'T'HH':'mm':'ss");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SearchResultObservedProperty searchResultObservedProperty37 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SearchResultObservedProperty();
        java.lang.Integer int38 = searchResultObservedProperty37.TotalCount;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SearchResultObservedProperty searchResultObservedProperty40 = searchResultObservedProperty37.setCursor("multipart/form-data; boundary=****231224c4-98ce-4e30-bd65-1d25287c4abe****");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLabAnalysisMethod postLabAnalysisMethod41 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLabAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes42 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLabAnalysisMethod postLabAnalysisMethod43 = postLabAnalysisMethod41.setAuditAttributes(auditAttributes42);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty[] observedPropertyArray44 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty> observedPropertyList45 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty>) observedPropertyList45, observedPropertyArray44);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLabAnalysisMethod postLabAnalysisMethod47 = postLabAnalysisMethod43.setObservedProperties((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty>) observedPropertyList45);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes48 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLabAnalysisMethod postLabAnalysisMethod49 = postLabAnalysisMethod43.setAuditAttributes(auditAttributes48);
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty> observedPropertyList50 = postLabAnalysisMethod49.getObservedProperties();
        searchResultObservedProperty37.DomainObjects = observedPropertyList50;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLabAnalysisMethod postLabAnalysisMethod52 = postLabAnalysisMethod17.setObservedProperties(observedPropertyList50);
        putFilter5.ObservedProperties = observedPropertyList50;
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(putFilter5);
        org.junit.Assert.assertNull(samplingLocationList6);
        org.junit.Assert.assertNotNull(observation12);
        org.junit.Assert.assertNotNull(importHistoryEventSimpleArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(observation16);
        org.junit.Assert.assertNotNull(postLabAnalysisMethod17);
        org.junit.Assert.assertNull(auditAttributes19);
        org.junit.Assert.assertNull(auditAttributes21);
        org.junit.Assert.assertNotNull(putDetectioncondition23);
        org.junit.Assert.assertNotNull(samplingPlanPlannedActivity26);
        org.junit.Assert.assertNotNull(auditAttributes29);
        org.junit.Assert.assertNotNull(auditAttributes31);
        org.junit.Assert.assertNotNull(postLabAnalysisMethod34);
        org.junit.Assert.assertNotNull(postLabAnalysisMethod36);
        org.junit.Assert.assertNull(int38);
        org.junit.Assert.assertNotNull(searchResultObservedProperty40);
        org.junit.Assert.assertNotNull(postLabAnalysisMethod43);
        org.junit.Assert.assertNotNull(observedPropertyArray44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(postLabAnalysisMethod47);
        org.junit.Assert.assertNotNull(postLabAnalysisMethod49);
        org.junit.Assert.assertNotNull(observedPropertyList50);
        org.junit.Assert.assertNotNull(postLabAnalysisMethod52);
    }

    @Test
    public void test42533() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest85.test42533");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationExportIIV2 getObservationExportIIV2_0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationExportIIV2();
        java.util.List<java.lang.String> strList1 = getObservationExportIIV2_0.getCollectionMethodIds();
        java.lang.Integer int2 = getObservationExportIIV2_0.getLimit();
        java.time.Instant instant3 = null;
        getObservationExportIIV2_0.StartModificationTime = instant3;
        java.lang.Double double5 = getObservationExportIIV2_0.getMinNumericResultValue();
        java.lang.String str6 = getObservationExportIIV2_0.getActivityCustomId();
        org.junit.Assert.assertNull(strList1);
        org.junit.Assert.assertNull(int2);
        org.junit.Assert.assertNull(double5);
        org.junit.Assert.assertNull(str6);
    }

    @Test
    public void test42534() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest85.test42534");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.FieldVisit fieldVisit0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.FieldVisit();
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment> domainObjectAttachmentList1 = fieldVisit0.Attachments;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlanningStatusType planningStatusType2 = fieldVisit0.getPlanningStatus();
        java.time.OffsetDateTime offsetDateTime3 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.FieldVisit fieldVisit4 = fieldVisit0.setEndTime(offsetDateTime3);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.FieldVisitSimple fieldVisitSimple5 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.FieldVisitSimple();
        fieldVisitSimple5.Participants = "'.'SSSSSSS";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlanningStatusType planningStatusType8 = fieldVisitSimple5.getPlanningStatus();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationSimple samplingLocationSimple9 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.FieldVisitSimple fieldVisitSimple10 = fieldVisitSimple5.setSamplingLocation(samplingLocationSimple9);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlanningStatusType planningStatusType11 = null;
        fieldVisitSimple10.PlanningStatus = planningStatusType11;
        java.time.OffsetDateTime offsetDateTime13 = null;
        fieldVisitSimple10.StartTime = offsetDateTime13;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ProjectSimple projectSimple15 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ProjectSimple();
        java.lang.String str16 = projectSimple15.Name;
        java.lang.String str17 = projectSimple15.getCustomId();
        projectSimple15.CustomId = "hi!:///AQUARIUS/Provisioning/v1";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ProjectSimple projectSimple21 = projectSimple15.setId("MinDuration");
        java.lang.String str22 = projectSimple15.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.FieldVisitSimple fieldVisitSimple23 = fieldVisitSimple10.setProject(projectSimple15);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.FieldTripSimple fieldTripSimple24 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.FieldTripSimple();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.FieldTripSimple fieldTripSimple26 = fieldTripSimple24.setCustomId("multipart/form-data; boundary=****221f1588-b890-43c2-a3c8-0d77cfe54330****");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.FieldVisitSimple fieldVisitSimple27 = fieldVisitSimple23.setFieldTrip(fieldTripSimple26);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.FieldVisit fieldVisit28 = fieldVisit4.setFieldTrip(fieldTripSimple26);
        org.junit.Assert.assertNull(domainObjectAttachmentList1);
        org.junit.Assert.assertNull(planningStatusType2);
        org.junit.Assert.assertNotNull(fieldVisit4);
        org.junit.Assert.assertNull(planningStatusType8);
        org.junit.Assert.assertNotNull(fieldVisitSimple10);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertNotNull(projectSimple21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "MinDuration" + "'", str22, "MinDuration");
        org.junit.Assert.assertNotNull(fieldVisitSimple23);
        org.junit.Assert.assertNotNull(fieldTripSimple26);
        org.junit.Assert.assertNotNull(fieldVisitSimple27);
        org.junit.Assert.assertNotNull(fieldVisit28);
    }

    @Test
    public void test42535() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest85.test42535");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationNote locationNote0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationNote();
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TagMetadata> tagMetadataList1 = locationNote0.Tags;
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TagMetadata> tagMetadataList2 = locationNote0.getTags();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationNote locationNote3 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationNote();
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TagMetadata> tagMetadataList4 = locationNote3.Tags;
        java.time.Instant instant5 = locationNote3.getFromTimeUtc();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationMonitoringMethod locationMonitoringMethod6 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationMonitoringMethod();
        java.lang.String str7 = locationMonitoringMethod6.getModel();
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TagMetadata> tagMetadataList8 = null;
        locationMonitoringMethod6.Tags = tagMetadataList8;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationMonitoringMethod locationMonitoringMethod10 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationMonitoringMethod();
        java.lang.String str11 = locationMonitoringMethod10.getModel();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationMonitoringMethod locationMonitoringMethod13 = locationMonitoringMethod10.setParameter("MinDuration");
        locationMonitoringMethod13.Parameter = "MinDuration";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Attachment attachment16 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Attachment();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.AttachmentCategory attachmentCategory17 = attachment16.AttachmentCategory;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Attachment attachment19 = attachment16.setFileName("");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescription locationDescription20 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescription();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescription locationDescription22 = locationDescription20.setIdentifier("");
        locationDescription22.Identifier = "MaxInstant";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationMonitoringMethod locationMonitoringMethod25 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationMonitoringMethod();
        java.lang.String str26 = locationMonitoringMethod25.getModel();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationMonitoringMethod locationMonitoringMethod28 = locationMonitoringMethod25.setParameter("MinDuration");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TagMetadata[] tagMetadataArray29 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TagMetadata[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TagMetadata> tagMetadataList30 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TagMetadata>();
        boolean boolean31 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TagMetadata>) tagMetadataList30, tagMetadataArray29);
        locationMonitoringMethod28.Tags = tagMetadataList30;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescription locationDescription33 = locationDescription22.setTags(tagMetadataList30);
        attachment19.Tags = tagMetadataList30;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationMonitoringMethod locationMonitoringMethod35 = locationMonitoringMethod13.setTags(tagMetadataList30);
        locationMonitoringMethod6.Tags = tagMetadataList30;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationNote locationNote37 = locationNote3.setTags(tagMetadataList30);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary38 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary40 = dischargeSummary38.setPublish((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse41 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant42 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse43 = locationDescriptionListServiceResponse41.setNextToken(instant42);
        dischargeSummary38.MeasurementTime = instant42;
        locationNote37.ToTimeUtc = instant42;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationNote locationNote46 = locationNote0.setCreateTimeUtc(instant42);
        java.lang.String str47 = locationNote46.getDetails();
        java.lang.String str48 = locationNote46.TimeSeriesUniqueId;
        java.lang.String str49 = locationNote46.Details;
        org.junit.Assert.assertNull(tagMetadataList1);
        org.junit.Assert.assertNull(tagMetadataList2);
        org.junit.Assert.assertNull(tagMetadataList4);
        org.junit.Assert.assertNull(instant5);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNotNull(locationMonitoringMethod13);
        org.junit.Assert.assertNull(attachmentCategory17);
        org.junit.Assert.assertNotNull(attachment19);
        org.junit.Assert.assertNotNull(locationDescription22);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertNotNull(locationMonitoringMethod28);
        org.junit.Assert.assertNotNull(tagMetadataArray29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(locationDescription33);
        org.junit.Assert.assertNotNull(locationMonitoringMethod35);
        org.junit.Assert.assertNotNull(locationNote37);
        org.junit.Assert.assertNotNull(dischargeSummary40);
        org.junit.Assert.assertNotNull(instant42);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse43);
        org.junit.Assert.assertNotNull(locationNote46);
        org.junit.Assert.assertNull(str47);
        org.junit.Assert.assertNull(str48);
        org.junit.Assert.assertNull(str49);
    }

    @Test
    public void test42536() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest85.test42536");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Role role0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Role();
        java.lang.Boolean boolean1 = role0.CanAssignUserRoles;
        java.lang.String str2 = role0.Name;
        java.lang.Boolean boolean3 = role0.isCanEditData();
        java.lang.String str4 = role0.UniqueId;
        role0.CanAssignUserRoles = true;
        org.junit.Assert.assertNull(boolean1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(boolean3);
        org.junit.Assert.assertNull(str4);
    }

    @Test
    public void test42537() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest85.test42537");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportObservations getExportObservations0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportObservations();
        java.util.List<java.lang.String> strList1 = getExportObservations0.getLabReportIds();
        java.lang.Double double2 = getExportObservations0.getNumericResultValue();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetChartDataV2 getChartDataV2_3 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetChartDataV2();
        java.lang.String str4 = getChartDataV2_3.getActivityCustomId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetChartDataV2 getChartDataV2_6 = getChartDataV2_3.setFilterId("");
        java.util.List<java.lang.String> strList7 = getChartDataV2_3.ResultGrades;
        getChartDataV2_3.MinNumericResultValue = 100.0d;
        java.lang.Double double10 = getChartDataV2_3.MaxNumericResultValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostTag postTag11 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostTag();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_12 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray15 = new java.lang.String[] { "", "" };
        java.util.ArrayList<java.lang.String> strList16 = new java.util.ArrayList<java.lang.String>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList16, strArray15);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_18 = getObservationsV2_12.setDataClassifications((java.util.List<java.lang.String>) strList16);
        postTag11.PickListValues = strList16;
        getChartDataV2_3.SamplingContextTagIds = strList16;
        getChartDataV2_3.Limit = (-1);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitDataByLocationServiceRequest fieldVisitDataByLocationServiceRequest23 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitDataByLocationServiceRequest();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitDataByLocationServiceRequest fieldVisitDataByLocationServiceRequest25 = fieldVisitDataByLocationServiceRequest23.setIncludeNodeDetails((java.lang.Boolean) true);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags26 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray30 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList31 = new java.util.ArrayList<java.lang.String>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList31, strArray30);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags33 = putLocationTags26.setTagUniqueIds(strList31);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitDataByLocationServiceRequest fieldVisitDataByLocationServiceRequest34 = fieldVisitDataByLocationServiceRequest25.setParameters(strList31);
        java.lang.Object obj35 = fieldVisitDataByLocationServiceRequest25.getResponseType();
        java.util.ArrayList<java.lang.String> strList36 = fieldVisitDataByLocationServiceRequest25.getParameters();
        getChartDataV2_3.Media = strList36;
        getExportObservations0.CollectionMethodIds = strList36;
        java.lang.Double double39 = getExportObservations0.NumericResultValue;
        java.util.List<java.lang.String> strList40 = getExportObservations0.LabResultLaboratoryIds;
        java.time.Instant instant41 = getExportObservations0.getEndResultTime();
        java.util.List<java.lang.String> strList42 = getExportObservations0.ActivityIds;
        org.junit.Assert.assertNull(strList1);
        org.junit.Assert.assertNull(double2);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNotNull(getChartDataV2_6);
        org.junit.Assert.assertNull(strList7);
        org.junit.Assert.assertNull(double10);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(getObservationsV2_18);
        org.junit.Assert.assertNotNull(fieldVisitDataByLocationServiceRequest25);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(putLocationTags33);
        org.junit.Assert.assertNotNull(fieldVisitDataByLocationServiceRequest34);
        org.junit.Assert.assertNotNull(obj35);
        org.junit.Assert.assertEquals(obj35.toString(), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$FieldVisitDataByLocationServiceResponse");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj35), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$FieldVisitDataByLocationServiceResponse");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj35), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$FieldVisitDataByLocationServiceResponse");
        org.junit.Assert.assertNotNull(strList36);
        org.junit.Assert.assertNull(double39);
        org.junit.Assert.assertNull(strList40);
        org.junit.Assert.assertNull(instant41);
        org.junit.Assert.assertNull(strList42);
    }

    @Test
    public void test42538() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest85.test42538");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetSamplingLocations getSamplingLocations0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetSamplingLocations();
        java.lang.Object obj1 = getSamplingLocations0.getResponseType();
        getSamplingLocations0.Sort = "/AQUARIUS/Acquisition/v2";
        java.time.Instant instant4 = getSamplingLocations0.EndModificationTime;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetSamplingLocations getSamplingLocations6 = getSamplingLocations0.setLimit((java.lang.Integer) (-1));
        getSamplingLocations6.CustomId = "multipart/form-data; boundary=****5b5bcc49-98d5-445c-ae15-d7e16405ad8c****";
        java.time.Instant instant9 = getSamplingLocations6.StartModificationTime;
        java.util.List<java.lang.String> strList10 = getSamplingLocations6.getSearch();
        org.junit.Assert.assertNotNull(obj1);
        org.junit.Assert.assertEquals(obj1.toString(), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$SearchResultSamplingLocation");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj1), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$SearchResultSamplingLocation");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj1), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$SearchResultSamplingLocation");
        org.junit.Assert.assertNull(instant4);
        org.junit.Assert.assertNotNull(getSamplingLocations6);
        org.junit.Assert.assertNull(instant9);
        org.junit.Assert.assertNull(strList10);
    }

    @Test
    public void test42539() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest85.test42539");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricConfiguration metricConfiguration0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricConfiguration();
        java.lang.String str1 = metricConfiguration0.getId();
        metricConfiguration0.CustomId = "/AQUARIUS/Acquisition/v2";
        java.lang.Boolean boolean4 = metricConfiguration0.getUseScoreRanges();
        java.lang.String str5 = metricConfiguration0.Description;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Unit unit6 = metricConfiguration0.getUnit();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Unit unit7 = metricConfiguration0.Unit;
        metricConfiguration0.CustomId = "'.'SSSSSSS";
        java.lang.Boolean boolean10 = metricConfiguration0.getUseScoreRanges();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty observedProperty11 = metricConfiguration0.ObservedProperty;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricConfiguration metricConfiguration13 = metricConfiguration0.setDescription("'.'SSSSSSS");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricConfiguration metricConfiguration14 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricConfiguration();
        java.lang.String str15 = metricConfiguration14.getId();
        metricConfiguration14.CustomId = "/AQUARIUS/Acquisition/v2";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty observedProperty18 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricConfiguration metricConfiguration19 = metricConfiguration14.setObservedProperty(observedProperty18);
        metricConfiguration14.UseScoreRanges = false;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricConfiguration metricConfiguration22 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricConfiguration();
        java.lang.String str23 = metricConfiguration22.getId();
        metricConfiguration22.CustomId = "/AQUARIUS/Acquisition/v2";
        java.lang.Boolean boolean26 = metricConfiguration22.getUseScoreRanges();
        java.lang.String str27 = metricConfiguration22.Description;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Unit unit28 = metricConfiguration22.getUnit();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Unit unit29 = metricConfiguration22.Unit;
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Taxon> taxonList30 = metricConfiguration22.getTaxons();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SearchResultTaxon searchResultTaxon31 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SearchResultTaxon();
        java.lang.String str32 = searchResultTaxon31.Cursor;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricConfiguration metricConfiguration33 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricConfiguration();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes34 = metricConfiguration33.AuditAttributes;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Taxon[] taxonArray35 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Taxon[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Taxon> taxonList36 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Taxon>();
        boolean boolean37 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Taxon>) taxonList36, taxonArray35);
        metricConfiguration33.Taxons = taxonList36;
        searchResultTaxon31.DomainObjects = taxonList36;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricConfiguration metricConfiguration40 = metricConfiguration22.setTaxons((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Taxon>) taxonList36);
        metricConfiguration14.Taxons = taxonList36;
        metricConfiguration0.Taxons = taxonList36;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(boolean4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(unit6);
        org.junit.Assert.assertNull(unit7);
        org.junit.Assert.assertNull(boolean10);
        org.junit.Assert.assertNull(observedProperty11);
        org.junit.Assert.assertNotNull(metricConfiguration13);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNotNull(metricConfiguration19);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertNull(boolean26);
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertNull(unit28);
        org.junit.Assert.assertNull(unit29);
        org.junit.Assert.assertNull(taxonList30);
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertNull(auditAttributes34);
        org.junit.Assert.assertNotNull(taxonArray35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(metricConfiguration40);
    }

    @Test
    public void test42540() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest85.test42540");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutFieldVisit putFieldVisit0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutFieldVisit();
        putFieldVisit0.Notes = "MinDuration";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ProjectSimple projectSimple3 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutFieldVisit putFieldVisit4 = putFieldVisit0.setProject(projectSimple3);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Schedule schedule5 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Schedule();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Schedule schedule7 = schedule5.setCustomId("");
        java.time.OffsetDateTime offsetDateTime8 = schedule5.getLastGenerationDate();
        putFieldVisit0.Schedule = schedule5;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocation samplingLocation10 = putFieldVisit0.SamplingLocation;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.FieldTripSimple fieldTripSimple11 = null;
        putFieldVisit0.FieldTrip = fieldTripSimple11;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.FieldTripSimple fieldTripSimple13 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutFieldVisit putFieldVisit14 = putFieldVisit0.setFieldTrip(fieldTripSimple13);
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttribute> extendedAttributeList15 = putFieldVisit14.getExtendedAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ProjectSimple projectSimple16 = null;
        putFieldVisit14.Project = projectSimple16;
        org.junit.Assert.assertNotNull(putFieldVisit4);
        org.junit.Assert.assertNotNull(schedule7);
        org.junit.Assert.assertNull(offsetDateTime8);
        org.junit.Assert.assertNull(samplingLocation10);
        org.junit.Assert.assertNotNull(putFieldVisit14);
        org.junit.Assert.assertNull(extendedAttributeList15);
    }

    @Test
    public void test42541() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest85.test42541");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetChartDataV2 getChartDataV2_0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetChartDataV2();
        java.lang.String str1 = getChartDataV2_0.getActivityCustomId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetChartDataV2 getChartDataV2_3 = getChartDataV2_0.setFilterId("");
        java.util.List<java.lang.String> strList4 = getChartDataV2_0.ResultGrades;
        java.util.List<java.lang.String> strList5 = getChartDataV2_0.CollectionMethodIds;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ReportListServiceRequest reportListServiceRequest6 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ReportListServiceRequest();
        reportListServiceRequest6.ReportTitle = "MinDuration";
        java.lang.String str9 = reportListServiceRequest6.getLocationUniqueId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_10 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray12 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList13 = new java.util.ArrayList<java.lang.String>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList13, strArray12);
        getObservationsV2_10.SpecimenIds = strList13;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags16 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray20 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList21 = new java.util.ArrayList<java.lang.String>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList21, strArray20);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags23 = putLocationTags16.setTagUniqueIds(strList21);
        getObservationsV2_10.QualityControlTypes = strList21;
        java.util.List<java.lang.String> strList25 = getObservationsV2_10.getAnalyticalGroupIds();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_27 = getObservationsV2_10.setSpecimenName("/AQUARIUS/Acquisition/v2://9999-12-31T23:59:59.999Z");
        java.util.List<java.lang.String> strList28 = getObservationsV2_27.getMedia();
        java.time.Instant instant29 = getObservationsV2_27.getStartModificationTime();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_30 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray32 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList33 = new java.util.ArrayList<java.lang.String>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList33, strArray32);
        getObservationsV2_30.SpecimenIds = strList33;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_36 = getObservationsV2_27.setProjectIds((java.util.List<java.lang.String>) strList33);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ReportListServiceRequest reportListServiceRequest37 = reportListServiceRequest6.setTagKeys(strList33);
        reportListServiceRequest6.LocationUniqueId = "9999-12-31T23:59:59.999Z";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DeleteFieldVisits deleteFieldVisits40 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DeleteFieldVisits();
        java.lang.String str41 = deleteFieldVisits40.Sort;
        deleteFieldVisits40.Sort = "9999-12-31T23:59:59.999Z";
        java.util.List<java.lang.String> strList44 = deleteFieldVisits40.getScheduleIds();
        java.util.List<java.lang.String> strList45 = deleteFieldVisits40.getFieldTripIds();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostTag postTag46 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostTag();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_47 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray50 = new java.lang.String[] { "", "" };
        java.util.ArrayList<java.lang.String> strList51 = new java.util.ArrayList<java.lang.String>();
        boolean boolean52 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList51, strArray50);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_53 = getObservationsV2_47.setDataClassifications((java.util.List<java.lang.String>) strList51);
        postTag46.PickListValues = strList51;
        java.util.ArrayList<java.lang.String> strList55 = postTag46.PickListValues;
        deleteFieldVisits40.PlanningStatuses = strList55;
        reportListServiceRequest6.TagKeys = strList55;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetChartDataV2 getChartDataV2_58 = getChartDataV2_0.setSearch((java.util.List<java.lang.String>) strList55);
        java.util.List<java.lang.String> strList59 = getChartDataV2_0.ProjectIds;
        java.lang.String str60 = getChartDataV2_0.getSpecimenName();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SampleFractionType sampleFractionType61 = getChartDataV2_0.SampleFraction;
        java.util.List<java.lang.String> strList62 = getChartDataV2_0.CollectionMethodIds;
        java.lang.String str63 = getChartDataV2_0.getDepthUnitId();
        java.util.List<java.lang.String> strList64 = getChartDataV2_0.SamplingContextTagIds;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(getChartDataV2_3);
        org.junit.Assert.assertNull(strList4);
        org.junit.Assert.assertNull(strList5);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(putLocationTags23);
        org.junit.Assert.assertNull(strList25);
        org.junit.Assert.assertNotNull(getObservationsV2_27);
        org.junit.Assert.assertNull(strList28);
        org.junit.Assert.assertNull(instant29);
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(getObservationsV2_36);
        org.junit.Assert.assertNotNull(reportListServiceRequest37);
        org.junit.Assert.assertNull(str41);
        org.junit.Assert.assertNull(strList44);
        org.junit.Assert.assertNull(strList45);
        org.junit.Assert.assertNotNull(strArray50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(getObservationsV2_53);
        org.junit.Assert.assertNotNull(strList55);
        org.junit.Assert.assertNotNull(getChartDataV2_58);
        org.junit.Assert.assertNull(strList59);
        org.junit.Assert.assertNull(str60);
        org.junit.Assert.assertNull(sampleFractionType61);
        org.junit.Assert.assertNull(strList62);
        org.junit.Assert.assertNull(str63);
        org.junit.Assert.assertNull(strList64);
    }

    @Test
    public void test42542() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest85.test42542");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportSummary importSummary0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportSummary();
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObject> importItemObjectList1 = importSummary0.ErrorImportItems;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportSummary importSummary3 = importSummary0.setNewCount((java.lang.Integer) 10);
        java.lang.Integer int4 = importSummary0.getErrorCount();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportSummary importSummary6 = importSummary0.setUpdateCount((java.lang.Integer) 10);
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObject> importItemObjectList7 = importSummary0.getErrorImportItems();
        java.lang.Integer int8 = importSummary0.getSkippedCount();
        java.lang.Integer int9 = importSummary0.getSkippedCount();
        importSummary0.ErrorCount = 0;
        java.lang.String str12 = importSummary0.SummaryReportText;
        org.junit.Assert.assertNull(importItemObjectList1);
        org.junit.Assert.assertNotNull(importSummary3);
        org.junit.Assert.assertNull(int4);
        org.junit.Assert.assertNotNull(importSummary6);
        org.junit.Assert.assertNull(importItemObjectList7);
        org.junit.Assert.assertNull(int8);
        org.junit.Assert.assertNull(int9);
        org.junit.Assert.assertNull(str12);
    }

    @Test
    public void test42543() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest85.test42543");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocation samplingLocation0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocation();
        java.lang.String str1 = samplingLocation0.Description;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocation samplingLocation3 = samplingLocation0.setVerticalCollectionMethod("9999-12-31T23:59:59.999Z");
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple> importHistoryEventSimpleList4 = samplingLocation0.ImportHistoryEventSimples;
        samplingLocation0.Name = "multipart/form-data; boundary=****e0afd3ef-ab93-4371-a368-4a6f5ef58c71****";
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(samplingLocation3);
        org.junit.Assert.assertNull(importHistoryEventSimpleList4);
    }

    @Test
    public void test42544() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest85.test42544");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutTaxon putTaxon0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutTaxon();
        putTaxon0.ParentId = "http://MaxDurationhttp/json/reply/ArrayList";
        java.lang.String str3 = putTaxon0.ScientificName;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttributeDefinition extendedAttributeDefinition4 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttributeDefinition();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate5 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate7 = specimenTemplate5.setCustomId("hi!");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PreservativeType preservativeType8 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PreservativeType.SODIUM_AZIDE;
        specimenTemplate7.Preservative = preservativeType8;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails10 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails12 = labResultDetails10.setAnalysisComment("/AQUARIUS/Acquisition/v2");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes13 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails14 = labResultDetails12.setAuditAttributes(auditAttributes13);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate15 = specimenTemplate7.setAuditAttributes(auditAttributes13);
        extendedAttributeDefinition4.AuditAttributes = auditAttributes13;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutTaxon putTaxon17 = putTaxon0.setAuditAttributes(auditAttributes13);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutTaxon putTaxon19 = putTaxon17.setItisComment("http");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutTaxon putTaxon21 = putTaxon19.setId("");
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple> importHistoryEventSimpleList22 = putTaxon21.ImportHistoryEventSimples;
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple> importHistoryEventSimpleList23 = putTaxon21.ImportHistoryEventSimples;
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(specimenTemplate7);
        org.junit.Assert.assertTrue("'" + preservativeType8 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PreservativeType.SODIUM_AZIDE + "'", preservativeType8.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PreservativeType.SODIUM_AZIDE));
        org.junit.Assert.assertNotNull(labResultDetails12);
        org.junit.Assert.assertNotNull(labResultDetails14);
        org.junit.Assert.assertNotNull(specimenTemplate15);
        org.junit.Assert.assertNotNull(putTaxon17);
        org.junit.Assert.assertNotNull(putTaxon19);
        org.junit.Assert.assertNotNull(putTaxon21);
        org.junit.Assert.assertNull(importHistoryEventSimpleList22);
        org.junit.Assert.assertNull(importHistoryEventSimpleList23);
    }

    @Test
    public void test42545() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest85.test42545");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.User user0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.User();
        java.util.List<java.lang.String> strList1 = user0.getRoles();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.User user3 = user0.setEmail("hi!");
        user3.CustomId = "POST";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UserProfile userProfile6 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.User user7 = user3.setUserProfile(userProfile6);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UserType userType8 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UserType.INTERNAL;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.User user9 = user7.setUserType(userType8);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UserProfile userProfile10 = null;
        user7.UserProfile = userProfile10;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UserProfile userProfile12 = null;
        user7.UserProfile = userProfile12;
        user7.CustomId = "multipart/form-data; boundary=****5f5c0da4-c582-4ddf-ae9f-fc64a997490d****";
        org.junit.Assert.assertNull(strList1);
        org.junit.Assert.assertNotNull(user3);
        org.junit.Assert.assertNotNull(user7);
        org.junit.Assert.assertTrue("'" + userType8 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UserType.INTERNAL + "'", userType8.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UserType.INTERNAL));
        org.junit.Assert.assertNotNull(user9);
    }

    @Test
    public void test42546() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest85.test42546");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetUnitGroupWithUnit getUnitGroupWithUnit0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetUnitGroupWithUnit();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetUnitGroupWithUnit getUnitGroupWithUnit2 = getUnitGroupWithUnit0.setId("yyyy'-'MM'-'dd'T'HH':'mm':'ss");
        java.lang.String str3 = getUnitGroupWithUnit0.Id;
        getUnitGroupWithUnit0.Id = "multipart/form-data; boundary=****73426a9f-8a73-4fda-95b3-78cea45bbfe9****";
        org.junit.Assert.assertNotNull(getUnitGroupWithUnit2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "yyyy'-'MM'-'dd'T'HH':'mm':'ss" + "'", str3, "yyyy'-'MM'-'dd'T'HH':'mm':'ss");
    }

    @Test
    public void test42547() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest85.test42547");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetSpecimens getSpecimens0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetSpecimens();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_1 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray4 = new java.lang.String[] { "", "" };
        java.util.ArrayList<java.lang.String> strList5 = new java.util.ArrayList<java.lang.String>();
        boolean boolean6 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList5, strArray4);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_7 = getObservationsV2_1.setDataClassifications((java.util.List<java.lang.String>) strList5);
        java.util.List<java.lang.String> strList8 = getObservationsV2_1.ResultGrades;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary9 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        dischargeSummary9.Reviewer = "";
        java.time.Instant instant12 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        dischargeSummary9.MeasurementTime = instant12;
        getObservationsV2_1.StartResultTime = instant12;
        java.lang.String[] strArray24 = new java.lang.String[] { "https", "/AQUARIUS/Provisioning/v1", "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ", "2021.4.62.0", "hi!", "2021.4.62.0", "2021.4.62.0", "/AQUARIUS/Acquisition/v2", "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ" };
        java.util.ArrayList<java.lang.String> strList25 = new java.util.ArrayList<java.lang.String>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList25, strArray24);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_27 = getObservationsV2_1.setAnalyticalGroupIds((java.util.List<java.lang.String>) strList25);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescription locationDescription28 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescription();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescription locationDescription30 = locationDescription28.setIdentifier("");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ControlConditionActivity controlConditionActivity31 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ControlConditionActivity();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ControlCleanedType controlCleanedType32 = null;
        controlConditionActivity31.ControlCleaned = controlCleanedType32;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse34 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant35 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse36 = locationDescriptionListServiceResponse34.setNextToken(instant35);
        controlConditionActivity31.DateCleaned = instant35;
        locationDescription30.LastModified = instant35;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_39 = getObservationsV2_27.setStartResultTime(instant35);
        getSpecimens0.After = instant35;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetSpecimens getSpecimens41 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetSpecimens();
        java.util.List<java.lang.String> strList42 = getSpecimens41.getActivityIds();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetSpecimens getSpecimens44 = getSpecimens41.setSort("MinDuration");
        java.util.List<java.lang.String> strList45 = getSpecimens44.getSamplingLocationIds();
        java.util.List<java.lang.String> strList46 = getSpecimens44.ProjectIds;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportSpecimens getExportSpecimens47 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportSpecimens();
        java.util.List<java.lang.String> strList48 = getExportSpecimens47.getActivityTypes();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.StatisticalDateTimeOffset statisticalDateTimeOffset49 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.StatisticalDateTimeOffset();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostRecurringReport postRecurringReport50 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostRecurringReport();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary51 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        dischargeSummary51.Reviewer = "";
        java.time.Instant instant54 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        dischargeSummary51.MeasurementTime = instant54;
        postRecurringReport50.NextGenerationDate = instant54;
        java.time.Instant instant57 = postRecurringReport50.getNextGenerationDate();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.StatisticalDateTimeOffset statisticalDateTimeOffset58 = statisticalDateTimeOffset49.setDateTimeOffset(instant57);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DownchainProcessorListByRatingModelServiceRequest downchainProcessorListByRatingModelServiceRequest59 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DownchainProcessorListByRatingModelServiceRequest();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeTransactionListServiceRequest metadataChangeTransactionListServiceRequest60 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeTransactionListServiceRequest();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostRecurringReport postRecurringReport61 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostRecurringReport();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary62 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        dischargeSummary62.Reviewer = "";
        java.time.Instant instant65 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        dischargeSummary62.MeasurementTime = instant65;
        postRecurringReport61.NextGenerationDate = instant65;
        java.time.Instant instant68 = postRecurringReport61.getNextGenerationDate();
        java.lang.String str69 = com.aquaticinformatics.aquarius.sdk.samples.serializers.InstantSerializer.format(instant68);
        metadataChangeTransactionListServiceRequest60.QueryFrom = instant68;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DownchainProcessorListByRatingModelServiceRequest downchainProcessorListByRatingModelServiceRequest71 = downchainProcessorListByRatingModelServiceRequest59.setQueryTo(instant68);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DownchainProcessorListByRatingModelServiceRequest downchainProcessorListByRatingModelServiceRequest73 = downchainProcessorListByRatingModelServiceRequest59.setRatingModelIdentifier("hi!");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Qualifier qualifier74 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Qualifier();
        java.time.Instant instant75 = qualifier74.DateApplied;
        java.lang.String str76 = qualifier74.User;
        java.lang.String str77 = qualifier74.getIdentifier();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest78 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest();
        java.lang.Object obj79 = timeAlignedDataServiceRequest78.getResponseType();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse80 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant81 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse82 = locationDescriptionListServiceResponse80.setNextToken(instant81);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest83 = timeAlignedDataServiceRequest78.setQueryFrom(instant81);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Qualifier qualifier84 = qualifier74.setDateApplied(instant81);
        java.time.Instant instant85 = qualifier84.getDateApplied();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DownchainProcessorListByRatingModelServiceRequest downchainProcessorListByRatingModelServiceRequest86 = downchainProcessorListByRatingModelServiceRequest59.setQueryFrom(instant85);
        statisticalDateTimeOffset58.DateTimeOffset = instant85;
        java.time.Instant instant88 = statisticalDateTimeOffset58.DateTimeOffset;
        getExportSpecimens47.After = instant88;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetSpecimens getSpecimens90 = getSpecimens44.setBefore(instant88);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetSpecimens getSpecimens91 = getSpecimens0.setStartModificationTime(instant88);
        org.junit.Assert.assertNotNull(strArray4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(getObservationsV2_7);
        org.junit.Assert.assertNull(strList8);
        org.junit.Assert.assertNotNull(instant12);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(getObservationsV2_27);
        org.junit.Assert.assertNotNull(locationDescription30);
        org.junit.Assert.assertNotNull(instant35);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse36);
        org.junit.Assert.assertNotNull(getObservationsV2_39);
        org.junit.Assert.assertNull(strList42);
        org.junit.Assert.assertNotNull(getSpecimens44);
        org.junit.Assert.assertNull(strList45);
        org.junit.Assert.assertNull(strList46);
        org.junit.Assert.assertNull(strList48);
        org.junit.Assert.assertNotNull(instant54);
        org.junit.Assert.assertNotNull(instant57);
        org.junit.Assert.assertNotNull(statisticalDateTimeOffset58);
        org.junit.Assert.assertNotNull(instant65);
        org.junit.Assert.assertNotNull(instant68);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "9999-12-31T23:59:59.999Z" + "'", str69, "9999-12-31T23:59:59.999Z");
        org.junit.Assert.assertNotNull(downchainProcessorListByRatingModelServiceRequest71);
        org.junit.Assert.assertNotNull(downchainProcessorListByRatingModelServiceRequest73);
        org.junit.Assert.assertNull(instant75);
        org.junit.Assert.assertNull(str76);
        org.junit.Assert.assertNull(str77);
        org.junit.Assert.assertNotNull(obj79);
        org.junit.Assert.assertEquals(obj79.toString(), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj79), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj79), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertNotNull(instant81);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse82);
        org.junit.Assert.assertNotNull(timeAlignedDataServiceRequest83);
        org.junit.Assert.assertNotNull(qualifier84);
        org.junit.Assert.assertNotNull(instant85);
        org.junit.Assert.assertNotNull(downchainProcessorListByRatingModelServiceRequest86);
        org.junit.Assert.assertNotNull(instant88);
        org.junit.Assert.assertNotNull(getSpecimens90);
        org.junit.Assert.assertNotNull(getSpecimens91);
    }

    @Test
    public void test42548() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest85.test42548");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetSamplingLocations getSamplingLocations0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetSamplingLocations();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationType putLocationType1 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationType();
        java.lang.Object obj2 = putLocationType1.getResponseType();
        java.lang.String str3 = putLocationType1.AttributeTableName;
        java.lang.Object obj4 = putLocationType1.getResponseType();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Tag tag5 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Tag();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Tag tag7 = tag5.setAppliesToAttachments((java.lang.Boolean) false);
        java.lang.String str8 = tag7.Key;
        java.util.ArrayList<java.lang.String> strList9 = tag7.getPickListValues();
        java.lang.Boolean boolean10 = tag7.AppliesToLocationNotes;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEvent importHistoryEvent11 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEvent();
        java.time.OffsetDateTime offsetDateTime12 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEvent importHistoryEvent13 = importHistoryEvent11.setImportTime(offsetDateTime12);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportType importType14 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportType.OBSERVED_PROPERTIES_CSV;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEvent importHistoryEvent15 = importHistoryEvent13.setImportType(importType14);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DeleteFieldVisits deleteFieldVisits16 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DeleteFieldVisits();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RoleFlattened roleFlattened17 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RoleFlattened();
        java.lang.Boolean boolean18 = roleFlattened17.CanRemoveFieldVisits;
        roleFlattened17.Name = "MaxInstant";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationType putLocationType21 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationType();
        java.lang.String str22 = putLocationType21.Description;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_23 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray26 = new java.lang.String[] { "", "" };
        java.util.ArrayList<java.lang.String> strList27 = new java.util.ArrayList<java.lang.String>();
        boolean boolean28 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList27, strArray26);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_29 = getObservationsV2_23.setDataClassifications((java.util.List<java.lang.String>) strList27);
        getObservationsV2_29.DepthUnitCustomId = "hi!";
        java.lang.String str32 = getObservationsV2_29.CustomId;
        java.util.List<java.lang.String> strList33 = getObservationsV2_29.getSearch();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_34 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray36 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList37 = new java.util.ArrayList<java.lang.String>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList37, strArray36);
        getObservationsV2_34.SpecimenIds = strList37;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags40 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray44 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList45 = new java.util.ArrayList<java.lang.String>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList45, strArray44);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags47 = putLocationTags40.setTagUniqueIds(strList45);
        getObservationsV2_34.QualityControlTypes = strList45;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_49 = getObservationsV2_29.setMedia((java.util.List<java.lang.String>) strList45);
        putLocationType21.ExtendedAttributeDefinitionIds = strList45;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RoleFlattenedBase roleFlattenedBase51 = roleFlattened17.setRoleApprovalTransitions(strList45);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DeleteFieldVisits deleteFieldVisits52 = deleteFieldVisits16.setIds((java.util.List<java.lang.String>) strList45);
        importHistoryEvent13.DomainObjectIds = strList45;
        tag7.PickListValues = strList45;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.LocationTypeBase locationTypeBase55 = putLocationType1.setExtendedAttributeDefinitionIds(strList45);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetSamplingLocations getSamplingLocations56 = getSamplingLocations0.setLocationGroupTypeIds((java.util.List<java.lang.String>) strList45);
        java.time.Instant instant57 = getSamplingLocations0.getStartModificationTime();
        org.junit.Assert.assertNotNull(obj2);
        org.junit.Assert.assertEquals(obj2.toString(), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning$LocationType");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj2), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning$LocationType");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj2), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning$LocationType");
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(obj4);
        org.junit.Assert.assertEquals(obj4.toString(), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning$LocationType");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj4), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning$LocationType");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj4), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning$LocationType");
        org.junit.Assert.assertNotNull(tag7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNull(strList9);
        org.junit.Assert.assertNull(boolean10);
        org.junit.Assert.assertNotNull(importHistoryEvent13);
        org.junit.Assert.assertTrue("'" + importType14 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportType.OBSERVED_PROPERTIES_CSV + "'", importType14.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportType.OBSERVED_PROPERTIES_CSV));
        org.junit.Assert.assertNotNull(importHistoryEvent15);
        org.junit.Assert.assertNull(boolean18);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(getObservationsV2_29);
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertNull(strList33);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(strArray44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(putLocationTags47);
        org.junit.Assert.assertNotNull(getObservationsV2_49);
        org.junit.Assert.assertNotNull(roleFlattenedBase51);
        org.junit.Assert.assertNotNull(deleteFieldVisits52);
        org.junit.Assert.assertNotNull(locationTypeBase55);
        org.junit.Assert.assertNotNull(getSamplingLocations56);
        org.junit.Assert.assertNull(instant57);
    }

    @Test
    public void test42549() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest85.test42549");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutShippingContainer putShippingContainer0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutShippingContainer();
        java.lang.String str1 = putShippingContainer0.getCustomId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutShippingContainer putShippingContainer3 = putShippingContainer0.setCustomId("MaxDuration");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes4 = putShippingContainer0.getAuditAttributes();
        java.lang.String str5 = putShippingContainer0.Comment;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutShippingContainer putShippingContainer7 = putShippingContainer0.setCustomId("multipart/form-data; boundary=****1eab67e1-84c8-4b82-aa06-d6c7526551f8****");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes8 = putShippingContainer0.getAuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.CategoricalValue categoricalValue9 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.CategoricalValue();
        categoricalValue9.CustomId = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ";
        java.lang.String str12 = categoricalValue9.Id;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutObservationV2 putObservationV2_13 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutObservationV2();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty observedProperty14 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutObservationV2 putObservationV2_15 = putObservationV2_13.setObservedProperty(observedProperty14);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Activity activity16 = putObservationV2_15.Activity;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.NullMeasureQualifier nullMeasureQualifier17 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutObservationV2 putObservationV2_18 = putObservationV2_15.setNullMeasureQualifier(nullMeasureQualifier17);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabInstruction labInstruction19 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabInstruction();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod20 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabInstruction labInstruction21 = labInstruction19.setAnalysisMethod(analysisMethod20);
        putObservationV2_15.LabInstruction = labInstruction19;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttributeDefinition extendedAttributeDefinition23 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttributeDefinition();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate24 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate26 = specimenTemplate24.setCustomId("hi!");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PreservativeType preservativeType27 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PreservativeType.SODIUM_AZIDE;
        specimenTemplate26.Preservative = preservativeType27;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails29 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails31 = labResultDetails29.setAnalysisComment("/AQUARIUS/Acquisition/v2");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes32 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails33 = labResultDetails31.setAuditAttributes(auditAttributes32);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate34 = specimenTemplate26.setAuditAttributes(auditAttributes32);
        extendedAttributeDefinition23.AuditAttributes = auditAttributes32;
        java.lang.Boolean boolean36 = extendedAttributeDefinition23.Mandatory;
        java.lang.Boolean boolean37 = extendedAttributeDefinition23.Mandatory;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes38 = extendedAttributeDefinition23.AuditAttributes;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutObservationV2 putObservationV2_39 = putObservationV2_15.setAuditAttributes(auditAttributes38);
        categoricalValue9.AuditAttributes = auditAttributes38;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostDetectioncondition postDetectioncondition41 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostDetectioncondition();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes42 = postDetectioncondition41.getAuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostDetectioncondition postDetectioncondition44 = postDetectioncondition41.setId("9999-12-31T23:59:59.999Z");
        postDetectioncondition41.Description = "9999-12-31T23:59:59.999Z";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostDetectioncondition postDetectioncondition48 = postDetectioncondition41.setId("/AQUARIUS/Provisioning/v1");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostDetectioncondition postDetectioncondition50 = postDetectioncondition48.setId("MinInstant");
        postDetectioncondition50.SystemCode = "hi!";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Project project53 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Project();
        java.lang.String str54 = project53.getName();
        java.time.OffsetDateTime offsetDateTime55 = null;
        project53.EndTime = offsetDateTime55;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Project project58 = project53.setDescription("MaxInstant");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabInstructionTemplate labInstructionTemplate59 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabInstructionTemplate();
        java.lang.String str60 = labInstructionTemplate59.HoldingTime;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSchedule putSchedule61 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSchedule();
        java.time.OffsetDateTime offsetDateTime62 = putSchedule61.StartDate;
        java.time.OffsetDateTime offsetDateTime63 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSchedule putSchedule64 = putSchedule61.setEndDate(offsetDateTime63);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes65 = putSchedule64.AuditAttributes;
        java.time.OffsetDateTime offsetDateTime66 = null;
        putSchedule64.LastGenerationDate = offsetDateTime66;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.RecurrenceDayMonthlyType recurrenceDayMonthlyType68 = putSchedule64.RecurrenceDayMonthly;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedFieldResult plannedFieldResult69 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedFieldResult();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes70 = plannedFieldResult69.AuditAttributes;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails71 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails73 = labResultDetails71.setAnalysisComment("/AQUARIUS/Acquisition/v2");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes74 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails75 = labResultDetails73.setAuditAttributes(auditAttributes74);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedFieldResult plannedFieldResult76 = plannedFieldResult69.setAuditAttributes(auditAttributes74);
        putSchedule64.AuditAttributes = auditAttributes74;
        labInstructionTemplate59.AuditAttributes = auditAttributes74;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Project project79 = project53.setAuditAttributes(auditAttributes74);
        postDetectioncondition50.AuditAttributes = auditAttributes74;
        java.time.OffsetDateTime offsetDateTime81 = auditAttributes74.CreationTime;
        categoricalValue9.AuditAttributes = auditAttributes74;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutShippingContainer putShippingContainer83 = putShippingContainer0.setAuditAttributes(auditAttributes74);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutShippingContainer putShippingContainer85 = putShippingContainer0.setId("multipart/form-data; boundary=****da58f2ef-63a3-4c78-8209-7fba304b6eeb****");
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(putShippingContainer3);
        org.junit.Assert.assertNull(auditAttributes4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(putShippingContainer7);
        org.junit.Assert.assertNull(auditAttributes8);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(putObservationV2_15);
        org.junit.Assert.assertNull(activity16);
        org.junit.Assert.assertNotNull(putObservationV2_18);
        org.junit.Assert.assertNotNull(labInstruction21);
        org.junit.Assert.assertNotNull(specimenTemplate26);
        org.junit.Assert.assertTrue("'" + preservativeType27 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PreservativeType.SODIUM_AZIDE + "'", preservativeType27.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PreservativeType.SODIUM_AZIDE));
        org.junit.Assert.assertNotNull(labResultDetails31);
        org.junit.Assert.assertNotNull(labResultDetails33);
        org.junit.Assert.assertNotNull(specimenTemplate34);
        org.junit.Assert.assertNull(boolean36);
        org.junit.Assert.assertNull(boolean37);
        org.junit.Assert.assertNotNull(auditAttributes38);
        org.junit.Assert.assertNotNull(putObservationV2_39);
        org.junit.Assert.assertNull(auditAttributes42);
        org.junit.Assert.assertNotNull(postDetectioncondition44);
        org.junit.Assert.assertNotNull(postDetectioncondition48);
        org.junit.Assert.assertNotNull(postDetectioncondition50);
        org.junit.Assert.assertNull(str54);
        org.junit.Assert.assertNotNull(project58);
        org.junit.Assert.assertNull(str60);
        org.junit.Assert.assertNull(offsetDateTime62);
        org.junit.Assert.assertNotNull(putSchedule64);
        org.junit.Assert.assertNull(auditAttributes65);
        org.junit.Assert.assertNull(recurrenceDayMonthlyType68);
        org.junit.Assert.assertNull(auditAttributes70);
        org.junit.Assert.assertNotNull(labResultDetails73);
        org.junit.Assert.assertNotNull(labResultDetails75);
        org.junit.Assert.assertNotNull(plannedFieldResult76);
        org.junit.Assert.assertNotNull(project79);
        org.junit.Assert.assertNull(offsetDateTime81);
        org.junit.Assert.assertNotNull(putShippingContainer83);
        org.junit.Assert.assertNotNull(putShippingContainer85);
    }

    @Test
    public void test42550() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest85.test42550");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation();
        observation0.CustomId = "hi!";
        java.lang.String str3 = observation0.CustomId;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationStatistics observationStatistics4 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationStatistics();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation5 = observation0.setStatistics(observationStatistics4);
        java.lang.Double double6 = observationStatistics4.getMin();
        java.lang.Double double7 = observationStatistics4.Min;
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "hi!" + "'", str3, "hi!");
        org.junit.Assert.assertNotNull(observation5);
        org.junit.Assert.assertNull(double6);
        org.junit.Assert.assertNull(double7);
    }

    @Test
    public void test42551() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest85.test42551");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetChartDataV2 getChartDataV2_0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetChartDataV2();
        java.lang.String str1 = getChartDataV2_0.getActivityCustomId();
        java.lang.String str2 = getChartDataV2_0.DepthUnitId;
        java.util.List<java.lang.String> strList3 = getChartDataV2_0.SpecimenIds;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetChartDataV2 getChartDataV2_4 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetChartDataV2();
        getChartDataV2_4.DetectionCondition = "/AQUARIUS/Acquisition/v2://9999-12-31T23:59:59.999Z";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.GageHeightReading gageHeightReading7 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.GageHeightReading();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ControlConditionActivity controlConditionActivity8 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ControlConditionActivity();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ControlCleanedType controlCleanedType9 = null;
        controlConditionActivity8.ControlCleaned = controlCleanedType9;
        java.lang.String str11 = controlConditionActivity8.getComments();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary12 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        dischargeSummary12.Reviewer = "";
        java.time.Instant instant15 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        dischargeSummary12.MeasurementTime = instant15;
        controlConditionActivity8.DateCleaned = instant15;
        gageHeightReading7.ReadingTime = instant15;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay19 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay21 = doubleWithDisplay19.setNumeric((java.lang.Double) 10.0d);
        java.lang.String str22 = doubleWithDisplay21.getDisplay();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.GageHeightReading gageHeightReading23 = gageHeightReading7.setGageHeight(doubleWithDisplay21);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetChartDataV2 getChartDataV2_24 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetChartDataV2();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary25 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary27 = dischargeSummary25.setMeanGageHeightMethod("hi!");
        java.lang.String str28 = dischargeSummary27.MeasurementId;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary30 = dischargeSummary27.setDischargeMethod("yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSSSSSZZZZZ");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CalibrationCheck calibrationCheck31 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CalibrationCheck();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CalibrationCheckType calibrationCheckType32 = calibrationCheck31.getCalibrationCheckType();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay33 = calibrationCheck31.Value;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse34 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary35 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary37 = dischargeSummary35.setPublish((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse38 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant39 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse40 = locationDescriptionListServiceResponse38.setNextToken(instant39);
        dischargeSummary35.MeasurementTime = instant39;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse42 = locationDescriptionListServiceResponse34.setNextToken(instant39);
        java.time.Instant instant43 = locationDescriptionListServiceResponse34.getNextToken();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CalibrationCheck calibrationCheck44 = calibrationCheck31.setTime(instant43);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary45 = dischargeSummary27.setMeasurementTime(instant43);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetChartDataV2 getChartDataV2_46 = getChartDataV2_24.setStartResultTime(instant43);
        gageHeightReading7.ReadingTime = instant43;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetChartDataV2 getChartDataV2_48 = getChartDataV2_4.setStartObservedTime(instant43);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetChartDataV2 getChartDataV2_49 = getChartDataV2_0.setEndResultTime(instant43);
        java.util.List<java.lang.String> strList50 = getChartDataV2_0.getTaxonIds();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetChartDataV2 getChartDataV2_52 = getChartDataV2_0.setSpecimenName("/AQUARIUS/Provisioning/v1");
        getChartDataV2_0.Cursor = "multipart/form-data; boundary=****26835278-3e68-484a-a157-468aab2e69a2****";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetFieldVisits getFieldVisits55 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetFieldVisits();
        java.util.List<java.lang.String> strList56 = getFieldVisits55.getSamplingLocationIds();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags57 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray61 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList62 = new java.util.ArrayList<java.lang.String>();
        boolean boolean63 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList62, strArray61);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags64 = putLocationTags57.setTagUniqueIds(strList62);
        java.util.ArrayList<java.lang.String> strList65 = putLocationTags64.TagUniqueIds;
        getFieldVisits55.ScheduleIds = strList65;
        java.lang.Integer int67 = getFieldVisits55.Limit;
        java.util.List<java.lang.String> strList68 = getFieldVisits55.getFieldTripIds();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_69 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray71 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList72 = new java.util.ArrayList<java.lang.String>();
        boolean boolean73 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList72, strArray71);
        getObservationsV2_69.SpecimenIds = strList72;
        getFieldVisits55.Search = strList72;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetChartDataV2 getChartDataV2_76 = getChartDataV2_0.setSamplingContextTagIds((java.util.List<java.lang.String>) strList72);
        java.util.List<java.lang.String> strList77 = getChartDataV2_0.getCollectionMethodIds();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(strList3);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNotNull(instant15);
        org.junit.Assert.assertNotNull(doubleWithDisplay21);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertNotNull(gageHeightReading23);
        org.junit.Assert.assertNotNull(dischargeSummary27);
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertNotNull(dischargeSummary30);
        org.junit.Assert.assertNull(calibrationCheckType32);
        org.junit.Assert.assertNull(doubleWithDisplay33);
        org.junit.Assert.assertNotNull(dischargeSummary37);
        org.junit.Assert.assertNotNull(instant39);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse40);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse42);
        org.junit.Assert.assertNotNull(instant43);
        org.junit.Assert.assertNotNull(calibrationCheck44);
        org.junit.Assert.assertNotNull(dischargeSummary45);
        org.junit.Assert.assertNotNull(getChartDataV2_46);
        org.junit.Assert.assertNotNull(getChartDataV2_48);
        org.junit.Assert.assertNotNull(getChartDataV2_49);
        org.junit.Assert.assertNull(strList50);
        org.junit.Assert.assertNotNull(getChartDataV2_52);
        org.junit.Assert.assertNull(strList56);
        org.junit.Assert.assertNotNull(strArray61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNotNull(putLocationTags64);
        org.junit.Assert.assertNotNull(strList65);
        org.junit.Assert.assertNull(int67);
        org.junit.Assert.assertNull(strList68);
        org.junit.Assert.assertNotNull(strArray71);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertNotNull(getChartDataV2_76);
        org.junit.Assert.assertNull(strList77);
    }

    @Test
    public void test42552() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest85.test42552");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SearchResultResultStatus searchResultResultStatus0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SearchResultResultStatus();
        java.lang.String str1 = searchResultResultStatus0.Cursor;
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultStatus> resultStatusList2 = searchResultResultStatus0.getDomainObjects();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SearchResultResultStatus searchResultResultStatus4 = searchResultResultStatus0.setTotalCount((java.lang.Integer) 100);
        searchResultResultStatus0.TotalCount = 1;
        searchResultResultStatus0.Cursor = "";
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultStatus> resultStatusList9 = searchResultResultStatus0.DomainObjects;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SearchResultResultStatus searchResultResultStatus11 = searchResultResultStatus0.setCursor("****b4959745-e712-43bc-98bb-4017f673cd3d****");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SearchResultResultStatus searchResultResultStatus13 = searchResultResultStatus11.setCursor("/AQUARIUS/Acquisition/v2");
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(resultStatusList2);
        org.junit.Assert.assertNotNull(searchResultResultStatus4);
        org.junit.Assert.assertNull(resultStatusList9);
        org.junit.Assert.assertNotNull(searchResultResultStatus11);
        org.junit.Assert.assertNotNull(searchResultResultStatus13);
    }

    @Test
    public void test42553() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest85.test42553");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DeleteFieldVisits deleteFieldVisits0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DeleteFieldVisits();
        java.util.List<java.lang.String> strList1 = deleteFieldVisits0.ProjectIds;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_2 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray4 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList5 = new java.util.ArrayList<java.lang.String>();
        boolean boolean6 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList5, strArray4);
        getObservationsV2_2.SpecimenIds = strList5;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags8 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray12 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList13 = new java.util.ArrayList<java.lang.String>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList13, strArray12);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags15 = putLocationTags8.setTagUniqueIds(strList13);
        getObservationsV2_2.QualityControlTypes = strList13;
        java.util.List<java.lang.String> strList17 = getObservationsV2_2.getAnalyticalGroupIds();
        java.util.List<java.lang.String> strList18 = getObservationsV2_2.DataClassifications;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.FieldResultType fieldResultType19 = getObservationsV2_2.FieldResultType;
        java.time.Instant instant20 = getObservationsV2_2.getEndObservedTime();
        java.lang.String str21 = getObservationsV2_2.DepthUnitCustomId;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags22 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray26 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList27 = new java.util.ArrayList<java.lang.String>();
        boolean boolean28 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList27, strArray26);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags29 = putLocationTags22.setTagUniqueIds(strList27);
        java.util.ArrayList<java.lang.String> strList30 = putLocationTags29.TagUniqueIds;
        getObservationsV2_2.ProjectIds = strList30;
        deleteFieldVisits0.ProjectIds = strList30;
        java.util.List<java.lang.String> strList33 = deleteFieldVisits0.Search;
        java.util.List<java.lang.String> strList34 = deleteFieldVisits0.FieldTripIds;
        org.junit.Assert.assertNull(strList1);
        org.junit.Assert.assertNotNull(strArray4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(putLocationTags15);
        org.junit.Assert.assertNull(strList17);
        org.junit.Assert.assertNull(strList18);
        org.junit.Assert.assertNull(fieldResultType19);
        org.junit.Assert.assertNull(instant20);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(putLocationTags29);
        org.junit.Assert.assertNotNull(strList30);
        org.junit.Assert.assertNull(strList33);
        org.junit.Assert.assertNull(strList34);
    }

    @Test
    public void test42554() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest85.test42554");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MethodOperation methodOperation0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MethodOperation();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeOperationType metadataChangeOperationType1 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeOperationType.Creation;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MethodOperation methodOperation2 = methodOperation0.setOperationType(metadataChangeOperationType1);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MethodOperation methodOperation4 = methodOperation2.setComments("yyyy'-'MM'-'dd'T'HH':'mm':'ss");
        java.lang.String str5 = methodOperation2.getUser();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MethodOperation methodOperation7 = methodOperation2.setUser("multipart/form-data; boundary=****f2ce0d54-dac7-4cd0-b74f-1024089261f9****");
        methodOperation2.Comments = "MinInstant";
        java.lang.Integer int10 = methodOperation2.StackPosition;
        org.junit.Assert.assertTrue("'" + metadataChangeOperationType1 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeOperationType.Creation + "'", metadataChangeOperationType1.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeOperationType.Creation));
        org.junit.Assert.assertNotNull(methodOperation2);
        org.junit.Assert.assertNotNull(methodOperation4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(methodOperation7);
        org.junit.Assert.assertNull(int10);
    }

    @Test
    public void test42555() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest85.test42555");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RoundServiceRequest roundServiceRequest0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RoundServiceRequest();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RoundServiceRequest roundServiceRequest2 = roundServiceRequest0.setValueForNaN("MaxDuration");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RoundServiceRequest roundServiceRequest4 = roundServiceRequest0.setMethodCode("0001-01-01T00:00:00.0000000Z");
        org.junit.Assert.assertNotNull(roundServiceRequest2);
        org.junit.Assert.assertNotNull(roundServiceRequest4);
    }

    @Test
    public void test42556() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest85.test42556");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenNestedInActivity specimenNestedInActivity0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenNestedInActivity();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupSimple analyticalGroupSimple1 = specimenNestedInActivity0.AnalyticalGroup;
        java.lang.String str2 = specimenNestedInActivity0.Id;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenNestedInActivity specimenNestedInActivity4 = specimenNestedInActivity0.setId("MinInstant");
        org.junit.Assert.assertNull(analyticalGroupSimple1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNotNull(specimenNestedInActivity4);
    }

    @Test
    public void test42557() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest85.test42557");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Grade grade0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Grade();
        java.lang.Integer int1 = grade0.getGradeCode();
        java.lang.String str2 = grade0.Description;
        grade0.GradeCode = 1;
        java.lang.String str5 = grade0.getColor();
        org.junit.Assert.assertNull(int1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(str5);
    }

    @Test
    public void test42558() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest85.test42558");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlan samplingPlan0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlan();
        java.lang.Integer int1 = samplingPlan0.getSamplingLocationGroupSelectionTypeRandomCount();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlan samplingPlan3 = samplingPlan0.setSamplingLocationGroupSelectionTypeRandomCount((java.lang.Integer) 100);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlan samplingPlan5 = samplingPlan3.setCustomId("MinDuration");
        java.time.OffsetDateTime offsetDateTime6 = null;
        samplingPlan3.EndDate = offsetDateTime6;
        java.time.OffsetDateTime offsetDateTime8 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlan samplingPlan9 = samplingPlan3.setStartDate(offsetDateTime8);
        org.junit.Assert.assertNull(int1);
        org.junit.Assert.assertNotNull(samplingPlan3);
        org.junit.Assert.assertNotNull(samplingPlan5);
        org.junit.Assert.assertNotNull(samplingPlan9);
    }

    @Test
    public void test42559() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest85.test42559");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFieldVisitActivityFromPlannedActivity postFieldVisitActivityFromPlannedActivity0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFieldVisitActivityFromPlannedActivity();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ActivityTemplate activityTemplate1 = postFieldVisitActivityFromPlannedActivity0.ActivityTemplate;
        postFieldVisitActivityFromPlannedActivity0.Id = "ZZZZZ";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutActivityTemplate putActivityTemplate4 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutActivityTemplate();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MediumType mediumType5 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MediumType.WATER;
        putActivityTemplate4.Medium = mediumType5;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFieldVisitActivityFromPlannedActivity postFieldVisitActivityFromPlannedActivity7 = postFieldVisitActivityFromPlannedActivity0.setMedium(mediumType5);
        java.lang.String str8 = postFieldVisitActivityFromPlannedActivity7.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFieldVisitActivityFromPlannedActivity postFieldVisitActivityFromPlannedActivity10 = postFieldVisitActivityFromPlannedActivity7.setInstruction("");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ActivityTemplate activityTemplate11 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ActivityTemplate();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes12 = null;
        activityTemplate11.AuditAttributes = auditAttributes12;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutActivityTemplate putActivityTemplate14 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutActivityTemplate();
        java.lang.String str15 = putActivityTemplate14.getId();
        java.lang.String str16 = putActivityTemplate14.Id;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes17 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes19 = auditAttributes17.setCreationUserProfileId("'.'SSSSSSS");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutActivityTemplate putActivityTemplate20 = putActivityTemplate14.setAuditAttributes(auditAttributes19);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MediumType mediumType21 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MediumType.WATER;
        putActivityTemplate20.Medium = mediumType21;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ActivityTemplate activityTemplate23 = activityTemplate11.setMedium(mediumType21);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ActivityTemplateType activityTemplateType24 = activityTemplate11.getType();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFieldVisitActivityWithTemplate postFieldVisitActivityWithTemplate25 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFieldVisitActivityWithTemplate();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes26 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFieldVisitActivityWithTemplate postFieldVisitActivityWithTemplate27 = postFieldVisitActivityWithTemplate25.setAuditAttributes(auditAttributes26);
        java.lang.String str28 = postFieldVisitActivityWithTemplate27.getCustomId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFieldVisitActivityWithTemplate postFieldVisitActivityWithTemplate30 = postFieldVisitActivityWithTemplate27.setId("MinDuration");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity quantity31 = postFieldVisitActivityWithTemplate27.getDepth();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ActivityTemplateType activityTemplateType32 = postFieldVisitActivityWithTemplate27.Type;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostDetectioncondition postDetectioncondition33 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostDetectioncondition();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate34 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate36 = specimenTemplate34.setCustomId("hi!");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PreservativeType preservativeType37 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PreservativeType.SODIUM_AZIDE;
        specimenTemplate36.Preservative = preservativeType37;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails39 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails41 = labResultDetails39.setAnalysisComment("/AQUARIUS/Acquisition/v2");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes42 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails43 = labResultDetails41.setAuditAttributes(auditAttributes42);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate44 = specimenTemplate36.setAuditAttributes(auditAttributes42);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostDetectioncondition postDetectioncondition45 = postDetectioncondition33.setAuditAttributes(auditAttributes42);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFieldVisitActivityWithTemplate postFieldVisitActivityWithTemplate46 = postFieldVisitActivityWithTemplate27.setAuditAttributes(auditAttributes42);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ActivityTemplateType activityTemplateType47 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ActivityTemplateType.FIELD_SURVEY;
        postFieldVisitActivityWithTemplate27.Type = activityTemplateType47;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ActivityTemplateType activityTemplateType49 = postFieldVisitActivityWithTemplate27.Type;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ActivityTemplate activityTemplate50 = activityTemplate11.setType(activityTemplateType49);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFieldVisitActivityFromPlannedActivity postFieldVisitActivityFromPlannedActivity51 = postFieldVisitActivityFromPlannedActivity10.setActivityTemplate(activityTemplate50);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes52 = postFieldVisitActivityFromPlannedActivity10.getAuditAttributes();
        org.junit.Assert.assertNull(activityTemplate1);
        org.junit.Assert.assertTrue("'" + mediumType5 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MediumType.WATER + "'", mediumType5.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MediumType.WATER));
        org.junit.Assert.assertNotNull(postFieldVisitActivityFromPlannedActivity7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "ZZZZZ" + "'", str8, "ZZZZZ");
        org.junit.Assert.assertNotNull(postFieldVisitActivityFromPlannedActivity10);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNotNull(auditAttributes19);
        org.junit.Assert.assertNotNull(putActivityTemplate20);
        org.junit.Assert.assertTrue("'" + mediumType21 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MediumType.WATER + "'", mediumType21.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MediumType.WATER));
        org.junit.Assert.assertNotNull(activityTemplate23);
        org.junit.Assert.assertNull(activityTemplateType24);
        org.junit.Assert.assertNotNull(postFieldVisitActivityWithTemplate27);
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertNotNull(postFieldVisitActivityWithTemplate30);
        org.junit.Assert.assertNull(quantity31);
        org.junit.Assert.assertNull(activityTemplateType32);
        org.junit.Assert.assertNotNull(specimenTemplate36);
        org.junit.Assert.assertTrue("'" + preservativeType37 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PreservativeType.SODIUM_AZIDE + "'", preservativeType37.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PreservativeType.SODIUM_AZIDE));
        org.junit.Assert.assertNotNull(labResultDetails41);
        org.junit.Assert.assertNotNull(labResultDetails43);
        org.junit.Assert.assertNotNull(specimenTemplate44);
        org.junit.Assert.assertNotNull(postDetectioncondition45);
        org.junit.Assert.assertNotNull(postFieldVisitActivityWithTemplate46);
        org.junit.Assert.assertTrue("'" + activityTemplateType47 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ActivityTemplateType.FIELD_SURVEY + "'", activityTemplateType47.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ActivityTemplateType.FIELD_SURVEY));
        org.junit.Assert.assertTrue("'" + activityTemplateType49 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ActivityTemplateType.FIELD_SURVEY + "'", activityTemplateType49.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ActivityTemplateType.FIELD_SURVEY));
        org.junit.Assert.assertNotNull(activityTemplate50);
        org.junit.Assert.assertNotNull(postFieldVisitActivityFromPlannedActivity51);
        org.junit.Assert.assertNull(auditAttributes52);
    }

    @Test
    public void test42560() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest85.test42560");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostDatumConvertedTimeSeries postDatumConvertedTimeSeries0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostDatumConvertedTimeSeries();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostDatumConvertedTimeSeries postDatumConvertedTimeSeries2 = postDatumConvertedTimeSeries0.setDescription("yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ");
        java.lang.Boolean boolean3 = postDatumConvertedTimeSeries2.isTargetIsLocalAssumedDatum();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostDatumConvertedTimeSeries postDatumConvertedTimeSeries5 = postDatumConvertedTimeSeries2.setTargetStandardReferenceDatumIdentifier("multipart/form-data; boundary=****59879c02-0839-4b96-bc41-a13ebb706be4****");
        org.junit.Assert.assertNotNull(postDatumConvertedTimeSeries2);
        org.junit.Assert.assertNull(boolean3);
        org.junit.Assert.assertNotNull(postDatumConvertedTimeSeries5);
    }

    @Test
    public void test42561() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest85.test42561");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Correction correction0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Correction();
        java.util.HashMap<java.lang.String, java.lang.Object> strMap1 = correction0.Parameters;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CorrectionProcessingOrder correctionProcessingOrder2 = correction0.getProcessingOrder();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Correction correction3 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Correction();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CorrectionOperation correctionOperation4 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CorrectionOperation();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CorrectionType correctionType5 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CorrectionType.AdjustableTrim;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CorrectionOperation correctionOperation6 = correctionOperation4.setType(correctionType5);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CorrectionProcessingOrder correctionProcessingOrder7 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CorrectionProcessingOrder.PreProcessing;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CorrectionOperation correctionOperation8 = correctionOperation4.setProcessingOrder(correctionProcessingOrder7);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CorrectionType correctionType9 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CorrectionType.Percent;
        correctionOperation4.Type = correctionType9;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Correction correction11 = correction3.setType(correctionType9);
        correction0.Type = correctionType9;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingModelEffectiveShiftsByStageValuesServiceRequest ratingModelEffectiveShiftsByStageValuesServiceRequest13 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingModelEffectiveShiftsByStageValuesServiceRequest();
        java.lang.String str14 = ratingModelEffectiveShiftsByStageValuesServiceRequest13.RatingModelIdentifier;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RoundServiceSpecRequest roundServiceSpecRequest15 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RoundServiceSpecRequest();
        java.lang.String str16 = roundServiceSpecRequest15.RoundingSpec;
        java.lang.String str17 = roundServiceSpecRequest15.ValueForNaN;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RoundServiceSpecRequest roundServiceSpecRequest18 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RoundServiceSpecRequest();
        java.lang.String str19 = roundServiceSpecRequest18.RoundingSpec;
        java.lang.String str20 = roundServiceSpecRequest18.ValueForNaN;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingModelInputValuesServiceResponse ratingModelInputValuesServiceResponse21 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingModelInputValuesServiceResponse();
        java.lang.Double[] doubleArray23 = new java.lang.Double[] { 0.0d };
        java.util.ArrayList<java.lang.Double> doubleList24 = new java.util.ArrayList<java.lang.Double>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<java.lang.Double>) doubleList24, doubleArray23);
        ratingModelInputValuesServiceResponse21.InputValues = doubleList24;
        java.util.ArrayList<java.lang.Double> doubleList27 = ratingModelInputValuesServiceResponse21.InputValues;
        java.util.ArrayList<java.lang.Double> doubleList28 = ratingModelInputValuesServiceResponse21.InputValues;
        java.util.ArrayList<java.lang.Double> doubleList29 = ratingModelInputValuesServiceResponse21.getInputValues();
        roundServiceSpecRequest18.Data = doubleList29;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingModelOutputValuesServiceRequest ratingModelOutputValuesServiceRequest31 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingModelOutputValuesServiceRequest();
        ratingModelOutputValuesServiceRequest31.ApplyShifts = true;
        java.time.Instant instant34 = ratingModelOutputValuesServiceRequest31.getEffectiveTime();
        java.lang.String str35 = ratingModelOutputValuesServiceRequest31.getRatingModelIdentifier();
        java.time.Instant instant36 = ratingModelOutputValuesServiceRequest31.EffectiveTime;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingModelOutputValuesServiceRequest ratingModelOutputValuesServiceRequest37 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingModelOutputValuesServiceRequest();
        ratingModelOutputValuesServiceRequest37.ApplyShifts = true;
        java.time.Instant instant40 = ratingModelOutputValuesServiceRequest37.getEffectiveTime();
        java.lang.String str41 = ratingModelOutputValuesServiceRequest37.getRatingModelIdentifier();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingModelOutputValuesServiceRequest ratingModelOutputValuesServiceRequest43 = ratingModelOutputValuesServiceRequest37.setApplyShifts((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingModelOutputValuesServiceRequest ratingModelOutputValuesServiceRequest45 = ratingModelOutputValuesServiceRequest43.setRatingModelIdentifier("yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingModelOutputValuesServiceResponse ratingModelOutputValuesServiceResponse46 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingModelOutputValuesServiceResponse();
        java.lang.Double[] doubleArray50 = new java.lang.Double[] { 1.0d, 100.0d, (-1.0d) };
        java.util.ArrayList<java.lang.Double> doubleList51 = new java.util.ArrayList<java.lang.Double>();
        boolean boolean52 = java.util.Collections.addAll((java.util.Collection<java.lang.Double>) doubleList51, doubleArray50);
        ratingModelOutputValuesServiceResponse46.OutputValues = doubleList51;
        ratingModelOutputValuesServiceRequest45.InputValues = doubleList51;
        ratingModelOutputValuesServiceRequest31.InputValues = doubleList51;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RoundServiceSpecRequest roundServiceSpecRequest56 = roundServiceSpecRequest18.setData(doubleList51);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RoundServiceSpecRequest roundServiceSpecRequest57 = roundServiceSpecRequest15.setData(doubleList51);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingModelEffectiveShiftsByStageValuesServiceRequest ratingModelEffectiveShiftsByStageValuesServiceRequest58 = ratingModelEffectiveShiftsByStageValuesServiceRequest13.setStageValues(doubleList51);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitReading fieldVisitReading59 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitReading();
        java.util.ArrayList<java.lang.String> strList60 = fieldVisitReading59.getQualifiers();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay61 = null;
        fieldVisitReading59.AdjustmentAmount = quantityWithDisplay61;
        java.time.Instant instant63 = com.aquaticinformatics.aquarius.sdk.samples.serializers.InstantDeserializer.MaxValue;
        fieldVisitReading59.Time = instant63;
        fieldVisitReading59.SerialNumber = "MinDuration";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Uncertainty uncertainty67 = null;
        fieldVisitReading59.Uncertainty = uncertainty67;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DownchainProcessorListByRatingModelServiceRequest downchainProcessorListByRatingModelServiceRequest69 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DownchainProcessorListByRatingModelServiceRequest();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeTransactionListServiceRequest metadataChangeTransactionListServiceRequest70 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeTransactionListServiceRequest();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostRecurringReport postRecurringReport71 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostRecurringReport();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary72 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        dischargeSummary72.Reviewer = "";
        java.time.Instant instant75 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        dischargeSummary72.MeasurementTime = instant75;
        postRecurringReport71.NextGenerationDate = instant75;
        java.time.Instant instant78 = postRecurringReport71.getNextGenerationDate();
        java.lang.String str79 = com.aquaticinformatics.aquarius.sdk.samples.serializers.InstantSerializer.format(instant78);
        metadataChangeTransactionListServiceRequest70.QueryFrom = instant78;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DownchainProcessorListByRatingModelServiceRequest downchainProcessorListByRatingModelServiceRequest81 = downchainProcessorListByRatingModelServiceRequest69.setQueryTo(instant78);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DownchainProcessorListByRatingModelServiceRequest downchainProcessorListByRatingModelServiceRequest83 = downchainProcessorListByRatingModelServiceRequest69.setRatingModelIdentifier("hi!");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Qualifier qualifier84 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Qualifier();
        java.time.Instant instant85 = qualifier84.DateApplied;
        java.lang.String str86 = qualifier84.User;
        java.lang.String str87 = qualifier84.getIdentifier();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostRecurringReport postRecurringReport88 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostRecurringReport();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary89 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        dischargeSummary89.Reviewer = "";
        java.time.Instant instant92 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        dischargeSummary89.MeasurementTime = instant92;
        postRecurringReport88.NextGenerationDate = instant92;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Qualifier qualifier95 = qualifier84.setDateApplied(instant92);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DownchainProcessorListByRatingModelServiceRequest downchainProcessorListByRatingModelServiceRequest96 = downchainProcessorListByRatingModelServiceRequest69.setQueryTo(instant92);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitReading fieldVisitReading97 = fieldVisitReading59.setTime(instant92);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingModelEffectiveShiftsByStageValuesServiceRequest ratingModelEffectiveShiftsByStageValuesServiceRequest98 = ratingModelEffectiveShiftsByStageValuesServiceRequest58.setMeasurementTime(instant92);
        correction0.StartTime = instant92;
        org.junit.Assert.assertNull(strMap1);
        org.junit.Assert.assertNull(correctionProcessingOrder2);
        org.junit.Assert.assertTrue("'" + correctionType5 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CorrectionType.AdjustableTrim + "'", correctionType5.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CorrectionType.AdjustableTrim));
        org.junit.Assert.assertNotNull(correctionOperation6);
        org.junit.Assert.assertTrue("'" + correctionProcessingOrder7 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CorrectionProcessingOrder.PreProcessing + "'", correctionProcessingOrder7.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CorrectionProcessingOrder.PreProcessing));
        org.junit.Assert.assertNotNull(correctionOperation8);
        org.junit.Assert.assertTrue("'" + correctionType9 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CorrectionType.Percent + "'", correctionType9.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CorrectionType.Percent));
        org.junit.Assert.assertNotNull(correction11);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(doubleList27);
        org.junit.Assert.assertNotNull(doubleList28);
        org.junit.Assert.assertNotNull(doubleList29);
        org.junit.Assert.assertNull(instant34);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertNull(instant36);
        org.junit.Assert.assertNull(instant40);
        org.junit.Assert.assertNull(str41);
        org.junit.Assert.assertNotNull(ratingModelOutputValuesServiceRequest43);
        org.junit.Assert.assertNotNull(ratingModelOutputValuesServiceRequest45);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(roundServiceSpecRequest56);
        org.junit.Assert.assertNotNull(roundServiceSpecRequest57);
        org.junit.Assert.assertNotNull(ratingModelEffectiveShiftsByStageValuesServiceRequest58);
        org.junit.Assert.assertNull(strList60);
        org.junit.Assert.assertNotNull(instant63);
        org.junit.Assert.assertNotNull(instant75);
        org.junit.Assert.assertNotNull(instant78);
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "9999-12-31T23:59:59.999Z" + "'", str79, "9999-12-31T23:59:59.999Z");
        org.junit.Assert.assertNotNull(downchainProcessorListByRatingModelServiceRequest81);
        org.junit.Assert.assertNotNull(downchainProcessorListByRatingModelServiceRequest83);
        org.junit.Assert.assertNull(instant85);
        org.junit.Assert.assertNull(str86);
        org.junit.Assert.assertNull(str87);
        org.junit.Assert.assertNotNull(instant92);
        org.junit.Assert.assertNotNull(qualifier95);
        org.junit.Assert.assertNotNull(downchainProcessorListByRatingModelServiceRequest96);
        org.junit.Assert.assertNotNull(fieldVisitReading97);
        org.junit.Assert.assertNotNull(ratingModelEffectiveShiftsByStageValuesServiceRequest98);
    }

    @Test
    public void test42562() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest85.test42562");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.PostReflectedTimeSeries postReflectedTimeSeries0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.PostReflectedTimeSeries();
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.TimeSeriesPoint> timeSeriesPointList1 = postReflectedTimeSeries0.Points;
        java.lang.String str2 = postReflectedTimeSeries0.getUniqueId();
        java.lang.String str3 = postReflectedTimeSeries0.UniqueId;
        org.junit.Assert.assertNull(timeSeriesPointList1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(str3);
    }

    @Test
    public void test42563() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest85.test42563");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFieldTrip postFieldTrip0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFieldTrip();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFieldTrip postFieldTrip2 = postFieldTrip0.setId("yyyy'-'MM'-'dd'T'HH':'mm':'ss");
        java.time.OffsetDateTime offsetDateTime3 = null;
        postFieldTrip0.StartTime = offsetDateTime3;
        postFieldTrip0.Participants = "9999-12-31T23:59:59.9999999Z";
        java.time.OffsetDateTime offsetDateTime7 = postFieldTrip0.getEndTime();
        java.lang.String str8 = postFieldTrip0.getId();
        org.junit.Assert.assertNotNull(postFieldTrip2);
        org.junit.Assert.assertNull(offsetDateTime7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "yyyy'-'MM'-'dd'T'HH':'mm':'ss" + "'", str8, "yyyy'-'MM'-'dd'T'HH':'mm':'ss");
    }

    @Test
    public void test42564() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest85.test42564");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostImportLabReportData postImportLabReportData0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostImportLabReportData();
        java.lang.String str1 = postImportLabReportData0.TimeZoneOffset;
        java.lang.String str2 = postImportLabReportData0.TimeZoneOffset;
        java.lang.Boolean boolean3 = postImportLabReportData0.getCreateMissingObjects();
        java.lang.Boolean boolean4 = postImportLabReportData0.CreateMissingObjects;
        java.lang.String str5 = postImportLabReportData0.getFileType();
        java.lang.String str6 = postImportLabReportData0.getTimeZoneOffset();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostImportLabReportData postImportLabReportData8 = postImportLabReportData0.setUpdateExistingResults((java.lang.Boolean) false);
        java.lang.Boolean boolean9 = postImportLabReportData0.getUpdateExistingResults();
        java.lang.String str10 = postImportLabReportData0.getTimeZoneOffset();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(boolean3);
        org.junit.Assert.assertNull(boolean4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNotNull(postImportLabReportData8);
        org.junit.Assert.assertEquals("'" + boolean9 + "' != '" + false + "'", boolean9, false);
        org.junit.Assert.assertNull(str10);
    }

    @Test
    public void test42565() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest85.test42565");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutUnit putUnit0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutUnit();
        putUnit0.PluralName = "http://MaxDurationhttp/json/reply/Integer";
        java.lang.String str3 = putUnit0.PluralName;
        putUnit0.Symbol = "MinInstant";
        java.lang.String str6 = putUnit0.getUniqueId();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "http://MaxDurationhttp/json/reply/Integer" + "'", str3, "http://MaxDurationhttp/json/reply/Integer");
        org.junit.Assert.assertNull(str6);
    }

    @Test
    public void test42566() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest85.test42566");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ApprovalLevel approvalLevel0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ApprovalLevel();
        java.lang.Long long1 = approvalLevel0.Level;
        java.lang.Long long2 = approvalLevel0.Level;
        approvalLevel0.Color = "";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ApprovalLevel approvalLevel6 = approvalLevel0.setColor("yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSSSSSZZZZZ");
        java.lang.Long long7 = approvalLevel0.Level;
        java.lang.Long long8 = approvalLevel0.getLevel();
        org.junit.Assert.assertNull(long1);
        org.junit.Assert.assertNull(long2);
        org.junit.Assert.assertNotNull(approvalLevel6);
        org.junit.Assert.assertNull(long7);
        org.junit.Assert.assertNull(long8);
    }

    @Test
    public void test42567() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest85.test42567");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.MonitoringMethodWriteBase monitoringMethodWriteBase0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.MonitoringMethodWriteBase();
        monitoringMethodWriteBase0.MethodCode = "/AQUARIUS";
        java.lang.String str3 = monitoringMethodWriteBase0.getDisplayName();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.MonitoringMethodWriteBase monitoringMethodWriteBase5 = monitoringMethodWriteBase0.setDisplayName("");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.MonitoringMethodWriteBase monitoringMethodWriteBase7 = monitoringMethodWriteBase0.setDescription("/AQUARIUS/Acquisition/v2://9999-12-31T23:59:59.999Z");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.MonitoringMethodWriteBase monitoringMethodWriteBase9 = monitoringMethodWriteBase7.setMethodCode("-PT87591240H");
        java.lang.String str10 = monitoringMethodWriteBase9.DisplayName;
        monitoringMethodWriteBase9.ParameterUniqueId = "multipart/form-data; boundary=****59879c02-0839-4b96-bc41-a13ebb706be4****";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.MonitoringMethodWriteBase monitoringMethodWriteBase14 = monitoringMethodWriteBase9.setParameterUniqueId("multipart/form-data; boundary=****2d077bad-cd27-4736-8ba0-2a8d8a85733d****");
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(monitoringMethodWriteBase5);
        org.junit.Assert.assertNotNull(monitoringMethodWriteBase7);
        org.junit.Assert.assertNotNull(monitoringMethodWriteBase9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(monitoringMethodWriteBase14);
    }

    @Test
    public void test42568() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest85.test42568");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetChartDataV2 getChartDataV2_0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetChartDataV2();
        java.lang.String str1 = getChartDataV2_0.getActivityCustomId();
        java.util.List<java.lang.String> strList2 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetChartDataV2 getChartDataV2_3 = getChartDataV2_0.setSearch(strList2);
        java.time.Instant instant4 = getChartDataV2_0.StartModificationTime;
        java.util.List<java.lang.String> strList5 = getChartDataV2_0.getAnalysisMethodIds();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutBulkEditResultGradesV2 putBulkEditResultGradesV2_6 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutBulkEditResultGradesV2();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RoleFlattened roleFlattened7 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RoleFlattened();
        java.lang.Boolean boolean8 = roleFlattened7.CanRemoveFieldVisits;
        roleFlattened7.Name = "MaxInstant";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationType putLocationType11 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationType();
        java.lang.String str12 = putLocationType11.Description;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_13 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray16 = new java.lang.String[] { "", "" };
        java.util.ArrayList<java.lang.String> strList17 = new java.util.ArrayList<java.lang.String>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList17, strArray16);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_19 = getObservationsV2_13.setDataClassifications((java.util.List<java.lang.String>) strList17);
        getObservationsV2_19.DepthUnitCustomId = "hi!";
        java.lang.String str22 = getObservationsV2_19.CustomId;
        java.util.List<java.lang.String> strList23 = getObservationsV2_19.getSearch();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_24 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray26 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList27 = new java.util.ArrayList<java.lang.String>();
        boolean boolean28 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList27, strArray26);
        getObservationsV2_24.SpecimenIds = strList27;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags30 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray34 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList35 = new java.util.ArrayList<java.lang.String>();
        boolean boolean36 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList35, strArray34);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags37 = putLocationTags30.setTagUniqueIds(strList35);
        getObservationsV2_24.QualityControlTypes = strList35;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_39 = getObservationsV2_19.setMedia((java.util.List<java.lang.String>) strList35);
        putLocationType11.ExtendedAttributeDefinitionIds = strList35;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RoleFlattenedBase roleFlattenedBase41 = roleFlattened7.setRoleApprovalTransitions(strList35);
        putBulkEditResultGradesV2_6.ResultGrades = strList35;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationType putLocationType43 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationType();
        java.lang.String str44 = putLocationType43.Description;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_45 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray48 = new java.lang.String[] { "", "" };
        java.util.ArrayList<java.lang.String> strList49 = new java.util.ArrayList<java.lang.String>();
        boolean boolean50 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList49, strArray48);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_51 = getObservationsV2_45.setDataClassifications((java.util.List<java.lang.String>) strList49);
        getObservationsV2_51.DepthUnitCustomId = "hi!";
        java.lang.String str54 = getObservationsV2_51.CustomId;
        java.util.List<java.lang.String> strList55 = getObservationsV2_51.getSearch();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_56 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray58 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList59 = new java.util.ArrayList<java.lang.String>();
        boolean boolean60 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList59, strArray58);
        getObservationsV2_56.SpecimenIds = strList59;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags62 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray66 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList67 = new java.util.ArrayList<java.lang.String>();
        boolean boolean68 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList67, strArray66);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags69 = putLocationTags62.setTagUniqueIds(strList67);
        getObservationsV2_56.QualityControlTypes = strList67;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_71 = getObservationsV2_51.setMedia((java.util.List<java.lang.String>) strList67);
        putLocationType43.ExtendedAttributeDefinitionIds = strList67;
        putBulkEditResultGradesV2_6.LabResultLaboratoryIds = strList67;
        getChartDataV2_0.ResultStatuses = strList67;
        java.lang.String str75 = getChartDataV2_0.getCustomId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetChartDataV2 getChartDataV2_77 = getChartDataV2_0.setLimit((java.lang.Integer) 2);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(getChartDataV2_3);
        org.junit.Assert.assertNull(instant4);
        org.junit.Assert.assertNull(strList5);
        org.junit.Assert.assertNull(boolean8);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(getObservationsV2_19);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertNull(strList23);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(strArray34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(putLocationTags37);
        org.junit.Assert.assertNotNull(getObservationsV2_39);
        org.junit.Assert.assertNotNull(roleFlattenedBase41);
        org.junit.Assert.assertNull(str44);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(getObservationsV2_51);
        org.junit.Assert.assertNull(str54);
        org.junit.Assert.assertNull(strList55);
        org.junit.Assert.assertNotNull(strArray58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(strArray66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertNotNull(putLocationTags69);
        org.junit.Assert.assertNotNull(getObservationsV2_71);
        org.junit.Assert.assertNull(str75);
        org.junit.Assert.assertNotNull(getChartDataV2_77);
    }

    @Test
    public void test42569() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest85.test42569");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObservedProperty importItemObservedProperty0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObservedProperty();
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportChangeItem> importChangeItemList1 = importItemObservedProperty0.getItemComparison();
        java.lang.String str2 = importItemObservedProperty0.getInput();
        java.lang.Object obj3 = importItemObservedProperty0.Errors;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty observedProperty4 = importItemObservedProperty0.Item;
        org.junit.Assert.assertNull(importChangeItemList1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(observedProperty4);
    }

    @Test
    public void test42570() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest85.test42570");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.PostVisitFileToLocation postVisitFileToLocation0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.PostVisitFileToLocation();
        java.lang.String str1 = postVisitFileToLocation0.getLocationUniqueId();
        postVisitFileToLocation0.LocationUniqueId = "hi!";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.PostVisitFileToLocation postVisitFileToLocation5 = postVisitFileToLocation0.setLocationUniqueId("multipart/form-data; boundary=****44f0772e-c3ca-4316-8e2a-61ec8540d661****");
        java.lang.String str6 = postVisitFileToLocation0.LocationUniqueId;
        java.lang.Object obj7 = postVisitFileToLocation0.getResponseType();
        postVisitFileToLocation0.LocationUniqueId = "multipart/form-data; boundary=****2e497db8-6b91-47d6-99bc-df65af225bf8****";
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(postVisitFileToLocation5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "multipart/form-data; boundary=****44f0772e-c3ca-4316-8e2a-61ec8540d661****" + "'", str6, "multipart/form-data; boundary=****44f0772e-c3ca-4316-8e2a-61ec8540d661****");
        org.junit.Assert.assertNotNull(obj7);
        org.junit.Assert.assertEquals(obj7.toString(), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition$PostVisitFileResponse");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj7), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition$PostVisitFileResponse");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj7), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition$PostVisitFileResponse");
    }

    @Test
    public void test42571() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest85.test42571");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostUnitGroupWithUnit postUnitGroupWithUnit0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostUnitGroupWithUnit();
        postUnitGroupWithUnit0.Id = "multipart/form-data; boundary=****f2ce0d54-dac7-4cd0-b74f-1024089261f9****";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation3 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedFieldResult plannedFieldResult4 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation5 = observation3.setPlannedFieldResult(plannedFieldResult4);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabInstruction labInstruction6 = null;
        observation5.LabInstruction = labInstruction6;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationStatistics observationStatistics8 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation9 = observation5.setStatistics(observationStatistics8);
        java.time.OffsetDateTime offsetDateTime10 = observation9.getResultTime();
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple> importHistoryEventSimpleList11 = observation9.ImportHistoryEventSimples;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty observedProperty12 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation13 = observation9.setObservedProperty(observedProperty12);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultGrade resultGrade14 = observation13.ResultGrade;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails15 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails17 = labResultDetails15.setAnalysisComment("/AQUARIUS/Acquisition/v2");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes18 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails19 = labResultDetails17.setAuditAttributes(auditAttributes18);
        observation13.AuditAttributes = auditAttributes18;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostUnitGroupWithUnit postUnitGroupWithUnit21 = postUnitGroupWithUnit0.setAuditAttributes(auditAttributes18);
        java.lang.String str22 = postUnitGroupWithUnit21.Id;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostUnitGroupWithUnit postUnitGroupWithUnit24 = postUnitGroupWithUnit21.setSupportsConversion((java.lang.Boolean) true);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutActivityTemplate putActivityTemplate25 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutActivityTemplate();
        java.lang.String str26 = putActivityTemplate25.getId();
        java.lang.String str27 = putActivityTemplate25.Id;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes28 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes30 = auditAttributes28.setCreationUserProfileId("'.'SSSSSSS");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutActivityTemplate putActivityTemplate31 = putActivityTemplate25.setAuditAttributes(auditAttributes30);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MediumType mediumType32 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MediumType.WATER;
        putActivityTemplate31.Medium = mediumType32;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFieldVisitActivityWithTemplate postFieldVisitActivityWithTemplate34 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFieldVisitActivityWithTemplate();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate35 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate();
        specimenTemplate35.CustomId = "hi!";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate38 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate39 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate();
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabInstructionTemplate> labInstructionTemplateList40 = specimenTemplate39.getLabInstructionTemplates();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate41 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate43 = specimenTemplate41.setCustomId("hi!");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate44 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate45 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate();
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabInstructionTemplate> labInstructionTemplateList46 = specimenTemplate45.LabInstructionTemplates;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate[] specimenTemplateArray47 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate[] { specimenTemplate35, specimenTemplate38, specimenTemplate39, specimenTemplate43, specimenTemplate44, specimenTemplate45 };
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate> specimenTemplateList48 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate>();
        boolean boolean49 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate>) specimenTemplateList48, specimenTemplateArray47);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFieldVisitActivityWithTemplate postFieldVisitActivityWithTemplate50 = postFieldVisitActivityWithTemplate34.setSpecimenTemplates((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate>) specimenTemplateList48);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutActivityTemplate putActivityTemplate51 = putActivityTemplate31.setSpecimenTemplates((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate>) specimenTemplateList48);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes52 = putActivityTemplate31.getAuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes54 = auditAttributes52.setModificationUserProfileId("/AQUARIUS/Provisioning/v1");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostUnitGroupWithUnit postUnitGroupWithUnit55 = postUnitGroupWithUnit24.setAuditAttributes(auditAttributes54);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostUnitGroupWithUnit postUnitGroupWithUnit56 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostUnitGroupWithUnit();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostUnitGroupWithUnit postUnitGroupWithUnit58 = postUnitGroupWithUnit56.setCustomId("hi!");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostUnitGroupWithUnit postUnitGroupWithUnit59 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostUnitGroupWithUnit();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostUnitGroupWithUnit postUnitGroupWithUnit61 = postUnitGroupWithUnit59.setCustomId("hi!");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UnitGroupWithUnitsSystemCodeType unitGroupWithUnitsSystemCodeType62 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UnitGroupWithUnitsSystemCodeType.LENGTH;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostUnitGroupWithUnit postUnitGroupWithUnit63 = postUnitGroupWithUnit61.setSystemCode(unitGroupWithUnitsSystemCodeType62);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostUnitGroupWithUnit postUnitGroupWithUnit64 = postUnitGroupWithUnit58.setSystemCode(unitGroupWithUnitsSystemCodeType62);
        postUnitGroupWithUnit55.SystemCode = unitGroupWithUnitsSystemCodeType62;
        java.lang.String str66 = postUnitGroupWithUnit55.Id;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutDetectioncondition putDetectioncondition67 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutDetectioncondition();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes68 = putDetectioncondition67.getAuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutDetectioncondition putDetectioncondition70 = putDetectioncondition67.setCustomId("http");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivity samplingPlanPlannedActivity71 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivity();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes72 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivity samplingPlanPlannedActivity73 = samplingPlanPlannedActivity71.setAuditAttributes(auditAttributes72);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes74 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes76 = auditAttributes74.setCreationUserProfileId("'.'SSSSSSS");
        samplingPlanPlannedActivity73.AuditAttributes = auditAttributes74;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes78 = samplingPlanPlannedActivity73.AuditAttributes;
        putDetectioncondition67.AuditAttributes = auditAttributes78;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostUnitGroupWithUnit postUnitGroupWithUnit80 = postUnitGroupWithUnit55.setAuditAttributes(auditAttributes78);
        java.lang.String str81 = postUnitGroupWithUnit80.getCustomId();
        postUnitGroupWithUnit80.CustomId = "MinDuration";
        java.lang.Object obj84 = postUnitGroupWithUnit80.getResponseType();
        org.junit.Assert.assertNotNull(observation5);
        org.junit.Assert.assertNotNull(observation9);
        org.junit.Assert.assertNull(offsetDateTime10);
        org.junit.Assert.assertNull(importHistoryEventSimpleList11);
        org.junit.Assert.assertNotNull(observation13);
        org.junit.Assert.assertNull(resultGrade14);
        org.junit.Assert.assertNotNull(labResultDetails17);
        org.junit.Assert.assertNotNull(labResultDetails19);
        org.junit.Assert.assertNotNull(postUnitGroupWithUnit21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "multipart/form-data; boundary=****f2ce0d54-dac7-4cd0-b74f-1024089261f9****" + "'", str22, "multipart/form-data; boundary=****f2ce0d54-dac7-4cd0-b74f-1024089261f9****");
        org.junit.Assert.assertNotNull(postUnitGroupWithUnit24);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertNotNull(auditAttributes30);
        org.junit.Assert.assertNotNull(putActivityTemplate31);
        org.junit.Assert.assertTrue("'" + mediumType32 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MediumType.WATER + "'", mediumType32.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MediumType.WATER));
        org.junit.Assert.assertNull(labInstructionTemplateList40);
        org.junit.Assert.assertNotNull(specimenTemplate43);
        org.junit.Assert.assertNull(labInstructionTemplateList46);
        org.junit.Assert.assertNotNull(specimenTemplateArray47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(postFieldVisitActivityWithTemplate50);
        org.junit.Assert.assertNotNull(putActivityTemplate51);
        org.junit.Assert.assertNotNull(auditAttributes52);
        org.junit.Assert.assertNotNull(auditAttributes54);
        org.junit.Assert.assertNotNull(postUnitGroupWithUnit55);
        org.junit.Assert.assertNotNull(postUnitGroupWithUnit58);
        org.junit.Assert.assertNotNull(postUnitGroupWithUnit61);
        org.junit.Assert.assertTrue("'" + unitGroupWithUnitsSystemCodeType62 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UnitGroupWithUnitsSystemCodeType.LENGTH + "'", unitGroupWithUnitsSystemCodeType62.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UnitGroupWithUnitsSystemCodeType.LENGTH));
        org.junit.Assert.assertNotNull(postUnitGroupWithUnit63);
        org.junit.Assert.assertNotNull(postUnitGroupWithUnit64);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "multipart/form-data; boundary=****f2ce0d54-dac7-4cd0-b74f-1024089261f9****" + "'", str66, "multipart/form-data; boundary=****f2ce0d54-dac7-4cd0-b74f-1024089261f9****");
        org.junit.Assert.assertNull(auditAttributes68);
        org.junit.Assert.assertNotNull(putDetectioncondition70);
        org.junit.Assert.assertNotNull(samplingPlanPlannedActivity73);
        org.junit.Assert.assertNotNull(auditAttributes76);
        org.junit.Assert.assertNotNull(auditAttributes78);
        org.junit.Assert.assertNotNull(postUnitGroupWithUnit80);
        org.junit.Assert.assertNull(str81);
        org.junit.Assert.assertNotNull(obj84);
        org.junit.Assert.assertEquals(obj84.toString(), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$UnitGroupWithUnits");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj84), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$UnitGroupWithUnits");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj84), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$UnitGroupWithUnits");
    }

    @Test
    public void test42572() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest85.test42572");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetAnalyticalGroup getAnalyticalGroup0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetAnalyticalGroup();
        java.lang.String str1 = getAnalyticalGroup0.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetAnalyticalGroup getAnalyticalGroup3 = getAnalyticalGroup0.setId("9999-12-31T23:59:59.999Z");
        java.lang.String str4 = getAnalyticalGroup0.getId();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(getAnalyticalGroup3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "9999-12-31T23:59:59.999Z" + "'", str4, "9999-12-31T23:59:59.999Z");
    }

    @Test
    public void test42573() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest85.test42573");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.util.List<java.lang.String> strList1 = getObservationsV2_0.SamplingContextTagIds;
        java.time.Instant instant2 = getObservationsV2_0.getEndModificationTime();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetActivities getActivities3 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetActivities();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse4 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary5 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary7 = dischargeSummary5.setPublish((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse8 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant9 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse10 = locationDescriptionListServiceResponse8.setNextToken(instant9);
        dischargeSummary5.MeasurementTime = instant9;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse12 = locationDescriptionListServiceResponse4.setNextToken(instant9);
        java.time.Instant instant13 = locationDescriptionListServiceResponse4.getNextToken();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetActivities getActivities14 = getActivities3.setToStartTime(instant13);
        java.lang.String str15 = getActivities14.getSort();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_16 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.util.List<java.lang.String> strList17 = getObservationsV2_16.SamplingContextTagIds;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_18 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray20 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList21 = new java.util.ArrayList<java.lang.String>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList21, strArray20);
        getObservationsV2_18.SpecimenIds = strList21;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags24 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray28 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList29 = new java.util.ArrayList<java.lang.String>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList29, strArray28);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags31 = putLocationTags24.setTagUniqueIds(strList29);
        getObservationsV2_18.QualityControlTypes = strList29;
        getObservationsV2_16.ResultGrades = strList29;
        getActivities14.Media = strList29;
        getObservationsV2_0.AnalysisMethodSimpleIds = strList29;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_37 = getObservationsV2_0.setDetectionCondition("MinInstant");
        java.util.List<java.lang.String> strList38 = getObservationsV2_37.getLabReportIds();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_40 = getObservationsV2_37.setImportHistoryEventId("multipart/form-data; boundary=****f642a130-eb6d-4fb6-a1a4-7c7216ab119b****");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_42 = getObservationsV2_37.setActivityCustomId("multipart/form-data; boundary=****bbcf5f9e-6ccf-4b63-91ab-6e645caf02af****");
        java.lang.String str43 = getObservationsV2_37.Sort;
        java.util.List<java.lang.String> strList44 = getObservationsV2_37.SamplingLocationIds;
        org.junit.Assert.assertNull(strList1);
        org.junit.Assert.assertNull(instant2);
        org.junit.Assert.assertNotNull(dischargeSummary7);
        org.junit.Assert.assertNotNull(instant9);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse10);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse12);
        org.junit.Assert.assertNotNull(instant13);
        org.junit.Assert.assertNotNull(getActivities14);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNull(strList17);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(putLocationTags31);
        org.junit.Assert.assertNotNull(getObservationsV2_37);
        org.junit.Assert.assertNull(strList38);
        org.junit.Assert.assertNotNull(getObservationsV2_40);
        org.junit.Assert.assertNotNull(getObservationsV2_42);
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertNull(strList44);
    }

    @Test
    public void test42574() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest85.test42574");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ReportPlugin reportPlugin0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ReportPlugin();
        java.lang.Boolean boolean1 = reportPlugin0.IsEnabled;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ReportPlugin reportPlugin3 = reportPlugin0.setIsEnabled((java.lang.Boolean) true);
        java.lang.Boolean boolean4 = reportPlugin3.getIsEnabled();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ReportPlugin reportPlugin6 = reportPlugin3.setUniqueId("");
        java.lang.String str7 = reportPlugin6.getFolderName();
        org.junit.Assert.assertNull(boolean1);
        org.junit.Assert.assertNotNull(reportPlugin3);
        org.junit.Assert.assertEquals("'" + boolean4 + "' != '" + true + "'", boolean4, true);
        org.junit.Assert.assertNotNull(reportPlugin6);
        org.junit.Assert.assertNull(str7);
    }

    @Test
    public void test42575() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest85.test42575");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObject importItemObject0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObject();
        java.util.List<java.lang.String> strList1 = importItemObject0.getWarningMessages();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportChangeItem[] importChangeItemArray2 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportChangeItem[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportChangeItem> importChangeItemList3 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportChangeItem>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportChangeItem>) importChangeItemList3, importChangeItemArray2);
        importItemObject0.ItemComparison = importChangeItemList3;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags6 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray10 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList11 = new java.util.ArrayList<java.lang.String>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList11, strArray10);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags13 = putLocationTags6.setTagUniqueIds(strList11);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObject importItemObject14 = importItemObject0.setExistingItem((java.lang.Object) putLocationTags6);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.OpenIdConnectUser openIdConnectUser15 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.OpenIdConnectUser();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.OpenIdConnectUser openIdConnectUser17 = openIdConnectUser15.setIdentifier("");
        java.lang.Boolean boolean18 = openIdConnectUser17.CanConfigureSystem;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObject importItemObject19 = importItemObject0.setErrors((java.lang.Object) openIdConnectUser17);
        java.lang.Object obj20 = importItemObject0.ExistingItem;
        java.util.List<java.lang.String> strList21 = importItemObject0.getFields();
        java.util.List<java.lang.String> strList22 = importItemObject0.Fields;
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportChangeItem> importChangeItemList23 = importItemObject0.ItemComparison;
        java.lang.String str24 = importItemObject0.Input;
        java.lang.String str25 = importItemObject0.getRowId();
        org.junit.Assert.assertNull(strList1);
        org.junit.Assert.assertNotNull(importChangeItemArray2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(putLocationTags13);
        org.junit.Assert.assertNotNull(importItemObject14);
        org.junit.Assert.assertNotNull(openIdConnectUser17);
        org.junit.Assert.assertNull(boolean18);
        org.junit.Assert.assertNotNull(importItemObject19);
        org.junit.Assert.assertNotNull(obj20);
        org.junit.Assert.assertNull(strList21);
        org.junit.Assert.assertNull(strList22);
        org.junit.Assert.assertNotNull(importChangeItemList23);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNull(str25);
    }

    @Test
    public void test42576() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest85.test42576");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.EngineeredStructureDischargeActivity engineeredStructureDischargeActivity0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.EngineeredStructureDischargeActivity();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeChannelMeasurement dischargeChannelMeasurement1 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeChannelMeasurement();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ChannelMaterialType channelMaterialType2 = dischargeChannelMeasurement1.getChannelMaterial();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay3 = dischargeChannelMeasurement1.Discharge;
        java.time.Instant instant4 = dischargeChannelMeasurement1.EndTime;
        dischargeChannelMeasurement1.Channel = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSSSSSZZZZZ";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.EngineeredStructureDischargeActivity engineeredStructureDischargeActivity7 = engineeredStructureDischargeActivity0.setDischargeChannelMeasurement(dischargeChannelMeasurement1);
        java.lang.String str8 = engineeredStructureDischargeActivity7.EquationForSelectedStructure;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeChannelMeasurement dischargeChannelMeasurement9 = engineeredStructureDischargeActivity7.getDischargeChannelMeasurement();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay10 = null;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeChannelMeasurement dischargeChannelMeasurement11 = dischargeChannelMeasurement9.setDistanceToGage(quantityWithDisplay10);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MeterSuspensionType meterSuspensionType12 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MeterSuspensionType.Unknown;
        dischargeChannelMeasurement11.MeterSuspension = meterSuspensionType12;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ReferencePointBase referencePointBase14 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ReferencePointBase();
        java.lang.Double double15 = referencePointBase14.Longitude;
        java.lang.Double double16 = referencePointBase14.getLatitude();
        java.time.Instant instant17 = referencePointBase14.getPrimarySinceDate();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ReferencePointPeriod referencePointPeriod18 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ReferencePointPeriod();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ReferencePointPeriod referencePointPeriod20 = referencePointPeriod18.setStandardIdentifier("9999-12-31T23:59:59.999Z");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MeasurementDirection measurementDirection21 = referencePointPeriod20.MeasurementDirection;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ReferencePointPeriod referencePointPeriod23 = referencePointPeriod20.setIsMeasuredAgainstLocalAssumedDatum((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingModelDescriptionListServiceResponse ratingModelDescriptionListServiceResponse24 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingModelDescriptionListServiceResponse();
        java.util.List<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingModelDescription> ratingModelDescriptionList25 = ratingModelDescriptionListServiceResponse24.RatingModelDescriptions;
        java.time.Instant instant26 = ratingModelDescriptionListServiceResponse24.getNextToken();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CalibrationCheck calibrationCheck27 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CalibrationCheck();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CalibrationCheckType calibrationCheckType28 = calibrationCheck27.getCalibrationCheckType();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay29 = calibrationCheck27.Value;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse30 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary31 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary33 = dischargeSummary31.setPublish((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse34 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant35 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse36 = locationDescriptionListServiceResponse34.setNextToken(instant35);
        dischargeSummary31.MeasurementTime = instant35;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse38 = locationDescriptionListServiceResponse30.setNextToken(instant35);
        java.time.Instant instant39 = locationDescriptionListServiceResponse30.getNextToken();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CalibrationCheck calibrationCheck40 = calibrationCheck27.setTime(instant39);
        java.time.Instant instant41 = calibrationCheck40.Time;
        ratingModelDescriptionListServiceResponse24.NextToken = instant41;
        java.util.List<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingModelDescription> ratingModelDescriptionList43 = null;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingModelDescriptionListServiceResponse ratingModelDescriptionListServiceResponse44 = ratingModelDescriptionListServiceResponse24.setRatingModelDescriptions(ratingModelDescriptionList43);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescription locationDescription45 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescription();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescription locationDescription47 = locationDescription45.setIdentifier("");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ControlConditionActivity controlConditionActivity48 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ControlConditionActivity();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ControlCleanedType controlCleanedType49 = null;
        controlConditionActivity48.ControlCleaned = controlCleanedType49;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse51 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant52 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse53 = locationDescriptionListServiceResponse51.setNextToken(instant52);
        controlConditionActivity48.DateCleaned = instant52;
        locationDescription47.LastModified = instant52;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingModelDescriptionListServiceResponse ratingModelDescriptionListServiceResponse56 = ratingModelDescriptionListServiceResponse24.setNextToken(instant52);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ReferencePointPeriod referencePointPeriod57 = referencePointPeriod20.setAppliedTime(instant52);
        referencePointBase14.PrimarySinceDate = instant52;
        dischargeChannelMeasurement11.EndTime = instant52;
        org.junit.Assert.assertNull(channelMaterialType2);
        org.junit.Assert.assertNull(quantityWithDisplay3);
        org.junit.Assert.assertNull(instant4);
        org.junit.Assert.assertNotNull(engineeredStructureDischargeActivity7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(dischargeChannelMeasurement9);
        org.junit.Assert.assertNotNull(dischargeChannelMeasurement11);
        org.junit.Assert.assertTrue("'" + meterSuspensionType12 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MeterSuspensionType.Unknown + "'", meterSuspensionType12.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MeterSuspensionType.Unknown));
        org.junit.Assert.assertNull(double15);
        org.junit.Assert.assertNull(double16);
        org.junit.Assert.assertNull(instant17);
        org.junit.Assert.assertNotNull(referencePointPeriod20);
        org.junit.Assert.assertNull(measurementDirection21);
        org.junit.Assert.assertNotNull(referencePointPeriod23);
        org.junit.Assert.assertNull(ratingModelDescriptionList25);
        org.junit.Assert.assertNull(instant26);
        org.junit.Assert.assertNull(calibrationCheckType28);
        org.junit.Assert.assertNull(doubleWithDisplay29);
        org.junit.Assert.assertNotNull(dischargeSummary33);
        org.junit.Assert.assertNotNull(instant35);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse36);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse38);
        org.junit.Assert.assertNotNull(instant39);
        org.junit.Assert.assertNotNull(calibrationCheck40);
        org.junit.Assert.assertNotNull(instant41);
        org.junit.Assert.assertNotNull(ratingModelDescriptionListServiceResponse44);
        org.junit.Assert.assertNotNull(locationDescription47);
        org.junit.Assert.assertNotNull(instant52);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse53);
        org.junit.Assert.assertNotNull(ratingModelDescriptionListServiceResponse56);
        org.junit.Assert.assertNotNull(referencePointPeriod57);
    }

    @Test
    public void test42577() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest85.test42577");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.UnitMetadata unitMetadata0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.UnitMetadata();
        unitMetadata0.Identifier = "'.'SSSSSSS";
        java.lang.String str3 = unitMetadata0.getBaseOffset();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.UnitMetadata unitMetadata5 = unitMetadata0.setGroupIdentifier("9999-12-31T23:59:59.999Z");
        java.lang.String str6 = unitMetadata5.getBaseOffset();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.UnitMetadata unitMetadata8 = unitMetadata5.setSymbol("hi!:///AQUARIUS/Provisioning/v1");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.UnitMetadata unitMetadata10 = unitMetadata8.setIdentifier("9999-12-31T23:59:59.9999999Z://2021.4.62.0");
        unitMetadata10.GroupIdentifier = "/AQUARIUS/Acquisition/v2";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.UnitMetadata unitMetadata14 = unitMetadata10.setBaseOffset("zZZZZ");
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(unitMetadata5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNotNull(unitMetadata8);
        org.junit.Assert.assertNotNull(unitMetadata10);
        org.junit.Assert.assertNotNull(unitMetadata14);
    }

    @Test
    public void test42578() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest85.test42578");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Report report0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Report();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Report report2 = report0.setUserName("/AQUARIUS/Acquisition/v2");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Report report4 = report2.setUserName("'.'SSSSSSS");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Report report6 = report4.setDescription("yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Report report8 = report6.setDescription("multipart/form-data; boundary=****59879c02-0839-4b96-bc41-a13ebb706be4****");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Report report10 = report8.setDescription("9999-12-31T23:59:59.9999999Z://2021.4.62.0");
        report10.Comments = "9999-12-31T23:59:59.999Z";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Report report14 = report10.setComments("MinInstant");
        java.lang.String str15 = report10.Url;
        org.junit.Assert.assertNotNull(report2);
        org.junit.Assert.assertNotNull(report4);
        org.junit.Assert.assertNotNull(report6);
        org.junit.Assert.assertNotNull(report8);
        org.junit.Assert.assertNotNull(report10);
        org.junit.Assert.assertNotNull(report14);
        org.junit.Assert.assertNull(str15);
    }

    @Test
    public void test42579() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest85.test42579");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DownchainProcessorListByRatingModelServiceRequest downchainProcessorListByRatingModelServiceRequest0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DownchainProcessorListByRatingModelServiceRequest();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeTransactionListServiceRequest metadataChangeTransactionListServiceRequest1 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeTransactionListServiceRequest();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostRecurringReport postRecurringReport2 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostRecurringReport();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary3 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        dischargeSummary3.Reviewer = "";
        java.time.Instant instant6 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        dischargeSummary3.MeasurementTime = instant6;
        postRecurringReport2.NextGenerationDate = instant6;
        java.time.Instant instant9 = postRecurringReport2.getNextGenerationDate();
        java.lang.String str10 = com.aquaticinformatics.aquarius.sdk.samples.serializers.InstantSerializer.format(instant9);
        metadataChangeTransactionListServiceRequest1.QueryFrom = instant9;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DownchainProcessorListByRatingModelServiceRequest downchainProcessorListByRatingModelServiceRequest12 = downchainProcessorListByRatingModelServiceRequest0.setQueryTo(instant9);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_13 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray16 = new java.lang.String[] { "", "" };
        java.util.ArrayList<java.lang.String> strList17 = new java.util.ArrayList<java.lang.String>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList17, strArray16);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_19 = getObservationsV2_13.setDataClassifications((java.util.List<java.lang.String>) strList17);
        getObservationsV2_19.DepthUnitCustomId = "hi!";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse22 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant23 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse24 = locationDescriptionListServiceResponse22.setNextToken(instant23);
        getObservationsV2_19.EndObservedTime = instant23;
        downchainProcessorListByRatingModelServiceRequest0.QueryTo = instant23;
        downchainProcessorListByRatingModelServiceRequest0.RatingModelIdentifier = "http://MaxDurationhttp/json/reply/Integer";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitDescriptionListServiceResponse fieldVisitDescriptionListServiceResponse29 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitDescriptionListServiceResponse();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesThresholdPeriod timeSeriesThresholdPeriod30 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesThresholdPeriod();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesThresholdPeriod timeSeriesThresholdPeriod32 = timeSeriesThresholdPeriod30.setReferenceValue((java.lang.Double) 0.0d);
        java.time.Instant instant33 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MinValue;
        timeSeriesThresholdPeriod30.AppliedTime = instant33;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeTransactionListServiceRequest metadataChangeTransactionListServiceRequest35 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeTransactionListServiceRequest();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostRecurringReport postRecurringReport36 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostRecurringReport();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary37 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        dischargeSummary37.Reviewer = "";
        java.time.Instant instant40 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        dischargeSummary37.MeasurementTime = instant40;
        postRecurringReport36.NextGenerationDate = instant40;
        java.time.Instant instant43 = postRecurringReport36.getNextGenerationDate();
        java.lang.String str44 = com.aquaticinformatics.aquarius.sdk.samples.serializers.InstantSerializer.format(instant43);
        metadataChangeTransactionListServiceRequest35.QueryFrom = instant43;
        timeSeriesThresholdPeriod30.AppliedTime = instant43;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitDescriptionListServiceResponse fieldVisitDescriptionListServiceResponse47 = fieldVisitDescriptionListServiceResponse29.setNextToken(instant43);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingCurveListServiceRequest ratingCurveListServiceRequest48 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingCurveListServiceRequest();
        java.time.Instant instant49 = ratingCurveListServiceRequest48.QueryTo;
        java.lang.String str50 = ratingCurveListServiceRequest48.getRatingModelIdentifier();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse51 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary52 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary54 = dischargeSummary52.setPublish((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse55 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant56 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse57 = locationDescriptionListServiceResponse55.setNextToken(instant56);
        dischargeSummary52.MeasurementTime = instant56;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse59 = locationDescriptionListServiceResponse51.setNextToken(instant56);
        java.time.Instant instant60 = locationDescriptionListServiceResponse51.getNextToken();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest61 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ControlConditionActivity controlConditionActivity62 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ControlConditionActivity();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ControlCleanedType controlCleanedType63 = null;
        controlConditionActivity62.ControlCleaned = controlCleanedType63;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse65 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant66 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse67 = locationDescriptionListServiceResponse65.setNextToken(instant66);
        controlConditionActivity62.DateCleaned = instant66;
        timeAlignedDataServiceRequest61.QueryFrom = instant66;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse70 = locationDescriptionListServiceResponse51.setNextToken(instant66);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingCurveListServiceRequest ratingCurveListServiceRequest71 = ratingCurveListServiceRequest48.setQueryTo(instant66);
        java.time.Instant instant72 = ratingCurveListServiceRequest71.getQueryTo();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitDescriptionListServiceResponse fieldVisitDescriptionListServiceResponse73 = fieldVisitDescriptionListServiceResponse47.setNextToken(instant72);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DownchainProcessorListByRatingModelServiceRequest downchainProcessorListByRatingModelServiceRequest74 = downchainProcessorListByRatingModelServiceRequest0.setQueryFrom(instant72);
        java.lang.String str75 = downchainProcessorListByRatingModelServiceRequest74.getRatingModelIdentifier();
        java.lang.Object obj76 = downchainProcessorListByRatingModelServiceRequest74.getResponseType();
        org.junit.Assert.assertNotNull(instant6);
        org.junit.Assert.assertNotNull(instant9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "9999-12-31T23:59:59.999Z" + "'", str10, "9999-12-31T23:59:59.999Z");
        org.junit.Assert.assertNotNull(downchainProcessorListByRatingModelServiceRequest12);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(getObservationsV2_19);
        org.junit.Assert.assertNotNull(instant23);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse24);
        org.junit.Assert.assertNotNull(timeSeriesThresholdPeriod32);
        org.junit.Assert.assertNotNull(instant33);
        org.junit.Assert.assertNotNull(instant40);
        org.junit.Assert.assertNotNull(instant43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "9999-12-31T23:59:59.999Z" + "'", str44, "9999-12-31T23:59:59.999Z");
        org.junit.Assert.assertNotNull(fieldVisitDescriptionListServiceResponse47);
        org.junit.Assert.assertNull(instant49);
        org.junit.Assert.assertNull(str50);
        org.junit.Assert.assertNotNull(dischargeSummary54);
        org.junit.Assert.assertNotNull(instant56);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse57);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse59);
        org.junit.Assert.assertNotNull(instant60);
        org.junit.Assert.assertNotNull(instant66);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse67);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse70);
        org.junit.Assert.assertNotNull(ratingCurveListServiceRequest71);
        org.junit.Assert.assertNotNull(instant72);
        org.junit.Assert.assertNotNull(fieldVisitDescriptionListServiceResponse73);
        org.junit.Assert.assertNotNull(downchainProcessorListByRatingModelServiceRequest74);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "http://MaxDurationhttp/json/reply/Integer" + "'", str75, "http://MaxDurationhttp/json/reply/Integer");
        org.junit.Assert.assertNotNull(obj76);
        org.junit.Assert.assertEquals(obj76.toString(), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$ProcessorListServiceResponse");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj76), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$ProcessorListServiceResponse");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj76), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$ProcessorListServiceResponse");
    }

    @Test
    public void test42580() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest85.test42580");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Parameter parameter0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Parameter();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Parameter parameter2 = parameter0.setParameterId("hi!");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Parameter parameter4 = parameter2.setMinValue((java.lang.Double) 0.0d);
        java.lang.Double double5 = parameter2.getMaxValue();
        parameter2.Identifier = "";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Parameter parameter9 = parameter2.setUnitIdentifier("****231224c4-98ce-4e30-bd65-1d25287c4abe****");
        org.junit.Assert.assertNotNull(parameter2);
        org.junit.Assert.assertNotNull(parameter4);
        org.junit.Assert.assertNull(double5);
        org.junit.Assert.assertNotNull(parameter9);
    }

    @Test
    public void test42581() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest85.test42581");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DeleteShippingContainer deleteShippingContainer0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DeleteShippingContainer();
        deleteShippingContainer0.Id = "http";
        deleteShippingContainer0.Id = "multipart/form-data; boundary=****2d077bad-cd27-4736-8ba0-2a8d8a85733d****";
        deleteShippingContainer0.Id = "http://MaxDurationhttp/json/reply/String";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DeleteShippingContainer deleteShippingContainer8 = deleteShippingContainer0.setId("9999-12-31T23:59:59.9999999Z://2021.4.62.0");
        deleteShippingContainer0.Id = "multipart/form-data; boundary=****c82cca4e-7755-4a00-8acf-9ac791c56995****";
        org.junit.Assert.assertNotNull(deleteShippingContainer8);
    }

    @Test
    public void test42582() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest85.test42582");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.LocationDatumPeriod locationDatumPeriod0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.LocationDatumPeriod();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.LocationDatumPeriodBase locationDatumPeriodBase2 = locationDatumPeriod0.setComment("'.'SSSSSSS");
        java.lang.String str3 = locationDatumPeriod0.getAppliedByUser();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.LocationDatumPeriodBase locationDatumPeriodBase5 = locationDatumPeriod0.setComment("MaxInstant");
        locationDatumPeriod0.Method = "/AQUARIUS/Provisioning/v1";
        locationDatumPeriod0.Comment = "multipart/form-data; boundary=****44f0772e-c3ca-4316-8e2a-61ec8540d661****";
        java.lang.String str10 = locationDatumPeriod0.Method;
        org.junit.Assert.assertNotNull(locationDatumPeriodBase2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(locationDatumPeriodBase5);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "/AQUARIUS/Provisioning/v1" + "'", str10, "/AQUARIUS/Provisioning/v1");
    }

    @Test
    public void test42583() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest85.test42583");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.DeleteExtendedAttribute deleteExtendedAttribute0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.DeleteExtendedAttribute();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.DeleteExtendedAttribute deleteExtendedAttribute2 = deleteExtendedAttribute0.setUniqueId("/AQUARIUS");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.DeleteExtendedAttribute deleteExtendedAttribute4 = deleteExtendedAttribute0.setUniqueId("multipart/form-data; boundary=****59879c02-0839-4b96-bc41-a13ebb706be4****");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.DeleteExtendedAttribute deleteExtendedAttribute6 = deleteExtendedAttribute0.setUniqueId("/AQUARIUS/Provisioning/v1");
        java.lang.String str7 = deleteExtendedAttribute6.getUniqueId();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.DeleteExtendedAttribute deleteExtendedAttribute9 = deleteExtendedAttribute6.setUniqueId("multipart/form-data; boundary=****ee0ec537-fde4-45ee-9c35-68c37cf65c1c****");
        org.junit.Assert.assertNotNull(deleteExtendedAttribute2);
        org.junit.Assert.assertNotNull(deleteExtendedAttribute4);
        org.junit.Assert.assertNotNull(deleteExtendedAttribute6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "/AQUARIUS/Provisioning/v1" + "'", str7, "/AQUARIUS/Provisioning/v1");
        org.junit.Assert.assertNotNull(deleteExtendedAttribute9);
    }

    @Test
    public void test42584() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest85.test42584");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Role role0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Role();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Role role2 = role0.setCanRemoveAppendConfigurations((java.lang.Boolean) true);
        role0.CanAddData = true;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Role role6 = role0.setCanAddOrRemoveLocations((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Role role8 = role6.setCanEditData((java.lang.Boolean) true);
        java.lang.Boolean boolean9 = role6.CanEditLocationDetails;
        org.junit.Assert.assertNotNull(role2);
        org.junit.Assert.assertNotNull(role6);
        org.junit.Assert.assertNotNull(role8);
        org.junit.Assert.assertNull(boolean9);
    }

    @Test
    public void test42585() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest85.test42585");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDescription timeSeriesDescription0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDescription();
        timeSeriesDescription0.UtcOffset = 100.0d;
        timeSeriesDescription0.Parameter = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDescription timeSeriesDescription6 = timeSeriesDescription0.setLocationIdentifier("");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDescription timeSeriesDescription8 = timeSeriesDescription0.setUtcOffset((java.lang.Double) 100.0d);
        timeSeriesDescription0.LocationIdentifier = "http";
        java.time.Instant instant11 = timeSeriesDescription0.RawEndTime;
        org.junit.Assert.assertNotNull(timeSeriesDescription6);
        org.junit.Assert.assertNotNull(timeSeriesDescription8);
        org.junit.Assert.assertNull(instant11);
    }

    @Test
    public void test42586() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest85.test42586");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFieldVisit postFieldVisit0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFieldVisit();
        postFieldVisit0.Participants = "hi!:///AQUARIUS/Provisioning/v1";
        java.time.OffsetDateTime offsetDateTime3 = null;
        postFieldVisit0.EndTime = offsetDateTime3;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFieldVisit postFieldVisit6 = postFieldVisit0.setNotes("/AQUARIUS/Acquisition/v2://9999-12-31T23:59:59.999Z");
        org.junit.Assert.assertNotNull(postFieldVisit6);
    }

    @Test
    public void test42587() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest85.test42587");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetChartDataV2 getChartDataV2_0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetChartDataV2();
        java.lang.String str1 = getChartDataV2_0.getActivityCustomId();
        java.util.List<java.lang.String> strList2 = getChartDataV2_0.getCollectionMethodIds();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetChartDataV2 getChartDataV2_4 = getChartDataV2_0.setActivityCustomId("ZZZZZ");
        java.lang.String str5 = getChartDataV2_0.getDepthUnitId();
        java.util.List<java.lang.String> strList6 = getChartDataV2_0.getSamplingLocationIds();
        java.lang.String str7 = getChartDataV2_0.getDepthUnitCustomId();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(strList2);
        org.junit.Assert.assertNotNull(getChartDataV2_4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(strList6);
        org.junit.Assert.assertNull(str7);
    }

    @Test
    public void test42588() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest85.test42588");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LevelSurveyActivity levelSurveyActivity0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LevelSurveyActivity();
        levelSurveyActivity0.Party = "/AQUARIUS/Acquisition/v2://9999-12-31T23:59:59.999Z";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LevelSurveyActivity levelSurveyActivity3 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LevelSurveyActivity();
        java.lang.String str4 = levelSurveyActivity3.getParty();
        java.lang.String str5 = levelSurveyActivity3.OriginReferencePointUniqueId;
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LevelSurveyMeasurement> levelSurveyMeasurementList6 = levelSurveyActivity3.LevelMeasurements;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LevelSurveyActivity levelSurveyActivity8 = levelSurveyActivity3.setMethod("yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSSSSSZZZZZ");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LevelSurveyMeasurement[] levelSurveyMeasurementArray9 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LevelSurveyMeasurement[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LevelSurveyMeasurement> levelSurveyMeasurementList10 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LevelSurveyMeasurement>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LevelSurveyMeasurement>) levelSurveyMeasurementList10, levelSurveyMeasurementArray9);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LevelSurveyActivity levelSurveyActivity12 = levelSurveyActivity8.setLevelMeasurements(levelSurveyMeasurementList10);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LevelSurveyActivity levelSurveyActivity13 = levelSurveyActivity0.setLevelMeasurements(levelSurveyMeasurementList10);
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LevelSurveyMeasurement> levelSurveyMeasurementList14 = levelSurveyActivity0.getLevelMeasurements();
        java.lang.String str15 = levelSurveyActivity0.getMethod();
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(levelSurveyMeasurementList6);
        org.junit.Assert.assertNotNull(levelSurveyActivity8);
        org.junit.Assert.assertNotNull(levelSurveyMeasurementArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(levelSurveyActivity12);
        org.junit.Assert.assertNotNull(levelSurveyActivity13);
        org.junit.Assert.assertNotNull(levelSurveyMeasurementList14);
        org.junit.Assert.assertNull(str15);
    }

    @Test
    public void test42589() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest85.test42589");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeTransaction metadataChangeTransaction0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeTransaction();
        java.util.List<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.GapToleranceOperation> gapToleranceOperationList1 = metadataChangeTransaction0.GapToleranceOperations;
        java.util.List<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.NoteOperation> noteOperationList2 = metadataChangeTransaction0.getNoteOperations();
        java.util.List<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CorrectionOperation> correctionOperationList3 = metadataChangeTransaction0.getCorrectionOperations();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeTransaction metadataChangeTransaction5 = metadataChangeTransaction0.setAppliedByUser("multipart/form-data; boundary=****7eff1774-b6b0-471a-961c-156c64359366****");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeContentType metadataChangeContentType6 = metadataChangeTransaction5.getContentType();
        java.util.List<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.GapToleranceOperation> gapToleranceOperationList7 = null;
        metadataChangeTransaction5.GapToleranceOperations = gapToleranceOperationList7;
        org.junit.Assert.assertNull(gapToleranceOperationList1);
        org.junit.Assert.assertNull(noteOperationList2);
        org.junit.Assert.assertNull(correctionOperationList3);
        org.junit.Assert.assertNotNull(metadataChangeTransaction5);
        org.junit.Assert.assertNull(metadataChangeContentType6);
    }

    @Test
    public void test42590() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest85.test42590");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservedProperty postObservedProperty0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservedProperty();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UnitGroup unitGroup1 = postObservedProperty0.UnitGroup;
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple> importHistoryEventSimpleList2 = postObservedProperty0.ImportHistoryEventSimples;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisType analysisType3 = postObservedProperty0.AnalysisType;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UnitGroup unitGroup4 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservedProperty postObservedProperty5 = postObservedProperty0.setUnitGroup(unitGroup4);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultType resultType6 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultType.TAXON;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservedProperty postObservedProperty7 = postObservedProperty0.setResultType(resultType6);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Unit unit8 = postObservedProperty0.DefaultUnit;
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple> importHistoryEventSimpleList9 = postObservedProperty0.ImportHistoryEventSimples;
        java.lang.String str10 = postObservedProperty0.Id;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes11 = postObservedProperty0.getAuditAttributes();
        org.junit.Assert.assertNull(unitGroup1);
        org.junit.Assert.assertNull(importHistoryEventSimpleList2);
        org.junit.Assert.assertNull(analysisType3);
        org.junit.Assert.assertNotNull(postObservedProperty5);
        org.junit.Assert.assertTrue("'" + resultType6 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultType.TAXON + "'", resultType6.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultType.TAXON));
        org.junit.Assert.assertNotNull(postObservedProperty7);
        org.junit.Assert.assertNull(unit8);
        org.junit.Assert.assertNull(importHistoryEventSimpleList9);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNull(auditAttributes11);
    }

    @Test
    public void test42591() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest85.test42591");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SearchResultTimeZone searchResultTimeZone0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SearchResultTimeZone();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SearchResultTimeZone searchResultTimeZone2 = searchResultTimeZone0.setCursor("/AQUARIUS/Acquisition/v2://9999-12-31T23:59:59.999Z");
        java.lang.Integer int3 = searchResultTimeZone2.TotalCount;
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.TimeZone> timeZoneList4 = searchResultTimeZone2.getDomainObjects();
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.TimeZone> timeZoneList5 = searchResultTimeZone2.getDomainObjects();
        java.lang.Integer int6 = searchResultTimeZone2.TotalCount;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SearchResultTimeZone searchResultTimeZone7 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SearchResultTimeZone();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.TimeZone[] timeZoneArray8 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.TimeZone[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.TimeZone> timeZoneList9 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.TimeZone>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.TimeZone>) timeZoneList9, timeZoneArray8);
        searchResultTimeZone7.DomainObjects = timeZoneList9;
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.TimeZone> timeZoneList12 = searchResultTimeZone7.DomainObjects;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SearchResultTimeZone searchResultTimeZone13 = searchResultTimeZone2.setDomainObjects(timeZoneList12);
        java.lang.Integer int14 = searchResultTimeZone13.TotalCount;
        org.junit.Assert.assertNotNull(searchResultTimeZone2);
        org.junit.Assert.assertNull(int3);
        org.junit.Assert.assertNull(timeZoneList4);
        org.junit.Assert.assertNull(timeZoneList5);
        org.junit.Assert.assertNull(int6);
        org.junit.Assert.assertNotNull(timeZoneArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(timeZoneList12);
        org.junit.Assert.assertNotNull(searchResultTimeZone13);
        org.junit.Assert.assertNull(int14);
    }

    @Test
    public void test42592() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest85.test42592");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Processor processor0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Processor();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostTag postTag1 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostTag();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_2 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray5 = new java.lang.String[] { "", "" };
        java.util.ArrayList<java.lang.String> strList6 = new java.util.ArrayList<java.lang.String>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList6, strArray5);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_8 = getObservationsV2_2.setDataClassifications((java.util.List<java.lang.String>) strList6);
        postTag1.PickListValues = strList6;
        java.util.ArrayList<java.lang.String> strList10 = postTag1.PickListValues;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Processor processor11 = processor0.setInputTimeSeriesUniqueIds(strList10);
        java.lang.String str12 = processor11.OutputTimeSeriesUniqueId;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Processor processor14 = processor11.setProcessorType("https");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Processor processor16 = processor11.setProcessorType("https");
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(getObservationsV2_8);
        org.junit.Assert.assertNotNull(strList10);
        org.junit.Assert.assertNotNull(processor11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(processor14);
        org.junit.Assert.assertNotNull(processor16);
    }

    @Test
    public void test42593() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest85.test42593");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutAccessGroup putAccessGroup0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutAccessGroup();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation1 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedFieldResult plannedFieldResult2 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation3 = observation1.setPlannedFieldResult(plannedFieldResult2);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabInstruction labInstruction4 = null;
        observation3.LabInstruction = labInstruction4;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationStatistics observationStatistics6 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation7 = observation3.setStatistics(observationStatistics6);
        java.time.OffsetDateTime offsetDateTime8 = observation7.getResultTime();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultGrade resultGrade9 = observation7.ResultGrade;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes10 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes12 = auditAttributes10.setCreationUserProfileId("'.'SSSSSSS");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation13 = observation7.setAuditAttributes(auditAttributes10);
        putAccessGroup0.AuditAttributes = auditAttributes10;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes15 = putAccessGroup0.AuditAttributes;
        java.lang.String str16 = putAccessGroup0.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes17 = putAccessGroup0.AuditAttributes;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutAccessGroup putAccessGroup19 = putAccessGroup0.setId("https");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutUnitGroup putUnitGroup20 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutUnitGroup();
        java.lang.String str21 = putUnitGroup20.getCustomId();
        java.lang.Boolean boolean22 = putUnitGroup20.SupportsConversion;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutUnitGroupWithUnit putUnitGroupWithUnit23 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutUnitGroupWithUnit();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutUnitGroupWithUnit putUnitGroupWithUnit25 = putUnitGroupWithUnit23.setId("yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UnitGroupSystemCodeType unitGroupSystemCodeType26 = putUnitGroupWithUnit23.SystemCode;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutAccessGroup putAccessGroup27 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutAccessGroup();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivity samplingPlanPlannedActivity28 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivity();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes29 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivity samplingPlanPlannedActivity30 = samplingPlanPlannedActivity28.setAuditAttributes(auditAttributes29);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes31 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes33 = auditAttributes31.setCreationUserProfileId("'.'SSSSSSS");
        samplingPlanPlannedActivity30.AuditAttributes = auditAttributes31;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes35 = samplingPlanPlannedActivity30.AuditAttributes;
        putAccessGroup27.AuditAttributes = auditAttributes35;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutUnitGroupWithUnit putUnitGroupWithUnit37 = putUnitGroupWithUnit23.setAuditAttributes(auditAttributes35);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutUnitGroup putUnitGroup38 = putUnitGroup20.setAuditAttributes(auditAttributes35);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes40 = auditAttributes35.setModificationUserProfileId("");
        putAccessGroup19.AuditAttributes = auditAttributes35;
        org.junit.Assert.assertNotNull(observation3);
        org.junit.Assert.assertNotNull(observation7);
        org.junit.Assert.assertNull(offsetDateTime8);
        org.junit.Assert.assertNull(resultGrade9);
        org.junit.Assert.assertNotNull(auditAttributes12);
        org.junit.Assert.assertNotNull(observation13);
        org.junit.Assert.assertNotNull(auditAttributes15);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNotNull(auditAttributes17);
        org.junit.Assert.assertNotNull(putAccessGroup19);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNull(boolean22);
        org.junit.Assert.assertNotNull(putUnitGroupWithUnit25);
        org.junit.Assert.assertNull(unitGroupSystemCodeType26);
        org.junit.Assert.assertNotNull(samplingPlanPlannedActivity30);
        org.junit.Assert.assertNotNull(auditAttributes33);
        org.junit.Assert.assertNotNull(auditAttributes35);
        org.junit.Assert.assertNotNull(putUnitGroupWithUnit37);
        org.junit.Assert.assertNotNull(putUnitGroup38);
        org.junit.Assert.assertNotNull(auditAttributes40);
    }

    @Test
    public void test42594() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest85.test42594");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.FieldTrip fieldTrip0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.FieldTrip();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes1 = fieldTrip0.AuditAttributes;
        fieldTrip0.Participants = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSSSSSZZZZZ";
        java.time.OffsetDateTime offsetDateTime4 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.FieldTrip fieldTrip5 = fieldTrip0.setEndTime(offsetDateTime4);
        org.junit.Assert.assertNull(auditAttributes1);
        org.junit.Assert.assertNotNull(fieldTrip5);
    }

    @Test
    public void test42595() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest85.test42595");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ActivityWithDetails activityWithDetails0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ActivityWithDetails();
        activityWithDetails0.LoggerFileName = "'.'SSSSSSS";
        java.time.OffsetDateTime offsetDateTime3 = activityWithDetails0.getEndTime();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocation samplingLocation4 = activityWithDetails0.getSamplingLocation();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocation samplingLocation5 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocation();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricConfiguration metricConfiguration6 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricConfiguration();
        java.lang.String str7 = metricConfiguration6.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty observedProperty8 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty();
        observedProperty8.CasNumber = "MinDuration";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricConfiguration metricConfiguration11 = metricConfiguration6.setObservedProperty(observedProperty8);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultType resultType12 = observedProperty8.ResultType;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservedProperty postObservedProperty13 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservedProperty();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UnitGroup unitGroup14 = postObservedProperty13.UnitGroup;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity quantity15 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Unit unit16 = null;
        quantity15.Unit = unit16;
        postObservedProperty13.LowerLimit = quantity15;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity quantity19 = postObservedProperty13.LowerLimit;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Unit unit20 = quantity19.Unit;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty observedProperty21 = observedProperty8.setUpperLimit(quantity19);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocation samplingLocation22 = samplingLocation5.setElevation(quantity19);
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment> domainObjectAttachmentList23 = samplingLocation22.getAttachments();
        java.lang.String str24 = samplingLocation22.getHorizontalCollectionMethod();
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple> importHistoryEventSimpleList25 = samplingLocation22.ImportHistoryEventSimples;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity quantity26 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Unit unit27 = null;
        quantity26.Unit = unit27;
        samplingLocation22.Elevation = quantity26;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ActivityWithDetails activityWithDetails30 = activityWithDetails0.setSamplingLocation(samplingLocation22);
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag> samplingContextTagList31 = activityWithDetails0.SamplingContextTags;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.IndexConfiguration indexConfiguration32 = activityWithDetails0.IndexConfiguration;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSpecimen putSpecimen33 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSpecimen();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSpecimen putSpecimen35 = putSpecimen33.setNumberOfRequestedObservations((java.lang.Integer) 4);
        java.lang.String str36 = putSpecimen33.getDescription();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate37 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSpecimen putSpecimen38 = putSpecimen33.setTemplateCreatedFrom(specimenTemplate37);
        putSpecimen33.Filtered = false;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity postActivity41 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity();
        postActivity41.LoggerFileName = "hi!";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity postActivity45 = postActivity41.setCustomId("");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutActivity putActivity46 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutActivity();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity plannedActivity47 = null;
        putActivity46.PlannedActivity = plannedActivity47;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity postActivity49 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity();
        postActivity49.LoggerFileName = "hi!";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity plannedActivity52 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity postActivity53 = postActivity49.setPlannedActivity(plannedActivity52);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag samplingContextTag54 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag();
        java.lang.String str55 = samplingContextTag54.getDescription();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes56 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag samplingContextTag57 = samplingContextTag54.setAuditAttributes(auditAttributes56);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag samplingContextTag59 = samplingContextTag57.setId("yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag samplingContextTag60 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag();
        java.lang.String str61 = samplingContextTag60.getDescription();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag samplingContextTag62 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag();
        java.lang.String str63 = samplingContextTag62.getDescription();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes64 = null;
        samplingContextTag62.AuditAttributes = auditAttributes64;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag samplingContextTag66 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag();
        java.lang.String str67 = samplingContextTag66.getDescription();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes68 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag samplingContextTag69 = samplingContextTag66.setAuditAttributes(auditAttributes68);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag[] samplingContextTagArray70 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag[] { samplingContextTag59, samplingContextTag60, samplingContextTag62, samplingContextTag69 };
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag> samplingContextTagList71 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag>();
        boolean boolean72 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag>) samplingContextTagList71, samplingContextTagArray70);
        postActivity49.SamplingContextTags = samplingContextTagList71;
        putActivity46.SamplingContextTags = samplingContextTagList71;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity postActivity75 = postActivity45.setSamplingContextTags((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag>) samplingContextTagList71);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity postActivity76 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttribute[] extendedAttributeArray77 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttribute[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttribute> extendedAttributeList78 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttribute>();
        boolean boolean79 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttribute>) extendedAttributeList78, extendedAttributeArray77);
        postActivity76.ExtendedAttributes = extendedAttributeList78;
        postActivity75.ExtendedAttributes = extendedAttributeList78;
        putSpecimen33.ExtendedAttributes = extendedAttributeList78;
        activityWithDetails0.ExtendedAttributes = extendedAttributeList78;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocation samplingLocation84 = activityWithDetails0.SamplingLocation;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ActivityWithDetails activityWithDetails86 = activityWithDetails0.setId("multipart/form-data; boundary=****2d077bad-cd27-4736-8ba0-2a8d8a85733d****");
        activityWithDetails0.Id = "multipart/form-data; boundary=****46b5d5e5-73d1-43c8-8704-4a7bbf2d8314****";
        org.junit.Assert.assertNull(offsetDateTime3);
        org.junit.Assert.assertNull(samplingLocation4);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(metricConfiguration11);
        org.junit.Assert.assertNull(resultType12);
        org.junit.Assert.assertNull(unitGroup14);
        org.junit.Assert.assertNotNull(quantity19);
        org.junit.Assert.assertNull(unit20);
        org.junit.Assert.assertNotNull(observedProperty21);
        org.junit.Assert.assertNotNull(samplingLocation22);
        org.junit.Assert.assertNull(domainObjectAttachmentList23);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNull(importHistoryEventSimpleList25);
        org.junit.Assert.assertNotNull(activityWithDetails30);
        org.junit.Assert.assertNull(samplingContextTagList31);
        org.junit.Assert.assertNull(indexConfiguration32);
        org.junit.Assert.assertNotNull(putSpecimen35);
        org.junit.Assert.assertNull(str36);
        org.junit.Assert.assertNotNull(putSpecimen38);
        org.junit.Assert.assertNotNull(postActivity45);
        org.junit.Assert.assertNotNull(postActivity53);
        org.junit.Assert.assertNull(str55);
        org.junit.Assert.assertNotNull(samplingContextTag57);
        org.junit.Assert.assertNotNull(samplingContextTag59);
        org.junit.Assert.assertNull(str61);
        org.junit.Assert.assertNull(str63);
        org.junit.Assert.assertNull(str67);
        org.junit.Assert.assertNotNull(samplingContextTag69);
        org.junit.Assert.assertNotNull(samplingContextTagArray70);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertNotNull(postActivity75);
        org.junit.Assert.assertNotNull(extendedAttributeArray77);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(samplingLocation84);
        org.junit.Assert.assertNotNull(activityWithDetails86);
    }

    @Test
    public void test42596() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest85.test42596");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportSummarySpecimen importSummarySpecimen0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportSummarySpecimen();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportSummarySpecimen importSummarySpecimen2 = importSummarySpecimen0.setSummaryReportText("/AQUARIUS/Provisioning/v1");
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportError> importErrorList3 = importSummarySpecimen2.ImportJobErrors;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationImportSummary observationImportSummary4 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationImportSummary();
        observationImportSummary4.UpdateCount = (-1);
        java.lang.Integer int7 = observationImportSummary4.ExpectedCount;
        java.lang.String str8 = observationImportSummary4.SummaryReportText;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportError[] importErrorArray9 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportError[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportError> importErrorList10 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportError>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportError>) importErrorList10, importErrorArray9);
        observationImportSummary4.ImportJobErrors = importErrorList10;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportSummarySpecimen importSummarySpecimen13 = importSummarySpecimen2.setImportJobErrors((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportError>) importErrorList10);
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemSpecimen> importItemSpecimenList14 = importSummarySpecimen13.getErrorImportItems();
        importSummarySpecimen13.ExpectedCount = 2;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportSummarySpecimen importSummarySpecimen18 = importSummarySpecimen13.setExpectedCount((java.lang.Integer) 1);
        org.junit.Assert.assertNotNull(importSummarySpecimen2);
        org.junit.Assert.assertNull(importErrorList3);
        org.junit.Assert.assertNull(int7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(importErrorArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(importSummarySpecimen13);
        org.junit.Assert.assertNull(importItemSpecimenList14);
        org.junit.Assert.assertNotNull(importSummarySpecimen18);
    }

    @Test
    public void test42597() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest85.test42597");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DeleteUnitGroup deleteUnitGroup0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DeleteUnitGroup();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DeleteUnitGroup deleteUnitGroup2 = deleteUnitGroup0.setId("MaxDuration");
        java.lang.String str3 = deleteUnitGroup2.getId();
        java.lang.String str4 = deleteUnitGroup2.getId();
        org.junit.Assert.assertNotNull(deleteUnitGroup2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "MaxDuration" + "'", str3, "MaxDuration");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "MaxDuration" + "'", str4, "MaxDuration");
    }

    @Test
    public void test42598() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest85.test42598");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenWithObservations specimenWithObservations0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenWithObservations();
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttribute> extendedAttributeList1 = specimenWithObservations0.ExtendedAttributes;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenViewStatusType specimenViewStatusType2 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenViewStatusType.RECEIVED_SOME;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenWithObservations specimenWithObservations3 = specimenWithObservations0.setStatus(specimenViewStatusType2);
        specimenWithObservations0.Id = "/AQUARIUS";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Activity activity6 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Activity();
        java.time.OffsetDateTime offsetDateTime7 = activity6.getStartTime();
        java.time.OffsetDateTime offsetDateTime8 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Activity activity9 = activity6.setStartTime(offsetDateTime8);
        specimenWithObservations0.Activity = activity9;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity quantity11 = activity9.Depth;
        org.junit.Assert.assertNull(extendedAttributeList1);
        org.junit.Assert.assertTrue("'" + specimenViewStatusType2 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenViewStatusType.RECEIVED_SOME + "'", specimenViewStatusType2.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenViewStatusType.RECEIVED_SOME));
        org.junit.Assert.assertNotNull(specimenWithObservations3);
        org.junit.Assert.assertNull(offsetDateTime7);
        org.junit.Assert.assertNotNull(activity9);
        org.junit.Assert.assertNull(quantity11);
    }

    @Test
    public void test42599() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest85.test42599");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.TaxonImportSummary taxonImportSummary0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.TaxonImportSummary();
        taxonImportSummary0.NewCount = 0;
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemTaxon> importItemTaxonList3 = taxonImportSummary0.ErrorImportItems;
        java.lang.Integer int4 = taxonImportSummary0.SuccessCount;
        java.lang.Integer int5 = taxonImportSummary0.SkippedCount;
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemTaxon> importItemTaxonList6 = taxonImportSummary0.getImportItems();
        java.lang.Integer int7 = taxonImportSummary0.getExpectedCount();
        org.junit.Assert.assertNull(importItemTaxonList3);
        org.junit.Assert.assertNull(int4);
        org.junit.Assert.assertNull(int5);
        org.junit.Assert.assertNull(importItemTaxonList6);
        org.junit.Assert.assertNull(int7);
    }

    @Test
    public void test42600() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest85.test42600");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DeleteActivities deleteActivities0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DeleteActivities();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutOpenIdConnectRelyingPartyConfiguration putOpenIdConnectRelyingPartyConfiguration1 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutOpenIdConnectRelyingPartyConfiguration();
        java.util.List<java.lang.String> strList2 = putOpenIdConnectRelyingPartyConfiguration1.getScopes();
        java.lang.String str3 = putOpenIdConnectRelyingPartyConfiguration1.getOptionalIssuerDiscoveryUri();
        java.lang.String str4 = putOpenIdConnectRelyingPartyConfiguration1.getOptionalIssuerDiscoveryUri();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostTag postTag5 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostTag();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_6 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray9 = new java.lang.String[] { "", "" };
        java.util.ArrayList<java.lang.String> strList10 = new java.util.ArrayList<java.lang.String>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList10, strArray9);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_12 = getObservationsV2_6.setDataClassifications((java.util.List<java.lang.String>) strList10);
        postTag5.PickListValues = strList10;
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.TagApplicability> tagApplicabilityList14 = postTag5.Applicability;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.TagRequestBase tagRequestBase16 = postTag5.setKey("");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.TagValueType tagValueType17 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.TagValueType.PickList;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.TagRequestBase tagRequestBase18 = tagRequestBase16.setValueType(tagValueType17);
        java.lang.String str19 = tagRequestBase18.Key;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_20 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray22 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList23 = new java.util.ArrayList<java.lang.String>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList23, strArray22);
        getObservationsV2_20.SpecimenIds = strList23;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags26 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray30 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList31 = new java.util.ArrayList<java.lang.String>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList31, strArray30);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags33 = putLocationTags26.setTagUniqueIds(strList31);
        getObservationsV2_20.ActivityIds = strList31;
        tagRequestBase18.PickListValues = strList31;
        putOpenIdConnectRelyingPartyConfiguration1.HostedDomains = strList31;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DeleteActivities deleteActivities37 = deleteActivities0.setProjectIds((java.util.List<java.lang.String>) strList31);
        java.util.List<java.lang.String> strList38 = deleteActivities0.Media;
        java.lang.Integer int39 = deleteActivities0.Limit;
        java.lang.String str40 = deleteActivities0.CustomId;
        java.util.List<java.lang.String> strList41 = deleteActivities0.getMedia();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_42 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.util.List<java.lang.String> strList43 = getObservationsV2_42.SamplingContextTagIds;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_44 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray46 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList47 = new java.util.ArrayList<java.lang.String>();
        boolean boolean48 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList47, strArray46);
        getObservationsV2_44.SpecimenIds = strList47;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags50 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray54 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList55 = new java.util.ArrayList<java.lang.String>();
        boolean boolean56 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList55, strArray54);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags57 = putLocationTags50.setTagUniqueIds(strList55);
        getObservationsV2_44.QualityControlTypes = strList55;
        getObservationsV2_42.ResultGrades = strList55;
        java.lang.Double double60 = getObservationsV2_42.getMinNumericResultValue();
        getObservationsV2_42.DetectionCondition = "https";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObservation importItemObservation63 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObservation();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest64 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest();
        java.lang.Object obj65 = timeAlignedDataServiceRequest64.getResponseType();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse66 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant67 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse68 = locationDescriptionListServiceResponse66.setNextToken(instant67);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest69 = timeAlignedDataServiceRequest64.setQueryFrom(instant67);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags70 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray74 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList75 = new java.util.ArrayList<java.lang.String>();
        boolean boolean76 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList75, strArray74);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags77 = putLocationTags70.setTagUniqueIds(strList75);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest78 = timeAlignedDataServiceRequest64.setTimeSeriesOutputUnitIds(strList75);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObservation importItemObservation79 = importItemObservation63.setFields((java.util.List<java.lang.String>) strList75);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_80 = getObservationsV2_42.setSpecimenIds((java.util.List<java.lang.String>) strList75);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DeleteActivities deleteActivities81 = deleteActivities0.setIds((java.util.List<java.lang.String>) strList75);
        java.lang.Integer int82 = deleteActivities0.Limit;
        java.lang.Integer int83 = deleteActivities0.Limit;
        org.junit.Assert.assertNull(strList2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(getObservationsV2_12);
        org.junit.Assert.assertNull(tagApplicabilityList14);
        org.junit.Assert.assertNotNull(tagRequestBase16);
        org.junit.Assert.assertTrue("'" + tagValueType17 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.TagValueType.PickList + "'", tagValueType17.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.TagValueType.PickList));
        org.junit.Assert.assertNotNull(tagRequestBase18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(putLocationTags33);
        org.junit.Assert.assertNotNull(deleteActivities37);
        org.junit.Assert.assertNull(strList38);
        org.junit.Assert.assertNull(int39);
        org.junit.Assert.assertNull(str40);
        org.junit.Assert.assertNull(strList41);
        org.junit.Assert.assertNull(strList43);
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(strArray54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(putLocationTags57);
        org.junit.Assert.assertNull(double60);
        org.junit.Assert.assertNotNull(obj65);
        org.junit.Assert.assertEquals(obj65.toString(), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj65), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj65), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertNotNull(instant67);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse68);
        org.junit.Assert.assertNotNull(timeAlignedDataServiceRequest69);
        org.junit.Assert.assertNotNull(strArray74);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertNotNull(putLocationTags77);
        org.junit.Assert.assertNotNull(timeAlignedDataServiceRequest78);
        org.junit.Assert.assertNotNull(importItemObservation79);
        org.junit.Assert.assertNotNull(getObservationsV2_80);
        org.junit.Assert.assertNotNull(deleteActivities81);
        org.junit.Assert.assertNull(int82);
        org.junit.Assert.assertNull(int83);
    }

    @Test
    public void test42601() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest85.test42601");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportObservations getExportObservations0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportObservations();
        java.util.List<java.lang.String> strList1 = getExportObservations0.getLabReportIds();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportObservations getExportObservations3 = getExportObservations0.setNumericResultValue((java.lang.Double) (-1.0d));
        java.util.List<java.lang.String> strList4 = getExportObservations0.LabResultLabAnalysisMethodIds;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetFieldVisits getFieldVisits5 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetFieldVisits();
        java.util.List<java.lang.String> strList6 = getFieldVisits5.getSamplingLocationIds();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags7 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray11 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList12 = new java.util.ArrayList<java.lang.String>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList12, strArray11);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags14 = putLocationTags7.setTagUniqueIds(strList12);
        java.util.ArrayList<java.lang.String> strList15 = putLocationTags14.TagUniqueIds;
        getFieldVisits5.ScheduleIds = strList15;
        java.lang.Integer int17 = getFieldVisits5.Limit;
        java.util.List<java.lang.String> strList18 = getFieldVisits5.getFieldTripIds();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_19 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray21 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList22 = new java.util.ArrayList<java.lang.String>();
        boolean boolean23 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList22, strArray21);
        getObservationsV2_19.SpecimenIds = strList22;
        getFieldVisits5.Search = strList22;
        java.lang.String[] strArray37 = new java.lang.String[] { "", "multipart/form-data; boundary=****bbcf5f9e-6ccf-4b63-91ab-6e645caf02af****", "/AQUARIUS/Provisioning/v1", "", "MinDuration", "multipart/form-data; boundary=****bbcf5f9e-6ccf-4b63-91ab-6e645caf02af****", "2021.4.62.0", "multipart/form-data; boundary=****bbcf5f9e-6ccf-4b63-91ab-6e645caf02af****", "multipart/form-data; boundary=****bbcf5f9e-6ccf-4b63-91ab-6e645caf02af****", "/AQUARIUS/Acquisition/v2", "/AQUARIUS/Acquisition/v2://9999-12-31T23:59:59.999Z" };
        java.util.ArrayList<java.lang.String> strList38 = new java.util.ArrayList<java.lang.String>();
        boolean boolean39 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList38, strArray37);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetFieldVisits getFieldVisits40 = getFieldVisits5.setSamplingPlanIds((java.util.List<java.lang.String>) strList38);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportObservations getExportObservations41 = getExportObservations0.setMedia((java.util.List<java.lang.String>) strList38);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutBulkEditResultGradesV2 putBulkEditResultGradesV2_42 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutBulkEditResultGradesV2();
        java.lang.Double double43 = putBulkEditResultGradesV2_42.DepthValue;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_44 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray46 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList47 = new java.util.ArrayList<java.lang.String>();
        boolean boolean48 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList47, strArray46);
        getObservationsV2_44.SpecimenIds = strList47;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags50 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray54 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList55 = new java.util.ArrayList<java.lang.String>();
        boolean boolean56 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList55, strArray54);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags57 = putLocationTags50.setTagUniqueIds(strList55);
        getObservationsV2_44.QualityControlTypes = strList55;
        java.util.List<java.lang.String> strList59 = getObservationsV2_44.getAnalyticalGroupIds();
        java.util.List<java.lang.String> strList60 = getObservationsV2_44.DataClassifications;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.FieldResultType fieldResultType61 = getObservationsV2_44.FieldResultType;
        java.time.Instant instant62 = getObservationsV2_44.getEndObservedTime();
        java.lang.String str63 = getObservationsV2_44.DepthUnitCustomId;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags64 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray68 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList69 = new java.util.ArrayList<java.lang.String>();
        boolean boolean70 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList69, strArray68);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags71 = putLocationTags64.setTagUniqueIds(strList69);
        java.util.ArrayList<java.lang.String> strList72 = putLocationTags71.TagUniqueIds;
        getObservationsV2_44.ProjectIds = strList72;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutBulkEditResultGradesV2 putBulkEditResultGradesV2_74 = putBulkEditResultGradesV2_42.setSearch((java.util.List<java.lang.String>) strList72);
        java.util.List<java.lang.String> strList75 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutBulkEditResultGradesV2 putBulkEditResultGradesV2_76 = putBulkEditResultGradesV2_74.setLabResultLaboratoryIds(strList75);
        java.lang.String str77 = putBulkEditResultGradesV2_76.DepthUnitCustomId;
        java.time.Instant instant78 = putBulkEditResultGradesV2_76.getStartResultTime();
        java.util.List<java.lang.String> strList79 = putBulkEditResultGradesV2_76.getDataClassifications();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SampleFractionType sampleFractionType80 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SampleFractionType.DISSOLVED;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutBulkEditResultGradesV2 putBulkEditResultGradesV2_81 = putBulkEditResultGradesV2_76.setSampleFraction(sampleFractionType80);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportObservations getExportObservations82 = getExportObservations0.setSampleFraction(sampleFractionType80);
        java.util.List<java.lang.String> strList83 = getExportObservations0.getIds();
        java.lang.String str84 = getExportObservations0.ActivityCustomId;
        java.lang.Double double85 = getExportObservations0.MinNumericResultValue;
        java.lang.String str86 = getExportObservations0.getActivityCustomId();
        org.junit.Assert.assertNull(strList1);
        org.junit.Assert.assertNotNull(getExportObservations3);
        org.junit.Assert.assertNull(strList4);
        org.junit.Assert.assertNull(strList6);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(putLocationTags14);
        org.junit.Assert.assertNotNull(strList15);
        org.junit.Assert.assertNull(int17);
        org.junit.Assert.assertNull(strList18);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(getFieldVisits40);
        org.junit.Assert.assertNotNull(getExportObservations41);
        org.junit.Assert.assertNull(double43);
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(strArray54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(putLocationTags57);
        org.junit.Assert.assertNull(strList59);
        org.junit.Assert.assertNull(strList60);
        org.junit.Assert.assertNull(fieldResultType61);
        org.junit.Assert.assertNull(instant62);
        org.junit.Assert.assertNull(str63);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertNotNull(putLocationTags71);
        org.junit.Assert.assertNotNull(strList72);
        org.junit.Assert.assertNotNull(putBulkEditResultGradesV2_74);
        org.junit.Assert.assertNotNull(putBulkEditResultGradesV2_76);
        org.junit.Assert.assertNull(str77);
        org.junit.Assert.assertNull(instant78);
        org.junit.Assert.assertNull(strList79);
        org.junit.Assert.assertTrue("'" + sampleFractionType80 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SampleFractionType.DISSOLVED + "'", sampleFractionType80.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SampleFractionType.DISSOLVED));
        org.junit.Assert.assertNotNull(putBulkEditResultGradesV2_81);
        org.junit.Assert.assertNotNull(getExportObservations82);
        org.junit.Assert.assertNull(strList83);
        org.junit.Assert.assertNull(str84);
        org.junit.Assert.assertNull(double85);
        org.junit.Assert.assertNull(str86);
    }

    @Test
    public void test42602() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest85.test42602");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity postActivity0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity();
        postActivity0.LoggerFileName = "hi!";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity postActivity4 = postActivity0.setCustomId("");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutActivity putActivity5 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutActivity();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity plannedActivity6 = null;
        putActivity5.PlannedActivity = plannedActivity6;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity postActivity8 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity();
        postActivity8.LoggerFileName = "hi!";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity plannedActivity11 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity postActivity12 = postActivity8.setPlannedActivity(plannedActivity11);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag samplingContextTag13 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag();
        java.lang.String str14 = samplingContextTag13.getDescription();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes15 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag samplingContextTag16 = samplingContextTag13.setAuditAttributes(auditAttributes15);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag samplingContextTag18 = samplingContextTag16.setId("yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag samplingContextTag19 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag();
        java.lang.String str20 = samplingContextTag19.getDescription();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag samplingContextTag21 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag();
        java.lang.String str22 = samplingContextTag21.getDescription();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes23 = null;
        samplingContextTag21.AuditAttributes = auditAttributes23;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag samplingContextTag25 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag();
        java.lang.String str26 = samplingContextTag25.getDescription();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes27 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag samplingContextTag28 = samplingContextTag25.setAuditAttributes(auditAttributes27);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag[] samplingContextTagArray29 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag[] { samplingContextTag18, samplingContextTag19, samplingContextTag21, samplingContextTag28 };
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag> samplingContextTagList30 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag>();
        boolean boolean31 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag>) samplingContextTagList30, samplingContextTagArray29);
        postActivity8.SamplingContextTags = samplingContextTagList30;
        putActivity5.SamplingContextTags = samplingContextTagList30;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity postActivity34 = postActivity4.setSamplingContextTags((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag>) samplingContextTagList30);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutActivity putActivity35 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutActivity();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity plannedActivity36 = null;
        putActivity35.PlannedActivity = plannedActivity36;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity postActivity38 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity();
        postActivity38.LoggerFileName = "hi!";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity plannedActivity41 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity postActivity42 = postActivity38.setPlannedActivity(plannedActivity41);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag samplingContextTag43 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag();
        java.lang.String str44 = samplingContextTag43.getDescription();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes45 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag samplingContextTag46 = samplingContextTag43.setAuditAttributes(auditAttributes45);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag samplingContextTag48 = samplingContextTag46.setId("yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag samplingContextTag49 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag();
        java.lang.String str50 = samplingContextTag49.getDescription();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag samplingContextTag51 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag();
        java.lang.String str52 = samplingContextTag51.getDescription();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes53 = null;
        samplingContextTag51.AuditAttributes = auditAttributes53;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag samplingContextTag55 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag();
        java.lang.String str56 = samplingContextTag55.getDescription();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes57 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag samplingContextTag58 = samplingContextTag55.setAuditAttributes(auditAttributes57);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag[] samplingContextTagArray59 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag[] { samplingContextTag48, samplingContextTag49, samplingContextTag51, samplingContextTag58 };
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag> samplingContextTagList60 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag>();
        boolean boolean61 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag>) samplingContextTagList60, samplingContextTagArray59);
        postActivity38.SamplingContextTags = samplingContextTagList60;
        putActivity35.SamplingContextTags = samplingContextTagList60;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity postActivity64 = postActivity34.setSamplingContextTags((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag>) samplingContextTagList60);
        java.time.OffsetDateTime offsetDateTime65 = postActivity34.getStartTime();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity postActivity67 = postActivity34.setId("multipart/form-data; boundary=****5f5c0da4-c582-4ddf-ae9f-fc64a997490d****");
        org.junit.Assert.assertNotNull(postActivity4);
        org.junit.Assert.assertNotNull(postActivity12);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(samplingContextTag16);
        org.junit.Assert.assertNotNull(samplingContextTag18);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertNotNull(samplingContextTag28);
        org.junit.Assert.assertNotNull(samplingContextTagArray29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(postActivity34);
        org.junit.Assert.assertNotNull(postActivity42);
        org.junit.Assert.assertNull(str44);
        org.junit.Assert.assertNotNull(samplingContextTag46);
        org.junit.Assert.assertNotNull(samplingContextTag48);
        org.junit.Assert.assertNull(str50);
        org.junit.Assert.assertNull(str52);
        org.junit.Assert.assertNull(str56);
        org.junit.Assert.assertNotNull(samplingContextTag58);
        org.junit.Assert.assertNotNull(samplingContextTagArray59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(postActivity64);
        org.junit.Assert.assertNull(offsetDateTime65);
        org.junit.Assert.assertNotNull(postActivity67);
    }

    @Test
    public void test42603() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest85.test42603");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutUnit putUnit0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutUnit();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutUnit putUnit2 = putUnit0.setName("MinInstant");
        java.lang.Double double3 = putUnit0.getBaseMultiplier();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutUnit putUnit5 = putUnit0.setName("MaxDuration");
        putUnit5.Id = "multipart/form-data; boundary=****f2ce0d54-dac7-4cd0-b74f-1024089261f9****";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutUnit putUnit9 = putUnit5.setName("http://MaxDurationhttp/json/reply/ArrayList");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UnitGroup unitGroup10 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UnitGroup();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostSamplingLocationGroup postSamplingLocationGroup11 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostSamplingLocationGroup();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes12 = postSamplingLocationGroup11.getAuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LocationGroupType locationGroupType13 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LocationGroupType();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes14 = locationGroupType13.getAuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LocationGroupType locationGroupType16 = locationGroupType13.setCustomId("yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ");
        postSamplingLocationGroup11.LocationGroupType = locationGroupType16;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostSamplingLocationGroup postSamplingLocationGroup19 = postSamplingLocationGroup11.setName("");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutAccessGroup putAccessGroup20 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutAccessGroup();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivity samplingPlanPlannedActivity21 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivity();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes22 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivity samplingPlanPlannedActivity23 = samplingPlanPlannedActivity21.setAuditAttributes(auditAttributes22);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes24 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes26 = auditAttributes24.setCreationUserProfileId("'.'SSSSSSS");
        samplingPlanPlannedActivity23.AuditAttributes = auditAttributes24;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes28 = samplingPlanPlannedActivity23.AuditAttributes;
        putAccessGroup20.AuditAttributes = auditAttributes28;
        postSamplingLocationGroup11.AuditAttributes = auditAttributes28;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UnitGroup unitGroup31 = unitGroup10.setAuditAttributes(auditAttributes28);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UnitGroup unitGroup33 = unitGroup31.setId("MaxInstant");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes34 = unitGroup33.getAuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutUnit putUnit35 = putUnit5.setUnitGroup(unitGroup33);
        org.junit.Assert.assertNotNull(putUnit2);
        org.junit.Assert.assertNull(double3);
        org.junit.Assert.assertNotNull(putUnit5);
        org.junit.Assert.assertNotNull(putUnit9);
        org.junit.Assert.assertNull(auditAttributes12);
        org.junit.Assert.assertNull(auditAttributes14);
        org.junit.Assert.assertNotNull(locationGroupType16);
        org.junit.Assert.assertNotNull(postSamplingLocationGroup19);
        org.junit.Assert.assertNotNull(samplingPlanPlannedActivity23);
        org.junit.Assert.assertNotNull(auditAttributes26);
        org.junit.Assert.assertNotNull(auditAttributes28);
        org.junit.Assert.assertNotNull(unitGroup31);
        org.junit.Assert.assertNotNull(unitGroup33);
        org.junit.Assert.assertNotNull(auditAttributes34);
        org.junit.Assert.assertNotNull(putUnit35);
    }

    @Test
    public void test42604() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest85.test42604");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationExportIIV2 getObservationExportIIV2_0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationExportIIV2();
        java.util.List<java.lang.String> strList1 = getObservationExportIIV2_0.getCollectionMethodIds();
        java.lang.String str2 = getObservationExportIIV2_0.getDepthUnitCustomId();
        java.time.Instant instant3 = getObservationExportIIV2_0.EndObservedTime;
        getObservationExportIIV2_0.Limit = 100;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationExportIIV2 getObservationExportIIV2_7 = getObservationExportIIV2_0.setCustomId("multipart/form-data; boundary=****d9f5d551-383a-4365-87fd-ae7094da6f3b****");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeTransactionListServiceRequest metadataChangeTransactionListServiceRequest8 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeTransactionListServiceRequest();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostRecurringReport postRecurringReport9 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostRecurringReport();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary10 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        dischargeSummary10.Reviewer = "";
        java.time.Instant instant13 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        dischargeSummary10.MeasurementTime = instant13;
        postRecurringReport9.NextGenerationDate = instant13;
        java.time.Instant instant16 = postRecurringReport9.getNextGenerationDate();
        java.lang.String str17 = com.aquaticinformatics.aquarius.sdk.samples.serializers.InstantSerializer.format(instant16);
        metadataChangeTransactionListServiceRequest8.QueryFrom = instant16;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationExportIIV2 getObservationExportIIV2_19 = getObservationExportIIV2_0.setEndModificationTime(instant16);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DeleteFieldVisits deleteFieldVisits20 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DeleteFieldVisits();
        java.lang.String str21 = deleteFieldVisits20.Sort;
        deleteFieldVisits20.Sort = "9999-12-31T23:59:59.999Z";
        java.time.Instant instant24 = deleteFieldVisits20.EndStartTime;
        java.util.List<java.lang.String> strList25 = deleteFieldVisits20.getPlanningStatuses();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_26 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.util.List<java.lang.String> strList27 = getObservationsV2_26.SamplingContextTagIds;
        java.time.Instant instant28 = getObservationsV2_26.getEndModificationTime();
        java.util.List<java.lang.String> strList29 = getObservationsV2_26.Media;
        java.util.List<java.lang.String> strList30 = getObservationsV2_26.ActivityTypes;
        java.util.List<java.lang.String> strList31 = getObservationsV2_26.getLabResultLaboratoryIds();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_32 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray34 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList35 = new java.util.ArrayList<java.lang.String>();
        boolean boolean36 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList35, strArray34);
        getObservationsV2_32.SpecimenIds = strList35;
        getObservationsV2_26.LabResultLabAnalysisMethodIds = strList35;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DeleteFieldVisits deleteFieldVisits39 = deleteFieldVisits20.setFieldTripIds((java.util.List<java.lang.String>) strList35);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationExportIIV2 getObservationExportIIV2_40 = getObservationExportIIV2_0.setMedia((java.util.List<java.lang.String>) strList35);
        java.time.Instant instant41 = getObservationExportIIV2_40.StartResultTime;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationType putLocationType42 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationType();
        java.lang.Object obj43 = putLocationType42.getResponseType();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationType putLocationType45 = putLocationType42.setUniqueId("'.'SSSSSSS");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationType putLocationType47 = putLocationType42.setUniqueId("hi!");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportSpecimens getExportSpecimens48 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportSpecimens();
        java.util.List<java.lang.String> strList49 = getExportSpecimens48.getProjectIds();
        java.util.List<java.lang.String> strList50 = getExportSpecimens48.FieldVisitId;
        java.util.List<java.lang.String> strList51 = getExportSpecimens48.ActivityTypes;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetSpecimens getSpecimens52 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetSpecimens();
        java.util.List<java.lang.String> strList53 = getSpecimens52.getActivityIds();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetSpecimens getSpecimens55 = getSpecimens52.setSort("MinDuration");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetChartDataV2 getChartDataV2_56 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetChartDataV2();
        java.lang.String str57 = getChartDataV2_56.getActivityCustomId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetChartDataV2 getChartDataV2_59 = getChartDataV2_56.setFilterId("");
        java.util.List<java.lang.String> strList60 = getChartDataV2_56.ResultGrades;
        getChartDataV2_56.MinNumericResultValue = 100.0d;
        java.lang.Double double63 = getChartDataV2_56.MaxNumericResultValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostTag postTag64 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostTag();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_65 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray68 = new java.lang.String[] { "", "" };
        java.util.ArrayList<java.lang.String> strList69 = new java.util.ArrayList<java.lang.String>();
        boolean boolean70 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList69, strArray68);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_71 = getObservationsV2_65.setDataClassifications((java.util.List<java.lang.String>) strList69);
        postTag64.PickListValues = strList69;
        getChartDataV2_56.SamplingContextTagIds = strList69;
        getSpecimens52.ActivityTypes = strList69;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportSpecimens getExportSpecimens75 = getExportSpecimens48.setActivityIds((java.util.List<java.lang.String>) strList69);
        putLocationType47.ExtendedAttributeDefinitionIds = strList69;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationExportIIV2 getObservationExportIIV2_77 = getObservationExportIIV2_40.setLabResultLaboratoryIds((java.util.List<java.lang.String>) strList69);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationExportIIV2 getObservationExportIIV2_79 = getObservationExportIIV2_77.setCursor("****ee0ec537-fde4-45ee-9c35-68c37cf65c1c****");
        java.util.List<java.lang.String> strList80 = getObservationExportIIV2_77.getSamplingContextTagIds();
        org.junit.Assert.assertNull(strList1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(instant3);
        org.junit.Assert.assertNotNull(getObservationExportIIV2_7);
        org.junit.Assert.assertNotNull(instant13);
        org.junit.Assert.assertNotNull(instant16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "9999-12-31T23:59:59.999Z" + "'", str17, "9999-12-31T23:59:59.999Z");
        org.junit.Assert.assertNotNull(getObservationExportIIV2_19);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNull(instant24);
        org.junit.Assert.assertNull(strList25);
        org.junit.Assert.assertNull(strList27);
        org.junit.Assert.assertNull(instant28);
        org.junit.Assert.assertNull(strList29);
        org.junit.Assert.assertNull(strList30);
        org.junit.Assert.assertNull(strList31);
        org.junit.Assert.assertNotNull(strArray34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(deleteFieldVisits39);
        org.junit.Assert.assertNotNull(getObservationExportIIV2_40);
        org.junit.Assert.assertNull(instant41);
        org.junit.Assert.assertNotNull(obj43);
        org.junit.Assert.assertEquals(obj43.toString(), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning$LocationType");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj43), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning$LocationType");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj43), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning$LocationType");
        org.junit.Assert.assertNotNull(putLocationType45);
        org.junit.Assert.assertNotNull(putLocationType47);
        org.junit.Assert.assertNull(strList49);
        org.junit.Assert.assertNull(strList50);
        org.junit.Assert.assertNull(strList51);
        org.junit.Assert.assertNull(strList53);
        org.junit.Assert.assertNotNull(getSpecimens55);
        org.junit.Assert.assertNull(str57);
        org.junit.Assert.assertNotNull(getChartDataV2_59);
        org.junit.Assert.assertNull(strList60);
        org.junit.Assert.assertNull(double63);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertNotNull(getObservationsV2_71);
        org.junit.Assert.assertNotNull(getExportSpecimens75);
        org.junit.Assert.assertNotNull(getObservationExportIIV2_77);
        org.junit.Assert.assertNotNull(getObservationExportIIV2_79);
        org.junit.Assert.assertNull(strList80);
    }

    @Test
    public void test42605() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest85.test42605");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.DeleteStandardDatum deleteStandardDatum0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.DeleteStandardDatum();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.DeleteStandardDatum deleteStandardDatum2 = deleteStandardDatum0.setIdentifier("MaxDuration");
        deleteStandardDatum0.Identifier = "multipart/form-data; boundary=****3dee2050-7d6c-400f-bd51-383a1324f5dd****";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.DeleteStandardDatum deleteStandardDatum6 = deleteStandardDatum0.setIdentifier("multipart/form-data; boundary=****7eff1774-b6b0-471a-961c-156c64359366****");
        java.lang.String str7 = deleteStandardDatum0.Identifier;
        org.junit.Assert.assertNotNull(deleteStandardDatum2);
        org.junit.Assert.assertNotNull(deleteStandardDatum6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "multipart/form-data; boundary=****7eff1774-b6b0-471a-961c-156c64359366****" + "'", str7, "multipart/form-data; boundary=****7eff1774-b6b0-471a-961c-156c64359366****");
    }

    @Test
    public void test42606() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest85.test42606");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.OpenIdConnectUser openIdConnectUser0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.OpenIdConnectUser();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.OpenIdConnectUser openIdConnectUser2 = openIdConnectUser0.setIdentifier("");
        java.lang.String str3 = openIdConnectUser2.FirstName;
        java.lang.String str4 = openIdConnectUser2.getFirstName();
        java.lang.Boolean boolean5 = openIdConnectUser2.Active;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.User user7 = openIdConnectUser2.setSystem((java.lang.Boolean) false);
        openIdConnectUser2.CanLaunchRatingDevelopmentToolbox = false;
        openIdConnectUser2.Active = true;
        java.lang.String str12 = openIdConnectUser2.getLastName();
        org.junit.Assert.assertNotNull(openIdConnectUser2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(boolean5);
        org.junit.Assert.assertNotNull(user7);
        org.junit.Assert.assertNull(str12);
    }

    @Test
    public void test42607() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest85.test42607");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SearchResultUnitGroupWithUnits searchResultUnitGroupWithUnits0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SearchResultUnitGroupWithUnits();
        searchResultUnitGroupWithUnits0.TotalCount = 2;
        searchResultUnitGroupWithUnits0.TotalCount = 100;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SearchResultUnitGroupWithUnits searchResultUnitGroupWithUnits5 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SearchResultUnitGroupWithUnits();
        searchResultUnitGroupWithUnits5.Cursor = "multipart/form-data; boundary=****2917d69a-62fa-41ce-b981-4dbe2deab9f5****";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SearchResultUnitGroupWithUnits searchResultUnitGroupWithUnits8 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SearchResultUnitGroupWithUnits();
        searchResultUnitGroupWithUnits8.TotalCount = 2;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SearchResultUnitGroupWithUnits searchResultUnitGroupWithUnits11 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SearchResultUnitGroupWithUnits();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UnitGroupWithUnits[] unitGroupWithUnitsArray12 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UnitGroupWithUnits[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UnitGroupWithUnits> unitGroupWithUnitsList13 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UnitGroupWithUnits>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UnitGroupWithUnits>) unitGroupWithUnitsList13, unitGroupWithUnitsArray12);
        searchResultUnitGroupWithUnits11.DomainObjects = unitGroupWithUnitsList13;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SearchResultUnitGroupWithUnits searchResultUnitGroupWithUnits16 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SearchResultUnitGroupWithUnits();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UnitGroupWithUnits[] unitGroupWithUnitsArray17 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UnitGroupWithUnits[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UnitGroupWithUnits> unitGroupWithUnitsList18 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UnitGroupWithUnits>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UnitGroupWithUnits>) unitGroupWithUnitsList18, unitGroupWithUnitsArray17);
        searchResultUnitGroupWithUnits16.DomainObjects = unitGroupWithUnitsList18;
        searchResultUnitGroupWithUnits11.DomainObjects = unitGroupWithUnitsList18;
        searchResultUnitGroupWithUnits8.DomainObjects = unitGroupWithUnitsList18;
        searchResultUnitGroupWithUnits8.TotalCount = (-1);
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UnitGroupWithUnits> unitGroupWithUnitsList25 = searchResultUnitGroupWithUnits8.getDomainObjects();
        searchResultUnitGroupWithUnits5.DomainObjects = unitGroupWithUnitsList25;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SearchResultUnitGroupWithUnits searchResultUnitGroupWithUnits27 = searchResultUnitGroupWithUnits0.setDomainObjects(unitGroupWithUnitsList25);
        java.lang.String str28 = searchResultUnitGroupWithUnits0.Cursor;
        org.junit.Assert.assertNotNull(unitGroupWithUnitsArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(unitGroupWithUnitsArray17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(unitGroupWithUnitsList25);
        org.junit.Assert.assertNotNull(searchResultUnitGroupWithUnits27);
        org.junit.Assert.assertNull(str28);
    }

    @Test
    public void test42608() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest85.test42608");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostTag postTag0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostTag();
        java.lang.String str1 = postTag0.Description;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostTag postTag3 = postTag0.setName("MaxInstant");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostTag postTag5 = postTag3.setDescription("POST");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostDetectioncondition postDetectioncondition6 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostDetectioncondition();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes7 = postDetectioncondition6.getAuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostDetectioncondition postDetectioncondition9 = postDetectioncondition6.setId("9999-12-31T23:59:59.999Z");
        postDetectioncondition6.Description = "9999-12-31T23:59:59.999Z";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostDetectioncondition postDetectioncondition13 = postDetectioncondition6.setId("/AQUARIUS/Provisioning/v1");
        postDetectioncondition6.CustomId = "/AQUARIUS/Acquisition/v2";
        java.lang.Object obj16 = postDetectioncondition6.getResponseType();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivity samplingPlanPlannedActivity17 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivity();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes18 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivity samplingPlanPlannedActivity19 = samplingPlanPlannedActivity17.setAuditAttributes(auditAttributes18);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes20 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes22 = auditAttributes20.setCreationUserProfileId("'.'SSSSSSS");
        samplingPlanPlannedActivity19.AuditAttributes = auditAttributes20;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostDetectioncondition postDetectioncondition24 = postDetectioncondition6.setAuditAttributes(auditAttributes20);
        java.lang.String str25 = postDetectioncondition6.getName();
        java.lang.String str26 = postDetectioncondition6.CustomId;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostSpreadsheetTemplate postSpreadsheetTemplate27 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostSpreadsheetTemplate();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostSpreadsheetTemplate postSpreadsheetTemplate29 = postSpreadsheetTemplate27.setCustomId("MinDuration");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSchedule putSchedule30 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSchedule();
        java.time.OffsetDateTime offsetDateTime31 = putSchedule30.StartDate;
        java.time.OffsetDateTime offsetDateTime32 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSchedule putSchedule33 = putSchedule30.setEndDate(offsetDateTime32);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes34 = putSchedule33.AuditAttributes;
        java.time.OffsetDateTime offsetDateTime35 = putSchedule33.getEndDate();
        java.time.OffsetDateTime offsetDateTime36 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSchedule putSchedule37 = putSchedule33.setStartDate(offsetDateTime36);
        java.lang.Integer int38 = putSchedule33.SamplingLocationGroupSelectionTypeRandomCount;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.RecurrenceDayMonthlyType recurrenceDayMonthlyType39 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.RecurrenceDayMonthlyType.LAST_DAY_OF_MONTH;
        putSchedule33.RecurrenceDayMonthly = recurrenceDayMonthlyType39;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Unit unit41 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Unit();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes42 = unit41.AuditAttributes;
        unit41.BaseMultiplier = 0.0d;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutAccessGroup putAccessGroup45 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutAccessGroup();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivity samplingPlanPlannedActivity46 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivity();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes47 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivity samplingPlanPlannedActivity48 = samplingPlanPlannedActivity46.setAuditAttributes(auditAttributes47);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes49 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes51 = auditAttributes49.setCreationUserProfileId("'.'SSSSSSS");
        samplingPlanPlannedActivity48.AuditAttributes = auditAttributes49;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes53 = samplingPlanPlannedActivity48.AuditAttributes;
        putAccessGroup45.AuditAttributes = auditAttributes53;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Unit unit55 = unit41.setAuditAttributes(auditAttributes53);
        putSchedule33.AuditAttributes = auditAttributes53;
        postSpreadsheetTemplate29.AuditAttributes = auditAttributes53;
        postDetectioncondition6.AuditAttributes = auditAttributes53;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostTag postTag59 = postTag3.setAuditAttributes(auditAttributes53);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes60 = postTag59.AuditAttributes;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostTag postTag62 = postTag59.setName("multipart/form-data; boundary=****44f0772e-c3ca-4316-8e2a-61ec8540d661****");
        java.lang.String str63 = postTag59.getDescription();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(postTag3);
        org.junit.Assert.assertNotNull(postTag5);
        org.junit.Assert.assertNull(auditAttributes7);
        org.junit.Assert.assertNotNull(postDetectioncondition9);
        org.junit.Assert.assertNotNull(postDetectioncondition13);
        org.junit.Assert.assertNotNull(obj16);
        org.junit.Assert.assertEquals(obj16.toString(), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$ResultDetectionCondition");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj16), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$ResultDetectionCondition");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj16), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$ResultDetectionCondition");
        org.junit.Assert.assertNotNull(samplingPlanPlannedActivity19);
        org.junit.Assert.assertNotNull(auditAttributes22);
        org.junit.Assert.assertNotNull(postDetectioncondition24);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "/AQUARIUS/Acquisition/v2" + "'", str26, "/AQUARIUS/Acquisition/v2");
        org.junit.Assert.assertNotNull(postSpreadsheetTemplate29);
        org.junit.Assert.assertNull(offsetDateTime31);
        org.junit.Assert.assertNotNull(putSchedule33);
        org.junit.Assert.assertNull(auditAttributes34);
        org.junit.Assert.assertNull(offsetDateTime35);
        org.junit.Assert.assertNotNull(putSchedule37);
        org.junit.Assert.assertNull(int38);
        org.junit.Assert.assertTrue("'" + recurrenceDayMonthlyType39 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.RecurrenceDayMonthlyType.LAST_DAY_OF_MONTH + "'", recurrenceDayMonthlyType39.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.RecurrenceDayMonthlyType.LAST_DAY_OF_MONTH));
        org.junit.Assert.assertNull(auditAttributes42);
        org.junit.Assert.assertNotNull(samplingPlanPlannedActivity48);
        org.junit.Assert.assertNotNull(auditAttributes51);
        org.junit.Assert.assertNotNull(auditAttributes53);
        org.junit.Assert.assertNotNull(unit55);
        org.junit.Assert.assertNotNull(postTag59);
        org.junit.Assert.assertNotNull(auditAttributes60);
        org.junit.Assert.assertNotNull(postTag62);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "POST" + "'", str63, "POST");
    }

    @Test
    public void test42609() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest85.test42609");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.OpenIdConnectUser openIdConnectUser0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.OpenIdConnectUser();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.OpenIdConnectUser openIdConnectUser2 = openIdConnectUser0.setSubjectIdentifier("");
        java.lang.String str3 = openIdConnectUser2.getLastName();
        openIdConnectUser2.SubjectIdentifier = "/AQUARIUS/Acquisition/v2";
        openIdConnectUser2.SubjectIdentifier = "https";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.User user9 = openIdConnectUser2.setUniqueId("'.'SSSSSSS");
        java.lang.Boolean boolean10 = openIdConnectUser2.isCanLaunchRatingDevelopmentToolbox();
        java.lang.String str11 = openIdConnectUser2.getSubjectIdentifier();
        org.junit.Assert.assertNotNull(openIdConnectUser2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(user9);
        org.junit.Assert.assertNull(boolean10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "https" + "'", str11, "https");
    }

    @Test
    public void test42610() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest85.test42610");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationTagListServiceResponse locationTagListServiceResponse0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationTagListServiceResponse();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.NameTagDefinition[] nameTagDefinitionArray1 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.NameTagDefinition[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.NameTagDefinition> nameTagDefinitionList2 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.NameTagDefinition>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.NameTagDefinition>) nameTagDefinitionList2, nameTagDefinitionArray1);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationTagListServiceResponse locationTagListServiceResponse4 = locationTagListServiceResponse0.setTags(nameTagDefinitionList2);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.NameTagDefinition[] nameTagDefinitionArray5 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.NameTagDefinition[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.NameTagDefinition> nameTagDefinitionList6 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.NameTagDefinition>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.NameTagDefinition>) nameTagDefinitionList6, nameTagDefinitionArray5);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationTagListServiceResponse locationTagListServiceResponse8 = locationTagListServiceResponse4.setTags(nameTagDefinitionList6);
        java.lang.Integer int9 = locationTagListServiceResponse8.getResponseVersion();
        java.lang.Integer int10 = locationTagListServiceResponse8.ResponseVersion;
        java.time.Instant instant11 = locationTagListServiceResponse8.ResponseTime;
        org.junit.Assert.assertNotNull(nameTagDefinitionArray1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(locationTagListServiceResponse4);
        org.junit.Assert.assertNotNull(nameTagDefinitionArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(locationTagListServiceResponse8);
        org.junit.Assert.assertNull(int9);
        org.junit.Assert.assertNull(int10);
        org.junit.Assert.assertNull(instant11);
    }

    @Test
    public void test42611() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest85.test42611");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DeleteObservedProperty deleteObservedProperty0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DeleteObservedProperty();
        java.lang.String str1 = deleteObservedProperty0.Id;
        java.lang.String str2 = deleteObservedProperty0.Id;
        java.lang.String str3 = deleteObservedProperty0.getId();
        java.lang.String str4 = deleteObservedProperty0.Id;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DeleteObservedProperty deleteObservedProperty6 = deleteObservedProperty0.setId("multipart/form-data; boundary=****221f1588-b890-43c2-a3c8-0d77cfe54330****");
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNotNull(deleteObservedProperty6);
    }

    @Test
    public void test42612() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest85.test42612");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ConfigurableDropDownListItem configurableDropDownListItem0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ConfigurableDropDownListItem();
        java.lang.String str1 = configurableDropDownListItem0.getDropDownListId();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ConfigurableDropDownListItem configurableDropDownListItem3 = configurableDropDownListItem0.setDisplayOrder((java.lang.Integer) (-1));
        java.lang.String str4 = configurableDropDownListItem3.getId();
        java.lang.String str5 = configurableDropDownListItem3.getDisplayName();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ConfigurableDropDownListItem configurableDropDownListItem7 = configurableDropDownListItem3.setDisplayOrder((java.lang.Integer) 5);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(configurableDropDownListItem3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(configurableDropDownListItem7);
    }

    @Test
    public void test42613() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest85.test42613");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QualifierOperation qualifierOperation0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QualifierOperation();
        java.lang.String str1 = qualifierOperation0.User;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DownchainProcessorListByRatingModelServiceRequest downchainProcessorListByRatingModelServiceRequest2 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DownchainProcessorListByRatingModelServiceRequest();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeTransactionListServiceRequest metadataChangeTransactionListServiceRequest3 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeTransactionListServiceRequest();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostRecurringReport postRecurringReport4 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostRecurringReport();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary5 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        dischargeSummary5.Reviewer = "";
        java.time.Instant instant8 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        dischargeSummary5.MeasurementTime = instant8;
        postRecurringReport4.NextGenerationDate = instant8;
        java.time.Instant instant11 = postRecurringReport4.getNextGenerationDate();
        java.lang.String str12 = com.aquaticinformatics.aquarius.sdk.samples.serializers.InstantSerializer.format(instant11);
        metadataChangeTransactionListServiceRequest3.QueryFrom = instant11;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DownchainProcessorListByRatingModelServiceRequest downchainProcessorListByRatingModelServiceRequest14 = downchainProcessorListByRatingModelServiceRequest2.setQueryTo(instant11);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DownchainProcessorListByRatingModelServiceRequest downchainProcessorListByRatingModelServiceRequest16 = downchainProcessorListByRatingModelServiceRequest2.setRatingModelIdentifier("hi!");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Qualifier qualifier17 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Qualifier();
        java.time.Instant instant18 = qualifier17.DateApplied;
        java.lang.String str19 = qualifier17.User;
        java.lang.String str20 = qualifier17.getIdentifier();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest21 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest();
        java.lang.Object obj22 = timeAlignedDataServiceRequest21.getResponseType();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse23 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant24 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse25 = locationDescriptionListServiceResponse23.setNextToken(instant24);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest26 = timeAlignedDataServiceRequest21.setQueryFrom(instant24);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Qualifier qualifier27 = qualifier17.setDateApplied(instant24);
        java.time.Instant instant28 = qualifier27.getDateApplied();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DownchainProcessorListByRatingModelServiceRequest downchainProcessorListByRatingModelServiceRequest29 = downchainProcessorListByRatingModelServiceRequest2.setQueryFrom(instant28);
        downchainProcessorListByRatingModelServiceRequest29.RatingModelIdentifier = "multipart/form-data; boundary=****9fadde69-3f13-40c4-a87c-0f3f51c2dd35****";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Inspection inspection32 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Inspection();
        java.lang.String str33 = inspection32.getManufacturer();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Inspection inspection35 = inspection32.setSubLocationIdentifier("");
        inspection32.SubLocationIdentifier = "9999-12-31T23:59:59.999Z";
        java.lang.String str38 = inspection32.Model;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDescription timeSeriesDescription39 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDescription();
        java.lang.String str40 = timeSeriesDescription39.getComment();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationRemark locationRemark41 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationRemark();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationRemark locationRemark43 = locationRemark41.setDescription("MaxInstant");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitDataServiceResponse fieldVisitDataServiceResponse44 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitDataServiceResponse();
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CrossSectionSurveyActivity> crossSectionSurveyActivityList45 = fieldVisitDataServiceResponse44.CrossSectionSurveyActivity;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitDataServiceResponse fieldVisitDataServiceResponse47 = fieldVisitDataServiceResponse44.setIdentifier("");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary48 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        dischargeSummary48.Reviewer = "";
        java.time.Instant instant51 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        dischargeSummary48.MeasurementTime = instant51;
        fieldVisitDataServiceResponse44.ResponseTime = instant51;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationRemark locationRemark54 = locationRemark41.setCreateTime(instant51);
        timeSeriesDescription39.LastModified = instant51;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Inspection inspection56 = inspection32.setTime(instant51);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DownchainProcessorListByRatingModelServiceRequest downchainProcessorListByRatingModelServiceRequest57 = downchainProcessorListByRatingModelServiceRequest29.setQueryTo(instant51);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QualifierOperation qualifierOperation58 = qualifierOperation0.setDateAppliedUtc(instant51);
        qualifierOperation0.Identifier = "9999-12-31T23:59:59.9999999Z";
        java.lang.String str61 = qualifierOperation0.getUser();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QualifierOperation qualifierOperation63 = qualifierOperation0.setIdentifier("MaxInstant");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeOperationType metadataChangeOperationType64 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeOperationType.Deletion;
        qualifierOperation0.OperationType = metadataChangeOperationType64;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MethodOperation methodOperation66 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MethodOperation();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeOperationType metadataChangeOperationType67 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeOperationType.Creation;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MethodOperation methodOperation68 = methodOperation66.setOperationType(metadataChangeOperationType67);
        java.lang.String str69 = methodOperation68.getUser();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeOperationType metadataChangeOperationType70 = methodOperation68.getOperationType();
        methodOperation68.MethodCode = "multipart/form-data; boundary=****f642a130-eb6d-4fb6-a1a4-7c7216ab119b****";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MethodOperation methodOperation74 = methodOperation68.setUser("MaxInstant");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDescription timeSeriesDescription75 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDescription();
        java.time.Instant instant76 = timeSeriesDescription75.getCorrectedStartTime();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDescription timeSeriesDescription78 = timeSeriesDescription75.setLabel("hi!");
        java.lang.String str79 = timeSeriesDescription78.getUniqueId();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest80 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest();
        java.lang.Object obj81 = timeAlignedDataServiceRequest80.getResponseType();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Sensor sensor82 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Sensor();
        java.time.Instant instant83 = sensor82.getLastModifiedUtc();
        java.time.Instant instant84 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Sensor sensor85 = sensor82.setLastModifiedUtc(instant84);
        java.time.Instant instant86 = sensor82.LastModifiedUtc;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest87 = timeAlignedDataServiceRequest80.setQueryTo(instant86);
        timeSeriesDescription78.CorrectedEndTime = instant86;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MethodOperation methodOperation89 = methodOperation74.setDateAppliedUtc(instant86);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MethodOperation methodOperation91 = methodOperation74.setUser("MaxInstant");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeOperationType metadataChangeOperationType92 = methodOperation74.getOperationType();
        qualifierOperation0.OperationType = metadataChangeOperationType92;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(instant8);
        org.junit.Assert.assertNotNull(instant11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "9999-12-31T23:59:59.999Z" + "'", str12, "9999-12-31T23:59:59.999Z");
        org.junit.Assert.assertNotNull(downchainProcessorListByRatingModelServiceRequest14);
        org.junit.Assert.assertNotNull(downchainProcessorListByRatingModelServiceRequest16);
        org.junit.Assert.assertNull(instant18);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNotNull(obj22);
        org.junit.Assert.assertEquals(obj22.toString(), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj22), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj22), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertNotNull(instant24);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse25);
        org.junit.Assert.assertNotNull(timeAlignedDataServiceRequest26);
        org.junit.Assert.assertNotNull(qualifier27);
        org.junit.Assert.assertNotNull(instant28);
        org.junit.Assert.assertNotNull(downchainProcessorListByRatingModelServiceRequest29);
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertNotNull(inspection35);
        org.junit.Assert.assertNull(str38);
        org.junit.Assert.assertNull(str40);
        org.junit.Assert.assertNotNull(locationRemark43);
        org.junit.Assert.assertNull(crossSectionSurveyActivityList45);
        org.junit.Assert.assertNotNull(fieldVisitDataServiceResponse47);
        org.junit.Assert.assertNotNull(instant51);
        org.junit.Assert.assertNotNull(locationRemark54);
        org.junit.Assert.assertNotNull(inspection56);
        org.junit.Assert.assertNotNull(downchainProcessorListByRatingModelServiceRequest57);
        org.junit.Assert.assertNotNull(qualifierOperation58);
        org.junit.Assert.assertNull(str61);
        org.junit.Assert.assertNotNull(qualifierOperation63);
        org.junit.Assert.assertTrue("'" + metadataChangeOperationType64 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeOperationType.Deletion + "'", metadataChangeOperationType64.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeOperationType.Deletion));
        org.junit.Assert.assertTrue("'" + metadataChangeOperationType67 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeOperationType.Creation + "'", metadataChangeOperationType67.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeOperationType.Creation));
        org.junit.Assert.assertNotNull(methodOperation68);
        org.junit.Assert.assertNull(str69);
        org.junit.Assert.assertTrue("'" + metadataChangeOperationType70 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeOperationType.Creation + "'", metadataChangeOperationType70.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeOperationType.Creation));
        org.junit.Assert.assertNotNull(methodOperation74);
        org.junit.Assert.assertNull(instant76);
        org.junit.Assert.assertNotNull(timeSeriesDescription78);
        org.junit.Assert.assertNull(str79);
        org.junit.Assert.assertNotNull(obj81);
        org.junit.Assert.assertEquals(obj81.toString(), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj81), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj81), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertNull(instant83);
        org.junit.Assert.assertNotNull(instant84);
        org.junit.Assert.assertNotNull(sensor85);
        org.junit.Assert.assertNotNull(instant86);
        org.junit.Assert.assertNotNull(timeAlignedDataServiceRequest87);
        org.junit.Assert.assertNotNull(methodOperation89);
        org.junit.Assert.assertNotNull(methodOperation91);
        org.junit.Assert.assertTrue("'" + metadataChangeOperationType92 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeOperationType.Creation + "'", metadataChangeOperationType92.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeOperationType.Creation));
    }

    @Test
    public void test42614() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest85.test42614");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostBaseStandardReferenceDatum postBaseStandardReferenceDatum0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostBaseStandardReferenceDatum();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostBaseStandardReferenceDatum postBaseStandardReferenceDatum2 = postBaseStandardReferenceDatum0.setLocationUniqueId("MinInstant");
        java.lang.String str3 = postBaseStandardReferenceDatum2.LocationUniqueId;
        postBaseStandardReferenceDatum2.StandardIdentifier = "-PT87591240H";
        java.lang.Double double6 = postBaseStandardReferenceDatum2.Uncertainty;
        java.lang.String str7 = postBaseStandardReferenceDatum2.getLocationUniqueId();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostBaseStandardReferenceDatum postBaseStandardReferenceDatum9 = postBaseStandardReferenceDatum2.setStandardIdentifier("multipart/form-data; boundary=****871ccc7e-c9d9-467b-8c95-d6f9599f0e81****");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostBaseStandardReferenceDatum postBaseStandardReferenceDatum11 = postBaseStandardReferenceDatum2.setMethod("multipart/form-data; boundary=****ebf59e0e-2d1f-43bc-996f-3c628a80f696****");
        org.junit.Assert.assertNotNull(postBaseStandardReferenceDatum2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "MinInstant" + "'", str3, "MinInstant");
        org.junit.Assert.assertNull(double6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "MinInstant" + "'", str7, "MinInstant");
        org.junit.Assert.assertNotNull(postBaseStandardReferenceDatum9);
        org.junit.Assert.assertNotNull(postBaseStandardReferenceDatum11);
    }

    @Test
    public void test42615() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest85.test42615");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivity samplingPlanPlannedActivity0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivity();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes1 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivity samplingPlanPlannedActivity2 = samplingPlanPlannedActivity0.setAuditAttributes(auditAttributes1);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ActivityType activityType3 = samplingPlanPlannedActivity2.ActivityType;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricConfiguration metricConfiguration4 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricConfiguration();
        java.lang.String str5 = metricConfiguration4.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservedProperty postObservedProperty6 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservedProperty();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservedProperty postObservedProperty8 = postObservedProperty6.setName("/AQUARIUS/Acquisition/v2://9999-12-31T23:59:59.999Z");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisType analysisType9 = postObservedProperty6.getAnalysisType();
        postObservedProperty6.CustomId = "MaxInstant";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity quantity12 = postObservedProperty6.getLowerLimit();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLabAnalysisMethod postLabAnalysisMethod13 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLabAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes14 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLabAnalysisMethod postLabAnalysisMethod15 = postLabAnalysisMethod13.setAuditAttributes(auditAttributes14);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty[] observedPropertyArray16 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty> observedPropertyList17 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty>) observedPropertyList17, observedPropertyArray16);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLabAnalysisMethod postLabAnalysisMethod19 = postLabAnalysisMethod15.setObservedProperties((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty>) observedPropertyList17);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroup analyticalGroup20 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroup();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupType analyticalGroupType21 = analyticalGroup20.getType();
        analyticalGroup20.Name = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSSSSSZZZZZ";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroup analyticalGroup24 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroup();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem analyticalGroupItem25 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod26 = analyticalGroupItem25.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem analyticalGroupItem27 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod28 = analyticalGroupItem27.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod29 = analyticalGroupItem27.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem analyticalGroupItem30 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod31 = analyticalGroupItem30.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod32 = analyticalGroupItem30.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod33 = null;
        analyticalGroupItem30.AnalysisMethod = analysisMethod33;
        java.lang.String str35 = analyticalGroupItem30.getHoldingTime();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem analyticalGroupItem36 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod37 = analyticalGroupItem36.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod38 = analyticalGroupItem36.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem analyticalGroupItem39 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod40 = analyticalGroupItem39.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem analyticalGroupItem41 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod42 = analyticalGroupItem41.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod43 = analyticalGroupItem41.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod44 = null;
        analyticalGroupItem41.AnalysisMethod = analysisMethod44;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem[] analyticalGroupItemArray46 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem[] { analyticalGroupItem25, analyticalGroupItem27, analyticalGroupItem30, analyticalGroupItem36, analyticalGroupItem39, analyticalGroupItem41 };
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem> analyticalGroupItemList47 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem>();
        boolean boolean48 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem>) analyticalGroupItemList47, analyticalGroupItemArray46);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroup analyticalGroup49 = analyticalGroup24.setAnalyticalGroupItems((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem>) analyticalGroupItemList47);
        analyticalGroup20.AnalyticalGroupItems = analyticalGroupItemList47;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes51 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes();
        analyticalGroup20.AuditAttributes = auditAttributes51;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLabAnalysisMethod postLabAnalysisMethod53 = postLabAnalysisMethod19.setAuditAttributes(auditAttributes51);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservedProperty postObservedProperty54 = postObservedProperty6.setAuditAttributes(auditAttributes51);
        metricConfiguration4.AuditAttributes = auditAttributes51;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivity samplingPlanPlannedActivity56 = samplingPlanPlannedActivity2.setAuditAttributes(auditAttributes51);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ActivityTemplate activityTemplate57 = samplingPlanPlannedActivity2.getActivityTemplate();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes58 = samplingPlanPlannedActivity2.AuditAttributes;
        org.junit.Assert.assertNotNull(samplingPlanPlannedActivity2);
        org.junit.Assert.assertNull(activityType3);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(postObservedProperty8);
        org.junit.Assert.assertNull(analysisType9);
        org.junit.Assert.assertNull(quantity12);
        org.junit.Assert.assertNotNull(postLabAnalysisMethod15);
        org.junit.Assert.assertNotNull(observedPropertyArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(postLabAnalysisMethod19);
        org.junit.Assert.assertNull(analyticalGroupType21);
        org.junit.Assert.assertNull(analysisMethod26);
        org.junit.Assert.assertNull(analysisMethod28);
        org.junit.Assert.assertNull(analysisMethod29);
        org.junit.Assert.assertNull(analysisMethod31);
        org.junit.Assert.assertNull(analysisMethod32);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertNull(analysisMethod37);
        org.junit.Assert.assertNull(analysisMethod38);
        org.junit.Assert.assertNull(analysisMethod40);
        org.junit.Assert.assertNull(analysisMethod42);
        org.junit.Assert.assertNull(analysisMethod43);
        org.junit.Assert.assertNotNull(analyticalGroupItemArray46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(analyticalGroup49);
        org.junit.Assert.assertNotNull(postLabAnalysisMethod53);
        org.junit.Assert.assertNotNull(postObservedProperty54);
        org.junit.Assert.assertNotNull(samplingPlanPlannedActivity56);
        org.junit.Assert.assertNull(activityTemplate57);
        org.junit.Assert.assertNotNull(auditAttributes58);
    }

    @Test
    public void test42616() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest85.test42616");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutExtendedAttribute putExtendedAttribute0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutExtendedAttribute();
        putExtendedAttribute0.Key = "/AQUARIUS/Acquisition/v2://9999-12-31T23:59:59.999Z";
        putExtendedAttribute0.Required = true;
        java.lang.String str5 = putExtendedAttribute0.Key;
        java.lang.Boolean boolean6 = putExtendedAttribute0.isRequired();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutExtendedAttribute putExtendedAttribute8 = putExtendedAttribute0.setUniqueId("multipart/form-data; boundary=****59879c02-0839-4b96-bc41-a13ebb706be4****");
        java.util.ArrayList<java.lang.String> strList9 = putExtendedAttribute0.getPickListValues();
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "/AQUARIUS/Acquisition/v2://9999-12-31T23:59:59.999Z" + "'", str5, "/AQUARIUS/Acquisition/v2://9999-12-31T23:59:59.999Z");
        org.junit.Assert.assertEquals("'" + boolean6 + "' != '" + true + "'", boolean6, true);
        org.junit.Assert.assertNotNull(putExtendedAttribute8);
        org.junit.Assert.assertNull(strList9);
    }

    @Test
    public void test42617() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest85.test42617");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostTag postTag0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostTag();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_1 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray4 = new java.lang.String[] { "", "" };
        java.util.ArrayList<java.lang.String> strList5 = new java.util.ArrayList<java.lang.String>();
        boolean boolean6 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList5, strArray4);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_7 = getObservationsV2_1.setDataClassifications((java.util.List<java.lang.String>) strList5);
        postTag0.PickListValues = strList5;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.TagRequestBase tagRequestBase10 = postTag0.setKey("yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSSSSSZZZZZ");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.TagValueType tagValueType11 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.TagValueType.Number;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.TagRequestBase tagRequestBase12 = postTag0.setValueType(tagValueType11);
        java.util.ArrayList<java.lang.String> strList13 = tagRequestBase12.PickListValues;
        org.junit.Assert.assertNotNull(strArray4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(getObservationsV2_7);
        org.junit.Assert.assertNotNull(tagRequestBase10);
        org.junit.Assert.assertTrue("'" + tagValueType11 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.TagValueType.Number + "'", tagValueType11.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.TagValueType.Number));
        org.junit.Assert.assertNotNull(tagRequestBase12);
        org.junit.Assert.assertNotNull(strList13);
    }

    @Test
    public void test42618() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest85.test42618");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLabAnalysisMethod postLabAnalysisMethod0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLabAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes1 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLabAnalysisMethod postLabAnalysisMethod2 = postLabAnalysisMethod0.setAuditAttributes(auditAttributes1);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLabAnalysisMethod postLabAnalysisMethod4 = postLabAnalysisMethod0.setId("MinDuration");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLabAnalysisMethod postLabAnalysisMethod6 = postLabAnalysisMethod0.setContext("multipart/form-data; boundary=****bbcf5f9e-6ccf-4b63-91ab-6e645caf02af****");
        postLabAnalysisMethod6.Description = "POST";
        java.lang.String str9 = postLabAnalysisMethod6.Description;
        org.junit.Assert.assertNotNull(postLabAnalysisMethod2);
        org.junit.Assert.assertNotNull(postLabAnalysisMethod4);
        org.junit.Assert.assertNotNull(postLabAnalysisMethod6);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "POST" + "'", str9, "POST");
    }

    @Test
    public void test42619() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest85.test42619");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetSpecimens getSpecimens0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetSpecimens();
        java.util.List<java.lang.String> strList1 = getSpecimens0.getActivityIds();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetSpecimens getSpecimens3 = getSpecimens0.setSort("MinDuration");
        java.util.List<java.lang.String> strList4 = getSpecimens3.getActivityTypes();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescription locationDescription5 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescription();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescription locationDescription7 = locationDescription5.setIdentifier("");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescription locationDescription9 = locationDescription7.setUniqueId("'.'SSSSSSS");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Reading reading10 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Reading();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay11 = reading10.getValue();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Reading reading13 = reading10.setParameterId("hi!");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Reading reading15 = reading13.setModel("MaxInstant");
        java.lang.Integer int16 = reading15.getGradeCode();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutBulkEditResultGradesV2 putBulkEditResultGradesV2_17 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutBulkEditResultGradesV2();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeField extendedAttributeField18 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeField();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeField extendedAttributeField20 = extendedAttributeField18.setDisplayName("");
        java.lang.Boolean boolean21 = extendedAttributeField20.CanBeEmpty;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest22 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest();
        java.lang.Object obj23 = timeAlignedDataServiceRequest22.getResponseType();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_24 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray27 = new java.lang.String[] { "", "" };
        java.util.ArrayList<java.lang.String> strList28 = new java.util.ArrayList<java.lang.String>();
        boolean boolean29 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList28, strArray27);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_30 = getObservationsV2_24.setDataClassifications((java.util.List<java.lang.String>) strList28);
        getObservationsV2_30.DepthUnitCustomId = "hi!";
        java.lang.String str33 = getObservationsV2_30.CustomId;
        java.util.List<java.lang.String> strList34 = getObservationsV2_30.getSearch();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_35 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray37 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList38 = new java.util.ArrayList<java.lang.String>();
        boolean boolean39 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList38, strArray37);
        getObservationsV2_35.SpecimenIds = strList38;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags41 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray45 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList46 = new java.util.ArrayList<java.lang.String>();
        boolean boolean47 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList46, strArray45);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags48 = putLocationTags41.setTagUniqueIds(strList46);
        getObservationsV2_35.QualityControlTypes = strList46;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_50 = getObservationsV2_30.setMedia((java.util.List<java.lang.String>) strList46);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_51 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String str52 = getObservationsV2_51.getCustomId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_53 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray55 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList56 = new java.util.ArrayList<java.lang.String>();
        boolean boolean57 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList56, strArray55);
        getObservationsV2_53.SpecimenIds = strList56;
        getObservationsV2_51.ProjectIds = strList56;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_60 = getObservationsV2_30.setObservedPropertyIds((java.util.List<java.lang.String>) strList56);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest61 = timeAlignedDataServiceRequest22.setTimeSeriesOutputUnitIds(strList56);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeField extendedAttributeField62 = extendedAttributeField20.setValueOptions((java.util.List<java.lang.String>) strList56);
        putBulkEditResultGradesV2_17.AnalysisMethodSimpleIds = strList56;
        reading15.ReadingQualifiers = strList56;
        locationDescription9.SecondaryFolders = strList56;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetSpecimens getSpecimens66 = getSpecimens3.setFieldVisitId((java.util.List<java.lang.String>) strList56);
        java.lang.Integer int67 = getSpecimens66.Limit;
        java.util.List<java.lang.String> strList68 = getSpecimens66.getSpecimenStatuses();
        org.junit.Assert.assertNull(strList1);
        org.junit.Assert.assertNotNull(getSpecimens3);
        org.junit.Assert.assertNull(strList4);
        org.junit.Assert.assertNotNull(locationDescription7);
        org.junit.Assert.assertNotNull(locationDescription9);
        org.junit.Assert.assertNull(doubleWithDisplay11);
        org.junit.Assert.assertNotNull(reading13);
        org.junit.Assert.assertNotNull(reading15);
        org.junit.Assert.assertNull(int16);
        org.junit.Assert.assertNotNull(extendedAttributeField20);
        org.junit.Assert.assertNull(boolean21);
        org.junit.Assert.assertNotNull(obj23);
        org.junit.Assert.assertEquals(obj23.toString(), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj23), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj23), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(getObservationsV2_30);
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertNull(strList34);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(putLocationTags48);
        org.junit.Assert.assertNotNull(getObservationsV2_50);
        org.junit.Assert.assertNull(str52);
        org.junit.Assert.assertNotNull(strArray55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertNotNull(getObservationsV2_60);
        org.junit.Assert.assertNotNull(timeAlignedDataServiceRequest61);
        org.junit.Assert.assertNotNull(extendedAttributeField62);
        org.junit.Assert.assertNotNull(getSpecimens66);
        org.junit.Assert.assertNull(int67);
        org.junit.Assert.assertNull(strList68);
    }

    @Test
    public void test42620() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest85.test42620");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutActivityTemplate putActivityTemplate0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutActivityTemplate();
        java.lang.String str1 = putActivityTemplate0.getId();
        java.lang.String str2 = putActivityTemplate0.Id;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes3 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes5 = auditAttributes3.setCreationUserProfileId("'.'SSSSSSS");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutActivityTemplate putActivityTemplate6 = putActivityTemplate0.setAuditAttributes(auditAttributes5);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.CollectionMethod collectionMethod7 = putActivityTemplate6.getCollectionMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFieldVisitActivityWithTemplate postFieldVisitActivityWithTemplate8 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFieldVisitActivityWithTemplate();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes9 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFieldVisitActivityWithTemplate postFieldVisitActivityWithTemplate10 = postFieldVisitActivityWithTemplate8.setAuditAttributes(auditAttributes9);
        java.lang.String str11 = postFieldVisitActivityWithTemplate10.getCustomId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ActivityTemplateType activityTemplateType12 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ActivityTemplateType.FIELD_SURVEY;
        postFieldVisitActivityWithTemplate10.Type = activityTemplateType12;
        putActivityTemplate6.Type = activityTemplateType12;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity plannedActivity15 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivityActivityType plannedActivityActivityType16 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivityActivityType.BLANK;
        plannedActivity15.ActivityType = plannedActivityActivityType16;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ActivityTemplate activityTemplate18 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ActivityTemplate();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MediumType mediumType19 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MediumType.BIOLOGICAL;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ActivityTemplate activityTemplate20 = activityTemplate18.setMedium(mediumType19);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ActivityTemplate activityTemplate22 = activityTemplate18.setComment("'.'SSSSSSS");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedFieldResult plannedFieldResult23 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedFieldResult();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes24 = plannedFieldResult23.AuditAttributes;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails25 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails27 = labResultDetails25.setAnalysisComment("/AQUARIUS/Acquisition/v2");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes28 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails29 = labResultDetails27.setAuditAttributes(auditAttributes28);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedFieldResult plannedFieldResult30 = plannedFieldResult23.setAuditAttributes(auditAttributes28);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroup analyticalGroup31 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroup();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupType analyticalGroupType32 = analyticalGroup31.getType();
        analyticalGroup31.Name = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSSSSSZZZZZ";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroup analyticalGroup35 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroup();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem analyticalGroupItem36 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod37 = analyticalGroupItem36.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem analyticalGroupItem38 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod39 = analyticalGroupItem38.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod40 = analyticalGroupItem38.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem analyticalGroupItem41 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod42 = analyticalGroupItem41.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod43 = analyticalGroupItem41.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod44 = null;
        analyticalGroupItem41.AnalysisMethod = analysisMethod44;
        java.lang.String str46 = analyticalGroupItem41.getHoldingTime();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem analyticalGroupItem47 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod48 = analyticalGroupItem47.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod49 = analyticalGroupItem47.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem analyticalGroupItem50 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod51 = analyticalGroupItem50.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem analyticalGroupItem52 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod53 = analyticalGroupItem52.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod54 = analyticalGroupItem52.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod55 = null;
        analyticalGroupItem52.AnalysisMethod = analysisMethod55;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem[] analyticalGroupItemArray57 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem[] { analyticalGroupItem36, analyticalGroupItem38, analyticalGroupItem41, analyticalGroupItem47, analyticalGroupItem50, analyticalGroupItem52 };
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem> analyticalGroupItemList58 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem>();
        boolean boolean59 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem>) analyticalGroupItemList58, analyticalGroupItemArray57);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroup analyticalGroup60 = analyticalGroup35.setAnalyticalGroupItems((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem>) analyticalGroupItemList58);
        analyticalGroup31.AnalyticalGroupItems = analyticalGroupItemList58;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes62 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes();
        analyticalGroup31.AuditAttributes = auditAttributes62;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedFieldResult plannedFieldResult64 = plannedFieldResult30.setAuditAttributes(auditAttributes62);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutActivityTemplate putActivityTemplate65 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutActivityTemplate();
        java.lang.String str66 = putActivityTemplate65.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MediumType mediumType67 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MediumType.BIOLOGICAL;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutActivityTemplate putActivityTemplate68 = putActivityTemplate65.setMedium(mediumType67);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedFieldResult plannedFieldResult69 = plannedFieldResult30.setMedium(mediumType67);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ActivityTemplate activityTemplate70 = activityTemplate18.setMedium(mediumType67);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MediumType mediumType71 = activityTemplate70.getMedium();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity plannedActivity72 = plannedActivity15.setMedium(mediumType71);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutActivityTemplate putActivityTemplate73 = putActivityTemplate6.setMedium(mediumType71);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNotNull(auditAttributes5);
        org.junit.Assert.assertNotNull(putActivityTemplate6);
        org.junit.Assert.assertNull(collectionMethod7);
        org.junit.Assert.assertNotNull(postFieldVisitActivityWithTemplate10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertTrue("'" + activityTemplateType12 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ActivityTemplateType.FIELD_SURVEY + "'", activityTemplateType12.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ActivityTemplateType.FIELD_SURVEY));
        org.junit.Assert.assertTrue("'" + plannedActivityActivityType16 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivityActivityType.BLANK + "'", plannedActivityActivityType16.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivityActivityType.BLANK));
        org.junit.Assert.assertTrue("'" + mediumType19 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MediumType.BIOLOGICAL + "'", mediumType19.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MediumType.BIOLOGICAL));
        org.junit.Assert.assertNotNull(activityTemplate20);
        org.junit.Assert.assertNotNull(activityTemplate22);
        org.junit.Assert.assertNull(auditAttributes24);
        org.junit.Assert.assertNotNull(labResultDetails27);
        org.junit.Assert.assertNotNull(labResultDetails29);
        org.junit.Assert.assertNotNull(plannedFieldResult30);
        org.junit.Assert.assertNull(analyticalGroupType32);
        org.junit.Assert.assertNull(analysisMethod37);
        org.junit.Assert.assertNull(analysisMethod39);
        org.junit.Assert.assertNull(analysisMethod40);
        org.junit.Assert.assertNull(analysisMethod42);
        org.junit.Assert.assertNull(analysisMethod43);
        org.junit.Assert.assertNull(str46);
        org.junit.Assert.assertNull(analysisMethod48);
        org.junit.Assert.assertNull(analysisMethod49);
        org.junit.Assert.assertNull(analysisMethod51);
        org.junit.Assert.assertNull(analysisMethod53);
        org.junit.Assert.assertNull(analysisMethod54);
        org.junit.Assert.assertNotNull(analyticalGroupItemArray57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(analyticalGroup60);
        org.junit.Assert.assertNotNull(plannedFieldResult64);
        org.junit.Assert.assertNull(str66);
        org.junit.Assert.assertTrue("'" + mediumType67 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MediumType.BIOLOGICAL + "'", mediumType67.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MediumType.BIOLOGICAL));
        org.junit.Assert.assertNotNull(putActivityTemplate68);
        org.junit.Assert.assertNotNull(plannedFieldResult69);
        org.junit.Assert.assertNotNull(activityTemplate70);
        org.junit.Assert.assertTrue("'" + mediumType71 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MediumType.BIOLOGICAL + "'", mediumType71.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MediumType.BIOLOGICAL));
        org.junit.Assert.assertNotNull(plannedActivity72);
        org.junit.Assert.assertNotNull(putActivityTemplate73);
    }

    @Test
    public void test42621() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest85.test42621");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LevelSurveyMeasurement levelSurveyMeasurement0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LevelSurveyMeasurement();
        java.lang.String str1 = levelSurveyMeasurement0.getReferencePointUniqueId();
        levelSurveyMeasurement0.ReferencePointUniqueId = "-PT87591240H";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LevelSurveyMeasurement levelSurveyMeasurement5 = levelSurveyMeasurement0.setReferencePointUniqueId("http");
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(levelSurveyMeasurement5);
    }

    @Test
    public void test42622() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest85.test42622");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DeleteAnalyticalGroup deleteAnalyticalGroup0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DeleteAnalyticalGroup();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DeleteAnalyticalGroup deleteAnalyticalGroup2 = deleteAnalyticalGroup0.setId("");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DeleteAnalyticalGroup deleteAnalyticalGroup4 = deleteAnalyticalGroup2.setId("hi!:///AQUARIUS/Provisioning/v1");
        java.lang.String str5 = deleteAnalyticalGroup2.getId();
        deleteAnalyticalGroup2.Id = "multipart/form-data; boundary=****221f1588-b890-43c2-a3c8-0d77cfe54330****";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DeleteAnalyticalGroup deleteAnalyticalGroup9 = deleteAnalyticalGroup2.setId("http://MaxDurationhttp/json/reply/ArrayList");
        org.junit.Assert.assertNotNull(deleteAnalyticalGroup2);
        org.junit.Assert.assertNotNull(deleteAnalyticalGroup4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "hi!:///AQUARIUS/Provisioning/v1" + "'", str5, "hi!:///AQUARIUS/Provisioning/v1");
        org.junit.Assert.assertNotNull(deleteAnalyticalGroup9);
    }

    @Test
    public void test42623() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest85.test42623");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DeleteObservationsV2 deleteObservationsV2_0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DeleteObservationsV2();
        java.util.List<java.lang.String> strList1 = deleteObservationsV2_0.SamplingLocationIds;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportObservations getExportObservations2 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportObservations();
        java.util.List<java.lang.String> strList3 = getExportObservations2.getLabReportIds();
        java.lang.Double double4 = getExportObservations2.getNumericResultValue();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetChartDataV2 getChartDataV2_5 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetChartDataV2();
        java.lang.String str6 = getChartDataV2_5.getActivityCustomId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetChartDataV2 getChartDataV2_8 = getChartDataV2_5.setFilterId("");
        java.util.List<java.lang.String> strList9 = getChartDataV2_5.ResultGrades;
        getChartDataV2_5.MinNumericResultValue = 100.0d;
        java.lang.Double double12 = getChartDataV2_5.MaxNumericResultValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostTag postTag13 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostTag();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_14 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray17 = new java.lang.String[] { "", "" };
        java.util.ArrayList<java.lang.String> strList18 = new java.util.ArrayList<java.lang.String>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList18, strArray17);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_20 = getObservationsV2_14.setDataClassifications((java.util.List<java.lang.String>) strList18);
        postTag13.PickListValues = strList18;
        getChartDataV2_5.SamplingContextTagIds = strList18;
        getChartDataV2_5.Limit = (-1);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitDataByLocationServiceRequest fieldVisitDataByLocationServiceRequest25 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitDataByLocationServiceRequest();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitDataByLocationServiceRequest fieldVisitDataByLocationServiceRequest27 = fieldVisitDataByLocationServiceRequest25.setIncludeNodeDetails((java.lang.Boolean) true);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags28 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray32 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList33 = new java.util.ArrayList<java.lang.String>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList33, strArray32);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags35 = putLocationTags28.setTagUniqueIds(strList33);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitDataByLocationServiceRequest fieldVisitDataByLocationServiceRequest36 = fieldVisitDataByLocationServiceRequest27.setParameters(strList33);
        java.lang.Object obj37 = fieldVisitDataByLocationServiceRequest27.getResponseType();
        java.util.ArrayList<java.lang.String> strList38 = fieldVisitDataByLocationServiceRequest27.getParameters();
        getChartDataV2_5.Media = strList38;
        getExportObservations2.CollectionMethodIds = strList38;
        java.lang.Double double41 = getExportObservations2.NumericResultValue;
        java.util.List<java.lang.String> strList42 = getExportObservations2.CollectionMethodIds;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_43 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray46 = new java.lang.String[] { "", "" };
        java.util.ArrayList<java.lang.String> strList47 = new java.util.ArrayList<java.lang.String>();
        boolean boolean48 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList47, strArray46);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_49 = getObservationsV2_43.setDataClassifications((java.util.List<java.lang.String>) strList47);
        getObservationsV2_49.DepthUnitCustomId = "hi!";
        java.lang.String str52 = getObservationsV2_49.CustomId;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_53 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray55 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList56 = new java.util.ArrayList<java.lang.String>();
        boolean boolean57 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList56, strArray55);
        getObservationsV2_53.SpecimenIds = strList56;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags59 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray63 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList64 = new java.util.ArrayList<java.lang.String>();
        boolean boolean65 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList64, strArray63);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags66 = putLocationTags59.setTagUniqueIds(strList64);
        getObservationsV2_53.ActivityIds = strList64;
        getObservationsV2_49.ResultStatuses = strList64;
        getExportObservations2.ObservedPropertyIds = strList64;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DeleteObservationsV2 deleteObservationsV2_70 = deleteObservationsV2_0.setSearch((java.util.List<java.lang.String>) strList64);
        java.util.List<java.lang.String> strList71 = deleteObservationsV2_70.getSamplingLocationIds();
        java.lang.String str72 = deleteObservationsV2_70.DepthUnitId;
        java.time.Instant instant73 = deleteObservationsV2_70.StartModificationTime;
        org.junit.Assert.assertNull(strList1);
        org.junit.Assert.assertNull(strList3);
        org.junit.Assert.assertNull(double4);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNotNull(getChartDataV2_8);
        org.junit.Assert.assertNull(strList9);
        org.junit.Assert.assertNull(double12);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(getObservationsV2_20);
        org.junit.Assert.assertNotNull(fieldVisitDataByLocationServiceRequest27);
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(putLocationTags35);
        org.junit.Assert.assertNotNull(fieldVisitDataByLocationServiceRequest36);
        org.junit.Assert.assertNotNull(obj37);
        org.junit.Assert.assertEquals(obj37.toString(), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$FieldVisitDataByLocationServiceResponse");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj37), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$FieldVisitDataByLocationServiceResponse");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj37), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$FieldVisitDataByLocationServiceResponse");
        org.junit.Assert.assertNotNull(strList38);
        org.junit.Assert.assertNull(double41);
        org.junit.Assert.assertNotNull(strList42);
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(getObservationsV2_49);
        org.junit.Assert.assertNull(str52);
        org.junit.Assert.assertNotNull(strArray55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertNotNull(strArray63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertNotNull(putLocationTags66);
        org.junit.Assert.assertNotNull(deleteObservationsV2_70);
        org.junit.Assert.assertNull(strList71);
        org.junit.Assert.assertNull(str72);
        org.junit.Assert.assertNull(instant73);
    }

    @Test
    public void test42624() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest85.test42624");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostGenerateFieldVisits postGenerateFieldVisits0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostGenerateFieldVisits();
        postGenerateFieldVisits0.Id = "hi!";
        java.lang.String str3 = postGenerateFieldVisits0.Id;
        postGenerateFieldVisits0.Id = "2021.4.62.0";
        java.lang.String str6 = postGenerateFieldVisits0.getId();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "hi!" + "'", str3, "hi!");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "2021.4.62.0" + "'", str6, "2021.4.62.0");
    }

    @Test
    public void test42625() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest85.test42625");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedTimeSeriesInfo timeAlignedTimeSeriesInfo0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedTimeSeriesInfo();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedTimeSeriesInfo timeAlignedTimeSeriesInfo2 = timeAlignedTimeSeriesInfo0.setLabel("multipart/form-data; boundary=****9fadde69-3f13-40c4-a87c-0f3f51c2dd35****");
        timeAlignedTimeSeriesInfo0.UniqueId = "multipart/form-data; boundary=****7eff1774-b6b0-471a-961c-156c64359366****";
        timeAlignedTimeSeriesInfo0.Label = "http://MaxDurationhttp/json/reply/ArrayList";
        org.junit.Assert.assertNotNull(timeAlignedTimeSeriesInfo2);
    }

    @Test
    public void test42626() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest85.test42626");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Status status0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Status();
        status0.ReleaseName = "/AQUARIUS/Provisioning/v1";
        java.lang.String str3 = status0.ReleaseName;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Status status5 = status0.setReleaseName("multipart/form-data; boundary=****1165d1f3-8b30-4f2e-8d0b-ffebab458859****");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "/AQUARIUS/Provisioning/v1" + "'", str3, "/AQUARIUS/Provisioning/v1");
        org.junit.Assert.assertNotNull(status5);
    }

    @Test
    public void test42627() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest85.test42627");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity postActivity0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity();
        postActivity0.SourceActivityId = "2021.4.62.0";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity plannedActivity3 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity postActivity4 = postActivity0.setPlannedActivity(plannedActivity3);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity postActivity6 = postActivity0.setLoggerFileName("https");
        postActivity0.Refreshed = false;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.CollectionMethod collectionMethod9 = postActivity0.getCollectionMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservationV2 postObservationV2_10 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservationV2();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabInstruction labInstruction11 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservationV2 postObservationV2_12 = postObservationV2_10.setLabInstruction(labInstruction11);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Taxon taxon13 = null;
        postObservationV2_12.RelatedTaxon = taxon13;
        postObservationV2_12.MediumSubdivision = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity quantity17 = postObservationV2_12.getDepth();
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple> importHistoryEventSimpleList18 = postObservationV2_12.getImportHistoryEventSimples();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutActivity putActivity19 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutActivity();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity plannedActivity20 = putActivity19.PlannedActivity;
        java.time.OffsetDateTime offsetDateTime21 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutActivity putActivity22 = putActivity19.setEndTime(offsetDateTime21);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Device device23 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Device();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Device device25 = device23.setType("/AQUARIUS/Acquisition/v2");
        putActivity19.Device = device25;
        postObservationV2_12.Device = device25;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity postActivity28 = postActivity0.setDevice(device25);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocation samplingLocation29 = postActivity0.getSamplingLocation();
        org.junit.Assert.assertNotNull(postActivity4);
        org.junit.Assert.assertNotNull(postActivity6);
        org.junit.Assert.assertNull(collectionMethod9);
        org.junit.Assert.assertNotNull(postObservationV2_12);
        org.junit.Assert.assertNull(quantity17);
        org.junit.Assert.assertNull(importHistoryEventSimpleList18);
        org.junit.Assert.assertNull(plannedActivity20);
        org.junit.Assert.assertNotNull(putActivity22);
        org.junit.Assert.assertNotNull(device25);
        org.junit.Assert.assertNotNull(postActivity28);
        org.junit.Assert.assertNull(samplingLocation29);
    }

    @Test
    public void test42628() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest85.test42628");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitReading fieldVisitReading0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitReading();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitReading fieldVisitReading2 = fieldVisitReading0.setUseLocationDatumAsReference((java.lang.Boolean) true);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitApproval fieldVisitApproval3 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitApproval();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitReading fieldVisitReading4 = fieldVisitReading2.setApproval(fieldVisitApproval3);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitReading fieldVisitReading6 = fieldVisitReading2.setUseLocationDatumAsReference((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitReading fieldVisitReading8 = fieldVisitReading6.setSerialNumber("multipart/form-data; boundary=****e0afd3ef-ab93-4371-a368-4a6f5ef58c71****");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitReading fieldVisitReading10 = fieldVisitReading8.setReferencePointUniqueId("yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSSSSSZZZZZ");
        org.junit.Assert.assertNotNull(fieldVisitReading2);
        org.junit.Assert.assertNotNull(fieldVisitReading4);
        org.junit.Assert.assertNotNull(fieldVisitReading6);
        org.junit.Assert.assertNotNull(fieldVisitReading8);
        org.junit.Assert.assertNotNull(fieldVisitReading10);
    }

    @Test
    public void test42629() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest85.test42629");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportObservations getExportObservations0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportObservations();
        java.util.List<java.lang.String> strList1 = getExportObservations0.getLabReportIds();
        java.lang.String str2 = getExportObservations0.DepthUnitCustomId;
        java.util.List<java.lang.String> strList3 = getExportObservations0.getSearch();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetChartDataV2 getChartDataV2_4 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetChartDataV2();
        java.lang.String str5 = getChartDataV2_4.getActivityCustomId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetChartDataV2 getChartDataV2_7 = getChartDataV2_4.setFilterId("");
        java.util.List<java.lang.String> strList8 = getChartDataV2_4.getIds();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExtendedAttributeDropdownlistitems getExtendedAttributeDropdownlistitems9 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExtendedAttributeDropdownlistitems();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_10 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.util.List<java.lang.String> strList11 = getObservationsV2_10.SamplingContextTagIds;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_12 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray14 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList15 = new java.util.ArrayList<java.lang.String>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList15, strArray14);
        getObservationsV2_12.SpecimenIds = strList15;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags18 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray22 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList23 = new java.util.ArrayList<java.lang.String>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList23, strArray22);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags25 = putLocationTags18.setTagUniqueIds(strList23);
        getObservationsV2_12.QualityControlTypes = strList23;
        getObservationsV2_10.ResultGrades = strList23;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExtendedAttributeDropdownlistitems getExtendedAttributeDropdownlistitems28 = getExtendedAttributeDropdownlistitems9.setSearch((java.util.List<java.lang.String>) strList23);
        getChartDataV2_4.ObservedPropertyIds = strList23;
        getChartDataV2_4.SpecimenName = "MinDuration";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportObservations getExportObservations32 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportObservations();
        java.util.List<java.lang.String> strList33 = getExportObservations32.getLabReportIds();
        java.lang.String str34 = getExportObservations32.DepthUnitCustomId;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetActivityTemplates getActivityTemplates35 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetActivityTemplates();
        java.lang.Object obj36 = getActivityTemplates35.getResponseType();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_37 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray39 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList40 = new java.util.ArrayList<java.lang.String>();
        boolean boolean41 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList40, strArray39);
        getObservationsV2_37.SpecimenIds = strList40;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags43 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray47 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList48 = new java.util.ArrayList<java.lang.String>();
        boolean boolean49 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList48, strArray47);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags50 = putLocationTags43.setTagUniqueIds(strList48);
        getObservationsV2_37.QualityControlTypes = strList48;
        getActivityTemplates35.Type = strList48;
        getExportObservations32.AnalyticalGroupIds = strList48;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetChartDataV2 getChartDataV2_54 = getChartDataV2_4.setAnalysisMethodIds((java.util.List<java.lang.String>) strList48);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportObservations getExportObservations55 = getExportObservations0.setAnalyticalGroupIds((java.util.List<java.lang.String>) strList48);
        java.util.List<java.lang.String> strList56 = getExportObservations0.ObservedPropertyIds;
        java.util.List<java.lang.String> strList57 = null;
        getExportObservations0.SamplingLocationIds = strList57;
        java.time.Instant instant59 = getExportObservations0.getStartObservedTime();
        java.util.List<java.lang.String> strList60 = getExportObservations0.ObservedPropertyIds;
        getExportObservations0.FieldVisitId = "'.'SSSSSSS://multipart/form-data; boundary=****e0afd3ef-ab93-4371-a368-4a6f5ef58c71****";
        org.junit.Assert.assertNull(strList1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(strList3);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(getChartDataV2_7);
        org.junit.Assert.assertNull(strList8);
        org.junit.Assert.assertNull(strList11);
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(putLocationTags25);
        org.junit.Assert.assertNotNull(getExtendedAttributeDropdownlistitems28);
        org.junit.Assert.assertNull(strList33);
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertNotNull(obj36);
        org.junit.Assert.assertEquals(obj36.toString(), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$SearchResultActivityTemplate");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj36), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$SearchResultActivityTemplate");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj36), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$SearchResultActivityTemplate");
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(putLocationTags50);
        org.junit.Assert.assertNotNull(getChartDataV2_54);
        org.junit.Assert.assertNotNull(getExportObservations55);
        org.junit.Assert.assertNull(strList56);
        org.junit.Assert.assertNull(instant59);
        org.junit.Assert.assertNull(strList60);
    }

    @Test
    public void test42630() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest85.test42630");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDataServiceResponse timeSeriesDataServiceResponse0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDataServiceResponse();
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.InterpolationType> interpolationTypeList1 = timeSeriesDataServiceResponse0.InterpolationTypes;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDataServiceResponse timeSeriesDataServiceResponse3 = timeSeriesDataServiceResponse0.setLabel("/AQUARIUS");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDataServiceResponse timeSeriesDataServiceResponse5 = timeSeriesDataServiceResponse3.setUniqueId("multipart/form-data; boundary=****bbcf5f9e-6ccf-4b63-91ab-6e645caf02af****");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDataServiceResponse timeSeriesDataServiceResponse7 = timeSeriesDataServiceResponse3.setLabel("MinDuration");
        java.lang.String str8 = timeSeriesDataServiceResponse3.getParameter();
        java.lang.String str9 = timeSeriesDataServiceResponse3.UniqueId;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Grade grade10 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Grade();
        java.lang.String str11 = grade10.GradeCode;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Grade grade13 = grade10.setGradeCode("/AQUARIUS/Acquisition/v2://9999-12-31T23:59:59.999Z");
        java.lang.String str14 = grade10.GradeCode;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Grade grade15 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Grade();
        java.lang.String str16 = grade15.GradeCode;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Grade grade18 = grade15.setGradeCode("/AQUARIUS/Acquisition/v2://9999-12-31T23:59:59.999Z");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Grade grade19 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Grade();
        java.lang.String str20 = grade19.GradeCode;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Grade grade22 = grade19.setGradeCode("/AQUARIUS/Acquisition/v2://9999-12-31T23:59:59.999Z");
        java.lang.String str23 = grade19.GradeCode;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Grade[] gradeArray24 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Grade[] { grade10, grade15, grade19 };
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Grade> gradeList25 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Grade>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Grade>) gradeList25, gradeArray24);
        timeSeriesDataServiceResponse3.Grades = gradeList25;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.StatisticalTimeRange statisticalTimeRange28 = timeSeriesDataServiceResponse3.getTimeRange();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDataServiceResponse timeSeriesDataServiceResponse29 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDataServiceResponse();
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.InterpolationType> interpolationTypeList30 = timeSeriesDataServiceResponse29.InterpolationTypes;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDataServiceResponse timeSeriesDataServiceResponse32 = timeSeriesDataServiceResponse29.setLabel("/AQUARIUS");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDataServiceResponse timeSeriesDataServiceResponse34 = timeSeriesDataServiceResponse32.setUniqueId("multipart/form-data; boundary=****bbcf5f9e-6ccf-4b63-91ab-6e645caf02af****");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDataServiceResponse timeSeriesDataServiceResponse36 = timeSeriesDataServiceResponse32.setLabel("MinDuration");
        java.lang.String str37 = timeSeriesDataServiceResponse32.getParameter();
        java.lang.String str38 = timeSeriesDataServiceResponse32.UniqueId;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Grade grade39 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Grade();
        java.lang.String str40 = grade39.GradeCode;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Grade grade42 = grade39.setGradeCode("/AQUARIUS/Acquisition/v2://9999-12-31T23:59:59.999Z");
        java.lang.String str43 = grade39.GradeCode;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Grade grade44 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Grade();
        java.lang.String str45 = grade44.GradeCode;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Grade grade47 = grade44.setGradeCode("/AQUARIUS/Acquisition/v2://9999-12-31T23:59:59.999Z");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Grade grade48 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Grade();
        java.lang.String str49 = grade48.GradeCode;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Grade grade51 = grade48.setGradeCode("/AQUARIUS/Acquisition/v2://9999-12-31T23:59:59.999Z");
        java.lang.String str52 = grade48.GradeCode;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Grade[] gradeArray53 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Grade[] { grade39, grade44, grade48 };
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Grade> gradeList54 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Grade>();
        boolean boolean55 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Grade>) gradeList54, gradeArray53);
        timeSeriesDataServiceResponse32.Grades = gradeList54;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDataServiceResponse timeSeriesDataServiceResponse57 = timeSeriesDataServiceResponse3.setGrades(gradeList54);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDataServiceResponse timeSeriesDataServiceResponse58 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDataServiceResponse();
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.InterpolationType> interpolationTypeList59 = timeSeriesDataServiceResponse58.getInterpolationTypes();
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.GapTolerance> gapToleranceList60 = null;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDataServiceResponse timeSeriesDataServiceResponse61 = timeSeriesDataServiceResponse58.setGapTolerances(gapToleranceList60);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Approval approval62 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Approval();
        java.lang.String str63 = approval62.User;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Approval approval64 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Approval();
        java.lang.String str65 = approval64.User;
        approval64.LevelDescription = "MinDuration";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Approval approval69 = approval64.setApprovalLevel((java.lang.Integer) (-1));
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Approval approval70 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Approval();
        java.lang.String str71 = approval70.User;
        java.lang.String str72 = approval70.Comment;
        java.lang.String str73 = approval70.Comment;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Approval approval74 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Approval();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Approval approval75 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Approval();
        java.lang.String str76 = approval75.User;
        approval75.LevelDescription = "MinDuration";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Approval approval80 = approval75.setApprovalLevel((java.lang.Integer) 4);
        java.lang.String str81 = approval75.User;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ApprovalsTransaction approvalsTransaction82 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ApprovalsTransaction();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Approval approval83 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Approval();
        java.lang.String str84 = approval83.User;
        approval83.LevelDescription = "MinDuration";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Approval[] approvalArray87 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Approval[] { approval62, approval64, approval70, approval74, approval75, approvalsTransaction82, approval83 };
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Approval> approvalList88 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Approval>();
        boolean boolean89 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Approval>) approvalList88, approvalArray87);
        timeSeriesDataServiceResponse58.Approvals = approvalList88;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDataServiceResponse timeSeriesDataServiceResponse91 = timeSeriesDataServiceResponse57.setApprovals(approvalList88);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDataServiceResponse timeSeriesDataServiceResponse93 = timeSeriesDataServiceResponse91.setNumPoints((java.lang.Long) 0L);
        org.junit.Assert.assertNull(interpolationTypeList1);
        org.junit.Assert.assertNotNull(timeSeriesDataServiceResponse3);
        org.junit.Assert.assertNotNull(timeSeriesDataServiceResponse5);
        org.junit.Assert.assertNotNull(timeSeriesDataServiceResponse7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "multipart/form-data; boundary=****bbcf5f9e-6ccf-4b63-91ab-6e645caf02af****" + "'", str9, "multipart/form-data; boundary=****bbcf5f9e-6ccf-4b63-91ab-6e645caf02af****");
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNotNull(grade13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "/AQUARIUS/Acquisition/v2://9999-12-31T23:59:59.999Z" + "'", str14, "/AQUARIUS/Acquisition/v2://9999-12-31T23:59:59.999Z");
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNotNull(grade18);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNotNull(grade22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "/AQUARIUS/Acquisition/v2://9999-12-31T23:59:59.999Z" + "'", str23, "/AQUARIUS/Acquisition/v2://9999-12-31T23:59:59.999Z");
        org.junit.Assert.assertNotNull(gradeArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNull(statisticalTimeRange28);
        org.junit.Assert.assertNull(interpolationTypeList30);
        org.junit.Assert.assertNotNull(timeSeriesDataServiceResponse32);
        org.junit.Assert.assertNotNull(timeSeriesDataServiceResponse34);
        org.junit.Assert.assertNotNull(timeSeriesDataServiceResponse36);
        org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "multipart/form-data; boundary=****bbcf5f9e-6ccf-4b63-91ab-6e645caf02af****" + "'", str38, "multipart/form-data; boundary=****bbcf5f9e-6ccf-4b63-91ab-6e645caf02af****");
        org.junit.Assert.assertNull(str40);
        org.junit.Assert.assertNotNull(grade42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "/AQUARIUS/Acquisition/v2://9999-12-31T23:59:59.999Z" + "'", str43, "/AQUARIUS/Acquisition/v2://9999-12-31T23:59:59.999Z");
        org.junit.Assert.assertNull(str45);
        org.junit.Assert.assertNotNull(grade47);
        org.junit.Assert.assertNull(str49);
        org.junit.Assert.assertNotNull(grade51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "/AQUARIUS/Acquisition/v2://9999-12-31T23:59:59.999Z" + "'", str52, "/AQUARIUS/Acquisition/v2://9999-12-31T23:59:59.999Z");
        org.junit.Assert.assertNotNull(gradeArray53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(timeSeriesDataServiceResponse57);
        org.junit.Assert.assertNull(interpolationTypeList59);
        org.junit.Assert.assertNotNull(timeSeriesDataServiceResponse61);
        org.junit.Assert.assertNull(str63);
        org.junit.Assert.assertNull(str65);
        org.junit.Assert.assertNotNull(approval69);
        org.junit.Assert.assertNull(str71);
        org.junit.Assert.assertNull(str72);
        org.junit.Assert.assertNull(str73);
        org.junit.Assert.assertNull(str76);
        org.junit.Assert.assertNotNull(approval80);
        org.junit.Assert.assertNull(str81);
        org.junit.Assert.assertNull(str84);
        org.junit.Assert.assertNotNull(approvalArray87);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + true + "'", boolean89 == true);
        org.junit.Assert.assertNotNull(timeSeriesDataServiceResponse91);
        org.junit.Assert.assertNotNull(timeSeriesDataServiceResponse93);
    }

    @Test
    public void test42631() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest85.test42631");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DeleteObservationsV2 deleteObservationsV2_0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DeleteObservationsV2();
        java.util.List<java.lang.String> strList1 = deleteObservationsV2_0.SamplingLocationIds;
        deleteObservationsV2_0.MinNumericResultValue = 100.0d;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetSpecimens getSpecimens4 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetSpecimens();
        java.util.List<java.lang.String> strList5 = getSpecimens4.getActivityIds();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetSpecimens getSpecimens7 = getSpecimens4.setSort("MinDuration");
        java.util.List<java.lang.String> strList8 = getSpecimens7.getActivityTypes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_9 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray12 = new java.lang.String[] { "", "" };
        java.util.ArrayList<java.lang.String> strList13 = new java.util.ArrayList<java.lang.String>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList13, strArray12);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_15 = getObservationsV2_9.setDataClassifications((java.util.List<java.lang.String>) strList13);
        java.util.List<java.lang.String> strList16 = getObservationsV2_9.ResultGrades;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary17 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        dischargeSummary17.Reviewer = "";
        java.time.Instant instant20 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        dischargeSummary17.MeasurementTime = instant20;
        getObservationsV2_9.StartResultTime = instant20;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest23 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ControlConditionActivity controlConditionActivity24 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ControlConditionActivity();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ControlCleanedType controlCleanedType25 = null;
        controlConditionActivity24.ControlCleaned = controlCleanedType25;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse27 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant28 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse29 = locationDescriptionListServiceResponse27.setNextToken(instant28);
        controlConditionActivity24.DateCleaned = instant28;
        timeAlignedDataServiceRequest23.QueryFrom = instant28;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_32 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray34 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList35 = new java.util.ArrayList<java.lang.String>();
        boolean boolean36 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList35, strArray34);
        getObservationsV2_32.SpecimenIds = strList35;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags38 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray42 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList43 = new java.util.ArrayList<java.lang.String>();
        boolean boolean44 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList43, strArray42);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags45 = putLocationTags38.setTagUniqueIds(strList43);
        getObservationsV2_32.ActivityIds = strList43;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest47 = timeAlignedDataServiceRequest23.setTimeSeriesOutputUnitIds(strList43);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_48 = getObservationsV2_9.setCollectionMethodIds((java.util.List<java.lang.String>) strList43);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DownchainProcessorListByRatingModelServiceRequest downchainProcessorListByRatingModelServiceRequest49 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DownchainProcessorListByRatingModelServiceRequest();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeTransactionListServiceRequest metadataChangeTransactionListServiceRequest50 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeTransactionListServiceRequest();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostRecurringReport postRecurringReport51 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostRecurringReport();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary52 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        dischargeSummary52.Reviewer = "";
        java.time.Instant instant55 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        dischargeSummary52.MeasurementTime = instant55;
        postRecurringReport51.NextGenerationDate = instant55;
        java.time.Instant instant58 = postRecurringReport51.getNextGenerationDate();
        java.lang.String str59 = com.aquaticinformatics.aquarius.sdk.samples.serializers.InstantSerializer.format(instant58);
        metadataChangeTransactionListServiceRequest50.QueryFrom = instant58;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DownchainProcessorListByRatingModelServiceRequest downchainProcessorListByRatingModelServiceRequest61 = downchainProcessorListByRatingModelServiceRequest49.setQueryTo(instant58);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DownchainProcessorListByRatingModelServiceRequest downchainProcessorListByRatingModelServiceRequest63 = downchainProcessorListByRatingModelServiceRequest49.setRatingModelIdentifier("hi!");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Qualifier qualifier64 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Qualifier();
        java.time.Instant instant65 = qualifier64.DateApplied;
        java.lang.String str66 = qualifier64.User;
        java.lang.String str67 = qualifier64.getIdentifier();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest68 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest();
        java.lang.Object obj69 = timeAlignedDataServiceRequest68.getResponseType();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse70 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant71 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse72 = locationDescriptionListServiceResponse70.setNextToken(instant71);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest73 = timeAlignedDataServiceRequest68.setQueryFrom(instant71);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Qualifier qualifier74 = qualifier64.setDateApplied(instant71);
        java.time.Instant instant75 = qualifier74.getDateApplied();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DownchainProcessorListByRatingModelServiceRequest downchainProcessorListByRatingModelServiceRequest76 = downchainProcessorListByRatingModelServiceRequest49.setQueryFrom(instant75);
        java.time.Instant instant77 = downchainProcessorListByRatingModelServiceRequest76.getQueryFrom();
        getObservationsV2_9.StartResultTime = instant77;
        getSpecimens7.After = instant77;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DeleteObservationsV2 deleteObservationsV2_80 = deleteObservationsV2_0.setStartModificationTime(instant77);
        java.time.Instant instant81 = deleteObservationsV2_80.EndObservedTime;
        java.util.List<java.lang.String> strList82 = deleteObservationsV2_80.getResultGrades();
        java.util.List<java.lang.String> strList83 = deleteObservationsV2_80.ObservedPropertyIds;
        org.junit.Assert.assertNull(strList1);
        org.junit.Assert.assertNull(strList5);
        org.junit.Assert.assertNotNull(getSpecimens7);
        org.junit.Assert.assertNull(strList8);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(getObservationsV2_15);
        org.junit.Assert.assertNull(strList16);
        org.junit.Assert.assertNotNull(instant20);
        org.junit.Assert.assertNotNull(instant28);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse29);
        org.junit.Assert.assertNotNull(strArray34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(strArray42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(putLocationTags45);
        org.junit.Assert.assertNotNull(timeAlignedDataServiceRequest47);
        org.junit.Assert.assertNotNull(getObservationsV2_48);
        org.junit.Assert.assertNotNull(instant55);
        org.junit.Assert.assertNotNull(instant58);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "9999-12-31T23:59:59.999Z" + "'", str59, "9999-12-31T23:59:59.999Z");
        org.junit.Assert.assertNotNull(downchainProcessorListByRatingModelServiceRequest61);
        org.junit.Assert.assertNotNull(downchainProcessorListByRatingModelServiceRequest63);
        org.junit.Assert.assertNull(instant65);
        org.junit.Assert.assertNull(str66);
        org.junit.Assert.assertNull(str67);
        org.junit.Assert.assertNotNull(obj69);
        org.junit.Assert.assertEquals(obj69.toString(), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj69), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj69), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertNotNull(instant71);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse72);
        org.junit.Assert.assertNotNull(timeAlignedDataServiceRequest73);
        org.junit.Assert.assertNotNull(qualifier74);
        org.junit.Assert.assertNotNull(instant75);
        org.junit.Assert.assertNotNull(downchainProcessorListByRatingModelServiceRequest76);
        org.junit.Assert.assertNotNull(instant77);
        org.junit.Assert.assertNotNull(deleteObservationsV2_80);
        org.junit.Assert.assertNull(instant81);
        org.junit.Assert.assertNull(strList82);
        org.junit.Assert.assertNull(strList83);
    }

    @Test
    public void test42632() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest85.test42632");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DeleteProject deleteProject0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DeleteProject();
        java.lang.String str1 = deleteProject0.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DeleteProject deleteProject3 = deleteProject0.setId("/AQUARIUS/Acquisition/v2://9999-12-31T23:59:59.999Z");
        java.lang.String str4 = deleteProject3.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DeleteProject deleteProject6 = deleteProject3.setId("MaxInstant");
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(deleteProject3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "/AQUARIUS/Acquisition/v2://9999-12-31T23:59:59.999Z" + "'", str4, "/AQUARIUS/Acquisition/v2://9999-12-31T23:59:59.999Z");
        org.junit.Assert.assertNotNull(deleteProject6);
    }

    @Test
    public void test42633() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest85.test42633");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.SensorsAndGaugesServiceRequest sensorsAndGaugesServiceRequest0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.SensorsAndGaugesServiceRequest();
        java.util.ArrayList<java.lang.String> strList1 = sensorsAndGaugesServiceRequest0.TagValues;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.SensorsAndGaugesServiceRequest sensorsAndGaugesServiceRequest3 = sensorsAndGaugesServiceRequest0.setLocationIdentifier("multipart/form-data; boundary=****bbcf5f9e-6ccf-4b63-91ab-6e645caf02af****");
        java.util.ArrayList<java.lang.String> strList4 = sensorsAndGaugesServiceRequest0.getLocationUniqueIds();
        java.util.ArrayList<java.lang.String> strList5 = sensorsAndGaugesServiceRequest0.getTagValues();
        org.junit.Assert.assertNull(strList1);
        org.junit.Assert.assertNotNull(sensorsAndGaugesServiceRequest3);
        org.junit.Assert.assertNull(strList4);
        org.junit.Assert.assertNull(strList5);
    }

    @Test
    public void test42634() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest85.test42634");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportProcessorTransactionStatusResponse importProcessorTransactionStatusResponse0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportProcessorTransactionStatusResponse();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportProcessorTransactionStatusType importProcessorTransactionStatusType1 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportProcessorTransactionStatusType.SYSTEM_ERROR;
        importProcessorTransactionStatusResponse0.ImportProcessorTransactionStatus = importProcessorTransactionStatusType1;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportProcessorTransactionStatusType importProcessorTransactionStatusType3 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportProcessorTransactionStatusType.COMPLETED_WITH_ERRORS;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportProcessorTransactionStatusResponse importProcessorTransactionStatusResponse4 = importProcessorTransactionStatusResponse0.setImportProcessorTransactionStatus(importProcessorTransactionStatusType3);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportProcessorTransactionStatusType importProcessorTransactionStatusType5 = importProcessorTransactionStatusResponse0.getImportProcessorTransactionStatus();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportProcessorTransactionStatusType importProcessorTransactionStatusType6 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportProcessorTransactionStatusType.PENDING;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportProcessorTransactionStatusResponse importProcessorTransactionStatusResponse7 = importProcessorTransactionStatusResponse0.setImportProcessorTransactionStatus(importProcessorTransactionStatusType6);
        java.lang.String str8 = importProcessorTransactionStatusResponse7.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportProcessorTransactionStatusResponse importProcessorTransactionStatusResponse9 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportProcessorTransactionStatusResponse();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportProcessorTransactionStatusType importProcessorTransactionStatusType10 = importProcessorTransactionStatusResponse9.getImportProcessorTransactionStatus();
        importProcessorTransactionStatusResponse9.Id = "multipart/form-data; boundary=****bbcf5f9e-6ccf-4b63-91ab-6e645caf02af****";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportProcessorTransactionStatusResponse importProcessorTransactionStatusResponse13 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportProcessorTransactionStatusResponse();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportProcessorTransactionStatusType importProcessorTransactionStatusType14 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportProcessorTransactionStatusType.SYSTEM_ERROR;
        importProcessorTransactionStatusResponse13.ImportProcessorTransactionStatus = importProcessorTransactionStatusType14;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportProcessorTransactionStatusResponse importProcessorTransactionStatusResponse16 = importProcessorTransactionStatusResponse9.setImportProcessorTransactionStatus(importProcessorTransactionStatusType14);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportProcessorTransactionStatusType importProcessorTransactionStatusType17 = importProcessorTransactionStatusResponse9.getImportProcessorTransactionStatus();
        importProcessorTransactionStatusResponse7.ImportProcessorTransactionStatus = importProcessorTransactionStatusType17;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportProcessorTransactionStatusType importProcessorTransactionStatusType19 = importProcessorTransactionStatusResponse7.ImportProcessorTransactionStatus;
        org.junit.Assert.assertTrue("'" + importProcessorTransactionStatusType1 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportProcessorTransactionStatusType.SYSTEM_ERROR + "'", importProcessorTransactionStatusType1.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportProcessorTransactionStatusType.SYSTEM_ERROR));
        org.junit.Assert.assertTrue("'" + importProcessorTransactionStatusType3 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportProcessorTransactionStatusType.COMPLETED_WITH_ERRORS + "'", importProcessorTransactionStatusType3.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportProcessorTransactionStatusType.COMPLETED_WITH_ERRORS));
        org.junit.Assert.assertNotNull(importProcessorTransactionStatusResponse4);
        org.junit.Assert.assertTrue("'" + importProcessorTransactionStatusType5 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportProcessorTransactionStatusType.COMPLETED_WITH_ERRORS + "'", importProcessorTransactionStatusType5.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportProcessorTransactionStatusType.COMPLETED_WITH_ERRORS));
        org.junit.Assert.assertTrue("'" + importProcessorTransactionStatusType6 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportProcessorTransactionStatusType.PENDING + "'", importProcessorTransactionStatusType6.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportProcessorTransactionStatusType.PENDING));
        org.junit.Assert.assertNotNull(importProcessorTransactionStatusResponse7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNull(importProcessorTransactionStatusType10);
        org.junit.Assert.assertTrue("'" + importProcessorTransactionStatusType14 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportProcessorTransactionStatusType.SYSTEM_ERROR + "'", importProcessorTransactionStatusType14.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportProcessorTransactionStatusType.SYSTEM_ERROR));
        org.junit.Assert.assertNotNull(importProcessorTransactionStatusResponse16);
        org.junit.Assert.assertTrue("'" + importProcessorTransactionStatusType17 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportProcessorTransactionStatusType.SYSTEM_ERROR + "'", importProcessorTransactionStatusType17.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportProcessorTransactionStatusType.SYSTEM_ERROR));
        org.junit.Assert.assertTrue("'" + importProcessorTransactionStatusType19 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportProcessorTransactionStatusType.SYSTEM_ERROR + "'", importProcessorTransactionStatusType19.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportProcessorTransactionStatusType.SYSTEM_ERROR));
    }

    @Test
    public void test42635() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest85.test42635");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricConfiguration metricConfiguration0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricConfiguration();
        java.lang.String str1 = metricConfiguration0.getId();
        metricConfiguration0.CustomId = "/AQUARIUS/Acquisition/v2";
        java.lang.Boolean boolean4 = metricConfiguration0.getUseScoreRanges();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Unit unit5 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricConfiguration metricConfiguration6 = metricConfiguration0.setUnit(unit5);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AggregationType aggregationType7 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AggregationType.SUM;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricConfiguration metricConfiguration8 = metricConfiguration0.setAggregationType(aggregationType7);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricConfiguration metricConfiguration9 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricConfiguration();
        java.lang.String str10 = metricConfiguration9.getId();
        metricConfiguration9.CustomId = "/AQUARIUS/Acquisition/v2";
        java.lang.Boolean boolean13 = metricConfiguration9.getUseScoreRanges();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Unit unit14 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricConfiguration metricConfiguration15 = metricConfiguration9.setUnit(unit14);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AggregationType aggregationType16 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AggregationType.SUM;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricConfiguration metricConfiguration17 = metricConfiguration9.setAggregationType(aggregationType16);
        metricConfiguration0.AggregationType = aggregationType16;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Unit unit19 = metricConfiguration0.Unit;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricConfiguration metricConfiguration21 = metricConfiguration0.setIncludeChildren((java.lang.Boolean) false);
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricRange> metricRangeList22 = metricConfiguration21.getMetricRanges();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(boolean4);
        org.junit.Assert.assertNotNull(metricConfiguration6);
        org.junit.Assert.assertTrue("'" + aggregationType7 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AggregationType.SUM + "'", aggregationType7.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AggregationType.SUM));
        org.junit.Assert.assertNotNull(metricConfiguration8);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNull(boolean13);
        org.junit.Assert.assertNotNull(metricConfiguration15);
        org.junit.Assert.assertTrue("'" + aggregationType16 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AggregationType.SUM + "'", aggregationType16.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AggregationType.SUM));
        org.junit.Assert.assertNotNull(metricConfiguration17);
        org.junit.Assert.assertNull(unit19);
        org.junit.Assert.assertNotNull(metricConfiguration21);
        org.junit.Assert.assertNull(metricRangeList22);
    }

    @Test
    public void test42636() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest85.test42636");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetFieldVisit getFieldVisit0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetFieldVisit();
        getFieldVisit0.Id = "/AQUARIUS/Acquisition/v2://9999-12-31T23:59:59.999Z";
        getFieldVisit0.Id = "https";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetFieldVisit getFieldVisit6 = getFieldVisit0.setId("http:///AQUARIUS/Acquisition/v2multipart/form-data; boundary=****44f0772e-c3ca-4316-8e2a-61ec8540d661****/v1/observedproperties/{id}/categoricalvalues");
        java.lang.String str7 = getFieldVisit6.Id;
        java.lang.Object obj8 = getFieldVisit6.getResponseType();
        org.junit.Assert.assertNotNull(getFieldVisit6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "http:///AQUARIUS/Acquisition/v2multipart/form-data; boundary=****44f0772e-c3ca-4316-8e2a-61ec8540d661****/v1/observedproperties/{id}/categoricalvalues" + "'", str7, "http:///AQUARIUS/Acquisition/v2multipart/form-data; boundary=****44f0772e-c3ca-4316-8e2a-61ec8540d661****/v1/observedproperties/{id}/categoricalvalues");
        org.junit.Assert.assertNotNull(obj8);
        org.junit.Assert.assertEquals(obj8.toString(), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$FieldVisit");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj8), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$FieldVisit");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj8), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$FieldVisit");
    }

    @Test
    public void test42637() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest85.test42637");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutParameter putParameter0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutParameter();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ParameterBase parameterBase2 = putParameter0.setUnitGroupIdentifier("/AQUARIUS/Provisioning/v1");
        java.lang.String str3 = putParameter0.getRoundingSpec();
        java.lang.String str4 = putParameter0.getUnitGroupIdentifier();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ParameterBase parameterBase6 = putParameter0.setIdentifier("multipart/form-data; boundary=****44f0772e-c3ca-4316-8e2a-61ec8540d661****");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ParameterBase parameterBase8 = parameterBase6.setUnitIdentifier("http://MaxDurationhttp/json/reply/Float://multipart/form-data; boundary=****231224c4-98ce-4e30-bd65-1d25287c4abe****");
        org.junit.Assert.assertNotNull(parameterBase2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "/AQUARIUS/Provisioning/v1" + "'", str4, "/AQUARIUS/Provisioning/v1");
        org.junit.Assert.assertNotNull(parameterBase6);
        org.junit.Assert.assertNotNull(parameterBase8);
    }

    @Test
    public void test42638() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest85.test42638");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Role role0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Role();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Role role2 = role0.setCanRemoveAppendConfigurations((java.lang.Boolean) true);
        role0.CanAddData = true;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Role role6 = role0.setCanAddOrRemoveLocations((java.lang.Boolean) false);
        java.lang.Boolean boolean7 = role6.CanAddData;
        org.junit.Assert.assertNotNull(role2);
        org.junit.Assert.assertNotNull(role6);
        org.junit.Assert.assertEquals("'" + boolean7 + "' != '" + true + "'", boolean7, true);
    }

    @Test
    public void test42639() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest85.test42639");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceResponse timeAlignedDataServiceResponse0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceResponse();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedPoint[] timeAlignedPointArray1 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedPoint[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedPoint> timeAlignedPointList2 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedPoint>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedPoint>) timeAlignedPointList2, timeAlignedPointArray1);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceResponse timeAlignedDataServiceResponse4 = timeAlignedDataServiceResponse0.setPoints(timeAlignedPointList2);
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedTimeSeriesInfo> timeAlignedTimeSeriesInfoList5 = timeAlignedDataServiceResponse4.getTimeSeries();
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedTimeSeriesInfo> timeAlignedTimeSeriesInfoList6 = timeAlignedDataServiceResponse4.getTimeSeries();
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedPoint> timeAlignedPointList7 = timeAlignedDataServiceResponse4.getPoints();
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedTimeSeriesInfo> timeAlignedTimeSeriesInfoList8 = timeAlignedDataServiceResponse4.TimeSeries;
        org.junit.Assert.assertNotNull(timeAlignedPointArray1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(timeAlignedDataServiceResponse4);
        org.junit.Assert.assertNull(timeAlignedTimeSeriesInfoList5);
        org.junit.Assert.assertNull(timeAlignedTimeSeriesInfoList6);
        org.junit.Assert.assertNotNull(timeAlignedPointList7);
        org.junit.Assert.assertNull(timeAlignedTimeSeriesInfoList8);
    }

    @Test
    public void test42640() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest85.test42640");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity pointVelocityDischargeActivity0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay1 = pointVelocityDischargeActivity0.getVelocityAverage();
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Vertical> verticalList2 = pointVelocityDischargeActivity0.Verticals;
        java.lang.String str3 = pointVelocityDischargeActivity0.SerialNumber;
        java.lang.Boolean boolean4 = pointVelocityDischargeActivity0.isMeterInspectedAfter();
        pointVelocityDischargeActivity0.MeterInspectedBefore = true;
        java.lang.Integer int7 = pointVelocityDischargeActivity0.NumberOfPanels;
        org.junit.Assert.assertNull(quantityWithDisplay1);
        org.junit.Assert.assertNull(verticalList2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(boolean4);
        org.junit.Assert.assertNull(int7);
    }

    @Test
    public void test42641() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest85.test42641");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabInstructionTemplate labInstructionTemplate0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabInstructionTemplate();
        java.lang.String str1 = labInstructionTemplate0.HoldingTime;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSchedule putSchedule2 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSchedule();
        java.time.OffsetDateTime offsetDateTime3 = putSchedule2.StartDate;
        java.time.OffsetDateTime offsetDateTime4 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSchedule putSchedule5 = putSchedule2.setEndDate(offsetDateTime4);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes6 = putSchedule5.AuditAttributes;
        java.time.OffsetDateTime offsetDateTime7 = null;
        putSchedule5.LastGenerationDate = offsetDateTime7;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.RecurrenceDayMonthlyType recurrenceDayMonthlyType9 = putSchedule5.RecurrenceDayMonthly;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedFieldResult plannedFieldResult10 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedFieldResult();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes11 = plannedFieldResult10.AuditAttributes;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails12 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails14 = labResultDetails12.setAnalysisComment("/AQUARIUS/Acquisition/v2");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes15 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails16 = labResultDetails14.setAuditAttributes(auditAttributes15);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedFieldResult plannedFieldResult17 = plannedFieldResult10.setAuditAttributes(auditAttributes15);
        putSchedule5.AuditAttributes = auditAttributes15;
        labInstructionTemplate0.AuditAttributes = auditAttributes15;
        java.lang.String str20 = labInstructionTemplate0.PreparationMethod;
        java.lang.String str21 = labInstructionTemplate0.HoldingTime;
        java.lang.String str22 = labInstructionTemplate0.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes23 = labInstructionTemplate0.AuditAttributes;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(offsetDateTime3);
        org.junit.Assert.assertNotNull(putSchedule5);
        org.junit.Assert.assertNull(auditAttributes6);
        org.junit.Assert.assertNull(recurrenceDayMonthlyType9);
        org.junit.Assert.assertNull(auditAttributes11);
        org.junit.Assert.assertNotNull(labResultDetails14);
        org.junit.Assert.assertNotNull(labResultDetails16);
        org.junit.Assert.assertNotNull(plannedFieldResult17);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertNotNull(auditAttributes23);
    }

    @Test
    public void test42642() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest85.test42642");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDataServiceResponse timeSeriesDataServiceResponse0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDataServiceResponse();
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.InterpolationType> interpolationTypeList1 = timeSeriesDataServiceResponse0.getInterpolationTypes();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.StatisticalTimeRange statisticalTimeRange2 = null;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDataServiceResponse timeSeriesDataServiceResponse3 = timeSeriesDataServiceResponse0.setTimeRange(statisticalTimeRange2);
        java.lang.String str4 = timeSeriesDataServiceResponse0.LocationIdentifier;
        timeSeriesDataServiceResponse0.Unit = "/AQUARIUS/Acquisition/v2://9999-12-31T23:59:59.999Z";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDataServiceResponse timeSeriesDataServiceResponse7 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDataServiceResponse();
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.InterpolationType> interpolationTypeList8 = timeSeriesDataServiceResponse7.InterpolationTypes;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDataServiceResponse timeSeriesDataServiceResponse10 = timeSeriesDataServiceResponse7.setLabel("/AQUARIUS");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDataServiceResponse timeSeriesDataServiceResponse12 = timeSeriesDataServiceResponse10.setUniqueId("multipart/form-data; boundary=****bbcf5f9e-6ccf-4b63-91ab-6e645caf02af****");
        timeSeriesDataServiceResponse10.ResponseVersion = 2;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDataServiceResponse timeSeriesDataServiceResponse15 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDataServiceResponse();
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.InterpolationType> interpolationTypeList16 = timeSeriesDataServiceResponse15.InterpolationTypes;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Note note17 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Note();
        java.time.Instant instant18 = note17.StartTime;
        note17.NoteText = "'.'SSSSSSS";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Note[] noteArray21 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Note[] { note17 };
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Note> noteList22 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Note>();
        boolean boolean23 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Note>) noteList22, noteArray21);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDataServiceResponse timeSeriesDataServiceResponse24 = timeSeriesDataServiceResponse15.setNotes(noteList22);
        timeSeriesDataServiceResponse10.Notes = noteList22;
        timeSeriesDataServiceResponse0.Notes = noteList22;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDataServiceResponse timeSeriesDataServiceResponse28 = timeSeriesDataServiceResponse0.setLabel("multipart/form-data; boundary=****453bbbc7-a235-4d67-9e25-19f5ad16bf76****");
        org.junit.Assert.assertNull(interpolationTypeList1);
        org.junit.Assert.assertNotNull(timeSeriesDataServiceResponse3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(interpolationTypeList8);
        org.junit.Assert.assertNotNull(timeSeriesDataServiceResponse10);
        org.junit.Assert.assertNotNull(timeSeriesDataServiceResponse12);
        org.junit.Assert.assertNull(interpolationTypeList16);
        org.junit.Assert.assertNull(instant18);
        org.junit.Assert.assertNotNull(noteArray21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(timeSeriesDataServiceResponse24);
        org.junit.Assert.assertNotNull(timeSeriesDataServiceResponse28);
    }

    @Test
    public void test42643() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest85.test42643");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Reading reading0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Reading();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay1 = reading0.getValue();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Reading reading3 = reading0.setParameterId("hi!");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Reading reading5 = reading3.setMonitoringMethod("'.'SSSSSSS");
        reading3.ReadingQualifier = "https";
        java.lang.String str8 = reading3.getModel();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Reading reading9 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Reading();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay10 = reading9.getValue();
        reading9.IsValid = false;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Reading reading14 = reading9.setMonitoringMethod("9999-12-31T23:59:59.9999999Z");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Reading reading16 = reading9.setParameterId("/AQUARIUS/Acquisition/v2");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ReadingType readingType17 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ReadingType.AfterCalibration;
        reading16.ReadingType = readingType17;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Reading reading19 = reading3.setReadingType(readingType17);
        org.junit.Assert.assertNull(doubleWithDisplay1);
        org.junit.Assert.assertNotNull(reading3);
        org.junit.Assert.assertNotNull(reading5);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNull(doubleWithDisplay10);
        org.junit.Assert.assertNotNull(reading14);
        org.junit.Assert.assertNotNull(reading16);
        org.junit.Assert.assertTrue("'" + readingType17 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ReadingType.AfterCalibration + "'", readingType17.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ReadingType.AfterCalibration));
        org.junit.Assert.assertNotNull(reading19);
    }

    @Test
    public void test42644() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest85.test42644");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutAttachment putAttachment0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutAttachment();
        java.lang.String str1 = putAttachment0.FileName;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutAttachment putAttachment3 = putAttachment0.setComment("http");
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(putAttachment3);
    }

    @Test
    public void test42645() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest85.test42645");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostSession postSession0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostSession();
        java.lang.Object obj1 = postSession0.getResponseType();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostSession postSession3 = postSession0.setEncryptedPassword("hi!");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostSession postSession5 = postSession3.setLocale("/AQUARIUS");
        java.lang.String str6 = postSession3.Locale;
        postSession3.Locale = "POST";
        java.lang.String str9 = postSession3.Username;
        postSession3.Username = "https";
        org.junit.Assert.assertNotNull(obj1);
        org.junit.Assert.assertEquals(obj1.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj1), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj1), "class java.lang.String");
        org.junit.Assert.assertNotNull(postSession3);
        org.junit.Assert.assertNotNull(postSession5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "/AQUARIUS" + "'", str6, "/AQUARIUS");
        org.junit.Assert.assertNull(str9);
    }

    @Test
    public void test42646() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest85.test42646");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenNestedInActivity specimenNestedInActivity0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenNestedInActivity();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupSimple analyticalGroupSimple1 = specimenNestedInActivity0.AnalyticalGroup;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenNestedInActivity specimenNestedInActivity3 = specimenNestedInActivity0.setName("");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenNestedInActivity specimenNestedInActivity5 = specimenNestedInActivity0.setFiltered((java.lang.Boolean) true);
        java.lang.Boolean boolean6 = specimenNestedInActivity0.getFiltered();
        specimenNestedInActivity0.FiltrationComment = "0001-01-01T00:00:00.000Z";
        java.lang.String str9 = specimenNestedInActivity0.getId();
        org.junit.Assert.assertNull(analyticalGroupSimple1);
        org.junit.Assert.assertNotNull(specimenNestedInActivity3);
        org.junit.Assert.assertNotNull(specimenNestedInActivity5);
        org.junit.Assert.assertEquals("'" + boolean6 + "' != '" + true + "'", boolean6, true);
        org.junit.Assert.assertNull(str9);
    }

    @Test
    public void test42647() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest85.test42647");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationNestedInSpecimen observationNestedInSpecimen0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationNestedInSpecimen();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultStatus resultStatus1 = observationNestedInSpecimen0.ResultStatus;
        java.lang.String str2 = observationNestedInSpecimen0.Id;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabInstruction labInstruction3 = null;
        observationNestedInSpecimen0.LabInstruction = labInstruction3;
        java.lang.String str5 = observationNestedInSpecimen0.Id;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.NumericResult numericResult6 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.NumericResult();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SampleFractionType sampleFractionType7 = numericResult6.getSampleFraction();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationNestedInSpecimen observationNestedInSpecimen8 = observationNestedInSpecimen0.setNumericResult(numericResult6);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.NumericResult numericResult10 = numericResult6.setRoundingSpecification("");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SampleFractionType sampleFractionType11 = numericResult6.SampleFraction;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes12 = numericResult6.AuditAttributes;
        org.junit.Assert.assertNull(resultStatus1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(sampleFractionType7);
        org.junit.Assert.assertNotNull(observationNestedInSpecimen8);
        org.junit.Assert.assertNotNull(numericResult10);
        org.junit.Assert.assertNull(sampleFractionType11);
        org.junit.Assert.assertNull(auditAttributes12);
    }

    @Test
    public void test42648() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest85.test42648");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutDetectioncondition putDetectioncondition0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutDetectioncondition();
        java.lang.String str1 = putDetectioncondition0.CustomId;
        java.lang.String str2 = putDetectioncondition0.Name;
        putDetectioncondition0.Description = "2021.8.9990";
        java.lang.String str5 = putDetectioncondition0.CustomId;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(str5);
    }

    @Test
    public void test42649() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest85.test42649");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.TimeSeries timeSeries0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.TimeSeries();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.TimeSeries timeSeries2 = timeSeries0.setLocationUniqueId("MinInstant");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.TimeSeriesType timeSeriesType3 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.TimeSeriesType.Reflected;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.TimeSeries timeSeries4 = timeSeries2.setTimeSeriesType(timeSeriesType3);
        java.time.Instant instant5 = timeSeries2.getLastModifiedTime();
        java.lang.String str6 = timeSeries2.Description;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.TimeSeries timeSeries8 = timeSeries2.setLabel("multipart/form-data; boundary=****231224c4-98ce-4e30-bd65-1d25287c4abe****");
        java.lang.String str9 = timeSeries8.Unit;
        org.junit.Assert.assertNotNull(timeSeries2);
        org.junit.Assert.assertTrue("'" + timeSeriesType3 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.TimeSeriesType.Reflected + "'", timeSeriesType3.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.TimeSeriesType.Reflected));
        org.junit.Assert.assertNotNull(timeSeries4);
        org.junit.Assert.assertNull(instant5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNotNull(timeSeries8);
        org.junit.Assert.assertNull(str9);
    }

    @Test
    public void test42650() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest85.test42650");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RecurringReport recurringReport0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RecurringReport();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RecurringReport recurringReport2 = recurringReport0.setRecurrencePeriod("'.'SSSSSSS");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RecurringReport recurringReport4 = recurringReport0.setUniqueId("http");
        java.lang.String str5 = recurringReport0.getRecurrencePeriod();
        recurringReport0.UniqueId = "yyyy'-'MM'-'dd'T'HH':'mm':'ss";
        org.junit.Assert.assertNotNull(recurringReport2);
        org.junit.Assert.assertNotNull(recurringReport4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "'.'SSSSSSS" + "'", str5, "'.'SSSSSSS");
    }

    @Test
    public void test42651() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest85.test42651");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationExportIIV2 getObservationExportIIV2_0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationExportIIV2();
        java.util.List<java.lang.String> strList1 = getObservationExportIIV2_0.getCollectionMethodIds();
        java.lang.String str2 = getObservationExportIIV2_0.getDepthUnitCustomId();
        java.time.Instant instant3 = getObservationExportIIV2_0.EndObservedTime;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObject importItemObject4 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObject();
        java.util.List<java.lang.String> strList5 = importItemObject4.getWarningMessages();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetAnalysisMethods getAnalysisMethods6 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetAnalysisMethods();
        java.lang.String str7 = getAnalysisMethods6.Context;
        java.util.List<java.lang.String> strList8 = getAnalysisMethods6.ObservedPropertyIds;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags9 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray13 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList14 = new java.util.ArrayList<java.lang.String>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList14, strArray13);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags16 = putLocationTags9.setTagUniqueIds(strList14);
        java.util.ArrayList<java.lang.String> strList17 = putLocationTags16.TagUniqueIds;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetAnalysisMethods getAnalysisMethods18 = getAnalysisMethods6.setObservedPropertyIds((java.util.List<java.lang.String>) strList17);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObservedProperty importItemObservedProperty19 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObservedProperty();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Reading reading20 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Reading();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay21 = reading20.getValue();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Reading reading23 = reading20.setParameterId("hi!");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Reading reading25 = reading23.setModel("MaxInstant");
        java.lang.Integer int26 = reading25.getGradeCode();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutBulkEditResultGradesV2 putBulkEditResultGradesV2_27 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutBulkEditResultGradesV2();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeField extendedAttributeField28 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeField();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeField extendedAttributeField30 = extendedAttributeField28.setDisplayName("");
        java.lang.Boolean boolean31 = extendedAttributeField30.CanBeEmpty;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest32 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest();
        java.lang.Object obj33 = timeAlignedDataServiceRequest32.getResponseType();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_34 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray37 = new java.lang.String[] { "", "" };
        java.util.ArrayList<java.lang.String> strList38 = new java.util.ArrayList<java.lang.String>();
        boolean boolean39 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList38, strArray37);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_40 = getObservationsV2_34.setDataClassifications((java.util.List<java.lang.String>) strList38);
        getObservationsV2_40.DepthUnitCustomId = "hi!";
        java.lang.String str43 = getObservationsV2_40.CustomId;
        java.util.List<java.lang.String> strList44 = getObservationsV2_40.getSearch();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_45 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray47 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList48 = new java.util.ArrayList<java.lang.String>();
        boolean boolean49 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList48, strArray47);
        getObservationsV2_45.SpecimenIds = strList48;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags51 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray55 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList56 = new java.util.ArrayList<java.lang.String>();
        boolean boolean57 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList56, strArray55);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags58 = putLocationTags51.setTagUniqueIds(strList56);
        getObservationsV2_45.QualityControlTypes = strList56;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_60 = getObservationsV2_40.setMedia((java.util.List<java.lang.String>) strList56);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_61 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String str62 = getObservationsV2_61.getCustomId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_63 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray65 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList66 = new java.util.ArrayList<java.lang.String>();
        boolean boolean67 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList66, strArray65);
        getObservationsV2_63.SpecimenIds = strList66;
        getObservationsV2_61.ProjectIds = strList66;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_70 = getObservationsV2_40.setObservedPropertyIds((java.util.List<java.lang.String>) strList66);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest71 = timeAlignedDataServiceRequest32.setTimeSeriesOutputUnitIds(strList66);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeField extendedAttributeField72 = extendedAttributeField30.setValueOptions((java.util.List<java.lang.String>) strList66);
        putBulkEditResultGradesV2_27.AnalysisMethodSimpleIds = strList66;
        reading25.ReadingQualifiers = strList66;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObservedProperty importItemObservedProperty75 = importItemObservedProperty19.setFields((java.util.List<java.lang.String>) strList66);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetAnalysisMethods getAnalysisMethods76 = getAnalysisMethods6.setObservedPropertyIds((java.util.List<java.lang.String>) strList66);
        importItemObject4.WarningMessages = strList66;
        getObservationExportIIV2_0.LabResultLaboratoryIds = strList66;
        java.lang.String str79 = getObservationExportIIV2_0.ImportHistoryEventId;
        java.util.List<java.lang.String> strList80 = getObservationExportIIV2_0.Ids;
        java.util.List<java.lang.String> strList81 = getObservationExportIIV2_0.getResultGrades();
        java.util.List<java.lang.String> strList82 = getObservationExportIIV2_0.LabReportIds;
        java.util.List<java.lang.String> strList83 = getObservationExportIIV2_0.getTaxonIds();
        org.junit.Assert.assertNull(strList1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(instant3);
        org.junit.Assert.assertNull(strList5);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(strList8);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(putLocationTags16);
        org.junit.Assert.assertNotNull(strList17);
        org.junit.Assert.assertNotNull(getAnalysisMethods18);
        org.junit.Assert.assertNull(doubleWithDisplay21);
        org.junit.Assert.assertNotNull(reading23);
        org.junit.Assert.assertNotNull(reading25);
        org.junit.Assert.assertNull(int26);
        org.junit.Assert.assertNotNull(extendedAttributeField30);
        org.junit.Assert.assertNull(boolean31);
        org.junit.Assert.assertNotNull(obj33);
        org.junit.Assert.assertEquals(obj33.toString(), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj33), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj33), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(getObservationsV2_40);
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertNull(strList44);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(strArray55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertNotNull(putLocationTags58);
        org.junit.Assert.assertNotNull(getObservationsV2_60);
        org.junit.Assert.assertNull(str62);
        org.junit.Assert.assertNotNull(strArray65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertNotNull(getObservationsV2_70);
        org.junit.Assert.assertNotNull(timeAlignedDataServiceRequest71);
        org.junit.Assert.assertNotNull(extendedAttributeField72);
        org.junit.Assert.assertNotNull(importItemObservedProperty75);
        org.junit.Assert.assertNotNull(getAnalysisMethods76);
        org.junit.Assert.assertNull(str79);
        org.junit.Assert.assertNull(strList80);
        org.junit.Assert.assertNull(strList81);
        org.junit.Assert.assertNull(strList82);
        org.junit.Assert.assertNull(strList83);
    }

    @Test
    public void test42652() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest85.test42652");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutObservationV2 putObservationV2_0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutObservationV2();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty observedProperty1 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutObservationV2 putObservationV2_2 = putObservationV2_0.setObservedProperty(observedProperty1);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Activity activity3 = putObservationV2_2.Activity;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.NullMeasureQualifier nullMeasureQualifier4 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutObservationV2 putObservationV2_5 = putObservationV2_2.setNullMeasureQualifier(nullMeasureQualifier4);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabInstruction labInstruction6 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabInstruction();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod7 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabInstruction labInstruction8 = labInstruction6.setAnalysisMethod(analysisMethod7);
        putObservationV2_2.LabInstruction = labInstruction6;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.FieldVisit fieldVisit10 = putObservationV2_2.getFieldVisit();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSpecimen putSpecimen11 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSpecimen();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Activity activity12 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Activity();
        putSpecimen11.Activity = activity12;
        java.lang.String str14 = activity12.Id;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ActivityType activityType15 = activity12.getType();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Device device16 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Device();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Device device18 = device16.setType("/AQUARIUS/Acquisition/v2");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Device device20 = device18.setType("/AQUARIUS/Acquisition/v2://9999-12-31T23:59:59.999Z");
        java.lang.String str21 = device18.getType();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Activity activity22 = activity12.setDevice(device18);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Activity activity24 = activity22.setCustomId("ZZZZZ");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ActivityWithDetails activityWithDetails25 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ActivityWithDetails();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Medium medium26 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Medium();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MediumSystemCodeType mediumSystemCodeType27 = medium26.SystemCode;
        medium26.CustomId = "http://MaxDurationhttp/json/reply/Integer";
        activityWithDetails25.Medium = medium26;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes31 = medium26.getAuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Activity activity32 = activity22.setMedium(medium26);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutObservationV2 putObservationV2_33 = putObservationV2_2.setActivity(activity22);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DataClassificationType dataClassificationType34 = putObservationV2_33.DataClassification;
        org.junit.Assert.assertNotNull(putObservationV2_2);
        org.junit.Assert.assertNull(activity3);
        org.junit.Assert.assertNotNull(putObservationV2_5);
        org.junit.Assert.assertNotNull(labInstruction8);
        org.junit.Assert.assertNull(fieldVisit10);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNull(activityType15);
        org.junit.Assert.assertNotNull(device18);
        org.junit.Assert.assertNotNull(device20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "/AQUARIUS/Acquisition/v2://9999-12-31T23:59:59.999Z" + "'", str21, "/AQUARIUS/Acquisition/v2://9999-12-31T23:59:59.999Z");
        org.junit.Assert.assertNotNull(activity22);
        org.junit.Assert.assertNotNull(activity24);
        org.junit.Assert.assertNull(mediumSystemCodeType27);
        org.junit.Assert.assertNull(auditAttributes31);
        org.junit.Assert.assertNotNull(activity32);
        org.junit.Assert.assertNotNull(putObservationV2_33);
        org.junit.Assert.assertNull(dataClassificationType34);
    }

    @Test
    public void test42653() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest85.test42653");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemSpecimen importItemSpecimen0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemSpecimen();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemStatusType importItemStatusType1 = importItemSpecimen0.Status;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemSpecimen importItemSpecimen3 = importItemSpecimen0.setRowId("MinDuration");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitDataByLocationServiceRequest fieldVisitDataByLocationServiceRequest4 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitDataByLocationServiceRequest();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitDataByLocationServiceRequest fieldVisitDataByLocationServiceRequest6 = fieldVisitDataByLocationServiceRequest4.setIncludeNodeDetails((java.lang.Boolean) true);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags7 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray11 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList12 = new java.util.ArrayList<java.lang.String>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList12, strArray11);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags14 = putLocationTags7.setTagUniqueIds(strList12);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitDataByLocationServiceRequest fieldVisitDataByLocationServiceRequest15 = fieldVisitDataByLocationServiceRequest6.setParameters(strList12);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemSpecimen importItemSpecimen16 = importItemSpecimen0.setFields((java.util.List<java.lang.String>) strList12);
        java.lang.String str17 = importItemSpecimen16.RowId;
        org.junit.Assert.assertNull(importItemStatusType1);
        org.junit.Assert.assertNotNull(importItemSpecimen3);
        org.junit.Assert.assertNotNull(fieldVisitDataByLocationServiceRequest6);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(putLocationTags14);
        org.junit.Assert.assertNotNull(fieldVisitDataByLocationServiceRequest15);
        org.junit.Assert.assertNotNull(importItemSpecimen16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "MinDuration" + "'", str17, "MinDuration");
    }

    @Test
    public void test42654() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest85.test42654");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.FieldDataPlugin fieldDataPlugin0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.FieldDataPlugin();
        java.lang.String str1 = fieldDataPlugin0.getAssemblyQualifiedTypeName();
        java.lang.Integer int2 = fieldDataPlugin0.getPluginPriority();
        java.lang.String str3 = fieldDataPlugin0.AssemblyQualifiedTypeName;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.FieldDataPlugin fieldDataPlugin5 = fieldDataPlugin0.setPluginPriority((java.lang.Integer) 100);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.FieldDataPlugin fieldDataPlugin7 = fieldDataPlugin0.setPluginFolderName("multipart/form-data; boundary=****f2ce0d54-dac7-4cd0-b74f-1024089261f9****");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.FieldDataPlugin fieldDataPlugin9 = fieldDataPlugin7.setUniqueId("multipart/form-data; boundary=****bbcf5f9e-6ccf-4b63-91ab-6e645caf02af****");
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(int2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(fieldDataPlugin5);
        org.junit.Assert.assertNotNull(fieldDataPlugin7);
        org.junit.Assert.assertNotNull(fieldDataPlugin9);
    }

    @Test
    public void test42655() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest85.test42655");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesApprovalsTransactionListServiceRequest timeSeriesApprovalsTransactionListServiceRequest0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesApprovalsTransactionListServiceRequest();
        java.lang.String str1 = timeSeriesApprovalsTransactionListServiceRequest0.getTimeSeriesUniqueId();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ControlConditionActivity controlConditionActivity2 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ControlConditionActivity();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ControlCleanedType controlCleanedType3 = null;
        controlConditionActivity2.ControlCleaned = controlCleanedType3;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse5 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant6 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse7 = locationDescriptionListServiceResponse5.setNextToken(instant6);
        controlConditionActivity2.DateCleaned = instant6;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesApprovalsTransactionListServiceRequest timeSeriesApprovalsTransactionListServiceRequest9 = timeSeriesApprovalsTransactionListServiceRequest0.setQueryTo(instant6);
        java.time.Instant instant10 = timeSeriesApprovalsTransactionListServiceRequest0.QueryTo;
        java.time.Instant instant11 = timeSeriesApprovalsTransactionListServiceRequest0.QueryFrom;
        java.lang.Object obj12 = timeSeriesApprovalsTransactionListServiceRequest0.getResponseType();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesApprovalsTransactionListServiceRequest timeSeriesApprovalsTransactionListServiceRequest14 = timeSeriesApprovalsTransactionListServiceRequest0.setTimeSeriesUniqueId("multipart/form-data; boundary=****ebf59e0e-2d1f-43bc-996f-3c628a80f696****");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DeleteFieldVisits deleteFieldVisits15 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DeleteFieldVisits();
        java.lang.String str16 = deleteFieldVisits15.Sort;
        deleteFieldVisits15.Sort = "9999-12-31T23:59:59.999Z";
        java.time.Instant instant19 = deleteFieldVisits15.EndStartTime;
        java.util.List<java.lang.String> strList20 = deleteFieldVisits15.getPlanningStatuses();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_21 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.util.List<java.lang.String> strList22 = getObservationsV2_21.SamplingContextTagIds;
        java.time.Instant instant23 = getObservationsV2_21.getEndModificationTime();
        java.util.List<java.lang.String> strList24 = getObservationsV2_21.Media;
        java.util.List<java.lang.String> strList25 = getObservationsV2_21.ActivityTypes;
        java.util.List<java.lang.String> strList26 = getObservationsV2_21.getLabResultLaboratoryIds();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_27 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray29 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList30 = new java.util.ArrayList<java.lang.String>();
        boolean boolean31 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList30, strArray29);
        getObservationsV2_27.SpecimenIds = strList30;
        getObservationsV2_21.LabResultLabAnalysisMethodIds = strList30;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DeleteFieldVisits deleteFieldVisits34 = deleteFieldVisits15.setFieldTripIds((java.util.List<java.lang.String>) strList30);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetChartDataV2 getChartDataV2_35 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetChartDataV2();
        java.lang.String str36 = getChartDataV2_35.getActivityCustomId();
        java.lang.String str37 = getChartDataV2_35.DepthUnitId;
        java.util.List<java.lang.String> strList38 = getChartDataV2_35.SpecimenIds;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetChartDataV2 getChartDataV2_39 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetChartDataV2();
        getChartDataV2_39.DetectionCondition = "/AQUARIUS/Acquisition/v2://9999-12-31T23:59:59.999Z";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.GageHeightReading gageHeightReading42 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.GageHeightReading();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ControlConditionActivity controlConditionActivity43 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ControlConditionActivity();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ControlCleanedType controlCleanedType44 = null;
        controlConditionActivity43.ControlCleaned = controlCleanedType44;
        java.lang.String str46 = controlConditionActivity43.getComments();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary47 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        dischargeSummary47.Reviewer = "";
        java.time.Instant instant50 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        dischargeSummary47.MeasurementTime = instant50;
        controlConditionActivity43.DateCleaned = instant50;
        gageHeightReading42.ReadingTime = instant50;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay54 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay56 = doubleWithDisplay54.setNumeric((java.lang.Double) 10.0d);
        java.lang.String str57 = doubleWithDisplay56.getDisplay();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.GageHeightReading gageHeightReading58 = gageHeightReading42.setGageHeight(doubleWithDisplay56);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetChartDataV2 getChartDataV2_59 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetChartDataV2();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary60 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary62 = dischargeSummary60.setMeanGageHeightMethod("hi!");
        java.lang.String str63 = dischargeSummary62.MeasurementId;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary65 = dischargeSummary62.setDischargeMethod("yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSSSSSZZZZZ");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CalibrationCheck calibrationCheck66 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CalibrationCheck();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CalibrationCheckType calibrationCheckType67 = calibrationCheck66.getCalibrationCheckType();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay68 = calibrationCheck66.Value;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse69 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary70 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary72 = dischargeSummary70.setPublish((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse73 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant74 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse75 = locationDescriptionListServiceResponse73.setNextToken(instant74);
        dischargeSummary70.MeasurementTime = instant74;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse77 = locationDescriptionListServiceResponse69.setNextToken(instant74);
        java.time.Instant instant78 = locationDescriptionListServiceResponse69.getNextToken();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CalibrationCheck calibrationCheck79 = calibrationCheck66.setTime(instant78);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary80 = dischargeSummary62.setMeasurementTime(instant78);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetChartDataV2 getChartDataV2_81 = getChartDataV2_59.setStartResultTime(instant78);
        gageHeightReading42.ReadingTime = instant78;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetChartDataV2 getChartDataV2_83 = getChartDataV2_39.setStartObservedTime(instant78);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetChartDataV2 getChartDataV2_84 = getChartDataV2_35.setEndResultTime(instant78);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DeleteFieldVisits deleteFieldVisits85 = deleteFieldVisits15.setEndStartTime(instant78);
        timeSeriesApprovalsTransactionListServiceRequest0.QueryTo = instant78;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(instant6);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse7);
        org.junit.Assert.assertNotNull(timeSeriesApprovalsTransactionListServiceRequest9);
        org.junit.Assert.assertNotNull(instant10);
        org.junit.Assert.assertNull(instant11);
        org.junit.Assert.assertNotNull(obj12);
        org.junit.Assert.assertEquals(obj12.toString(), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeSeriesApprovalsTransactionListServiceResponse");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj12), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeSeriesApprovalsTransactionListServiceResponse");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj12), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeSeriesApprovalsTransactionListServiceResponse");
        org.junit.Assert.assertNotNull(timeSeriesApprovalsTransactionListServiceRequest14);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNull(instant19);
        org.junit.Assert.assertNull(strList20);
        org.junit.Assert.assertNull(strList22);
        org.junit.Assert.assertNull(instant23);
        org.junit.Assert.assertNull(strList24);
        org.junit.Assert.assertNull(strList25);
        org.junit.Assert.assertNull(strList26);
        org.junit.Assert.assertNotNull(strArray29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(deleteFieldVisits34);
        org.junit.Assert.assertNull(str36);
        org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertNull(strList38);
        org.junit.Assert.assertNull(str46);
        org.junit.Assert.assertNotNull(instant50);
        org.junit.Assert.assertNotNull(doubleWithDisplay56);
        org.junit.Assert.assertNull(str57);
        org.junit.Assert.assertNotNull(gageHeightReading58);
        org.junit.Assert.assertNotNull(dischargeSummary62);
        org.junit.Assert.assertNull(str63);
        org.junit.Assert.assertNotNull(dischargeSummary65);
        org.junit.Assert.assertNull(calibrationCheckType67);
        org.junit.Assert.assertNull(doubleWithDisplay68);
        org.junit.Assert.assertNotNull(dischargeSummary72);
        org.junit.Assert.assertNotNull(instant74);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse75);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse77);
        org.junit.Assert.assertNotNull(instant78);
        org.junit.Assert.assertNotNull(calibrationCheck79);
        org.junit.Assert.assertNotNull(dischargeSummary80);
        org.junit.Assert.assertNotNull(getChartDataV2_81);
        org.junit.Assert.assertNotNull(getChartDataV2_83);
        org.junit.Assert.assertNotNull(getChartDataV2_84);
        org.junit.Assert.assertNotNull(deleteFieldVisits85);
    }

    @Test
    public void test42656() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest85.test42656");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.LocationType locationType0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.LocationType();
        java.util.List<java.lang.String> strList1 = locationType0.ExtendedAttributeDefinitionIds;
        java.util.List<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeField> extendedAttributeFieldList2 = locationType0.ExtendedAttributeFields;
        java.lang.String str3 = locationType0.UniqueId;
        java.lang.String str4 = locationType0.AttributeTableName;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.LocationType locationType6 = locationType0.setAttributeTableName("multipart/form-data; boundary=****44f0772e-c3ca-4316-8e2a-61ec8540d661****");
        org.junit.Assert.assertNull(strList1);
        org.junit.Assert.assertNull(extendedAttributeFieldList2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNotNull(locationType6);
    }

    @Test
    public void test42657() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest85.test42657");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutOpenIdConnectRelyingPartyConfiguration putOpenIdConnectRelyingPartyConfiguration0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutOpenIdConnectRelyingPartyConfiguration();
        java.util.List<java.lang.String> strList1 = putOpenIdConnectRelyingPartyConfiguration0.getScopes();
        java.lang.String str2 = putOpenIdConnectRelyingPartyConfiguration0.getOptionalIssuerDiscoveryUri();
        putOpenIdConnectRelyingPartyConfiguration0.DisplayName = "/AQUARIUS/Provisioning/v1";
        java.util.List<java.lang.String> strList5 = putOpenIdConnectRelyingPartyConfiguration0.getScopes();
        putOpenIdConnectRelyingPartyConfiguration0.ClientIdentifier = "****6c1e8d5f-414c-40a7-adc8-0ffe3463ffc2****";
        org.junit.Assert.assertNull(strList1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(strList5);
    }

    @Test
    public void test42658() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest85.test42658");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.PostVisitFileResponse postVisitFileResponse0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.PostVisitFileResponse();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.FieldDataPlugin fieldDataPlugin1 = null;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.PostVisitFileResponse postVisitFileResponse2 = postVisitFileResponse0.setHandledByPlugin(fieldDataPlugin1);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.FieldDataPlugin fieldDataPlugin3 = postVisitFileResponse0.getHandledByPlugin();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitDataByLocationServiceRequest fieldVisitDataByLocationServiceRequest4 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitDataByLocationServiceRequest();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitDataByLocationServiceRequest fieldVisitDataByLocationServiceRequest6 = fieldVisitDataByLocationServiceRequest4.setIncludeNodeDetails((java.lang.Boolean) true);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags7 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray11 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList12 = new java.util.ArrayList<java.lang.String>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList12, strArray11);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags14 = putLocationTags7.setTagUniqueIds(strList12);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitDataByLocationServiceRequest fieldVisitDataByLocationServiceRequest15 = fieldVisitDataByLocationServiceRequest6.setParameters(strList12);
        java.util.ArrayList<java.lang.String> strList16 = fieldVisitDataByLocationServiceRequest15.getParameters();
        postVisitFileResponse0.VisitUris = strList16;
        java.util.ArrayList<java.lang.String> strList18 = null;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.PostVisitFileResponse postVisitFileResponse19 = postVisitFileResponse0.setVisitUris(strList18);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.FieldDataPlugin fieldDataPlugin20 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.FieldDataPlugin();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.PostVisitFileResponse postVisitFileResponse21 = postVisitFileResponse0.setHandledByPlugin(fieldDataPlugin20);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.FieldDataPlugin fieldDataPlugin23 = fieldDataPlugin20.setUniqueId("multipart/form-data; boundary=****f642a130-eb6d-4fb6-a1a4-7c7216ab119b****");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.FieldDataPlugin fieldDataPlugin25 = fieldDataPlugin23.setUniqueId("POST");
        org.junit.Assert.assertNotNull(postVisitFileResponse2);
        org.junit.Assert.assertNull(fieldDataPlugin3);
        org.junit.Assert.assertNotNull(fieldVisitDataByLocationServiceRequest6);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(putLocationTags14);
        org.junit.Assert.assertNotNull(fieldVisitDataByLocationServiceRequest15);
        org.junit.Assert.assertNotNull(strList16);
        org.junit.Assert.assertNotNull(postVisitFileResponse19);
        org.junit.Assert.assertNotNull(postVisitFileResponse21);
        org.junit.Assert.assertNotNull(fieldDataPlugin23);
        org.junit.Assert.assertNotNull(fieldDataPlugin25);
    }

    @Test
    public void test42659() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest85.test42659");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenWithObservations specimenWithObservations0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenWithObservations();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenWithObservations specimenWithObservations2 = specimenWithObservations0.setNumberOfReceivedObservations((java.lang.Integer) 1);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroup analyticalGroup3 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroup();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem analyticalGroupItem4 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod5 = analyticalGroupItem4.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem analyticalGroupItem6 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod7 = analyticalGroupItem6.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod8 = analyticalGroupItem6.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem analyticalGroupItem9 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod10 = analyticalGroupItem9.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod11 = analyticalGroupItem9.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod12 = null;
        analyticalGroupItem9.AnalysisMethod = analysisMethod12;
        java.lang.String str14 = analyticalGroupItem9.getHoldingTime();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem analyticalGroupItem15 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod16 = analyticalGroupItem15.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod17 = analyticalGroupItem15.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem analyticalGroupItem18 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod19 = analyticalGroupItem18.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem analyticalGroupItem20 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod21 = analyticalGroupItem20.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod22 = analyticalGroupItem20.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod23 = null;
        analyticalGroupItem20.AnalysisMethod = analysisMethod23;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem[] analyticalGroupItemArray25 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem[] { analyticalGroupItem4, analyticalGroupItem6, analyticalGroupItem9, analyticalGroupItem15, analyticalGroupItem18, analyticalGroupItem20 };
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem> analyticalGroupItemList26 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem>();
        boolean boolean27 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem>) analyticalGroupItemList26, analyticalGroupItemArray25);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroup analyticalGroup28 = analyticalGroup3.setAnalyticalGroupItems((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem>) analyticalGroupItemList26);
        java.lang.Integer int29 = analyticalGroup3.getNumberOfAnalysisMethodsInGroupItems();
        specimenWithObservations2.AnalyticalGroup = analyticalGroup3;
        specimenWithObservations2.NumberOfReceivedObservations = 10;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenWithObservations specimenWithObservations34 = specimenWithObservations2.setId("http://MaxDurationhttp/json/reply/ArrayList");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroup analyticalGroup35 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroup();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupType analyticalGroupType36 = analyticalGroup35.getType();
        java.lang.String str37 = analyticalGroup35.getName();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroup analyticalGroup39 = analyticalGroup35.setDescription("MinInstant");
        specimenWithObservations2.AnalyticalGroup = analyticalGroup35;
        org.junit.Assert.assertNotNull(specimenWithObservations2);
        org.junit.Assert.assertNull(analysisMethod5);
        org.junit.Assert.assertNull(analysisMethod7);
        org.junit.Assert.assertNull(analysisMethod8);
        org.junit.Assert.assertNull(analysisMethod10);
        org.junit.Assert.assertNull(analysisMethod11);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNull(analysisMethod16);
        org.junit.Assert.assertNull(analysisMethod17);
        org.junit.Assert.assertNull(analysisMethod19);
        org.junit.Assert.assertNull(analysisMethod21);
        org.junit.Assert.assertNull(analysisMethod22);
        org.junit.Assert.assertNotNull(analyticalGroupItemArray25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(analyticalGroup28);
        org.junit.Assert.assertNull(int29);
        org.junit.Assert.assertNotNull(specimenWithObservations34);
        org.junit.Assert.assertNull(analyticalGroupType36);
        org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertNotNull(analyticalGroup39);
    }

    @Test
    public void test42660() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest85.test42660");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Unit unit0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Unit();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Unit unit2 = unit0.setPluralName("");
        unit0.SingularName = "multipart/form-data; boundary=****6b8051d4-caf2-4095-9f11-faa36b95fc28****";
        java.lang.Double double5 = unit0.getBaseOffset();
        org.junit.Assert.assertNotNull(unit2);
        org.junit.Assert.assertNull(double5);
    }

    @Test
    public void test42661() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest85.test42661");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservationV2 postObservationV2_0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservationV2();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservationV2 postObservationV2_1 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservationV2();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabInstruction labInstruction2 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservationV2 postObservationV2_3 = postObservationV2_1.setLabInstruction(labInstruction2);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Activity activity4 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Activity();
        java.time.OffsetDateTime offsetDateTime5 = activity4.getStartTime();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Activity activity7 = activity4.setLoggerFileName("'.'SSSSSSS");
        postObservationV2_1.Activity = activity4;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutActivity putActivity9 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutActivity();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity quantity10 = null;
        putActivity9.Depth = quantity10;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutActivity putActivity12 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutActivity();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity plannedActivity13 = putActivity12.PlannedActivity;
        java.time.OffsetDateTime offsetDateTime14 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutActivity putActivity15 = putActivity12.setEndTime(offsetDateTime14);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocation samplingLocation16 = null;
        putActivity15.SamplingLocation = samplingLocation16;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservedProperty postObservedProperty18 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservedProperty();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UnitGroup unitGroup19 = postObservedProperty18.UnitGroup;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity quantity20 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Unit unit21 = null;
        quantity20.Unit = unit21;
        postObservedProperty18.LowerLimit = quantity20;
        putActivity15.Depth = quantity20;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutActivity putActivity25 = putActivity9.setDepth(quantity20);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Activity activity26 = activity4.setDepth(quantity20);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservationV2 postObservationV2_27 = postObservationV2_0.setActivity(activity26);
        java.lang.String str28 = postObservationV2_27.getCustomId();
        java.lang.String str29 = postObservationV2_27.CustomId;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedFieldResult plannedFieldResult30 = postObservationV2_27.getPlannedFieldResult();
        java.time.OffsetDateTime offsetDateTime31 = postObservationV2_27.ObservedTime;
        org.junit.Assert.assertNotNull(postObservationV2_3);
        org.junit.Assert.assertNull(offsetDateTime5);
        org.junit.Assert.assertNotNull(activity7);
        org.junit.Assert.assertNull(plannedActivity13);
        org.junit.Assert.assertNotNull(putActivity15);
        org.junit.Assert.assertNull(unitGroup19);
        org.junit.Assert.assertNotNull(putActivity25);
        org.junit.Assert.assertNotNull(activity26);
        org.junit.Assert.assertNotNull(postObservationV2_27);
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertNull(plannedFieldResult30);
        org.junit.Assert.assertNull(offsetDateTime31);
    }

    @Test
    public void test42662() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest85.test42662");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem analyticalGroupItem0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod1 = analyticalGroupItem0.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod2 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem analyticalGroupItem3 = analyticalGroupItem0.setAnalysisMethod(analysisMethod2);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty observedProperty4 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty();
        observedProperty4.CasNumber = "MinDuration";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem analyticalGroupItem7 = analyticalGroupItem3.setObservedProperty(observedProperty4);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty observedProperty8 = analyticalGroupItem3.getObservedProperty();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem analyticalGroupItem9 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod10 = analyticalGroupItem9.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod11 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem analyticalGroupItem12 = analyticalGroupItem9.setAnalysisMethod(analysisMethod11);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty observedProperty13 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty();
        observedProperty13.CasNumber = "MinDuration";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem analyticalGroupItem16 = analyticalGroupItem12.setObservedProperty(observedProperty13);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty observedProperty17 = analyticalGroupItem12.getObservedProperty();
        analyticalGroupItem3.ObservedProperty = observedProperty17;
        org.junit.Assert.assertNull(analysisMethod1);
        org.junit.Assert.assertNotNull(analyticalGroupItem3);
        org.junit.Assert.assertNotNull(analyticalGroupItem7);
        org.junit.Assert.assertNotNull(observedProperty8);
        org.junit.Assert.assertNull(analysisMethod10);
        org.junit.Assert.assertNotNull(analyticalGroupItem12);
        org.junit.Assert.assertNotNull(analyticalGroupItem16);
        org.junit.Assert.assertNotNull(observedProperty17);
    }

    @Test
    public void test42663() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest85.test42663");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationMinimal observationMinimal0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationMinimal();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty observedProperty1 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationMinimal observationMinimal2 = observationMinimal0.setObservedProperty(observedProperty1);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenNestedInActivity specimenNestedInActivity3 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationMinimal observationMinimal4 = observationMinimal0.setSpecimen(specimenNestedInActivity3);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.TaxonomicResult taxonomicResult5 = observationMinimal4.TaxonomicResult;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricConfiguration metricConfiguration6 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricConfiguration();
        java.lang.String str7 = metricConfiguration6.getId();
        metricConfiguration6.CustomId = "/AQUARIUS/Acquisition/v2";
        java.lang.Boolean boolean10 = metricConfiguration6.getUseScoreRanges();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Unit unit11 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricConfiguration metricConfiguration12 = metricConfiguration6.setUnit(unit11);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AggregationType aggregationType13 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AggregationType.SUM;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricConfiguration metricConfiguration14 = metricConfiguration6.setAggregationType(aggregationType13);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricConfiguration metricConfiguration15 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricConfiguration();
        java.lang.String str16 = metricConfiguration15.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty observedProperty17 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty();
        observedProperty17.CasNumber = "MinDuration";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricConfiguration metricConfiguration20 = metricConfiguration15.setObservedProperty(observedProperty17);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricConfiguration metricConfiguration22 = metricConfiguration15.setId("yyyy'-'MM'-'dd'T'HH':'mm':'ss");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty observedProperty23 = metricConfiguration22.ObservedProperty;
        metricConfiguration22.UseScoreRanges = false;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricConfiguration metricConfiguration26 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricConfiguration();
        java.lang.String str27 = metricConfiguration26.getId();
        metricConfiguration26.CustomId = "/AQUARIUS/Acquisition/v2";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty observedProperty30 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricConfiguration metricConfiguration31 = metricConfiguration26.setObservedProperty(observedProperty30);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AggregationType aggregationType32 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AggregationType.SUM;
        metricConfiguration26.AggregationType = aggregationType32;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricConfiguration metricConfiguration34 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricConfiguration();
        java.lang.String str35 = metricConfiguration34.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty observedProperty36 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty();
        observedProperty36.CasNumber = "MinDuration";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricConfiguration metricConfiguration39 = metricConfiguration34.setObservedProperty(observedProperty36);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultType resultType40 = observedProperty36.ResultType;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservedProperty postObservedProperty41 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservedProperty();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UnitGroup unitGroup42 = postObservedProperty41.UnitGroup;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity quantity43 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Unit unit44 = null;
        quantity43.Unit = unit44;
        postObservedProperty41.LowerLimit = quantity43;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity quantity47 = postObservedProperty41.LowerLimit;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Unit unit48 = quantity47.Unit;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty observedProperty49 = observedProperty36.setUpperLimit(quantity47);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLabAnalysisMethod postLabAnalysisMethod50 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLabAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation51 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation();
        observation51.CustomId = "hi!";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.CategoricalResult categoricalResult54 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation55 = observation51.setCategoricalResult(categoricalResult54);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple[] importHistoryEventSimpleArray56 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple> importHistoryEventSimpleList57 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple>();
        boolean boolean58 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple>) importHistoryEventSimpleList57, importHistoryEventSimpleArray56);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation59 = observation51.setImportHistoryEventSimples((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple>) importHistoryEventSimpleList57);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLabAnalysisMethod postLabAnalysisMethod60 = postLabAnalysisMethod50.setImportHistoryEventSimples((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple>) importHistoryEventSimpleList57);
        observedProperty49.ImportHistoryEventSimples = importHistoryEventSimpleList57;
        metricConfiguration26.ObservedProperty = observedProperty49;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLabAnalysisMethod postLabAnalysisMethod63 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLabAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation64 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation();
        observation64.CustomId = "hi!";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.CategoricalResult categoricalResult67 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation68 = observation64.setCategoricalResult(categoricalResult67);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple[] importHistoryEventSimpleArray69 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple> importHistoryEventSimpleList70 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple>();
        boolean boolean71 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple>) importHistoryEventSimpleList70, importHistoryEventSimpleArray69);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation72 = observation64.setImportHistoryEventSimples((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple>) importHistoryEventSimpleList70);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLabAnalysisMethod postLabAnalysisMethod73 = postLabAnalysisMethod63.setImportHistoryEventSimples((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple>) importHistoryEventSimpleList70);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty observedProperty74 = observedProperty49.setImportHistoryEventSimples((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple>) importHistoryEventSimpleList70);
        metricConfiguration22.ObservedProperty = observedProperty74;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultType resultType76 = observedProperty74.ResultType;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricConfiguration metricConfiguration77 = metricConfiguration6.setObservedProperty(observedProperty74);
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple> importHistoryEventSimpleList78 = observedProperty74.ImportHistoryEventSimples;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty observedProperty80 = observedProperty74.setCustomId("****ee0ec537-fde4-45ee-9c35-68c37cf65c1c****");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationMinimal observationMinimal81 = observationMinimal4.setObservedProperty(observedProperty74);
        org.junit.Assert.assertNotNull(observationMinimal2);
        org.junit.Assert.assertNotNull(observationMinimal4);
        org.junit.Assert.assertNull(taxonomicResult5);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(boolean10);
        org.junit.Assert.assertNotNull(metricConfiguration12);
        org.junit.Assert.assertTrue("'" + aggregationType13 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AggregationType.SUM + "'", aggregationType13.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AggregationType.SUM));
        org.junit.Assert.assertNotNull(metricConfiguration14);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNotNull(metricConfiguration20);
        org.junit.Assert.assertNotNull(metricConfiguration22);
        org.junit.Assert.assertNotNull(observedProperty23);
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertNotNull(metricConfiguration31);
        org.junit.Assert.assertTrue("'" + aggregationType32 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AggregationType.SUM + "'", aggregationType32.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AggregationType.SUM));
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertNotNull(metricConfiguration39);
        org.junit.Assert.assertNull(resultType40);
        org.junit.Assert.assertNull(unitGroup42);
        org.junit.Assert.assertNotNull(quantity47);
        org.junit.Assert.assertNull(unit48);
        org.junit.Assert.assertNotNull(observedProperty49);
        org.junit.Assert.assertNotNull(observation55);
        org.junit.Assert.assertNotNull(importHistoryEventSimpleArray56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(observation59);
        org.junit.Assert.assertNotNull(postLabAnalysisMethod60);
        org.junit.Assert.assertNotNull(observation68);
        org.junit.Assert.assertNotNull(importHistoryEventSimpleArray69);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(observation72);
        org.junit.Assert.assertNotNull(postLabAnalysisMethod73);
        org.junit.Assert.assertNotNull(observedProperty74);
        org.junit.Assert.assertNull(resultType76);
        org.junit.Assert.assertNotNull(metricConfiguration77);
        org.junit.Assert.assertNotNull(importHistoryEventSimpleList78);
        org.junit.Assert.assertNotNull(observedProperty80);
        org.junit.Assert.assertNotNull(observationMinimal81);
    }

    @Test
    public void test42664() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest85.test42664");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostSchedule postSchedule0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostSchedule();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationGroupSelectionType samplingLocationGroupSelectionType1 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationGroupSelectionType.ALL;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostSchedule postSchedule2 = postSchedule0.setSamplingLocationGroupSelectionType(samplingLocationGroupSelectionType1);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Laboratory laboratory3 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Laboratory();
        laboratory3.Id = "MaxInstant";
        java.lang.String str6 = laboratory3.PhoneNumber;
        laboratory3.Id = "/AQUARIUS/Acquisition/v2://9999-12-31T23:59:59.999Z";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSchedule putSchedule9 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSchedule();
        java.time.OffsetDateTime offsetDateTime10 = putSchedule9.StartDate;
        java.time.OffsetDateTime offsetDateTime11 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSchedule putSchedule12 = putSchedule9.setEndDate(offsetDateTime11);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes13 = putSchedule12.AuditAttributes;
        java.time.OffsetDateTime offsetDateTime14 = putSchedule12.getEndDate();
        java.time.OffsetDateTime offsetDateTime15 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSchedule putSchedule16 = putSchedule12.setStartDate(offsetDateTime15);
        java.lang.Integer int17 = putSchedule12.SamplingLocationGroupSelectionTypeRandomCount;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.RecurrenceDayMonthlyType recurrenceDayMonthlyType18 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.RecurrenceDayMonthlyType.LAST_DAY_OF_MONTH;
        putSchedule12.RecurrenceDayMonthly = recurrenceDayMonthlyType18;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Unit unit20 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Unit();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes21 = unit20.AuditAttributes;
        unit20.BaseMultiplier = 0.0d;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutAccessGroup putAccessGroup24 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutAccessGroup();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivity samplingPlanPlannedActivity25 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivity();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes26 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivity samplingPlanPlannedActivity27 = samplingPlanPlannedActivity25.setAuditAttributes(auditAttributes26);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes28 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes30 = auditAttributes28.setCreationUserProfileId("'.'SSSSSSS");
        samplingPlanPlannedActivity27.AuditAttributes = auditAttributes28;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes32 = samplingPlanPlannedActivity27.AuditAttributes;
        putAccessGroup24.AuditAttributes = auditAttributes32;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Unit unit34 = unit20.setAuditAttributes(auditAttributes32);
        putSchedule12.AuditAttributes = auditAttributes32;
        laboratory3.AuditAttributes = auditAttributes32;
        java.time.OffsetDateTime offsetDateTime37 = auditAttributes32.ModificationTime;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostSchedule postSchedule38 = postSchedule2.setAuditAttributes(auditAttributes32);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes39 = postSchedule38.AuditAttributes;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSchedule putSchedule40 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSchedule();
        java.time.OffsetDateTime offsetDateTime41 = putSchedule40.StartDate;
        java.time.OffsetDateTime offsetDateTime42 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSchedule putSchedule43 = putSchedule40.setEndDate(offsetDateTime42);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationGroup samplingLocationGroup44 = putSchedule43.getSamplingLocationGroup();
        java.lang.String str45 = putSchedule43.getId();
        java.time.OffsetDateTime offsetDateTime46 = putSchedule43.StartDate;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.RecurrenceDayMonthlyType recurrenceDayMonthlyType47 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.RecurrenceDayMonthlyType.LAST_DAY_OF_MONTH;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSchedule putSchedule48 = putSchedule43.setRecurrenceDayMonthly(recurrenceDayMonthlyType47);
        postSchedule38.RecurrenceDayMonthly = recurrenceDayMonthlyType47;
        org.junit.Assert.assertTrue("'" + samplingLocationGroupSelectionType1 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationGroupSelectionType.ALL + "'", samplingLocationGroupSelectionType1.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationGroupSelectionType.ALL));
        org.junit.Assert.assertNotNull(postSchedule2);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(offsetDateTime10);
        org.junit.Assert.assertNotNull(putSchedule12);
        org.junit.Assert.assertNull(auditAttributes13);
        org.junit.Assert.assertNull(offsetDateTime14);
        org.junit.Assert.assertNotNull(putSchedule16);
        org.junit.Assert.assertNull(int17);
        org.junit.Assert.assertTrue("'" + recurrenceDayMonthlyType18 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.RecurrenceDayMonthlyType.LAST_DAY_OF_MONTH + "'", recurrenceDayMonthlyType18.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.RecurrenceDayMonthlyType.LAST_DAY_OF_MONTH));
        org.junit.Assert.assertNull(auditAttributes21);
        org.junit.Assert.assertNotNull(samplingPlanPlannedActivity27);
        org.junit.Assert.assertNotNull(auditAttributes30);
        org.junit.Assert.assertNotNull(auditAttributes32);
        org.junit.Assert.assertNotNull(unit34);
        org.junit.Assert.assertNull(offsetDateTime37);
        org.junit.Assert.assertNotNull(postSchedule38);
        org.junit.Assert.assertNotNull(auditAttributes39);
        org.junit.Assert.assertNull(offsetDateTime41);
        org.junit.Assert.assertNotNull(putSchedule43);
        org.junit.Assert.assertNull(samplingLocationGroup44);
        org.junit.Assert.assertNull(str45);
        org.junit.Assert.assertNull(offsetDateTime46);
        org.junit.Assert.assertTrue("'" + recurrenceDayMonthlyType47 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.RecurrenceDayMonthlyType.LAST_DAY_OF_MONTH + "'", recurrenceDayMonthlyType47.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.RecurrenceDayMonthlyType.LAST_DAY_OF_MONTH));
        org.junit.Assert.assertNotNull(putSchedule48);
    }

    @Test
    public void test42665() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest85.test42665");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Vertical vertical0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Vertical();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay1 = vertical0.getMeanVelocity();
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Calibration> calibrationList2 = vertical0.getCalibrations();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.IceCoveredData iceCoveredData3 = null;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Vertical vertical4 = vertical0.setIceCoveredData(iceCoveredData3);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VerticalType verticalType5 = vertical0.VerticalType;
        org.junit.Assert.assertNull(quantityWithDisplay1);
        org.junit.Assert.assertNull(calibrationList2);
        org.junit.Assert.assertNotNull(vertical4);
        org.junit.Assert.assertNull(verticalType5);
    }

    @Test
    public void test42666() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest85.test42666");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedFieldResult plannedFieldResult1 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation2 = observation0.setPlannedFieldResult(plannedFieldResult1);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabInstruction labInstruction3 = null;
        observation2.LabInstruction = labInstruction3;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationStatistics observationStatistics5 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation6 = observation2.setStatistics(observationStatistics5);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Taxon taxon7 = null;
        observation2.RelatedTaxon = taxon7;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricConfiguration metricConfiguration9 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricConfiguration();
        java.lang.String str10 = metricConfiguration9.getId();
        metricConfiguration9.CustomId = "/AQUARIUS/Acquisition/v2";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty observedProperty13 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricConfiguration metricConfiguration14 = metricConfiguration9.setObservedProperty(observedProperty13);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AggregationType aggregationType15 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AggregationType.SUM;
        metricConfiguration9.AggregationType = aggregationType15;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricConfiguration metricConfiguration17 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricConfiguration();
        java.lang.String str18 = metricConfiguration17.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty observedProperty19 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty();
        observedProperty19.CasNumber = "MinDuration";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricConfiguration metricConfiguration22 = metricConfiguration17.setObservedProperty(observedProperty19);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultType resultType23 = observedProperty19.ResultType;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservedProperty postObservedProperty24 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservedProperty();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UnitGroup unitGroup25 = postObservedProperty24.UnitGroup;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity quantity26 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Unit unit27 = null;
        quantity26.Unit = unit27;
        postObservedProperty24.LowerLimit = quantity26;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity quantity30 = postObservedProperty24.LowerLimit;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Unit unit31 = quantity30.Unit;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty observedProperty32 = observedProperty19.setUpperLimit(quantity30);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLabAnalysisMethod postLabAnalysisMethod33 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLabAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation34 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation();
        observation34.CustomId = "hi!";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.CategoricalResult categoricalResult37 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation38 = observation34.setCategoricalResult(categoricalResult37);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple[] importHistoryEventSimpleArray39 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple> importHistoryEventSimpleList40 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple>();
        boolean boolean41 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple>) importHistoryEventSimpleList40, importHistoryEventSimpleArray39);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation42 = observation34.setImportHistoryEventSimples((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple>) importHistoryEventSimpleList40);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLabAnalysisMethod postLabAnalysisMethod43 = postLabAnalysisMethod33.setImportHistoryEventSimples((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple>) importHistoryEventSimpleList40);
        observedProperty32.ImportHistoryEventSimples = importHistoryEventSimpleList40;
        metricConfiguration9.ObservedProperty = observedProperty32;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLabAnalysisMethod postLabAnalysisMethod46 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLabAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation47 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation();
        observation47.CustomId = "hi!";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.CategoricalResult categoricalResult50 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation51 = observation47.setCategoricalResult(categoricalResult50);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple[] importHistoryEventSimpleArray52 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple> importHistoryEventSimpleList53 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple>();
        boolean boolean54 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple>) importHistoryEventSimpleList53, importHistoryEventSimpleArray52);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation55 = observation47.setImportHistoryEventSimples((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple>) importHistoryEventSimpleList53);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLabAnalysisMethod postLabAnalysisMethod56 = postLabAnalysisMethod46.setImportHistoryEventSimples((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple>) importHistoryEventSimpleList53);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty observedProperty57 = observedProperty32.setImportHistoryEventSimples((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple>) importHistoryEventSimpleList53);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation58 = observation2.setObservedProperty(observedProperty32);
        observation2.Comment = "http:///AQUARIUS/Acquisition/v2multipart/form-data; boundary=****44f0772e-c3ca-4316-8e2a-61ec8540d661****/v1/observedproperties/{id}/categoricalvalues";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails61 = observation2.getLabResultDetails();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocation samplingLocation62 = observation2.getSamplingLocation();
        org.junit.Assert.assertNotNull(observation2);
        org.junit.Assert.assertNotNull(observation6);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNotNull(metricConfiguration14);
        org.junit.Assert.assertTrue("'" + aggregationType15 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AggregationType.SUM + "'", aggregationType15.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AggregationType.SUM));
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNotNull(metricConfiguration22);
        org.junit.Assert.assertNull(resultType23);
        org.junit.Assert.assertNull(unitGroup25);
        org.junit.Assert.assertNotNull(quantity30);
        org.junit.Assert.assertNull(unit31);
        org.junit.Assert.assertNotNull(observedProperty32);
        org.junit.Assert.assertNotNull(observation38);
        org.junit.Assert.assertNotNull(importHistoryEventSimpleArray39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(observation42);
        org.junit.Assert.assertNotNull(postLabAnalysisMethod43);
        org.junit.Assert.assertNotNull(observation51);
        org.junit.Assert.assertNotNull(importHistoryEventSimpleArray52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(observation55);
        org.junit.Assert.assertNotNull(postLabAnalysisMethod56);
        org.junit.Assert.assertNotNull(observedProperty57);
        org.junit.Assert.assertNotNull(observation58);
        org.junit.Assert.assertNull(labResultDetails61);
        org.junit.Assert.assertNull(samplingLocation62);
    }

    @Test
    public void test42667() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest85.test42667");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutObservationV2 putObservationV2_0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutObservationV2();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty observedProperty1 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutObservationV2 putObservationV2_2 = putObservationV2_0.setObservedProperty(observedProperty1);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Activity activity3 = putObservationV2_2.Activity;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DataClassificationType dataClassificationType4 = putObservationV2_2.getDataClassification();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.CategoricalResult categoricalResult5 = putObservationV2_2.CategoricalResult;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Specimen specimen6 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutObservationV2 putObservationV2_7 = putObservationV2_2.setSpecimen(specimen6);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity postActivity8 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity();
        postActivity8.SourceActivityId = "2021.4.62.0";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity plannedActivity11 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity postActivity12 = postActivity8.setPlannedActivity(plannedActivity11);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity postActivity14 = postActivity8.setLoggerFileName("https");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation15 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedFieldResult plannedFieldResult16 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation17 = observation15.setPlannedFieldResult(plannedFieldResult16);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabInstruction labInstruction18 = null;
        observation17.LabInstruction = labInstruction18;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationStatistics observationStatistics20 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation21 = observation17.setStatistics(observationStatistics20);
        java.time.OffsetDateTime offsetDateTime22 = observation21.getResultTime();
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple> importHistoryEventSimpleList23 = observation21.ImportHistoryEventSimples;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty observedProperty24 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation25 = observation21.setObservedProperty(observedProperty24);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.RuleValidationDetails[] ruleValidationDetailsArray26 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.RuleValidationDetails[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.RuleValidationDetails> ruleValidationDetailsList27 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.RuleValidationDetails>();
        boolean boolean28 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.RuleValidationDetails>) ruleValidationDetailsList27, ruleValidationDetailsArray26);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation29 = observation21.setValidationWarnings((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.RuleValidationDetails>) ruleValidationDetailsList27);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity postActivity30 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttribute[] extendedAttributeArray31 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttribute[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttribute> extendedAttributeList32 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttribute>();
        boolean boolean33 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttribute>) extendedAttributeList32, extendedAttributeArray31);
        postActivity30.ExtendedAttributes = extendedAttributeList32;
        observation29.ExtendedAttributes = extendedAttributeList32;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity postActivity36 = postActivity8.setExtendedAttributes((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttribute>) extendedAttributeList32);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutObservationV2 putObservationV2_37 = putObservationV2_2.setExtendedAttributes((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttribute>) extendedAttributeList32);
        java.time.OffsetDateTime offsetDateTime38 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutObservationV2 putObservationV2_39 = putObservationV2_2.setObservedTime(offsetDateTime38);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Specimen specimen40 = putObservationV2_2.Specimen;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.CategoricalResult categoricalResult41 = putObservationV2_2.CategoricalResult;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity quantity42 = putObservationV2_2.Depth;
        org.junit.Assert.assertNotNull(putObservationV2_2);
        org.junit.Assert.assertNull(activity3);
        org.junit.Assert.assertNull(dataClassificationType4);
        org.junit.Assert.assertNull(categoricalResult5);
        org.junit.Assert.assertNotNull(putObservationV2_7);
        org.junit.Assert.assertNotNull(postActivity12);
        org.junit.Assert.assertNotNull(postActivity14);
        org.junit.Assert.assertNotNull(observation17);
        org.junit.Assert.assertNotNull(observation21);
        org.junit.Assert.assertNull(offsetDateTime22);
        org.junit.Assert.assertNull(importHistoryEventSimpleList23);
        org.junit.Assert.assertNotNull(observation25);
        org.junit.Assert.assertNotNull(ruleValidationDetailsArray26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(observation29);
        org.junit.Assert.assertNotNull(extendedAttributeArray31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(postActivity36);
        org.junit.Assert.assertNotNull(putObservationV2_37);
        org.junit.Assert.assertNotNull(putObservationV2_39);
        org.junit.Assert.assertNull(specimen40);
        org.junit.Assert.assertNull(categoricalResult41);
        org.junit.Assert.assertNull(quantity42);
    }

    @Test
    public void test42668() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest85.test42668");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetChartDataV2 getChartDataV2_0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetChartDataV2();
        getChartDataV2_0.DetectionCondition = "/AQUARIUS/Acquisition/v2://9999-12-31T23:59:59.999Z";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.GageHeightReading gageHeightReading3 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.GageHeightReading();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ControlConditionActivity controlConditionActivity4 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ControlConditionActivity();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ControlCleanedType controlCleanedType5 = null;
        controlConditionActivity4.ControlCleaned = controlCleanedType5;
        java.lang.String str7 = controlConditionActivity4.getComments();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary8 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        dischargeSummary8.Reviewer = "";
        java.time.Instant instant11 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        dischargeSummary8.MeasurementTime = instant11;
        controlConditionActivity4.DateCleaned = instant11;
        gageHeightReading3.ReadingTime = instant11;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay15 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay17 = doubleWithDisplay15.setNumeric((java.lang.Double) 10.0d);
        java.lang.String str18 = doubleWithDisplay17.getDisplay();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.GageHeightReading gageHeightReading19 = gageHeightReading3.setGageHeight(doubleWithDisplay17);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetChartDataV2 getChartDataV2_20 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetChartDataV2();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary21 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary23 = dischargeSummary21.setMeanGageHeightMethod("hi!");
        java.lang.String str24 = dischargeSummary23.MeasurementId;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary26 = dischargeSummary23.setDischargeMethod("yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSSSSSZZZZZ");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CalibrationCheck calibrationCheck27 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CalibrationCheck();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CalibrationCheckType calibrationCheckType28 = calibrationCheck27.getCalibrationCheckType();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay29 = calibrationCheck27.Value;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse30 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary31 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary33 = dischargeSummary31.setPublish((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse34 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant35 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse36 = locationDescriptionListServiceResponse34.setNextToken(instant35);
        dischargeSummary31.MeasurementTime = instant35;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse38 = locationDescriptionListServiceResponse30.setNextToken(instant35);
        java.time.Instant instant39 = locationDescriptionListServiceResponse30.getNextToken();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CalibrationCheck calibrationCheck40 = calibrationCheck27.setTime(instant39);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary41 = dischargeSummary23.setMeasurementTime(instant39);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetChartDataV2 getChartDataV2_42 = getChartDataV2_20.setStartResultTime(instant39);
        gageHeightReading3.ReadingTime = instant39;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetChartDataV2 getChartDataV2_44 = getChartDataV2_0.setStartObservedTime(instant39);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetChartDataV2 getChartDataV2_46 = getChartDataV2_0.setFilterId("");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetChartDataV2 getChartDataV2_48 = getChartDataV2_46.setNumericResultValue((java.lang.Double) 10.0d);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetChartDataV2 getChartDataV2_50 = getChartDataV2_48.setImportHistoryEventId("multipart/form-data; boundary=****bbcf5f9e-6ccf-4b63-91ab-6e645caf02af****");
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(instant11);
        org.junit.Assert.assertNotNull(doubleWithDisplay17);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNotNull(gageHeightReading19);
        org.junit.Assert.assertNotNull(dischargeSummary23);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNotNull(dischargeSummary26);
        org.junit.Assert.assertNull(calibrationCheckType28);
        org.junit.Assert.assertNull(doubleWithDisplay29);
        org.junit.Assert.assertNotNull(dischargeSummary33);
        org.junit.Assert.assertNotNull(instant35);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse36);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse38);
        org.junit.Assert.assertNotNull(instant39);
        org.junit.Assert.assertNotNull(calibrationCheck40);
        org.junit.Assert.assertNotNull(dischargeSummary41);
        org.junit.Assert.assertNotNull(getChartDataV2_42);
        org.junit.Assert.assertNotNull(getChartDataV2_44);
        org.junit.Assert.assertNotNull(getChartDataV2_46);
        org.junit.Assert.assertNotNull(getChartDataV2_48);
        org.junit.Assert.assertNotNull(getChartDataV2_50);
    }

    @Test
    public void test42669() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest85.test42669");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostSchedule postSchedule0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostSchedule();
        java.time.OffsetDateTime offsetDateTime1 = postSchedule0.StartDate;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSchedule putSchedule2 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSchedule();
        java.time.OffsetDateTime offsetDateTime3 = putSchedule2.StartDate;
        java.time.OffsetDateTime offsetDateTime4 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSchedule putSchedule5 = putSchedule2.setEndDate(offsetDateTime4);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes6 = putSchedule5.AuditAttributes;
        java.time.OffsetDateTime offsetDateTime7 = putSchedule5.getEndDate();
        java.time.OffsetDateTime offsetDateTime8 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSchedule putSchedule9 = putSchedule5.setStartDate(offsetDateTime8);
        java.lang.Integer int10 = putSchedule5.SamplingLocationGroupSelectionTypeRandomCount;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.RecurrenceDayMonthlyType recurrenceDayMonthlyType11 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.RecurrenceDayMonthlyType.LAST_DAY_OF_MONTH;
        putSchedule5.RecurrenceDayMonthly = recurrenceDayMonthlyType11;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostSchedule postSchedule13 = postSchedule0.setRecurrenceDayMonthly(recurrenceDayMonthlyType11);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes14 = postSchedule0.getAuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.RecurrenceType recurrenceType15 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.RecurrenceType.MONTHLY;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostSchedule postSchedule16 = postSchedule0.setRecurrenceType(recurrenceType15);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutFieldVisit putFieldVisit17 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutFieldVisit();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity[] plannedActivityArray18 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity> plannedActivityList19 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity>) plannedActivityList19, plannedActivityArray18);
        putFieldVisit17.PlannedActivities = plannedActivityList19;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment22 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment();
        java.lang.String str23 = domainObjectAttachment22.getId();
        java.lang.String str24 = domainObjectAttachment22.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Attachment attachment25 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment26 = domainObjectAttachment22.setAttachment(attachment25);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment27 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment();
        java.lang.String str28 = domainObjectAttachment27.getId();
        java.lang.String str29 = domainObjectAttachment27.getId();
        domainObjectAttachment27.Id = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment33 = domainObjectAttachment27.setId("hi!");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment34 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment();
        java.lang.String str35 = domainObjectAttachment34.getId();
        java.lang.String str36 = domainObjectAttachment34.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Attachment attachment37 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment38 = domainObjectAttachment34.setAttachment(attachment37);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment39 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment();
        java.lang.String str40 = domainObjectAttachment39.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment41 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment();
        java.lang.String str42 = domainObjectAttachment41.getId();
        java.lang.String str43 = domainObjectAttachment41.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Attachment attachment44 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment45 = domainObjectAttachment41.setAttachment(attachment44);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment46 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment();
        java.lang.String str47 = domainObjectAttachment46.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment[] domainObjectAttachmentArray48 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment[] { domainObjectAttachment22, domainObjectAttachment27, domainObjectAttachment34, domainObjectAttachment39, domainObjectAttachment41, domainObjectAttachment46 };
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment> domainObjectAttachmentList49 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment>();
        boolean boolean50 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment>) domainObjectAttachmentList49, domainObjectAttachmentArray48);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutFieldVisit putFieldVisit51 = putFieldVisit17.setAttachments((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment>) domainObjectAttachmentList49);
        java.time.OffsetDateTime offsetDateTime52 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutFieldVisit putFieldVisit53 = putFieldVisit17.setEndTime(offsetDateTime52);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Schedule schedule54 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Schedule();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Schedule schedule56 = schedule54.setCustomId("");
        java.time.OffsetDateTime offsetDateTime57 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Schedule schedule58 = schedule54.setStartDate(offsetDateTime57);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.RecurrenceType recurrenceType59 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.RecurrenceType.MONTHLY;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Schedule schedule60 = schedule58.setRecurrenceType(recurrenceType59);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutFieldVisit putFieldVisit61 = putFieldVisit53.setSchedule(schedule58);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Schedule schedule62 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Schedule();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Schedule schedule64 = schedule62.setCustomId("");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SchedulePlannedActivity[] schedulePlannedActivityArray65 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SchedulePlannedActivity[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SchedulePlannedActivity> schedulePlannedActivityList66 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SchedulePlannedActivity>();
        boolean boolean67 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SchedulePlannedActivity>) schedulePlannedActivityList66, schedulePlannedActivityArray65);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Schedule schedule68 = schedule64.setSchedulePlannedActivities((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SchedulePlannedActivity>) schedulePlannedActivityList66);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationGroup samplingLocationGroup69 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Schedule schedule70 = schedule68.setSamplingLocationGroup(samplingLocationGroup69);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.RecurrenceDayWeeklyType recurrenceDayWeeklyType71 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.RecurrenceDayWeeklyType.SATURDAY;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Schedule schedule72 = schedule70.setRecurrenceDayWeekly(recurrenceDayWeeklyType71);
        java.time.OffsetDateTime offsetDateTime73 = schedule72.EndDate;
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SchedulePlannedActivity> schedulePlannedActivityList74 = schedule72.SchedulePlannedActivities;
        schedule58.SchedulePlannedActivities = schedulePlannedActivityList74;
        postSchedule0.SchedulePlannedActivities = schedulePlannedActivityList74;
        java.time.OffsetDateTime offsetDateTime77 = null;
        postSchedule0.LastGenerationDate = offsetDateTime77;
        java.time.OffsetDateTime offsetDateTime79 = postSchedule0.getStartDate();
        org.junit.Assert.assertNull(offsetDateTime1);
        org.junit.Assert.assertNull(offsetDateTime3);
        org.junit.Assert.assertNotNull(putSchedule5);
        org.junit.Assert.assertNull(auditAttributes6);
        org.junit.Assert.assertNull(offsetDateTime7);
        org.junit.Assert.assertNotNull(putSchedule9);
        org.junit.Assert.assertNull(int10);
        org.junit.Assert.assertTrue("'" + recurrenceDayMonthlyType11 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.RecurrenceDayMonthlyType.LAST_DAY_OF_MONTH + "'", recurrenceDayMonthlyType11.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.RecurrenceDayMonthlyType.LAST_DAY_OF_MONTH));
        org.junit.Assert.assertNotNull(postSchedule13);
        org.junit.Assert.assertNull(auditAttributes14);
        org.junit.Assert.assertTrue("'" + recurrenceType15 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.RecurrenceType.MONTHLY + "'", recurrenceType15.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.RecurrenceType.MONTHLY));
        org.junit.Assert.assertNotNull(postSchedule16);
        org.junit.Assert.assertNotNull(plannedActivityArray18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNotNull(domainObjectAttachment26);
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertNotNull(domainObjectAttachment33);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertNull(str36);
        org.junit.Assert.assertNotNull(domainObjectAttachment38);
        org.junit.Assert.assertNull(str40);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertNotNull(domainObjectAttachment45);
        org.junit.Assert.assertNull(str47);
        org.junit.Assert.assertNotNull(domainObjectAttachmentArray48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(putFieldVisit51);
        org.junit.Assert.assertNotNull(putFieldVisit53);
        org.junit.Assert.assertNotNull(schedule56);
        org.junit.Assert.assertNotNull(schedule58);
        org.junit.Assert.assertTrue("'" + recurrenceType59 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.RecurrenceType.MONTHLY + "'", recurrenceType59.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.RecurrenceType.MONTHLY));
        org.junit.Assert.assertNotNull(schedule60);
        org.junit.Assert.assertNotNull(putFieldVisit61);
        org.junit.Assert.assertNotNull(schedule64);
        org.junit.Assert.assertNotNull(schedulePlannedActivityArray65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(schedule68);
        org.junit.Assert.assertNotNull(schedule70);
        org.junit.Assert.assertTrue("'" + recurrenceDayWeeklyType71 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.RecurrenceDayWeeklyType.SATURDAY + "'", recurrenceDayWeeklyType71.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.RecurrenceDayWeeklyType.SATURDAY));
        org.junit.Assert.assertNotNull(schedule72);
        org.junit.Assert.assertNull(offsetDateTime73);
        org.junit.Assert.assertNotNull(schedulePlannedActivityList74);
        org.junit.Assert.assertNull(offsetDateTime79);
    }

    @Test
    public void test42670() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest85.test42670");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SearchResultAttachment searchResultAttachment0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SearchResultAttachment();
        searchResultAttachment0.Cursor = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ";
        searchResultAttachment0.Cursor = "/AQUARIUS";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SearchResultAttachment searchResultAttachment6 = searchResultAttachment0.setCursor("9999-12-31T23:59:59.999Z");
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Attachment> attachmentList7 = searchResultAttachment6.DomainObjects;
        org.junit.Assert.assertNotNull(searchResultAttachment6);
        org.junit.Assert.assertNull(attachmentList7);
    }

    @Test
    public void test42671() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest85.test42671");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.AppendResponse appendResponse0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.AppendResponse();
        java.lang.String str1 = appendResponse0.getAppendRequestIdentifier();
        java.lang.String str2 = appendResponse0.AppendRequestIdentifier;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.AppendResponse appendResponse4 = appendResponse0.setAppendRequestIdentifier("MinDuration");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.AppendResponse appendResponse6 = appendResponse4.setAppendRequestIdentifier("multipart/form-data; boundary=****5b5bcc49-98d5-445c-ae15-d7e16405ad8c****");
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNotNull(appendResponse4);
        org.junit.Assert.assertNotNull(appendResponse6);
    }

    @Test
    public void test42672() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest85.test42672");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Tag tag0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Tag();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Tag tag2 = tag0.setAppliesToAttachments((java.lang.Boolean) false);
        java.lang.Boolean boolean3 = tag2.isAppliesToAttachments();
        java.lang.String str4 = tag2.getUniqueId();
        java.lang.String str5 = tag2.Key;
        org.junit.Assert.assertNotNull(tag2);
        org.junit.Assert.assertEquals("'" + boolean3 + "' != '" + false + "'", boolean3, false);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(str5);
    }

    @Test
    public void test42673() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest85.test42673");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostReportPlugin postReportPlugin0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostReportPlugin();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.IHttpFile iHttpFile1 = null;
        postReportPlugin0.File = iHttpFile1;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.IHttpFile iHttpFile3 = null;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostReportPlugin postReportPlugin4 = postReportPlugin0.setFile(iHttpFile3);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.IHttpFile iHttpFile5 = postReportPlugin0.getFile();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.IHttpFile iHttpFile6 = null;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostReportPlugin postReportPlugin7 = postReportPlugin0.setFile(iHttpFile6);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostReportPlugin postReportPlugin9 = postReportPlugin7.setFolderName("hi!");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostReportPlugin postReportPlugin11 = postReportPlugin7.setFolderName("http://MaxDurationhttp/json/reply/Integer://multipart/form-data; boundary=****930a219d-85cf-428e-8cad-9442e08cea99****");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostReportPlugin postReportPlugin13 = postReportPlugin7.setAssemblyName("");
        org.junit.Assert.assertNotNull(postReportPlugin4);
        org.junit.Assert.assertNull(iHttpFile5);
        org.junit.Assert.assertNotNull(postReportPlugin7);
        org.junit.Assert.assertNotNull(postReportPlugin9);
        org.junit.Assert.assertNotNull(postReportPlugin11);
        org.junit.Assert.assertNotNull(postReportPlugin13);
    }

    @Test
    public void test42674() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest85.test42674");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutObservedProperty putObservedProperty0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutObservedProperty();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity quantity1 = putObservedProperty0.LowerLimit;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity postActivity2 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity();
        postActivity2.LoggerFileName = "hi!";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity plannedActivity5 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity postActivity6 = postActivity2.setPlannedActivity(plannedActivity5);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ActivityType activityType7 = postActivity2.Type;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFieldVisitActivityWithTemplate postFieldVisitActivityWithTemplate8 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFieldVisitActivityWithTemplate();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate9 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate();
        specimenTemplate9.CustomId = "hi!";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate12 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate13 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate();
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabInstructionTemplate> labInstructionTemplateList14 = specimenTemplate13.getLabInstructionTemplates();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate15 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate17 = specimenTemplate15.setCustomId("hi!");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate18 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate19 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate();
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabInstructionTemplate> labInstructionTemplateList20 = specimenTemplate19.LabInstructionTemplates;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate[] specimenTemplateArray21 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate[] { specimenTemplate9, specimenTemplate12, specimenTemplate13, specimenTemplate17, specimenTemplate18, specimenTemplate19 };
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate> specimenTemplateList22 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate>();
        boolean boolean23 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate>) specimenTemplateList22, specimenTemplateArray21);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFieldVisitActivityWithTemplate postFieldVisitActivityWithTemplate24 = postFieldVisitActivityWithTemplate8.setSpecimenTemplates((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate>) specimenTemplateList22);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.CollectionMethod collectionMethod25 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.CollectionMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFieldVisitActivityWithTemplate postFieldVisitActivityWithTemplate26 = postFieldVisitActivityWithTemplate24.setCollectionMethod(collectionMethod25);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity postActivity27 = postActivity2.setCollectionMethod(collectionMethod25);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity quantity28 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Unit unit29 = null;
        quantity28.Unit = unit29;
        java.lang.Double double31 = quantity28.Value;
        postActivity27.Depth = quantity28;
        putObservedProperty0.LowerLimit = quantity28;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UnitGroup unitGroup34 = putObservedProperty0.UnitGroup;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservedProperty postObservedProperty35 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservedProperty();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservedProperty postObservedProperty37 = postObservedProperty35.setCustomId("hi!");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UnitGroup unitGroup38 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UnitGroup();
        postObservedProperty37.UnitGroup = unitGroup38;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutUnitGroup putUnitGroup40 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutUnitGroup();
        java.lang.String str41 = putUnitGroup40.getCustomId();
        putUnitGroup40.SupportsConversion = false;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutUnitGroupWithUnit putUnitGroupWithUnit44 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutUnitGroupWithUnit();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutUnitGroupWithUnit putUnitGroupWithUnit46 = putUnitGroupWithUnit44.setId("yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UnitGroupSystemCodeType unitGroupSystemCodeType47 = putUnitGroupWithUnit44.SystemCode;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutUnitGroupWithUnit putUnitGroupWithUnit49 = putUnitGroupWithUnit44.setCustomId("/AQUARIUS/Acquisition/v2");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UnitGroupSystemCodeType unitGroupSystemCodeType50 = putUnitGroupWithUnit44.getSystemCode();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UnitGroupSystemCodeType unitGroupSystemCodeType51 = null;
        putUnitGroupWithUnit44.SystemCode = unitGroupSystemCodeType51;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UnitGroupSystemCodeType unitGroupSystemCodeType53 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UnitGroupSystemCodeType.LENGTH;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutUnitGroupWithUnit putUnitGroupWithUnit54 = putUnitGroupWithUnit44.setSystemCode(unitGroupSystemCodeType53);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutUnitGroup putUnitGroup55 = putUnitGroup40.setSystemCode(unitGroupSystemCodeType53);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UnitGroup unitGroup56 = unitGroup38.setSystemCode(unitGroupSystemCodeType53);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes57 = unitGroup38.AuditAttributes;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutObservedProperty putObservedProperty58 = putObservedProperty0.setUnitGroup(unitGroup38);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty observedProperty59 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty();
        observedProperty59.CasNumber = "MinDuration";
        java.lang.String str62 = observedProperty59.getCasNumber();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutObservedProperty putObservedProperty63 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutObservedProperty();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity quantity64 = putObservedProperty63.LowerLimit;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutObservedProperty putObservedProperty66 = putObservedProperty63.setDescription("");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisType analysisType67 = putObservedProperty63.AnalysisType;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisType analysisType68 = putObservedProperty63.getAnalysisType();
        putObservedProperty63.Description = "POST";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultType resultType71 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultType.CATEGORICAL_FIXED_VALUES;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutObservedProperty putObservedProperty72 = putObservedProperty63.setResultType(resultType71);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty observedProperty73 = observedProperty59.setResultType(resultType71);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty observedProperty75 = observedProperty73.setDescription("multipart/form-data; boundary=****9fadde69-3f13-40c4-a87c-0f3f51c2dd35****");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Unit unit76 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Unit();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes77 = unit76.AuditAttributes;
        unit76.BaseMultiplier = 0.0d;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutAccessGroup putAccessGroup80 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutAccessGroup();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivity samplingPlanPlannedActivity81 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivity();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes82 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivity samplingPlanPlannedActivity83 = samplingPlanPlannedActivity81.setAuditAttributes(auditAttributes82);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes84 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes86 = auditAttributes84.setCreationUserProfileId("'.'SSSSSSS");
        samplingPlanPlannedActivity83.AuditAttributes = auditAttributes84;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes88 = samplingPlanPlannedActivity83.AuditAttributes;
        putAccessGroup80.AuditAttributes = auditAttributes88;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Unit unit90 = unit76.setAuditAttributes(auditAttributes88);
        java.lang.String str91 = unit90.Name;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Unit unit93 = unit90.setCustomId("2021.4.62.0");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty observedProperty94 = observedProperty73.setDefaultUnit(unit93);
        putObservedProperty0.DefaultUnit = unit93;
        org.junit.Assert.assertNull(quantity1);
        org.junit.Assert.assertNotNull(postActivity6);
        org.junit.Assert.assertNull(activityType7);
        org.junit.Assert.assertNull(labInstructionTemplateList14);
        org.junit.Assert.assertNotNull(specimenTemplate17);
        org.junit.Assert.assertNull(labInstructionTemplateList20);
        org.junit.Assert.assertNotNull(specimenTemplateArray21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(postFieldVisitActivityWithTemplate24);
        org.junit.Assert.assertNotNull(postFieldVisitActivityWithTemplate26);
        org.junit.Assert.assertNotNull(postActivity27);
        org.junit.Assert.assertNull(double31);
        org.junit.Assert.assertNull(unitGroup34);
        org.junit.Assert.assertNotNull(postObservedProperty37);
        org.junit.Assert.assertNull(str41);
        org.junit.Assert.assertNotNull(putUnitGroupWithUnit46);
        org.junit.Assert.assertNull(unitGroupSystemCodeType47);
        org.junit.Assert.assertNotNull(putUnitGroupWithUnit49);
        org.junit.Assert.assertNull(unitGroupSystemCodeType50);
        org.junit.Assert.assertTrue("'" + unitGroupSystemCodeType53 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UnitGroupSystemCodeType.LENGTH + "'", unitGroupSystemCodeType53.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UnitGroupSystemCodeType.LENGTH));
        org.junit.Assert.assertNotNull(putUnitGroupWithUnit54);
        org.junit.Assert.assertNotNull(putUnitGroup55);
        org.junit.Assert.assertNotNull(unitGroup56);
        org.junit.Assert.assertNull(auditAttributes57);
        org.junit.Assert.assertNotNull(putObservedProperty58);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "MinDuration" + "'", str62, "MinDuration");
        org.junit.Assert.assertNull(quantity64);
        org.junit.Assert.assertNotNull(putObservedProperty66);
        org.junit.Assert.assertNull(analysisType67);
        org.junit.Assert.assertNull(analysisType68);
        org.junit.Assert.assertTrue("'" + resultType71 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultType.CATEGORICAL_FIXED_VALUES + "'", resultType71.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultType.CATEGORICAL_FIXED_VALUES));
        org.junit.Assert.assertNotNull(putObservedProperty72);
        org.junit.Assert.assertNotNull(observedProperty73);
        org.junit.Assert.assertNotNull(observedProperty75);
        org.junit.Assert.assertNull(auditAttributes77);
        org.junit.Assert.assertNotNull(samplingPlanPlannedActivity83);
        org.junit.Assert.assertNotNull(auditAttributes86);
        org.junit.Assert.assertNotNull(auditAttributes88);
        org.junit.Assert.assertNotNull(unit90);
        org.junit.Assert.assertNull(str91);
        org.junit.Assert.assertNotNull(unit93);
        org.junit.Assert.assertNotNull(observedProperty94);
    }

    @Test
    public void test42675() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest85.test42675");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostUserV2 postUserV2_0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostUserV2();
        java.util.List<java.lang.String> strList1 = postUserV2_0.getAccessGroups();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetActivities getActivities2 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetActivities();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse3 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary4 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary6 = dischargeSummary4.setPublish((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse7 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant8 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse9 = locationDescriptionListServiceResponse7.setNextToken(instant8);
        dischargeSummary4.MeasurementTime = instant8;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse11 = locationDescriptionListServiceResponse3.setNextToken(instant8);
        java.time.Instant instant12 = locationDescriptionListServiceResponse3.getNextToken();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetActivities getActivities13 = getActivities2.setToStartTime(instant12);
        java.lang.String str14 = getActivities13.getSort();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetActivities getActivities16 = getActivities13.setLimit((java.lang.Integer) 1);
        getActivities16.Cursor = "";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest19 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_20 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray22 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList23 = new java.util.ArrayList<java.lang.String>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList23, strArray22);
        getObservationsV2_20.SpecimenIds = strList23;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags26 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray30 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList31 = new java.util.ArrayList<java.lang.String>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList31, strArray30);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags33 = putLocationTags26.setTagUniqueIds(strList31);
        getObservationsV2_20.QualityControlTypes = strList31;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest35 = timeAlignedDataServiceRequest19.setTimeSeriesUniqueIds(strList31);
        getActivities16.CollectionMethodIds = strList31;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostUserV2 postUserV2_37 = postUserV2_0.setRoles((java.util.List<java.lang.String>) strList31);
        java.lang.String str38 = postUserV2_37.getCustomId();
        postUserV2_37.Email = "multipart/form-data; boundary=****f642a130-eb6d-4fb6-a1a4-7c7216ab119b****";
        java.lang.String str41 = postUserV2_37.getId();
        org.junit.Assert.assertNull(strList1);
        org.junit.Assert.assertNotNull(dischargeSummary6);
        org.junit.Assert.assertNotNull(instant8);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse9);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse11);
        org.junit.Assert.assertNotNull(instant12);
        org.junit.Assert.assertNotNull(getActivities13);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(getActivities16);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(putLocationTags33);
        org.junit.Assert.assertNotNull(timeAlignedDataServiceRequest35);
        org.junit.Assert.assertNotNull(postUserV2_37);
        org.junit.Assert.assertNull(str38);
        org.junit.Assert.assertNull(str41);
    }

    @Test
    public void test42676() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest85.test42676");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.NoteOperation noteOperation0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.NoteOperation();
        java.lang.String str1 = noteOperation0.User;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeTransactionListServiceRequest metadataChangeTransactionListServiceRequest2 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeTransactionListServiceRequest();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostRecurringReport postRecurringReport3 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostRecurringReport();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary4 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        dischargeSummary4.Reviewer = "";
        java.time.Instant instant7 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        dischargeSummary4.MeasurementTime = instant7;
        postRecurringReport3.NextGenerationDate = instant7;
        java.time.Instant instant10 = postRecurringReport3.getNextGenerationDate();
        java.lang.String str11 = com.aquaticinformatics.aquarius.sdk.samples.serializers.InstantSerializer.format(instant10);
        metadataChangeTransactionListServiceRequest2.QueryFrom = instant10;
        java.time.Instant instant13 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MinValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeTransactionListServiceRequest metadataChangeTransactionListServiceRequest14 = metadataChangeTransactionListServiceRequest2.setQueryFrom(instant13);
        java.time.Instant instant15 = metadataChangeTransactionListServiceRequest14.getQueryTo();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingModelEffectiveShiftsServiceRequest ratingModelEffectiveShiftsServiceRequest16 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingModelEffectiveShiftsServiceRequest();
        java.lang.String str17 = ratingModelEffectiveShiftsServiceRequest16.getTimeSeriesUniqueId();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingModelEffectiveShiftsServiceRequest ratingModelEffectiveShiftsServiceRequest19 = ratingModelEffectiveShiftsServiceRequest16.setRatingModelIdentifier("");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ReferencePointBase referencePointBase20 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ReferencePointBase();
        java.lang.String str21 = referencePointBase20.LocationUniqueId;
        java.lang.String str22 = referencePointBase20.Name;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportSpecimens getExportSpecimens23 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportSpecimens();
        java.util.List<java.lang.String> strList24 = getExportSpecimens23.getActivityTypes();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Qualifier qualifier25 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Qualifier();
        java.time.Instant instant26 = qualifier25.DateApplied;
        java.lang.String str27 = qualifier25.User;
        java.lang.String str28 = qualifier25.getIdentifier();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest29 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest();
        java.lang.Object obj30 = timeAlignedDataServiceRequest29.getResponseType();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse31 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant32 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse33 = locationDescriptionListServiceResponse31.setNextToken(instant32);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest34 = timeAlignedDataServiceRequest29.setQueryFrom(instant32);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Qualifier qualifier35 = qualifier25.setDateApplied(instant32);
        getExportSpecimens23.Before = instant32;
        java.util.List<java.lang.String> strList37 = getExportSpecimens23.getLaboratoryIds();
        java.util.List<java.lang.String> strList38 = getExportSpecimens23.getSearch();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivityRecurrence samplingPlanPlannedActivityRecurrence39 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivityRecurrence();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.RecurrenceFrequencyType recurrenceFrequencyType40 = samplingPlanPlannedActivityRecurrence39.RecurrenceFrequency;
        java.util.List<java.lang.String> strList41 = samplingPlanPlannedActivityRecurrence39.getMonthsOfYear();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutQualifier putQualifier42 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutQualifier();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutQualifier putQualifier44 = putQualifier42.setUniqueId("");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest45 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_46 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList49 = new java.util.ArrayList<java.lang.String>();
        boolean boolean50 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList49, strArray48);
        getObservationsV2_46.SpecimenIds = strList49;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags52 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray56 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList57 = new java.util.ArrayList<java.lang.String>();
        boolean boolean58 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList57, strArray56);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags59 = putLocationTags52.setTagUniqueIds(strList57);
        getObservationsV2_46.QualityControlTypes = strList57;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest61 = timeAlignedDataServiceRequest45.setTimeSeriesUniqueIds(strList57);
        putQualifier42.GroupIdentifiers = strList57;
        java.util.ArrayList<java.lang.String> strList63 = putQualifier42.GroupIdentifiers;
        samplingPlanPlannedActivityRecurrence39.MonthsOfYear = strList63;
        getExportSpecimens23.ActivityTypes = strList63;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportSpecimens getExportSpecimens67 = getExportSpecimens23.setCursor("hi!");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse68 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary69 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary71 = dischargeSummary69.setPublish((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse72 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant73 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse74 = locationDescriptionListServiceResponse72.setNextToken(instant73);
        dischargeSummary69.MeasurementTime = instant73;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse76 = locationDescriptionListServiceResponse68.setNextToken(instant73);
        java.time.Instant instant77 = locationDescriptionListServiceResponse68.getNextToken();
        java.time.Instant instant78 = locationDescriptionListServiceResponse68.getNextToken();
        getExportSpecimens67.StartModificationTime = instant78;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ReferencePointBase referencePointBase80 = referencePointBase20.setPrimarySinceDate(instant78);
        ratingModelEffectiveShiftsServiceRequest16.QueryTo = instant78;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeTransactionListServiceRequest metadataChangeTransactionListServiceRequest82 = metadataChangeTransactionListServiceRequest14.setQueryTo(instant78);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.NoteOperation noteOperation83 = noteOperation0.setDateAppliedUtc(instant78);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.NoteOperation noteOperation85 = noteOperation83.setUser("multipart/form-data; boundary=****9a2a71f5-e148-48e5-b44f-3c1e18f7138d****");
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(instant7);
        org.junit.Assert.assertNotNull(instant10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "9999-12-31T23:59:59.999Z" + "'", str11, "9999-12-31T23:59:59.999Z");
        org.junit.Assert.assertNotNull(instant13);
        org.junit.Assert.assertNotNull(metadataChangeTransactionListServiceRequest14);
        org.junit.Assert.assertNull(instant15);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertNotNull(ratingModelEffectiveShiftsServiceRequest19);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertNull(strList24);
        org.junit.Assert.assertNull(instant26);
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertNotNull(obj30);
        org.junit.Assert.assertEquals(obj30.toString(), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj30), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj30), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertNotNull(instant32);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse33);
        org.junit.Assert.assertNotNull(timeAlignedDataServiceRequest34);
        org.junit.Assert.assertNotNull(qualifier35);
        org.junit.Assert.assertNull(strList37);
        org.junit.Assert.assertNull(strList38);
        org.junit.Assert.assertNull(recurrenceFrequencyType40);
        org.junit.Assert.assertNull(strList41);
        org.junit.Assert.assertNotNull(putQualifier44);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(strArray56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(putLocationTags59);
        org.junit.Assert.assertNotNull(timeAlignedDataServiceRequest61);
        org.junit.Assert.assertNotNull(strList63);
        org.junit.Assert.assertNotNull(getExportSpecimens67);
        org.junit.Assert.assertNotNull(dischargeSummary71);
        org.junit.Assert.assertNotNull(instant73);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse74);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse76);
        org.junit.Assert.assertNotNull(instant77);
        org.junit.Assert.assertNotNull(instant78);
        org.junit.Assert.assertNotNull(referencePointBase80);
        org.junit.Assert.assertNotNull(metadataChangeTransactionListServiceRequest82);
        org.junit.Assert.assertNotNull(noteOperation83);
        org.junit.Assert.assertNotNull(noteOperation85);
    }

    @Test
    public void test42677() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest85.test42677");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingModelDescription ratingModelDescription0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingModelDescription();
        ratingModelDescription0.TemplateName = "multipart/form-data; boundary=****1eab67e1-84c8-4b82-aa06-d6c7526551f8****";
        java.lang.String str3 = ratingModelDescription0.Identifier;
        java.lang.String str4 = ratingModelDescription0.getInputUnit();
        java.time.Instant instant5 = ratingModelDescription0.getLastModified();
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(instant5);
    }

    @Test
    public void test42678() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest85.test42678");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.FieldDataPlugin fieldDataPlugin0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.FieldDataPlugin();
        java.lang.String str1 = fieldDataPlugin0.getAssemblyQualifiedTypeName();
        java.lang.Integer int2 = fieldDataPlugin0.getPluginPriority();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.FieldDataPlugin fieldDataPlugin4 = fieldDataPlugin0.setAssemblyQualifiedTypeName("****b4959745-e712-43bc-98bb-4017f673cd3d****");
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(int2);
        org.junit.Assert.assertNotNull(fieldDataPlugin4);
    }

    @Test
    public void test42679() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest85.test42679");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DeleteObservationsV2 deleteObservationsV2_0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DeleteObservationsV2();
        java.time.Instant instant1 = deleteObservationsV2_0.StartModificationTime;
        deleteObservationsV2_0.Limit = 0;
        java.lang.String str4 = deleteObservationsV2_0.getDepthUnitId();
        java.util.List<java.lang.String> strList5 = deleteObservationsV2_0.getAnalysisMethodSimpleIds();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportObservations getExportObservations6 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportObservations();
        java.lang.Double double7 = getExportObservations6.NumericResultValue;
        java.util.List<java.lang.String> strList8 = getExportObservations6.LabResultLaboratoryIds;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutBulkEditResultGradesV2 putBulkEditResultGradesV2_9 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutBulkEditResultGradesV2();
        java.lang.String str10 = putBulkEditResultGradesV2_9.getDetectionCondition();
        java.util.List<java.lang.String> strList11 = putBulkEditResultGradesV2_9.getTaxonIds();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutBulkEditResultGradesV2 putBulkEditResultGradesV2_13 = putBulkEditResultGradesV2_9.setLimit((java.lang.Integer) 10);
        java.lang.Double double14 = putBulkEditResultGradesV2_13.getMinNumericResultValue();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetFieldVisits getFieldVisits15 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetFieldVisits();
        java.util.List<java.lang.String> strList16 = getFieldVisits15.getSamplingLocationIds();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags17 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray21 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList22 = new java.util.ArrayList<java.lang.String>();
        boolean boolean23 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList22, strArray21);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags24 = putLocationTags17.setTagUniqueIds(strList22);
        java.util.ArrayList<java.lang.String> strList25 = putLocationTags24.TagUniqueIds;
        getFieldVisits15.ScheduleIds = strList25;
        java.lang.Integer int27 = getFieldVisits15.Limit;
        java.util.List<java.lang.String> strList28 = getFieldVisits15.getFieldTripIds();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_29 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray31 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList32 = new java.util.ArrayList<java.lang.String>();
        boolean boolean33 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList32, strArray31);
        getObservationsV2_29.SpecimenIds = strList32;
        getFieldVisits15.Search = strList32;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetFieldVisits getFieldVisits37 = getFieldVisits15.setCursor("");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObservation importItemObservation38 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObservation();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest39 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest();
        java.lang.Object obj40 = timeAlignedDataServiceRequest39.getResponseType();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse41 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant42 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse43 = locationDescriptionListServiceResponse41.setNextToken(instant42);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest44 = timeAlignedDataServiceRequest39.setQueryFrom(instant42);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags45 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray49 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList50 = new java.util.ArrayList<java.lang.String>();
        boolean boolean51 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList50, strArray49);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags52 = putLocationTags45.setTagUniqueIds(strList50);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest53 = timeAlignedDataServiceRequest39.setTimeSeriesOutputUnitIds(strList50);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObservation importItemObservation54 = importItemObservation38.setFields((java.util.List<java.lang.String>) strList50);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetFieldVisits getFieldVisits55 = getFieldVisits37.setFieldTripIds((java.util.List<java.lang.String>) strList50);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetFieldVisits getFieldVisits57 = getFieldVisits37.setSort("multipart/form-data; boundary=****1eab67e1-84c8-4b82-aa06-d6c7526551f8****");
        java.util.List<java.lang.String> strList58 = getFieldVisits57.Search;
        putBulkEditResultGradesV2_13.LabReportIds = strList58;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportObservations getExportObservations60 = getExportObservations6.setSearch(strList58);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DeleteObservationsV2 deleteObservationsV2_61 = deleteObservationsV2_0.setActivityIds(strList58);
        deleteObservationsV2_0.MinNumericResultValue = 1.0d;
        org.junit.Assert.assertNull(instant1);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(strList5);
        org.junit.Assert.assertNull(double7);
        org.junit.Assert.assertNull(strList8);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNull(strList11);
        org.junit.Assert.assertNotNull(putBulkEditResultGradesV2_13);
        org.junit.Assert.assertNull(double14);
        org.junit.Assert.assertNull(strList16);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(putLocationTags24);
        org.junit.Assert.assertNotNull(strList25);
        org.junit.Assert.assertNull(int27);
        org.junit.Assert.assertNull(strList28);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(getFieldVisits37);
        org.junit.Assert.assertNotNull(obj40);
        org.junit.Assert.assertEquals(obj40.toString(), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj40), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj40), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertNotNull(instant42);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse43);
        org.junit.Assert.assertNotNull(timeAlignedDataServiceRequest44);
        org.junit.Assert.assertNotNull(strArray49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNotNull(putLocationTags52);
        org.junit.Assert.assertNotNull(timeAlignedDataServiceRequest53);
        org.junit.Assert.assertNotNull(importItemObservation54);
        org.junit.Assert.assertNotNull(getFieldVisits55);
        org.junit.Assert.assertNotNull(getFieldVisits57);
        org.junit.Assert.assertNotNull(strList58);
        org.junit.Assert.assertNotNull(getExportObservations60);
        org.junit.Assert.assertNotNull(deleteObservationsV2_61);
    }

    @Test
    public void test42680() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest85.test42680");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.TaxonImportSummary taxonImportSummary0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.TaxonImportSummary();
        taxonImportSummary0.NewCount = 0;
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemTaxon> importItemTaxonList3 = taxonImportSummary0.ErrorImportItems;
        java.lang.Integer int4 = taxonImportSummary0.SuccessCount;
        java.lang.Integer int5 = taxonImportSummary0.SkippedCount;
        java.lang.Integer int6 = taxonImportSummary0.ErrorCount;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.TaxonImportSummary taxonImportSummary8 = taxonImportSummary0.setSummaryReportText("9999-12-31T23:59:59.9999999Z");
        java.lang.Integer int9 = taxonImportSummary8.ErrorCount;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.TaxonImportSummary taxonImportSummary11 = taxonImportSummary8.setNewCount((java.lang.Integer) 5);
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemTaxon> importItemTaxonList12 = taxonImportSummary11.ErrorImportItems;
        taxonImportSummary11.ExpectedCount = 5;
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemTaxon> importItemTaxonList15 = taxonImportSummary11.NonErrorImportItems;
        org.junit.Assert.assertNull(importItemTaxonList3);
        org.junit.Assert.assertNull(int4);
        org.junit.Assert.assertNull(int5);
        org.junit.Assert.assertNull(int6);
        org.junit.Assert.assertNotNull(taxonImportSummary8);
        org.junit.Assert.assertNull(int9);
        org.junit.Assert.assertNotNull(taxonImportSummary11);
        org.junit.Assert.assertNull(importItemTaxonList12);
        org.junit.Assert.assertNull(importItemTaxonList15);
    }

    @Test
    public void test42681() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest85.test42681");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedFieldResult plannedFieldResult1 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation2 = observation0.setPlannedFieldResult(plannedFieldResult1);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabInstruction labInstruction3 = null;
        observation2.LabInstruction = labInstruction3;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.FieldVisit fieldVisit5 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.FieldVisit();
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment> domainObjectAttachmentList6 = fieldVisit5.Attachments;
        observation2.FieldVisit = fieldVisit5;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlan samplingPlan8 = fieldVisit5.SamplingPlan;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes9 = fieldVisit5.getAuditAttributes();
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment> domainObjectAttachmentList10 = fieldVisit5.getAttachments();
        java.time.OffsetDateTime offsetDateTime11 = null;
        fieldVisit5.EndTime = offsetDateTime11;
        fieldVisit5.Notes = "multipart/form-data; boundary=****d9f5d551-383a-4365-87fd-ae7094da6f3b****";
        java.lang.String str15 = fieldVisit5.getParticipants();
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity> plannedActivityList16 = fieldVisit5.PlannedActivities;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFieldVisit postFieldVisit17 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFieldVisit();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutFieldVisit putFieldVisit18 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutFieldVisit();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity[] plannedActivityArray19 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity> plannedActivityList20 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity>();
        boolean boolean21 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity>) plannedActivityList20, plannedActivityArray19);
        putFieldVisit18.PlannedActivities = plannedActivityList20;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment23 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment();
        java.lang.String str24 = domainObjectAttachment23.getId();
        java.lang.String str25 = domainObjectAttachment23.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Attachment attachment26 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment27 = domainObjectAttachment23.setAttachment(attachment26);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment28 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment();
        java.lang.String str29 = domainObjectAttachment28.getId();
        java.lang.String str30 = domainObjectAttachment28.getId();
        domainObjectAttachment28.Id = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment34 = domainObjectAttachment28.setId("hi!");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment35 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment();
        java.lang.String str36 = domainObjectAttachment35.getId();
        java.lang.String str37 = domainObjectAttachment35.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Attachment attachment38 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment39 = domainObjectAttachment35.setAttachment(attachment38);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment40 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment();
        java.lang.String str41 = domainObjectAttachment40.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment42 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment();
        java.lang.String str43 = domainObjectAttachment42.getId();
        java.lang.String str44 = domainObjectAttachment42.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Attachment attachment45 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment46 = domainObjectAttachment42.setAttachment(attachment45);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment47 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment();
        java.lang.String str48 = domainObjectAttachment47.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment[] domainObjectAttachmentArray49 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment[] { domainObjectAttachment23, domainObjectAttachment28, domainObjectAttachment35, domainObjectAttachment40, domainObjectAttachment42, domainObjectAttachment47 };
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment> domainObjectAttachmentList50 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment>();
        boolean boolean51 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment>) domainObjectAttachmentList50, domainObjectAttachmentArray49);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutFieldVisit putFieldVisit52 = putFieldVisit18.setAttachments((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment>) domainObjectAttachmentList50);
        java.time.OffsetDateTime offsetDateTime53 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutFieldVisit putFieldVisit54 = putFieldVisit18.setEndTime(offsetDateTime53);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Schedule schedule55 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Schedule();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Schedule schedule57 = schedule55.setCustomId("");
        java.time.OffsetDateTime offsetDateTime58 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Schedule schedule59 = schedule55.setStartDate(offsetDateTime58);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.RecurrenceType recurrenceType60 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.RecurrenceType.MONTHLY;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Schedule schedule61 = schedule59.setRecurrenceType(recurrenceType60);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutFieldVisit putFieldVisit62 = putFieldVisit54.setSchedule(schedule59);
        java.time.OffsetDateTime offsetDateTime63 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Schedule schedule64 = schedule59.setStartDate(offsetDateTime63);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFieldVisit postFieldVisit65 = postFieldVisit17.setSchedule(schedule59);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Schedule schedule66 = postFieldVisit65.Schedule;
        java.lang.Integer int67 = schedule66.SamplingLocationGroupSelectionTypeRandomCount;
        fieldVisit5.Schedule = schedule66;
        org.junit.Assert.assertNotNull(observation2);
        org.junit.Assert.assertNull(domainObjectAttachmentList6);
        org.junit.Assert.assertNull(samplingPlan8);
        org.junit.Assert.assertNull(auditAttributes9);
        org.junit.Assert.assertNull(domainObjectAttachmentList10);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNull(plannedActivityList16);
        org.junit.Assert.assertNotNull(plannedActivityArray19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertNotNull(domainObjectAttachment27);
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertNotNull(domainObjectAttachment34);
        org.junit.Assert.assertNull(str36);
        org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertNotNull(domainObjectAttachment39);
        org.junit.Assert.assertNull(str41);
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertNull(str44);
        org.junit.Assert.assertNotNull(domainObjectAttachment46);
        org.junit.Assert.assertNull(str48);
        org.junit.Assert.assertNotNull(domainObjectAttachmentArray49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNotNull(putFieldVisit52);
        org.junit.Assert.assertNotNull(putFieldVisit54);
        org.junit.Assert.assertNotNull(schedule57);
        org.junit.Assert.assertNotNull(schedule59);
        org.junit.Assert.assertTrue("'" + recurrenceType60 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.RecurrenceType.MONTHLY + "'", recurrenceType60.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.RecurrenceType.MONTHLY));
        org.junit.Assert.assertNotNull(schedule61);
        org.junit.Assert.assertNotNull(putFieldVisit62);
        org.junit.Assert.assertNotNull(schedule64);
        org.junit.Assert.assertNotNull(postFieldVisit65);
        org.junit.Assert.assertNotNull(schedule66);
        org.junit.Assert.assertNull(int67);
    }

    @Test
    public void test42682() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest85.test42682");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostDatumConvertedTimeSeries postDatumConvertedTimeSeries0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostDatumConvertedTimeSeries();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostDatumConvertedTimeSeries postDatumConvertedTimeSeries2 = postDatumConvertedTimeSeries0.setDescription("yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ");
        postDatumConvertedTimeSeries0.Publish = false;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostDatumConvertedTimeSeries postDatumConvertedTimeSeries6 = postDatumConvertedTimeSeries0.setComputationIdentifier("/AQUARIUS");
        java.lang.String str7 = postDatumConvertedTimeSeries0.getTargetStandardReferenceDatumIdentifier();
        org.junit.Assert.assertNotNull(postDatumConvertedTimeSeries2);
        org.junit.Assert.assertNotNull(postDatumConvertedTimeSeries6);
        org.junit.Assert.assertNull(str7);
    }

    @Test
    public void test42683() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest85.test42683");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ActivityTemplate activityTemplate0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ActivityTemplate();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MediumType mediumType1 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MediumType.BIOLOGICAL;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ActivityTemplate activityTemplate2 = activityTemplate0.setMedium(mediumType1);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ActivityTemplate activityTemplate4 = activityTemplate0.setComment("'.'SSSSSSS");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFieldVisitActivityWithTemplate postFieldVisitActivityWithTemplate5 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFieldVisitActivityWithTemplate();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes6 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFieldVisitActivityWithTemplate postFieldVisitActivityWithTemplate7 = postFieldVisitActivityWithTemplate5.setAuditAttributes(auditAttributes6);
        java.lang.String str8 = postFieldVisitActivityWithTemplate7.getCustomId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFieldVisitActivityWithTemplate postFieldVisitActivityWithTemplate10 = postFieldVisitActivityWithTemplate7.setId("MinDuration");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MediumType mediumType11 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MediumType.GROUNDWATER;
        postFieldVisitActivityWithTemplate10.Medium = mediumType11;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ActivityTemplate activityTemplate13 = activityTemplate0.setMedium(mediumType11);
        org.junit.Assert.assertTrue("'" + mediumType1 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MediumType.BIOLOGICAL + "'", mediumType1.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MediumType.BIOLOGICAL));
        org.junit.Assert.assertNotNull(activityTemplate2);
        org.junit.Assert.assertNotNull(activityTemplate4);
        org.junit.Assert.assertNotNull(postFieldVisitActivityWithTemplate7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(postFieldVisitActivityWithTemplate10);
        org.junit.Assert.assertTrue("'" + mediumType11 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MediumType.GROUNDWATER + "'", mediumType11.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MediumType.GROUNDWATER));
        org.junit.Assert.assertNotNull(activityTemplate13);
    }

    @Test
    public void test42684() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest85.test42684");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity pointVelocityDischargeActivity0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity();
        java.lang.String str1 = pointVelocityDischargeActivity0.SoftwareVersion;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity pointVelocityDischargeActivity3 = pointVelocityDischargeActivity0.setIsValid((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity pointVelocityDischargeActivity5 = pointVelocityDischargeActivity0.setSoftwareVersion("");
        java.lang.String str6 = pointVelocityDischargeActivity5.getManufacturer();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.StartPointType startPointType7 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.StartPointType.Unspecified;
        pointVelocityDischargeActivity5.StartPoint = startPointType7;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeChannelMeasurement dischargeChannelMeasurement9 = pointVelocityDischargeActivity5.DischargeChannelMeasurement;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity pointVelocityDischargeActivity10 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity();
        java.lang.String str11 = pointVelocityDischargeActivity10.SoftwareVersion;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity pointVelocityDischargeActivity13 = pointVelocityDischargeActivity10.setIsValid((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay14 = pointVelocityDischargeActivity13.getVelocityAverage();
        pointVelocityDischargeActivity13.MeterInspectedBefore = true;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay17 = null;
        pointVelocityDischargeActivity13.Width = quantityWithDisplay17;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity pointVelocityDischargeActivity19 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity pointVelocityDischargeActivity21 = pointVelocityDischargeActivity19.setIsValid((java.lang.Boolean) false);
        pointVelocityDischargeActivity19.Manufacturer = "2021.4.62.0";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity pointVelocityDischargeActivity25 = pointVelocityDischargeActivity19.setHorizontalCoefficientUsed((java.lang.Boolean) true);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity pointVelocityDischargeActivity26 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity();
        java.lang.String str27 = pointVelocityDischargeActivity26.getModel();
        java.lang.String str28 = pointVelocityDischargeActivity26.getFirmwareVersion();
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Vertical> verticalList29 = pointVelocityDischargeActivity26.Verticals;
        java.lang.String str30 = pointVelocityDischargeActivity26.SerialNumber;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity pointVelocityDischargeActivity32 = pointVelocityDischargeActivity26.setIsValid((java.lang.Boolean) true);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeMethodType dischargeMethodType33 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeMethodType.MidSection;
        pointVelocityDischargeActivity26.DischargeMethod = dischargeMethodType33;
        pointVelocityDischargeActivity25.DischargeMethod = dischargeMethodType33;
        pointVelocityDischargeActivity13.DischargeMethod = dischargeMethodType33;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity pointVelocityDischargeActivity37 = pointVelocityDischargeActivity5.setDischargeMethod(dischargeMethodType33);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay38 = pointVelocityDischargeActivity37.DistanceToMeter;
        java.lang.String str39 = pointVelocityDischargeActivity37.getSuspensionWeight();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(pointVelocityDischargeActivity3);
        org.junit.Assert.assertNotNull(pointVelocityDischargeActivity5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + startPointType7 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.StartPointType.Unspecified + "'", startPointType7.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.StartPointType.Unspecified));
        org.junit.Assert.assertNull(dischargeChannelMeasurement9);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNotNull(pointVelocityDischargeActivity13);
        org.junit.Assert.assertNull(quantityWithDisplay14);
        org.junit.Assert.assertNotNull(pointVelocityDischargeActivity21);
        org.junit.Assert.assertNotNull(pointVelocityDischargeActivity25);
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertNull(verticalList29);
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertNotNull(pointVelocityDischargeActivity32);
        org.junit.Assert.assertTrue("'" + dischargeMethodType33 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeMethodType.MidSection + "'", dischargeMethodType33.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeMethodType.MidSection));
        org.junit.Assert.assertNotNull(pointVelocityDischargeActivity37);
        org.junit.Assert.assertNull(quantityWithDisplay38);
        org.junit.Assert.assertNull(str39);
    }

    @Test
    public void test42685() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest85.test42685");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitDataServiceResponse fieldVisitDataServiceResponse0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitDataServiceResponse();
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeActivity> dischargeActivityList1 = fieldVisitDataServiceResponse0.DischargeActivities;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LevelSurveyActivity levelSurveyActivity2 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LevelSurveyActivity();
        java.lang.String str3 = levelSurveyActivity2.getParty();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitDataServiceResponse fieldVisitDataServiceResponse4 = fieldVisitDataServiceResponse0.setLevelSurveyActivity(levelSurveyActivity2);
        org.junit.Assert.assertNull(dischargeActivityList1);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(fieldVisitDataServiceResponse4);
    }

    @Test
    public void test42686() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest85.test42686");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetFieldVisitStatistics getFieldVisitStatistics0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetFieldVisitStatistics();
        getFieldVisitStatistics0.Id = "";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetFieldVisitStatistics getFieldVisitStatistics4 = getFieldVisitStatistics0.setId("2021.4.62.0");
        java.lang.Object obj5 = getFieldVisitStatistics4.getResponseType();
        java.lang.Object obj6 = getFieldVisitStatistics4.getResponseType();
        getFieldVisitStatistics4.Id = "'.'SSSSSSS";
        getFieldVisitStatistics4.Id = "9999-12-31T23:59:59.999Z";
        org.junit.Assert.assertNotNull(getFieldVisitStatistics4);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$FieldVisitStatistics");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$FieldVisitStatistics");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$FieldVisitStatistics");
        org.junit.Assert.assertNotNull(obj6);
        org.junit.Assert.assertEquals(obj6.toString(), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$FieldVisitStatistics");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj6), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$FieldVisitStatistics");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj6), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$FieldVisitStatistics");
    }

    @Test
    public void test42687() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest85.test42687");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutOpenIdConnectUser putOpenIdConnectUser0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutOpenIdConnectUser();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.UserBase userBase2 = putOpenIdConnectUser0.setCanConfigureSystem((java.lang.Boolean) true);
        java.lang.String str3 = putOpenIdConnectUser0.LoginName;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.UserBase userBase5 = putOpenIdConnectUser0.setLoginName("multipart/form-data; boundary=****5d34e306-630a-492f-8c84-1002d981f2f0****");
        org.junit.Assert.assertNotNull(userBase2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(userBase5);
    }

    @Test
    public void test42688() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest85.test42688");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemSpecimen importItemSpecimen0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemSpecimen();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Specimen specimen1 = importItemSpecimen0.getItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemSpecimen importItemSpecimen3 = importItemSpecimen0.setRowId("MaxInstant");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemStatusType importItemStatusType4 = importItemSpecimen3.Status;
        org.junit.Assert.assertNull(specimen1);
        org.junit.Assert.assertNotNull(importItemSpecimen3);
        org.junit.Assert.assertNull(importItemStatusType4);
    }

    @Test
    public void test42689() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest85.test42689");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutAddOrUpdateIndex putAddOrUpdateIndex0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutAddOrUpdateIndex();
        java.lang.String str1 = putAddOrUpdateIndex0.FieldVisitId;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutAddOrUpdateIndex putAddOrUpdateIndex3 = putAddOrUpdateIndex0.setFieldVisitId("");
        java.lang.String str4 = putAddOrUpdateIndex0.IndexConfigId;
        putAddOrUpdateIndex0.IndexConfigId = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSSSSSZZZZZ";
        java.lang.Object obj7 = putAddOrUpdateIndex0.getResponseType();
        java.lang.String str8 = putAddOrUpdateIndex0.FieldVisitId;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutAddOrUpdateIndex putAddOrUpdateIndex10 = putAddOrUpdateIndex0.setFieldVisitId("MinInstant");
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(putAddOrUpdateIndex3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNotNull(obj7);
        org.junit.Assert.assertEquals(obj7.toString(), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$ActivityWithDetails");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj7), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$ActivityWithDetails");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj7), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$ActivityWithDetails");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(putAddOrUpdateIndex10);
    }

    @Test
    public void test42690() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest85.test42690");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SearchResultObservation searchResultObservation0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SearchResultObservation();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SearchResultObservation searchResultObservation2 = searchResultObservation0.setTotalCount((java.lang.Integer) 2);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SearchResultObservation searchResultObservation4 = searchResultObservation0.setCursor("multipart/form-data; boundary=****44f0772e-c3ca-4316-8e2a-61ec8540d661****");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SearchResultObservation searchResultObservation6 = searchResultObservation4.setCursor("");
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation> observationList7 = searchResultObservation6.DomainObjects;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SearchResultObservation searchResultObservation9 = searchResultObservation6.setTotalCount((java.lang.Integer) 0);
        org.junit.Assert.assertNotNull(searchResultObservation2);
        org.junit.Assert.assertNotNull(searchResultObservation4);
        org.junit.Assert.assertNotNull(searchResultObservation6);
        org.junit.Assert.assertNull(observationList7);
        org.junit.Assert.assertNotNull(searchResultObservation9);
    }

    @Test
    public void test42691() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest85.test42691");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostImportLabReportDataDryRun postImportLabReportDataDryRun0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostImportLabReportDataDryRun();
        postImportLabReportDataDryRun0.UpdateExistingResults = true;
        java.lang.Boolean boolean3 = postImportLabReportDataDryRun0.CreateMissingObjects;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostImportLabReportDataDryRun postImportLabReportDataDryRun5 = postImportLabReportDataDryRun0.setFileType("multipart/form-data; boundary=****bbcf5f9e-6ccf-4b63-91ab-6e645caf02af****");
        postImportLabReportDataDryRun5.FileType = "http://MaxDurationhttp/json/reply/Integer";
        postImportLabReportDataDryRun5.CreateMissingObjects = false;
        org.junit.Assert.assertNull(boolean3);
        org.junit.Assert.assertNotNull(postImportLabReportDataDryRun5);
    }

    @Test
    public void test42692() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest85.test42692");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutActivity putActivity0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutActivity();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity plannedActivity1 = null;
        putActivity0.PlannedActivity = plannedActivity1;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity postActivity3 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity();
        postActivity3.LoggerFileName = "hi!";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity plannedActivity6 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity postActivity7 = postActivity3.setPlannedActivity(plannedActivity6);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag samplingContextTag8 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag();
        java.lang.String str9 = samplingContextTag8.getDescription();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes10 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag samplingContextTag11 = samplingContextTag8.setAuditAttributes(auditAttributes10);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag samplingContextTag13 = samplingContextTag11.setId("yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag samplingContextTag14 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag();
        java.lang.String str15 = samplingContextTag14.getDescription();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag samplingContextTag16 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag();
        java.lang.String str17 = samplingContextTag16.getDescription();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes18 = null;
        samplingContextTag16.AuditAttributes = auditAttributes18;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag samplingContextTag20 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag();
        java.lang.String str21 = samplingContextTag20.getDescription();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes22 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag samplingContextTag23 = samplingContextTag20.setAuditAttributes(auditAttributes22);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag[] samplingContextTagArray24 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag[] { samplingContextTag13, samplingContextTag14, samplingContextTag16, samplingContextTag23 };
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag> samplingContextTagList25 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag>) samplingContextTagList25, samplingContextTagArray24);
        postActivity3.SamplingContextTags = samplingContextTagList25;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutActivity putActivity28 = putActivity0.setSamplingContextTags((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag>) samplingContextTagList25);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.CollectionMethod collectionMethod29 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutActivity putActivity30 = putActivity28.setCollectionMethod(collectionMethod29);
        putActivity30.Detail = true;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.FieldVisit fieldVisit33 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.FieldVisit();
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment> domainObjectAttachmentList34 = fieldVisit33.Attachments;
        java.time.OffsetDateTime offsetDateTime35 = null;
        fieldVisit33.EndTime = offsetDateTime35;
        java.lang.String str37 = fieldVisit33.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.FieldTripSimple fieldTripSimple38 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.FieldTripSimple();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.FieldTripSimple fieldTripSimple40 = fieldTripSimple38.setCustomId("multipart/form-data; boundary=****1eab67e1-84c8-4b82-aa06-d6c7526551f8****");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.FieldVisit fieldVisit41 = fieldVisit33.setFieldTrip(fieldTripSimple38);
        putActivity30.FieldVisit = fieldVisit41;
        org.junit.Assert.assertNotNull(postActivity7);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(samplingContextTag11);
        org.junit.Assert.assertNotNull(samplingContextTag13);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNotNull(samplingContextTag23);
        org.junit.Assert.assertNotNull(samplingContextTagArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(putActivity28);
        org.junit.Assert.assertNotNull(putActivity30);
        org.junit.Assert.assertNull(domainObjectAttachmentList34);
        org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertNotNull(fieldTripSimple40);
        org.junit.Assert.assertNotNull(fieldVisit41);
    }

    @Test
    public void test42693() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest85.test42693");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary2 = dischargeSummary0.setPublish((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse3 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant4 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse5 = locationDescriptionListServiceResponse3.setNextToken(instant4);
        dischargeSummary0.MeasurementTime = instant4;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary7 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        dischargeSummary7.Reviewer = "";
        java.time.Instant instant10 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        dischargeSummary7.MeasurementTime = instant10;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.BaseFlowType baseFlowType12 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.BaseFlowType.BaseFlow;
        dischargeSummary7.BaseFlow = baseFlowType12;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeUncertainty dischargeUncertainty14 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeUncertainty();
        dischargeSummary7.DischargeUncertainty = dischargeUncertainty14;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QualitativeUncertaintyType qualitativeUncertaintyType16 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QualitativeUncertaintyType.Fair;
        dischargeUncertainty14.QualitativeUncertainty = qualitativeUncertaintyType16;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.UncertaintyType uncertaintyType18 = dischargeUncertainty14.ActiveUncertaintyType;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary19 = dischargeSummary0.setDischargeUncertainty(dischargeUncertainty14);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CrossSectionPoint crossSectionPoint20 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CrossSectionPoint();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay21 = null;
        crossSectionPoint20.Distance = quantityWithDisplay21;
        crossSectionPoint20.PointOrder = 1;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay25 = crossSectionPoint20.getElevation();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CrossSectionPoint crossSectionPoint27 = crossSectionPoint20.setComments("hi!");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay28 = null;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CrossSectionPoint crossSectionPoint29 = crossSectionPoint27.setElevation(quantityWithDisplay28);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay30 = null;
        crossSectionPoint29.Depth = quantityWithDisplay30;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DatumConvertedQuantityWithDisplay datumConvertedQuantityWithDisplay32 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DatumConvertedQuantityWithDisplay();
        crossSectionPoint29.Depth = datumConvertedQuantityWithDisplay32;
        java.lang.String str34 = datumConvertedQuantityWithDisplay32.TargetDatum;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary35 = dischargeSummary0.setMeanGageHeight((com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay) datumConvertedQuantityWithDisplay32);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay36 = dischargeSummary0.MeanGageHeight;
        java.lang.String str37 = dischargeSummary0.GageHeightComments;
        org.junit.Assert.assertNotNull(dischargeSummary2);
        org.junit.Assert.assertNotNull(instant4);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse5);
        org.junit.Assert.assertNotNull(instant10);
        org.junit.Assert.assertTrue("'" + baseFlowType12 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.BaseFlowType.BaseFlow + "'", baseFlowType12.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.BaseFlowType.BaseFlow));
        org.junit.Assert.assertTrue("'" + qualitativeUncertaintyType16 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QualitativeUncertaintyType.Fair + "'", qualitativeUncertaintyType16.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QualitativeUncertaintyType.Fair));
        org.junit.Assert.assertNull(uncertaintyType18);
        org.junit.Assert.assertNotNull(dischargeSummary19);
        org.junit.Assert.assertNull(quantityWithDisplay25);
        org.junit.Assert.assertNotNull(crossSectionPoint27);
        org.junit.Assert.assertNotNull(crossSectionPoint29);
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertNotNull(dischargeSummary35);
        org.junit.Assert.assertNotNull(quantityWithDisplay36);
        org.junit.Assert.assertNull(str37);
    }

    @Test
    public void test42694() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest85.test42694");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutQualifier putQualifier0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutQualifier();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutQualifier putQualifier2 = putQualifier0.setUniqueId("");
        java.lang.String str3 = putQualifier2.getPublicIdentifier();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutQualifier putQualifier5 = putQualifier2.setPublicIdentifier("2021.4.62.0");
        putQualifier5.PublicIdentifier = "multipart/form-data; boundary=****1eab67e1-84c8-4b82-aa06-d6c7526551f8****";
        java.lang.String str8 = putQualifier5.DisplayName;
        org.junit.Assert.assertNotNull(putQualifier2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(putQualifier5);
        org.junit.Assert.assertNull(str8);
    }

    @Test
    public void test42695() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest85.test42695");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ActiveDirectoryUser activeDirectoryUser0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ActiveDirectoryUser();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ActiveDirectoryUser activeDirectoryUser2 = activeDirectoryUser0.setActiveDirectorySid("MinDuration");
        activeDirectoryUser0.FirstName = "";
        java.lang.String str5 = activeDirectoryUser0.getAuthenticationType();
        org.junit.Assert.assertNotNull(activeDirectoryUser2);
        org.junit.Assert.assertNull(str5);
    }

    @Test
    public void test42696() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest85.test42696");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CrossSectionSurveyActivity crossSectionSurveyActivity0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CrossSectionSurveyActivity();
        java.time.Instant instant1 = crossSectionSurveyActivity0.StartTime;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity pointVelocityDischargeActivity2 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity();
        java.lang.String str3 = pointVelocityDischargeActivity2.SoftwareVersion;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity pointVelocityDischargeActivity5 = pointVelocityDischargeActivity2.setIsValid((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity pointVelocityDischargeActivity7 = pointVelocityDischargeActivity2.setSoftwareVersion("");
        java.lang.String str8 = pointVelocityDischargeActivity7.getManufacturer();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.StartPointType startPointType9 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.StartPointType.Unspecified;
        pointVelocityDischargeActivity7.StartPoint = startPointType9;
        crossSectionSurveyActivity0.StartingPoint = startPointType9;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CrossSectionPoint crossSectionPoint12 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CrossSectionPoint();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay13 = null;
        crossSectionPoint12.Distance = quantityWithDisplay13;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay15 = null;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CrossSectionPoint crossSectionPoint16 = crossSectionPoint12.setElevation(quantityWithDisplay15);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CrossSectionPoint crossSectionPoint17 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CrossSectionPoint();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay18 = null;
        crossSectionPoint17.Distance = quantityWithDisplay18;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay20 = null;
        crossSectionPoint17.Distance = quantityWithDisplay20;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CrossSectionPoint crossSectionPoint22 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CrossSectionPoint();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay23 = null;
        crossSectionPoint22.Distance = quantityWithDisplay23;
        crossSectionPoint22.PointOrder = 1;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay27 = null;
        crossSectionPoint22.Depth = quantityWithDisplay27;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CrossSectionPoint crossSectionPoint29 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CrossSectionPoint();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay30 = null;
        crossSectionPoint29.Distance = quantityWithDisplay30;
        crossSectionPoint29.PointOrder = 1;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay34 = crossSectionPoint29.getElevation();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CrossSectionPoint crossSectionPoint36 = crossSectionPoint29.setComments("hi!");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CrossSectionPoint crossSectionPoint37 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CrossSectionPoint();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay38 = null;
        crossSectionPoint37.Distance = quantityWithDisplay38;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay40 = null;
        crossSectionPoint37.Distance = quantityWithDisplay40;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CrossSectionPoint crossSectionPoint42 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CrossSectionPoint();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay43 = null;
        crossSectionPoint42.Distance = quantityWithDisplay43;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CrossSectionPoint crossSectionPoint45 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CrossSectionPoint();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay46 = null;
        crossSectionPoint45.Distance = quantityWithDisplay46;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay48 = null;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CrossSectionPoint crossSectionPoint49 = crossSectionPoint45.setElevation(quantityWithDisplay48);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CrossSectionPoint crossSectionPoint50 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CrossSectionPoint();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CrossSectionPoint crossSectionPoint51 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CrossSectionPoint();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay52 = null;
        crossSectionPoint51.Distance = quantityWithDisplay52;
        crossSectionPoint51.PointOrder = 1;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay56 = crossSectionPoint51.getElevation();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CrossSectionPoint crossSectionPoint58 = crossSectionPoint51.setComments("hi!");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CrossSectionPoint crossSectionPoint60 = crossSectionPoint51.setComments("2021.4.62.0");
        java.lang.String str61 = crossSectionPoint60.getComments();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CrossSectionPoint[] crossSectionPointArray62 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CrossSectionPoint[] { crossSectionPoint12, crossSectionPoint17, crossSectionPoint22, crossSectionPoint29, crossSectionPoint37, crossSectionPoint42, crossSectionPoint45, crossSectionPoint50, crossSectionPoint60 };
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CrossSectionPoint> crossSectionPointList63 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CrossSectionPoint>();
        boolean boolean64 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CrossSectionPoint>) crossSectionPointList63, crossSectionPointArray62);
        crossSectionSurveyActivity0.CrossSectionPoints = crossSectionPointList63;
        crossSectionSurveyActivity0.Channel = "multipart/form-data; boundary=****1165d1f3-8b30-4f2e-8d0b-ffebab458859****";
        org.junit.Assert.assertNull(instant1);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(pointVelocityDischargeActivity5);
        org.junit.Assert.assertNotNull(pointVelocityDischargeActivity7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertTrue("'" + startPointType9 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.StartPointType.Unspecified + "'", startPointType9.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.StartPointType.Unspecified));
        org.junit.Assert.assertNotNull(crossSectionPoint16);
        org.junit.Assert.assertNull(quantityWithDisplay34);
        org.junit.Assert.assertNotNull(crossSectionPoint36);
        org.junit.Assert.assertNotNull(crossSectionPoint49);
        org.junit.Assert.assertNull(quantityWithDisplay56);
        org.junit.Assert.assertNotNull(crossSectionPoint58);
        org.junit.Assert.assertNotNull(crossSectionPoint60);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "2021.4.62.0" + "'", str61, "2021.4.62.0");
        org.junit.Assert.assertNotNull(crossSectionPointArray62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
    }

    @Test
    public void test42697() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest85.test42697");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ActiveMeterDetails activeMeterDetails0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ActiveMeterDetails();
        java.lang.String str1 = activeMeterDetails0.SoftwareVersion;
        java.lang.String str2 = activeMeterDetails0.Manufacturer;
        activeMeterDetails0.SerialNumber = "/AQUARIUS";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ActiveMeterCalibration[] activeMeterCalibrationArray5 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ActiveMeterCalibration[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ActiveMeterCalibration> activeMeterCalibrationList6 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ActiveMeterCalibration>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ActiveMeterCalibration>) activeMeterCalibrationList6, activeMeterCalibrationArray5);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ActiveMeterDetails activeMeterDetails8 = activeMeterDetails0.setMeterCalibrations(activeMeterCalibrationList6);
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ActiveMeterCalibration> activeMeterCalibrationList9 = activeMeterDetails8.MeterCalibrations;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ActiveMeterDetails activeMeterDetails10 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ActiveMeterDetails();
        java.lang.String str11 = activeMeterDetails10.SoftwareVersion;
        java.lang.String str12 = activeMeterDetails10.Manufacturer;
        activeMeterDetails10.SerialNumber = "/AQUARIUS";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ActiveMeterCalibration[] activeMeterCalibrationArray15 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ActiveMeterCalibration[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ActiveMeterCalibration> activeMeterCalibrationList16 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ActiveMeterCalibration>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ActiveMeterCalibration>) activeMeterCalibrationList16, activeMeterCalibrationArray15);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ActiveMeterDetails activeMeterDetails18 = activeMeterDetails10.setMeterCalibrations(activeMeterCalibrationList16);
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ActiveMeterCalibration> activeMeterCalibrationList19 = activeMeterDetails18.MeterCalibrations;
        activeMeterDetails8.MeterCalibrations = activeMeterCalibrationList19;
        java.lang.String str21 = activeMeterDetails8.Manufacturer;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ActiveMeterDetails activeMeterDetails23 = activeMeterDetails8.setFirmwareVersion("");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ActiveMeterDetails activeMeterDetails25 = activeMeterDetails8.setSoftwareVersion("0001-01-01T00:00:00.000Z");
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNotNull(activeMeterCalibrationArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(activeMeterDetails8);
        org.junit.Assert.assertNotNull(activeMeterCalibrationList9);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(activeMeterCalibrationArray15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(activeMeterDetails18);
        org.junit.Assert.assertNotNull(activeMeterCalibrationList19);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNotNull(activeMeterDetails23);
        org.junit.Assert.assertNotNull(activeMeterDetails25);
    }

    @Test
    public void test42698() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest85.test42698");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetShippingContainers getShippingContainers0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetShippingContainers();
        java.util.List<java.lang.String> strList1 = getShippingContainers0.getSearch();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationType putLocationType2 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationType();
        java.lang.String str3 = putLocationType2.Description;
        java.lang.String str4 = putLocationType2.UniqueId;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DeleteFieldVisits deleteFieldVisits5 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DeleteFieldVisits();
        java.lang.String str6 = deleteFieldVisits5.Sort;
        deleteFieldVisits5.Sort = "9999-12-31T23:59:59.999Z";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_9 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray12 = new java.lang.String[] { "", "" };
        java.util.ArrayList<java.lang.String> strList13 = new java.util.ArrayList<java.lang.String>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList13, strArray12);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_15 = getObservationsV2_9.setDataClassifications((java.util.List<java.lang.String>) strList13);
        java.util.List<java.lang.String> strList16 = getObservationsV2_9.ResultGrades;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary17 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        dischargeSummary17.Reviewer = "";
        java.time.Instant instant20 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        dischargeSummary17.MeasurementTime = instant20;
        getObservationsV2_9.StartResultTime = instant20;
        java.lang.String[] strArray32 = new java.lang.String[] { "https", "/AQUARIUS/Provisioning/v1", "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ", "2021.4.62.0", "hi!", "2021.4.62.0", "2021.4.62.0", "/AQUARIUS/Acquisition/v2", "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ" };
        java.util.ArrayList<java.lang.String> strList33 = new java.util.ArrayList<java.lang.String>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList33, strArray32);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_35 = getObservationsV2_9.setAnalyticalGroupIds((java.util.List<java.lang.String>) strList33);
        deleteFieldVisits5.PlanningStatuses = strList33;
        putLocationType2.ExtendedAttributeDefinitionIds = strList33;
        getShippingContainers0.Search = strList33;
        java.util.List<java.lang.String> strList39 = getShippingContainers0.Search;
        java.util.List<java.lang.String> strList40 = getShippingContainers0.Search;
        org.junit.Assert.assertNull(strList1);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(getObservationsV2_15);
        org.junit.Assert.assertNull(strList16);
        org.junit.Assert.assertNotNull(instant20);
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(getObservationsV2_35);
        org.junit.Assert.assertNotNull(strList39);
        org.junit.Assert.assertNotNull(strList40);
    }

    @Test
    public void test42699() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest85.test42699");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TrendLineAnalysis trendLineAnalysis0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TrendLineAnalysis();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VolumetricDischargeActivity volumetricDischargeActivity1 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VolumetricDischargeActivity();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeChannelMeasurement dischargeChannelMeasurement2 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeChannelMeasurement();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ChannelMaterialType channelMaterialType3 = dischargeChannelMeasurement2.getChannelMaterial();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay4 = dischargeChannelMeasurement2.Discharge;
        java.time.Instant instant5 = dischargeChannelMeasurement2.EndTime;
        dischargeChannelMeasurement2.Channel = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSSSSSZZZZZ";
        java.lang.String str8 = dischargeChannelMeasurement2.Channel;
        dischargeChannelMeasurement2.Channel = "9999-12-31T23:59:59.999Z";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeChannelMeasurement dischargeChannelMeasurement12 = dischargeChannelMeasurement2.setComments("'.'SSSSSSS");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationRemark locationRemark13 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationRemark();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationRemark locationRemark15 = locationRemark13.setDescription("MaxInstant");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationRemark locationRemark16 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationRemark();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationRemark locationRemark18 = locationRemark16.setDescription("MaxInstant");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse19 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant20 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse21 = locationDescriptionListServiceResponse19.setNextToken(instant20);
        locationRemark18.FromTime = instant20;
        locationRemark15.CreateTime = instant20;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeChannelMeasurement dischargeChannelMeasurement24 = dischargeChannelMeasurement12.setEndTime(instant20);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VolumetricDischargeActivity volumetricDischargeActivity25 = volumetricDischargeActivity1.setDischargeChannelMeasurement(dischargeChannelMeasurement12);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay26 = volumetricDischargeActivity25.getMeasurementContainerVolume();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity pointVelocityDischargeActivity27 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity pointVelocityDischargeActivity29 = pointVelocityDischargeActivity27.setIsValid((java.lang.Boolean) false);
        pointVelocityDischargeActivity27.Manufacturer = "2021.4.62.0";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity pointVelocityDischargeActivity33 = pointVelocityDischargeActivity27.setHorizontalCoefficientUsed((java.lang.Boolean) true);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity pointVelocityDischargeActivity35 = pointVelocityDischargeActivity33.setVelocityObservationMethod("0001-01-01T00:00:00.000Z");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CrossSectionPoint crossSectionPoint36 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CrossSectionPoint();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay37 = null;
        crossSectionPoint36.Distance = quantityWithDisplay37;
        crossSectionPoint36.PointOrder = 1;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay41 = crossSectionPoint36.getElevation();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CrossSectionPoint crossSectionPoint43 = crossSectionPoint36.setComments("hi!");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay44 = null;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CrossSectionPoint crossSectionPoint45 = crossSectionPoint43.setElevation(quantityWithDisplay44);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay46 = null;
        crossSectionPoint45.Depth = quantityWithDisplay46;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DatumConvertedQuantityWithDisplay datumConvertedQuantityWithDisplay48 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DatumConvertedQuantityWithDisplay();
        crossSectionPoint45.Depth = datumConvertedQuantityWithDisplay48;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay50 = crossSectionPoint45.getDepth();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity pointVelocityDischargeActivity51 = pointVelocityDischargeActivity33.setMeanObservationDurationInSeconds((com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay) quantityWithDisplay50);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VolumetricDischargeActivity volumetricDischargeActivity52 = volumetricDischargeActivity25.setMeasurementContainerVolume(quantityWithDisplay50);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TrendLineAnalysis trendLineAnalysis53 = trendLineAnalysis0.setLowerQuartileOfResiduals((com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay) quantityWithDisplay50);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay54 = trendLineAnalysis0.MinValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay55 = trendLineAnalysis0.Intercept;
        org.junit.Assert.assertNull(channelMaterialType3);
        org.junit.Assert.assertNull(quantityWithDisplay4);
        org.junit.Assert.assertNull(instant5);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSSSSSZZZZZ" + "'", str8, "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSSSSSZZZZZ");
        org.junit.Assert.assertNotNull(dischargeChannelMeasurement12);
        org.junit.Assert.assertNotNull(locationRemark15);
        org.junit.Assert.assertNotNull(locationRemark18);
        org.junit.Assert.assertNotNull(instant20);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse21);
        org.junit.Assert.assertNotNull(dischargeChannelMeasurement24);
        org.junit.Assert.assertNotNull(volumetricDischargeActivity25);
        org.junit.Assert.assertNull(quantityWithDisplay26);
        org.junit.Assert.assertNotNull(pointVelocityDischargeActivity29);
        org.junit.Assert.assertNotNull(pointVelocityDischargeActivity33);
        org.junit.Assert.assertNotNull(pointVelocityDischargeActivity35);
        org.junit.Assert.assertNull(quantityWithDisplay41);
        org.junit.Assert.assertNotNull(crossSectionPoint43);
        org.junit.Assert.assertNotNull(crossSectionPoint45);
        org.junit.Assert.assertNotNull(quantityWithDisplay50);
        org.junit.Assert.assertNotNull(pointVelocityDischargeActivity51);
        org.junit.Assert.assertNotNull(volumetricDischargeActivity52);
        org.junit.Assert.assertNotNull(trendLineAnalysis53);
        org.junit.Assert.assertNull(doubleWithDisplay54);
        org.junit.Assert.assertNull(doubleWithDisplay55);
    }

    @Test
    public void test42700() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest85.test42700");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QualifierListServiceResponse qualifierListServiceResponse0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QualifierListServiceResponse();
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QualifierMetadata> qualifierMetadataList1 = null;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QualifierListServiceResponse qualifierListServiceResponse2 = qualifierListServiceResponse0.setQualifiers(qualifierMetadataList1);
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QualifierMetadata> qualifierMetadataList3 = qualifierListServiceResponse0.getQualifiers();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QualifierMetadata[] qualifierMetadataArray4 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QualifierMetadata[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QualifierMetadata> qualifierMetadataList5 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QualifierMetadata>();
        boolean boolean6 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QualifierMetadata>) qualifierMetadataList5, qualifierMetadataArray4);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QualifierListServiceResponse qualifierListServiceResponse7 = qualifierListServiceResponse0.setQualifiers(qualifierMetadataList5);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QualifierMetadata[] qualifierMetadataArray8 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QualifierMetadata[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QualifierMetadata> qualifierMetadataList9 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QualifierMetadata>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QualifierMetadata>) qualifierMetadataList9, qualifierMetadataArray8);
        qualifierListServiceResponse0.Qualifiers = qualifierMetadataList9;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QualifierListServiceResponse qualifierListServiceResponse12 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QualifierListServiceResponse();
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QualifierMetadata> qualifierMetadataList13 = null;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QualifierListServiceResponse qualifierListServiceResponse14 = qualifierListServiceResponse12.setQualifiers(qualifierMetadataList13);
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QualifierMetadata> qualifierMetadataList15 = qualifierListServiceResponse12.getQualifiers();
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QualifierMetadata> qualifierMetadataList16 = qualifierListServiceResponse12.Qualifiers;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QualifierListServiceResponse qualifierListServiceResponse17 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QualifierListServiceResponse();
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QualifierMetadata> qualifierMetadataList18 = null;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QualifierListServiceResponse qualifierListServiceResponse19 = qualifierListServiceResponse17.setQualifiers(qualifierMetadataList18);
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QualifierMetadata> qualifierMetadataList20 = qualifierListServiceResponse17.getQualifiers();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QualifierMetadata[] qualifierMetadataArray21 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QualifierMetadata[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QualifierMetadata> qualifierMetadataList22 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QualifierMetadata>();
        boolean boolean23 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QualifierMetadata>) qualifierMetadataList22, qualifierMetadataArray21);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QualifierListServiceResponse qualifierListServiceResponse24 = qualifierListServiceResponse17.setQualifiers(qualifierMetadataList22);
        qualifierListServiceResponse12.Qualifiers = qualifierMetadataList22;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QualifierListServiceResponse qualifierListServiceResponse26 = qualifierListServiceResponse0.setQualifiers(qualifierMetadataList22);
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QualifierMetadata> qualifierMetadataList27 = qualifierListServiceResponse0.getQualifiers();
        org.junit.Assert.assertNotNull(qualifierListServiceResponse2);
        org.junit.Assert.assertNull(qualifierMetadataList3);
        org.junit.Assert.assertNotNull(qualifierMetadataArray4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(qualifierListServiceResponse7);
        org.junit.Assert.assertNotNull(qualifierMetadataArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(qualifierListServiceResponse14);
        org.junit.Assert.assertNull(qualifierMetadataList15);
        org.junit.Assert.assertNull(qualifierMetadataList16);
        org.junit.Assert.assertNotNull(qualifierListServiceResponse19);
        org.junit.Assert.assertNull(qualifierMetadataList20);
        org.junit.Assert.assertNotNull(qualifierMetadataArray21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(qualifierListServiceResponse24);
        org.junit.Assert.assertNotNull(qualifierListServiceResponse26);
        org.junit.Assert.assertNotNull(qualifierMetadataList27);
    }

    @Test
    public void test42701() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest85.test42701");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Unit unit0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Unit();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Unit unit2 = unit0.setPluralName("MaxInstant");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Unit unit4 = unit0.setUnitIdentifier("/AQUARIUS/Acquisition/v2");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Unit unit6 = unit4.setBaseOffset((java.lang.Double) 10.0d);
        unit4.UnitIdentifier = "";
        org.junit.Assert.assertNotNull(unit2);
        org.junit.Assert.assertNotNull(unit4);
        org.junit.Assert.assertNotNull(unit6);
    }

    @Test
    public void test42702() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest85.test42702");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetStandardHistory getStandardHistory0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetStandardHistory();
        getStandardHistory0.Id = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ";
        java.lang.Object obj3 = getStandardHistory0.getResponseType();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetStandardHistory getStandardHistory5 = getStandardHistory0.setId("MinInstant");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetStandardHistory getStandardHistory7 = getStandardHistory0.setId("multipart/form-data; boundary=****5b5bcc49-98d5-445c-ae15-d7e16405ad8c****");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetStandardHistory getStandardHistory9 = getStandardHistory0.setId("multipart/form-data; boundary=****221f1588-b890-43c2-a3c8-0d77cfe54330****");
        org.junit.Assert.assertNotNull(obj3);
        org.junit.Assert.assertEquals(obj3.toString(), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$SearchResultAuditHistory");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj3), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$SearchResultAuditHistory");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj3), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$SearchResultAuditHistory");
        org.junit.Assert.assertNotNull(getStandardHistory5);
        org.junit.Assert.assertNotNull(getStandardHistory7);
        org.junit.Assert.assertNotNull(getStandardHistory9);
    }

    @Test
    public void test42703() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest85.test42703");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedTimeSeriesInfo timeAlignedTimeSeriesInfo0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedTimeSeriesInfo();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedTimeSeriesInfo timeAlignedTimeSeriesInfo2 = timeAlignedTimeSeriesInfo0.setLabel("multipart/form-data; boundary=****9fadde69-3f13-40c4-a87c-0f3f51c2dd35****");
        timeAlignedTimeSeriesInfo0.InterpolationType = "POST";
        org.junit.Assert.assertNotNull(timeAlignedTimeSeriesInfo2);
    }

    @Test
    public void test42704() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest85.test42704");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RoundServiceResponse roundServiceResponse0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RoundServiceResponse();
        java.util.ArrayList<java.lang.String> strList1 = roundServiceResponse0.getData();
        java.util.ArrayList<java.lang.String> strList2 = roundServiceResponse0.getData();
        java.util.ArrayList<java.lang.String> strList3 = roundServiceResponse0.getData();
        java.util.ArrayList<java.lang.String> strList4 = roundServiceResponse0.Data;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportSpecimens getExportSpecimens5 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportSpecimens();
        java.util.List<java.lang.String> strList6 = getExportSpecimens5.getActivityTypes();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Qualifier qualifier7 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Qualifier();
        java.time.Instant instant8 = qualifier7.DateApplied;
        java.lang.String str9 = qualifier7.User;
        java.lang.String str10 = qualifier7.getIdentifier();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest11 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest();
        java.lang.Object obj12 = timeAlignedDataServiceRequest11.getResponseType();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse13 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant14 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse15 = locationDescriptionListServiceResponse13.setNextToken(instant14);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest16 = timeAlignedDataServiceRequest11.setQueryFrom(instant14);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Qualifier qualifier17 = qualifier7.setDateApplied(instant14);
        getExportSpecimens5.Before = instant14;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationRemark locationRemark19 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationRemark();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationRemark locationRemark21 = locationRemark19.setDescription("MaxInstant");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitDataServiceResponse fieldVisitDataServiceResponse22 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitDataServiceResponse();
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CrossSectionSurveyActivity> crossSectionSurveyActivityList23 = fieldVisitDataServiceResponse22.CrossSectionSurveyActivity;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitDataServiceResponse fieldVisitDataServiceResponse25 = fieldVisitDataServiceResponse22.setIdentifier("");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary26 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        dischargeSummary26.Reviewer = "";
        java.time.Instant instant29 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        dischargeSummary26.MeasurementTime = instant29;
        fieldVisitDataServiceResponse22.ResponseTime = instant29;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationRemark locationRemark32 = locationRemark19.setCreateTime(instant29);
        getExportSpecimens5.EndModificationTime = instant29;
        java.util.List<java.lang.String> strList34 = getExportSpecimens5.getActivityIds();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetActivities getActivities35 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetActivities();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse36 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary37 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary39 = dischargeSummary37.setPublish((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse40 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant41 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse42 = locationDescriptionListServiceResponse40.setNextToken(instant41);
        dischargeSummary37.MeasurementTime = instant41;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse44 = locationDescriptionListServiceResponse36.setNextToken(instant41);
        java.time.Instant instant45 = locationDescriptionListServiceResponse36.getNextToken();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetActivities getActivities46 = getActivities35.setToStartTime(instant45);
        java.lang.String str47 = getActivities46.getSort();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetActivities getActivities49 = getActivities46.setLimit((java.lang.Integer) 1);
        getActivities49.Cursor = "";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest52 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_53 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray55 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList56 = new java.util.ArrayList<java.lang.String>();
        boolean boolean57 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList56, strArray55);
        getObservationsV2_53.SpecimenIds = strList56;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags59 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray63 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList64 = new java.util.ArrayList<java.lang.String>();
        boolean boolean65 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList64, strArray63);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags66 = putLocationTags59.setTagUniqueIds(strList64);
        getObservationsV2_53.QualityControlTypes = strList64;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest68 = timeAlignedDataServiceRequest52.setTimeSeriesUniqueIds(strList64);
        getActivities49.CollectionMethodIds = strList64;
        getExportSpecimens5.LaboratoryIds = strList64;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RoundServiceResponse roundServiceResponse71 = roundServiceResponse0.setData(strList64);
        java.util.ArrayList<java.lang.String> strList72 = roundServiceResponse0.Data;
        org.junit.Assert.assertNull(strList1);
        org.junit.Assert.assertNull(strList2);
        org.junit.Assert.assertNull(strList3);
        org.junit.Assert.assertNull(strList4);
        org.junit.Assert.assertNull(strList6);
        org.junit.Assert.assertNull(instant8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNotNull(obj12);
        org.junit.Assert.assertEquals(obj12.toString(), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj12), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj12), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertNotNull(instant14);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse15);
        org.junit.Assert.assertNotNull(timeAlignedDataServiceRequest16);
        org.junit.Assert.assertNotNull(qualifier17);
        org.junit.Assert.assertNotNull(locationRemark21);
        org.junit.Assert.assertNull(crossSectionSurveyActivityList23);
        org.junit.Assert.assertNotNull(fieldVisitDataServiceResponse25);
        org.junit.Assert.assertNotNull(instant29);
        org.junit.Assert.assertNotNull(locationRemark32);
        org.junit.Assert.assertNull(strList34);
        org.junit.Assert.assertNotNull(dischargeSummary39);
        org.junit.Assert.assertNotNull(instant41);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse42);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse44);
        org.junit.Assert.assertNotNull(instant45);
        org.junit.Assert.assertNotNull(getActivities46);
        org.junit.Assert.assertNull(str47);
        org.junit.Assert.assertNotNull(getActivities49);
        org.junit.Assert.assertNotNull(strArray55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertNotNull(strArray63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertNotNull(putLocationTags66);
        org.junit.Assert.assertNotNull(timeAlignedDataServiceRequest68);
        org.junit.Assert.assertNotNull(roundServiceResponse71);
        org.junit.Assert.assertNotNull(strList72);
    }

    @Test
    public void test42705() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest85.test42705");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSpecimen putSpecimen0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSpecimen();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSpecimen putSpecimen2 = putSpecimen0.setNumberOfRequestedObservations((java.lang.Integer) 4);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSpecimen putSpecimen4 = putSpecimen2.setDescription("-PT87591240H");
        java.lang.Object obj5 = putSpecimen4.getResponseType();
        putSpecimen4.NumberOfRequestedObservations = (-1);
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation> observationList8 = putSpecimen4.getObservations();
        java.lang.String str9 = putSpecimen4.getName();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Activity activity10 = putSpecimen4.getActivity();
        org.junit.Assert.assertNotNull(putSpecimen2);
        org.junit.Assert.assertNotNull(putSpecimen4);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$SpecimenWithObservations");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$SpecimenWithObservations");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$SpecimenWithObservations");
        org.junit.Assert.assertNull(observationList8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNull(activity10);
    }

    @Test
    public void test42706() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest85.test42706");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutLabAnalysisMethod putLabAnalysisMethod0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutLabAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Filter filter1 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Filter();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Filter filter3 = filter1.setId("2021.4.62.0");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Filter filter5 = filter3.setId("POST");
        filter5.Id = "https";
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty> observedPropertyList8 = filter5.getObservedProperties();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Filter filter10 = filter5.setCustomId("http://MaxDurationhttp/json/reply/Integer");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLabAnalysisMethod postLabAnalysisMethod11 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLabAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes12 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLabAnalysisMethod postLabAnalysisMethod13 = postLabAnalysisMethod11.setAuditAttributes(auditAttributes12);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty[] observedPropertyArray14 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty> observedPropertyList15 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty>) observedPropertyList15, observedPropertyArray14);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLabAnalysisMethod postLabAnalysisMethod17 = postLabAnalysisMethod13.setObservedProperties((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty>) observedPropertyList15);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes18 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLabAnalysisMethod postLabAnalysisMethod19 = postLabAnalysisMethod13.setAuditAttributes(auditAttributes18);
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty> observedPropertyList20 = postLabAnalysisMethod19.getObservedProperties();
        filter10.ObservedProperties = observedPropertyList20;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutLabAnalysisMethod putLabAnalysisMethod22 = putLabAnalysisMethod0.setObservedProperties(observedPropertyList20);
        java.lang.String str23 = putLabAnalysisMethod22.getContext();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabReport labReport24 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabReport();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Laboratory laboratory25 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Laboratory();
        laboratory25.Id = "MaxInstant";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Laboratory laboratory29 = laboratory25.setName("hi!:///AQUARIUS/Provisioning/v1");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabReport labReport30 = labReport24.setLaboratory(laboratory29);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes31 = labReport30.getAuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.IndexConfiguration indexConfiguration32 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.IndexConfiguration();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Unit unit33 = indexConfiguration32.Unit;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes34 = indexConfiguration32.AuditAttributes;
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.IndexRange> indexRangeList35 = indexConfiguration32.getIndexRanges();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.IndexConfiguration indexConfiguration37 = indexConfiguration32.setIssuingOrganization("MaxInstant");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Unit unit38 = indexConfiguration32.getUnit();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty observedProperty39 = indexConfiguration32.ObservedProperty;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UnitGroup unitGroup40 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UnitGroup();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostSamplingLocationGroup postSamplingLocationGroup41 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostSamplingLocationGroup();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes42 = postSamplingLocationGroup41.getAuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LocationGroupType locationGroupType43 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LocationGroupType();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes44 = locationGroupType43.getAuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LocationGroupType locationGroupType46 = locationGroupType43.setCustomId("yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ");
        postSamplingLocationGroup41.LocationGroupType = locationGroupType46;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostSamplingLocationGroup postSamplingLocationGroup49 = postSamplingLocationGroup41.setName("");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutAccessGroup putAccessGroup50 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutAccessGroup();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivity samplingPlanPlannedActivity51 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivity();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes52 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivity samplingPlanPlannedActivity53 = samplingPlanPlannedActivity51.setAuditAttributes(auditAttributes52);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes54 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes56 = auditAttributes54.setCreationUserProfileId("'.'SSSSSSS");
        samplingPlanPlannedActivity53.AuditAttributes = auditAttributes54;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes58 = samplingPlanPlannedActivity53.AuditAttributes;
        putAccessGroup50.AuditAttributes = auditAttributes58;
        postSamplingLocationGroup41.AuditAttributes = auditAttributes58;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UnitGroup unitGroup61 = unitGroup40.setAuditAttributes(auditAttributes58);
        indexConfiguration32.AuditAttributes = auditAttributes58;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabReport labReport63 = labReport30.setAuditAttributes(auditAttributes58);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutLabAnalysisMethod putLabAnalysisMethod64 = putLabAnalysisMethod22.setAuditAttributes(auditAttributes58);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes65 = putLabAnalysisMethod22.getAuditAttributes();
        java.lang.String str66 = putLabAnalysisMethod22.Context;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutLabAnalysisMethod putLabAnalysisMethod68 = putLabAnalysisMethod22.setContext("multipart/form-data; boundary=****c5ace73f-96fd-4e64-b844-d9edac3c6d02****");
        java.lang.String str69 = putLabAnalysisMethod68.Context;
        java.lang.String str70 = putLabAnalysisMethod68.Description;
        org.junit.Assert.assertNotNull(filter3);
        org.junit.Assert.assertNotNull(filter5);
        org.junit.Assert.assertNull(observedPropertyList8);
        org.junit.Assert.assertNotNull(filter10);
        org.junit.Assert.assertNotNull(postLabAnalysisMethod13);
        org.junit.Assert.assertNotNull(observedPropertyArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(postLabAnalysisMethod17);
        org.junit.Assert.assertNotNull(postLabAnalysisMethod19);
        org.junit.Assert.assertNotNull(observedPropertyList20);
        org.junit.Assert.assertNotNull(putLabAnalysisMethod22);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertNotNull(laboratory29);
        org.junit.Assert.assertNotNull(labReport30);
        org.junit.Assert.assertNull(auditAttributes31);
        org.junit.Assert.assertNull(unit33);
        org.junit.Assert.assertNull(auditAttributes34);
        org.junit.Assert.assertNull(indexRangeList35);
        org.junit.Assert.assertNotNull(indexConfiguration37);
        org.junit.Assert.assertNull(unit38);
        org.junit.Assert.assertNull(observedProperty39);
        org.junit.Assert.assertNull(auditAttributes42);
        org.junit.Assert.assertNull(auditAttributes44);
        org.junit.Assert.assertNotNull(locationGroupType46);
        org.junit.Assert.assertNotNull(postSamplingLocationGroup49);
        org.junit.Assert.assertNotNull(samplingPlanPlannedActivity53);
        org.junit.Assert.assertNotNull(auditAttributes56);
        org.junit.Assert.assertNotNull(auditAttributes58);
        org.junit.Assert.assertNotNull(unitGroup61);
        org.junit.Assert.assertNotNull(labReport63);
        org.junit.Assert.assertNotNull(putLabAnalysisMethod64);
        org.junit.Assert.assertNotNull(auditAttributes65);
        org.junit.Assert.assertNull(str66);
        org.junit.Assert.assertNotNull(putLabAnalysisMethod68);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "multipart/form-data; boundary=****c5ace73f-96fd-4e64-b844-d9edac3c6d02****" + "'", str69, "multipart/form-data; boundary=****c5ace73f-96fd-4e64-b844-d9edac3c6d02****");
        org.junit.Assert.assertNull(str70);
    }

    @Test
    public void test42707() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest85.test42707");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostActiveDirectoryUser postActiveDirectoryUser0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostActiveDirectoryUser();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostActiveDirectoryUser postActiveDirectoryUser2 = postActiveDirectoryUser0.setUserPrincipalName("multipart/form-data; boundary=****f642a130-eb6d-4fb6-a1a4-7c7216ab119b****");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostActiveDirectoryUser postActiveDirectoryUser4 = postActiveDirectoryUser0.setUserPrincipalName("MinInstant");
        postActiveDirectoryUser0.FirstName = "multipart/form-data; boundary=****c82cca4e-7755-4a00-8acf-9ac791c56995****";
        java.lang.Object obj7 = postActiveDirectoryUser0.getResponseType();
        java.lang.Boolean boolean8 = postActiveDirectoryUser0.CanLaunchRatingDevelopmentToolbox;
        org.junit.Assert.assertNotNull(postActiveDirectoryUser2);
        org.junit.Assert.assertNotNull(postActiveDirectoryUser4);
        org.junit.Assert.assertNotNull(obj7);
        org.junit.Assert.assertEquals(obj7.toString(), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning$User");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj7), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning$User");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj7), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning$User");
        org.junit.Assert.assertNull(boolean8);
    }

    @Test
    public void test42708() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest85.test42708");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabInstructionTemplate labInstructionTemplate0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabInstructionTemplate();
        java.lang.String str1 = labInstructionTemplate0.HoldingTime;
        labInstructionTemplate0.PreparationMethod = "/AQUARIUS/Provisioning/v1";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemAnalysisMethod importItemAnalysisMethod4 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemAnalysisMethod importItemAnalysisMethod6 = importItemAnalysisMethod4.setInput("POST");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemAnalysisMethod importItemAnalysisMethod8 = importItemAnalysisMethod6.setRowId("https");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod9 = importItemAnalysisMethod8.getExistingItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod10 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemAnalysisMethod importItemAnalysisMethod11 = importItemAnalysisMethod8.setItem(analysisMethod10);
        java.lang.String str12 = importItemAnalysisMethod8.RowId;
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportChangeItem> importChangeItemList13 = importItemAnalysisMethod8.ItemComparison;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod14 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod();
        java.lang.String str15 = analysisMethod14.getName();
        analysisMethod14.MethodId = "multipart/form-data; boundary=****f2ce0d54-dac7-4cd0-b74f-1024089261f9****";
        importItemAnalysisMethod8.Item = analysisMethod14;
        java.lang.String str19 = analysisMethod14.getMethodId();
        labInstructionTemplate0.AnalysisMethod = analysisMethod14;
        java.lang.String str21 = labInstructionTemplate0.Id;
        labInstructionTemplate0.AnalysisComment = "MinInstant";
        java.lang.String str24 = labInstructionTemplate0.getPreparationMethod();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(importItemAnalysisMethod6);
        org.junit.Assert.assertNotNull(importItemAnalysisMethod8);
        org.junit.Assert.assertNull(analysisMethod9);
        org.junit.Assert.assertNotNull(importItemAnalysisMethod11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "https" + "'", str12, "https");
        org.junit.Assert.assertNull(importChangeItemList13);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "multipart/form-data; boundary=****f2ce0d54-dac7-4cd0-b74f-1024089261f9****" + "'", str19, "multipart/form-data; boundary=****f2ce0d54-dac7-4cd0-b74f-1024089261f9****");
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "/AQUARIUS/Provisioning/v1" + "'", str24, "/AQUARIUS/Provisioning/v1");
    }

    @Test
    public void test42709() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest85.test42709");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Correction correction0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Correction();
        java.util.HashMap<java.lang.String, java.lang.Object> strMap1 = correction0.Parameters;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CorrectionProcessingOrder correctionProcessingOrder2 = correction0.getProcessingOrder();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CorrectionType correctionType3 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CorrectionType.Drift;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Correction correction4 = correction0.setType(correctionType3);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationExportIIV2 getObservationExportIIV2_5 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationExportIIV2();
        java.util.List<java.lang.String> strList6 = getObservationExportIIV2_5.getCollectionMethodIds();
        java.lang.String str7 = getObservationExportIIV2_5.getDepthUnitCustomId();
        java.time.Instant instant8 = getObservationExportIIV2_5.EndObservedTime;
        getObservationExportIIV2_5.Limit = 100;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationExportIIV2 getObservationExportIIV2_12 = getObservationExportIIV2_5.setCustomId("multipart/form-data; boundary=****d9f5d551-383a-4365-87fd-ae7094da6f3b****");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeTransactionListServiceRequest metadataChangeTransactionListServiceRequest13 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeTransactionListServiceRequest();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostRecurringReport postRecurringReport14 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostRecurringReport();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary15 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        dischargeSummary15.Reviewer = "";
        java.time.Instant instant18 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        dischargeSummary15.MeasurementTime = instant18;
        postRecurringReport14.NextGenerationDate = instant18;
        java.time.Instant instant21 = postRecurringReport14.getNextGenerationDate();
        java.lang.String str22 = com.aquaticinformatics.aquarius.sdk.samples.serializers.InstantSerializer.format(instant21);
        metadataChangeTransactionListServiceRequest13.QueryFrom = instant21;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationExportIIV2 getObservationExportIIV2_24 = getObservationExportIIV2_5.setEndModificationTime(instant21);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DeleteFieldVisits deleteFieldVisits25 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DeleteFieldVisits();
        java.lang.String str26 = deleteFieldVisits25.Sort;
        deleteFieldVisits25.Sort = "9999-12-31T23:59:59.999Z";
        java.time.Instant instant29 = deleteFieldVisits25.EndStartTime;
        java.util.List<java.lang.String> strList30 = deleteFieldVisits25.getPlanningStatuses();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_31 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.util.List<java.lang.String> strList32 = getObservationsV2_31.SamplingContextTagIds;
        java.time.Instant instant33 = getObservationsV2_31.getEndModificationTime();
        java.util.List<java.lang.String> strList34 = getObservationsV2_31.Media;
        java.util.List<java.lang.String> strList35 = getObservationsV2_31.ActivityTypes;
        java.util.List<java.lang.String> strList36 = getObservationsV2_31.getLabResultLaboratoryIds();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_37 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray39 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList40 = new java.util.ArrayList<java.lang.String>();
        boolean boolean41 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList40, strArray39);
        getObservationsV2_37.SpecimenIds = strList40;
        getObservationsV2_31.LabResultLabAnalysisMethodIds = strList40;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DeleteFieldVisits deleteFieldVisits44 = deleteFieldVisits25.setFieldTripIds((java.util.List<java.lang.String>) strList40);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationExportIIV2 getObservationExportIIV2_45 = getObservationExportIIV2_5.setMedia((java.util.List<java.lang.String>) strList40);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetChartDataV2 getChartDataV2_46 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetChartDataV2();
        getChartDataV2_46.DetectionCondition = "/AQUARIUS/Acquisition/v2://9999-12-31T23:59:59.999Z";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.LocationDatumPeriod locationDatumPeriod49 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.LocationDatumPeriod();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.LocationDatumPeriodBase locationDatumPeriodBase51 = locationDatumPeriod49.setComment("'.'SSSSSSS");
        java.lang.String str52 = locationDatumPeriodBase51.Method;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse53 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant54 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse55 = locationDescriptionListServiceResponse53.setNextToken(instant54);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.LocationDatumPeriodBase locationDatumPeriodBase56 = locationDatumPeriodBase51.setValidFrom(instant54);
        getChartDataV2_46.StartModificationTime = instant54;
        getObservationExportIIV2_5.EndObservedTime = instant54;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Correction correction59 = correction4.setStartTime(instant54);
        org.junit.Assert.assertNull(strMap1);
        org.junit.Assert.assertNull(correctionProcessingOrder2);
        org.junit.Assert.assertTrue("'" + correctionType3 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CorrectionType.Drift + "'", correctionType3.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CorrectionType.Drift));
        org.junit.Assert.assertNotNull(correction4);
        org.junit.Assert.assertNull(strList6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(instant8);
        org.junit.Assert.assertNotNull(getObservationExportIIV2_12);
        org.junit.Assert.assertNotNull(instant18);
        org.junit.Assert.assertNotNull(instant21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "9999-12-31T23:59:59.999Z" + "'", str22, "9999-12-31T23:59:59.999Z");
        org.junit.Assert.assertNotNull(getObservationExportIIV2_24);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertNull(instant29);
        org.junit.Assert.assertNull(strList30);
        org.junit.Assert.assertNull(strList32);
        org.junit.Assert.assertNull(instant33);
        org.junit.Assert.assertNull(strList34);
        org.junit.Assert.assertNull(strList35);
        org.junit.Assert.assertNull(strList36);
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(deleteFieldVisits44);
        org.junit.Assert.assertNotNull(getObservationExportIIV2_45);
        org.junit.Assert.assertNotNull(locationDatumPeriodBase51);
        org.junit.Assert.assertNull(str52);
        org.junit.Assert.assertNotNull(instant54);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse55);
        org.junit.Assert.assertNotNull(locationDatumPeriodBase56);
        org.junit.Assert.assertNotNull(correction59);
    }

    @Test
    public void test42710() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest85.test42710");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostSamplingLocationGroup postSamplingLocationGroup0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostSamplingLocationGroup();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes1 = postSamplingLocationGroup0.getAuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LocationGroupType locationGroupType2 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LocationGroupType();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes3 = locationGroupType2.getAuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LocationGroupType locationGroupType5 = locationGroupType2.setCustomId("yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ");
        postSamplingLocationGroup0.LocationGroupType = locationGroupType5;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostSamplingLocationGroup postSamplingLocationGroup8 = postSamplingLocationGroup0.setName("");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutAccessGroup putAccessGroup9 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutAccessGroup();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivity samplingPlanPlannedActivity10 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivity();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes11 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivity samplingPlanPlannedActivity12 = samplingPlanPlannedActivity10.setAuditAttributes(auditAttributes11);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes13 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes15 = auditAttributes13.setCreationUserProfileId("'.'SSSSSSS");
        samplingPlanPlannedActivity12.AuditAttributes = auditAttributes13;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes17 = samplingPlanPlannedActivity12.AuditAttributes;
        putAccessGroup9.AuditAttributes = auditAttributes17;
        postSamplingLocationGroup0.AuditAttributes = auditAttributes17;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LocationGroupType locationGroupType20 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LocationGroupType();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes21 = locationGroupType20.getAuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LocationGroupType locationGroupType23 = locationGroupType20.setCustomId("yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostSamplingLocationGroup postSamplingLocationGroup24 = postSamplingLocationGroup0.setLocationGroupType(locationGroupType23);
        java.lang.String str25 = postSamplingLocationGroup0.getDescription();
        java.lang.String str26 = postSamplingLocationGroup0.Description;
        org.junit.Assert.assertNull(auditAttributes1);
        org.junit.Assert.assertNull(auditAttributes3);
        org.junit.Assert.assertNotNull(locationGroupType5);
        org.junit.Assert.assertNotNull(postSamplingLocationGroup8);
        org.junit.Assert.assertNotNull(samplingPlanPlannedActivity12);
        org.junit.Assert.assertNotNull(auditAttributes15);
        org.junit.Assert.assertNotNull(auditAttributes17);
        org.junit.Assert.assertNull(auditAttributes21);
        org.junit.Assert.assertNotNull(locationGroupType23);
        org.junit.Assert.assertNotNull(postSamplingLocationGroup24);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertNull(str26);
    }

    @Test
    public void test42711() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest85.test42711");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SearchResultTimeZone searchResultTimeZone0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SearchResultTimeZone();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.TimeZone[] timeZoneArray1 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.TimeZone[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.TimeZone> timeZoneList2 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.TimeZone>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.TimeZone>) timeZoneList2, timeZoneArray1);
        searchResultTimeZone0.DomainObjects = timeZoneList2;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SearchResultTimeZone searchResultTimeZone5 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SearchResultTimeZone();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.TimeZone[] timeZoneArray6 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.TimeZone[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.TimeZone> timeZoneList7 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.TimeZone>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.TimeZone>) timeZoneList7, timeZoneArray6);
        searchResultTimeZone5.DomainObjects = timeZoneList7;
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.TimeZone> timeZoneList10 = searchResultTimeZone5.DomainObjects;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SearchResultTimeZone searchResultTimeZone11 = searchResultTimeZone0.setDomainObjects(timeZoneList10);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SearchResultTimeZone searchResultTimeZone12 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SearchResultTimeZone();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.TimeZone[] timeZoneArray13 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.TimeZone[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.TimeZone> timeZoneList14 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.TimeZone>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.TimeZone>) timeZoneList14, timeZoneArray13);
        searchResultTimeZone12.DomainObjects = timeZoneList14;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SearchResultTimeZone searchResultTimeZone17 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SearchResultTimeZone();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.TimeZone[] timeZoneArray18 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.TimeZone[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.TimeZone> timeZoneList19 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.TimeZone>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.TimeZone>) timeZoneList19, timeZoneArray18);
        searchResultTimeZone17.DomainObjects = timeZoneList19;
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.TimeZone> timeZoneList22 = searchResultTimeZone17.DomainObjects;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SearchResultTimeZone searchResultTimeZone23 = searchResultTimeZone12.setDomainObjects(timeZoneList22);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SearchResultTimeZone searchResultTimeZone24 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SearchResultTimeZone();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.TimeZone[] timeZoneArray25 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.TimeZone[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.TimeZone> timeZoneList26 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.TimeZone>();
        boolean boolean27 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.TimeZone>) timeZoneList26, timeZoneArray25);
        searchResultTimeZone24.DomainObjects = timeZoneList26;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SearchResultTimeZone searchResultTimeZone29 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SearchResultTimeZone();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.TimeZone[] timeZoneArray30 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.TimeZone[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.TimeZone> timeZoneList31 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.TimeZone>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.TimeZone>) timeZoneList31, timeZoneArray30);
        searchResultTimeZone29.DomainObjects = timeZoneList31;
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.TimeZone> timeZoneList34 = searchResultTimeZone29.DomainObjects;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SearchResultTimeZone searchResultTimeZone35 = searchResultTimeZone24.setDomainObjects(timeZoneList34);
        searchResultTimeZone23.DomainObjects = timeZoneList34;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SearchResultTimeZone searchResultTimeZone37 = searchResultTimeZone11.setDomainObjects(timeZoneList34);
        searchResultTimeZone11.Cursor = "2021.8.9990";
        org.junit.Assert.assertNotNull(timeZoneArray1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(timeZoneArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(timeZoneList10);
        org.junit.Assert.assertNotNull(searchResultTimeZone11);
        org.junit.Assert.assertNotNull(timeZoneArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(timeZoneArray18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(timeZoneList22);
        org.junit.Assert.assertNotNull(searchResultTimeZone23);
        org.junit.Assert.assertNotNull(timeZoneArray25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(timeZoneArray30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(timeZoneList34);
        org.junit.Assert.assertNotNull(searchResultTimeZone35);
        org.junit.Assert.assertNotNull(searchResultTimeZone37);
    }

    @Test
    public void test42712() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest85.test42712");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple standardSimple0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple();
        com.aquaticinformatics.aquarius.sdk.samples.Interval interval1 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple standardSimple2 = standardSimple0.setApplicabilityRange(interval1);
        java.lang.String str3 = standardSimple0.getCustomId();
        com.aquaticinformatics.aquarius.sdk.samples.Interval interval4 = standardSimple0.getApplicabilityRange();
        standardSimple0.Name = "/AQUARIUS/Provisioning/v1";
        java.lang.String str7 = standardSimple0.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple standardSimple9 = standardSimple0.setActive((java.lang.Boolean) false);
        standardSimple9.Description = "multipart/form-data; boundary=****5d34e306-630a-492f-8c84-1002d981f2f0****";
        org.junit.Assert.assertNotNull(standardSimple2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(interval4);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(standardSimple9);
    }

    @Test
    public void test42713() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest85.test42713");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetUser getUser0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetUser();
        getUser0.Id = "multipart/form-data; boundary=****2917d69a-62fa-41ce-b981-4dbe2deab9f5****";
        getUser0.Id = "multipart/form-data; boundary=****231224c4-98ce-4e30-bd65-1d25287c4abe****";
        getUser0.Id = "2021.8.9990";
        java.lang.String str7 = getUser0.getId();
        java.lang.String str8 = getUser0.getId();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "2021.8.9990" + "'", str7, "2021.8.9990");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "2021.8.9990" + "'", str8, "2021.8.9990");
    }

    @Test
    public void test42714() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest85.test42714");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutLabAnalysisMethod putLabAnalysisMethod0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutLabAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostAnalysisMethod postAnalysisMethod1 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostAnalysisMethod();
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple> importHistoryEventSimpleList2 = postAnalysisMethod1.ImportHistoryEventSimples;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLabAnalysisMethod postLabAnalysisMethod3 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLabAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes4 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLabAnalysisMethod postLabAnalysisMethod5 = postLabAnalysisMethod3.setAuditAttributes(auditAttributes4);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty[] observedPropertyArray6 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty> observedPropertyList7 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty>) observedPropertyList7, observedPropertyArray6);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLabAnalysisMethod postLabAnalysisMethod9 = postLabAnalysisMethod5.setObservedProperties((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty>) observedPropertyList7);
        postAnalysisMethod1.ObservedProperties = observedPropertyList7;
        java.lang.String str11 = postAnalysisMethod1.MethodId;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostAnalysisMethod postAnalysisMethod12 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostAnalysisMethod();
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple> importHistoryEventSimpleList13 = postAnalysisMethod12.ImportHistoryEventSimples;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLabAnalysisMethod postLabAnalysisMethod14 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLabAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes15 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLabAnalysisMethod postLabAnalysisMethod16 = postLabAnalysisMethod14.setAuditAttributes(auditAttributes15);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty[] observedPropertyArray17 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty> observedPropertyList18 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty>) observedPropertyList18, observedPropertyArray17);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLabAnalysisMethod postLabAnalysisMethod20 = postLabAnalysisMethod16.setObservedProperties((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty>) observedPropertyList18);
        postAnalysisMethod12.ObservedProperties = observedPropertyList18;
        postAnalysisMethod1.ObservedProperties = observedPropertyList18;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutLabAnalysisMethod putLabAnalysisMethod23 = putLabAnalysisMethod0.setObservedProperties((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty>) observedPropertyList18);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes24 = putLabAnalysisMethod0.AuditAttributes;
        putLabAnalysisMethod0.MethodId = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutLabAnalysisMethod putLabAnalysisMethod28 = putLabAnalysisMethod0.setName("");
        org.junit.Assert.assertNull(importHistoryEventSimpleList2);
        org.junit.Assert.assertNotNull(postLabAnalysisMethod5);
        org.junit.Assert.assertNotNull(observedPropertyArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(postLabAnalysisMethod9);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNull(importHistoryEventSimpleList13);
        org.junit.Assert.assertNotNull(postLabAnalysisMethod16);
        org.junit.Assert.assertNotNull(observedPropertyArray17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(postLabAnalysisMethod20);
        org.junit.Assert.assertNotNull(putLabAnalysisMethod23);
        org.junit.Assert.assertNull(auditAttributes24);
        org.junit.Assert.assertNotNull(putLabAnalysisMethod28);
    }

    @Test
    public void test42715() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest85.test42715");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostActiveDirectoryUser postActiveDirectoryUser0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostActiveDirectoryUser();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostActiveDirectoryUser postActiveDirectoryUser2 = postActiveDirectoryUser0.setUserPrincipalName("multipart/form-data; boundary=****f642a130-eb6d-4fb6-a1a4-7c7216ab119b****");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostActiveDirectoryUser postActiveDirectoryUser4 = postActiveDirectoryUser2.setActiveDirectorySid("multipart/form-data; boundary=****2917d69a-62fa-41ce-b981-4dbe2deab9f5****");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostActiveDirectoryUser postActiveDirectoryUser6 = postActiveDirectoryUser4.setActiveDirectorySid("multipart/form-data; boundary=****3dee2050-7d6c-400f-bd51-383a1324f5dd****");
        java.lang.Object obj7 = postActiveDirectoryUser4.getResponseType();
        org.junit.Assert.assertNotNull(postActiveDirectoryUser2);
        org.junit.Assert.assertNotNull(postActiveDirectoryUser4);
        org.junit.Assert.assertNotNull(postActiveDirectoryUser6);
        org.junit.Assert.assertNotNull(obj7);
        org.junit.Assert.assertEquals(obj7.toString(), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning$User");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj7), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning$User");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj7), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning$User");
    }

    @Test
    public void test42716() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest85.test42716");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemTaxon importItemTaxon0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemTaxon();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemTaxon importItemTaxon2 = importItemTaxon0.setRowId("/AQUARIUS/Provisioning/v1");
        java.lang.String str3 = importItemTaxon0.getRowId();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Inspection inspection4 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Inspection();
        java.lang.String str5 = inspection4.Comments;
        java.time.Instant instant6 = inspection4.getTime();
        java.lang.String str7 = inspection4.getComments();
        java.lang.String str8 = inspection4.getComments();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Inspection inspection10 = inspection4.setSubLocationIdentifier("multipart/form-data; boundary=****59879c02-0839-4b96-bc41-a13ebb706be4****");
        importItemTaxon0.Errors = inspection4;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Taxon taxon12 = importItemTaxon0.getItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemTaxon importItemTaxon13 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemTaxon();
        java.util.List<java.lang.String> strList14 = importItemTaxon13.getWarningMessages();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Taxon taxon15 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemTaxon importItemTaxon16 = importItemTaxon13.setItem(taxon15);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostCalculatedDerivedTimeSeries postCalculatedDerivedTimeSeries17 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostCalculatedDerivedTimeSeries();
        java.lang.String str18 = postCalculatedDerivedTimeSeries17.LocationUniqueId;
        java.util.List<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeValue> extendedAttributeValueList19 = postCalculatedDerivedTimeSeries17.getExtendedAttributeValues();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemTaxon importItemTaxon20 = importItemTaxon16.setErrors((java.lang.Object) postCalculatedDerivedTimeSeries17);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObject importItemObject21 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObject();
        java.util.List<java.lang.String> strList22 = importItemObject21.getWarningMessages();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportChangeItem[] importChangeItemArray23 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportChangeItem[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportChangeItem> importChangeItemList24 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportChangeItem>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportChangeItem>) importChangeItemList24, importChangeItemArray23);
        importItemObject21.ItemComparison = importChangeItemList24;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags27 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray31 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList32 = new java.util.ArrayList<java.lang.String>();
        boolean boolean33 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList32, strArray31);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags34 = putLocationTags27.setTagUniqueIds(strList32);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObject importItemObject35 = importItemObject21.setExistingItem((java.lang.Object) putLocationTags27);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.OpenIdConnectUser openIdConnectUser36 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.OpenIdConnectUser();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.OpenIdConnectUser openIdConnectUser38 = openIdConnectUser36.setIdentifier("");
        java.lang.Boolean boolean39 = openIdConnectUser38.CanConfigureSystem;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObject importItemObject40 = importItemObject21.setErrors((java.lang.Object) openIdConnectUser38);
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportChangeItem> importChangeItemList41 = importItemObject40.ItemComparison;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemTaxon importItemTaxon42 = importItemTaxon20.setItemComparison(importChangeItemList41);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemTaxon importItemTaxon43 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemTaxon();
        java.util.List<java.lang.String> strList44 = importItemTaxon43.getWarningMessages();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Taxon taxon45 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemTaxon importItemTaxon46 = importItemTaxon43.setItem(taxon45);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostCalculatedDerivedTimeSeries postCalculatedDerivedTimeSeries47 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostCalculatedDerivedTimeSeries();
        java.lang.String str48 = postCalculatedDerivedTimeSeries47.LocationUniqueId;
        java.util.List<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeValue> extendedAttributeValueList49 = postCalculatedDerivedTimeSeries47.getExtendedAttributeValues();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemTaxon importItemTaxon50 = importItemTaxon46.setErrors((java.lang.Object) postCalculatedDerivedTimeSeries47);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Taxon taxon51 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Taxon();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemTaxon importItemTaxon52 = importItemTaxon46.setExistingItem(taxon51);
        importItemTaxon20.Item = taxon51;
        taxon51.ItisTsn = "yyyy'-'MM'-'dd'T'HH':'mm':'ss";
        taxon51.ItisTsn = "MaxDuration";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutUnit putUnit58 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutUnit();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes59 = putUnit58.getAuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutDetectioncondition putDetectioncondition60 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutDetectioncondition();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes61 = putDetectioncondition60.getAuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutDetectioncondition putDetectioncondition63 = putDetectioncondition60.setCustomId("http");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivity samplingPlanPlannedActivity64 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivity();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes65 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivity samplingPlanPlannedActivity66 = samplingPlanPlannedActivity64.setAuditAttributes(auditAttributes65);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes67 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes69 = auditAttributes67.setCreationUserProfileId("'.'SSSSSSS");
        samplingPlanPlannedActivity66.AuditAttributes = auditAttributes67;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes71 = samplingPlanPlannedActivity66.AuditAttributes;
        putDetectioncondition60.AuditAttributes = auditAttributes71;
        putUnit58.AuditAttributes = auditAttributes71;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes75 = auditAttributes71.setCreationUserProfileId("http");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Taxon taxon76 = taxon51.setAuditAttributes(auditAttributes75);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes77 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Taxon taxon78 = taxon76.setAuditAttributes(auditAttributes77);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.TaxonomyLevel taxonomyLevel79 = taxon78.TaxonomyLevel;
        java.lang.String str80 = taxon78.getCommonName();
        importItemTaxon0.Item = taxon78;
        org.junit.Assert.assertNotNull(importItemTaxon2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "/AQUARIUS/Provisioning/v1" + "'", str3, "/AQUARIUS/Provisioning/v1");
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(instant6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(inspection10);
        org.junit.Assert.assertNull(taxon12);
        org.junit.Assert.assertNull(strList14);
        org.junit.Assert.assertNotNull(importItemTaxon16);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNull(extendedAttributeValueList19);
        org.junit.Assert.assertNotNull(importItemTaxon20);
        org.junit.Assert.assertNull(strList22);
        org.junit.Assert.assertNotNull(importChangeItemArray23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(putLocationTags34);
        org.junit.Assert.assertNotNull(importItemObject35);
        org.junit.Assert.assertNotNull(openIdConnectUser38);
        org.junit.Assert.assertNull(boolean39);
        org.junit.Assert.assertNotNull(importItemObject40);
        org.junit.Assert.assertNotNull(importChangeItemList41);
        org.junit.Assert.assertNotNull(importItemTaxon42);
        org.junit.Assert.assertNull(strList44);
        org.junit.Assert.assertNotNull(importItemTaxon46);
        org.junit.Assert.assertNull(str48);
        org.junit.Assert.assertNull(extendedAttributeValueList49);
        org.junit.Assert.assertNotNull(importItemTaxon50);
        org.junit.Assert.assertNotNull(importItemTaxon52);
        org.junit.Assert.assertNull(auditAttributes59);
        org.junit.Assert.assertNull(auditAttributes61);
        org.junit.Assert.assertNotNull(putDetectioncondition63);
        org.junit.Assert.assertNotNull(samplingPlanPlannedActivity66);
        org.junit.Assert.assertNotNull(auditAttributes69);
        org.junit.Assert.assertNotNull(auditAttributes71);
        org.junit.Assert.assertNotNull(auditAttributes75);
        org.junit.Assert.assertNotNull(taxon76);
        org.junit.Assert.assertNotNull(taxon78);
        org.junit.Assert.assertNull(taxonomyLevel79);
        org.junit.Assert.assertNull(str80);
    }

    @Test
    public void test42717() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest85.test42717");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetChartDataV2 getChartDataV2_0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetChartDataV2();
        java.util.List<java.lang.String> strList1 = getChartDataV2_0.getProjectIds();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest2 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_3 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray5 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList6 = new java.util.ArrayList<java.lang.String>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList6, strArray5);
        getObservationsV2_3.SpecimenIds = strList6;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags9 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray13 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList14 = new java.util.ArrayList<java.lang.String>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList14, strArray13);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags16 = putLocationTags9.setTagUniqueIds(strList14);
        getObservationsV2_3.QualityControlTypes = strList14;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest18 = timeAlignedDataServiceRequest2.setTimeSeriesUniqueIds(strList14);
        getChartDataV2_0.ActivityIds = strList14;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostExtendedAttribute postExtendedAttribute20 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostExtendedAttribute();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.EditableExtendedAttribute editableExtendedAttribute22 = postExtendedAttribute20.setDefaultValue("https");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetFieldVisits getFieldVisits23 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetFieldVisits();
        java.util.List<java.lang.String> strList24 = getFieldVisits23.getSamplingLocationIds();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags25 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray29 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList30 = new java.util.ArrayList<java.lang.String>();
        boolean boolean31 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList30, strArray29);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags32 = putLocationTags25.setTagUniqueIds(strList30);
        java.util.ArrayList<java.lang.String> strList33 = putLocationTags32.TagUniqueIds;
        getFieldVisits23.ScheduleIds = strList33;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.EditableExtendedAttribute editableExtendedAttribute35 = editableExtendedAttribute22.setPickListValues(strList33);
        java.util.ArrayList<java.lang.String> strList36 = editableExtendedAttribute35.getPickListValues();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetChartDataV2 getChartDataV2_37 = getChartDataV2_0.setAnalyticalGroupIds((java.util.List<java.lang.String>) strList36);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricResult metricResult38 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricResult();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExtendedAttributeDropdownlistitems getExtendedAttributeDropdownlistitems39 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExtendedAttributeDropdownlistitems();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_40 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.util.List<java.lang.String> strList41 = getObservationsV2_40.SamplingContextTagIds;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_42 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray44 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList45 = new java.util.ArrayList<java.lang.String>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList45, strArray44);
        getObservationsV2_42.SpecimenIds = strList45;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags48 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray52 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList53 = new java.util.ArrayList<java.lang.String>();
        boolean boolean54 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList53, strArray52);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags55 = putLocationTags48.setTagUniqueIds(strList53);
        getObservationsV2_42.QualityControlTypes = strList53;
        getObservationsV2_40.ResultGrades = strList53;
        getExtendedAttributeDropdownlistitems39.Search = strList53;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricResult metricResult59 = metricResult38.setMatchedObservations((java.util.List<java.lang.String>) strList53);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricResult metricResult61 = metricResult59.setOverriddenByUser((java.lang.Boolean) false);
        java.util.List<java.lang.String> strList62 = metricResult59.MatchedObservations;
        java.util.List<java.lang.String> strList63 = metricResult59.MatchedObservations;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetChartDataV2 getChartDataV2_64 = getChartDataV2_0.setSamplingLocationIds(strList63);
        java.util.List<java.lang.String> strList65 = getChartDataV2_64.getAnalysisMethodIds();
        java.util.List<java.lang.String> strList66 = getChartDataV2_64.getResultStatuses();
        getChartDataV2_64.DepthUnitCustomId = "multipart/form-data; boundary=****3dee2050-7d6c-400f-bd51-383a1324f5dd****";
        java.lang.Double double69 = getChartDataV2_64.DepthValue;
        org.junit.Assert.assertNull(strList1);
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(putLocationTags16);
        org.junit.Assert.assertNotNull(timeAlignedDataServiceRequest18);
        org.junit.Assert.assertNotNull(editableExtendedAttribute22);
        org.junit.Assert.assertNull(strList24);
        org.junit.Assert.assertNotNull(strArray29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(putLocationTags32);
        org.junit.Assert.assertNotNull(strList33);
        org.junit.Assert.assertNotNull(editableExtendedAttribute35);
        org.junit.Assert.assertNotNull(strList36);
        org.junit.Assert.assertNotNull(getChartDataV2_37);
        org.junit.Assert.assertNull(strList41);
        org.junit.Assert.assertNotNull(strArray44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(strArray52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(putLocationTags55);
        org.junit.Assert.assertNotNull(metricResult59);
        org.junit.Assert.assertNotNull(metricResult61);
        org.junit.Assert.assertNotNull(strList62);
        org.junit.Assert.assertNotNull(strList63);
        org.junit.Assert.assertNotNull(getChartDataV2_64);
        org.junit.Assert.assertNull(strList65);
        org.junit.Assert.assertNull(strList66);
        org.junit.Assert.assertNull(double69);
    }

    @Test
    public void test42718() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest85.test42718");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity pointVelocityDischargeActivity0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity();
        java.lang.String str1 = pointVelocityDischargeActivity0.getModel();
        java.lang.String str2 = pointVelocityDischargeActivity0.getFirmwareVersion();
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Vertical> verticalList3 = pointVelocityDischargeActivity0.Verticals;
        java.lang.String str4 = pointVelocityDischargeActivity0.SerialNumber;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity pointVelocityDischargeActivity6 = pointVelocityDischargeActivity0.setIsValid((java.lang.Boolean) true);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay7 = pointVelocityDischargeActivity6.MeanObservationDurationInSeconds;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity pointVelocityDischargeActivity9 = pointVelocityDischargeActivity6.setModel("9999-12-31T23:59:59.9999999Z");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity pointVelocityDischargeActivity11 = pointVelocityDischargeActivity6.setNumberOfPanels((java.lang.Integer) 0);
        java.lang.Boolean boolean12 = pointVelocityDischargeActivity6.MethodCoefficientUsed;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(verticalList3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNotNull(pointVelocityDischargeActivity6);
        org.junit.Assert.assertNull(doubleWithDisplay7);
        org.junit.Assert.assertNotNull(pointVelocityDischargeActivity9);
        org.junit.Assert.assertNotNull(pointVelocityDischargeActivity11);
        org.junit.Assert.assertNull(boolean12);
    }

    @Test
    public void test42719() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest85.test42719");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportSummaryObservation importSummaryObservation0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportSummaryObservation();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportSummaryObservation importSummaryObservation2 = importSummaryObservation0.setSummaryReportText("multipart/form-data; boundary=****bbcf5f9e-6ccf-4b63-91ab-6e645caf02af****");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportSummaryObservation importSummaryObservation4 = importSummaryObservation2.setSuccessCount((java.lang.Integer) 2);
        java.lang.String str5 = importSummaryObservation2.SummaryReportText;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple importHistoryEventSimple6 = importSummaryObservation2.ImportHistoryEventSimple;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple importHistoryEventSimple7 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportSummaryObservation importSummaryObservation8 = importSummaryObservation2.setImportHistoryEventSimple(importHistoryEventSimple7);
        java.lang.Integer int9 = importSummaryObservation8.getExpectedCount();
        org.junit.Assert.assertNotNull(importSummaryObservation2);
        org.junit.Assert.assertNotNull(importSummaryObservation4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "multipart/form-data; boundary=****bbcf5f9e-6ccf-4b63-91ab-6e645caf02af****" + "'", str5, "multipart/form-data; boundary=****bbcf5f9e-6ccf-4b63-91ab-6e645caf02af****");
        org.junit.Assert.assertNull(importHistoryEventSimple6);
        org.junit.Assert.assertNotNull(importSummaryObservation8);
        org.junit.Assert.assertNull(int9);
    }

    @Test
    public void test42720() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest85.test42720");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostDetectioncondition postDetectioncondition0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostDetectioncondition();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes1 = postDetectioncondition0.getAuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostDetectioncondition postDetectioncondition3 = postDetectioncondition0.setId("9999-12-31T23:59:59.999Z");
        postDetectioncondition0.Description = "9999-12-31T23:59:59.999Z";
        postDetectioncondition0.CustomId = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSSSSSZZZZZ";
        java.lang.String str8 = postDetectioncondition0.getCustomId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes9 = postDetectioncondition0.getAuditAttributes();
        java.lang.String str10 = postDetectioncondition0.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostDetectioncondition postDetectioncondition12 = postDetectioncondition0.setDescription("multipart/form-data; boundary=****a54f0925-41ba-40d4-82e5-209be7037efb****");
        org.junit.Assert.assertNull(auditAttributes1);
        org.junit.Assert.assertNotNull(postDetectioncondition3);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSSSSSZZZZZ" + "'", str8, "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSSSSSZZZZZ");
        org.junit.Assert.assertNull(auditAttributes9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "9999-12-31T23:59:59.999Z" + "'", str10, "9999-12-31T23:59:59.999Z");
        org.junit.Assert.assertNotNull(postDetectioncondition12);
    }

    @Test
    public void test42721() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest85.test42721");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutBulkEditResultGradesV2 putBulkEditResultGradesV2_0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutBulkEditResultGradesV2();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_1 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String str2 = getObservationsV2_1.getCustomId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_3 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray5 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList6 = new java.util.ArrayList<java.lang.String>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList6, strArray5);
        getObservationsV2_3.SpecimenIds = strList6;
        getObservationsV2_1.ProjectIds = strList6;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutBulkEditResultGradesV2 putBulkEditResultGradesV2_10 = putBulkEditResultGradesV2_0.setTaxonIds((java.util.List<java.lang.String>) strList6);
        java.util.List<java.lang.String> strList11 = putBulkEditResultGradesV2_0.getResultStatuses();
        java.lang.Double double12 = putBulkEditResultGradesV2_0.DepthValue;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObservation importItemObservation13 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObservation();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest14 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest();
        java.lang.Object obj15 = timeAlignedDataServiceRequest14.getResponseType();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse16 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant17 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse18 = locationDescriptionListServiceResponse16.setNextToken(instant17);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest19 = timeAlignedDataServiceRequest14.setQueryFrom(instant17);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags20 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray24 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList25 = new java.util.ArrayList<java.lang.String>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList25, strArray24);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags27 = putLocationTags20.setTagUniqueIds(strList25);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest28 = timeAlignedDataServiceRequest14.setTimeSeriesOutputUnitIds(strList25);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObservation importItemObservation29 = importItemObservation13.setFields((java.util.List<java.lang.String>) strList25);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemStatusType importItemStatusType30 = importItemObservation13.Status;
        java.util.List<java.lang.String> strList31 = importItemObservation13.getFields();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutBulkEditResultGradesV2 putBulkEditResultGradesV2_32 = putBulkEditResultGradesV2_0.setLabResultLaboratoryIds(strList31);
        java.util.List<java.lang.String> strList33 = putBulkEditResultGradesV2_32.getLabReportIds();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutBulkEditResultGradesV2 putBulkEditResultGradesV2_35 = putBulkEditResultGradesV2_32.setMinNumericResultValue((java.lang.Double) 100.0d);
        putBulkEditResultGradesV2_32.DepthUnitCustomId = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ";
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(putBulkEditResultGradesV2_10);
        org.junit.Assert.assertNull(strList11);
        org.junit.Assert.assertNull(double12);
        org.junit.Assert.assertNotNull(obj15);
        org.junit.Assert.assertEquals(obj15.toString(), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj15), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj15), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertNotNull(instant17);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse18);
        org.junit.Assert.assertNotNull(timeAlignedDataServiceRequest19);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(putLocationTags27);
        org.junit.Assert.assertNotNull(timeAlignedDataServiceRequest28);
        org.junit.Assert.assertNotNull(importItemObservation29);
        org.junit.Assert.assertNull(importItemStatusType30);
        org.junit.Assert.assertNotNull(strList31);
        org.junit.Assert.assertNotNull(putBulkEditResultGradesV2_32);
        org.junit.Assert.assertNull(strList33);
        org.junit.Assert.assertNotNull(putBulkEditResultGradesV2_35);
    }

    @Test
    public void test42722() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest85.test42722");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Attachment attachment0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Attachment();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributesFull auditAttributesFull1 = attachment0.AuditAttributes;
        java.lang.String str2 = attachment0.Comment;
        java.lang.Integer int3 = attachment0.FileSize;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Attachment attachment5 = attachment0.setContentType("multipart/form-data; boundary=****bbcf5f9e-6ccf-4b63-91ab-6e645caf02af****");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Attachment attachment7 = attachment0.setContentType("/AQUARIUS");
        java.lang.String str8 = attachment0.FileName;
        attachment0.Longitude = "MaxInstant";
        java.lang.String str11 = attachment0.getComment();
        java.time.OffsetDateTime offsetDateTime12 = attachment0.DateTaken;
        org.junit.Assert.assertNull(auditAttributesFull1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(int3);
        org.junit.Assert.assertNotNull(attachment5);
        org.junit.Assert.assertNotNull(attachment7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNull(offsetDateTime12);
    }

    @Test
    public void test42723() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest85.test42723");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.GetLocation getLocation0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.GetLocation();
        getLocation0.LocationUniqueId = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ";
        getLocation0.LocationUniqueId = "";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.GetLocation getLocation6 = getLocation0.setLocationUniqueId("hi!:///AQUARIUS/Provisioning/v1");
        java.lang.String str7 = getLocation0.getLocationUniqueId();
        java.lang.String str8 = getLocation0.LocationUniqueId;
        org.junit.Assert.assertNotNull(getLocation6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!:///AQUARIUS/Provisioning/v1" + "'", str7, "hi!:///AQUARIUS/Provisioning/v1");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!:///AQUARIUS/Provisioning/v1" + "'", str8, "hi!:///AQUARIUS/Provisioning/v1");
    }

    @Test
    public void test42724() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest85.test42724");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostNullMeasureQualifier postNullMeasureQualifier0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostNullMeasureQualifier();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostNullMeasureQualifier postNullMeasureQualifier2 = postNullMeasureQualifier0.setName("http://MaxDurationhttp/json/reply/Float");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostNullMeasureQualifier postNullMeasureQualifier4 = postNullMeasureQualifier0.setName("/AQUARIUS/Provisioning/v1");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostNullMeasureQualifier postNullMeasureQualifier6 = postNullMeasureQualifier4.setName("multipart/form-data; boundary=****231224c4-98ce-4e30-bd65-1d25287c4abe****");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostNullMeasureQualifier postNullMeasureQualifier8 = postNullMeasureQualifier6.setCustomId("http");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostNullMeasureQualifier postNullMeasureQualifier10 = postNullMeasureQualifier6.setCustomId("http://MaxDurationhttp/json/reply/ArrayList");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes11 = postNullMeasureQualifier6.getAuditAttributes();
        java.lang.String str12 = postNullMeasureQualifier6.Name;
        org.junit.Assert.assertNotNull(postNullMeasureQualifier2);
        org.junit.Assert.assertNotNull(postNullMeasureQualifier4);
        org.junit.Assert.assertNotNull(postNullMeasureQualifier6);
        org.junit.Assert.assertNotNull(postNullMeasureQualifier8);
        org.junit.Assert.assertNotNull(postNullMeasureQualifier10);
        org.junit.Assert.assertNull(auditAttributes11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "multipart/form-data; boundary=****231224c4-98ce-4e30-bd65-1d25287c4abe****" + "'", str12, "multipart/form-data; boundary=****231224c4-98ce-4e30-bd65-1d25287c4abe****");
    }

    @Test
    public void test42725() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest85.test42725");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostSpecimen postSpecimen0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostSpecimen();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes1 = postSpecimen0.AuditAttributes;
        java.lang.Boolean boolean2 = postSpecimen0.Filtered;
        java.lang.Integer int3 = postSpecimen0.getNumberOfReceivedObservations();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlan samplingPlan4 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlan();
        java.lang.Integer int5 = samplingPlan4.getSamplingLocationGroupSelectionTypeRandomCount();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlan samplingPlan7 = samplingPlan4.setSamplingLocationGroupSelectionTypeRandomCount((java.lang.Integer) 100);
        samplingPlan4.Id = "MaxInstant";
        java.lang.String str10 = samplingPlan4.Id;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLabReport postLabReport11 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLabReport();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFieldVisitActivityWithTemplate postFieldVisitActivityWithTemplate12 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFieldVisitActivityWithTemplate();
        java.lang.String str13 = postFieldVisitActivityWithTemplate12.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFieldVisitActivityWithTemplate postFieldVisitActivityWithTemplate15 = postFieldVisitActivityWithTemplate12.setCustomId("'.'SSSSSSS");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedFieldResult plannedFieldResult16 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedFieldResult();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes17 = plannedFieldResult16.AuditAttributes;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails18 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails20 = labResultDetails18.setAnalysisComment("/AQUARIUS/Acquisition/v2");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes21 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails22 = labResultDetails20.setAuditAttributes(auditAttributes21);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedFieldResult plannedFieldResult23 = plannedFieldResult16.setAuditAttributes(auditAttributes21);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroup analyticalGroup24 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroup();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupType analyticalGroupType25 = analyticalGroup24.getType();
        analyticalGroup24.Name = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSSSSSZZZZZ";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroup analyticalGroup28 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroup();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem analyticalGroupItem29 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod30 = analyticalGroupItem29.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem analyticalGroupItem31 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod32 = analyticalGroupItem31.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod33 = analyticalGroupItem31.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem analyticalGroupItem34 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod35 = analyticalGroupItem34.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod36 = analyticalGroupItem34.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod37 = null;
        analyticalGroupItem34.AnalysisMethod = analysisMethod37;
        java.lang.String str39 = analyticalGroupItem34.getHoldingTime();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem analyticalGroupItem40 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod41 = analyticalGroupItem40.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod42 = analyticalGroupItem40.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem analyticalGroupItem43 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod44 = analyticalGroupItem43.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem analyticalGroupItem45 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod46 = analyticalGroupItem45.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod47 = analyticalGroupItem45.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod48 = null;
        analyticalGroupItem45.AnalysisMethod = analysisMethod48;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem[] analyticalGroupItemArray50 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem[] { analyticalGroupItem29, analyticalGroupItem31, analyticalGroupItem34, analyticalGroupItem40, analyticalGroupItem43, analyticalGroupItem45 };
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem> analyticalGroupItemList51 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem>();
        boolean boolean52 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem>) analyticalGroupItemList51, analyticalGroupItemArray50);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroup analyticalGroup53 = analyticalGroup28.setAnalyticalGroupItems((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem>) analyticalGroupItemList51);
        analyticalGroup24.AnalyticalGroupItems = analyticalGroupItemList51;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes55 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes();
        analyticalGroup24.AuditAttributes = auditAttributes55;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedFieldResult plannedFieldResult57 = plannedFieldResult23.setAuditAttributes(auditAttributes55);
        postFieldVisitActivityWithTemplate15.AuditAttributes = auditAttributes55;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLabReport postLabReport59 = postLabReport11.setAuditAttributes(auditAttributes55);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutDetectioncondition putDetectioncondition60 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutDetectioncondition();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes61 = putDetectioncondition60.getAuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutDetectioncondition putDetectioncondition63 = putDetectioncondition60.setCustomId("http");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivity samplingPlanPlannedActivity64 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivity();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes65 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivity samplingPlanPlannedActivity66 = samplingPlanPlannedActivity64.setAuditAttributes(auditAttributes65);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes67 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes69 = auditAttributes67.setCreationUserProfileId("'.'SSSSSSS");
        samplingPlanPlannedActivity66.AuditAttributes = auditAttributes67;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes71 = samplingPlanPlannedActivity66.AuditAttributes;
        putDetectioncondition60.AuditAttributes = auditAttributes71;
        postLabReport11.AuditAttributes = auditAttributes71;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardDefinition standardDefinition74 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardDefinition();
        java.lang.String str75 = standardDefinition74.Description;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSchedule putSchedule76 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSchedule();
        java.time.OffsetDateTime offsetDateTime77 = putSchedule76.StartDate;
        java.time.OffsetDateTime offsetDateTime78 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSchedule putSchedule79 = putSchedule76.setEndDate(offsetDateTime78);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes80 = putSchedule79.AuditAttributes;
        java.time.OffsetDateTime offsetDateTime81 = null;
        putSchedule79.LastGenerationDate = offsetDateTime81;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.RecurrenceDayMonthlyType recurrenceDayMonthlyType83 = putSchedule79.RecurrenceDayMonthly;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedFieldResult plannedFieldResult84 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedFieldResult();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes85 = plannedFieldResult84.AuditAttributes;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails86 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails88 = labResultDetails86.setAnalysisComment("/AQUARIUS/Acquisition/v2");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes89 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails90 = labResultDetails88.setAuditAttributes(auditAttributes89);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedFieldResult plannedFieldResult91 = plannedFieldResult84.setAuditAttributes(auditAttributes89);
        putSchedule79.AuditAttributes = auditAttributes89;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardDefinition standardDefinition93 = standardDefinition74.setAuditAttributes(auditAttributes89);
        postLabReport11.AuditAttributes = auditAttributes89;
        samplingPlan4.AuditAttributes = auditAttributes89;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostSpecimen postSpecimen96 = postSpecimen0.setAuditAttributes(auditAttributes89);
        java.lang.Integer int97 = postSpecimen0.getNumberOfReceivedObservations();
        java.lang.String str98 = postSpecimen0.Description;
        org.junit.Assert.assertNull(auditAttributes1);
        org.junit.Assert.assertNull(boolean2);
        org.junit.Assert.assertNull(int3);
        org.junit.Assert.assertNull(int5);
        org.junit.Assert.assertNotNull(samplingPlan7);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "MaxInstant" + "'", str10, "MaxInstant");
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNotNull(postFieldVisitActivityWithTemplate15);
        org.junit.Assert.assertNull(auditAttributes17);
        org.junit.Assert.assertNotNull(labResultDetails20);
        org.junit.Assert.assertNotNull(labResultDetails22);
        org.junit.Assert.assertNotNull(plannedFieldResult23);
        org.junit.Assert.assertNull(analyticalGroupType25);
        org.junit.Assert.assertNull(analysisMethod30);
        org.junit.Assert.assertNull(analysisMethod32);
        org.junit.Assert.assertNull(analysisMethod33);
        org.junit.Assert.assertNull(analysisMethod35);
        org.junit.Assert.assertNull(analysisMethod36);
        org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertNull(analysisMethod41);
        org.junit.Assert.assertNull(analysisMethod42);
        org.junit.Assert.assertNull(analysisMethod44);
        org.junit.Assert.assertNull(analysisMethod46);
        org.junit.Assert.assertNull(analysisMethod47);
        org.junit.Assert.assertNotNull(analyticalGroupItemArray50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(analyticalGroup53);
        org.junit.Assert.assertNotNull(plannedFieldResult57);
        org.junit.Assert.assertNotNull(postLabReport59);
        org.junit.Assert.assertNull(auditAttributes61);
        org.junit.Assert.assertNotNull(putDetectioncondition63);
        org.junit.Assert.assertNotNull(samplingPlanPlannedActivity66);
        org.junit.Assert.assertNotNull(auditAttributes69);
        org.junit.Assert.assertNotNull(auditAttributes71);
        org.junit.Assert.assertNull(str75);
        org.junit.Assert.assertNull(offsetDateTime77);
        org.junit.Assert.assertNotNull(putSchedule79);
        org.junit.Assert.assertNull(auditAttributes80);
        org.junit.Assert.assertNull(recurrenceDayMonthlyType83);
        org.junit.Assert.assertNull(auditAttributes85);
        org.junit.Assert.assertNotNull(labResultDetails88);
        org.junit.Assert.assertNotNull(labResultDetails90);
        org.junit.Assert.assertNotNull(plannedFieldResult91);
        org.junit.Assert.assertNotNull(standardDefinition93);
        org.junit.Assert.assertNotNull(postSpecimen96);
        org.junit.Assert.assertNull(int97);
        org.junit.Assert.assertNull(str98);
    }

    @Test
    public void test42726() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest85.test42726");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostStatisticalDerivedTimeSeries postStatisticalDerivedTimeSeries0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostStatisticalDerivedTimeSeries();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostStatisticalDerivedTimeSeries postStatisticalDerivedTimeSeries2 = postStatisticalDerivedTimeSeries0.setComment("'.'SSSSSSS");
        java.lang.String str3 = postStatisticalDerivedTimeSeries2.UtcOffset;
        java.lang.String str4 = postStatisticalDerivedTimeSeries2.getComment();
        java.util.List<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeValue> extendedAttributeValueList5 = postStatisticalDerivedTimeSeries2.getExtendedAttributeValues();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostStatisticalDerivedTimeSeries postStatisticalDerivedTimeSeries7 = postStatisticalDerivedTimeSeries2.setTimeStepCount((java.lang.Integer) 4);
        java.lang.String str8 = postStatisticalDerivedTimeSeries7.getLocationUniqueId();
        postStatisticalDerivedTimeSeries7.TimeStepCount = 7;
        org.junit.Assert.assertNotNull(postStatisticalDerivedTimeSeries2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "'.'SSSSSSS" + "'", str4, "'.'SSSSSSS");
        org.junit.Assert.assertNull(extendedAttributeValueList5);
        org.junit.Assert.assertNotNull(postStatisticalDerivedTimeSeries7);
        org.junit.Assert.assertNull(str8);
    }

    @Test
    public void test42727() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest85.test42727");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutFieldTrip putFieldTrip0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutFieldTrip();
        java.time.OffsetDateTime offsetDateTime1 = putFieldTrip0.StartTime;
        java.time.OffsetDateTime offsetDateTime2 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutFieldTrip putFieldTrip3 = putFieldTrip0.setStartTime(offsetDateTime2);
        java.lang.String str4 = putFieldTrip3.getId();
        org.junit.Assert.assertNull(offsetDateTime1);
        org.junit.Assert.assertNotNull(putFieldTrip3);
        org.junit.Assert.assertNull(str4);
    }

    @Test
    public void test42728() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest85.test42728");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportObservations getExportObservations0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportObservations();
        java.time.Instant instant1 = getExportObservations0.getStartModificationTime();
        getExportObservations0.FieldVisitId = "";
        java.lang.String str4 = getExportObservations0.DetectionCondition;
        java.util.List<java.lang.String> strList5 = getExportObservations0.ActivityIds;
        org.junit.Assert.assertNull(instant1);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(strList5);
    }

    @Test
    public void test42729() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest85.test42729");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.IndexRange indexRange0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.IndexRange();
        java.lang.String str1 = indexRange0.Id;
        java.lang.String str2 = indexRange0.Id;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.IndexRange indexRange4 = indexRange0.setDescription("/AQUARIUS");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.IndexRange indexRange6 = indexRange4.setResultingScore((java.lang.Integer) 10);
        indexRange4.UpperLimitValue = 100;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.IndexRange indexRange10 = indexRange4.setResultingScore((java.lang.Integer) 10);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.IndexRange indexRange12 = indexRange10.setId("yyyy'-'MM'-'dd'T'HH':'mm':'ss");
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNotNull(indexRange4);
        org.junit.Assert.assertNotNull(indexRange6);
        org.junit.Assert.assertNotNull(indexRange10);
        org.junit.Assert.assertNotNull(indexRange12);
    }

    @Test
    public void test42730() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest85.test42730");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.PostLocationAttachmentResponse postLocationAttachmentResponse0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.PostLocationAttachmentResponse();
        java.lang.String str1 = postLocationAttachmentResponse0.getComments();
        java.lang.String str2 = postLocationAttachmentResponse0.Comments;
        java.lang.String str3 = postLocationAttachmentResponse0.LocationUniqueId;
        postLocationAttachmentResponse0.Url = "MaxInstant";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.PostLocationAttachmentResponse postLocationAttachmentResponse7 = postLocationAttachmentResponse0.setLocationUniqueId("9999-12-31T23:59:59.999Z");
        postLocationAttachmentResponse0.Url = "/AQUARIUS/Acquisition/v2://9999-12-31T23:59:59.999Z";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.PostLocationAttachmentResponse postLocationAttachmentResponse10 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.PostLocationAttachmentResponse();
        java.lang.String str11 = postLocationAttachmentResponse10.getComments();
        java.lang.String str12 = postLocationAttachmentResponse10.Comments;
        java.lang.String str13 = postLocationAttachmentResponse10.LocationUniqueId;
        postLocationAttachmentResponse10.UniqueId = "multipart/form-data; boundary=****1eab67e1-84c8-4b82-aa06-d6c7526551f8****";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.AppliedTag appliedTag16 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.AppliedTag();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.AppliedTag appliedTag18 = appliedTag16.setValue("'.'SSSSSSS");
        appliedTag16.Value = "0001-01-01T00:00:00.000Z";
        appliedTag16.Key = "multipart/form-data; boundary=****44f0772e-c3ca-4316-8e2a-61ec8540d661****";
        java.lang.String str23 = appliedTag16.getValue();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.AppliedTag[] appliedTagArray24 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.AppliedTag[] { appliedTag16 };
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.AppliedTag> appliedTagList25 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.AppliedTag>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.AppliedTag>) appliedTagList25, appliedTagArray24);
        postLocationAttachmentResponse10.Tags = appliedTagList25;
        postLocationAttachmentResponse0.Tags = appliedTagList25;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(postLocationAttachmentResponse7);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNotNull(appliedTag18);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "0001-01-01T00:00:00.000Z" + "'", str23, "0001-01-01T00:00:00.000Z");
        org.junit.Assert.assertNotNull(appliedTagArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
    }

    @Test
    public void test42731() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest85.test42731");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DataClassificationType dataClassificationType1 = observation0.getDataClassification();
        java.time.OffsetDateTime offsetDateTime2 = observation0.getObservedTime();
        java.time.OffsetDateTime offsetDateTime3 = null;
        observation0.ResultTime = offsetDateTime3;
        org.junit.Assert.assertNull(dataClassificationType1);
        org.junit.Assert.assertNull(offsetDateTime2);
    }

    @Test
    public void test42732() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest85.test42732");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationNestedInSpecimen observationNestedInSpecimen0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationNestedInSpecimen();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultStatus resultStatus1 = observationNestedInSpecimen0.ResultStatus;
        java.lang.String str2 = observationNestedInSpecimen0.Id;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationNestedInSpecimen observationNestedInSpecimen4 = observationNestedInSpecimen0.setId("hi!");
        observationNestedInSpecimen0.Id = "ZZZZZ";
        java.lang.String str7 = observationNestedInSpecimen0.getCustomId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabInstruction labInstruction8 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabInstruction();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod9 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabInstruction labInstruction10 = labInstruction8.setAnalysisMethod(analysisMethod9);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod11 = labInstruction10.AnalysisMethod;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes12 = labInstruction10.AuditAttributes;
        observationNestedInSpecimen0.LabInstruction = labInstruction10;
        java.lang.String str14 = labInstruction10.getAnalysisComment();
        org.junit.Assert.assertNull(resultStatus1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNotNull(observationNestedInSpecimen4);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(labInstruction10);
        org.junit.Assert.assertNull(analysisMethod11);
        org.junit.Assert.assertNull(auditAttributes12);
        org.junit.Assert.assertNull(str14);
    }

    @Test
    public void test42733() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest85.test42733");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostLocation postLocation0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostLocation();
        postLocation0.Description = "hi!";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.LocationBase locationBase4 = postLocation0.setLocationType("/AQUARIUS/Acquisition/v2");
        java.lang.String str5 = postLocation0.getElevationUnits();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.LocationBase locationBase7 = postLocation0.setLocationType("yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSSSSSZZZZZ");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.LocationBase locationBase9 = locationBase7.setLocationName("hi!");
        locationBase9.Description = "-PT87591240H";
        org.junit.Assert.assertNotNull(locationBase4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(locationBase7);
        org.junit.Assert.assertNotNull(locationBase9);
    }

    @Test
    public void test42734() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest85.test42734");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutTimeSeries putTimeSeries0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutTimeSeries();
        java.lang.String str1 = putTimeSeries0.getDescription();
        java.lang.String str2 = putTimeSeries0.getComment();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutTimeSeries putTimeSeries4 = putTimeSeries0.setSubLocationIdentifier("9999-12-31T23:59:59.9999999Z");
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNotNull(putTimeSeries4);
    }

    @Test
    public void test42735() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest85.test42735");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Location location0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Location();
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.AppliedTag> appliedTagList1 = location0.Tags;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Location location3 = location0.setUniqueId("MaxInstant");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Location location5 = location3.setUtcOffset("9999-12-31T23:59:59.999Z");
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.AppliedTag> appliedTagList6 = location3.getTags();
        java.lang.String str7 = location3.getIdentifier();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Location location9 = location3.setLatitude((java.lang.Double) 100.0d);
        java.lang.String str10 = location3.LocationType;
        org.junit.Assert.assertNull(appliedTagList1);
        org.junit.Assert.assertNotNull(location3);
        org.junit.Assert.assertNotNull(location5);
        org.junit.Assert.assertNull(appliedTagList6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(location9);
        org.junit.Assert.assertNull(str10);
    }

    @Test
    public void test42736() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest85.test42736");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.LocationDatumPeriod locationDatumPeriod0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.LocationDatumPeriod();
        java.time.Instant instant1 = locationDatumPeriod0.AppliedTimeUtc;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.LocationDatumPeriod locationDatumPeriod3 = locationDatumPeriod0.setAppliedByUser("/AQUARIUS/Acquisition/v2://9999-12-31T23:59:59.999Z");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDescription timeSeriesDescription4 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDescription();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest5 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest();
        java.lang.Object obj6 = timeAlignedDataServiceRequest5.getResponseType();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse7 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant8 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse9 = locationDescriptionListServiceResponse7.setNextToken(instant8);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest10 = timeAlignedDataServiceRequest5.setQueryFrom(instant8);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDescription timeSeriesDescription11 = timeSeriesDescription4.setRawStartTime(instant8);
        locationDatumPeriod0.ValidFrom = instant8;
        java.time.Instant instant13 = locationDatumPeriod0.getAppliedTimeUtc();
        org.junit.Assert.assertNull(instant1);
        org.junit.Assert.assertNotNull(locationDatumPeriod3);
        org.junit.Assert.assertNotNull(obj6);
        org.junit.Assert.assertEquals(obj6.toString(), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj6), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj6), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertNotNull(instant8);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse9);
        org.junit.Assert.assertNotNull(timeAlignedDataServiceRequest10);
        org.junit.Assert.assertNotNull(timeSeriesDescription11);
        org.junit.Assert.assertNull(instant13);
    }

    @Test
    public void test42737() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest85.test42737");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.OpenIdConnectRelyingPartyConfiguration openIdConnectRelyingPartyConfiguration0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.OpenIdConnectRelyingPartyConfiguration();
        java.lang.String str1 = openIdConnectRelyingPartyConfiguration0.getClientIdentifier();
        openIdConnectRelyingPartyConfiguration0.ClientIdentifier = "MaxDuration";
        openIdConnectRelyingPartyConfiguration0.IssuerIdentifier = "MinInstant";
        java.util.List<java.lang.String> strList6 = openIdConnectRelyingPartyConfiguration0.Scopes;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.OpenIdConnectRelyingPartyConfiguration openIdConnectRelyingPartyConfiguration8 = openIdConnectRelyingPartyConfiguration0.setOptionalIssuerDiscoveryUri("http");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.OpenIdConnectRelyingPartyConfiguration openIdConnectRelyingPartyConfiguration10 = openIdConnectRelyingPartyConfiguration8.setDisplayName("http://MaxDurationhttp/json/reply/ArrayList");
        openIdConnectRelyingPartyConfiguration10.RedirectUri = "hi!:///AQUARIUS/Provisioning/v1";
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(strList6);
        org.junit.Assert.assertNotNull(openIdConnectRelyingPartyConfiguration8);
        org.junit.Assert.assertNotNull(openIdConnectRelyingPartyConfiguration10);
    }

    @Test
    public void test42738() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest85.test42738");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetProject getProject0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetProject();
        java.lang.String str1 = getProject0.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetProject getProject3 = getProject0.setId("MinDuration");
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(getProject3);
    }

    @Test
    public void test42739() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest85.test42739");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeChannelMeasurement dischargeChannelMeasurement0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeChannelMeasurement();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ChannelMaterialType channelMaterialType1 = dischargeChannelMeasurement0.getChannelMaterial();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay2 = dischargeChannelMeasurement0.Discharge;
        java.time.Instant instant3 = dischargeChannelMeasurement0.EndTime;
        dischargeChannelMeasurement0.Party = "yyyy'-'MM'-'dd'T'HH':'mm':'ss";
        org.junit.Assert.assertNull(channelMaterialType1);
        org.junit.Assert.assertNull(quantityWithDisplay2);
        org.junit.Assert.assertNull(instant3);
    }

    @Test
    public void test42740() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest85.test42740");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutResultGrades putResultGrades0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutResultGrades();
        java.lang.Object obj1 = putResultGrades0.getResponseType();
        java.lang.Object obj2 = putResultGrades0.getResponseType();
        org.junit.Assert.assertNotNull(obj1);
        org.junit.Assert.assertEquals(obj1.toString(), "java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$ResultGrade>");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj1), "java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$ResultGrade>");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj1), "java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$ResultGrade>");
        org.junit.Assert.assertNotNull(obj2);
        org.junit.Assert.assertEquals(obj2.toString(), "java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$ResultGrade>");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj2), "java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$ResultGrade>");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj2), "java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$ResultGrade>");
    }

    @Test
    public void test42741() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest85.test42741");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostBasicTimeSeries postBasicTimeSeries0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostBasicTimeSeries();
        java.lang.String str1 = postBasicTimeSeries0.UtcOffset;
        java.lang.Boolean boolean2 = postBasicTimeSeries0.Publish;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(boolean2);
    }

    @Test
    public void test42742() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest85.test42742");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MonitoringMethod monitoringMethod0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MonitoringMethod();
        monitoringMethod0.Parameter = "/AQUARIUS/Acquisition/v2";
        java.lang.String str3 = monitoringMethod0.Description;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MonitoringMethod monitoringMethod5 = monitoringMethod0.setMethodCode("http://MaxDurationhttp/json/reply/Float");
        java.lang.String str6 = monitoringMethod0.MethodCode;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MonitoringMethod monitoringMethod8 = monitoringMethod0.setParameter("");
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(monitoringMethod5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "http://MaxDurationhttp/json/reply/Float" + "'", str6, "http://MaxDurationhttp/json/reply/Float");
        org.junit.Assert.assertNotNull(monitoringMethod8);
    }

    @Test
    public void test42743() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest85.test42743");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedPoint timeAlignedPoint0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedPoint();
        timeAlignedPoint0.Method9 = "multipart/form-data; boundary=****7eff1774-b6b0-471a-961c-156c64359366****";
        timeAlignedPoint0.DisplayValue9 = "";
        java.lang.String str5 = timeAlignedPoint0.getApprovalName4();
        java.lang.Long long6 = timeAlignedPoint0.getGradeCode3();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedPoint timeAlignedPoint8 = timeAlignedPoint0.setMethod10("hi!:///AQUARIUS/Provisioning/v1");
        timeAlignedPoint8.DisplayValue8 = "https";
        java.lang.String str11 = timeAlignedPoint8.getApprovalName6();
        java.lang.Long long12 = timeAlignedPoint8.getApprovalLevel1();
        java.lang.String str13 = timeAlignedPoint8.DisplayValue2;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedPoint timeAlignedPoint15 = timeAlignedPoint8.setApprovalName10("multipart/form-data; boundary=****2e497db8-6b91-47d6-99bc-df65af225bf8****");
        timeAlignedPoint8.GradeName10 = "2021.8.9990";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedPoint timeAlignedPoint19 = timeAlignedPoint8.setDisplayValue10("****8e3722aa-afdf-4137-ab41-bb1bb285cdf2****");
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(long6);
        org.junit.Assert.assertNotNull(timeAlignedPoint8);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNull(long12);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNotNull(timeAlignedPoint15);
        org.junit.Assert.assertNotNull(timeAlignedPoint19);
    }

    @Test
    public void test42744() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest85.test42744");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.AppliedTag appliedTag0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.AppliedTag();
        java.lang.String str1 = appliedTag0.getUniqueId();
        java.lang.String str2 = appliedTag0.Name;
        java.lang.String str3 = appliedTag0.Name;
        java.lang.String str4 = appliedTag0.getName();
        appliedTag0.Key = "multipart/form-data; boundary=****c5ace73f-96fd-4e64-b844-d9edac3c6d02****";
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(str4);
    }

    @Test
    public void test42745() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest85.test42745");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetChartDataV2 getChartDataV2_0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetChartDataV2();
        java.lang.String str1 = getChartDataV2_0.getActivityCustomId();
        java.util.List<java.lang.String> strList2 = getChartDataV2_0.getCollectionMethodIds();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetChartDataV2 getChartDataV2_4 = getChartDataV2_0.setActivityCustomId("ZZZZZ");
        java.lang.String str5 = getChartDataV2_0.getDepthUnitId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SampleFractionType sampleFractionType6 = getChartDataV2_0.SampleFraction;
        getChartDataV2_0.NumericResultValue = 1.0d;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(strList2);
        org.junit.Assert.assertNotNull(getChartDataV2_4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(sampleFractionType6);
    }

    @Test
    public void test42746() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest85.test42746");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemTaxon importItemTaxon0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemTaxon();
        java.util.List<java.lang.String> strList1 = importItemTaxon0.getWarningMessages();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Taxon taxon2 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemTaxon importItemTaxon3 = importItemTaxon0.setItem(taxon2);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostCalculatedDerivedTimeSeries postCalculatedDerivedTimeSeries4 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostCalculatedDerivedTimeSeries();
        java.lang.String str5 = postCalculatedDerivedTimeSeries4.LocationUniqueId;
        java.util.List<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeValue> extendedAttributeValueList6 = postCalculatedDerivedTimeSeries4.getExtendedAttributeValues();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemTaxon importItemTaxon7 = importItemTaxon3.setErrors((java.lang.Object) postCalculatedDerivedTimeSeries4);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObject importItemObject8 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObject();
        java.util.List<java.lang.String> strList9 = importItemObject8.getWarningMessages();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportChangeItem[] importChangeItemArray10 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportChangeItem[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportChangeItem> importChangeItemList11 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportChangeItem>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportChangeItem>) importChangeItemList11, importChangeItemArray10);
        importItemObject8.ItemComparison = importChangeItemList11;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags14 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray18 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList19 = new java.util.ArrayList<java.lang.String>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList19, strArray18);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags21 = putLocationTags14.setTagUniqueIds(strList19);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObject importItemObject22 = importItemObject8.setExistingItem((java.lang.Object) putLocationTags14);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.OpenIdConnectUser openIdConnectUser23 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.OpenIdConnectUser();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.OpenIdConnectUser openIdConnectUser25 = openIdConnectUser23.setIdentifier("");
        java.lang.Boolean boolean26 = openIdConnectUser25.CanConfigureSystem;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObject importItemObject27 = importItemObject8.setErrors((java.lang.Object) openIdConnectUser25);
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportChangeItem> importChangeItemList28 = importItemObject27.ItemComparison;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemTaxon importItemTaxon29 = importItemTaxon7.setItemComparison(importChangeItemList28);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemTaxon importItemTaxon30 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemTaxon();
        java.util.List<java.lang.String> strList31 = importItemTaxon30.getWarningMessages();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Taxon taxon32 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemTaxon importItemTaxon33 = importItemTaxon30.setItem(taxon32);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostCalculatedDerivedTimeSeries postCalculatedDerivedTimeSeries34 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostCalculatedDerivedTimeSeries();
        java.lang.String str35 = postCalculatedDerivedTimeSeries34.LocationUniqueId;
        java.util.List<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeValue> extendedAttributeValueList36 = postCalculatedDerivedTimeSeries34.getExtendedAttributeValues();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemTaxon importItemTaxon37 = importItemTaxon33.setErrors((java.lang.Object) postCalculatedDerivedTimeSeries34);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Taxon taxon38 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Taxon();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemTaxon importItemTaxon39 = importItemTaxon33.setExistingItem(taxon38);
        importItemTaxon7.Item = taxon38;
        taxon38.ItisTsn = "yyyy'-'MM'-'dd'T'HH':'mm':'ss";
        java.lang.String str43 = taxon38.getItisUrl();
        java.lang.String str44 = taxon38.ItisUrl;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Taxon taxon46 = taxon38.setParentId("http://MaxDurationhttp/json/reply/ArrayList");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSamplingLocation putSamplingLocation47 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSamplingLocation();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSamplingLocation putSamplingLocation49 = putSamplingLocation47.setCustomId("https");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSamplingLocation putSamplingLocation51 = putSamplingLocation49.setVerticalCollectionMethod("POST");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSamplingLocation putSamplingLocation53 = putSamplingLocation49.setVerticalDatum("MinInstant");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation54 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedFieldResult plannedFieldResult55 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation56 = observation54.setPlannedFieldResult(plannedFieldResult55);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabInstruction labInstruction57 = null;
        observation56.LabInstruction = labInstruction57;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationStatistics observationStatistics59 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation60 = observation56.setStatistics(observationStatistics59);
        java.time.OffsetDateTime offsetDateTime61 = observation60.getResultTime();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity quantity62 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Unit unit63 = null;
        quantity62.Unit = unit63;
        observation60.Depth = quantity62;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSamplingLocation putSamplingLocation66 = putSamplingLocation53.setElevation(quantity62);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSamplingLocationGroup putSamplingLocationGroup67 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSamplingLocationGroup();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LocationGroupType locationGroupType68 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LocationGroupType();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes69 = locationGroupType68.getAuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LocationGroupType locationGroupType71 = locationGroupType68.setCustomId("yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ");
        putSamplingLocationGroup67.LocationGroupType = locationGroupType68;
        java.lang.String str73 = putSamplingLocationGroup67.getName();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSamplingLocationGroup putSamplingLocationGroup75 = putSamplingLocationGroup67.setId("yyyy'-'MM'-'dd'T'HH':'mm':'ss");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LocationGroupType locationGroupType76 = putSamplingLocationGroup67.getLocationGroupType();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes77 = locationGroupType76.getAuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostProject postProject78 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostProject();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes79 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostProject postProject80 = postProject78.setAuditAttributes(auditAttributes79);
        java.time.OffsetDateTime offsetDateTime81 = null;
        postProject78.StartTime = offsetDateTime81;
        java.time.OffsetDateTime offsetDateTime83 = postProject78.EndTime;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostProject postProject85 = postProject78.setScopeStatement("");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlan samplingPlan86 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlan();
        samplingPlan86.SamplingLocationGroupSelectionTypeRandomCount = 0;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationGroupSelectionType samplingLocationGroupSelectionType89 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationGroupSelectionType.ALL;
        samplingPlan86.SamplingLocationGroupSelectionType = samplingLocationGroupSelectionType89;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationGroup samplingLocationGroup91 = samplingPlan86.getSamplingLocationGroup();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes92 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlan samplingPlan93 = samplingPlan86.setAuditAttributes(auditAttributes92);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostProject postProject94 = postProject85.setAuditAttributes(auditAttributes92);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes95 = postProject85.AuditAttributes;
        locationGroupType76.AuditAttributes = auditAttributes95;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSamplingLocation putSamplingLocation97 = putSamplingLocation66.setAuditAttributes(auditAttributes95);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Taxon taxon98 = taxon38.setAuditAttributes(auditAttributes95);
        java.lang.String str99 = taxon38.Id;
        org.junit.Assert.assertNull(strList1);
        org.junit.Assert.assertNotNull(importItemTaxon3);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(extendedAttributeValueList6);
        org.junit.Assert.assertNotNull(importItemTaxon7);
        org.junit.Assert.assertNull(strList9);
        org.junit.Assert.assertNotNull(importChangeItemArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(putLocationTags21);
        org.junit.Assert.assertNotNull(importItemObject22);
        org.junit.Assert.assertNotNull(openIdConnectUser25);
        org.junit.Assert.assertNull(boolean26);
        org.junit.Assert.assertNotNull(importItemObject27);
        org.junit.Assert.assertNotNull(importChangeItemList28);
        org.junit.Assert.assertNotNull(importItemTaxon29);
        org.junit.Assert.assertNull(strList31);
        org.junit.Assert.assertNotNull(importItemTaxon33);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertNull(extendedAttributeValueList36);
        org.junit.Assert.assertNotNull(importItemTaxon37);
        org.junit.Assert.assertNotNull(importItemTaxon39);
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertNull(str44);
        org.junit.Assert.assertNotNull(taxon46);
        org.junit.Assert.assertNotNull(putSamplingLocation49);
        org.junit.Assert.assertNotNull(putSamplingLocation51);
        org.junit.Assert.assertNotNull(putSamplingLocation53);
        org.junit.Assert.assertNotNull(observation56);
        org.junit.Assert.assertNotNull(observation60);
        org.junit.Assert.assertNull(offsetDateTime61);
        org.junit.Assert.assertNotNull(putSamplingLocation66);
        org.junit.Assert.assertNull(auditAttributes69);
        org.junit.Assert.assertNotNull(locationGroupType71);
        org.junit.Assert.assertNull(str73);
        org.junit.Assert.assertNotNull(putSamplingLocationGroup75);
        org.junit.Assert.assertNotNull(locationGroupType76);
        org.junit.Assert.assertNull(auditAttributes77);
        org.junit.Assert.assertNotNull(postProject80);
        org.junit.Assert.assertNull(offsetDateTime83);
        org.junit.Assert.assertNotNull(postProject85);
        org.junit.Assert.assertTrue("'" + samplingLocationGroupSelectionType89 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationGroupSelectionType.ALL + "'", samplingLocationGroupSelectionType89.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationGroupSelectionType.ALL));
        org.junit.Assert.assertNull(samplingLocationGroup91);
        org.junit.Assert.assertNotNull(samplingPlan93);
        org.junit.Assert.assertNotNull(postProject94);
        org.junit.Assert.assertNotNull(auditAttributes95);
        org.junit.Assert.assertNotNull(putSamplingLocation97);
        org.junit.Assert.assertNotNull(taxon98);
        org.junit.Assert.assertNull(str99);
    }

    @Test
    public void test42747() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest85.test42747");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.GetOpenIdConnectUser getOpenIdConnectUser0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.GetOpenIdConnectUser();
        java.lang.Object obj1 = getOpenIdConnectUser0.getResponseType();
        java.lang.String str2 = getOpenIdConnectUser0.getUniqueId();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.GetOpenIdConnectUser getOpenIdConnectUser4 = getOpenIdConnectUser0.setUniqueId("multipart/form-data; boundary=****3b079027-9343-4d29-973c-7bf16739cdb0****");
        org.junit.Assert.assertNotNull(obj1);
        org.junit.Assert.assertEquals(obj1.toString(), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning$OpenIdConnectUser");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj1), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning$OpenIdConnectUser");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj1), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning$OpenIdConnectUser");
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNotNull(getOpenIdConnectUser4);
    }

    @Test
    public void test42748() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest85.test42748");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObject importItemObject0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObject();
        java.util.List<java.lang.String> strList1 = importItemObject0.getWarningMessages();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportChangeItem[] importChangeItemArray2 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportChangeItem[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportChangeItem> importChangeItemList3 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportChangeItem>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportChangeItem>) importChangeItemList3, importChangeItemArray2);
        importItemObject0.ItemComparison = importChangeItemList3;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags6 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray10 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList11 = new java.util.ArrayList<java.lang.String>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList11, strArray10);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags13 = putLocationTags6.setTagUniqueIds(strList11);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObject importItemObject14 = importItemObject0.setExistingItem((java.lang.Object) putLocationTags6);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation15 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedFieldResult plannedFieldResult16 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation17 = observation15.setPlannedFieldResult(plannedFieldResult16);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabInstruction labInstruction18 = null;
        observation17.LabInstruction = labInstruction18;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationStatistics observationStatistics20 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation21 = observation17.setStatistics(observationStatistics20);
        java.time.OffsetDateTime offsetDateTime22 = observation21.getResultTime();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity quantity23 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Unit unit24 = null;
        quantity23.Unit = unit24;
        observation21.Depth = quantity23;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObject importItemObject27 = importItemObject0.setExistingItem((java.lang.Object) quantity23);
        java.util.List<java.lang.String> strList28 = importItemObject27.WarningMessages;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemSamplingLocation importItemSamplingLocation29 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemSamplingLocation();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemSamplingLocation importItemSamplingLocation31 = importItemSamplingLocation29.setInput("yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItem importItem32 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_33 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray35 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList36 = new java.util.ArrayList<java.lang.String>();
        boolean boolean37 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList36, strArray35);
        getObservationsV2_33.SpecimenIds = strList36;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags39 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray43 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList44 = new java.util.ArrayList<java.lang.String>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList44, strArray43);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags46 = putLocationTags39.setTagUniqueIds(strList44);
        getObservationsV2_33.QualityControlTypes = strList44;
        java.util.List<java.lang.String> strList48 = getObservationsV2_33.getLabReportIds();
        importItem32.Errors = getObservationsV2_33;
        java.lang.Object obj50 = importItem32.getExistingItem();
        importItem32.Input = "hi!";
        java.lang.Object obj53 = importItem32.getItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemStatusType importItemStatusType54 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemStatusType.SKIPPED;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItem importItem55 = importItem32.setStatus(importItemStatusType54);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemSamplingLocation importItemSamplingLocation56 = importItemSamplingLocation31.setStatus(importItemStatusType54);
        importItemObject27.Status = importItemStatusType54;
        org.junit.Assert.assertNull(strList1);
        org.junit.Assert.assertNotNull(importChangeItemArray2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(putLocationTags13);
        org.junit.Assert.assertNotNull(importItemObject14);
        org.junit.Assert.assertNotNull(observation17);
        org.junit.Assert.assertNotNull(observation21);
        org.junit.Assert.assertNull(offsetDateTime22);
        org.junit.Assert.assertNotNull(importItemObject27);
        org.junit.Assert.assertNull(strList28);
        org.junit.Assert.assertNotNull(importItemSamplingLocation31);
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(putLocationTags46);
        org.junit.Assert.assertNull(strList48);
        org.junit.Assert.assertNull(obj50);
        org.junit.Assert.assertNull(obj53);
        org.junit.Assert.assertTrue("'" + importItemStatusType54 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemStatusType.SKIPPED + "'", importItemStatusType54.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemStatusType.SKIPPED));
        org.junit.Assert.assertNotNull(importItem55);
        org.junit.Assert.assertNotNull(importItemSamplingLocation56);
    }

    @Test
    public void test42749() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest85.test42749");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLaboratory postLaboratory0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLaboratory();
        java.lang.String str1 = postLaboratory0.getPointOfContact();
        java.lang.String str2 = postLaboratory0.getEmailAddress();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLaboratory postLaboratory4 = postLaboratory0.setAddress("'.'SSSSSSS");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostProject postProject5 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostProject();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes6 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostProject postProject7 = postProject5.setAuditAttributes(auditAttributes6);
        java.time.OffsetDateTime offsetDateTime8 = null;
        postProject5.StartTime = offsetDateTime8;
        java.time.OffsetDateTime offsetDateTime10 = postProject5.EndTime;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostProject postProject12 = postProject5.setScopeStatement("");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlan samplingPlan13 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlan();
        samplingPlan13.SamplingLocationGroupSelectionTypeRandomCount = 0;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationGroupSelectionType samplingLocationGroupSelectionType16 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationGroupSelectionType.ALL;
        samplingPlan13.SamplingLocationGroupSelectionType = samplingLocationGroupSelectionType16;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationGroup samplingLocationGroup18 = samplingPlan13.getSamplingLocationGroup();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes19 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlan samplingPlan20 = samplingPlan13.setAuditAttributes(auditAttributes19);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostProject postProject21 = postProject12.setAuditAttributes(auditAttributes19);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes22 = postProject12.AuditAttributes;
        java.lang.Boolean boolean23 = postProject12.getApproved();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes24 = postProject12.AuditAttributes;
        postLaboratory4.AuditAttributes = auditAttributes24;
        java.lang.String str26 = postLaboratory4.getPointOfContact();
        java.lang.String str27 = postLaboratory4.getPhoneNumber();
        postLaboratory4.CustomId = "http";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails30 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails32 = labResultDetails30.setAnalysisComment("/AQUARIUS/Acquisition/v2");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails34 = labResultDetails30.setPreparationMethod("https");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes35 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails36 = labResultDetails30.setAuditAttributes(auditAttributes35);
        java.lang.String str37 = labResultDetails36.getAnalysisComment();
        java.time.OffsetDateTime offsetDateTime38 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails39 = labResultDetails36.setDatePrepared(offsetDateTime38);
        java.lang.String str40 = labResultDetails36.getAnalysisComment();
        java.lang.String str41 = labResultDetails36.getDilutionFactor();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ChartDataPoint chartDataPoint42 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ChartDataPoint();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ChartDataPoint chartDataPoint44 = chartDataPoint42.setMdlValueUnitCustomId("MaxInstant");
        java.lang.Double double45 = chartDataPoint44.Value;
        java.lang.String str46 = chartDataPoint44.getNumericResultUnitCustomId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ChartDataPoint chartDataPoint48 = chartDataPoint44.setValue((java.lang.Double) 10.0d);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ChartDataPoint chartDataPoint50 = chartDataPoint48.setValue((java.lang.Double) 0.0d);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultDetectionCondition resultDetectionCondition51 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultDetectionCondition();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes52 = resultDetectionCondition51.getAuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultDetectionCondition resultDetectionCondition54 = resultDetectionCondition51.setId("/AQUARIUS");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ChartDataPoint chartDataPoint55 = chartDataPoint48.setResultDetectionCondition(resultDetectionCondition51);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutLabReport putLabReport56 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutLabReport();
        java.lang.String str57 = putLabReport56.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostDetectioncondition postDetectioncondition58 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostDetectioncondition();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes59 = postDetectioncondition58.getAuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostDetectioncondition postDetectioncondition61 = postDetectioncondition58.setId("9999-12-31T23:59:59.999Z");
        postDetectioncondition58.Description = "9999-12-31T23:59:59.999Z";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostDetectioncondition postDetectioncondition65 = postDetectioncondition58.setId("/AQUARIUS/Provisioning/v1");
        postDetectioncondition58.CustomId = "/AQUARIUS/Acquisition/v2";
        java.lang.Object obj68 = postDetectioncondition58.getResponseType();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivity samplingPlanPlannedActivity69 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivity();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes70 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivity samplingPlanPlannedActivity71 = samplingPlanPlannedActivity69.setAuditAttributes(auditAttributes70);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes72 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes74 = auditAttributes72.setCreationUserProfileId("'.'SSSSSSS");
        samplingPlanPlannedActivity71.AuditAttributes = auditAttributes72;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostDetectioncondition postDetectioncondition76 = postDetectioncondition58.setAuditAttributes(auditAttributes72);
        putLabReport56.AuditAttributes = auditAttributes72;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultDetectionCondition resultDetectionCondition78 = resultDetectionCondition51.setAuditAttributes(auditAttributes72);
        labResultDetails36.AuditAttributes = auditAttributes72;
        postLaboratory4.AuditAttributes = auditAttributes72;
        java.lang.String str81 = postLaboratory4.getPointOfContact();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNotNull(postLaboratory4);
        org.junit.Assert.assertNotNull(postProject7);
        org.junit.Assert.assertNull(offsetDateTime10);
        org.junit.Assert.assertNotNull(postProject12);
        org.junit.Assert.assertTrue("'" + samplingLocationGroupSelectionType16 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationGroupSelectionType.ALL + "'", samplingLocationGroupSelectionType16.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationGroupSelectionType.ALL));
        org.junit.Assert.assertNull(samplingLocationGroup18);
        org.junit.Assert.assertNotNull(samplingPlan20);
        org.junit.Assert.assertNotNull(postProject21);
        org.junit.Assert.assertNotNull(auditAttributes22);
        org.junit.Assert.assertNull(boolean23);
        org.junit.Assert.assertNotNull(auditAttributes24);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertNotNull(labResultDetails32);
        org.junit.Assert.assertNotNull(labResultDetails34);
        org.junit.Assert.assertNotNull(labResultDetails36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "/AQUARIUS/Acquisition/v2" + "'", str37, "/AQUARIUS/Acquisition/v2");
        org.junit.Assert.assertNotNull(labResultDetails39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "/AQUARIUS/Acquisition/v2" + "'", str40, "/AQUARIUS/Acquisition/v2");
        org.junit.Assert.assertNull(str41);
        org.junit.Assert.assertNotNull(chartDataPoint44);
        org.junit.Assert.assertNull(double45);
        org.junit.Assert.assertNull(str46);
        org.junit.Assert.assertNotNull(chartDataPoint48);
        org.junit.Assert.assertNotNull(chartDataPoint50);
        org.junit.Assert.assertNull(auditAttributes52);
        org.junit.Assert.assertNotNull(resultDetectionCondition54);
        org.junit.Assert.assertNotNull(chartDataPoint55);
        org.junit.Assert.assertNull(str57);
        org.junit.Assert.assertNull(auditAttributes59);
        org.junit.Assert.assertNotNull(postDetectioncondition61);
        org.junit.Assert.assertNotNull(postDetectioncondition65);
        org.junit.Assert.assertNotNull(obj68);
        org.junit.Assert.assertEquals(obj68.toString(), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$ResultDetectionCondition");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj68), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$ResultDetectionCondition");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj68), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$ResultDetectionCondition");
        org.junit.Assert.assertNotNull(samplingPlanPlannedActivity71);
        org.junit.Assert.assertNotNull(auditAttributes74);
        org.junit.Assert.assertNotNull(postDetectioncondition76);
        org.junit.Assert.assertNotNull(resultDetectionCondition78);
        org.junit.Assert.assertNull(str81);
    }

    @Test
    public void test42750() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest85.test42750");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DeleteObservationsV2 deleteObservationsV2_0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DeleteObservationsV2();
        java.util.List<java.lang.String> strList1 = deleteObservationsV2_0.SamplingLocationIds;
        deleteObservationsV2_0.MinNumericResultValue = 100.0d;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DeleteObservationsV2 deleteObservationsV2_5 = deleteObservationsV2_0.setFieldVisitId("MinInstant");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetChartDataV2 getChartDataV2_6 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetChartDataV2();
        java.lang.String str7 = getChartDataV2_6.getActivityCustomId();
        java.util.List<java.lang.String> strList8 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetChartDataV2 getChartDataV2_9 = getChartDataV2_6.setSearch(strList8);
        java.time.Instant instant10 = getChartDataV2_9.getStartObservedTime();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemSamplingLocation importItemSamplingLocation11 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemSamplingLocation();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemSamplingLocation importItemSamplingLocation13 = importItemSamplingLocation11.setInput("yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationType putLocationType14 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationType();
        java.lang.String str15 = putLocationType14.Description;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_16 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray19 = new java.lang.String[] { "", "" };
        java.util.ArrayList<java.lang.String> strList20 = new java.util.ArrayList<java.lang.String>();
        boolean boolean21 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList20, strArray19);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_22 = getObservationsV2_16.setDataClassifications((java.util.List<java.lang.String>) strList20);
        getObservationsV2_22.DepthUnitCustomId = "hi!";
        java.lang.String str25 = getObservationsV2_22.CustomId;
        java.util.List<java.lang.String> strList26 = getObservationsV2_22.getSearch();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_27 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray29 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList30 = new java.util.ArrayList<java.lang.String>();
        boolean boolean31 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList30, strArray29);
        getObservationsV2_27.SpecimenIds = strList30;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags33 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray37 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList38 = new java.util.ArrayList<java.lang.String>();
        boolean boolean39 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList38, strArray37);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags40 = putLocationTags33.setTagUniqueIds(strList38);
        getObservationsV2_27.QualityControlTypes = strList38;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_42 = getObservationsV2_22.setMedia((java.util.List<java.lang.String>) strList38);
        putLocationType14.ExtendedAttributeDefinitionIds = strList38;
        importItemSamplingLocation11.Fields = strList38;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetChartDataV2 getChartDataV2_45 = getChartDataV2_9.setSpecimenIds((java.util.List<java.lang.String>) strList38);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DeleteObservationsV2 deleteObservationsV2_46 = deleteObservationsV2_5.setCollectionMethodIds((java.util.List<java.lang.String>) strList38);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetChartDataV2 getChartDataV2_47 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetChartDataV2();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetChartDataV2 getChartDataV2_49 = getChartDataV2_47.setDepthValue((java.lang.Double) 10.0d);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetSpecimens getSpecimens50 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetSpecimens();
        java.util.List<java.lang.String> strList51 = getSpecimens50.getActivityIds();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary52 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay53 = dischargeSummary52.getMeanGageHeight();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay54 = dischargeSummary52.Discharge;
        java.lang.Integer int55 = dischargeSummary52.getGradeCode();
        java.lang.String str56 = dischargeSummary52.getQualityAssuranceComments();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Attachment attachment57 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Attachment();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse58 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary59 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary61 = dischargeSummary59.setPublish((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse62 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant63 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse64 = locationDescriptionListServiceResponse62.setNextToken(instant63);
        dischargeSummary59.MeasurementTime = instant63;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse66 = locationDescriptionListServiceResponse58.setNextToken(instant63);
        java.time.Instant instant67 = locationDescriptionListServiceResponse58.getNextToken();
        attachment57.DateLastAccessed = instant67;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary69 = dischargeSummary52.setMeasurementStartTime(instant67);
        getSpecimens50.Before = instant67;
        getChartDataV2_49.EndResultTime = instant67;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DeleteObservationsV2 deleteObservationsV2_72 = deleteObservationsV2_5.setEndObservedTime(instant67);
        deleteObservationsV2_5.DetectionCondition = "multipart/form-data; boundary=****d9f5d551-383a-4365-87fd-ae7094da6f3b****";
        java.util.List<java.lang.String> strList75 = deleteObservationsV2_5.Ids;
        java.util.List<java.lang.String> strList76 = deleteObservationsV2_5.getCollectionMethodIds();
        org.junit.Assert.assertNull(strList1);
        org.junit.Assert.assertNotNull(deleteObservationsV2_5);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(getChartDataV2_9);
        org.junit.Assert.assertNull(instant10);
        org.junit.Assert.assertNotNull(importItemSamplingLocation13);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(getObservationsV2_22);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertNull(strList26);
        org.junit.Assert.assertNotNull(strArray29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(putLocationTags40);
        org.junit.Assert.assertNotNull(getObservationsV2_42);
        org.junit.Assert.assertNotNull(getChartDataV2_45);
        org.junit.Assert.assertNotNull(deleteObservationsV2_46);
        org.junit.Assert.assertNotNull(getChartDataV2_49);
        org.junit.Assert.assertNull(strList51);
        org.junit.Assert.assertNull(quantityWithDisplay53);
        org.junit.Assert.assertNull(quantityWithDisplay54);
        org.junit.Assert.assertNull(int55);
        org.junit.Assert.assertNull(str56);
        org.junit.Assert.assertNotNull(dischargeSummary61);
        org.junit.Assert.assertNotNull(instant63);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse64);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse66);
        org.junit.Assert.assertNotNull(instant67);
        org.junit.Assert.assertNotNull(dischargeSummary69);
        org.junit.Assert.assertNotNull(deleteObservationsV2_72);
        org.junit.Assert.assertNull(strList75);
        org.junit.Assert.assertNotNull(strList76);
    }

    @Test
    public void test42751() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest85.test42751");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostUserV2 postUserV2_0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostUserV2();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UserProfile userProfile1 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostUserV2 postUserV2_2 = postUserV2_0.setUserProfile(userProfile1);
        java.lang.Object obj3 = postUserV2_0.getResponseType();
        java.lang.String str4 = postUserV2_0.getCustomId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostUserV2 postUserV2_6 = postUserV2_0.setCustomId("-PT87591240H");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostUserV2 postUserV2_8 = postUserV2_0.setCustomId("multipart/form-data; boundary=****3b079027-9343-4d29-973c-7bf16739cdb0****");
        org.junit.Assert.assertNotNull(postUserV2_2);
        org.junit.Assert.assertNotNull(obj3);
        org.junit.Assert.assertEquals(obj3.toString(), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$User");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj3), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$User");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj3), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$User");
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNotNull(postUserV2_6);
        org.junit.Assert.assertNotNull(postUserV2_8);
    }

    @Test
    public void test42752() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest85.test42752");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DataClassificationType dataClassificationType1 = observation0.getDataClassification();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Medium medium2 = null;
        observation0.Medium = medium2;
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttribute> extendedAttributeList4 = observation0.getExtendedAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DataClassificationType dataClassificationType5 = observation0.getDataClassification();
        org.junit.Assert.assertNull(dataClassificationType1);
        org.junit.Assert.assertNull(extendedAttributeList4);
        org.junit.Assert.assertNull(dataClassificationType5);
    }

    @Test
    public void test42753() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest85.test42753");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingModelEffectiveShiftsServiceRequest ratingModelEffectiveShiftsServiceRequest0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingModelEffectiveShiftsServiceRequest();
        java.time.Instant instant1 = ratingModelEffectiveShiftsServiceRequest0.QueryFrom;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Location location2 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Location();
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.AppliedTag> appliedTagList3 = location2.Tags;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Location location5 = location2.setUniqueId("MaxInstant");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Location location7 = location2.setLocationName("yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ");
        java.time.Instant instant8 = location7.getLastModified();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.StatisticalDateTimeOffset statisticalDateTimeOffset9 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.StatisticalDateTimeOffset();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostRecurringReport postRecurringReport10 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostRecurringReport();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary11 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        dischargeSummary11.Reviewer = "";
        java.time.Instant instant14 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        dischargeSummary11.MeasurementTime = instant14;
        postRecurringReport10.NextGenerationDate = instant14;
        java.time.Instant instant17 = postRecurringReport10.getNextGenerationDate();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.StatisticalDateTimeOffset statisticalDateTimeOffset18 = statisticalDateTimeOffset9.setDateTimeOffset(instant17);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DownchainProcessorListByRatingModelServiceRequest downchainProcessorListByRatingModelServiceRequest19 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DownchainProcessorListByRatingModelServiceRequest();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeTransactionListServiceRequest metadataChangeTransactionListServiceRequest20 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeTransactionListServiceRequest();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostRecurringReport postRecurringReport21 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostRecurringReport();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary22 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        dischargeSummary22.Reviewer = "";
        java.time.Instant instant25 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        dischargeSummary22.MeasurementTime = instant25;
        postRecurringReport21.NextGenerationDate = instant25;
        java.time.Instant instant28 = postRecurringReport21.getNextGenerationDate();
        java.lang.String str29 = com.aquaticinformatics.aquarius.sdk.samples.serializers.InstantSerializer.format(instant28);
        metadataChangeTransactionListServiceRequest20.QueryFrom = instant28;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DownchainProcessorListByRatingModelServiceRequest downchainProcessorListByRatingModelServiceRequest31 = downchainProcessorListByRatingModelServiceRequest19.setQueryTo(instant28);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DownchainProcessorListByRatingModelServiceRequest downchainProcessorListByRatingModelServiceRequest33 = downchainProcessorListByRatingModelServiceRequest19.setRatingModelIdentifier("hi!");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Qualifier qualifier34 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Qualifier();
        java.time.Instant instant35 = qualifier34.DateApplied;
        java.lang.String str36 = qualifier34.User;
        java.lang.String str37 = qualifier34.getIdentifier();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest38 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest();
        java.lang.Object obj39 = timeAlignedDataServiceRequest38.getResponseType();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse40 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant41 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse42 = locationDescriptionListServiceResponse40.setNextToken(instant41);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest43 = timeAlignedDataServiceRequest38.setQueryFrom(instant41);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Qualifier qualifier44 = qualifier34.setDateApplied(instant41);
        java.time.Instant instant45 = qualifier44.getDateApplied();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DownchainProcessorListByRatingModelServiceRequest downchainProcessorListByRatingModelServiceRequest46 = downchainProcessorListByRatingModelServiceRequest19.setQueryFrom(instant45);
        statisticalDateTimeOffset18.DateTimeOffset = instant45;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Location location48 = location7.setLastModified(instant45);
        ratingModelEffectiveShiftsServiceRequest0.QueryTo = instant45;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingModelEffectiveShiftsServiceRequest ratingModelEffectiveShiftsServiceRequest51 = ratingModelEffectiveShiftsServiceRequest0.setRatingModelIdentifier("9999-12-31T23:59:59.999Z");
        java.lang.String str52 = ratingModelEffectiveShiftsServiceRequest0.RatingModelIdentifier;
        org.junit.Assert.assertNull(instant1);
        org.junit.Assert.assertNull(appliedTagList3);
        org.junit.Assert.assertNotNull(location5);
        org.junit.Assert.assertNotNull(location7);
        org.junit.Assert.assertNull(instant8);
        org.junit.Assert.assertNotNull(instant14);
        org.junit.Assert.assertNotNull(instant17);
        org.junit.Assert.assertNotNull(statisticalDateTimeOffset18);
        org.junit.Assert.assertNotNull(instant25);
        org.junit.Assert.assertNotNull(instant28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "9999-12-31T23:59:59.999Z" + "'", str29, "9999-12-31T23:59:59.999Z");
        org.junit.Assert.assertNotNull(downchainProcessorListByRatingModelServiceRequest31);
        org.junit.Assert.assertNotNull(downchainProcessorListByRatingModelServiceRequest33);
        org.junit.Assert.assertNull(instant35);
        org.junit.Assert.assertNull(str36);
        org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertNotNull(obj39);
        org.junit.Assert.assertEquals(obj39.toString(), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj39), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj39), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertNotNull(instant41);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse42);
        org.junit.Assert.assertNotNull(timeAlignedDataServiceRequest43);
        org.junit.Assert.assertNotNull(qualifier44);
        org.junit.Assert.assertNotNull(instant45);
        org.junit.Assert.assertNotNull(downchainProcessorListByRatingModelServiceRequest46);
        org.junit.Assert.assertNotNull(location48);
        org.junit.Assert.assertNotNull(ratingModelEffectiveShiftsServiceRequest51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "9999-12-31T23:59:59.999Z" + "'", str52, "9999-12-31T23:59:59.999Z");
    }

    @Test
    public void test42754() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest85.test42754");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSpreadsheetTemplate putSpreadsheetTemplate0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSpreadsheetTemplate();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes1 = putSpreadsheetTemplate0.AuditAttributes;
        putSpreadsheetTemplate0.CustomId = "2021.4.62.0";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpreadsheetTemplateType spreadsheetTemplateType4 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSpreadsheetTemplate putSpreadsheetTemplate5 = putSpreadsheetTemplate0.setType(spreadsheetTemplateType4);
        putSpreadsheetTemplate0.CustomId = "http://MaxDurationhttp/json/reply/Integer";
        java.lang.String str8 = putSpreadsheetTemplate0.Description;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSamplingLocationGroup putSamplingLocationGroup9 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSamplingLocationGroup();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSamplingLocationGroup putSamplingLocationGroup11 = putSamplingLocationGroup9.setName("MaxInstant");
        java.lang.Object obj12 = putSamplingLocationGroup9.getResponseType();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSamplingLocationGroup putSamplingLocationGroup14 = putSamplingLocationGroup9.setId("");
        java.lang.String str15 = putSamplingLocationGroup9.Id;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LocationGroupType locationGroupType16 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LocationGroupType();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes17 = locationGroupType16.getAuditAttributes();
        putSamplingLocationGroup9.LocationGroupType = locationGroupType16;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostUnitGroupWithUnit postUnitGroupWithUnit19 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostUnitGroupWithUnit();
        postUnitGroupWithUnit19.Id = "multipart/form-data; boundary=****f2ce0d54-dac7-4cd0-b74f-1024089261f9****";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation22 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedFieldResult plannedFieldResult23 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation24 = observation22.setPlannedFieldResult(plannedFieldResult23);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabInstruction labInstruction25 = null;
        observation24.LabInstruction = labInstruction25;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationStatistics observationStatistics27 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation28 = observation24.setStatistics(observationStatistics27);
        java.time.OffsetDateTime offsetDateTime29 = observation28.getResultTime();
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple> importHistoryEventSimpleList30 = observation28.ImportHistoryEventSimples;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty observedProperty31 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation32 = observation28.setObservedProperty(observedProperty31);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultGrade resultGrade33 = observation32.ResultGrade;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails34 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails36 = labResultDetails34.setAnalysisComment("/AQUARIUS/Acquisition/v2");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes37 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails38 = labResultDetails36.setAuditAttributes(auditAttributes37);
        observation32.AuditAttributes = auditAttributes37;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostUnitGroupWithUnit postUnitGroupWithUnit40 = postUnitGroupWithUnit19.setAuditAttributes(auditAttributes37);
        java.lang.String str41 = postUnitGroupWithUnit40.Id;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostUnitGroupWithUnit postUnitGroupWithUnit43 = postUnitGroupWithUnit40.setSupportsConversion((java.lang.Boolean) true);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes44 = postUnitGroupWithUnit40.getAuditAttributes();
        locationGroupType16.AuditAttributes = auditAttributes44;
        putSpreadsheetTemplate0.AuditAttributes = auditAttributes44;
        org.junit.Assert.assertNull(auditAttributes1);
        org.junit.Assert.assertNotNull(putSpreadsheetTemplate5);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(putSamplingLocationGroup11);
        org.junit.Assert.assertNotNull(obj12);
        org.junit.Assert.assertEquals(obj12.toString(), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$SamplingLocationGroup");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj12), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$SamplingLocationGroup");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj12), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$SamplingLocationGroup");
        org.junit.Assert.assertNotNull(putSamplingLocationGroup14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNull(auditAttributes17);
        org.junit.Assert.assertNotNull(observation24);
        org.junit.Assert.assertNotNull(observation28);
        org.junit.Assert.assertNull(offsetDateTime29);
        org.junit.Assert.assertNull(importHistoryEventSimpleList30);
        org.junit.Assert.assertNotNull(observation32);
        org.junit.Assert.assertNull(resultGrade33);
        org.junit.Assert.assertNotNull(labResultDetails36);
        org.junit.Assert.assertNotNull(labResultDetails38);
        org.junit.Assert.assertNotNull(postUnitGroupWithUnit40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "multipart/form-data; boundary=****f2ce0d54-dac7-4cd0-b74f-1024089261f9****" + "'", str41, "multipart/form-data; boundary=****f2ce0d54-dac7-4cd0-b74f-1024089261f9****");
        org.junit.Assert.assertNotNull(postUnitGroupWithUnit43);
        org.junit.Assert.assertNotNull(auditAttributes44);
    }

    @Test
    public void test42755() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest85.test42755");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemSpecimen importItemSpecimen0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemSpecimen();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescription locationDescription1 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescription();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescription locationDescription3 = locationDescription1.setIdentifier("");
        java.util.ArrayList<java.lang.String> strList4 = locationDescription3.getSecondaryFolders();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExtendedAttributes getExtendedAttributes5 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExtendedAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AppliesToType appliesToType6 = getExtendedAttributes5.AppliesToType;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DeleteFieldVisits deleteFieldVisits7 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DeleteFieldVisits();
        java.lang.String str8 = deleteFieldVisits7.getSort();
        java.util.List<java.lang.String> strList9 = deleteFieldVisits7.Ids;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_10 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray13 = new java.lang.String[] { "", "" };
        java.util.ArrayList<java.lang.String> strList14 = new java.util.ArrayList<java.lang.String>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList14, strArray13);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_16 = getObservationsV2_10.setDataClassifications((java.util.List<java.lang.String>) strList14);
        java.util.List<java.lang.String> strList17 = getObservationsV2_10.ResultGrades;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary18 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        dischargeSummary18.Reviewer = "";
        java.time.Instant instant21 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        dischargeSummary18.MeasurementTime = instant21;
        getObservationsV2_10.StartResultTime = instant21;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest24 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ControlConditionActivity controlConditionActivity25 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ControlConditionActivity();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ControlCleanedType controlCleanedType26 = null;
        controlConditionActivity25.ControlCleaned = controlCleanedType26;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse28 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant29 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse30 = locationDescriptionListServiceResponse28.setNextToken(instant29);
        controlConditionActivity25.DateCleaned = instant29;
        timeAlignedDataServiceRequest24.QueryFrom = instant29;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_33 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray35 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList36 = new java.util.ArrayList<java.lang.String>();
        boolean boolean37 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList36, strArray35);
        getObservationsV2_33.SpecimenIds = strList36;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags39 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray43 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList44 = new java.util.ArrayList<java.lang.String>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList44, strArray43);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags46 = putLocationTags39.setTagUniqueIds(strList44);
        getObservationsV2_33.ActivityIds = strList44;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest48 = timeAlignedDataServiceRequest24.setTimeSeriesOutputUnitIds(strList44);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_49 = getObservationsV2_10.setCollectionMethodIds((java.util.List<java.lang.String>) strList44);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DeleteFieldVisits deleteFieldVisits50 = deleteFieldVisits7.setSamplingPlanIds((java.util.List<java.lang.String>) strList44);
        getExtendedAttributes5.Ids = strList44;
        locationDescription3.SecondaryFolders = strList44;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemSpecimen importItemSpecimen53 = importItemSpecimen0.setWarningMessages((java.util.List<java.lang.String>) strList44);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Specimen specimen54 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemSpecimen importItemSpecimen55 = importItemSpecimen0.setExistingItem(specimen54);
        java.lang.String str56 = importItemSpecimen0.getRowId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Specimen specimen57 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Specimen();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Specimen specimen59 = specimen57.setFiltrationComment("9999-12-31T23:59:59.9999999Z://2021.4.62.0");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Specimen specimen61 = specimen59.setName("9999-12-31T23:59:59.9999999Z://2021.4.62.0");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostCollectionMethod postCollectionMethod62 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostCollectionMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity postActivity63 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity();
        postActivity63.LoggerFileName = "hi!";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity postActivity67 = postActivity63.setCustomId("");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes68 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity postActivity69 = postActivity67.setAuditAttributes(auditAttributes68);
        postCollectionMethod62.AuditAttributes = auditAttributes68;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Specimen specimen71 = specimen59.setAuditAttributes(auditAttributes68);
        specimen71.FiltrationComment = "hi!";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Specimen specimen75 = specimen71.setNumberOfReceivedObservations((java.lang.Integer) 100);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemSpecimen importItemSpecimen76 = importItemSpecimen0.setExistingItem(specimen75);
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttribute> extendedAttributeList77 = specimen75.ExtendedAttributes;
        org.junit.Assert.assertNotNull(locationDescription3);
        org.junit.Assert.assertNull(strList4);
        org.junit.Assert.assertNull(appliesToType6);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNull(strList9);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(getObservationsV2_16);
        org.junit.Assert.assertNull(strList17);
        org.junit.Assert.assertNotNull(instant21);
        org.junit.Assert.assertNotNull(instant29);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse30);
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(putLocationTags46);
        org.junit.Assert.assertNotNull(timeAlignedDataServiceRequest48);
        org.junit.Assert.assertNotNull(getObservationsV2_49);
        org.junit.Assert.assertNotNull(deleteFieldVisits50);
        org.junit.Assert.assertNotNull(importItemSpecimen53);
        org.junit.Assert.assertNotNull(importItemSpecimen55);
        org.junit.Assert.assertNull(str56);
        org.junit.Assert.assertNotNull(specimen59);
        org.junit.Assert.assertNotNull(specimen61);
        org.junit.Assert.assertNotNull(postActivity67);
        org.junit.Assert.assertNotNull(postActivity69);
        org.junit.Assert.assertNotNull(specimen71);
        org.junit.Assert.assertNotNull(specimen75);
        org.junit.Assert.assertNotNull(importItemSpecimen76);
        org.junit.Assert.assertNull(extendedAttributeList77);
    }

    @Test
    public void test42756() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest85.test42756");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetUnitHistory getUnitHistory0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetUnitHistory();
        getUnitHistory0.Id = "/AQUARIUS/Acquisition/v2://9999-12-31T23:59:59.999Z";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetUnitHistory getUnitHistory4 = getUnitHistory0.setId("hi!");
        java.lang.String str5 = getUnitHistory4.Id;
        java.lang.String str6 = getUnitHistory4.Id;
        java.lang.String str7 = getUnitHistory4.Id;
        java.lang.String str8 = getUnitHistory4.getId();
        org.junit.Assert.assertNotNull(getUnitHistory4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "hi!" + "'", str5, "hi!");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
    }

    @Test
    public void test42757() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest85.test42757");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttribute extendedAttribute0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttribute();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttribute extendedAttribute2 = extendedAttribute0.setId("MinInstant");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostProject postProject3 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostProject();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes4 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostProject postProject5 = postProject3.setAuditAttributes(auditAttributes4);
        java.time.OffsetDateTime offsetDateTime6 = null;
        postProject3.StartTime = offsetDateTime6;
        java.time.OffsetDateTime offsetDateTime8 = postProject3.EndTime;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostProject postProject10 = postProject3.setScopeStatement("");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlan samplingPlan11 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlan();
        samplingPlan11.SamplingLocationGroupSelectionTypeRandomCount = 0;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationGroupSelectionType samplingLocationGroupSelectionType14 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationGroupSelectionType.ALL;
        samplingPlan11.SamplingLocationGroupSelectionType = samplingLocationGroupSelectionType14;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationGroup samplingLocationGroup16 = samplingPlan11.getSamplingLocationGroup();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes17 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlan samplingPlan18 = samplingPlan11.setAuditAttributes(auditAttributes17);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostProject postProject19 = postProject10.setAuditAttributes(auditAttributes17);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes20 = postProject10.AuditAttributes;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostProject postProject21 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostProject();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes22 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostProject postProject23 = postProject21.setAuditAttributes(auditAttributes22);
        java.time.OffsetDateTime offsetDateTime24 = null;
        postProject21.StartTime = offsetDateTime24;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity postActivity26 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity();
        postActivity26.LoggerFileName = "hi!";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity postActivity30 = postActivity26.setCustomId("");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes31 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity postActivity32 = postActivity30.setAuditAttributes(auditAttributes31);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostProject postProject33 = postProject21.setAuditAttributes(auditAttributes31);
        postProject10.AuditAttributes = auditAttributes31;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttribute extendedAttribute35 = extendedAttribute2.setAuditAttributes(auditAttributes31);
        org.junit.Assert.assertNotNull(extendedAttribute2);
        org.junit.Assert.assertNotNull(postProject5);
        org.junit.Assert.assertNull(offsetDateTime8);
        org.junit.Assert.assertNotNull(postProject10);
        org.junit.Assert.assertTrue("'" + samplingLocationGroupSelectionType14 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationGroupSelectionType.ALL + "'", samplingLocationGroupSelectionType14.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationGroupSelectionType.ALL));
        org.junit.Assert.assertNull(samplingLocationGroup16);
        org.junit.Assert.assertNotNull(samplingPlan18);
        org.junit.Assert.assertNotNull(postProject19);
        org.junit.Assert.assertNotNull(auditAttributes20);
        org.junit.Assert.assertNotNull(postProject23);
        org.junit.Assert.assertNotNull(postActivity30);
        org.junit.Assert.assertNotNull(postActivity32);
        org.junit.Assert.assertNotNull(postProject33);
        org.junit.Assert.assertNotNull(extendedAttribute35);
    }

    @Test
    public void test42758() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest85.test42758");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest();
        java.lang.Object obj1 = timeAlignedDataServiceRequest0.getResponseType();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_2 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray5 = new java.lang.String[] { "", "" };
        java.util.ArrayList<java.lang.String> strList6 = new java.util.ArrayList<java.lang.String>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList6, strArray5);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_8 = getObservationsV2_2.setDataClassifications((java.util.List<java.lang.String>) strList6);
        getObservationsV2_8.DepthUnitCustomId = "hi!";
        java.lang.String str11 = getObservationsV2_8.CustomId;
        java.util.List<java.lang.String> strList12 = getObservationsV2_8.getSearch();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_13 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray15 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList16 = new java.util.ArrayList<java.lang.String>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList16, strArray15);
        getObservationsV2_13.SpecimenIds = strList16;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags19 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray23 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList24 = new java.util.ArrayList<java.lang.String>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList24, strArray23);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags26 = putLocationTags19.setTagUniqueIds(strList24);
        getObservationsV2_13.QualityControlTypes = strList24;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_28 = getObservationsV2_8.setMedia((java.util.List<java.lang.String>) strList24);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_29 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String str30 = getObservationsV2_29.getCustomId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_31 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray33 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList34 = new java.util.ArrayList<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList34, strArray33);
        getObservationsV2_31.SpecimenIds = strList34;
        getObservationsV2_29.ProjectIds = strList34;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_38 = getObservationsV2_8.setObservedPropertyIds((java.util.List<java.lang.String>) strList34);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest39 = timeAlignedDataServiceRequest0.setTimeSeriesOutputUnitIds(strList34);
        java.util.ArrayList<java.lang.String> strList40 = timeAlignedDataServiceRequest0.TimeSeriesOutputUnitIds;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest42 = timeAlignedDataServiceRequest0.setIncludeGapMarkers((java.lang.Boolean) true);
        org.junit.Assert.assertNotNull(obj1);
        org.junit.Assert.assertEquals(obj1.toString(), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj1), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj1), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(getObservationsV2_8);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNull(strList12);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(putLocationTags26);
        org.junit.Assert.assertNotNull(getObservationsV2_28);
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(getObservationsV2_38);
        org.junit.Assert.assertNotNull(timeAlignedDataServiceRequest39);
        org.junit.Assert.assertNotNull(strList40);
        org.junit.Assert.assertNotNull(timeAlignedDataServiceRequest42);
    }

    @Test
    public void test42759() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest85.test42759");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CalibrationCheck calibrationCheck0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CalibrationCheck();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CalibrationCheckType calibrationCheckType1 = calibrationCheck0.getCalibrationCheckType();
        java.lang.String str2 = calibrationCheck0.getComments();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Reading reading3 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Reading();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary4 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary6 = dischargeSummary4.setPublish((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay7 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay();
        dischargeSummary6.DifferenceDuringVisit = doubleWithDisplay7;
        reading3.Value = doubleWithDisplay7;
        calibrationCheck0.Difference = doubleWithDisplay7;
        java.lang.String str11 = calibrationCheck0.getSensorUniqueId();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CalibrationCheck calibrationCheck13 = calibrationCheck0.setManufacturer("multipart/form-data; boundary=****6b8051d4-caf2-4095-9f11-faa36b95fc28****");
        org.junit.Assert.assertNull(calibrationCheckType1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNotNull(dischargeSummary6);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNotNull(calibrationCheck13);
    }

    @Test
    public void test42760() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest85.test42760");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ApprovalLevel approvalLevel0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ApprovalLevel();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ApprovalLevel approvalLevel2 = approvalLevel0.setDescription("MinInstant");
        java.lang.Long long3 = approvalLevel0.getLevel();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ApprovalLevel approvalLevel5 = approvalLevel0.setLevel((java.lang.Long) (-1L));
        java.lang.String str6 = approvalLevel5.getDescription();
        java.lang.String str7 = approvalLevel5.Description;
        java.lang.String str8 = approvalLevel5.Color;
        java.lang.String str9 = approvalLevel5.getDescription();
        org.junit.Assert.assertNotNull(approvalLevel2);
        org.junit.Assert.assertNull(long3);
        org.junit.Assert.assertNotNull(approvalLevel5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "MinInstant" + "'", str6, "MinInstant");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "MinInstant" + "'", str7, "MinInstant");
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "MinInstant" + "'", str9, "MinInstant");
    }

    @Test
    public void test42761() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest85.test42761");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitDataServiceRequest fieldVisitDataServiceRequest0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitDataServiceRequest();
        fieldVisitDataServiceRequest0.ApplyRounding = true;
        java.lang.String str3 = fieldVisitDataServiceRequest0.getFieldVisitIdentifier();
        fieldVisitDataServiceRequest0.DiscreteMeasurementActivity = "";
        java.lang.Boolean boolean6 = fieldVisitDataServiceRequest0.ConvertToLocalAssumedDatum;
        fieldVisitDataServiceRequest0.IncludeVerticals = true;
        fieldVisitDataServiceRequest0.IncludeVerticals = true;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitDataServiceRequest fieldVisitDataServiceRequest12 = fieldVisitDataServiceRequest0.setApplyRounding((java.lang.Boolean) true);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitDataServiceRequest fieldVisitDataServiceRequest14 = fieldVisitDataServiceRequest12.setApplyRounding((java.lang.Boolean) true);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(boolean6);
        org.junit.Assert.assertNotNull(fieldVisitDataServiceRequest12);
        org.junit.Assert.assertNotNull(fieldVisitDataServiceRequest14);
    }

    @Test
    public void test42762() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest85.test42762");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DeleteObservationsV2 deleteObservationsV2_0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DeleteObservationsV2();
        java.util.List<java.lang.String> strList1 = deleteObservationsV2_0.SamplingLocationIds;
        deleteObservationsV2_0.MinNumericResultValue = 100.0d;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DeleteObservationsV2 deleteObservationsV2_5 = deleteObservationsV2_0.setFieldVisitId("MinInstant");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetChartDataV2 getChartDataV2_6 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetChartDataV2();
        java.lang.String str7 = getChartDataV2_6.getActivityCustomId();
        java.util.List<java.lang.String> strList8 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetChartDataV2 getChartDataV2_9 = getChartDataV2_6.setSearch(strList8);
        java.time.Instant instant10 = getChartDataV2_9.getStartObservedTime();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemSamplingLocation importItemSamplingLocation11 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemSamplingLocation();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemSamplingLocation importItemSamplingLocation13 = importItemSamplingLocation11.setInput("yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationType putLocationType14 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationType();
        java.lang.String str15 = putLocationType14.Description;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_16 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray19 = new java.lang.String[] { "", "" };
        java.util.ArrayList<java.lang.String> strList20 = new java.util.ArrayList<java.lang.String>();
        boolean boolean21 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList20, strArray19);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_22 = getObservationsV2_16.setDataClassifications((java.util.List<java.lang.String>) strList20);
        getObservationsV2_22.DepthUnitCustomId = "hi!";
        java.lang.String str25 = getObservationsV2_22.CustomId;
        java.util.List<java.lang.String> strList26 = getObservationsV2_22.getSearch();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_27 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray29 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList30 = new java.util.ArrayList<java.lang.String>();
        boolean boolean31 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList30, strArray29);
        getObservationsV2_27.SpecimenIds = strList30;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags33 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray37 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList38 = new java.util.ArrayList<java.lang.String>();
        boolean boolean39 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList38, strArray37);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags40 = putLocationTags33.setTagUniqueIds(strList38);
        getObservationsV2_27.QualityControlTypes = strList38;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_42 = getObservationsV2_22.setMedia((java.util.List<java.lang.String>) strList38);
        putLocationType14.ExtendedAttributeDefinitionIds = strList38;
        importItemSamplingLocation11.Fields = strList38;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetChartDataV2 getChartDataV2_45 = getChartDataV2_9.setSpecimenIds((java.util.List<java.lang.String>) strList38);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DeleteObservationsV2 deleteObservationsV2_46 = deleteObservationsV2_5.setCollectionMethodIds((java.util.List<java.lang.String>) strList38);
        java.lang.Integer int47 = deleteObservationsV2_46.getLimit();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.FieldResultType fieldResultType48 = deleteObservationsV2_46.getFieldResultType();
        org.junit.Assert.assertNull(strList1);
        org.junit.Assert.assertNotNull(deleteObservationsV2_5);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(getChartDataV2_9);
        org.junit.Assert.assertNull(instant10);
        org.junit.Assert.assertNotNull(importItemSamplingLocation13);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(getObservationsV2_22);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertNull(strList26);
        org.junit.Assert.assertNotNull(strArray29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(putLocationTags40);
        org.junit.Assert.assertNotNull(getObservationsV2_42);
        org.junit.Assert.assertNotNull(getChartDataV2_45);
        org.junit.Assert.assertNotNull(deleteObservationsV2_46);
        org.junit.Assert.assertNull(int47);
        org.junit.Assert.assertNull(fieldResultType48);
    }

    @Test
    public void test42763() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest85.test42763");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservationV2 postObservationV2_0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservationV2();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabInstruction labInstruction1 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservationV2 postObservationV2_2 = postObservationV2_0.setLabInstruction(labInstruction1);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails3 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails5 = labResultDetails3.setAnalysisComment("/AQUARIUS/Acquisition/v2");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails7 = labResultDetails3.setPreparationMethod("https");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservationV2 postObservationV2_8 = postObservationV2_2.setLabResultDetails(labResultDetails7);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Taxon taxon9 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservationV2 postObservationV2_10 = postObservationV2_8.setRelatedTaxon(taxon9);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.CategoricalResult categoricalResult11 = postObservationV2_8.CategoricalResult;
        java.time.OffsetDateTime offsetDateTime12 = postObservationV2_8.ObservedTime;
        java.time.OffsetDateTime offsetDateTime13 = postObservationV2_8.ObservedTime;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity quantity14 = postObservationV2_8.getDepth();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultGrade resultGrade15 = postObservationV2_8.getResultGrade();
        org.junit.Assert.assertNotNull(postObservationV2_2);
        org.junit.Assert.assertNotNull(labResultDetails5);
        org.junit.Assert.assertNotNull(labResultDetails7);
        org.junit.Assert.assertNotNull(postObservationV2_8);
        org.junit.Assert.assertNotNull(postObservationV2_10);
        org.junit.Assert.assertNull(categoricalResult11);
        org.junit.Assert.assertNull(offsetDateTime12);
        org.junit.Assert.assertNull(offsetDateTime13);
        org.junit.Assert.assertNull(quantity14);
        org.junit.Assert.assertNull(resultGrade15);
    }

    @Test
    public void test42764() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest85.test42764");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttributeDefinition extendedAttributeDefinition0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttributeDefinition();
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttributeListItem> extendedAttributeListItemList1 = extendedAttributeDefinition0.getDropDownListItems();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes2 = extendedAttributeDefinition0.AuditAttributes;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DataType dataType3 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DataType.TEXT;
        extendedAttributeDefinition0.DataType = dataType3;
        java.lang.Boolean boolean5 = extendedAttributeDefinition0.getMandatory();
        extendedAttributeDefinition0.Description = "http://MaxDurationhttp/json/reply/Integer://multipart/form-data; boundary=****930a219d-85cf-428e-8cad-9442e08cea99****";
        org.junit.Assert.assertNull(extendedAttributeListItemList1);
        org.junit.Assert.assertNull(auditAttributes2);
        org.junit.Assert.assertTrue("'" + dataType3 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DataType.TEXT + "'", dataType3.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DataType.TEXT));
        org.junit.Assert.assertNull(boolean5);
    }

    @Test
    public void test42765() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest85.test42765");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AccessGroup accessGroup0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AccessGroup();
        java.lang.String str1 = accessGroup0.Id;
        java.lang.Boolean boolean2 = accessGroup0.getCanEditAllData();
        java.lang.String str3 = accessGroup0.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes4 = accessGroup0.getAuditAttributes();
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationGroup> samplingLocationGroupList5 = accessGroup0.getSamplingLocationGroups();
        java.lang.String str6 = accessGroup0.getId();
        java.lang.String str7 = accessGroup0.Id;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(boolean2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(auditAttributes4);
        org.junit.Assert.assertNull(samplingLocationGroupList5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(str7);
    }

    @Test
    public void test42766() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest85.test42766");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLaboratory postLaboratory0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLaboratory();
        java.lang.String str1 = postLaboratory0.getPointOfContact();
        java.lang.String str2 = postLaboratory0.getEmailAddress();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLaboratory postLaboratory4 = postLaboratory0.setCustomId("MaxInstant");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLaboratory postLaboratory6 = postLaboratory0.setCustomId("http://MaxDurationhttp/json/reply/ArrayList");
        postLaboratory0.CustomId = "multipart/form-data; boundary=****1eab67e1-84c8-4b82-aa06-d6c7526551f8****";
        postLaboratory0.Description = "multipart/form-data; boundary=****2917d69a-62fa-41ce-b981-4dbe2deab9f5****";
        java.lang.String str11 = postLaboratory0.Address;
        postLaboratory0.Description = "multipart/form-data; boundary=****5b5bcc49-98d5-445c-ae15-d7e16405ad8c****";
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNotNull(postLaboratory4);
        org.junit.Assert.assertNotNull(postLaboratory6);
        org.junit.Assert.assertNull(str11);
    }

    @Test
    public void test42767() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest85.test42767");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetSpecimenObservations getSpecimenObservations0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetSpecimenObservations();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetSpecimenObservations getSpecimenObservations2 = getSpecimenObservations0.setId("multipart/form-data; boundary=****26835278-3e68-484a-a157-468aab2e69a2****");
        java.lang.Object obj3 = getSpecimenObservations0.getResponseType();
        java.lang.Object obj4 = getSpecimenObservations0.getResponseType();
        java.lang.Object obj5 = getSpecimenObservations0.getResponseType();
        org.junit.Assert.assertNotNull(getSpecimenObservations2);
        org.junit.Assert.assertNotNull(obj3);
        org.junit.Assert.assertEquals(obj3.toString(), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$SearchResultObservationNestedInSpecimen");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj3), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$SearchResultObservationNestedInSpecimen");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj3), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$SearchResultObservationNestedInSpecimen");
        org.junit.Assert.assertNotNull(obj4);
        org.junit.Assert.assertEquals(obj4.toString(), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$SearchResultObservationNestedInSpecimen");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj4), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$SearchResultObservationNestedInSpecimen");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj4), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$SearchResultObservationNestedInSpecimen");
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$SearchResultObservationNestedInSpecimen");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$SearchResultObservationNestedInSpecimen");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$SearchResultObservationNestedInSpecimen");
    }

    @Test
    public void test42768() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest85.test42768");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutReportPlugin putReportPlugin0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutReportPlugin();
        putReportPlugin0.UniqueId = "hi!";
        java.lang.Boolean boolean3 = putReportPlugin0.getIsEnabled();
        putReportPlugin0.UniqueId = "/AQUARIUS/Acquisition/v2://9999-12-31T23:59:59.999Z";
        java.lang.String str6 = putReportPlugin0.getUniqueId();
        java.lang.String str7 = putReportPlugin0.getUniqueId();
        java.lang.String str8 = putReportPlugin0.UniqueId;
        org.junit.Assert.assertNull(boolean3);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "/AQUARIUS/Acquisition/v2://9999-12-31T23:59:59.999Z" + "'", str6, "/AQUARIUS/Acquisition/v2://9999-12-31T23:59:59.999Z");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "/AQUARIUS/Acquisition/v2://9999-12-31T23:59:59.999Z" + "'", str7, "/AQUARIUS/Acquisition/v2://9999-12-31T23:59:59.999Z");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "/AQUARIUS/Acquisition/v2://9999-12-31T23:59:59.999Z" + "'", str8, "/AQUARIUS/Acquisition/v2://9999-12-31T23:59:59.999Z");
    }

    @Test
    public void test42769() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest85.test42769");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSpecimen putSpecimen0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSpecimen();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Activity activity1 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Activity();
        putSpecimen0.Activity = activity1;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocation samplingLocation3 = activity1.SamplingLocation;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.CollectionMethod collectionMethod4 = activity1.CollectionMethod;
        java.time.OffsetDateTime offsetDateTime5 = activity1.StartTime;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivity samplingPlanPlannedActivity6 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivity();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes7 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivity samplingPlanPlannedActivity8 = samplingPlanPlannedActivity6.setAuditAttributes(auditAttributes7);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes9 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes11 = auditAttributes9.setCreationUserProfileId("'.'SSSSSSS");
        samplingPlanPlannedActivity8.AuditAttributes = auditAttributes9;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes13 = samplingPlanPlannedActivity8.AuditAttributes;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity postActivity14 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity();
        postActivity14.SourceActivityId = "2021.4.62.0";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity plannedActivity17 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity postActivity18 = postActivity14.setPlannedActivity(plannedActivity17);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity postActivity20 = postActivity14.setLoggerFileName("https");
        postActivity14.Refreshed = false;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity postActivity23 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity();
        postActivity23.SourceActivityId = "2021.4.62.0";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity plannedActivity26 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity postActivity27 = postActivity23.setPlannedActivity(plannedActivity26);
        java.time.OffsetDateTime offsetDateTime28 = null;
        postActivity23.StartTime = offsetDateTime28;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ActivityType activityType30 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ActivityType.REPLICATE;
        postActivity23.Type = activityType30;
        postActivity14.Type = activityType30;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity postActivity33 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity();
        postActivity33.SourceActivityId = "2021.4.62.0";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity plannedActivity36 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity postActivity37 = postActivity33.setPlannedActivity(plannedActivity36);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity postActivity39 = postActivity33.setLoggerFileName("https");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFieldVisitActivityWithTemplate postFieldVisitActivityWithTemplate40 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFieldVisitActivityWithTemplate();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate41 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate();
        specimenTemplate41.CustomId = "hi!";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate44 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate45 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate();
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabInstructionTemplate> labInstructionTemplateList46 = specimenTemplate45.getLabInstructionTemplates();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate47 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate49 = specimenTemplate47.setCustomId("hi!");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate50 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate51 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate();
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabInstructionTemplate> labInstructionTemplateList52 = specimenTemplate51.LabInstructionTemplates;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate[] specimenTemplateArray53 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate[] { specimenTemplate41, specimenTemplate44, specimenTemplate45, specimenTemplate49, specimenTemplate50, specimenTemplate51 };
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate> specimenTemplateList54 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate>();
        boolean boolean55 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate>) specimenTemplateList54, specimenTemplateArray53);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFieldVisitActivityWithTemplate postFieldVisitActivityWithTemplate56 = postFieldVisitActivityWithTemplate40.setSpecimenTemplates((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate>) specimenTemplateList54);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity postActivity57 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity();
        postActivity57.LoggerFileName = "hi!";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity plannedActivity60 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity postActivity61 = postActivity57.setPlannedActivity(plannedActivity60);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ActivityType activityType62 = postActivity57.Type;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFieldVisitActivityWithTemplate postFieldVisitActivityWithTemplate63 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFieldVisitActivityWithTemplate();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate64 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate();
        specimenTemplate64.CustomId = "hi!";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate67 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate68 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate();
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabInstructionTemplate> labInstructionTemplateList69 = specimenTemplate68.getLabInstructionTemplates();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate70 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate72 = specimenTemplate70.setCustomId("hi!");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate73 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate74 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate();
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabInstructionTemplate> labInstructionTemplateList75 = specimenTemplate74.LabInstructionTemplates;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate[] specimenTemplateArray76 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate[] { specimenTemplate64, specimenTemplate67, specimenTemplate68, specimenTemplate72, specimenTemplate73, specimenTemplate74 };
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate> specimenTemplateList77 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate>();
        boolean boolean78 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate>) specimenTemplateList77, specimenTemplateArray76);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFieldVisitActivityWithTemplate postFieldVisitActivityWithTemplate79 = postFieldVisitActivityWithTemplate63.setSpecimenTemplates((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate>) specimenTemplateList77);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.CollectionMethod collectionMethod80 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.CollectionMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFieldVisitActivityWithTemplate postFieldVisitActivityWithTemplate81 = postFieldVisitActivityWithTemplate79.setCollectionMethod(collectionMethod80);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity postActivity82 = postActivity57.setCollectionMethod(collectionMethod80);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFieldVisitActivityWithTemplate postFieldVisitActivityWithTemplate83 = postFieldVisitActivityWithTemplate40.setCollectionMethod(collectionMethod80);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity postActivity84 = postActivity33.setCollectionMethod(collectionMethod80);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivity samplingPlanPlannedActivity85 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivity();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ActivityType activityType86 = null;
        samplingPlanPlannedActivity85.ActivityType = activityType86;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ActivityType activityType88 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ActivityType.FIELD_SURVEY;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivity samplingPlanPlannedActivity89 = samplingPlanPlannedActivity85.setActivityType(activityType88);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity postActivity90 = postActivity33.setType(activityType88);
        postActivity14.Type = activityType88;
        samplingPlanPlannedActivity8.ActivityType = activityType88;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Activity activity93 = activity1.setType(activityType88);
        org.junit.Assert.assertNull(samplingLocation3);
        org.junit.Assert.assertNull(collectionMethod4);
        org.junit.Assert.assertNull(offsetDateTime5);
        org.junit.Assert.assertNotNull(samplingPlanPlannedActivity8);
        org.junit.Assert.assertNotNull(auditAttributes11);
        org.junit.Assert.assertNotNull(auditAttributes13);
        org.junit.Assert.assertNotNull(postActivity18);
        org.junit.Assert.assertNotNull(postActivity20);
        org.junit.Assert.assertNotNull(postActivity27);
        org.junit.Assert.assertTrue("'" + activityType30 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ActivityType.REPLICATE + "'", activityType30.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ActivityType.REPLICATE));
        org.junit.Assert.assertNotNull(postActivity37);
        org.junit.Assert.assertNotNull(postActivity39);
        org.junit.Assert.assertNull(labInstructionTemplateList46);
        org.junit.Assert.assertNotNull(specimenTemplate49);
        org.junit.Assert.assertNull(labInstructionTemplateList52);
        org.junit.Assert.assertNotNull(specimenTemplateArray53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(postFieldVisitActivityWithTemplate56);
        org.junit.Assert.assertNotNull(postActivity61);
        org.junit.Assert.assertNull(activityType62);
        org.junit.Assert.assertNull(labInstructionTemplateList69);
        org.junit.Assert.assertNotNull(specimenTemplate72);
        org.junit.Assert.assertNull(labInstructionTemplateList75);
        org.junit.Assert.assertNotNull(specimenTemplateArray76);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
        org.junit.Assert.assertNotNull(postFieldVisitActivityWithTemplate79);
        org.junit.Assert.assertNotNull(postFieldVisitActivityWithTemplate81);
        org.junit.Assert.assertNotNull(postActivity82);
        org.junit.Assert.assertNotNull(postFieldVisitActivityWithTemplate83);
        org.junit.Assert.assertNotNull(postActivity84);
        org.junit.Assert.assertTrue("'" + activityType88 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ActivityType.FIELD_SURVEY + "'", activityType88.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ActivityType.FIELD_SURVEY));
        org.junit.Assert.assertNotNull(samplingPlanPlannedActivity89);
        org.junit.Assert.assertNotNull(postActivity90);
        org.junit.Assert.assertNotNull(activity93);
    }

    @Test
    public void test42770() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest85.test42770");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostCollectionMethod postCollectionMethod0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostCollectionMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostCollectionMethod postCollectionMethod2 = postCollectionMethod0.setName("");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostCollectionMethod postCollectionMethod4 = postCollectionMethod0.setIdentifierOrganization("/AQUARIUS");
        postCollectionMethod4.IdentifierOrganization = "/AQUARIUS/Provisioning/v1";
        java.lang.String str7 = postCollectionMethod4.getIdentifierOrganization();
        postCollectionMethod4.IdentifierOrganization = "hi!";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostCollectionMethod postCollectionMethod11 = postCollectionMethod4.setIdentifierOrganization("ZZZZZ");
        org.junit.Assert.assertNotNull(postCollectionMethod2);
        org.junit.Assert.assertNotNull(postCollectionMethod4);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "/AQUARIUS/Provisioning/v1" + "'", str7, "/AQUARIUS/Provisioning/v1");
        org.junit.Assert.assertNotNull(postCollectionMethod11);
    }

    @Test
    public void test42771() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest85.test42771");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.IndexConfiguration indexConfiguration0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.IndexConfiguration();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Unit unit1 = indexConfiguration0.Unit;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes2 = indexConfiguration0.AuditAttributes;
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.IndexRange> indexRangeList3 = indexConfiguration0.IndexRanges;
        java.lang.String str4 = indexConfiguration0.CustomId;
        indexConfiguration0.Description = "/AQUARIUS";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Unit unit7 = indexConfiguration0.getUnit();
        org.junit.Assert.assertNull(unit1);
        org.junit.Assert.assertNull(auditAttributes2);
        org.junit.Assert.assertNull(indexRangeList3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(unit7);
    }

    @Test
    public void test42772() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest85.test42772");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.EngineeredStructureDischargeActivity engineeredStructureDischargeActivity0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.EngineeredStructureDischargeActivity();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeChannelMeasurement dischargeChannelMeasurement1 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeChannelMeasurement();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ChannelMaterialType channelMaterialType2 = dischargeChannelMeasurement1.getChannelMaterial();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay3 = dischargeChannelMeasurement1.Discharge;
        java.time.Instant instant4 = dischargeChannelMeasurement1.EndTime;
        dischargeChannelMeasurement1.Channel = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSSSSSZZZZZ";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.EngineeredStructureDischargeActivity engineeredStructureDischargeActivity7 = engineeredStructureDischargeActivity0.setDischargeChannelMeasurement(dischargeChannelMeasurement1);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay8 = null;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.EngineeredStructureDischargeActivity engineeredStructureDischargeActivity9 = engineeredStructureDischargeActivity0.setMeanHead(quantityWithDisplay8);
        java.lang.Boolean boolean10 = engineeredStructureDischargeActivity9.getIsValid();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.EngineeredStructureDischargeActivity engineeredStructureDischargeActivity12 = engineeredStructureDischargeActivity9.setStructureType("hi!");
        engineeredStructureDischargeActivity9.EquationForSelectedStructure = "multipart/form-data; boundary=****ee0ec537-fde4-45ee-9c35-68c37cf65c1c****";
        java.lang.Boolean boolean15 = engineeredStructureDischargeActivity9.getIsValid();
        org.junit.Assert.assertNull(channelMaterialType2);
        org.junit.Assert.assertNull(quantityWithDisplay3);
        org.junit.Assert.assertNull(instant4);
        org.junit.Assert.assertNotNull(engineeredStructureDischargeActivity7);
        org.junit.Assert.assertNotNull(engineeredStructureDischargeActivity9);
        org.junit.Assert.assertNull(boolean10);
        org.junit.Assert.assertNotNull(engineeredStructureDischargeActivity12);
        org.junit.Assert.assertNull(boolean15);
    }

    @Test
    public void test42773() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest85.test42773");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_1 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray3 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList4 = new java.util.ArrayList<java.lang.String>();
        boolean boolean5 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList4, strArray3);
        getObservationsV2_1.SpecimenIds = strList4;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags7 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray11 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList12 = new java.util.ArrayList<java.lang.String>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList12, strArray11);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags14 = putLocationTags7.setTagUniqueIds(strList12);
        getObservationsV2_1.QualityControlTypes = strList12;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest16 = timeAlignedDataServiceRequest0.setTimeSeriesUniqueIds(strList12);
        java.util.ArrayList<java.lang.String> strList17 = timeAlignedDataServiceRequest0.TimeSeriesOutputUnitIds;
        java.util.ArrayList<java.lang.String> strList18 = timeAlignedDataServiceRequest0.TimeSeriesUniqueIds;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest20 = timeAlignedDataServiceRequest0.setApplyRounding((java.lang.Boolean) false);
        java.lang.Boolean boolean21 = timeAlignedDataServiceRequest0.ApplyRounding;
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(putLocationTags14);
        org.junit.Assert.assertNotNull(timeAlignedDataServiceRequest16);
        org.junit.Assert.assertNull(strList17);
        org.junit.Assert.assertNotNull(strList18);
        org.junit.Assert.assertNotNull(timeAlignedDataServiceRequest20);
        org.junit.Assert.assertEquals("'" + boolean21 + "' != '" + false + "'", boolean21, false);
    }

    @Test
    public void test42774() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest85.test42774");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescription locationDescription0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescription();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescription locationDescription2 = locationDescription0.setIdentifier("");
        locationDescription2.UtcOffset = 1.0d;
        java.lang.Boolean boolean5 = locationDescription2.getIsExternalLocation();
        java.lang.String str6 = locationDescription2.getName();
        locationDescription2.Identifier = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSSSSSZZZZZ";
        locationDescription2.IsExternalLocation = false;
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TagMetadata> tagMetadataList11 = locationDescription2.getTags();
        locationDescription2.Publish = true;
        org.junit.Assert.assertNotNull(locationDescription2);
        org.junit.Assert.assertNull(boolean5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(tagMetadataList11);
    }

    @Test
    public void test42775() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest85.test42775");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Reading reading0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Reading();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay1 = reading0.getValue();
        reading0.ReferencePointUniqueId = "hi!";
        java.lang.String str4 = reading0.Parameter;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary5 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary7 = dischargeSummary5.setPublish((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay8 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay();
        dischargeSummary7.DifferenceDuringVisit = doubleWithDisplay8;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay11 = doubleWithDisplay8.setNumeric((java.lang.Double) 100.0d);
        reading0.Value = doubleWithDisplay11;
        java.lang.Boolean boolean13 = reading0.isPublish();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Reading reading15 = reading0.setParameterId("/AQUARIUS/Acquisition/v2://9999-12-31T23:59:59.999Z");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_16 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray19 = new java.lang.String[] { "", "" };
        java.util.ArrayList<java.lang.String> strList20 = new java.util.ArrayList<java.lang.String>();
        boolean boolean21 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList20, strArray19);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_22 = getObservationsV2_16.setDataClassifications((java.util.List<java.lang.String>) strList20);
        getObservationsV2_22.DepthUnitCustomId = "hi!";
        java.lang.String str25 = getObservationsV2_22.CustomId;
        java.util.List<java.lang.String> strList26 = getObservationsV2_22.getSearch();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_27 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray29 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList30 = new java.util.ArrayList<java.lang.String>();
        boolean boolean31 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList30, strArray29);
        getObservationsV2_27.SpecimenIds = strList30;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags33 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray37 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList38 = new java.util.ArrayList<java.lang.String>();
        boolean boolean39 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList38, strArray37);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags40 = putLocationTags33.setTagUniqueIds(strList38);
        getObservationsV2_27.QualityControlTypes = strList38;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_42 = getObservationsV2_22.setMedia((java.util.List<java.lang.String>) strList38);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_43 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String str44 = getObservationsV2_43.getCustomId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_45 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray47 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList48 = new java.util.ArrayList<java.lang.String>();
        boolean boolean49 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList48, strArray47);
        getObservationsV2_45.SpecimenIds = strList48;
        getObservationsV2_43.ProjectIds = strList48;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_52 = getObservationsV2_22.setObservedPropertyIds((java.util.List<java.lang.String>) strList48);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Reading reading53 = reading0.setReadingQualifiers(strList48);
        reading53.Parameter = "/AQUARIUS/Acquisition/v2://9999-12-31T23:59:59.999Z";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay56 = reading53.Value;
        java.lang.String str57 = reading53.ReferencePointUniqueId;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay58 = reading53.getValue();
        org.junit.Assert.assertNull(doubleWithDisplay1);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNotNull(dischargeSummary7);
        org.junit.Assert.assertNotNull(doubleWithDisplay11);
        org.junit.Assert.assertNull(boolean13);
        org.junit.Assert.assertNotNull(reading15);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(getObservationsV2_22);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertNull(strList26);
        org.junit.Assert.assertNotNull(strArray29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(putLocationTags40);
        org.junit.Assert.assertNotNull(getObservationsV2_42);
        org.junit.Assert.assertNull(str44);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(getObservationsV2_52);
        org.junit.Assert.assertNotNull(reading53);
        org.junit.Assert.assertNotNull(doubleWithDisplay56);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "hi!" + "'", str57, "hi!");
        org.junit.Assert.assertNotNull(doubleWithDisplay58);
    }

    @Test
    public void test42776() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest85.test42776");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ActiveMeterDetails activeMeterDetails0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ActiveMeterDetails();
        java.lang.String str1 = activeMeterDetails0.SoftwareVersion;
        java.lang.String str2 = activeMeterDetails0.Manufacturer;
        activeMeterDetails0.SerialNumber = "/AQUARIUS";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ActiveMeterCalibration[] activeMeterCalibrationArray5 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ActiveMeterCalibration[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ActiveMeterCalibration> activeMeterCalibrationList6 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ActiveMeterCalibration>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ActiveMeterCalibration>) activeMeterCalibrationList6, activeMeterCalibrationArray5);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ActiveMeterDetails activeMeterDetails8 = activeMeterDetails0.setMeterCalibrations(activeMeterCalibrationList6);
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ActiveMeterCalibration> activeMeterCalibrationList9 = activeMeterDetails8.MeterCalibrations;
        activeMeterDetails8.SoftwareVersion = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSSSSSZZZZZ";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ActiveMeterDetails activeMeterDetails12 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ActiveMeterDetails();
        java.lang.String str13 = activeMeterDetails12.SoftwareVersion;
        java.lang.String str14 = activeMeterDetails12.Manufacturer;
        activeMeterDetails12.SerialNumber = "/AQUARIUS";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ActiveMeterCalibration[] activeMeterCalibrationArray17 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ActiveMeterCalibration[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ActiveMeterCalibration> activeMeterCalibrationList18 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ActiveMeterCalibration>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ActiveMeterCalibration>) activeMeterCalibrationList18, activeMeterCalibrationArray17);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ActiveMeterDetails activeMeterDetails20 = activeMeterDetails12.setMeterCalibrations(activeMeterCalibrationList18);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MeterType meterType21 = activeMeterDetails20.getMeterType();
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ActiveMeterCalibration> activeMeterCalibrationList22 = activeMeterDetails20.getMeterCalibrations();
        activeMeterDetails8.MeterCalibrations = activeMeterCalibrationList22;
        activeMeterDetails8.Configuration = "multipart/form-data; boundary=****d9f5d551-383a-4365-87fd-ae7094da6f3b****";
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNotNull(activeMeterCalibrationArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(activeMeterDetails8);
        org.junit.Assert.assertNotNull(activeMeterCalibrationList9);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(activeMeterCalibrationArray17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(activeMeterDetails20);
        org.junit.Assert.assertNull(meterType21);
        org.junit.Assert.assertNotNull(activeMeterCalibrationList22);
    }

    @Test
    public void test42777() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest85.test42777");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostReflectedTimeSeries postReflectedTimeSeries0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostReflectedTimeSeries();
        postReflectedTimeSeries0.Parameter = "0001-01-01T00:00:00.000Z";
        java.lang.String str3 = postReflectedTimeSeries0.Description;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.InterpolationType interpolationType4 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.InterpolationType.PrecedingTotals;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostReflectedTimeSeries postReflectedTimeSeries5 = postReflectedTimeSeries0.setInterpolationType(interpolationType4);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostBasicTimeSeries postBasicTimeSeries6 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostBasicTimeSeries();
        java.lang.String str7 = postBasicTimeSeries6.UtcOffset;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutParameter putParameter8 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutParameter();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ParameterBase parameterBase10 = putParameter8.setUnitGroupIdentifier("/AQUARIUS/Provisioning/v1");
        java.lang.String str11 = putParameter8.getRoundingSpec();
        java.lang.String str12 = putParameter8.RoundingSpec;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostCalculatedDerivedTimeSeries postCalculatedDerivedTimeSeries13 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostCalculatedDerivedTimeSeries();
        java.util.ArrayList<java.lang.String> strList14 = postCalculatedDerivedTimeSeries13.TimeSeriesUniqueIds;
        java.lang.String str15 = postCalculatedDerivedTimeSeries13.Label;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostCalculatedDerivedTimeSeries postCalculatedDerivedTimeSeries17 = postCalculatedDerivedTimeSeries13.setLabel("yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ");
        java.lang.String str18 = postCalculatedDerivedTimeSeries17.Label;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.InputPart inputPart19 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.InputPart();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.InterpolationType interpolationType20 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.InterpolationType.PrecedingConstant;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.InputPart inputPart21 = inputPart19.setHeaders((java.lang.Object) interpolationType20);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostCalculatedDerivedTimeSeries postCalculatedDerivedTimeSeries22 = postCalculatedDerivedTimeSeries17.setInterpolationType(interpolationType20);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ParameterBase parameterBase23 = putParameter8.setInterpolationType(interpolationType20);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ParameterBase parameterBase25 = parameterBase23.setMinValue((java.lang.Double) 100.0d);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.InterpolationType interpolationType26 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.InterpolationType.PrecedingTotals;
        parameterBase23.InterpolationType = interpolationType26;
        postBasicTimeSeries6.InterpolationType = interpolationType26;
        postReflectedTimeSeries5.InterpolationType = interpolationType26;
        postReflectedTimeSeries5.Method = "yyyy'-'MM'-'dd'T'HH':'mm':'ss";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostReflectedTimeSeries postReflectedTimeSeries33 = postReflectedTimeSeries5.setComputationIdentifier("");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostReflectedTimeSeries postReflectedTimeSeries35 = postReflectedTimeSeries33.setDescription("multipart/form-data; boundary=****d9f5d551-383a-4365-87fd-ae7094da6f3b****");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostReflectedTimeSeries postReflectedTimeSeries37 = postReflectedTimeSeries33.setPublish((java.lang.Boolean) true);
        java.lang.String str38 = postReflectedTimeSeries33.Unit;
        java.util.List<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeValue> extendedAttributeValueList39 = postReflectedTimeSeries33.ExtendedAttributeValues;
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertTrue("'" + interpolationType4 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.InterpolationType.PrecedingTotals + "'", interpolationType4.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.InterpolationType.PrecedingTotals));
        org.junit.Assert.assertNotNull(postReflectedTimeSeries5);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(parameterBase10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNull(strList14);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNotNull(postCalculatedDerivedTimeSeries17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ" + "'", str18, "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ");
        org.junit.Assert.assertTrue("'" + interpolationType20 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.InterpolationType.PrecedingConstant + "'", interpolationType20.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.InterpolationType.PrecedingConstant));
        org.junit.Assert.assertNotNull(inputPart21);
        org.junit.Assert.assertNotNull(postCalculatedDerivedTimeSeries22);
        org.junit.Assert.assertNotNull(parameterBase23);
        org.junit.Assert.assertNotNull(parameterBase25);
        org.junit.Assert.assertTrue("'" + interpolationType26 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.InterpolationType.PrecedingTotals + "'", interpolationType26.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.InterpolationType.PrecedingTotals));
        org.junit.Assert.assertNotNull(postReflectedTimeSeries33);
        org.junit.Assert.assertNotNull(postReflectedTimeSeries35);
        org.junit.Assert.assertNotNull(postReflectedTimeSeries37);
        org.junit.Assert.assertNull(str38);
        org.junit.Assert.assertNull(extendedAttributeValueList39);
    }

    @Test
    public void test42778() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest85.test42778");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportObservations getExportObservations0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportObservations();
        java.lang.Double double1 = getExportObservations0.NumericResultValue;
        java.util.List<java.lang.String> strList2 = getExportObservations0.LabResultLaboratoryIds;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportObservations getExportObservations4 = getExportObservations0.setFieldVisitId("multipart/form-data; boundary=****44f0772e-c3ca-4316-8e2a-61ec8540d661****");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExtendedAttributeDropdownlistitems getExtendedAttributeDropdownlistitems5 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExtendedAttributeDropdownlistitems();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_6 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.util.List<java.lang.String> strList7 = getObservationsV2_6.SamplingContextTagIds;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_8 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray10 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList11 = new java.util.ArrayList<java.lang.String>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList11, strArray10);
        getObservationsV2_8.SpecimenIds = strList11;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags14 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray18 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList19 = new java.util.ArrayList<java.lang.String>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList19, strArray18);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags21 = putLocationTags14.setTagUniqueIds(strList19);
        getObservationsV2_8.QualityControlTypes = strList19;
        getObservationsV2_6.ResultGrades = strList19;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExtendedAttributeDropdownlistitems getExtendedAttributeDropdownlistitems24 = getExtendedAttributeDropdownlistitems5.setSearch((java.util.List<java.lang.String>) strList19);
        java.lang.String str25 = getExtendedAttributeDropdownlistitems5.getId();
        java.util.List<java.lang.String> strList26 = getExtendedAttributeDropdownlistitems5.getSearch();
        getExportObservations4.ResultStatuses = strList26;
        java.lang.String str28 = getExportObservations4.getImportHistoryEventId();
        java.lang.String str29 = getExportObservations4.getImportHistoryEventId();
        java.lang.String str30 = getExportObservations4.CustomId;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportObservations getExportObservations32 = getExportObservations4.setImportHistoryEventId("http://MaxDurationhttp/json/reply/String");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetAnalyticalGroups getAnalyticalGroups33 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetAnalyticalGroups();
        java.util.List<java.lang.String> strList34 = getAnalyticalGroups33.ObservedPropertyIds;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetSpecimens getSpecimens35 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetSpecimens();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutUserV2 putUserV2_36 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutUserV2();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UserType userType37 = putUserV2_36.UserType;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetActivities getActivities38 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetActivities();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse39 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary40 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary42 = dischargeSummary40.setPublish((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse43 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant44 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse45 = locationDescriptionListServiceResponse43.setNextToken(instant44);
        dischargeSummary40.MeasurementTime = instant44;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse47 = locationDescriptionListServiceResponse39.setNextToken(instant44);
        java.time.Instant instant48 = locationDescriptionListServiceResponse39.getNextToken();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetActivities getActivities49 = getActivities38.setToStartTime(instant48);
        java.lang.String str50 = getActivities49.getSort();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_51 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.util.List<java.lang.String> strList52 = getObservationsV2_51.SamplingContextTagIds;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_53 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray55 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList56 = new java.util.ArrayList<java.lang.String>();
        boolean boolean57 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList56, strArray55);
        getObservationsV2_53.SpecimenIds = strList56;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags59 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray63 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList64 = new java.util.ArrayList<java.lang.String>();
        boolean boolean65 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList64, strArray63);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags66 = putLocationTags59.setTagUniqueIds(strList64);
        getObservationsV2_53.QualityControlTypes = strList64;
        getObservationsV2_51.ResultGrades = strList64;
        getActivities49.Media = strList64;
        putUserV2_36.AccessGroups = strList64;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetSpecimens getSpecimens71 = getSpecimens35.setSamplingLocationIds((java.util.List<java.lang.String>) strList64);
        getAnalyticalGroups33.AnalyticalGroupTypes = strList64;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportObservations getExportObservations73 = getExportObservations32.setAnalysisMethodSimpleIds((java.util.List<java.lang.String>) strList64);
        org.junit.Assert.assertNull(double1);
        org.junit.Assert.assertNull(strList2);
        org.junit.Assert.assertNotNull(getExportObservations4);
        org.junit.Assert.assertNull(strList7);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(putLocationTags21);
        org.junit.Assert.assertNotNull(getExtendedAttributeDropdownlistitems24);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertNotNull(strList26);
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertNotNull(getExportObservations32);
        org.junit.Assert.assertNull(strList34);
        org.junit.Assert.assertNull(userType37);
        org.junit.Assert.assertNotNull(dischargeSummary42);
        org.junit.Assert.assertNotNull(instant44);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse45);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse47);
        org.junit.Assert.assertNotNull(instant48);
        org.junit.Assert.assertNotNull(getActivities49);
        org.junit.Assert.assertNull(str50);
        org.junit.Assert.assertNull(strList52);
        org.junit.Assert.assertNotNull(strArray55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertNotNull(strArray63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertNotNull(putLocationTags66);
        org.junit.Assert.assertNotNull(getSpecimens71);
        org.junit.Assert.assertNotNull(getExportObservations73);
    }

    @Test
    public void test42779() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest85.test42779");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostSpecimen postSpecimen0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostSpecimen();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes1 = postSpecimen0.AuditAttributes;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes2 = postSpecimen0.getAuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PreservativeType preservativeType3 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PreservativeType.MERCURIC_CHLORIDE;
        postSpecimen0.Preservative = preservativeType3;
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttribute> extendedAttributeList5 = postSpecimen0.getExtendedAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostSpecimen postSpecimen6 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostSpecimen();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes7 = postSpecimen6.AuditAttributes;
        java.lang.Boolean boolean8 = postSpecimen6.Filtered;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroup analyticalGroup9 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroup();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupType analyticalGroupType10 = analyticalGroup9.getType();
        analyticalGroup9.Name = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSSSSSZZZZZ";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroup analyticalGroup13 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroup();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem analyticalGroupItem14 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod15 = analyticalGroupItem14.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem analyticalGroupItem16 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod17 = analyticalGroupItem16.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod18 = analyticalGroupItem16.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem analyticalGroupItem19 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod20 = analyticalGroupItem19.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod21 = analyticalGroupItem19.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod22 = null;
        analyticalGroupItem19.AnalysisMethod = analysisMethod22;
        java.lang.String str24 = analyticalGroupItem19.getHoldingTime();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem analyticalGroupItem25 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod26 = analyticalGroupItem25.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod27 = analyticalGroupItem25.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem analyticalGroupItem28 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod29 = analyticalGroupItem28.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem analyticalGroupItem30 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod31 = analyticalGroupItem30.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod32 = analyticalGroupItem30.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod33 = null;
        analyticalGroupItem30.AnalysisMethod = analysisMethod33;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem[] analyticalGroupItemArray35 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem[] { analyticalGroupItem14, analyticalGroupItem16, analyticalGroupItem19, analyticalGroupItem25, analyticalGroupItem28, analyticalGroupItem30 };
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem> analyticalGroupItemList36 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem>();
        boolean boolean37 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem>) analyticalGroupItemList36, analyticalGroupItemArray35);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroup analyticalGroup38 = analyticalGroup13.setAnalyticalGroupItems((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem>) analyticalGroupItemList36);
        analyticalGroup9.AnalyticalGroupItems = analyticalGroupItemList36;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes40 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes();
        analyticalGroup9.AuditAttributes = auditAttributes40;
        java.lang.String str42 = analyticalGroup9.Id;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupType analyticalGroupType43 = analyticalGroup9.getType();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupType analyticalGroupType44 = analyticalGroup9.getType();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupType analyticalGroupType45 = analyticalGroup9.getType();
        postSpecimen6.AnalyticalGroup = analyticalGroup9;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostSpecimen postSpecimen47 = postSpecimen0.setAnalyticalGroup(analyticalGroup9);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Laboratory laboratory48 = postSpecimen0.Laboratory;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostSpecimen postSpecimen50 = postSpecimen0.setFiltrationComment("multipart/form-data; boundary=****f642a130-eb6d-4fb6-a1a4-7c7216ab119b****");
        java.lang.Boolean boolean51 = postSpecimen50.getFiltered();
        java.lang.String str52 = postSpecimen50.getName();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroup analyticalGroup53 = postSpecimen50.getAnalyticalGroup();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate54 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate();
        specimenTemplate54.CustomId = "hi!";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate58 = specimenTemplate54.setId("hi!");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes59 = specimenTemplate58.getAuditAttributes();
        postSpecimen50.TemplateCreatedFrom = specimenTemplate58;
        org.junit.Assert.assertNull(auditAttributes1);
        org.junit.Assert.assertNull(auditAttributes2);
        org.junit.Assert.assertTrue("'" + preservativeType3 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PreservativeType.MERCURIC_CHLORIDE + "'", preservativeType3.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PreservativeType.MERCURIC_CHLORIDE));
        org.junit.Assert.assertNull(extendedAttributeList5);
        org.junit.Assert.assertNull(auditAttributes7);
        org.junit.Assert.assertNull(boolean8);
        org.junit.Assert.assertNull(analyticalGroupType10);
        org.junit.Assert.assertNull(analysisMethod15);
        org.junit.Assert.assertNull(analysisMethod17);
        org.junit.Assert.assertNull(analysisMethod18);
        org.junit.Assert.assertNull(analysisMethod20);
        org.junit.Assert.assertNull(analysisMethod21);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNull(analysisMethod26);
        org.junit.Assert.assertNull(analysisMethod27);
        org.junit.Assert.assertNull(analysisMethod29);
        org.junit.Assert.assertNull(analysisMethod31);
        org.junit.Assert.assertNull(analysisMethod32);
        org.junit.Assert.assertNotNull(analyticalGroupItemArray35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(analyticalGroup38);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertNull(analyticalGroupType43);
        org.junit.Assert.assertNull(analyticalGroupType44);
        org.junit.Assert.assertNull(analyticalGroupType45);
        org.junit.Assert.assertNotNull(postSpecimen47);
        org.junit.Assert.assertNull(laboratory48);
        org.junit.Assert.assertNotNull(postSpecimen50);
        org.junit.Assert.assertNull(boolean51);
        org.junit.Assert.assertNull(str52);
        org.junit.Assert.assertNotNull(analyticalGroup53);
        org.junit.Assert.assertNotNull(specimenTemplate58);
        org.junit.Assert.assertNull(auditAttributes59);
    }

    @Test
    public void test42780() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest85.test42780");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationExportIIV2 getObservationExportIIV2_0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationExportIIV2();
        java.util.List<java.lang.String> strList1 = getObservationExportIIV2_0.getCollectionMethodIds();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetChartDataV2 getChartDataV2_2 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetChartDataV2();
        java.util.List<java.lang.String> strList3 = getChartDataV2_2.getProjectIds();
        java.util.List<java.lang.String> strList4 = getChartDataV2_2.SamplingContextTagIds;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DeleteFieldVisits deleteFieldVisits5 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DeleteFieldVisits();
        java.lang.String str6 = deleteFieldVisits5.Sort;
        deleteFieldVisits5.Sort = "9999-12-31T23:59:59.999Z";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_9 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray11 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList12 = new java.util.ArrayList<java.lang.String>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList12, strArray11);
        getObservationsV2_9.SpecimenIds = strList12;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags15 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray19 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList20 = new java.util.ArrayList<java.lang.String>();
        boolean boolean21 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList20, strArray19);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags22 = putLocationTags15.setTagUniqueIds(strList20);
        getObservationsV2_9.QualityControlTypes = strList20;
        java.util.List<java.lang.String> strList24 = getObservationsV2_9.getAnalyticalGroupIds();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_26 = getObservationsV2_9.setSpecimenName("/AQUARIUS/Acquisition/v2://9999-12-31T23:59:59.999Z");
        java.util.List<java.lang.String> strList27 = getObservationsV2_26.getMedia();
        java.time.Instant instant28 = getObservationsV2_26.getStartModificationTime();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_29 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray31 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList32 = new java.util.ArrayList<java.lang.String>();
        boolean boolean33 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList32, strArray31);
        getObservationsV2_29.SpecimenIds = strList32;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_35 = getObservationsV2_26.setProjectIds((java.util.List<java.lang.String>) strList32);
        deleteFieldVisits5.Search = strList32;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetChartDataV2 getChartDataV2_37 = getChartDataV2_2.setSpecimenIds((java.util.List<java.lang.String>) strList32);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetFieldVisits getFieldVisits38 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetFieldVisits();
        java.util.List<java.lang.String> strList39 = getFieldVisits38.getSamplingLocationIds();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags40 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray44 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList45 = new java.util.ArrayList<java.lang.String>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList45, strArray44);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags47 = putLocationTags40.setTagUniqueIds(strList45);
        java.util.ArrayList<java.lang.String> strList48 = putLocationTags47.TagUniqueIds;
        getFieldVisits38.ScheduleIds = strList48;
        java.lang.Integer int50 = getFieldVisits38.Limit;
        java.util.List<java.lang.String> strList51 = getFieldVisits38.getFieldTripIds();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_52 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray54 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList55 = new java.util.ArrayList<java.lang.String>();
        boolean boolean56 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList55, strArray54);
        getObservationsV2_52.SpecimenIds = strList55;
        getFieldVisits38.Search = strList55;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetChartDataV2 getChartDataV2_59 = getChartDataV2_37.setCollectionMethodIds((java.util.List<java.lang.String>) strList55);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationExportIIV2 getObservationExportIIV2_60 = getObservationExportIIV2_0.setIds((java.util.List<java.lang.String>) strList55);
        java.util.List<java.lang.String> strList61 = getObservationExportIIV2_60.AnalysisMethodIds;
        java.util.List<java.lang.String> strList62 = getObservationExportIIV2_60.CollectionMethodIds;
        java.util.List<java.lang.String> strList63 = getObservationExportIIV2_60.getActivityIds();
        java.util.List<java.lang.String> strList64 = getObservationExportIIV2_60.ResultStatuses;
        java.util.List<java.lang.String> strList65 = getObservationExportIIV2_60.SpecimenIds;
        java.util.List<java.lang.String> strList66 = getObservationExportIIV2_60.CollectionMethodIds;
        org.junit.Assert.assertNull(strList1);
        org.junit.Assert.assertNull(strList3);
        org.junit.Assert.assertNull(strList4);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(putLocationTags22);
        org.junit.Assert.assertNull(strList24);
        org.junit.Assert.assertNotNull(getObservationsV2_26);
        org.junit.Assert.assertNull(strList27);
        org.junit.Assert.assertNull(instant28);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(getObservationsV2_35);
        org.junit.Assert.assertNotNull(getChartDataV2_37);
        org.junit.Assert.assertNull(strList39);
        org.junit.Assert.assertNotNull(strArray44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(putLocationTags47);
        org.junit.Assert.assertNotNull(strList48);
        org.junit.Assert.assertNull(int50);
        org.junit.Assert.assertNull(strList51);
        org.junit.Assert.assertNotNull(strArray54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(getChartDataV2_59);
        org.junit.Assert.assertNotNull(getObservationExportIIV2_60);
        org.junit.Assert.assertNull(strList61);
        org.junit.Assert.assertNull(strList62);
        org.junit.Assert.assertNull(strList63);
        org.junit.Assert.assertNull(strList64);
        org.junit.Assert.assertNull(strList65);
        org.junit.Assert.assertNull(strList66);
    }

    @Test
    public void test42781() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest85.test42781");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDatumPeriod locationDatumPeriod0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDatumPeriod();
        java.lang.String str1 = locationDatumPeriod0.Standard;
        java.lang.Double double2 = locationDatumPeriod0.getOffsetToStandard();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDatumPeriod locationDatumPeriod4 = locationDatumPeriod0.setUncertainty((java.lang.Double) 10.0d);
        java.lang.String str5 = locationDatumPeriod4.UnitIdentifier;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Vertical vertical6 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Vertical();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay7 = vertical6.SegmentArea;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay8 = null;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Vertical vertical9 = vertical6.setMeanVelocity(quantityWithDisplay8);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay10 = vertical9.SegmentArea;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Vertical vertical11 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Vertical();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay12 = null;
        vertical11.EffectiveDepth = quantityWithDisplay12;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Vertical vertical15 = vertical11.setPercentageOfTotalDischarge((java.lang.Double) (-1.0d));
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary16 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary18 = dischargeSummary16.setPublish((java.lang.Boolean) false);
        java.lang.String str19 = dischargeSummary18.Reviewer;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary20 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        dischargeSummary20.Reviewer = "";
        dischargeSummary20.Publish = true;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MeasurementGradeType measurementGradeType25 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MeasurementGradeType.Good;
        dischargeSummary20.MeasurementGrade = measurementGradeType25;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary27 = dischargeSummary18.setMeasurementGrade(measurementGradeType25);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity pointVelocityDischargeActivity28 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity pointVelocityDischargeActivity30 = pointVelocityDischargeActivity28.setIsValid((java.lang.Boolean) false);
        pointVelocityDischargeActivity28.Manufacturer = "2021.4.62.0";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity pointVelocityDischargeActivity34 = pointVelocityDischargeActivity28.setSuspensionWeight("");
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Vertical> verticalList35 = pointVelocityDischargeActivity34.getVerticals();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DatumConvertedQuantityWithDisplay datumConvertedQuantityWithDisplay36 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DatumConvertedQuantityWithDisplay();
        pointVelocityDischargeActivity34.DistanceToMeter = datumConvertedQuantityWithDisplay36;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary38 = dischargeSummary18.setDischarge((com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay) datumConvertedQuantityWithDisplay36);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Vertical vertical39 = vertical15.setEffectiveDepth((com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay) datumConvertedQuantityWithDisplay36);
        vertical9.MeanVelocity = datumConvertedQuantityWithDisplay36;
        vertical9.PercentageOfTotalDischarge = 10.0d;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDataCorrectedServiceRequest timeSeriesDataCorrectedServiceRequest43 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDataCorrectedServiceRequest();
        timeSeriesDataCorrectedServiceRequest43.GetParts = "http";
        java.lang.Boolean boolean46 = timeSeriesDataCorrectedServiceRequest43.isIncludeGapMarkers();
        java.time.Instant instant47 = timeSeriesDataCorrectedServiceRequest43.getQueryTo();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingModelEffectiveShiftsServiceRequest ratingModelEffectiveShiftsServiceRequest48 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingModelEffectiveShiftsServiceRequest();
        java.lang.String str49 = ratingModelEffectiveShiftsServiceRequest48.getTimeSeriesUniqueId();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ReferencePointPeriod referencePointPeriod50 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ReferencePointPeriod();
        java.lang.String str51 = referencePointPeriod50.AppliedByUser;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ReferencePointPeriodBase referencePointPeriodBase53 = referencePointPeriod50.setIsMeasuredAgainstLocalAssumedDatum((java.lang.Boolean) true);
        referencePointPeriod50.Uncertainty = 10.0d;
        java.time.Instant instant56 = com.aquaticinformatics.aquarius.sdk.samples.serializers.InstantDeserializer.MinValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ReferencePointPeriodBase referencePointPeriodBase57 = referencePointPeriod50.setValidFrom(instant56);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingModelEffectiveShiftsServiceRequest ratingModelEffectiveShiftsServiceRequest58 = ratingModelEffectiveShiftsServiceRequest48.setQueryFrom(instant56);
        timeSeriesDataCorrectedServiceRequest43.QueryTo = instant56;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Vertical vertical60 = vertical9.setMeasurementTime(instant56);
        locationDatumPeriod4.AppliedTimeUtc = instant56;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(double2);
        org.junit.Assert.assertNotNull(locationDatumPeriod4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(quantityWithDisplay7);
        org.junit.Assert.assertNotNull(vertical9);
        org.junit.Assert.assertNull(quantityWithDisplay10);
        org.junit.Assert.assertNotNull(vertical15);
        org.junit.Assert.assertNotNull(dischargeSummary18);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertTrue("'" + measurementGradeType25 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MeasurementGradeType.Good + "'", measurementGradeType25.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MeasurementGradeType.Good));
        org.junit.Assert.assertNotNull(dischargeSummary27);
        org.junit.Assert.assertNotNull(pointVelocityDischargeActivity30);
        org.junit.Assert.assertNotNull(pointVelocityDischargeActivity34);
        org.junit.Assert.assertNull(verticalList35);
        org.junit.Assert.assertNotNull(dischargeSummary38);
        org.junit.Assert.assertNotNull(vertical39);
        org.junit.Assert.assertNull(boolean46);
        org.junit.Assert.assertNull(instant47);
        org.junit.Assert.assertNull(str49);
        org.junit.Assert.assertNull(str51);
        org.junit.Assert.assertNotNull(referencePointPeriodBase53);
        org.junit.Assert.assertNotNull(instant56);
        org.junit.Assert.assertNotNull(referencePointPeriodBase57);
        org.junit.Assert.assertNotNull(ratingModelEffectiveShiftsServiceRequest58);
        org.junit.Assert.assertNotNull(vertical60);
    }

    @Test
    public void test42782() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest85.test42782");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationUserRole putLocationUserRole0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationUserRole();
        java.lang.Object obj1 = putLocationUserRole0.getResponseType();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutUserRoleBase putUserRoleBase3 = putLocationUserRole0.setRoleUniqueId("2021.8.9990");
        putLocationUserRole0.LocationUniqueId = "multipart/form-data; boundary=****2917d69a-62fa-41ce-b981-4dbe2deab9f5****";
        putLocationUserRole0.RoleUniqueId = "multipart/form-data; boundary=****ebf59e0e-2d1f-43bc-996f-3c628a80f696****";
        putLocationUserRole0.RoleUniqueId = "multipart/form-data; boundary=****e0afd3ef-ab93-4371-a368-4a6f5ef58c71****";
        org.junit.Assert.assertNotNull(obj1);
        org.junit.Assert.assertEquals(obj1.toString(), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning$LocationUserRole");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj1), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning$LocationUserRole");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj1), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning$LocationUserRole");
        org.junit.Assert.assertNotNull(putUserRoleBase3);
    }

    @Test
    public void test42783() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest85.test42783");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesUniqueIdListServiceRequest timeSeriesUniqueIdListServiceRequest0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesUniqueIdListServiceRequest();
        timeSeriesUniqueIdListServiceRequest0.Publish = true;
        timeSeriesUniqueIdListServiceRequest0.LocationIdentifier = "/AQUARIUS/Provisioning/v1";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ExtendedAttributeFilter extendedAttributeFilter5 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ExtendedAttributeFilter();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ExtendedAttributeFilter extendedAttributeFilter7 = extendedAttributeFilter5.setFilterValue("/AQUARIUS/Acquisition/v2");
        java.lang.String str8 = extendedAttributeFilter5.getFilterValue();
        extendedAttributeFilter5.FilterName = "";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ExtendedAttributeFilter extendedAttributeFilter11 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ExtendedAttributeFilter();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ExtendedAttributeFilter extendedAttributeFilter13 = extendedAttributeFilter11.setFilterValue("/AQUARIUS/Acquisition/v2");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ExtendedAttributeFilter extendedAttributeFilter15 = extendedAttributeFilter13.setFilterValue("hi!:///AQUARIUS/Provisioning/v1");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ExtendedAttributeFilter extendedAttributeFilter16 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ExtendedAttributeFilter();
        java.lang.String str17 = extendedAttributeFilter16.FilterValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ExtendedAttributeFilter extendedAttributeFilter18 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ExtendedAttributeFilter();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ExtendedAttributeFilter extendedAttributeFilter20 = extendedAttributeFilter18.setFilterValue("/AQUARIUS/Acquisition/v2");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ExtendedAttributeFilter extendedAttributeFilter21 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ExtendedAttributeFilter();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ExtendedAttributeFilter extendedAttributeFilter23 = extendedAttributeFilter21.setFilterValue("/AQUARIUS/Acquisition/v2");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ExtendedAttributeFilter extendedAttributeFilter24 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ExtendedAttributeFilter();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ExtendedAttributeFilter extendedAttributeFilter26 = extendedAttributeFilter24.setFilterValue("/AQUARIUS/Acquisition/v2");
        java.lang.String str27 = extendedAttributeFilter24.getFilterValue();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ExtendedAttributeFilter extendedAttributeFilter28 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ExtendedAttributeFilter();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ExtendedAttributeFilter extendedAttributeFilter30 = extendedAttributeFilter28.setFilterValue("/AQUARIUS/Acquisition/v2");
        java.lang.String str31 = extendedAttributeFilter28.getFilterName();
        extendedAttributeFilter28.FilterName = "MaxDuration";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ExtendedAttributeFilter extendedAttributeFilter34 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ExtendedAttributeFilter();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ExtendedAttributeFilter extendedAttributeFilter36 = extendedAttributeFilter34.setFilterValue("/AQUARIUS/Acquisition/v2");
        java.lang.String str37 = extendedAttributeFilter34.getFilterName();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ExtendedAttributeFilter extendedAttributeFilter38 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ExtendedAttributeFilter();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ExtendedAttributeFilter extendedAttributeFilter39 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ExtendedAttributeFilter();
        java.lang.String str40 = extendedAttributeFilter39.FilterName;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ExtendedAttributeFilter extendedAttributeFilter41 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ExtendedAttributeFilter();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ExtendedAttributeFilter extendedAttributeFilter43 = extendedAttributeFilter41.setFilterValue("/AQUARIUS/Acquisition/v2");
        java.lang.String str44 = extendedAttributeFilter41.getFilterName();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ExtendedAttributeFilter extendedAttributeFilter45 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ExtendedAttributeFilter();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ExtendedAttributeFilter extendedAttributeFilter46 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ExtendedAttributeFilter();
        java.lang.String str47 = extendedAttributeFilter46.FilterName;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ExtendedAttributeFilter[] extendedAttributeFilterArray48 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ExtendedAttributeFilter[] { extendedAttributeFilter5, extendedAttributeFilter13, extendedAttributeFilter16, extendedAttributeFilter18, extendedAttributeFilter21, extendedAttributeFilter24, extendedAttributeFilter28, extendedAttributeFilter34, extendedAttributeFilter38, extendedAttributeFilter39, extendedAttributeFilter41, extendedAttributeFilter45, extendedAttributeFilter46 };
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ExtendedAttributeFilter> extendedAttributeFilterList49 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ExtendedAttributeFilter>();
        boolean boolean50 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ExtendedAttributeFilter>) extendedAttributeFilterList49, extendedAttributeFilterArray48);
        timeSeriesUniqueIdListServiceRequest0.ExtendedFilters = extendedAttributeFilterList49;
        java.lang.Boolean boolean52 = timeSeriesUniqueIdListServiceRequest0.Publish;
        java.lang.String str53 = timeSeriesUniqueIdListServiceRequest0.getParameter();
        java.lang.String str54 = timeSeriesUniqueIdListServiceRequest0.getChangeEventType();
        org.junit.Assert.assertNotNull(extendedAttributeFilter7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "/AQUARIUS/Acquisition/v2" + "'", str8, "/AQUARIUS/Acquisition/v2");
        org.junit.Assert.assertNotNull(extendedAttributeFilter13);
        org.junit.Assert.assertNotNull(extendedAttributeFilter15);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertNotNull(extendedAttributeFilter20);
        org.junit.Assert.assertNotNull(extendedAttributeFilter23);
        org.junit.Assert.assertNotNull(extendedAttributeFilter26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "/AQUARIUS/Acquisition/v2" + "'", str27, "/AQUARIUS/Acquisition/v2");
        org.junit.Assert.assertNotNull(extendedAttributeFilter30);
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertNotNull(extendedAttributeFilter36);
        org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertNull(str40);
        org.junit.Assert.assertNotNull(extendedAttributeFilter43);
        org.junit.Assert.assertNull(str44);
        org.junit.Assert.assertNull(str47);
        org.junit.Assert.assertNotNull(extendedAttributeFilterArray48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertEquals("'" + boolean52 + "' != '" + true + "'", boolean52, true);
        org.junit.Assert.assertNull(str53);
        org.junit.Assert.assertNull(str54);
    }

    @Test
    public void test42784() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest85.test42784");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Project project0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Project();
        java.lang.String str1 = project0.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ProjectType projectType2 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ProjectType.EVENT_BASED_MONITORING;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Project project3 = project0.setType(projectType2);
        java.time.OffsetDateTime offsetDateTime4 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Project project5 = project0.setStartTime(offsetDateTime4);
        java.time.OffsetDateTime offsetDateTime6 = null;
        project0.StartTime = offsetDateTime6;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Project project9 = project0.setCustomId("http://MaxDurationhttp/json/reply/ArrayList");
        java.lang.String str10 = project0.getApprovalAgency();
        java.lang.String str11 = project0.getCustomId();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + projectType2 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ProjectType.EVENT_BASED_MONITORING + "'", projectType2.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ProjectType.EVENT_BASED_MONITORING));
        org.junit.Assert.assertNotNull(project3);
        org.junit.Assert.assertNotNull(project5);
        org.junit.Assert.assertNotNull(project9);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "http://MaxDurationhttp/json/reply/ArrayList" + "'", str11, "http://MaxDurationhttp/json/reply/ArrayList");
    }

    @Test
    public void test42785() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest85.test42785");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostCalculatedDerivedTimeSeries postCalculatedDerivedTimeSeries0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostCalculatedDerivedTimeSeries();
        java.util.ArrayList<java.lang.String> strList1 = postCalculatedDerivedTimeSeries0.TimeSeriesUniqueIds;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostCalculatedDerivedTimeSeries postCalculatedDerivedTimeSeries3 = postCalculatedDerivedTimeSeries0.setMethod("'.'SSSSSSS");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostCalculatedDerivedTimeSeries postCalculatedDerivedTimeSeries4 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostCalculatedDerivedTimeSeries();
        java.util.ArrayList<java.lang.String> strList5 = postCalculatedDerivedTimeSeries4.TimeSeriesUniqueIds;
        java.lang.String str6 = postCalculatedDerivedTimeSeries4.Label;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostCalculatedDerivedTimeSeries postCalculatedDerivedTimeSeries8 = postCalculatedDerivedTimeSeries4.setLabel("yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ");
        java.lang.String str9 = postCalculatedDerivedTimeSeries8.Label;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.InputPart inputPart10 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.InputPart();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.InterpolationType interpolationType11 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.InterpolationType.PrecedingConstant;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.InputPart inputPart12 = inputPart10.setHeaders((java.lang.Object) interpolationType11);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostCalculatedDerivedTimeSeries postCalculatedDerivedTimeSeries13 = postCalculatedDerivedTimeSeries8.setInterpolationType(interpolationType11);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostCalculatedDerivedTimeSeries postCalculatedDerivedTimeSeries14 = postCalculatedDerivedTimeSeries3.setInterpolationType(interpolationType11);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostCalculatedDerivedTimeSeries postCalculatedDerivedTimeSeries16 = postCalculatedDerivedTimeSeries3.setUnit("zZZZZ");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostCalculatedDerivedTimeSeries postCalculatedDerivedTimeSeries18 = postCalculatedDerivedTimeSeries3.setSubLocationIdentifier("multipart/form-data; boundary=****231224c4-98ce-4e30-bd65-1d25287c4abe****");
        org.junit.Assert.assertNull(strList1);
        org.junit.Assert.assertNotNull(postCalculatedDerivedTimeSeries3);
        org.junit.Assert.assertNull(strList5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNotNull(postCalculatedDerivedTimeSeries8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ" + "'", str9, "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ");
        org.junit.Assert.assertTrue("'" + interpolationType11 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.InterpolationType.PrecedingConstant + "'", interpolationType11.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.InterpolationType.PrecedingConstant));
        org.junit.Assert.assertNotNull(inputPart12);
        org.junit.Assert.assertNotNull(postCalculatedDerivedTimeSeries13);
        org.junit.Assert.assertNotNull(postCalculatedDerivedTimeSeries14);
        org.junit.Assert.assertNotNull(postCalculatedDerivedTimeSeries16);
        org.junit.Assert.assertNotNull(postCalculatedDerivedTimeSeries18);
    }

    @Test
    public void test42786() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest85.test42786");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabInstructionTemplate labInstructionTemplate0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabInstructionTemplate();
        java.lang.String str1 = labInstructionTemplate0.HoldingTime;
        labInstructionTemplate0.PreparationMethod = "/AQUARIUS/Provisioning/v1";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedFieldResult plannedFieldResult4 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedFieldResult();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes5 = plannedFieldResult4.AuditAttributes;
        plannedFieldResult4.Id = "'.'SSSSSSS";
        java.lang.String str8 = plannedFieldResult4.DeviceType;
        java.lang.String str9 = plannedFieldResult4.Id;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricConfiguration metricConfiguration10 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricConfiguration();
        java.lang.String str11 = metricConfiguration10.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty observedProperty12 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty();
        observedProperty12.CasNumber = "MinDuration";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricConfiguration metricConfiguration15 = metricConfiguration10.setObservedProperty(observedProperty12);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultType resultType16 = observedProperty12.ResultType;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservedProperty postObservedProperty17 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservedProperty();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UnitGroup unitGroup18 = postObservedProperty17.UnitGroup;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity quantity19 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Unit unit20 = null;
        quantity19.Unit = unit20;
        postObservedProperty17.LowerLimit = quantity19;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity quantity23 = postObservedProperty17.LowerLimit;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Unit unit24 = quantity23.Unit;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty observedProperty25 = observedProperty12.setUpperLimit(quantity23);
        plannedFieldResult4.ObservedProperty = observedProperty25;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabInstructionTemplate labInstructionTemplate27 = labInstructionTemplate0.setObservedProperty(observedProperty25);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UnitGroup unitGroup28 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UnitGroup();
        unitGroup28.CustomId = "https";
        observedProperty25.UnitGroup = unitGroup28;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSpecimen putSpecimen32 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSpecimen();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Activity activity33 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Activity();
        putSpecimen32.Activity = activity33;
        java.lang.String str35 = activity33.Id;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ActivityType activityType36 = activity33.getType();
        activity33.Refreshed = false;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.CollectionMethod collectionMethod39 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.CollectionMethod();
        java.lang.String str40 = collectionMethod39.getCustomId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedFieldResult plannedFieldResult41 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedFieldResult();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes42 = plannedFieldResult41.AuditAttributes;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails43 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails45 = labResultDetails43.setAnalysisComment("/AQUARIUS/Acquisition/v2");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes46 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails47 = labResultDetails45.setAuditAttributes(auditAttributes46);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedFieldResult plannedFieldResult48 = plannedFieldResult41.setAuditAttributes(auditAttributes46);
        collectionMethod39.AuditAttributes = auditAttributes46;
        activity33.AuditAttributes = auditAttributes46;
        observedProperty25.AuditAttributes = auditAttributes46;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(auditAttributes5);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "'.'SSSSSSS" + "'", str9, "'.'SSSSSSS");
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNotNull(metricConfiguration15);
        org.junit.Assert.assertNull(resultType16);
        org.junit.Assert.assertNull(unitGroup18);
        org.junit.Assert.assertNotNull(quantity23);
        org.junit.Assert.assertNull(unit24);
        org.junit.Assert.assertNotNull(observedProperty25);
        org.junit.Assert.assertNotNull(labInstructionTemplate27);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertNull(activityType36);
        org.junit.Assert.assertNull(str40);
        org.junit.Assert.assertNull(auditAttributes42);
        org.junit.Assert.assertNotNull(labResultDetails45);
        org.junit.Assert.assertNotNull(labResultDetails47);
        org.junit.Assert.assertNotNull(plannedFieldResult48);
    }

    @Test
    public void test42787() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest85.test42787");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostDatumConvertedTimeSeries postDatumConvertedTimeSeries0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostDatumConvertedTimeSeries();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostDatumConvertedTimeSeries postDatumConvertedTimeSeries2 = postDatumConvertedTimeSeries0.setDescription("yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ");
        java.lang.Boolean boolean3 = postDatumConvertedTimeSeries0.TargetIsLocalAssumedDatum;
        java.lang.String str4 = postDatumConvertedTimeSeries0.getComputationIdentifier();
        java.util.List<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeValue> extendedAttributeValueList5 = postDatumConvertedTimeSeries0.ExtendedAttributeValues;
        java.lang.String str6 = postDatumConvertedTimeSeries0.Method;
        java.lang.Boolean boolean7 = postDatumConvertedTimeSeries0.SourceIsLocalAssumedDatum;
        postDatumConvertedTimeSeries0.Method = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ";
        postDatumConvertedTimeSeries0.TimeSeriesUniqueId = "http";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostDatumConvertedTimeSeries postDatumConvertedTimeSeries13 = postDatumConvertedTimeSeries0.setLocationUniqueId("multipart/form-data; boundary=****1165d1f3-8b30-4f2e-8d0b-ffebab458859****");
        java.lang.Boolean boolean14 = postDatumConvertedTimeSeries0.SourceIsLocalAssumedDatum;
        org.junit.Assert.assertNotNull(postDatumConvertedTimeSeries2);
        org.junit.Assert.assertNull(boolean3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(extendedAttributeValueList5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(boolean7);
        org.junit.Assert.assertNotNull(postDatumConvertedTimeSeries13);
        org.junit.Assert.assertNull(boolean14);
    }

    @Test
    public void test42788() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest85.test42788");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutDetectioncondition putDetectioncondition0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutDetectioncondition();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes1 = putDetectioncondition0.getAuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutDetectioncondition putDetectioncondition3 = putDetectioncondition0.setCustomId("http");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutDetectioncondition putDetectioncondition5 = putDetectioncondition3.setId("MaxInstant");
        java.lang.String str6 = putDetectioncondition3.getId();
        putDetectioncondition3.Name = "/AQUARIUS/Provisioning/v1";
        org.junit.Assert.assertNull(auditAttributes1);
        org.junit.Assert.assertNotNull(putDetectioncondition3);
        org.junit.Assert.assertNotNull(putDetectioncondition5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "MaxInstant" + "'", str6, "MaxInstant");
    }

    @Test
    public void test42789() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest85.test42789");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDescriptionListServiceResponse timeSeriesDescriptionListServiceResponse0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDescriptionListServiceResponse();
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDescription> timeSeriesDescriptionList1 = timeSeriesDescriptionListServiceResponse0.TimeSeriesDescriptions;
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDescription> timeSeriesDescriptionList2 = timeSeriesDescriptionListServiceResponse0.TimeSeriesDescriptions;
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDescription> timeSeriesDescriptionList3 = timeSeriesDescriptionListServiceResponse0.TimeSeriesDescriptions;
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDescription> timeSeriesDescriptionList4 = timeSeriesDescriptionListServiceResponse0.getTimeSeriesDescriptions();
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDescription> timeSeriesDescriptionList5 = timeSeriesDescriptionListServiceResponse0.getTimeSeriesDescriptions();
        org.junit.Assert.assertNull(timeSeriesDescriptionList1);
        org.junit.Assert.assertNull(timeSeriesDescriptionList2);
        org.junit.Assert.assertNull(timeSeriesDescriptionList3);
        org.junit.Assert.assertNull(timeSeriesDescriptionList4);
        org.junit.Assert.assertNull(timeSeriesDescriptionList5);
    }

    @Test
    public void test42790() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest85.test42790");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricConfiguration metricConfiguration0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricConfiguration();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes1 = metricConfiguration0.AuditAttributes;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Taxon[] taxonArray2 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Taxon[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Taxon> taxonList3 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Taxon>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Taxon>) taxonList3, taxonArray2);
        metricConfiguration0.Taxons = taxonList3;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AggregationType aggregationType6 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AggregationType.SUM;
        metricConfiguration0.AggregationType = aggregationType6;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes8 = metricConfiguration0.getAuditAttributes();
        java.lang.Boolean boolean9 = metricConfiguration0.getIncludeChildren();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricConfiguration metricConfiguration10 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricConfiguration();
        java.lang.String str11 = metricConfiguration10.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty observedProperty12 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty();
        observedProperty12.CasNumber = "MinDuration";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricConfiguration metricConfiguration15 = metricConfiguration10.setObservedProperty(observedProperty12);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricConfiguration metricConfiguration17 = metricConfiguration10.setId("yyyy'-'MM'-'dd'T'HH':'mm':'ss");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty observedProperty18 = metricConfiguration17.ObservedProperty;
        metricConfiguration17.UseScoreRanges = false;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty observedProperty21 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation22 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation();
        observation22.CustomId = "hi!";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.CategoricalResult categoricalResult25 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation26 = observation22.setCategoricalResult(categoricalResult25);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple[] importHistoryEventSimpleArray27 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple> importHistoryEventSimpleList28 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple>();
        boolean boolean29 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple>) importHistoryEventSimpleList28, importHistoryEventSimpleArray27);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation30 = observation22.setImportHistoryEventSimples((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple>) importHistoryEventSimpleList28);
        observedProperty21.ImportHistoryEventSimples = importHistoryEventSimpleList28;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Unit unit32 = observedProperty21.getDefaultUnit();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisType analysisType33 = observedProperty21.AnalysisType;
        metricConfiguration17.ObservedProperty = observedProperty21;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricConfiguration metricConfiguration35 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricConfiguration();
        java.lang.String str36 = metricConfiguration35.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty observedProperty37 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty();
        observedProperty37.CasNumber = "MinDuration";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricConfiguration metricConfiguration40 = metricConfiguration35.setObservedProperty(observedProperty37);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AggregationType aggregationType41 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AggregationType.SUM;
        metricConfiguration35.AggregationType = aggregationType41;
        metricConfiguration17.AggregationType = aggregationType41;
        metricConfiguration0.AggregationType = aggregationType41;
        org.junit.Assert.assertNull(auditAttributes1);
        org.junit.Assert.assertNotNull(taxonArray2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + aggregationType6 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AggregationType.SUM + "'", aggregationType6.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AggregationType.SUM));
        org.junit.Assert.assertNull(auditAttributes8);
        org.junit.Assert.assertNull(boolean9);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNotNull(metricConfiguration15);
        org.junit.Assert.assertNotNull(metricConfiguration17);
        org.junit.Assert.assertNotNull(observedProperty18);
        org.junit.Assert.assertNotNull(observation26);
        org.junit.Assert.assertNotNull(importHistoryEventSimpleArray27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(observation30);
        org.junit.Assert.assertNull(unit32);
        org.junit.Assert.assertNull(analysisType33);
        org.junit.Assert.assertNull(str36);
        org.junit.Assert.assertNotNull(metricConfiguration40);
        org.junit.Assert.assertTrue("'" + aggregationType41 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AggregationType.SUM + "'", aggregationType41.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AggregationType.SUM));
    }

    @Test
    public void test42791() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest85.test42791");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitReading fieldVisitReading0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitReading();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitReadingType fieldVisitReadingType1 = fieldVisitReading0.ReadingType;
        fieldVisitReading0.ControlCondition = "https";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Uncertainty uncertainty4 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Uncertainty();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.UncertaintyType uncertaintyType5 = null;
        uncertainty4.UncertaintyType = uncertaintyType5;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay7 = uncertainty4.getQuantitativeUncertainty();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Uncertainty uncertainty8 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Uncertainty();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QualitativeUncertaintyType qualitativeUncertaintyType9 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QualitativeUncertaintyType.Excellent;
        uncertainty8.QualitativeUncertainty = qualitativeUncertaintyType9;
        uncertainty4.QualitativeUncertainty = qualitativeUncertaintyType9;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QualitativeUncertaintyType qualitativeUncertaintyType12 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QualitativeUncertaintyType.Excellent;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Uncertainty uncertainty13 = uncertainty4.setQualitativeUncertainty(qualitativeUncertaintyType12);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitReading fieldVisitReading14 = fieldVisitReading0.setUncertainty(uncertainty13);
        fieldVisitReading0.Publish = false;
        java.lang.String str17 = fieldVisitReading0.getMonitoringMethod();
        org.junit.Assert.assertNull(fieldVisitReadingType1);
        org.junit.Assert.assertNull(doubleWithDisplay7);
        org.junit.Assert.assertTrue("'" + qualitativeUncertaintyType9 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QualitativeUncertaintyType.Excellent + "'", qualitativeUncertaintyType9.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QualitativeUncertaintyType.Excellent));
        org.junit.Assert.assertTrue("'" + qualitativeUncertaintyType12 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QualitativeUncertaintyType.Excellent + "'", qualitativeUncertaintyType12.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QualitativeUncertaintyType.Excellent));
        org.junit.Assert.assertNotNull(uncertainty13);
        org.junit.Assert.assertNotNull(fieldVisitReading14);
        org.junit.Assert.assertNull(str17);
    }

    @Test
    public void test42792() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest85.test42792");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ReferenceStandardOffset referenceStandardOffset0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ReferenceStandardOffset();
        java.lang.String str1 = referenceStandardOffset0.getStandard();
        java.lang.Double double2 = referenceStandardOffset0.getUncertainty();
        referenceStandardOffset0.OffsetToReferenceStandard = 10.0d;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ReferenceStandardOffset referenceStandardOffset6 = referenceStandardOffset0.setUncertainty((java.lang.Double) 100.0d);
        referenceStandardOffset0.OffsetToReferenceStandard = 1.0d;
        referenceStandardOffset0.Uncertainty = 1.0d;
        java.lang.String str11 = referenceStandardOffset0.getComments();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(double2);
        org.junit.Assert.assertNotNull(referenceStandardOffset6);
        org.junit.Assert.assertNull(str11);
    }

    @Test
    public void test42793() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest85.test42793");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricResult metricResult0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricResult();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExtendedAttributeDropdownlistitems getExtendedAttributeDropdownlistitems1 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExtendedAttributeDropdownlistitems();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_2 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.util.List<java.lang.String> strList3 = getObservationsV2_2.SamplingContextTagIds;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_4 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray6 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList7 = new java.util.ArrayList<java.lang.String>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList7, strArray6);
        getObservationsV2_4.SpecimenIds = strList7;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags10 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray14 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList15 = new java.util.ArrayList<java.lang.String>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList15, strArray14);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags17 = putLocationTags10.setTagUniqueIds(strList15);
        getObservationsV2_4.QualityControlTypes = strList15;
        getObservationsV2_2.ResultGrades = strList15;
        getExtendedAttributeDropdownlistitems1.Search = strList15;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricResult metricResult21 = metricResult0.setMatchedObservations((java.util.List<java.lang.String>) strList15);
        metricResult21.OverriddenByUser = false;
        java.lang.Boolean boolean24 = metricResult21.getOverriddenByUser();
        java.lang.Double double25 = metricResult21.getScore();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricConfiguration metricConfiguration26 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricConfiguration();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes27 = metricConfiguration26.getAuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricResult metricResult28 = metricResult21.setMetricConfiguration(metricConfiguration26);
        metricResult21.OverriddenByUser = true;
        java.lang.Double double31 = metricResult21.getScore();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ReportListServiceRequest reportListServiceRequest32 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ReportListServiceRequest();
        reportListServiceRequest32.ReportTitle = "MinDuration";
        java.lang.String str35 = reportListServiceRequest32.getLocationUniqueId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_36 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray39 = new java.lang.String[] { "", "" };
        java.util.ArrayList<java.lang.String> strList40 = new java.util.ArrayList<java.lang.String>();
        boolean boolean41 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList40, strArray39);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_42 = getObservationsV2_36.setDataClassifications((java.util.List<java.lang.String>) strList40);
        getObservationsV2_42.DepthUnitCustomId = "hi!";
        java.lang.String str45 = getObservationsV2_42.CustomId;
        java.util.List<java.lang.String> strList46 = getObservationsV2_42.getSearch();
        java.util.List<java.lang.String> strList47 = getObservationsV2_42.getAnalysisMethodSimpleIds();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_48 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray51 = new java.lang.String[] { "", "" };
        java.util.ArrayList<java.lang.String> strList52 = new java.util.ArrayList<java.lang.String>();
        boolean boolean53 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList52, strArray51);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_54 = getObservationsV2_48.setDataClassifications((java.util.List<java.lang.String>) strList52);
        java.util.List<java.lang.String> strList55 = getObservationsV2_48.ResultGrades;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.FieldResultType fieldResultType56 = null;
        getObservationsV2_48.FieldResultType = fieldResultType56;
        getObservationsV2_48.MaxNumericResultValue = 100.0d;
        java.lang.String str60 = getObservationsV2_48.getActivityCustomId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_62 = getObservationsV2_48.setDepthUnitCustomId("/AQUARIUS/Acquisition/v2://9999-12-31T23:59:59.999Z");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_63 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray65 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList66 = new java.util.ArrayList<java.lang.String>();
        boolean boolean67 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList66, strArray65);
        getObservationsV2_63.SpecimenIds = strList66;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_69 = getObservationsV2_48.setAnalysisMethodIds((java.util.List<java.lang.String>) strList66);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_70 = getObservationsV2_42.setCollectionMethodIds((java.util.List<java.lang.String>) strList66);
        reportListServiceRequest32.TimeSeriesUniqueIds = strList66;
        metricResult21.MatchedObservations = strList66;
        java.lang.Boolean boolean73 = metricResult21.OverriddenByUser;
        org.junit.Assert.assertNull(strList3);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(putLocationTags17);
        org.junit.Assert.assertNotNull(metricResult21);
        org.junit.Assert.assertEquals("'" + boolean24 + "' != '" + false + "'", boolean24, false);
        org.junit.Assert.assertNull(double25);
        org.junit.Assert.assertNull(auditAttributes27);
        org.junit.Assert.assertNotNull(metricResult28);
        org.junit.Assert.assertNull(double31);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(getObservationsV2_42);
        org.junit.Assert.assertNull(str45);
        org.junit.Assert.assertNull(strList46);
        org.junit.Assert.assertNull(strList47);
        org.junit.Assert.assertNotNull(strArray51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(getObservationsV2_54);
        org.junit.Assert.assertNull(strList55);
        org.junit.Assert.assertNull(str60);
        org.junit.Assert.assertNotNull(getObservationsV2_62);
        org.junit.Assert.assertNotNull(strArray65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertNotNull(getObservationsV2_69);
        org.junit.Assert.assertNotNull(getObservationsV2_70);
        org.junit.Assert.assertEquals("'" + boolean73 + "' != '" + true + "'", boolean73, true);
    }

    @Test
    public void test42794() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest85.test42794");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedPoint timeAlignedPoint0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedPoint();
        timeAlignedPoint0.Method9 = "multipart/form-data; boundary=****7eff1774-b6b0-471a-961c-156c64359366****";
        timeAlignedPoint0.DisplayValue9 = "";
        java.lang.String str5 = timeAlignedPoint0.getApprovalName4();
        java.lang.Long long6 = timeAlignedPoint0.getGradeCode3();
        timeAlignedPoint0.NumericValue6 = (-1.0d);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedPoint timeAlignedPoint10 = timeAlignedPoint0.setApprovalName5("multipart/form-data; boundary=****ee0ec537-fde4-45ee-9c35-68c37cf65c1c****");
        java.lang.String str11 = timeAlignedPoint10.Method5;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedPoint timeAlignedPoint13 = timeAlignedPoint10.setMethod5("http");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.PostReportAttachment postReportAttachment14 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.PostReportAttachment();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.PostReportAttachment postReportAttachment16 = postReportAttachment14.setTitle("MinDuration");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.PostReportAttachment postReportAttachment18 = postReportAttachment14.setTitle("");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.PostReportAttachment postReportAttachment20 = postReportAttachment14.setLocationUniqueId("https");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.PostReportAttachment postReportAttachment21 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.PostReportAttachment();
        postReportAttachment21.Description = "2021.4.62.0";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.ApplyTagRequest applyTagRequest24 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.ApplyTagRequest();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.ApplyTagRequest[] applyTagRequestArray25 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.ApplyTagRequest[] { applyTagRequest24 };
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.ApplyTagRequest> applyTagRequestList26 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.ApplyTagRequest>();
        boolean boolean27 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.ApplyTagRequest>) applyTagRequestList26, applyTagRequestArray25);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.PostReportAttachment postReportAttachment28 = postReportAttachment21.setTags(applyTagRequestList26);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.PostReportAttachment postReportAttachment29 = postReportAttachment14.setTags(applyTagRequestList26);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.PostTimeSeriesOverwriteAppend postTimeSeriesOverwriteAppend30 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.PostTimeSeriesOverwriteAppend();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Interval interval31 = null;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.PostTimeSeriesOverwriteAppend postTimeSeriesOverwriteAppend32 = postTimeSeriesOverwriteAppend30.setTimeRange(interval31);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Interval interval33 = postTimeSeriesOverwriteAppend32.TimeRange;
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.TimeSeriesPoint> timeSeriesPointList34 = postTimeSeriesOverwriteAppend32.Points;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Interval interval35 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Interval();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetActivities getActivities36 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetActivities();
        getActivities36.Limit = 10;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetActivities getActivities40 = getActivities36.setCustomId("/AQUARIUS/Provisioning/v1");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Qualifier qualifier41 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Qualifier();
        java.time.Instant instant42 = qualifier41.DateApplied;
        java.lang.String str43 = qualifier41.User;
        java.lang.String str44 = qualifier41.getIdentifier();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest45 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest();
        java.lang.Object obj46 = timeAlignedDataServiceRequest45.getResponseType();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse47 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant48 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse49 = locationDescriptionListServiceResponse47.setNextToken(instant48);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest50 = timeAlignedDataServiceRequest45.setQueryFrom(instant48);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Qualifier qualifier51 = qualifier41.setDateApplied(instant48);
        java.time.Instant instant52 = qualifier51.getDateApplied();
        getActivities36.ToStartTime = instant52;
        interval35.End = instant52;
        postTimeSeriesOverwriteAppend32.TimeRange = interval35;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.PostReportAttachment postReportAttachment56 = postReportAttachment14.setSourceTimeRange(interval35);
        java.time.Instant instant57 = interval35.End;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedPoint timeAlignedPoint58 = timeAlignedPoint13.setTimestamp(instant57);
        java.lang.String str59 = timeAlignedPoint13.getDisplayValue3();
        java.lang.Long long60 = timeAlignedPoint13.GradeCode10;
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(long6);
        org.junit.Assert.assertNotNull(timeAlignedPoint10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNotNull(timeAlignedPoint13);
        org.junit.Assert.assertNotNull(postReportAttachment16);
        org.junit.Assert.assertNotNull(postReportAttachment18);
        org.junit.Assert.assertNotNull(postReportAttachment20);
        org.junit.Assert.assertNotNull(applyTagRequestArray25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(postReportAttachment28);
        org.junit.Assert.assertNotNull(postReportAttachment29);
        org.junit.Assert.assertNotNull(postTimeSeriesOverwriteAppend32);
        org.junit.Assert.assertNull(interval33);
        org.junit.Assert.assertNull(timeSeriesPointList34);
        org.junit.Assert.assertNotNull(getActivities40);
        org.junit.Assert.assertNull(instant42);
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertNull(str44);
        org.junit.Assert.assertNotNull(obj46);
        org.junit.Assert.assertEquals(obj46.toString(), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj46), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj46), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertNotNull(instant48);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse49);
        org.junit.Assert.assertNotNull(timeAlignedDataServiceRequest50);
        org.junit.Assert.assertNotNull(qualifier51);
        org.junit.Assert.assertNotNull(instant52);
        org.junit.Assert.assertNotNull(postReportAttachment56);
        org.junit.Assert.assertNotNull(instant57);
        org.junit.Assert.assertNotNull(timeAlignedPoint58);
        org.junit.Assert.assertNull(str59);
        org.junit.Assert.assertNull(long60);
    }

    @Test
    public void test42795() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest85.test42795");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedPoint timeAlignedPoint0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedPoint();
        timeAlignedPoint0.Method9 = "multipart/form-data; boundary=****7eff1774-b6b0-471a-961c-156c64359366****";
        timeAlignedPoint0.DisplayValue9 = "";
        java.lang.String str5 = timeAlignedPoint0.getApprovalName4();
        java.lang.Long long6 = timeAlignedPoint0.getGradeCode3();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedPoint timeAlignedPoint8 = timeAlignedPoint0.setMethod10("hi!:///AQUARIUS/Provisioning/v1");
        timeAlignedPoint0.NumericValue4 = 0.0d;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedPoint timeAlignedPoint12 = timeAlignedPoint0.setApprovalName7("'.'SSSSSSS");
        java.lang.Long long13 = timeAlignedPoint12.ApprovalLevel1;
        java.lang.String str14 = timeAlignedPoint12.getDisplayValue1();
        timeAlignedPoint12.NumericValue8 = 1.0d;
        java.lang.String str17 = timeAlignedPoint12.getDisplayValue6();
        java.lang.Long long18 = timeAlignedPoint12.GradeCode4;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedPoint timeAlignedPoint20 = timeAlignedPoint12.setApprovalName5("****ee0ec537-fde4-45ee-9c35-68c37cf65c1c****");
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(long6);
        org.junit.Assert.assertNotNull(timeAlignedPoint8);
        org.junit.Assert.assertNotNull(timeAlignedPoint12);
        org.junit.Assert.assertNull(long13);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertNull(long18);
        org.junit.Assert.assertNotNull(timeAlignedPoint20);
    }

    @Test
    public void test42796() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest85.test42796");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AttachmentRepresentation attachmentRepresentation0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AttachmentRepresentation();
        java.time.OffsetDateTime offsetDateTime1 = attachmentRepresentation0.DateTaken;
        java.lang.String str2 = attachmentRepresentation0.Latitude;
        attachmentRepresentation0.Success = true;
        java.lang.Boolean boolean5 = attachmentRepresentation0.getSuccess();
        java.time.OffsetDateTime offsetDateTime6 = null;
        attachmentRepresentation0.DateTaken = offsetDateTime6;
        attachmentRepresentation0.FileSize = 10;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AttachmentRepresentation attachmentRepresentation11 = attachmentRepresentation0.setLongitude("multipart/form-data; boundary=****221f1588-b890-43c2-a3c8-0d77cfe54330****");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributesFull auditAttributesFull12 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributesFull();
        java.lang.String str13 = auditAttributesFull12.getModificationUserProfileId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UserProfile userProfile14 = auditAttributesFull12.getModificationUserProfile();
        java.time.OffsetDateTime offsetDateTime15 = auditAttributesFull12.CreationTime;
        java.time.OffsetDateTime offsetDateTime16 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributesFull auditAttributesFull17 = auditAttributesFull12.setCreationTime(offsetDateTime16);
        java.lang.String str18 = auditAttributesFull17.CreationUserProfileId;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AttachmentRepresentation attachmentRepresentation19 = attachmentRepresentation0.setAuditAttributes(auditAttributesFull17);
        java.lang.String str20 = attachmentRepresentation0.Longitude;
        org.junit.Assert.assertNull(offsetDateTime1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertEquals("'" + boolean5 + "' != '" + true + "'", boolean5, true);
        org.junit.Assert.assertNotNull(attachmentRepresentation11);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNull(userProfile14);
        org.junit.Assert.assertNull(offsetDateTime15);
        org.junit.Assert.assertNotNull(auditAttributesFull17);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNotNull(attachmentRepresentation19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "multipart/form-data; boundary=****221f1588-b890-43c2-a3c8-0d77cfe54330****" + "'", str20, "multipart/form-data; boundary=****221f1588-b890-43c2-a3c8-0d77cfe54330****");
    }

    @Test
    public void test42797() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest85.test42797");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutProject putProject0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutProject();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutProject putProject2 = putProject0.setScopeStatement("yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ");
        putProject2.Approved = true;
        java.lang.String str5 = putProject2.getCustomId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutProject putProject7 = putProject2.setApproved((java.lang.Boolean) false);
        java.lang.String str8 = putProject7.getScopeStatement();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutProject putProject10 = putProject7.setScopeStatement("MinDuration");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutProject putProject12 = putProject7.setApproved((java.lang.Boolean) true);
        org.junit.Assert.assertNotNull(putProject2);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(putProject7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ" + "'", str8, "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ");
        org.junit.Assert.assertNotNull(putProject10);
        org.junit.Assert.assertNotNull(putProject12);
    }

    @Test
    public void test42798() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest85.test42798");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary2 = dischargeSummary0.setMeanGageHeightMethod("hi!");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay3 = dischargeSummary0.Discharge;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary5 = dischargeSummary0.setComments("yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ");
        java.lang.String str6 = dischargeSummary0.getParty();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MeasurementGradeType measurementGradeType7 = dischargeSummary0.getMeasurementGrade();
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.GageHeightReading> gageHeightReadingList8 = dischargeSummary0.GageHeightReadings;
        org.junit.Assert.assertNotNull(dischargeSummary2);
        org.junit.Assert.assertNull(quantityWithDisplay3);
        org.junit.Assert.assertNotNull(dischargeSummary5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(measurementGradeType7);
        org.junit.Assert.assertNull(gageHeightReadingList8);
    }

    @Test
    public void test42799() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest85.test42799");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Setting setting0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Setting();
        java.lang.String str1 = setting0.getKey();
        java.lang.String str2 = setting0.getDescription();
        java.lang.String str3 = setting0.getDescription();
        setting0.Value = "multipart/form-data; boundary=****ebf59e0e-2d1f-43bc-996f-3c628a80f696****";
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(str3);
    }

    @Test
    public void test42800() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest85.test42800");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.User user0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.User();
        java.util.List<java.lang.String> strList1 = user0.getRoles();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.User user3 = user0.setEmail("hi!");
        user3.CustomId = "POST";
        user3.Id = "9999-12-31T23:59:59.999Z";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.User user8 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.User();
        java.util.List<java.lang.String> strList9 = user8.getRoles();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.User user11 = user8.setEmail("hi!");
        user11.CustomId = "POST";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UserProfile userProfile14 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.User user15 = user11.setUserProfile(userProfile14);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UserType userType16 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UserType.INTERNAL;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.User user17 = user15.setUserType(userType16);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UserProfile userProfile18 = null;
        user15.UserProfile = userProfile18;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UserProfile userProfile20 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UserProfile();
        java.lang.String str21 = userProfile20.LastName;
        user15.UserProfile = userProfile20;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.User user23 = user3.setUserProfile(userProfile20);
        java.lang.String str24 = userProfile20.getFullName();
        org.junit.Assert.assertNull(strList1);
        org.junit.Assert.assertNotNull(user3);
        org.junit.Assert.assertNull(strList9);
        org.junit.Assert.assertNotNull(user11);
        org.junit.Assert.assertNotNull(user15);
        org.junit.Assert.assertTrue("'" + userType16 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UserType.INTERNAL + "'", userType16.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UserType.INTERNAL));
        org.junit.Assert.assertNotNull(user17);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNotNull(user23);
        org.junit.Assert.assertNull(str24);
    }

    @Test
    public void test42801() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest85.test42801");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ParameterMetadata parameterMetadata0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ParameterMetadata();
        parameterMetadata0.RoundingSpec = "";
        java.lang.String str3 = parameterMetadata0.getUnitGroupIdentifier();
        java.lang.String str4 = parameterMetadata0.InterpolationType;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ParameterMetadata parameterMetadata6 = parameterMetadata0.setDisplayName("hi!");
        parameterMetadata6.Identifier = "https";
        java.lang.String str9 = parameterMetadata6.UnitGroupIdentifier;
        java.lang.String str10 = parameterMetadata6.DisplayName;
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNotNull(parameterMetadata6);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "hi!" + "'", str10, "hi!");
    }

    @Test
    public void test42802() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest85.test42802");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostReflectedTimeSeries postReflectedTimeSeries0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostReflectedTimeSeries();
        postReflectedTimeSeries0.Parameter = "0001-01-01T00:00:00.000Z";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostReflectedTimeSeries postReflectedTimeSeries4 = postReflectedTimeSeries0.setComputationPeriodIdentifier("multipart/form-data; boundary=****6b8051d4-caf2-4095-9f11-faa36b95fc28****");
        java.lang.String str5 = postReflectedTimeSeries0.getMethod();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostReflectedTimeSeries postReflectedTimeSeries6 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostReflectedTimeSeries();
        postReflectedTimeSeries6.Comment = "multipart/form-data; boundary=****44f0772e-c3ca-4316-8e2a-61ec8540d661****";
        java.lang.String str9 = postReflectedTimeSeries6.getLabel();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostBasicTimeSeries postBasicTimeSeries10 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostBasicTimeSeries();
        java.lang.String str11 = postBasicTimeSeries10.getParameter();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostBasicTimeSeries postBasicTimeSeries12 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostBasicTimeSeries();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostBasicTimeSeries postBasicTimeSeries14 = postBasicTimeSeries12.setLabel("yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSSSSSZZZZZ");
        java.lang.String str15 = postBasicTimeSeries14.getLabel();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostBasicTimeSeries postBasicTimeSeries17 = postBasicTimeSeries14.setPublish((java.lang.Boolean) true);
        java.lang.Boolean boolean18 = postBasicTimeSeries17.Publish;
        java.time.Duration duration19 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.DurationDeserializer.MinConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostBasicTimeSeries postBasicTimeSeries20 = postBasicTimeSeries17.setGapTolerance(duration19);
        java.lang.String str21 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.DurationSerializer.format(duration19);
        postBasicTimeSeries10.GapTolerance = duration19;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostReflectedTimeSeries postReflectedTimeSeries23 = postReflectedTimeSeries6.setGapTolerance(duration19);
        postReflectedTimeSeries0.GapTolerance = duration19;
        org.junit.Assert.assertNotNull(postReflectedTimeSeries4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNotNull(postBasicTimeSeries14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSSSSSZZZZZ" + "'", str15, "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSSSSSZZZZZ");
        org.junit.Assert.assertNotNull(postBasicTimeSeries17);
        org.junit.Assert.assertEquals("'" + boolean18 + "' != '" + true + "'", boolean18, true);
        org.junit.Assert.assertNotNull(duration19);
        org.junit.Assert.assertNotNull(postBasicTimeSeries20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "-PT87591240H" + "'", str21, "-PT87591240H");
        org.junit.Assert.assertNotNull(postReflectedTimeSeries23);
    }

    @Test
    public void test42803() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest85.test42803");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostExtendedAttribute postExtendedAttribute0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostExtendedAttribute();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostExtendedAttribute postExtendedAttribute1 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostExtendedAttribute();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.TagValueType tagValueType2 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.TagValueType.PickList;
        postExtendedAttribute1.ValueType = tagValueType2;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.EditableExtendedAttribute editableExtendedAttribute4 = postExtendedAttribute0.setValueType(tagValueType2);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.EditableExtendedAttribute editableExtendedAttribute6 = editableExtendedAttribute4.setRequired((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.EditableExtendedAttribute editableExtendedAttribute8 = editableExtendedAttribute4.setVisibleInDatasetList((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostExtendedAttribute postExtendedAttribute9 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostExtendedAttribute();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.EditableExtendedAttribute editableExtendedAttribute11 = postExtendedAttribute9.setDefaultValue("https");
        java.util.ArrayList<java.lang.String> strList12 = postExtendedAttribute9.getPickListValues();
        postExtendedAttribute9.DefaultValue = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.EditableExtendedAttribute editableExtendedAttribute16 = postExtendedAttribute9.setRequired((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Tag tag17 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Tag();
        tag17.AppliesToSensorsGauges = false;
        tag17.AppliesToAttachments = false;
        tag17.AppliesToAttachments = false;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.TagValueType tagValueType24 = tag17.getValueType();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Tag tag26 = tag17.setAppliesToSensorsGauges((java.lang.Boolean) false);
        java.lang.Boolean boolean27 = tag26.AppliesToAttachments;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.TagValueType tagValueType28 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.TagValueType.DateTime;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Tag tag29 = tag26.setValueType(tagValueType28);
        editableExtendedAttribute16.ValueType = tagValueType28;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.EditableExtendedAttribute editableExtendedAttribute31 = editableExtendedAttribute4.setValueType(tagValueType28);
        org.junit.Assert.assertTrue("'" + tagValueType2 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.TagValueType.PickList + "'", tagValueType2.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.TagValueType.PickList));
        org.junit.Assert.assertNotNull(editableExtendedAttribute4);
        org.junit.Assert.assertNotNull(editableExtendedAttribute6);
        org.junit.Assert.assertNotNull(editableExtendedAttribute8);
        org.junit.Assert.assertNotNull(editableExtendedAttribute11);
        org.junit.Assert.assertNull(strList12);
        org.junit.Assert.assertNotNull(editableExtendedAttribute16);
        org.junit.Assert.assertNull(tagValueType24);
        org.junit.Assert.assertNotNull(tag26);
        org.junit.Assert.assertEquals("'" + boolean27 + "' != '" + false + "'", boolean27, false);
        org.junit.Assert.assertTrue("'" + tagValueType28 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.TagValueType.DateTime + "'", tagValueType28.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.TagValueType.DateTime));
        org.junit.Assert.assertNotNull(tag29);
        org.junit.Assert.assertNotNull(editableExtendedAttribute31);
    }

    @Test
    public void test42804() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest85.test42804");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemAnalysisMethod importItemAnalysisMethod0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemAnalysisMethod importItemAnalysisMethod2 = importItemAnalysisMethod0.setInput("POST");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemAnalysisMethod importItemAnalysisMethod4 = importItemAnalysisMethod2.setRowId("https");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod5 = importItemAnalysisMethod4.getExistingItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod6 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemAnalysisMethod importItemAnalysisMethod7 = importItemAnalysisMethod4.setItem(analysisMethod6);
        java.lang.String str8 = importItemAnalysisMethod4.RowId;
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportChangeItem> importChangeItemList9 = importItemAnalysisMethod4.ItemComparison;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod10 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod();
        java.lang.String str11 = analysisMethod10.getName();
        analysisMethod10.MethodId = "multipart/form-data; boundary=****f2ce0d54-dac7-4cd0-b74f-1024089261f9****";
        importItemAnalysisMethod4.Item = analysisMethod10;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod15 = importItemAnalysisMethod4.getExistingItem();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RoleFlattened roleFlattened16 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RoleFlattened();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RoleFlattenedBase roleFlattenedBase18 = roleFlattened16.setCanEditAppendConfigurations((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RoleFlattenedBase roleFlattenedBase20 = roleFlattenedBase18.setName("");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetChartDataV2 getChartDataV2_21 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetChartDataV2();
        java.lang.String str22 = getChartDataV2_21.getActivityCustomId();
        java.util.List<java.lang.String> strList23 = getChartDataV2_21.getCollectionMethodIds();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetChartDataV2 getChartDataV2_25 = getChartDataV2_21.setActivityCustomId("ZZZZZ");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetLabAnalysisMethods getLabAnalysisMethods26 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetLabAnalysisMethods();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_27 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.util.List<java.lang.String> strList28 = getObservationsV2_27.SamplingContextTagIds;
        java.time.Instant instant29 = getObservationsV2_27.getEndModificationTime();
        java.util.List<java.lang.String> strList30 = getObservationsV2_27.Media;
        java.util.List<java.lang.String> strList31 = getObservationsV2_27.ActivityTypes;
        java.util.List<java.lang.String> strList32 = getObservationsV2_27.getLabResultLaboratoryIds();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest33 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest();
        java.lang.Object obj34 = timeAlignedDataServiceRequest33.getResponseType();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_35 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray38 = new java.lang.String[] { "", "" };
        java.util.ArrayList<java.lang.String> strList39 = new java.util.ArrayList<java.lang.String>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList39, strArray38);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_41 = getObservationsV2_35.setDataClassifications((java.util.List<java.lang.String>) strList39);
        getObservationsV2_41.DepthUnitCustomId = "hi!";
        java.lang.String str44 = getObservationsV2_41.CustomId;
        java.util.List<java.lang.String> strList45 = getObservationsV2_41.getSearch();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_46 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList49 = new java.util.ArrayList<java.lang.String>();
        boolean boolean50 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList49, strArray48);
        getObservationsV2_46.SpecimenIds = strList49;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags52 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray56 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList57 = new java.util.ArrayList<java.lang.String>();
        boolean boolean58 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList57, strArray56);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags59 = putLocationTags52.setTagUniqueIds(strList57);
        getObservationsV2_46.QualityControlTypes = strList57;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_61 = getObservationsV2_41.setMedia((java.util.List<java.lang.String>) strList57);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_62 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String str63 = getObservationsV2_62.getCustomId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_64 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray66 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList67 = new java.util.ArrayList<java.lang.String>();
        boolean boolean68 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList67, strArray66);
        getObservationsV2_64.SpecimenIds = strList67;
        getObservationsV2_62.ProjectIds = strList67;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_71 = getObservationsV2_41.setObservedPropertyIds((java.util.List<java.lang.String>) strList67);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest72 = timeAlignedDataServiceRequest33.setTimeSeriesOutputUnitIds(strList67);
        getObservationsV2_27.DataClassifications = strList67;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetLabAnalysisMethods getLabAnalysisMethods74 = getLabAnalysisMethods26.setObservedPropertyIds((java.util.List<java.lang.String>) strList67);
        getChartDataV2_25.ResultGrades = strList67;
        roleFlattenedBase20.RoleApprovalTransitions = strList67;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemAnalysisMethod importItemAnalysisMethod77 = importItemAnalysisMethod4.setFields((java.util.List<java.lang.String>) strList67);
        org.junit.Assert.assertNotNull(importItemAnalysisMethod2);
        org.junit.Assert.assertNotNull(importItemAnalysisMethod4);
        org.junit.Assert.assertNull(analysisMethod5);
        org.junit.Assert.assertNotNull(importItemAnalysisMethod7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "https" + "'", str8, "https");
        org.junit.Assert.assertNull(importChangeItemList9);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNull(analysisMethod15);
        org.junit.Assert.assertNotNull(roleFlattenedBase18);
        org.junit.Assert.assertNotNull(roleFlattenedBase20);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertNull(strList23);
        org.junit.Assert.assertNotNull(getChartDataV2_25);
        org.junit.Assert.assertNull(strList28);
        org.junit.Assert.assertNull(instant29);
        org.junit.Assert.assertNull(strList30);
        org.junit.Assert.assertNull(strList31);
        org.junit.Assert.assertNull(strList32);
        org.junit.Assert.assertNotNull(obj34);
        org.junit.Assert.assertEquals(obj34.toString(), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj34), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj34), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(getObservationsV2_41);
        org.junit.Assert.assertNull(str44);
        org.junit.Assert.assertNull(strList45);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(strArray56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(putLocationTags59);
        org.junit.Assert.assertNotNull(getObservationsV2_61);
        org.junit.Assert.assertNull(str63);
        org.junit.Assert.assertNotNull(strArray66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertNotNull(getObservationsV2_71);
        org.junit.Assert.assertNotNull(timeAlignedDataServiceRequest72);
        org.junit.Assert.assertNotNull(getLabAnalysisMethods74);
        org.junit.Assert.assertNotNull(importItemAnalysisMethod77);
    }

    @Test
    public void test42805() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest85.test42805");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutActivity putActivity0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutActivity();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity quantity1 = null;
        putActivity0.Depth = quantity1;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricResult[] metricResultArray3 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricResult[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricResult> metricResultList4 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricResult>();
        boolean boolean5 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricResult>) metricResultList4, metricResultArray3);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutActivity putActivity6 = putActivity0.setMetricResults((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricResult>) metricResultList4);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ActivityWithDetailsType activityWithDetailsType7 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ActivityWithDetailsType.REPLICATE;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutActivity putActivity8 = putActivity0.setType(activityWithDetailsType7);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ActivityWithDetailsType activityWithDetailsType9 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ActivityWithDetailsType.REPLICATE;
        putActivity8.Type = activityWithDetailsType9;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutActivity putActivity12 = putActivity8.setCustomId("");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity plannedActivity13 = null;
        putActivity12.PlannedActivity = plannedActivity13;
        java.time.OffsetDateTime offsetDateTime15 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutActivity putActivity16 = putActivity12.setEndTime(offsetDateTime15);
        java.lang.String str17 = putActivity16.getSourceActivityId();
        org.junit.Assert.assertNotNull(metricResultArray3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(putActivity6);
        org.junit.Assert.assertTrue("'" + activityWithDetailsType7 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ActivityWithDetailsType.REPLICATE + "'", activityWithDetailsType7.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ActivityWithDetailsType.REPLICATE));
        org.junit.Assert.assertNotNull(putActivity8);
        org.junit.Assert.assertTrue("'" + activityWithDetailsType9 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ActivityWithDetailsType.REPLICATE + "'", activityWithDetailsType9.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ActivityWithDetailsType.REPLICATE));
        org.junit.Assert.assertNotNull(putActivity12);
        org.junit.Assert.assertNotNull(putActivity16);
        org.junit.Assert.assertNull(str17);
    }

    @Test
    public void test42806() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest85.test42806");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ActivityWithDetails activityWithDetails0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ActivityWithDetails();
        activityWithDetails0.LoggerFileName = "'.'SSSSSSS";
        java.time.OffsetDateTime offsetDateTime3 = activityWithDetails0.getEndTime();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocation samplingLocation4 = activityWithDetails0.getSamplingLocation();
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttribute> extendedAttributeList5 = activityWithDetails0.getExtendedAttributes();
        java.time.OffsetDateTime offsetDateTime6 = null;
        activityWithDetails0.EndTime = offsetDateTime6;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ActivityWithDetails activityWithDetails9 = activityWithDetails0.setComment("yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSSSSSZZZZZ");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity plannedActivity10 = activityWithDetails0.getPlannedActivity();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.IndexConfiguration indexConfiguration11 = activityWithDetails0.IndexConfiguration;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity plannedActivity12 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes13 = plannedActivity12.AuditAttributes;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservationV2 postObservationV2_14 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservationV2();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabInstruction labInstruction15 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservationV2 postObservationV2_16 = postObservationV2_14.setLabInstruction(labInstruction15);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedFieldResult plannedFieldResult17 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedFieldResult();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes18 = plannedFieldResult17.AuditAttributes;
        plannedFieldResult17.Id = "'.'SSSSSSS";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservationV2 postObservationV2_21 = postObservationV2_16.setPlannedFieldResult(plannedFieldResult17);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutActivityTemplate putActivityTemplate22 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutActivityTemplate();
        java.lang.String str23 = putActivityTemplate22.getId();
        java.lang.String str24 = putActivityTemplate22.Id;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes25 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes27 = auditAttributes25.setCreationUserProfileId("'.'SSSSSSS");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutActivityTemplate putActivityTemplate28 = putActivityTemplate22.setAuditAttributes(auditAttributes27);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MediumType mediumType29 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MediumType.WATER;
        putActivityTemplate28.Medium = mediumType29;
        java.lang.String str31 = putActivityTemplate28.getComment();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ActivityTemplateType activityTemplateType32 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutActivityTemplate putActivityTemplate33 = putActivityTemplate28.setType(activityTemplateType32);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MediumType mediumType34 = putActivityTemplate33.getMedium();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedFieldResult plannedFieldResult35 = plannedFieldResult17.setMedium(mediumType34);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity plannedActivity36 = plannedActivity12.setMedium(mediumType34);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFilter postFilter37 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFilter();
        java.time.OffsetDateTime offsetDateTime38 = postFilter37.StartTime;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes39 = postFilter37.getAuditAttributes();
        postFilter37.Description = "'.'SSSSSSS";
        java.time.OffsetDateTime offsetDateTime42 = postFilter37.getEndTime();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFilter postFilter43 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFilter();
        postFilter43.CustomId = "http";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocation[] samplingLocationArray46 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocation[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocation> samplingLocationList47 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocation>();
        boolean boolean48 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocation>) samplingLocationList47, samplingLocationArray46);
        postFilter43.SamplingLocations = samplingLocationList47;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFilter postFilter50 = postFilter37.setSamplingLocations((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocation>) samplingLocationList47);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLaboratory postLaboratory51 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLaboratory();
        java.lang.String str52 = postLaboratory51.Address;
        java.lang.String str53 = postLaboratory51.Name;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivity samplingPlanPlannedActivity54 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivity();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes55 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivity samplingPlanPlannedActivity56 = samplingPlanPlannedActivity54.setAuditAttributes(auditAttributes55);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes57 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes59 = auditAttributes57.setCreationUserProfileId("'.'SSSSSSS");
        samplingPlanPlannedActivity56.AuditAttributes = auditAttributes57;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes61 = samplingPlanPlannedActivity56.AuditAttributes;
        postLaboratory51.AuditAttributes = auditAttributes61;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLaboratory postLaboratory64 = postLaboratory51.setName("yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSchedule putSchedule65 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSchedule();
        java.time.OffsetDateTime offsetDateTime66 = putSchedule65.StartDate;
        java.time.OffsetDateTime offsetDateTime67 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSchedule putSchedule68 = putSchedule65.setEndDate(offsetDateTime67);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes69 = putSchedule68.AuditAttributes;
        java.time.OffsetDateTime offsetDateTime70 = null;
        putSchedule68.LastGenerationDate = offsetDateTime70;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.RecurrenceDayMonthlyType recurrenceDayMonthlyType72 = putSchedule68.RecurrenceDayMonthly;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedFieldResult plannedFieldResult73 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedFieldResult();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes74 = plannedFieldResult73.AuditAttributes;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails75 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails77 = labResultDetails75.setAnalysisComment("/AQUARIUS/Acquisition/v2");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes78 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails79 = labResultDetails77.setAuditAttributes(auditAttributes78);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedFieldResult plannedFieldResult80 = plannedFieldResult73.setAuditAttributes(auditAttributes78);
        putSchedule68.AuditAttributes = auditAttributes78;
        postLaboratory64.AuditAttributes = auditAttributes78;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLaboratory postLaboratory84 = postLaboratory64.setEmailAddress("0001-01-01T00:00:00.000Z");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes85 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes87 = auditAttributes85.setCreationUserProfileId("'.'SSSSSSS");
        postLaboratory64.AuditAttributes = auditAttributes85;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFilter postFilter89 = postFilter37.setAuditAttributes(auditAttributes85);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFilter postFilter91 = postFilter37.setDescription("http://MaxDurationhttp/json/reply/ArrayList");
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocation> samplingLocationList92 = postFilter91.SamplingLocations;
        postFilter91.Description = "multipart/form-data; boundary=****9fadde69-3f13-40c4-a87c-0f3f51c2dd35****";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes95 = postFilter91.getAuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity plannedActivity96 = plannedActivity36.setAuditAttributes(auditAttributes95);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ActivityWithDetails activityWithDetails97 = activityWithDetails0.setPlannedActivity(plannedActivity96);
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag> samplingContextTagList98 = activityWithDetails0.getSamplingContextTags();
        org.junit.Assert.assertNull(offsetDateTime3);
        org.junit.Assert.assertNull(samplingLocation4);
        org.junit.Assert.assertNull(extendedAttributeList5);
        org.junit.Assert.assertNotNull(activityWithDetails9);
        org.junit.Assert.assertNull(plannedActivity10);
        org.junit.Assert.assertNull(indexConfiguration11);
        org.junit.Assert.assertNull(auditAttributes13);
        org.junit.Assert.assertNotNull(postObservationV2_16);
        org.junit.Assert.assertNull(auditAttributes18);
        org.junit.Assert.assertNotNull(postObservationV2_21);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNotNull(auditAttributes27);
        org.junit.Assert.assertNotNull(putActivityTemplate28);
        org.junit.Assert.assertTrue("'" + mediumType29 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MediumType.WATER + "'", mediumType29.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MediumType.WATER));
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertNotNull(putActivityTemplate33);
        org.junit.Assert.assertTrue("'" + mediumType34 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MediumType.WATER + "'", mediumType34.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MediumType.WATER));
        org.junit.Assert.assertNotNull(plannedFieldResult35);
        org.junit.Assert.assertNotNull(plannedActivity36);
        org.junit.Assert.assertNull(offsetDateTime38);
        org.junit.Assert.assertNull(auditAttributes39);
        org.junit.Assert.assertNull(offsetDateTime42);
        org.junit.Assert.assertNotNull(samplingLocationArray46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(postFilter50);
        org.junit.Assert.assertNull(str52);
        org.junit.Assert.assertNull(str53);
        org.junit.Assert.assertNotNull(samplingPlanPlannedActivity56);
        org.junit.Assert.assertNotNull(auditAttributes59);
        org.junit.Assert.assertNotNull(auditAttributes61);
        org.junit.Assert.assertNotNull(postLaboratory64);
        org.junit.Assert.assertNull(offsetDateTime66);
        org.junit.Assert.assertNotNull(putSchedule68);
        org.junit.Assert.assertNull(auditAttributes69);
        org.junit.Assert.assertNull(recurrenceDayMonthlyType72);
        org.junit.Assert.assertNull(auditAttributes74);
        org.junit.Assert.assertNotNull(labResultDetails77);
        org.junit.Assert.assertNotNull(labResultDetails79);
        org.junit.Assert.assertNotNull(plannedFieldResult80);
        org.junit.Assert.assertNotNull(postLaboratory84);
        org.junit.Assert.assertNotNull(auditAttributes87);
        org.junit.Assert.assertNotNull(postFilter89);
        org.junit.Assert.assertNotNull(postFilter91);
        org.junit.Assert.assertNotNull(samplingLocationList92);
        org.junit.Assert.assertNotNull(auditAttributes95);
        org.junit.Assert.assertNotNull(plannedActivity96);
        org.junit.Assert.assertNotNull(activityWithDetails97);
        org.junit.Assert.assertNull(samplingContextTagList98);
    }

    @Test
    public void test42807() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest85.test42807");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity pointVelocityDischargeActivity0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity();
        java.lang.String str1 = pointVelocityDischargeActivity0.SoftwareVersion;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity pointVelocityDischargeActivity3 = pointVelocityDischargeActivity0.setIsValid((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity pointVelocityDischargeActivity5 = pointVelocityDischargeActivity0.setMethodCoefficientUsed((java.lang.Boolean) true);
        java.lang.String str6 = pointVelocityDischargeActivity5.MeterEquation;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity pointVelocityDischargeActivity7 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity();
        java.lang.String str8 = pointVelocityDischargeActivity7.getModel();
        pointVelocityDischargeActivity7.Manufacturer = "'.'SSSSSSS";
        pointVelocityDischargeActivity7.HorizontalCoefficientUsed = false;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity pointVelocityDischargeActivity14 = pointVelocityDischargeActivity7.setModel("9999-12-31T23:59:59.999Z");
        java.lang.Integer int15 = pointVelocityDischargeActivity7.getNumberOfPanels();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity pointVelocityDischargeActivity16 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity();
        java.lang.String str17 = pointVelocityDischargeActivity16.getModel();
        java.lang.String str18 = pointVelocityDischargeActivity16.getFirmwareVersion();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay19 = null;
        pointVelocityDischargeActivity16.Width = quantityWithDisplay19;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.StartPointType startPointType21 = null;
        pointVelocityDischargeActivity16.StartPoint = startPointType21;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Vertical[] verticalArray23 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Vertical[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Vertical> verticalList24 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Vertical>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Vertical>) verticalList24, verticalArray23);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity pointVelocityDischargeActivity26 = pointVelocityDischargeActivity16.setVerticals(verticalList24);
        pointVelocityDischargeActivity7.Verticals = verticalList24;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity pointVelocityDischargeActivity28 = pointVelocityDischargeActivity5.setVerticals(verticalList24);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity pointVelocityDischargeActivity30 = pointVelocityDischargeActivity28.setMeterEquation("");
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(pointVelocityDischargeActivity3);
        org.junit.Assert.assertNotNull(pointVelocityDischargeActivity5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(pointVelocityDischargeActivity14);
        org.junit.Assert.assertNull(int15);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNotNull(verticalArray23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(pointVelocityDischargeActivity26);
        org.junit.Assert.assertNotNull(pointVelocityDischargeActivity28);
        org.junit.Assert.assertNotNull(pointVelocityDischargeActivity30);
    }

    @Test
    public void test42808() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest85.test42808");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Specimen specimen0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Specimen();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Specimen specimen2 = specimen0.setFiltrationComment("9999-12-31T23:59:59.9999999Z://2021.4.62.0");
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttribute> extendedAttributeList3 = specimen2.ExtendedAttributes;
        specimen2.FiltrationComment = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ";
        org.junit.Assert.assertNotNull(specimen2);
        org.junit.Assert.assertNull(extendedAttributeList3);
    }

    @Test
    public void test42809() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest85.test42809");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray3 = new java.lang.String[] { "", "" };
        java.util.ArrayList<java.lang.String> strList4 = new java.util.ArrayList<java.lang.String>();
        boolean boolean5 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList4, strArray3);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_6 = getObservationsV2_0.setDataClassifications((java.util.List<java.lang.String>) strList4);
        getObservationsV2_6.DepthUnitCustomId = "hi!";
        java.lang.String str9 = getObservationsV2_6.DepthUnitId;
        java.util.List<java.lang.String> strList10 = getObservationsV2_6.LabResultLaboratoryIds;
        getObservationsV2_6.MaxNumericResultValue = (-1.0d);
        java.lang.Integer int13 = getObservationsV2_6.Limit;
        java.time.Instant instant14 = getObservationsV2_6.EndModificationTime;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeField extendedAttributeField15 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeField();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeField extendedAttributeField17 = extendedAttributeField15.setDisplayName("");
        java.lang.Boolean boolean18 = extendedAttributeField17.CanBeEmpty;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest19 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest();
        java.lang.Object obj20 = timeAlignedDataServiceRequest19.getResponseType();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_21 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray24 = new java.lang.String[] { "", "" };
        java.util.ArrayList<java.lang.String> strList25 = new java.util.ArrayList<java.lang.String>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList25, strArray24);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_27 = getObservationsV2_21.setDataClassifications((java.util.List<java.lang.String>) strList25);
        getObservationsV2_27.DepthUnitCustomId = "hi!";
        java.lang.String str30 = getObservationsV2_27.CustomId;
        java.util.List<java.lang.String> strList31 = getObservationsV2_27.getSearch();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_32 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray34 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList35 = new java.util.ArrayList<java.lang.String>();
        boolean boolean36 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList35, strArray34);
        getObservationsV2_32.SpecimenIds = strList35;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags38 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray42 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList43 = new java.util.ArrayList<java.lang.String>();
        boolean boolean44 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList43, strArray42);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags45 = putLocationTags38.setTagUniqueIds(strList43);
        getObservationsV2_32.QualityControlTypes = strList43;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_47 = getObservationsV2_27.setMedia((java.util.List<java.lang.String>) strList43);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_48 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String str49 = getObservationsV2_48.getCustomId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_50 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray52 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList53 = new java.util.ArrayList<java.lang.String>();
        boolean boolean54 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList53, strArray52);
        getObservationsV2_50.SpecimenIds = strList53;
        getObservationsV2_48.ProjectIds = strList53;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_57 = getObservationsV2_27.setObservedPropertyIds((java.util.List<java.lang.String>) strList53);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest58 = timeAlignedDataServiceRequest19.setTimeSeriesOutputUnitIds(strList53);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeField extendedAttributeField59 = extendedAttributeField17.setValueOptions((java.util.List<java.lang.String>) strList53);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeField extendedAttributeField61 = extendedAttributeField59.setIsReadOnly((java.lang.Boolean) false);
        java.util.List<java.lang.String> strList62 = extendedAttributeField61.ValueOptions;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_63 = getObservationsV2_6.setAnalyticalGroupIds(strList62);
        java.util.List<java.lang.String> strList64 = getObservationsV2_63.LabResultLaboratoryIds;
        java.util.List<java.lang.String> strList65 = getObservationsV2_63.getResultGrades();
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(getObservationsV2_6);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNull(strList10);
        org.junit.Assert.assertNull(int13);
        org.junit.Assert.assertNull(instant14);
        org.junit.Assert.assertNotNull(extendedAttributeField17);
        org.junit.Assert.assertNull(boolean18);
        org.junit.Assert.assertNotNull(obj20);
        org.junit.Assert.assertEquals(obj20.toString(), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj20), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj20), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(getObservationsV2_27);
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertNull(strList31);
        org.junit.Assert.assertNotNull(strArray34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(strArray42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(putLocationTags45);
        org.junit.Assert.assertNotNull(getObservationsV2_47);
        org.junit.Assert.assertNull(str49);
        org.junit.Assert.assertNotNull(strArray52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(getObservationsV2_57);
        org.junit.Assert.assertNotNull(timeAlignedDataServiceRequest58);
        org.junit.Assert.assertNotNull(extendedAttributeField59);
        org.junit.Assert.assertNotNull(extendedAttributeField61);
        org.junit.Assert.assertNotNull(strList62);
        org.junit.Assert.assertNotNull(getObservationsV2_63);
        org.junit.Assert.assertNull(strList64);
        org.junit.Assert.assertNull(strList65);
    }

    @Test
    public void test42810() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest85.test42810");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEvent importHistoryEvent0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEvent();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEvent importHistoryEvent2 = importHistoryEvent0.setFileName("'.'SSSSSSS");
        java.lang.String str3 = importHistoryEvent2.TimeZoneOffset;
        java.lang.String str4 = importHistoryEvent2.TimeZoneOffset;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEvent importHistoryEvent6 = importHistoryEvent2.setFileName("multipart/form-data; boundary=****5d34e306-630a-492f-8c84-1002d981f2f0****");
        org.junit.Assert.assertNotNull(importHistoryEvent2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNotNull(importHistoryEvent6);
    }

    @Test
    public void test42811() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest85.test42811");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutComputationPeriod putComputationPeriod0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutComputationPeriod();
        putComputationPeriod0.FormalName = "/AQUARIUS/Acquisition/v2";
        putComputationPeriod0.PublicIdentifier = "/AQUARIUS/Acquisition/v2";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.CodeTableRequestBase codeTableRequestBase6 = putComputationPeriod0.setDisplayName("http");
        codeTableRequestBase6.FormalName = "yyyy'-'MM'-'dd'T'HH':'mm':'ss";
        java.lang.String str9 = codeTableRequestBase6.getDisplayName();
        java.lang.String str10 = codeTableRequestBase6.FormalName;
        org.junit.Assert.assertNotNull(codeTableRequestBase6);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "http" + "'", str9, "http");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "yyyy'-'MM'-'dd'T'HH':'mm':'ss" + "'", str10, "yyyy'-'MM'-'dd'T'HH':'mm':'ss");
    }

    @Test
    public void test42812() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest85.test42812");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportSummary importSummary0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportSummary();
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObject> importItemObjectList1 = importSummary0.ErrorImportItems;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportSummary importSummary3 = importSummary0.setNewCount((java.lang.Integer) 10);
        java.lang.Integer int4 = importSummary0.getErrorCount();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportSummary importSummary6 = importSummary0.setUpdateCount((java.lang.Integer) 10);
        java.lang.String str7 = importSummary6.SummaryReportText;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportSummary importSummary9 = importSummary6.setInvalidRowsCsvUrl("http://MaxDurationhttp/json/reply/Float");
        importSummary9.UpdateCount = 2;
        importSummary9.SummaryReportText = "";
        java.lang.Integer int14 = importSummary9.getErrorCount();
        org.junit.Assert.assertNull(importItemObjectList1);
        org.junit.Assert.assertNotNull(importSummary3);
        org.junit.Assert.assertNull(int4);
        org.junit.Assert.assertNotNull(importSummary6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(importSummary9);
        org.junit.Assert.assertNull(int14);
    }

    @Test
    public void test42813() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest85.test42813");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostDatumConvertedTimeSeries postDatumConvertedTimeSeries0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostDatumConvertedTimeSeries();
        postDatumConvertedTimeSeries0.ComputationPeriodIdentifier = "MaxInstant";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostDatumConvertedTimeSeries postDatumConvertedTimeSeries4 = postDatumConvertedTimeSeries0.setTargetStandardReferenceDatumIdentifier("multipart/form-data; boundary=****c5ace73f-96fd-4e64-b844-d9edac3c6d02****");
        java.lang.Boolean boolean5 = postDatumConvertedTimeSeries0.isTargetIsLocalAssumedDatum();
        org.junit.Assert.assertNotNull(postDatumConvertedTimeSeries4);
        org.junit.Assert.assertNull(boolean5);
    }

    @Test
    public void test42814() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest85.test42814");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFieldVisitActivityFromPlannedActivity postFieldVisitActivityFromPlannedActivity0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFieldVisitActivityFromPlannedActivity();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ActivityTemplate activityTemplate1 = postFieldVisitActivityFromPlannedActivity0.ActivityTemplate;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ActivityTemplate activityTemplate2 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ActivityTemplate();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes3 = null;
        activityTemplate2.AuditAttributes = auditAttributes3;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutActivityTemplate putActivityTemplate5 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutActivityTemplate();
        java.lang.String str6 = putActivityTemplate5.getId();
        java.lang.String str7 = putActivityTemplate5.Id;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes8 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes10 = auditAttributes8.setCreationUserProfileId("'.'SSSSSSS");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutActivityTemplate putActivityTemplate11 = putActivityTemplate5.setAuditAttributes(auditAttributes10);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MediumType mediumType12 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MediumType.WATER;
        putActivityTemplate11.Medium = mediumType12;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ActivityTemplate activityTemplate14 = activityTemplate2.setMedium(mediumType12);
        java.lang.String str15 = activityTemplate2.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ActivityTemplateType activityTemplateType16 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ActivityTemplateType.REPLICATE;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ActivityTemplate activityTemplate17 = activityTemplate2.setType(activityTemplateType16);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFieldVisitActivityFromPlannedActivity postFieldVisitActivityFromPlannedActivity18 = postFieldVisitActivityFromPlannedActivity0.setActivityTemplate(activityTemplate2);
        java.lang.String str19 = postFieldVisitActivityFromPlannedActivity18.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ActivityTemplate activityTemplate20 = postFieldVisitActivityFromPlannedActivity18.getActivityTemplate();
        org.junit.Assert.assertNull(activityTemplate1);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(auditAttributes10);
        org.junit.Assert.assertNotNull(putActivityTemplate11);
        org.junit.Assert.assertTrue("'" + mediumType12 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MediumType.WATER + "'", mediumType12.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MediumType.WATER));
        org.junit.Assert.assertNotNull(activityTemplate14);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertTrue("'" + activityTemplateType16 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ActivityTemplateType.REPLICATE + "'", activityTemplateType16.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ActivityTemplateType.REPLICATE));
        org.junit.Assert.assertNotNull(activityTemplate17);
        org.junit.Assert.assertNotNull(postFieldVisitActivityFromPlannedActivity18);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertNotNull(activityTemplate20);
    }

    @Test
    public void test42815() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest85.test42815");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Filter filter0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Filter();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Filter filter2 = filter0.setId("2021.4.62.0");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Filter filter4 = filter2.setId("POST");
        filter4.Id = "https";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Filter filter8 = filter4.setCustomId("9999-12-31T23:59:59.999Z");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Filter filter9 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Filter();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Filter filter11 = filter9.setId("2021.4.62.0");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Filter filter13 = filter11.setId("POST");
        filter13.Id = "https";
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty> observedPropertyList16 = filter13.getObservedProperties();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFilter postFilter17 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFilter();
        postFilter17.CustomId = "http";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocation[] samplingLocationArray20 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocation[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocation> samplingLocationList21 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocation>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocation>) samplingLocationList21, samplingLocationArray20);
        postFilter17.SamplingLocations = samplingLocationList21;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Filter filter24 = filter13.setSamplingLocations((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocation>) samplingLocationList21);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Filter filter25 = filter4.setSamplingLocations((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocation>) samplingLocationList21);
        java.time.OffsetDateTime offsetDateTime26 = filter25.getStartTime();
        org.junit.Assert.assertNotNull(filter2);
        org.junit.Assert.assertNotNull(filter4);
        org.junit.Assert.assertNotNull(filter8);
        org.junit.Assert.assertNotNull(filter11);
        org.junit.Assert.assertNotNull(filter13);
        org.junit.Assert.assertNull(observedPropertyList16);
        org.junit.Assert.assertNotNull(samplingLocationArray20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(filter24);
        org.junit.Assert.assertNotNull(filter25);
        org.junit.Assert.assertNull(offsetDateTime26);
    }

    @Test
    public void test42816() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest85.test42816");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetSpecimens getSpecimens0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetSpecimens();
        java.util.List<java.lang.String> strList1 = getSpecimens0.getSpecimenStatuses();
        org.junit.Assert.assertNull(strList1);
    }

    @Test
    public void test42817() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest85.test42817");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SearchResultLabReport searchResultLabReport0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SearchResultLabReport();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SearchResultLabReport searchResultLabReport2 = searchResultLabReport0.setCursor("POST");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabReport labReport3 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabReport();
        java.time.OffsetDateTime offsetDateTime4 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabReport labReport5 = labReport3.setDateReceived(offsetDateTime4);
        java.lang.String str6 = labReport5.CaseNarrative;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabReport labReport7 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabReport();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Laboratory laboratory8 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Laboratory();
        laboratory8.Id = "MaxInstant";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Laboratory laboratory12 = laboratory8.setName("hi!:///AQUARIUS/Provisioning/v1");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabReport labReport13 = labReport7.setLaboratory(laboratory12);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabReport labReport14 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabReport();
        java.time.OffsetDateTime offsetDateTime15 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabReport labReport16 = labReport14.setDateReceived(offsetDateTime15);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabReport labReport17 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabReport();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Laboratory laboratory18 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Laboratory();
        laboratory18.Id = "MaxInstant";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Laboratory laboratory22 = laboratory18.setName("hi!:///AQUARIUS/Provisioning/v1");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabReport labReport23 = labReport17.setLaboratory(laboratory22);
        java.lang.String str24 = labReport23.getQcSummary();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabReport labReport25 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabReport();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Laboratory laboratory26 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Laboratory();
        laboratory26.Id = "MaxInstant";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Laboratory laboratory30 = laboratory26.setName("hi!:///AQUARIUS/Provisioning/v1");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabReport labReport31 = labReport25.setLaboratory(laboratory30);
        java.lang.String str32 = labReport31.getQcSummary();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails33 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails35 = labResultDetails33.setAnalysisComment("/AQUARIUS/Acquisition/v2");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails37 = labResultDetails33.setPreparationMethod("https");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes38 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails39 = labResultDetails33.setAuditAttributes(auditAttributes38);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabReport labReport40 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabReport();
        java.time.OffsetDateTime offsetDateTime41 = null;
        labReport40.DateReceived = offsetDateTime41;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails43 = labResultDetails39.setLabReport(labReport40);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabReport labReport44 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabReport();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabReport labReport45 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabReport();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Laboratory laboratory46 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Laboratory();
        laboratory46.Id = "MaxInstant";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Laboratory laboratory50 = laboratory46.setName("hi!:///AQUARIUS/Provisioning/v1");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabReport labReport51 = labReport45.setLaboratory(laboratory50);
        java.lang.String str52 = labReport51.getQcSummary();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabReport labReport54 = labReport51.setCustomId("http");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabReport labReport55 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabReport();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Laboratory laboratory56 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Laboratory();
        laboratory56.Id = "MaxInstant";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Laboratory laboratory60 = laboratory56.setName("hi!:///AQUARIUS/Provisioning/v1");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabReport labReport61 = labReport55.setLaboratory(laboratory60);
        java.lang.String str62 = labReport61.getQcSummary();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabReport labReport64 = labReport61.setCustomId("http");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabReport[] labReportArray65 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabReport[] { labReport5, labReport7, labReport16, labReport23, labReport31, labReport40, labReport44, labReport54, labReport61 };
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabReport> labReportList66 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabReport>();
        boolean boolean67 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabReport>) labReportList66, labReportArray65);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SearchResultLabReport searchResultLabReport68 = searchResultLabReport0.setDomainObjects((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabReport>) labReportList66);
        searchResultLabReport68.TotalCount = 1;
        org.junit.Assert.assertNotNull(searchResultLabReport2);
        org.junit.Assert.assertNotNull(labReport5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNotNull(laboratory12);
        org.junit.Assert.assertNotNull(labReport13);
        org.junit.Assert.assertNotNull(labReport16);
        org.junit.Assert.assertNotNull(laboratory22);
        org.junit.Assert.assertNotNull(labReport23);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNotNull(laboratory30);
        org.junit.Assert.assertNotNull(labReport31);
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertNotNull(labResultDetails35);
        org.junit.Assert.assertNotNull(labResultDetails37);
        org.junit.Assert.assertNotNull(labResultDetails39);
        org.junit.Assert.assertNotNull(labResultDetails43);
        org.junit.Assert.assertNotNull(laboratory50);
        org.junit.Assert.assertNotNull(labReport51);
        org.junit.Assert.assertNull(str52);
        org.junit.Assert.assertNotNull(labReport54);
        org.junit.Assert.assertNotNull(laboratory60);
        org.junit.Assert.assertNotNull(labReport61);
        org.junit.Assert.assertNull(str62);
        org.junit.Assert.assertNotNull(labReport64);
        org.junit.Assert.assertNotNull(labReportArray65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertNotNull(searchResultLabReport68);
    }

    @Test
    public void test42818() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest85.test42818");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeChannelMeasurement dischargeChannelMeasurement0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeChannelMeasurement();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ChannelMaterialType channelMaterialType1 = dischargeChannelMeasurement0.getChannelMaterial();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay2 = null;
        dischargeChannelMeasurement0.Discharge = quantityWithDisplay2;
        java.lang.String str4 = dischargeChannelMeasurement0.MonitoringMethod;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ChannelStabilityType channelStabilityType5 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ChannelStabilityType.Unspecified;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeChannelMeasurement dischargeChannelMeasurement6 = dischargeChannelMeasurement0.setChannelStability(channelStabilityType5);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MeasurementLocationToGageType measurementLocationToGageType7 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MeasurementLocationToGageType.Upstream;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeChannelMeasurement dischargeChannelMeasurement8 = dischargeChannelMeasurement6.setMeasurementLocationToGage(measurementLocationToGageType7);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CurrentMeterType currentMeterType9 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CurrentMeterType.Unknown;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeChannelMeasurement dischargeChannelMeasurement10 = dischargeChannelMeasurement8.setCurrentMeter(currentMeterType9);
        org.junit.Assert.assertNull(channelMaterialType1);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + channelStabilityType5 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ChannelStabilityType.Unspecified + "'", channelStabilityType5.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ChannelStabilityType.Unspecified));
        org.junit.Assert.assertNotNull(dischargeChannelMeasurement6);
        org.junit.Assert.assertTrue("'" + measurementLocationToGageType7 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MeasurementLocationToGageType.Upstream + "'", measurementLocationToGageType7.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MeasurementLocationToGageType.Upstream));
        org.junit.Assert.assertNotNull(dischargeChannelMeasurement8);
        org.junit.Assert.assertTrue("'" + currentMeterType9 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CurrentMeterType.Unknown + "'", currentMeterType9.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CurrentMeterType.Unknown));
        org.junit.Assert.assertNotNull(dischargeChannelMeasurement10);
    }

    @Test
    public void test42819() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest85.test42819");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationImportSummary samplingLocationImportSummary0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationImportSummary();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedPropertyImportSummary observedPropertyImportSummary1 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedPropertyImportSummary();
        observedPropertyImportSummary1.ErrorCount = 10;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedPropertyImportSummary observedPropertyImportSummary5 = observedPropertyImportSummary1.setSummaryReportText("");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObservedProperty importItemObservedProperty6 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObservedProperty();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Reading reading7 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Reading();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay8 = reading7.getValue();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Reading reading10 = reading7.setParameterId("hi!");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Reading reading12 = reading10.setModel("MaxInstant");
        java.lang.Integer int13 = reading12.getGradeCode();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutBulkEditResultGradesV2 putBulkEditResultGradesV2_14 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutBulkEditResultGradesV2();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeField extendedAttributeField15 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeField();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeField extendedAttributeField17 = extendedAttributeField15.setDisplayName("");
        java.lang.Boolean boolean18 = extendedAttributeField17.CanBeEmpty;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest19 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest();
        java.lang.Object obj20 = timeAlignedDataServiceRequest19.getResponseType();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_21 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray24 = new java.lang.String[] { "", "" };
        java.util.ArrayList<java.lang.String> strList25 = new java.util.ArrayList<java.lang.String>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList25, strArray24);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_27 = getObservationsV2_21.setDataClassifications((java.util.List<java.lang.String>) strList25);
        getObservationsV2_27.DepthUnitCustomId = "hi!";
        java.lang.String str30 = getObservationsV2_27.CustomId;
        java.util.List<java.lang.String> strList31 = getObservationsV2_27.getSearch();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_32 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray34 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList35 = new java.util.ArrayList<java.lang.String>();
        boolean boolean36 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList35, strArray34);
        getObservationsV2_32.SpecimenIds = strList35;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags38 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray42 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList43 = new java.util.ArrayList<java.lang.String>();
        boolean boolean44 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList43, strArray42);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags45 = putLocationTags38.setTagUniqueIds(strList43);
        getObservationsV2_32.QualityControlTypes = strList43;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_47 = getObservationsV2_27.setMedia((java.util.List<java.lang.String>) strList43);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_48 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String str49 = getObservationsV2_48.getCustomId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_50 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray52 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList53 = new java.util.ArrayList<java.lang.String>();
        boolean boolean54 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList53, strArray52);
        getObservationsV2_50.SpecimenIds = strList53;
        getObservationsV2_48.ProjectIds = strList53;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_57 = getObservationsV2_27.setObservedPropertyIds((java.util.List<java.lang.String>) strList53);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest58 = timeAlignedDataServiceRequest19.setTimeSeriesOutputUnitIds(strList53);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeField extendedAttributeField59 = extendedAttributeField17.setValueOptions((java.util.List<java.lang.String>) strList53);
        putBulkEditResultGradesV2_14.AnalysisMethodSimpleIds = strList53;
        reading12.ReadingQualifiers = strList53;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObservedProperty importItemObservedProperty62 = importItemObservedProperty6.setFields((java.util.List<java.lang.String>) strList53);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObservedProperty[] importItemObservedPropertyArray63 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObservedProperty[] { importItemObservedProperty6 };
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObservedProperty> importItemObservedPropertyList64 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObservedProperty>();
        boolean boolean65 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObservedProperty>) importItemObservedPropertyList64, importItemObservedPropertyArray63);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedPropertyImportSummary observedPropertyImportSummary66 = observedPropertyImportSummary1.setImportItems((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObservedProperty>) importItemObservedPropertyList64);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedPropertyImportSummary observedPropertyImportSummary68 = observedPropertyImportSummary66.setSuccessCount((java.lang.Integer) 10);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationImportSummary observationImportSummary69 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationImportSummary();
        observationImportSummary69.UpdateCount = (-1);
        java.lang.Integer int72 = observationImportSummary69.ExpectedCount;
        java.lang.String str73 = observationImportSummary69.SummaryReportText;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportError[] importErrorArray74 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportError[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportError> importErrorList75 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportError>();
        boolean boolean76 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportError>) importErrorList75, importErrorArray74);
        observationImportSummary69.ImportJobErrors = importErrorList75;
        observedPropertyImportSummary66.ImportJobErrors = importErrorList75;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationImportSummary samplingLocationImportSummary79 = samplingLocationImportSummary0.setImportJobErrors((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportError>) importErrorList75);
        java.lang.String str80 = samplingLocationImportSummary79.getSummaryReportText();
        samplingLocationImportSummary79.InvalidRowsCsvUrl = "multipart/form-data; boundary=****ebf59e0e-2d1f-43bc-996f-3c628a80f696****";
        samplingLocationImportSummary79.InvalidRowsCsvUrl = "****26835278-3e68-484a-a157-468aab2e69a2****";
        org.junit.Assert.assertNotNull(observedPropertyImportSummary5);
        org.junit.Assert.assertNull(doubleWithDisplay8);
        org.junit.Assert.assertNotNull(reading10);
        org.junit.Assert.assertNotNull(reading12);
        org.junit.Assert.assertNull(int13);
        org.junit.Assert.assertNotNull(extendedAttributeField17);
        org.junit.Assert.assertNull(boolean18);
        org.junit.Assert.assertNotNull(obj20);
        org.junit.Assert.assertEquals(obj20.toString(), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj20), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj20), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(getObservationsV2_27);
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertNull(strList31);
        org.junit.Assert.assertNotNull(strArray34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(strArray42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(putLocationTags45);
        org.junit.Assert.assertNotNull(getObservationsV2_47);
        org.junit.Assert.assertNull(str49);
        org.junit.Assert.assertNotNull(strArray52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(getObservationsV2_57);
        org.junit.Assert.assertNotNull(timeAlignedDataServiceRequest58);
        org.junit.Assert.assertNotNull(extendedAttributeField59);
        org.junit.Assert.assertNotNull(importItemObservedProperty62);
        org.junit.Assert.assertNotNull(importItemObservedPropertyArray63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertNotNull(observedPropertyImportSummary66);
        org.junit.Assert.assertNotNull(observedPropertyImportSummary68);
        org.junit.Assert.assertNull(int72);
        org.junit.Assert.assertNull(str73);
        org.junit.Assert.assertNotNull(importErrorArray74);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(samplingLocationImportSummary79);
        org.junit.Assert.assertNull(str80);
    }

    @Test
    public void test42820() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest85.test42820");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutActivity putActivity0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutActivity();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity plannedActivity1 = null;
        putActivity0.PlannedActivity = plannedActivity1;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity postActivity3 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity();
        postActivity3.LoggerFileName = "hi!";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity plannedActivity6 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity postActivity7 = postActivity3.setPlannedActivity(plannedActivity6);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag samplingContextTag8 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag();
        java.lang.String str9 = samplingContextTag8.getDescription();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes10 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag samplingContextTag11 = samplingContextTag8.setAuditAttributes(auditAttributes10);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag samplingContextTag13 = samplingContextTag11.setId("yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag samplingContextTag14 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag();
        java.lang.String str15 = samplingContextTag14.getDescription();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag samplingContextTag16 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag();
        java.lang.String str17 = samplingContextTag16.getDescription();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes18 = null;
        samplingContextTag16.AuditAttributes = auditAttributes18;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag samplingContextTag20 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag();
        java.lang.String str21 = samplingContextTag20.getDescription();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes22 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag samplingContextTag23 = samplingContextTag20.setAuditAttributes(auditAttributes22);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag[] samplingContextTagArray24 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag[] { samplingContextTag13, samplingContextTag14, samplingContextTag16, samplingContextTag23 };
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag> samplingContextTagList25 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag>) samplingContextTagList25, samplingContextTagArray24);
        postActivity3.SamplingContextTags = samplingContextTagList25;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutActivity putActivity28 = putActivity0.setSamplingContextTags((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag>) samplingContextTagList25);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutActivity putActivity30 = putActivity28.setCustomId("MaxInstant");
        java.lang.String str31 = putActivity30.Id;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity plannedActivity32 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutActivity putActivity33 = putActivity30.setPlannedActivity(plannedActivity32);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.CollectionMethod collectionMethod34 = putActivity30.CollectionMethod;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Medium medium35 = putActivity30.getMedium();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutActivity putActivity36 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutActivity();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity plannedActivity37 = putActivity36.PlannedActivity;
        java.time.OffsetDateTime offsetDateTime38 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutActivity putActivity39 = putActivity36.setEndTime(offsetDateTime38);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutActivity putActivity41 = putActivity39.setLoggerFileName("/AQUARIUS/Acquisition/v2://9999-12-31T23:59:59.999Z");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutActivity putActivity43 = putActivity39.setId("2021.4.62.0");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutActivity putActivity44 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutActivity();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity quantity45 = null;
        putActivity44.Depth = quantity45;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricResult[] metricResultArray47 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricResult[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricResult> metricResultList48 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricResult>();
        boolean boolean49 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricResult>) metricResultList48, metricResultArray47);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutActivity putActivity50 = putActivity44.setMetricResults((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricResult>) metricResultList48);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutActivity putActivity52 = putActivity44.setLoggerFileName("");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutActivity putActivity53 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutActivity();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenNestedInActivity[] specimenNestedInActivityArray54 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenNestedInActivity[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenNestedInActivity> specimenNestedInActivityList55 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenNestedInActivity>();
        boolean boolean56 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenNestedInActivity>) specimenNestedInActivityList55, specimenNestedInActivityArray54);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutActivity putActivity57 = putActivity53.setSpecimens((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenNestedInActivity>) specimenNestedInActivityList55);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutActivity putActivity58 = putActivity44.setSpecimens((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenNestedInActivity>) specimenNestedInActivityList55);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutActivity putActivity59 = putActivity43.setSpecimens((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenNestedInActivity>) specimenNestedInActivityList55);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutActivity putActivity60 = putActivity30.setSpecimens((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenNestedInActivity>) specimenNestedInActivityList55);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ActivityWithDetailsType activityWithDetailsType61 = putActivity30.getType();
        org.junit.Assert.assertNotNull(postActivity7);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(samplingContextTag11);
        org.junit.Assert.assertNotNull(samplingContextTag13);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNotNull(samplingContextTag23);
        org.junit.Assert.assertNotNull(samplingContextTagArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(putActivity28);
        org.junit.Assert.assertNotNull(putActivity30);
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertNotNull(putActivity33);
        org.junit.Assert.assertNull(collectionMethod34);
        org.junit.Assert.assertNull(medium35);
        org.junit.Assert.assertNull(plannedActivity37);
        org.junit.Assert.assertNotNull(putActivity39);
        org.junit.Assert.assertNotNull(putActivity41);
        org.junit.Assert.assertNotNull(putActivity43);
        org.junit.Assert.assertNotNull(metricResultArray47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(putActivity50);
        org.junit.Assert.assertNotNull(putActivity52);
        org.junit.Assert.assertNotNull(specimenNestedInActivityArray54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(putActivity57);
        org.junit.Assert.assertNotNull(putActivity58);
        org.junit.Assert.assertNotNull(putActivity59);
        org.junit.Assert.assertNotNull(putActivity60);
        org.junit.Assert.assertNull(activityWithDetailsType61);
    }

    @Test
    public void test42821() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest85.test42821");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabInstruction labInstruction0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabInstruction();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod1 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabInstruction labInstruction2 = labInstruction0.setAnalysisMethod(analysisMethod1);
        java.lang.String str3 = labInstruction0.getAnalysisComment();
        java.lang.String str4 = labInstruction0.getAnalysisComment();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod5 = labInstruction0.AnalysisMethod;
        labInstruction0.HoldingTime = "****231224c4-98ce-4e30-bd65-1d25287c4abe****";
        java.lang.String str8 = labInstruction0.AnalysisComment;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod9 = labInstruction0.AnalysisMethod;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes10 = labInstruction0.AuditAttributes;
        org.junit.Assert.assertNotNull(labInstruction2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(analysisMethod5);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNull(analysisMethod9);
        org.junit.Assert.assertNull(auditAttributes10);
    }

    @Test
    public void test42822() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest85.test42822");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutFilter putFilter0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutFilter();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutFilter putFilter2 = putFilter0.setId("MaxDuration");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostAnalysisMethod postAnalysisMethod3 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostAnalysisMethod();
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple> importHistoryEventSimpleList4 = postAnalysisMethod3.ImportHistoryEventSimples;
        java.lang.String str5 = postAnalysisMethod3.Context;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostAnalysisMethod postAnalysisMethod7 = postAnalysisMethod3.setId("-PT87591240H");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostAnalysisMethod postAnalysisMethod9 = postAnalysisMethod3.setContext("MaxInstant");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostAnalysisMethod postAnalysisMethod10 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostAnalysisMethod();
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple> importHistoryEventSimpleList11 = postAnalysisMethod10.ImportHistoryEventSimples;
        postAnalysisMethod10.Id = "MinDuration";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLabAnalysisMethod postLabAnalysisMethod14 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLabAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes15 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLabAnalysisMethod postLabAnalysisMethod16 = postLabAnalysisMethod14.setAuditAttributes(auditAttributes15);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty[] observedPropertyArray17 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty> observedPropertyList18 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty>) observedPropertyList18, observedPropertyArray17);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLabAnalysisMethod postLabAnalysisMethod20 = postLabAnalysisMethod16.setObservedProperties((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty>) observedPropertyList18);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes21 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLabAnalysisMethod postLabAnalysisMethod22 = postLabAnalysisMethod16.setAuditAttributes(auditAttributes21);
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty> observedPropertyList23 = postLabAnalysisMethod22.getObservedProperties();
        postAnalysisMethod10.ObservedProperties = observedPropertyList23;
        postAnalysisMethod9.ObservedProperties = observedPropertyList23;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutFilter putFilter26 = putFilter2.setObservedProperties(observedPropertyList23);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLabAnalysisMethod postLabAnalysisMethod27 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLabAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes28 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLabAnalysisMethod postLabAnalysisMethod29 = postLabAnalysisMethod27.setAuditAttributes(auditAttributes28);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty[] observedPropertyArray30 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty> observedPropertyList31 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty>) observedPropertyList31, observedPropertyArray30);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLabAnalysisMethod postLabAnalysisMethod33 = postLabAnalysisMethod29.setObservedProperties((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty>) observedPropertyList31);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes34 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLabAnalysisMethod postLabAnalysisMethod35 = postLabAnalysisMethod29.setAuditAttributes(auditAttributes34);
        postLabAnalysisMethod35.MethodId = "https";
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty> observedPropertyList38 = postLabAnalysisMethod35.ObservedProperties;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutFilter putFilter39 = putFilter2.setObservedProperties(observedPropertyList38);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutFilter putFilter41 = putFilter39.setCustomId("MinDuration");
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty> observedPropertyList42 = putFilter39.getObservedProperties();
        java.time.OffsetDateTime offsetDateTime43 = null;
        putFilter39.EndTime = offsetDateTime43;
        java.lang.String str45 = putFilter39.getCustomId();
        org.junit.Assert.assertNotNull(putFilter2);
        org.junit.Assert.assertNull(importHistoryEventSimpleList4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(postAnalysisMethod7);
        org.junit.Assert.assertNotNull(postAnalysisMethod9);
        org.junit.Assert.assertNull(importHistoryEventSimpleList11);
        org.junit.Assert.assertNotNull(postLabAnalysisMethod16);
        org.junit.Assert.assertNotNull(observedPropertyArray17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(postLabAnalysisMethod20);
        org.junit.Assert.assertNotNull(postLabAnalysisMethod22);
        org.junit.Assert.assertNotNull(observedPropertyList23);
        org.junit.Assert.assertNotNull(putFilter26);
        org.junit.Assert.assertNotNull(postLabAnalysisMethod29);
        org.junit.Assert.assertNotNull(observedPropertyArray30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(postLabAnalysisMethod33);
        org.junit.Assert.assertNotNull(postLabAnalysisMethod35);
        org.junit.Assert.assertNotNull(observedPropertyList38);
        org.junit.Assert.assertNotNull(putFilter39);
        org.junit.Assert.assertNotNull(putFilter41);
        org.junit.Assert.assertNotNull(observedPropertyList42);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "MinDuration" + "'", str45, "MinDuration");
    }

    @Test
    public void test42823() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest85.test42823");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutAttachment putAttachment0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutAttachment();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutAttachment putAttachment2 = putAttachment0.setLongitude("9999-12-31T23:59:59.9999999Z");
        java.time.OffsetDateTime offsetDateTime3 = putAttachment0.DateTaken;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutAttachment putAttachment5 = putAttachment0.setResolution("multipart/form-data; boundary=****871ccc7e-c9d9-467b-8c95-d6f9599f0e81****");
        org.junit.Assert.assertNotNull(putAttachment2);
        org.junit.Assert.assertNull(offsetDateTime3);
        org.junit.Assert.assertNotNull(putAttachment5);
    }

    @Test
    public void test42824() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest85.test42824");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ActivityTemplate activityTemplate0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ActivityTemplate();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes1 = null;
        activityTemplate0.AuditAttributes = auditAttributes1;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutActivityTemplate putActivityTemplate3 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutActivityTemplate();
        java.lang.String str4 = putActivityTemplate3.getId();
        java.lang.String str5 = putActivityTemplate3.Id;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes6 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes8 = auditAttributes6.setCreationUserProfileId("'.'SSSSSSS");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutActivityTemplate putActivityTemplate9 = putActivityTemplate3.setAuditAttributes(auditAttributes8);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MediumType mediumType10 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MediumType.WATER;
        putActivityTemplate9.Medium = mediumType10;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ActivityTemplate activityTemplate12 = activityTemplate0.setMedium(mediumType10);
        java.lang.String str13 = activityTemplate0.getId();
        java.lang.String str14 = activityTemplate0.Id;
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(auditAttributes8);
        org.junit.Assert.assertNotNull(putActivityTemplate9);
        org.junit.Assert.assertTrue("'" + mediumType10 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MediumType.WATER + "'", mediumType10.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MediumType.WATER));
        org.junit.Assert.assertNotNull(activityTemplate12);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNull(str14);
    }

    @Test
    public void test42825() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest85.test42825");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostSamplingLocation postSamplingLocation0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostSamplingLocation();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostSamplingLocation postSamplingLocation2 = postSamplingLocation0.setCustomId("hi!");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Address address3 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostSamplingLocation postSamplingLocation4 = postSamplingLocation0.setAddress(address3);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity quantity5 = postSamplingLocation4.getElevation();
        postSamplingLocation4.Longitude = "POST";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes8 = postSamplingLocation4.getAuditAttributes();
        java.lang.String str9 = postSamplingLocation4.Id;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.TimeZone timeZone10 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.TimeZone();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostSamplingLocation postSamplingLocation11 = postSamplingLocation4.setTimeZone(timeZone10);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Address address12 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Address();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Address address14 = address12.setStreetName("2021.8.9990");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Address address16 = address14.setPostalCode("multipart/form-data; boundary=****9fadde69-3f13-40c4-a87c-0f3f51c2dd35****");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Address address18 = address14.setStateProvinceCode("hi!");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Address address20 = address14.setPostalCode("multipart/form-data; boundary=****9fadde69-3f13-40c4-a87c-0f3f51c2dd35****");
        postSamplingLocation4.Address = address14;
        java.lang.String str22 = postSamplingLocation4.CustomId;
        org.junit.Assert.assertNotNull(postSamplingLocation2);
        org.junit.Assert.assertNotNull(postSamplingLocation4);
        org.junit.Assert.assertNull(quantity5);
        org.junit.Assert.assertNull(auditAttributes8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(postSamplingLocation11);
        org.junit.Assert.assertNotNull(address14);
        org.junit.Assert.assertNotNull(address16);
        org.junit.Assert.assertNotNull(address18);
        org.junit.Assert.assertNotNull(address20);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "hi!" + "'", str22, "hi!");
    }

    @Test
    public void test42826() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest85.test42826");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutParameter putParameter0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutParameter();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ParameterBase parameterBase2 = putParameter0.setUnitGroupIdentifier("/AQUARIUS/Provisioning/v1");
        java.lang.String str3 = putParameter0.getRoundingSpec();
        java.lang.String str4 = putParameter0.RoundingSpec;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ParameterBase parameterBase6 = putParameter0.setRoundingSpec("multipart/form-data; boundary=****bbcf5f9e-6ccf-4b63-91ab-6e645caf02af****");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ParameterBase parameterBase8 = parameterBase6.setIdentifier("multipart/form-data; boundary=****d9f5d551-383a-4365-87fd-ae7094da6f3b****");
        parameterBase8.Identifier = "2021.8.9990";
        java.lang.String str11 = parameterBase8.ParameterId;
        parameterBase8.RoundingSpec = "";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ParameterBase parameterBase15 = parameterBase8.setUnitIdentifier("http:///AQUARIUS/Acquisition/v2multipart/form-data; boundary=****44f0772e-c3ca-4316-8e2a-61ec8540d661****/v1/observedproperties/{id}/categoricalvalues");
        org.junit.Assert.assertNotNull(parameterBase2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNotNull(parameterBase6);
        org.junit.Assert.assertNotNull(parameterBase8);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNotNull(parameterBase15);
    }

    @Test
    public void test42827() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest85.test42827");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportSummaryObservation importSummaryObservation0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportSummaryObservation();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportSummaryObservation importSummaryObservation2 = importSummaryObservation0.setSummaryReportText("multipart/form-data; boundary=****bbcf5f9e-6ccf-4b63-91ab-6e645caf02af****");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportSummaryObservation importSummaryObservation4 = importSummaryObservation0.setUpdateCount((java.lang.Integer) (-1));
        java.lang.Integer int5 = importSummaryObservation4.getExpectedCount();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple importHistoryEventSimple6 = importSummaryObservation4.ImportHistoryEventSimple;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportSummaryObservation importSummaryObservation8 = importSummaryObservation4.setInvalidRowsCsvUrl("9999-12-31T23:59:59.9999999Z://2021.4.62.0");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple importHistoryEventSimple9 = importSummaryObservation4.getImportHistoryEventSimple();
        java.lang.Integer int10 = importSummaryObservation4.getNewCount();
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObservation> importItemObservationList11 = importSummaryObservation4.getErrorImportItems();
        org.junit.Assert.assertNotNull(importSummaryObservation2);
        org.junit.Assert.assertNotNull(importSummaryObservation4);
        org.junit.Assert.assertNull(int5);
        org.junit.Assert.assertNull(importHistoryEventSimple6);
        org.junit.Assert.assertNotNull(importSummaryObservation8);
        org.junit.Assert.assertNull(importHistoryEventSimple9);
        org.junit.Assert.assertNull(int10);
        org.junit.Assert.assertNull(importItemObservationList11);
    }

    @Test
    public void test42828() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest85.test42828");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LocationGroupType locationGroupType0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LocationGroupType();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes1 = locationGroupType0.getAuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LocationGroupType locationGroupType3 = locationGroupType0.setCustomId("yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes4 = locationGroupType0.getAuditAttributes();
        locationGroupType0.Id = "POST";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes7 = locationGroupType0.AuditAttributes;
        org.junit.Assert.assertNull(auditAttributes1);
        org.junit.Assert.assertNotNull(locationGroupType3);
        org.junit.Assert.assertNull(auditAttributes4);
        org.junit.Assert.assertNull(auditAttributes7);
    }

    @Test
    public void test42829() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest85.test42829");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFieldVisit postFieldVisit0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFieldVisit();
        postFieldVisit0.Participants = "hi!:///AQUARIUS/Provisioning/v1";
        java.time.OffsetDateTime offsetDateTime3 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFieldVisit postFieldVisit4 = postFieldVisit0.setStartTime(offsetDateTime3);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFieldVisit postFieldVisit6 = postFieldVisit0.setId("ZZZZZ");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocation samplingLocation7 = postFieldVisit0.getSamplingLocation();
        java.lang.String str8 = postFieldVisit0.Id;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.FieldTripSimple fieldTripSimple9 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFieldVisit postFieldVisit10 = postFieldVisit0.setFieldTrip(fieldTripSimple9);
        java.lang.Object obj11 = postFieldVisit0.getResponseType();
        java.time.OffsetDateTime offsetDateTime12 = postFieldVisit0.StartTime;
        org.junit.Assert.assertNotNull(postFieldVisit4);
        org.junit.Assert.assertNotNull(postFieldVisit6);
        org.junit.Assert.assertNull(samplingLocation7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "ZZZZZ" + "'", str8, "ZZZZZ");
        org.junit.Assert.assertNotNull(postFieldVisit10);
        org.junit.Assert.assertNotNull(obj11);
        org.junit.Assert.assertEquals(obj11.toString(), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$FieldVisit");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj11), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$FieldVisit");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj11), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$FieldVisit");
        org.junit.Assert.assertNull(offsetDateTime12);
    }

    @Test
    public void test42830() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest85.test42830");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.util.List<java.lang.String> strList1 = getObservationsV2_0.SamplingContextTagIds;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_2 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray4 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList5 = new java.util.ArrayList<java.lang.String>();
        boolean boolean6 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList5, strArray4);
        getObservationsV2_2.SpecimenIds = strList5;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags8 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray12 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList13 = new java.util.ArrayList<java.lang.String>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList13, strArray12);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags15 = putLocationTags8.setTagUniqueIds(strList13);
        getObservationsV2_2.QualityControlTypes = strList13;
        getObservationsV2_0.ResultGrades = strList13;
        java.lang.Double double18 = getObservationsV2_0.getMinNumericResultValue();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetFieldVisits getFieldVisits19 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetFieldVisits();
        java.util.List<java.lang.String> strList20 = getFieldVisits19.getSamplingLocationIds();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags21 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray25 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList26 = new java.util.ArrayList<java.lang.String>();
        boolean boolean27 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList26, strArray25);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags28 = putLocationTags21.setTagUniqueIds(strList26);
        java.util.ArrayList<java.lang.String> strList29 = putLocationTags28.TagUniqueIds;
        getFieldVisits19.ScheduleIds = strList29;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_31 = getObservationsV2_0.setSamplingLocationGroupIds((java.util.List<java.lang.String>) strList29);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_33 = getObservationsV2_31.setCustomId("MinDuration");
        java.time.Instant instant34 = getObservationsV2_31.StartObservedTime;
        org.junit.Assert.assertNull(strList1);
        org.junit.Assert.assertNotNull(strArray4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(putLocationTags15);
        org.junit.Assert.assertNull(double18);
        org.junit.Assert.assertNull(strList20);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(putLocationTags28);
        org.junit.Assert.assertNotNull(strList29);
        org.junit.Assert.assertNotNull(getObservationsV2_31);
        org.junit.Assert.assertNotNull(getObservationsV2_33);
        org.junit.Assert.assertNull(instant34);
    }

    @Test
    public void test42831() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest85.test42831");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutLabAnalysisMethod putLabAnalysisMethod0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutLabAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostAnalysisMethod postAnalysisMethod1 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostAnalysisMethod();
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple> importHistoryEventSimpleList2 = postAnalysisMethod1.ImportHistoryEventSimples;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLabAnalysisMethod postLabAnalysisMethod3 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLabAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes4 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLabAnalysisMethod postLabAnalysisMethod5 = postLabAnalysisMethod3.setAuditAttributes(auditAttributes4);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty[] observedPropertyArray6 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty> observedPropertyList7 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty>) observedPropertyList7, observedPropertyArray6);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLabAnalysisMethod postLabAnalysisMethod9 = postLabAnalysisMethod5.setObservedProperties((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty>) observedPropertyList7);
        postAnalysisMethod1.ObservedProperties = observedPropertyList7;
        java.lang.String str11 = postAnalysisMethod1.MethodId;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostAnalysisMethod postAnalysisMethod12 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostAnalysisMethod();
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple> importHistoryEventSimpleList13 = postAnalysisMethod12.ImportHistoryEventSimples;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLabAnalysisMethod postLabAnalysisMethod14 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLabAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes15 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLabAnalysisMethod postLabAnalysisMethod16 = postLabAnalysisMethod14.setAuditAttributes(auditAttributes15);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty[] observedPropertyArray17 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty> observedPropertyList18 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty>) observedPropertyList18, observedPropertyArray17);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLabAnalysisMethod postLabAnalysisMethod20 = postLabAnalysisMethod16.setObservedProperties((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty>) observedPropertyList18);
        postAnalysisMethod12.ObservedProperties = observedPropertyList18;
        postAnalysisMethod1.ObservedProperties = observedPropertyList18;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutLabAnalysisMethod putLabAnalysisMethod23 = putLabAnalysisMethod0.setObservedProperties((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty>) observedPropertyList18);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes24 = putLabAnalysisMethod0.getAuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSamplingLocation putSamplingLocation25 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSamplingLocation();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSamplingLocation putSamplingLocation27 = putSamplingLocation25.setCustomId("https");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservedProperty postObservedProperty28 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservedProperty();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisType analysisType29 = postObservedProperty28.getAnalysisType();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty observedProperty30 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation31 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation();
        observation31.CustomId = "hi!";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.CategoricalResult categoricalResult34 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation35 = observation31.setCategoricalResult(categoricalResult34);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple[] importHistoryEventSimpleArray36 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple> importHistoryEventSimpleList37 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple>) importHistoryEventSimpleList37, importHistoryEventSimpleArray36);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation39 = observation31.setImportHistoryEventSimples((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple>) importHistoryEventSimpleList37);
        observedProperty30.ImportHistoryEventSimples = importHistoryEventSimpleList37;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservedProperty postObservedProperty41 = postObservedProperty28.setImportHistoryEventSimples((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple>) importHistoryEventSimpleList37);
        putSamplingLocation27.ImportHistoryEventSimples = importHistoryEventSimpleList37;
        putLabAnalysisMethod0.ImportHistoryEventSimples = importHistoryEventSimpleList37;
        java.lang.Object obj44 = putLabAnalysisMethod0.getResponseType();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Filter filter45 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Filter();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Filter filter47 = filter45.setId("2021.4.62.0");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Filter filter49 = filter47.setId("POST");
        filter49.Id = "https";
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty> observedPropertyList52 = filter49.ObservedProperties;
        filter49.Description = "/AQUARIUS";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFilter postFilter55 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFilter();
        java.time.OffsetDateTime offsetDateTime56 = postFilter55.StartTime;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostAnalysisMethod postAnalysisMethod57 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostAnalysisMethod();
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple> importHistoryEventSimpleList58 = postAnalysisMethod57.ImportHistoryEventSimples;
        java.lang.String str59 = postAnalysisMethod57.Context;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLabAnalysisMethod postLabAnalysisMethod60 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLabAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes61 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLabAnalysisMethod postLabAnalysisMethod62 = postLabAnalysisMethod60.setAuditAttributes(auditAttributes61);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty[] observedPropertyArray63 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty> observedPropertyList64 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty>();
        boolean boolean65 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty>) observedPropertyList64, observedPropertyArray63);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLabAnalysisMethod postLabAnalysisMethod66 = postLabAnalysisMethod62.setObservedProperties((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty>) observedPropertyList64);
        postAnalysisMethod57.ObservedProperties = observedPropertyList64;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFilter postFilter68 = postFilter55.setObservedProperties((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty>) observedPropertyList64);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Filter filter69 = filter49.setObservedProperties((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty>) observedPropertyList64);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutLabAnalysisMethod putLabAnalysisMethod70 = putLabAnalysisMethod0.setObservedProperties((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty>) observedPropertyList64);
        org.junit.Assert.assertNull(importHistoryEventSimpleList2);
        org.junit.Assert.assertNotNull(postLabAnalysisMethod5);
        org.junit.Assert.assertNotNull(observedPropertyArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(postLabAnalysisMethod9);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNull(importHistoryEventSimpleList13);
        org.junit.Assert.assertNotNull(postLabAnalysisMethod16);
        org.junit.Assert.assertNotNull(observedPropertyArray17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(postLabAnalysisMethod20);
        org.junit.Assert.assertNotNull(putLabAnalysisMethod23);
        org.junit.Assert.assertNull(auditAttributes24);
        org.junit.Assert.assertNotNull(putSamplingLocation27);
        org.junit.Assert.assertNull(analysisType29);
        org.junit.Assert.assertNotNull(observation35);
        org.junit.Assert.assertNotNull(importHistoryEventSimpleArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(observation39);
        org.junit.Assert.assertNotNull(postObservedProperty41);
        org.junit.Assert.assertNotNull(obj44);
        org.junit.Assert.assertEquals(obj44.toString(), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$AnalysisMethod");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj44), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$AnalysisMethod");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj44), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$AnalysisMethod");
        org.junit.Assert.assertNotNull(filter47);
        org.junit.Assert.assertNotNull(filter49);
        org.junit.Assert.assertNull(observedPropertyList52);
        org.junit.Assert.assertNull(offsetDateTime56);
        org.junit.Assert.assertNull(importHistoryEventSimpleList58);
        org.junit.Assert.assertNull(str59);
        org.junit.Assert.assertNotNull(postLabAnalysisMethod62);
        org.junit.Assert.assertNotNull(observedPropertyArray63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(postLabAnalysisMethod66);
        org.junit.Assert.assertNotNull(postFilter68);
        org.junit.Assert.assertNotNull(filter69);
        org.junit.Assert.assertNotNull(putLabAnalysisMethod70);
    }

    @Test
    public void test42832() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest85.test42832");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SearchResultObservedProperty searchResultObservedProperty0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SearchResultObservedProperty();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SearchResultObservedProperty searchResultObservedProperty2 = searchResultObservedProperty0.setCursor("/AQUARIUS/Provisioning/v1");
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty> observedPropertyList3 = searchResultObservedProperty2.getDomainObjects();
        org.junit.Assert.assertNotNull(searchResultObservedProperty2);
        org.junit.Assert.assertNull(observedPropertyList3);
    }

    @Test
    public void test42833() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest85.test42833");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedPoint timeAlignedPoint0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedPoint();
        timeAlignedPoint0.Method9 = "multipart/form-data; boundary=****7eff1774-b6b0-471a-961c-156c64359366****";
        timeAlignedPoint0.DisplayValue9 = "";
        java.lang.String str5 = timeAlignedPoint0.getApprovalName4();
        timeAlignedPoint0.ApprovalLevel2 = 0L;
        timeAlignedPoint0.GradeCode1 = 1L;
        java.lang.String str10 = timeAlignedPoint0.ApprovalName10;
        java.lang.Long long11 = timeAlignedPoint0.ApprovalLevel3;
        java.lang.Long long12 = timeAlignedPoint0.getGradeCode9();
        java.lang.String str13 = timeAlignedPoint0.getDisplayValue2();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedPoint timeAlignedPoint15 = timeAlignedPoint0.setGradeName9("2021.8.9990");
        timeAlignedPoint0.Method7 = "http://MaxDurationhttp/json/reply/Float";
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNull(long11);
        org.junit.Assert.assertNull(long12);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNotNull(timeAlignedPoint15);
    }

    @Test
    public void test42834() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest85.test42834");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostCollectionMethod postCollectionMethod0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostCollectionMethod();
        postCollectionMethod0.IdentifierOrganization = "http://MaxDurationhttp/json/reply/Integer";
        java.lang.String str3 = postCollectionMethod0.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostCollectionMethod postCollectionMethod5 = postCollectionMethod0.setIdentifierOrganization("multipart/form-data; boundary=****44f0772e-c3ca-4316-8e2a-61ec8540d661****");
        java.lang.String str6 = postCollectionMethod5.CustomId;
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(postCollectionMethod5);
        org.junit.Assert.assertNull(str6);
    }

    @Test
    public void test42835() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest85.test42835");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservedProperty postObservedProperty0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservedProperty();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UnitGroup unitGroup1 = postObservedProperty0.UnitGroup;
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple> importHistoryEventSimpleList2 = postObservedProperty0.ImportHistoryEventSimples;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservationV2 postObservationV2_3 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservationV2();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabInstruction labInstruction4 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservationV2 postObservationV2_5 = postObservationV2_3.setLabInstruction(labInstruction4);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Taxon taxon6 = null;
        postObservationV2_5.RelatedTaxon = taxon6;
        postObservationV2_5.MediumSubdivision = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity quantity10 = postObservationV2_5.Depth;
        java.lang.String str11 = postObservationV2_5.MediumSubdivision;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity quantity12 = postObservationV2_5.getDepth();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.NumericResult numericResult13 = null;
        postObservationV2_5.NumericResult = numericResult13;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation15 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedFieldResult plannedFieldResult16 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation17 = observation15.setPlannedFieldResult(plannedFieldResult16);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabInstruction labInstruction18 = null;
        observation17.LabInstruction = labInstruction18;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationStatistics observationStatistics20 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation21 = observation17.setStatistics(observationStatistics20);
        java.time.OffsetDateTime offsetDateTime22 = observation21.getResultTime();
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple> importHistoryEventSimpleList23 = observation21.ImportHistoryEventSimples;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty observedProperty24 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation25 = observation21.setObservedProperty(observedProperty24);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultGrade resultGrade26 = observation25.ResultGrade;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.NumericResult numericResult27 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation28 = observation25.setNumericResult(numericResult27);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultGrade resultGrade29 = observation25.getResultGrade();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Device device30 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Device();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Device device32 = device30.setType("/AQUARIUS/Acquisition/v2");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation33 = observation25.setDevice(device32);
        postObservationV2_5.Device = device32;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricConfiguration metricConfiguration35 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricConfiguration();
        java.lang.String str36 = metricConfiguration35.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty observedProperty37 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty();
        observedProperty37.CasNumber = "MinDuration";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricConfiguration metricConfiguration40 = metricConfiguration35.setObservedProperty(observedProperty37);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultType resultType41 = observedProperty37.ResultType;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservedProperty postObservedProperty42 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservedProperty();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UnitGroup unitGroup43 = postObservedProperty42.UnitGroup;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity quantity44 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Unit unit45 = null;
        quantity44.Unit = unit45;
        postObservedProperty42.LowerLimit = quantity44;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity quantity48 = postObservedProperty42.LowerLimit;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Unit unit49 = quantity48.Unit;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty observedProperty50 = observedProperty37.setUpperLimit(quantity48);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UnitGroup unitGroup51 = observedProperty50.UnitGroup;
        postObservationV2_5.ObservedProperty = observedProperty50;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservedProperty postObservedProperty53 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservedProperty();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservedProperty postObservedProperty55 = postObservedProperty53.setCustomId("hi!");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes56 = postObservedProperty53.AuditAttributes;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservedProperty postObservedProperty58 = postObservedProperty53.setName("2021.4.62.0");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultType resultType59 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultType.CATEGORICAL_FIXED_VALUES;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservedProperty postObservedProperty60 = postObservedProperty58.setResultType(resultType59);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultType resultType61 = postObservedProperty60.ResultType;
        java.lang.String str62 = postObservedProperty60.Description;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultType resultType63 = postObservedProperty60.ResultType;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty observedProperty64 = observedProperty50.setResultType(resultType63);
        postObservedProperty0.ResultType = resultType63;
        org.junit.Assert.assertNull(unitGroup1);
        org.junit.Assert.assertNull(importHistoryEventSimpleList2);
        org.junit.Assert.assertNotNull(postObservationV2_5);
        org.junit.Assert.assertNull(quantity10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ" + "'", str11, "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ");
        org.junit.Assert.assertNull(quantity12);
        org.junit.Assert.assertNotNull(observation17);
        org.junit.Assert.assertNotNull(observation21);
        org.junit.Assert.assertNull(offsetDateTime22);
        org.junit.Assert.assertNull(importHistoryEventSimpleList23);
        org.junit.Assert.assertNotNull(observation25);
        org.junit.Assert.assertNull(resultGrade26);
        org.junit.Assert.assertNotNull(observation28);
        org.junit.Assert.assertNull(resultGrade29);
        org.junit.Assert.assertNotNull(device32);
        org.junit.Assert.assertNotNull(observation33);
        org.junit.Assert.assertNull(str36);
        org.junit.Assert.assertNotNull(metricConfiguration40);
        org.junit.Assert.assertNull(resultType41);
        org.junit.Assert.assertNull(unitGroup43);
        org.junit.Assert.assertNotNull(quantity48);
        org.junit.Assert.assertNull(unit49);
        org.junit.Assert.assertNotNull(observedProperty50);
        org.junit.Assert.assertNull(unitGroup51);
        org.junit.Assert.assertNotNull(postObservedProperty55);
        org.junit.Assert.assertNull(auditAttributes56);
        org.junit.Assert.assertNotNull(postObservedProperty58);
        org.junit.Assert.assertTrue("'" + resultType59 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultType.CATEGORICAL_FIXED_VALUES + "'", resultType59.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultType.CATEGORICAL_FIXED_VALUES));
        org.junit.Assert.assertNotNull(postObservedProperty60);
        org.junit.Assert.assertTrue("'" + resultType61 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultType.CATEGORICAL_FIXED_VALUES + "'", resultType61.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultType.CATEGORICAL_FIXED_VALUES));
        org.junit.Assert.assertNull(str62);
        org.junit.Assert.assertTrue("'" + resultType63 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultType.CATEGORICAL_FIXED_VALUES + "'", resultType63.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultType.CATEGORICAL_FIXED_VALUES));
        org.junit.Assert.assertNotNull(observedProperty64);
    }

    @Test
    public void test42836() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest85.test42836");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationExportIIV2 getObservationExportIIV2_0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationExportIIV2();
        java.util.List<java.lang.String> strList1 = getObservationExportIIV2_0.getCollectionMethodIds();
        java.lang.String str2 = getObservationExportIIV2_0.getDepthUnitCustomId();
        java.time.Instant instant3 = getObservationExportIIV2_0.EndObservedTime;
        getObservationExportIIV2_0.Limit = 100;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationExportIIV2 getObservationExportIIV2_7 = getObservationExportIIV2_0.setCustomId("multipart/form-data; boundary=****d9f5d551-383a-4365-87fd-ae7094da6f3b****");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationExportIIV2 getObservationExportIIV2_8 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationExportIIV2();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationExportIIFormatType getObservationExportIIFormatType9 = getObservationExportIIV2_8.getFormat();
        java.util.List<java.lang.String> strList10 = getObservationExportIIV2_8.SamplingLocationIds;
        getObservationExportIIV2_8.ActivityCustomId = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSSSSSZZZZZ";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportSamplingLocations getExportSamplingLocations13 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportSamplingLocations();
        java.time.Instant instant14 = getExportSamplingLocations13.getStartModificationTime();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_15 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray18 = new java.lang.String[] { "", "" };
        java.util.ArrayList<java.lang.String> strList19 = new java.util.ArrayList<java.lang.String>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList19, strArray18);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_21 = getObservationsV2_15.setDataClassifications((java.util.List<java.lang.String>) strList19);
        java.util.List<java.lang.String> strList22 = getObservationsV2_15.ResultGrades;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.FieldResultType fieldResultType23 = null;
        getObservationsV2_15.FieldResultType = fieldResultType23;
        getObservationsV2_15.MaxNumericResultValue = 100.0d;
        java.lang.String str27 = getObservationsV2_15.getActivityCustomId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_29 = getObservationsV2_15.setDepthUnitCustomId("/AQUARIUS/Acquisition/v2://9999-12-31T23:59:59.999Z");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_30 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray32 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList33 = new java.util.ArrayList<java.lang.String>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList33, strArray32);
        getObservationsV2_30.SpecimenIds = strList33;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_36 = getObservationsV2_15.setAnalysisMethodIds((java.util.List<java.lang.String>) strList33);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportSamplingLocations getExportSamplingLocations37 = getExportSamplingLocations13.setSamplingLocationGroupIds((java.util.List<java.lang.String>) strList33);
        getExportSamplingLocations37.Sort = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSSSSSZZZZZ";
        java.lang.String str40 = getExportSamplingLocations37.Cursor;
        java.lang.Integer int41 = getExportSamplingLocations37.getLimit();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_42 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray45 = new java.lang.String[] { "", "" };
        java.util.ArrayList<java.lang.String> strList46 = new java.util.ArrayList<java.lang.String>();
        boolean boolean47 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList46, strArray45);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_48 = getObservationsV2_42.setDataClassifications((java.util.List<java.lang.String>) strList46);
        java.time.Instant instant49 = getObservationsV2_42.getStartObservedTime();
        java.util.List<java.lang.String> strList50 = getObservationsV2_42.Ids;
        java.util.List<java.lang.String> strList51 = getObservationsV2_42.DataClassifications;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_53 = getObservationsV2_42.setDepthUnitId("http://MaxDurationhttp/json/reply/Integer");
        java.util.List<java.lang.String> strList54 = getObservationsV2_53.getTaxonIds();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostTag postTag55 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostTag();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_56 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray59 = new java.lang.String[] { "", "" };
        java.util.ArrayList<java.lang.String> strList60 = new java.util.ArrayList<java.lang.String>();
        boolean boolean61 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList60, strArray59);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_62 = getObservationsV2_56.setDataClassifications((java.util.List<java.lang.String>) strList60);
        postTag55.PickListValues = strList60;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_64 = getObservationsV2_53.setResultStatuses((java.util.List<java.lang.String>) strList60);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportSamplingLocations getExportSamplingLocations65 = getExportSamplingLocations37.setSearch((java.util.List<java.lang.String>) strList60);
        getObservationExportIIV2_8.Media = strList60;
        getObservationExportIIV2_7.SpecimenIds = strList60;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetSpecimens getSpecimens68 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetSpecimens();
        java.util.List<java.lang.String> strList69 = getSpecimens68.getActivityIds();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetSpecimens getSpecimens71 = getSpecimens68.setSort("MinDuration");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.LocationDatumPeriod locationDatumPeriod72 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.LocationDatumPeriod();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.LocationDatumPeriodBase locationDatumPeriodBase74 = locationDatumPeriod72.setComment("'.'SSSSSSS");
        java.lang.Double double75 = locationDatumPeriodBase74.Elevation;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Qualifier qualifier76 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Qualifier();
        java.time.Instant instant77 = qualifier76.DateApplied;
        java.lang.String str78 = qualifier76.User;
        java.lang.String str79 = qualifier76.getIdentifier();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest80 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest();
        java.lang.Object obj81 = timeAlignedDataServiceRequest80.getResponseType();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse82 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant83 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse84 = locationDescriptionListServiceResponse82.setNextToken(instant83);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest85 = timeAlignedDataServiceRequest80.setQueryFrom(instant83);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Qualifier qualifier86 = qualifier76.setDateApplied(instant83);
        java.time.Instant instant87 = qualifier86.getDateApplied();
        locationDatumPeriodBase74.ValidFrom = instant87;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetSpecimens getSpecimens89 = getSpecimens68.setEndModificationTime(instant87);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationExportIIV2 getObservationExportIIV2_90 = getObservationExportIIV2_7.setStartModificationTime(instant87);
        getObservationExportIIV2_7.MaxNumericResultValue = 1.0d;
        org.junit.Assert.assertNull(strList1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(instant3);
        org.junit.Assert.assertNotNull(getObservationExportIIV2_7);
        org.junit.Assert.assertNull(getObservationExportIIFormatType9);
        org.junit.Assert.assertNull(strList10);
        org.junit.Assert.assertNull(instant14);
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(getObservationsV2_21);
        org.junit.Assert.assertNull(strList22);
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertNotNull(getObservationsV2_29);
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(getObservationsV2_36);
        org.junit.Assert.assertNotNull(getExportSamplingLocations37);
        org.junit.Assert.assertNull(str40);
        org.junit.Assert.assertNull(int41);
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(getObservationsV2_48);
        org.junit.Assert.assertNull(instant49);
        org.junit.Assert.assertNull(strList50);
        org.junit.Assert.assertNotNull(strList51);
        org.junit.Assert.assertNotNull(getObservationsV2_53);
        org.junit.Assert.assertNull(strList54);
        org.junit.Assert.assertNotNull(strArray59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(getObservationsV2_62);
        org.junit.Assert.assertNotNull(getObservationsV2_64);
        org.junit.Assert.assertNotNull(getExportSamplingLocations65);
        org.junit.Assert.assertNull(strList69);
        org.junit.Assert.assertNotNull(getSpecimens71);
        org.junit.Assert.assertNotNull(locationDatumPeriodBase74);
        org.junit.Assert.assertNull(double75);
        org.junit.Assert.assertNull(instant77);
        org.junit.Assert.assertNull(str78);
        org.junit.Assert.assertNull(str79);
        org.junit.Assert.assertNotNull(obj81);
        org.junit.Assert.assertEquals(obj81.toString(), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj81), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj81), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertNotNull(instant83);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse84);
        org.junit.Assert.assertNotNull(timeAlignedDataServiceRequest85);
        org.junit.Assert.assertNotNull(qualifier86);
        org.junit.Assert.assertNotNull(instant87);
        org.junit.Assert.assertNotNull(getSpecimens89);
        org.junit.Assert.assertNotNull(getObservationExportIIV2_90);
    }

    @Test
    public void test42837() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest85.test42837");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSchedule putSchedule0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSchedule();
        java.time.OffsetDateTime offsetDateTime1 = putSchedule0.StartDate;
        java.time.OffsetDateTime offsetDateTime2 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSchedule putSchedule3 = putSchedule0.setEndDate(offsetDateTime2);
        java.lang.Integer int4 = putSchedule0.getSamplingLocationGroupSelectionTypeRandomCount();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes5 = putSchedule0.AuditAttributes;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationGroup samplingLocationGroup6 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationGroup();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LocationGroupType locationGroupType7 = samplingLocationGroup6.getLocationGroupType();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LocationGroupType locationGroupType8 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LocationGroupType();
        samplingLocationGroup6.LocationGroupType = locationGroupType8;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSchedule putSchedule10 = putSchedule0.setSamplingLocationGroup(samplingLocationGroup6);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationGroup samplingLocationGroup12 = samplingLocationGroup6.setDescription("MaxInstant");
        java.lang.String str13 = samplingLocationGroup6.getName();
        org.junit.Assert.assertNull(offsetDateTime1);
        org.junit.Assert.assertNotNull(putSchedule3);
        org.junit.Assert.assertNull(int4);
        org.junit.Assert.assertNull(auditAttributes5);
        org.junit.Assert.assertNull(locationGroupType7);
        org.junit.Assert.assertNotNull(putSchedule10);
        org.junit.Assert.assertNotNull(samplingLocationGroup12);
        org.junit.Assert.assertNull(str13);
    }

    @Test
    public void test42838() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest85.test42838");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostTaxon postTaxon0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostTaxon();
        java.lang.String str1 = postTaxon0.getId();
        java.lang.String str2 = postTaxon0.ParentId;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes3 = postTaxon0.AuditAttributes;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostTaxon postTaxon5 = postTaxon0.setItisUrl("multipart/form-data; boundary=****f2ce0d54-dac7-4cd0-b74f-1024089261f9****");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostTaxon postTaxon7 = postTaxon0.setId("multipart/form-data; boundary=****2d077bad-cd27-4736-8ba0-2a8d8a85733d****");
        postTaxon7.ItisComment = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ";
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(auditAttributes3);
        org.junit.Assert.assertNotNull(postTaxon5);
        org.junit.Assert.assertNotNull(postTaxon7);
    }

    @Test
    public void test42839() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest85.test42839");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation();
        observation0.CustomId = "hi!";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.CategoricalResult categoricalResult3 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation4 = observation0.setCategoricalResult(categoricalResult3);
        java.lang.String str5 = observation0.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.FieldVisit fieldVisit6 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.FieldVisit();
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment> domainObjectAttachmentList7 = fieldVisit6.Attachments;
        java.time.OffsetDateTime offsetDateTime8 = null;
        fieldVisit6.EndTime = offsetDateTime8;
        java.time.OffsetDateTime offsetDateTime10 = fieldVisit6.getStartTime();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation11 = observation0.setFieldVisit(fieldVisit6);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty observedProperty12 = observation0.getObservedProperty();
        org.junit.Assert.assertNotNull(observation4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(domainObjectAttachmentList7);
        org.junit.Assert.assertNull(offsetDateTime10);
        org.junit.Assert.assertNotNull(observation11);
        org.junit.Assert.assertNull(observedProperty12);
    }

    @Test
    public void test42840() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest85.test42840");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutActivity putActivity0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutActivity();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.FieldVisit fieldVisit1 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.FieldVisit();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment2 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment();
        java.lang.String str3 = domainObjectAttachment2.getId();
        java.lang.String str4 = domainObjectAttachment2.getId();
        domainObjectAttachment2.Id = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment8 = domainObjectAttachment2.setId("hi!");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment10 = domainObjectAttachment8.setId("hi!");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment11 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment();
        java.lang.String str12 = domainObjectAttachment11.getId();
        java.lang.String str13 = domainObjectAttachment11.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment[] domainObjectAttachmentArray14 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment[] { domainObjectAttachment8, domainObjectAttachment11 };
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment> domainObjectAttachmentList15 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment>) domainObjectAttachmentList15, domainObjectAttachmentArray14);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.FieldVisit fieldVisit17 = fieldVisit1.setAttachments((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment>) domainObjectAttachmentList15);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutActivity putActivity18 = putActivity0.setFieldVisit(fieldVisit1);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.FieldVisit fieldVisit19 = putActivity18.getFieldVisit();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.FieldVisit fieldVisit20 = putActivity18.getFieldVisit();
        java.time.OffsetDateTime offsetDateTime21 = null;
        putActivity18.StartTime = offsetDateTime21;
        java.lang.String str23 = putActivity18.SourceActivityId;
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNotNull(domainObjectAttachment8);
        org.junit.Assert.assertNotNull(domainObjectAttachment10);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNotNull(domainObjectAttachmentArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(fieldVisit17);
        org.junit.Assert.assertNotNull(putActivity18);
        org.junit.Assert.assertNotNull(fieldVisit19);
        org.junit.Assert.assertNotNull(fieldVisit20);
        org.junit.Assert.assertNull(str23);
    }

    @Test
    public void test42841() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest85.test42841");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutTimeSeries putTimeSeries0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutTimeSeries();
        java.lang.String str1 = putTimeSeries0.Description;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutTimeSeries putTimeSeries3 = putTimeSeries0.setComment("yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSSSSSZZZZZ");
        putTimeSeries3.Comment = "'.'SSSSSSS";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutTimeSeries putTimeSeries7 = putTimeSeries3.setSubLocationIdentifier("");
        java.lang.Boolean boolean8 = putTimeSeries3.isPublish();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(putTimeSeries3);
        org.junit.Assert.assertNotNull(putTimeSeries7);
        org.junit.Assert.assertNull(boolean8);
    }

    @Test
    public void test42842() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest85.test42842");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutTaxon putTaxon0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutTaxon();
        putTaxon0.ParentId = "http://MaxDurationhttp/json/reply/ArrayList";
        java.lang.String str3 = putTaxon0.getComment();
        putTaxon0.ParentId = "-PT87591240H";
        java.lang.String str6 = putTaxon0.ItisUrl;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutTaxon putTaxon8 = putTaxon0.setItisComment("yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSSSSSZZZZZ");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.TaxonomyLevel taxonomyLevel9 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.TaxonomyLevel();
        java.lang.String str10 = taxonomyLevel9.Id;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes11 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.TaxonomyLevel taxonomyLevel12 = taxonomyLevel9.setAuditAttributes(auditAttributes11);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.TaxonomyLevel taxonomyLevel14 = taxonomyLevel9.setCustomId("9999-12-31T23:59:59.999Z");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes15 = taxonomyLevel9.getAuditAttributes();
        taxonomyLevel9.CustomId = "/AQUARIUS/Provisioning/v1";
        putTaxon8.TaxonomyLevel = taxonomyLevel9;
        java.lang.String str19 = putTaxon8.Comment;
        java.lang.String str20 = putTaxon8.Source;
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNotNull(putTaxon8);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNotNull(taxonomyLevel12);
        org.junit.Assert.assertNotNull(taxonomyLevel14);
        org.junit.Assert.assertNull(auditAttributes15);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertNull(str20);
    }

    @Test
    public void test42843() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest85.test42843");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetSpecimens getSpecimens0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetSpecimens();
        java.util.List<java.lang.String> strList1 = getSpecimens0.getActivityIds();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutUserV2 putUserV2_2 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutUserV2();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UserType userType3 = putUserV2_2.UserType;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetActivities getActivities4 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetActivities();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse5 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary6 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary8 = dischargeSummary6.setPublish((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse9 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant10 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse11 = locationDescriptionListServiceResponse9.setNextToken(instant10);
        dischargeSummary6.MeasurementTime = instant10;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse13 = locationDescriptionListServiceResponse5.setNextToken(instant10);
        java.time.Instant instant14 = locationDescriptionListServiceResponse5.getNextToken();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetActivities getActivities15 = getActivities4.setToStartTime(instant14);
        java.lang.String str16 = getActivities15.getSort();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_17 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.util.List<java.lang.String> strList18 = getObservationsV2_17.SamplingContextTagIds;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_19 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray21 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList22 = new java.util.ArrayList<java.lang.String>();
        boolean boolean23 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList22, strArray21);
        getObservationsV2_19.SpecimenIds = strList22;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags25 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray29 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList30 = new java.util.ArrayList<java.lang.String>();
        boolean boolean31 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList30, strArray29);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags32 = putLocationTags25.setTagUniqueIds(strList30);
        getObservationsV2_19.QualityControlTypes = strList30;
        getObservationsV2_17.ResultGrades = strList30;
        getActivities15.Media = strList30;
        putUserV2_2.AccessGroups = strList30;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetSpecimens getSpecimens37 = getSpecimens0.setAnalyticalGroupIds((java.util.List<java.lang.String>) strList30);
        java.util.List<java.lang.String> strList38 = null;
        getSpecimens0.AnalyticalGroupIds = strList38;
        java.util.List<java.lang.String> strList40 = getSpecimens0.SamplingLocationGroupIds;
        java.util.List<java.lang.String> strList41 = getSpecimens0.getLaboratoryIds();
        java.time.Instant instant42 = getSpecimens0.getStartModificationTime();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationRemark locationRemark43 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationRemark();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationRemark locationRemark45 = locationRemark43.setDescription("MaxInstant");
        java.lang.String str46 = locationRemark45.getTypeName();
        java.time.Instant instant47 = locationRemark45.CreateTime;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationRemark locationRemark49 = locationRemark45.setTypeName("multipart/form-data; boundary=****bbcf5f9e-6ccf-4b63-91ab-6e645caf02af****");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ReferencePointPeriod referencePointPeriod50 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ReferencePointPeriod();
        java.lang.String str51 = referencePointPeriod50.AppliedByUser;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ReferencePointPeriodBase referencePointPeriodBase53 = referencePointPeriod50.setIsMeasuredAgainstLocalAssumedDatum((java.lang.Boolean) true);
        referencePointPeriod50.Uncertainty = 10.0d;
        java.time.Instant instant56 = com.aquaticinformatics.aquarius.sdk.samples.serializers.InstantDeserializer.MinValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ReferencePointPeriodBase referencePointPeriodBase57 = referencePointPeriod50.setValidFrom(instant56);
        locationRemark45.ToTime = instant56;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Qualifier qualifier59 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Qualifier();
        java.time.Instant instant60 = qualifier59.DateApplied;
        java.lang.String str61 = qualifier59.User;
        java.lang.String str62 = qualifier59.getIdentifier();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse63 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary64 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary66 = dischargeSummary64.setPublish((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse67 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant68 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse69 = locationDescriptionListServiceResponse67.setNextToken(instant68);
        dischargeSummary64.MeasurementTime = instant68;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse71 = locationDescriptionListServiceResponse63.setNextToken(instant68);
        java.time.Instant instant72 = locationDescriptionListServiceResponse63.getNextToken();
        java.time.Instant instant73 = locationDescriptionListServiceResponse63.getNextToken();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeRange timeRange74 = qualifier59.setStartTime(instant73);
        locationRemark45.ToTime = instant73;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetSpecimens getSpecimens76 = getSpecimens0.setStartModificationTime(instant73);
        java.util.List<java.lang.String> strList77 = getSpecimens0.getFieldVisitId();
        org.junit.Assert.assertNull(strList1);
        org.junit.Assert.assertNull(userType3);
        org.junit.Assert.assertNotNull(dischargeSummary8);
        org.junit.Assert.assertNotNull(instant10);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse11);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse13);
        org.junit.Assert.assertNotNull(instant14);
        org.junit.Assert.assertNotNull(getActivities15);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNull(strList18);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(strArray29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(putLocationTags32);
        org.junit.Assert.assertNotNull(getSpecimens37);
        org.junit.Assert.assertNull(strList40);
        org.junit.Assert.assertNull(strList41);
        org.junit.Assert.assertNull(instant42);
        org.junit.Assert.assertNotNull(locationRemark45);
        org.junit.Assert.assertNull(str46);
        org.junit.Assert.assertNull(instant47);
        org.junit.Assert.assertNotNull(locationRemark49);
        org.junit.Assert.assertNull(str51);
        org.junit.Assert.assertNotNull(referencePointPeriodBase53);
        org.junit.Assert.assertNotNull(instant56);
        org.junit.Assert.assertNotNull(referencePointPeriodBase57);
        org.junit.Assert.assertNull(instant60);
        org.junit.Assert.assertNull(str61);
        org.junit.Assert.assertNull(str62);
        org.junit.Assert.assertNotNull(dischargeSummary66);
        org.junit.Assert.assertNotNull(instant68);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse69);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse71);
        org.junit.Assert.assertNotNull(instant72);
        org.junit.Assert.assertNotNull(instant73);
        org.junit.Assert.assertNotNull(timeRange74);
        org.junit.Assert.assertNotNull(getSpecimens76);
        org.junit.Assert.assertNull(strList77);
    }

    @Test
    public void test42844() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest85.test42844");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetFilterHistory getFilterHistory0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetFilterHistory();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetFilterHistory getFilterHistory2 = getFilterHistory0.setId("'.'SSSSSSS");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetFilterHistory getFilterHistory4 = getFilterHistory0.setId("http://MaxDurationhttp/json/reply/ArrayList");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetFilterHistory getFilterHistory6 = getFilterHistory0.setId("/AQUARIUS");
        java.lang.String str7 = getFilterHistory0.Id;
        org.junit.Assert.assertNotNull(getFilterHistory2);
        org.junit.Assert.assertNotNull(getFilterHistory4);
        org.junit.Assert.assertNotNull(getFilterHistory6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "/AQUARIUS" + "'", str7, "/AQUARIUS");
    }

    @Test
    public void test42845() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest85.test42845");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDataRawServiceRequest timeSeriesDataRawServiceRequest0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDataRawServiceRequest();
        java.lang.Boolean boolean1 = timeSeriesDataRawServiceRequest0.ApplyRounding;
        timeSeriesDataRawServiceRequest0.ApplyRounding = false;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescription locationDescription4 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescription();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescription locationDescription6 = locationDescription4.setIdentifier("");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ControlConditionActivity controlConditionActivity7 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ControlConditionActivity();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ControlCleanedType controlCleanedType8 = null;
        controlConditionActivity7.ControlCleaned = controlCleanedType8;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse10 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant11 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse12 = locationDescriptionListServiceResponse10.setNextToken(instant11);
        controlConditionActivity7.DateCleaned = instant11;
        locationDescription6.LastModified = instant11;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDataRawServiceRequest timeSeriesDataRawServiceRequest15 = timeSeriesDataRawServiceRequest0.setQueryFrom(instant11);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDataRawServiceRequest timeSeriesDataRawServiceRequest17 = timeSeriesDataRawServiceRequest0.setUnit("9999-12-31T23:59:59.9999999Z");
        timeSeriesDataRawServiceRequest0.TimeSeriesUniqueId = "multipart/form-data; boundary=****f2ce0d54-dac7-4cd0-b74f-1024089261f9****";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDataRawServiceRequest timeSeriesDataRawServiceRequest21 = timeSeriesDataRawServiceRequest0.setTimeSeriesUniqueId("-PT87591240H");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDataRawServiceRequest timeSeriesDataRawServiceRequest23 = timeSeriesDataRawServiceRequest21.setTimeSeriesUniqueId("multipart/form-data; boundary=****d9f5d551-383a-4365-87fd-ae7094da6f3b****");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDataRawServiceRequest timeSeriesDataRawServiceRequest25 = timeSeriesDataRawServiceRequest21.setUtcOffset((java.lang.Double) (-1.0d));
        java.lang.String str26 = timeSeriesDataRawServiceRequest21.GetParts;
        org.junit.Assert.assertNull(boolean1);
        org.junit.Assert.assertNotNull(locationDescription6);
        org.junit.Assert.assertNotNull(instant11);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse12);
        org.junit.Assert.assertNotNull(timeSeriesDataRawServiceRequest15);
        org.junit.Assert.assertNotNull(timeSeriesDataRawServiceRequest17);
        org.junit.Assert.assertNotNull(timeSeriesDataRawServiceRequest21);
        org.junit.Assert.assertNotNull(timeSeriesDataRawServiceRequest23);
        org.junit.Assert.assertNotNull(timeSeriesDataRawServiceRequest25);
        org.junit.Assert.assertNull(str26);
    }

    @Test
    public void test42846() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest85.test42846");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostDatumConvertedTimeSeries postDatumConvertedTimeSeries0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostDatumConvertedTimeSeries();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostDatumConvertedTimeSeries postDatumConvertedTimeSeries2 = postDatumConvertedTimeSeries0.setDescription("yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ");
        postDatumConvertedTimeSeries0.Publish = false;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostDatumConvertedTimeSeries postDatumConvertedTimeSeries6 = postDatumConvertedTimeSeries0.setUnit("multipart/form-data; boundary=****bbcf5f9e-6ccf-4b63-91ab-6e645caf02af****");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostDatumConvertedTimeSeries postDatumConvertedTimeSeries8 = postDatumConvertedTimeSeries6.setComputationIdentifier("https");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostDatumConvertedTimeSeries postDatumConvertedTimeSeries10 = postDatumConvertedTimeSeries6.setMethod("multipart/form-data; boundary=****59879c02-0839-4b96-bc41-a13ebb706be4****");
        java.lang.String str11 = postDatumConvertedTimeSeries6.TargetStandardReferenceDatumIdentifier;
        org.junit.Assert.assertNotNull(postDatumConvertedTimeSeries2);
        org.junit.Assert.assertNotNull(postDatumConvertedTimeSeries6);
        org.junit.Assert.assertNotNull(postDatumConvertedTimeSeries8);
        org.junit.Assert.assertNotNull(postDatumConvertedTimeSeries10);
        org.junit.Assert.assertNull(str11);
    }

    @Test
    public void test42847() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest85.test42847");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.SettingsResponse settingsResponse0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.SettingsResponse();
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Setting> settingList1 = settingsResponse0.Results;
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Setting> settingList2 = settingsResponse0.getResults();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Setting setting3 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Setting();
        setting3.IsSystem = true;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Setting setting6 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Setting();
        setting6.IsSystem = true;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Setting setting10 = setting6.setValue("MaxDuration");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Setting[] settingArray11 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Setting[] { setting3, setting6 };
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Setting> settingList12 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Setting>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Setting>) settingList12, settingArray11);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.SettingsResponse settingsResponse14 = settingsResponse0.setResults(settingList12);
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Setting> settingList15 = settingsResponse0.getResults();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.SettingsResponse settingsResponse16 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.SettingsResponse();
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Setting> settingList17 = settingsResponse16.Results;
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Setting> settingList18 = settingsResponse16.getResults();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Setting setting19 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Setting();
        setting19.IsSystem = true;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Setting setting22 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Setting();
        setting22.IsSystem = true;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Setting setting26 = setting22.setValue("MaxDuration");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Setting[] settingArray27 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Setting[] { setting19, setting22 };
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Setting> settingList28 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Setting>();
        boolean boolean29 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Setting>) settingList28, settingArray27);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.SettingsResponse settingsResponse30 = settingsResponse16.setResults(settingList28);
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Setting> settingList31 = settingsResponse16.getResults();
        settingsResponse0.Results = settingList31;
        org.junit.Assert.assertNull(settingList1);
        org.junit.Assert.assertNull(settingList2);
        org.junit.Assert.assertNotNull(setting10);
        org.junit.Assert.assertNotNull(settingArray11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(settingsResponse14);
        org.junit.Assert.assertNotNull(settingList15);
        org.junit.Assert.assertNull(settingList17);
        org.junit.Assert.assertNull(settingList18);
        org.junit.Assert.assertNotNull(setting26);
        org.junit.Assert.assertNotNull(settingArray27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(settingsResponse30);
        org.junit.Assert.assertNotNull(settingList31);
    }

    @Test
    public void test42848() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest85.test42848");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LevelSurveyMeasurement levelSurveyMeasurement0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LevelSurveyMeasurement();
        java.lang.String str1 = levelSurveyMeasurement0.ReferencePointUniqueId;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay2 = levelSurveyMeasurement0.MeasuredElevation;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay3 = levelSurveyMeasurement0.getMeasuredElevation();
        java.time.Instant instant4 = levelSurveyMeasurement0.getMeasurementTime();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CrossSectionPoint crossSectionPoint5 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CrossSectionPoint();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay6 = null;
        crossSectionPoint5.Distance = quantityWithDisplay6;
        crossSectionPoint5.PointOrder = 1;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay10 = crossSectionPoint5.getElevation();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CrossSectionPoint crossSectionPoint12 = crossSectionPoint5.setComments("hi!");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay13 = null;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CrossSectionPoint crossSectionPoint14 = crossSectionPoint12.setElevation(quantityWithDisplay13);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay15 = null;
        crossSectionPoint14.Depth = quantityWithDisplay15;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DatumConvertedQuantityWithDisplay datumConvertedQuantityWithDisplay17 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DatumConvertedQuantityWithDisplay();
        java.lang.String str18 = datumConvertedQuantityWithDisplay17.TargetDatum;
        crossSectionPoint14.Distance = datumConvertedQuantityWithDisplay17;
        java.lang.String str20 = crossSectionPoint14.Comments;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary21 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary23 = dischargeSummary21.setPublish((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse24 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant25 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse26 = locationDescriptionListServiceResponse24.setNextToken(instant25);
        dischargeSummary21.MeasurementTime = instant25;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary28 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        dischargeSummary28.Reviewer = "";
        java.time.Instant instant31 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        dischargeSummary28.MeasurementTime = instant31;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.BaseFlowType baseFlowType33 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.BaseFlowType.BaseFlow;
        dischargeSummary28.BaseFlow = baseFlowType33;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeUncertainty dischargeUncertainty35 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeUncertainty();
        dischargeSummary28.DischargeUncertainty = dischargeUncertainty35;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QualitativeUncertaintyType qualitativeUncertaintyType37 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QualitativeUncertaintyType.Fair;
        dischargeUncertainty35.QualitativeUncertainty = qualitativeUncertaintyType37;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.UncertaintyType uncertaintyType39 = dischargeUncertainty35.ActiveUncertaintyType;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary40 = dischargeSummary21.setDischargeUncertainty(dischargeUncertainty35);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CrossSectionPoint crossSectionPoint41 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CrossSectionPoint();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay42 = null;
        crossSectionPoint41.Distance = quantityWithDisplay42;
        crossSectionPoint41.PointOrder = 1;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay46 = crossSectionPoint41.getElevation();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CrossSectionPoint crossSectionPoint48 = crossSectionPoint41.setComments("hi!");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay49 = null;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CrossSectionPoint crossSectionPoint50 = crossSectionPoint48.setElevation(quantityWithDisplay49);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay51 = null;
        crossSectionPoint50.Depth = quantityWithDisplay51;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DatumConvertedQuantityWithDisplay datumConvertedQuantityWithDisplay53 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DatumConvertedQuantityWithDisplay();
        crossSectionPoint50.Depth = datumConvertedQuantityWithDisplay53;
        java.lang.String str55 = datumConvertedQuantityWithDisplay53.TargetDatum;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary56 = dischargeSummary21.setMeanGageHeight((com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay) datumConvertedQuantityWithDisplay53);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay57 = dischargeSummary21.MeanGageHeight;
        crossSectionPoint14.Distance = quantityWithDisplay57;
        levelSurveyMeasurement0.MeasuredElevation = quantityWithDisplay57;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(quantityWithDisplay2);
        org.junit.Assert.assertNull(quantityWithDisplay3);
        org.junit.Assert.assertNull(instant4);
        org.junit.Assert.assertNull(quantityWithDisplay10);
        org.junit.Assert.assertNotNull(crossSectionPoint12);
        org.junit.Assert.assertNotNull(crossSectionPoint14);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "hi!" + "'", str20, "hi!");
        org.junit.Assert.assertNotNull(dischargeSummary23);
        org.junit.Assert.assertNotNull(instant25);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse26);
        org.junit.Assert.assertNotNull(instant31);
        org.junit.Assert.assertTrue("'" + baseFlowType33 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.BaseFlowType.BaseFlow + "'", baseFlowType33.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.BaseFlowType.BaseFlow));
        org.junit.Assert.assertTrue("'" + qualitativeUncertaintyType37 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QualitativeUncertaintyType.Fair + "'", qualitativeUncertaintyType37.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QualitativeUncertaintyType.Fair));
        org.junit.Assert.assertNull(uncertaintyType39);
        org.junit.Assert.assertNotNull(dischargeSummary40);
        org.junit.Assert.assertNull(quantityWithDisplay46);
        org.junit.Assert.assertNotNull(crossSectionPoint48);
        org.junit.Assert.assertNotNull(crossSectionPoint50);
        org.junit.Assert.assertNull(str55);
        org.junit.Assert.assertNotNull(dischargeSummary56);
        org.junit.Assert.assertNotNull(quantityWithDisplay57);
    }

    @Test
    public void test42849() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest85.test42849");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ReportListServiceRequest reportListServiceRequest0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ReportListServiceRequest();
        reportListServiceRequest0.ReportTitle = "MinDuration";
        java.lang.String str3 = reportListServiceRequest0.getLocationUniqueId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_4 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray6 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList7 = new java.util.ArrayList<java.lang.String>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList7, strArray6);
        getObservationsV2_4.SpecimenIds = strList7;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags10 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray14 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList15 = new java.util.ArrayList<java.lang.String>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList15, strArray14);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags17 = putLocationTags10.setTagUniqueIds(strList15);
        getObservationsV2_4.QualityControlTypes = strList15;
        java.util.List<java.lang.String> strList19 = getObservationsV2_4.getAnalyticalGroupIds();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_21 = getObservationsV2_4.setSpecimenName("/AQUARIUS/Acquisition/v2://9999-12-31T23:59:59.999Z");
        java.util.List<java.lang.String> strList22 = getObservationsV2_21.getMedia();
        java.time.Instant instant23 = getObservationsV2_21.getStartModificationTime();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_24 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray26 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList27 = new java.util.ArrayList<java.lang.String>();
        boolean boolean28 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList27, strArray26);
        getObservationsV2_24.SpecimenIds = strList27;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_30 = getObservationsV2_21.setProjectIds((java.util.List<java.lang.String>) strList27);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ReportListServiceRequest reportListServiceRequest31 = reportListServiceRequest0.setTagKeys(strList27);
        reportListServiceRequest0.LocationUniqueId = "9999-12-31T23:59:59.999Z";
        java.util.ArrayList<java.lang.String> strList34 = reportListServiceRequest0.getTimeSeriesUniqueIds();
        reportListServiceRequest0.MaxResults = 10;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDescription timeSeriesDescription37 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDescription();
        timeSeriesDescription37.UtcOffset = 100.0d;
        timeSeriesDescription37.Parameter = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse42 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary43 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary45 = dischargeSummary43.setPublish((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse46 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant47 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse48 = locationDescriptionListServiceResponse46.setNextToken(instant47);
        dischargeSummary43.MeasurementTime = instant47;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse50 = locationDescriptionListServiceResponse42.setNextToken(instant47);
        java.time.Instant instant51 = locationDescriptionListServiceResponse42.getNextToken();
        java.time.Instant instant52 = locationDescriptionListServiceResponse42.getNextToken();
        timeSeriesDescription37.RawEndTime = instant52;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ReportListServiceRequest reportListServiceRequest54 = reportListServiceRequest0.setCreatedFrom(instant52);
        java.lang.String str55 = reportListServiceRequest0.getReportTitle();
        java.util.ArrayList<java.lang.String> strList56 = reportListServiceRequest0.getTimeSeriesUniqueIds();
        java.util.ArrayList<java.lang.String> strList57 = reportListServiceRequest0.getTagValues();
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(putLocationTags17);
        org.junit.Assert.assertNull(strList19);
        org.junit.Assert.assertNotNull(getObservationsV2_21);
        org.junit.Assert.assertNull(strList22);
        org.junit.Assert.assertNull(instant23);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(getObservationsV2_30);
        org.junit.Assert.assertNotNull(reportListServiceRequest31);
        org.junit.Assert.assertNull(strList34);
        org.junit.Assert.assertNotNull(dischargeSummary45);
        org.junit.Assert.assertNotNull(instant47);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse48);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse50);
        org.junit.Assert.assertNotNull(instant51);
        org.junit.Assert.assertNotNull(instant52);
        org.junit.Assert.assertNotNull(reportListServiceRequest54);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "MinDuration" + "'", str55, "MinDuration");
        org.junit.Assert.assertNull(strList56);
        org.junit.Assert.assertNull(strList57);
    }

    @Test
    public void test42850() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest85.test42850");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservedPropertyHistory getObservedPropertyHistory0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservedPropertyHistory();
        java.lang.Object obj1 = getObservedPropertyHistory0.getResponseType();
        java.lang.String str2 = getObservedPropertyHistory0.Id;
        java.lang.String str3 = getObservedPropertyHistory0.Id;
        java.lang.String str4 = getObservedPropertyHistory0.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservedPropertyHistory getObservedPropertyHistory6 = getObservedPropertyHistory0.setId("multipart/form-data; boundary=****9a2a71f5-e148-48e5-b44f-3c1e18f7138d****");
        java.lang.String str7 = getObservedPropertyHistory6.getId();
        org.junit.Assert.assertNotNull(obj1);
        org.junit.Assert.assertEquals(obj1.toString(), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$SearchResultAuditHistory");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj1), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$SearchResultAuditHistory");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj1), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$SearchResultAuditHistory");
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNotNull(getObservedPropertyHistory6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "multipart/form-data; boundary=****9a2a71f5-e148-48e5-b44f-3c1e18f7138d****" + "'", str7, "multipart/form-data; boundary=****9a2a71f5-e148-48e5-b44f-3c1e18f7138d****");
    }

    @Test
    public void test42851() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest85.test42851");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Vertical vertical0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Vertical();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Vertical vertical2 = vertical0.setPercentageOfTotalDischarge((java.lang.Double) 100.0d);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay3 = vertical2.getSegmentWidth();
        java.lang.Double double4 = vertical2.CosineOfUniqueFlow;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.OpenWaterData openWaterData5 = null;
        vertical2.OpenWaterData = openWaterData5;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay7 = vertical2.getMeanVelocity();
        org.junit.Assert.assertNotNull(vertical2);
        org.junit.Assert.assertNull(quantityWithDisplay3);
        org.junit.Assert.assertNull(double4);
        org.junit.Assert.assertNull(quantityWithDisplay7);
    }

    @Test
    public void test42852() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest85.test42852");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Report report0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Report();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Report report2 = report0.setUserName("/AQUARIUS/Acquisition/v2");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Report report4 = report0.setComments("MaxInstant");
        report4.Comments = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSSSSSZZZZZ";
        report4.LocationUniqueId = "ZZZZZ";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Report report10 = report4.setReportUniqueId("multipart/form-data; boundary=****d9f5d551-383a-4365-87fd-ae7094da6f3b****");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CorrectionOperation correctionOperation11 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CorrectionOperation();
        java.util.HashMap<java.lang.String, java.lang.Object> strMap12 = null;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CorrectionOperation correctionOperation13 = correctionOperation11.setParameters(strMap12);
        correctionOperation13.Comments = "multipart/form-data; boundary=****bbcf5f9e-6ccf-4b63-91ab-6e645caf02af****";
        report10.SourceTimeRange = correctionOperation13;
        java.lang.String str17 = correctionOperation13.Comments;
        correctionOperation13.StackPosition = 10;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CorrectionType correctionType20 = correctionOperation13.Type;
        correctionOperation13.Comments = "9999-12-31T23:59:59.999Z";
        org.junit.Assert.assertNotNull(report2);
        org.junit.Assert.assertNotNull(report4);
        org.junit.Assert.assertNotNull(report10);
        org.junit.Assert.assertNotNull(correctionOperation13);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "multipart/form-data; boundary=****bbcf5f9e-6ccf-4b63-91ab-6e645caf02af****" + "'", str17, "multipart/form-data; boundary=****bbcf5f9e-6ccf-4b63-91ab-6e645caf02af****");
        org.junit.Assert.assertNull(correctionType20);
    }

    @Test
    public void test42853() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest85.test42853");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationExportIIV2 getObservationExportIIV2_0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationExportIIV2();
        java.util.List<java.lang.String> strList1 = getObservationExportIIV2_0.getCollectionMethodIds();
        java.lang.String str2 = getObservationExportIIV2_0.getDepthUnitCustomId();
        java.util.List<java.lang.String> strList3 = getObservationExportIIV2_0.getAnalyticalGroupIds();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetSpecimens getSpecimens4 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetSpecimens();
        java.util.List<java.lang.String> strList5 = getSpecimens4.getActivityIds();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutUserV2 putUserV2_6 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutUserV2();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UserType userType7 = putUserV2_6.UserType;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetActivities getActivities8 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetActivities();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse9 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary10 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary12 = dischargeSummary10.setPublish((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse13 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant14 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse15 = locationDescriptionListServiceResponse13.setNextToken(instant14);
        dischargeSummary10.MeasurementTime = instant14;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse17 = locationDescriptionListServiceResponse9.setNextToken(instant14);
        java.time.Instant instant18 = locationDescriptionListServiceResponse9.getNextToken();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetActivities getActivities19 = getActivities8.setToStartTime(instant18);
        java.lang.String str20 = getActivities19.getSort();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_21 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.util.List<java.lang.String> strList22 = getObservationsV2_21.SamplingContextTagIds;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_23 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray25 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList26 = new java.util.ArrayList<java.lang.String>();
        boolean boolean27 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList26, strArray25);
        getObservationsV2_23.SpecimenIds = strList26;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags29 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray33 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList34 = new java.util.ArrayList<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList34, strArray33);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags36 = putLocationTags29.setTagUniqueIds(strList34);
        getObservationsV2_23.QualityControlTypes = strList34;
        getObservationsV2_21.ResultGrades = strList34;
        getActivities19.Media = strList34;
        putUserV2_6.AccessGroups = strList34;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetSpecimens getSpecimens41 = getSpecimens4.setAnalyticalGroupIds((java.util.List<java.lang.String>) strList34);
        getObservationExportIIV2_0.ObservedPropertyIds = strList34;
        java.util.List<java.lang.String> strList43 = getObservationExportIIV2_0.getMedia();
        java.util.List<java.lang.String> strList44 = getObservationExportIIV2_0.TaxonIds;
        org.junit.Assert.assertNull(strList1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(strList3);
        org.junit.Assert.assertNull(strList5);
        org.junit.Assert.assertNull(userType7);
        org.junit.Assert.assertNotNull(dischargeSummary12);
        org.junit.Assert.assertNotNull(instant14);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse15);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse17);
        org.junit.Assert.assertNotNull(instant18);
        org.junit.Assert.assertNotNull(getActivities19);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNull(strList22);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(putLocationTags36);
        org.junit.Assert.assertNotNull(getSpecimens41);
        org.junit.Assert.assertNull(strList43);
        org.junit.Assert.assertNull(strList44);
    }

    @Test
    public void test42854() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest85.test42854");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.DeleteUnitGroup deleteUnitGroup0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.DeleteUnitGroup();
        java.lang.String str1 = deleteUnitGroup0.UniqueId;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.DeleteUnitGroup deleteUnitGroup3 = deleteUnitGroup0.setUniqueId("/AQUARIUS/Acquisition/v2");
        deleteUnitGroup0.UniqueId = "hi!:///AQUARIUS/Provisioning/v1";
        java.lang.String str6 = deleteUnitGroup0.UniqueId;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(deleteUnitGroup3);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!:///AQUARIUS/Provisioning/v1" + "'", str6, "hi!:///AQUARIUS/Provisioning/v1");
    }

    @Test
    public void test42855() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest85.test42855");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObject importItemObject0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObject();
        java.util.List<java.lang.String> strList1 = importItemObject0.getWarningMessages();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportChangeItem[] importChangeItemArray2 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportChangeItem[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportChangeItem> importChangeItemList3 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportChangeItem>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportChangeItem>) importChangeItemList3, importChangeItemArray2);
        importItemObject0.ItemComparison = importChangeItemList3;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags6 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray10 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList11 = new java.util.ArrayList<java.lang.String>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList11, strArray10);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags13 = putLocationTags6.setTagUniqueIds(strList11);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObject importItemObject14 = importItemObject0.setExistingItem((java.lang.Object) putLocationTags6);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.OpenIdConnectUser openIdConnectUser15 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.OpenIdConnectUser();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.OpenIdConnectUser openIdConnectUser17 = openIdConnectUser15.setIdentifier("");
        java.lang.Boolean boolean18 = openIdConnectUser17.CanConfigureSystem;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObject importItemObject19 = importItemObject0.setErrors((java.lang.Object) openIdConnectUser17);
        java.lang.Object obj20 = importItemObject0.ExistingItem;
        importItemObject0.RowId = "yyyy'-'MM'-'dd'T'HH':'mm':'ss";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Parameter parameter23 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Parameter();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostBasicTimeSeries postBasicTimeSeries24 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostBasicTimeSeries();
        java.lang.String str25 = postBasicTimeSeries24.UtcOffset;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutParameter putParameter26 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutParameter();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ParameterBase parameterBase28 = putParameter26.setUnitGroupIdentifier("/AQUARIUS/Provisioning/v1");
        java.lang.String str29 = putParameter26.getRoundingSpec();
        java.lang.String str30 = putParameter26.RoundingSpec;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostCalculatedDerivedTimeSeries postCalculatedDerivedTimeSeries31 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostCalculatedDerivedTimeSeries();
        java.util.ArrayList<java.lang.String> strList32 = postCalculatedDerivedTimeSeries31.TimeSeriesUniqueIds;
        java.lang.String str33 = postCalculatedDerivedTimeSeries31.Label;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostCalculatedDerivedTimeSeries postCalculatedDerivedTimeSeries35 = postCalculatedDerivedTimeSeries31.setLabel("yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ");
        java.lang.String str36 = postCalculatedDerivedTimeSeries35.Label;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.InputPart inputPart37 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.InputPart();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.InterpolationType interpolationType38 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.InterpolationType.PrecedingConstant;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.InputPart inputPart39 = inputPart37.setHeaders((java.lang.Object) interpolationType38);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostCalculatedDerivedTimeSeries postCalculatedDerivedTimeSeries40 = postCalculatedDerivedTimeSeries35.setInterpolationType(interpolationType38);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ParameterBase parameterBase41 = putParameter26.setInterpolationType(interpolationType38);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ParameterBase parameterBase43 = parameterBase41.setMinValue((java.lang.Double) 100.0d);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.InterpolationType interpolationType44 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.InterpolationType.PrecedingTotals;
        parameterBase41.InterpolationType = interpolationType44;
        postBasicTimeSeries24.InterpolationType = interpolationType44;
        parameter23.InterpolationType = interpolationType44;
        parameter23.Identifier = "multipart/form-data; boundary=****d9f5d551-383a-4365-87fd-ae7094da6f3b****";
        java.lang.String str50 = parameter23.getRoundingSpec();
        java.lang.String str51 = parameter23.getRoundingSpec();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Parameter parameter53 = parameter23.setParameterId("zZZZZ");
        importItemObject0.ExistingItem = parameter23;
        org.junit.Assert.assertNull(strList1);
        org.junit.Assert.assertNotNull(importChangeItemArray2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(putLocationTags13);
        org.junit.Assert.assertNotNull(importItemObject14);
        org.junit.Assert.assertNotNull(openIdConnectUser17);
        org.junit.Assert.assertNull(boolean18);
        org.junit.Assert.assertNotNull(importItemObject19);
        org.junit.Assert.assertNotNull(obj20);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertNotNull(parameterBase28);
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertNull(strList32);
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertNotNull(postCalculatedDerivedTimeSeries35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ" + "'", str36, "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ");
        org.junit.Assert.assertTrue("'" + interpolationType38 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.InterpolationType.PrecedingConstant + "'", interpolationType38.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.InterpolationType.PrecedingConstant));
        org.junit.Assert.assertNotNull(inputPart39);
        org.junit.Assert.assertNotNull(postCalculatedDerivedTimeSeries40);
        org.junit.Assert.assertNotNull(parameterBase41);
        org.junit.Assert.assertNotNull(parameterBase43);
        org.junit.Assert.assertTrue("'" + interpolationType44 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.InterpolationType.PrecedingTotals + "'", interpolationType44.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.InterpolationType.PrecedingTotals));
        org.junit.Assert.assertNull(str50);
        org.junit.Assert.assertNull(str51);
        org.junit.Assert.assertNotNull(parameter53);
    }

    @Test
    public void test42856() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest85.test42856");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservedProperty postObservedProperty0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservedProperty();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLabAnalysisMethod postLabAnalysisMethod1 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLabAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation2 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation();
        observation2.CustomId = "hi!";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.CategoricalResult categoricalResult5 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation6 = observation2.setCategoricalResult(categoricalResult5);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple[] importHistoryEventSimpleArray7 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple> importHistoryEventSimpleList8 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple>) importHistoryEventSimpleList8, importHistoryEventSimpleArray7);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation10 = observation2.setImportHistoryEventSimples((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple>) importHistoryEventSimpleList8);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLabAnalysisMethod postLabAnalysisMethod11 = postLabAnalysisMethod1.setImportHistoryEventSimples((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple>) importHistoryEventSimpleList8);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservedProperty postObservedProperty12 = postObservedProperty0.setImportHistoryEventSimples((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple>) importHistoryEventSimpleList8);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservedProperty postObservedProperty14 = postObservedProperty0.setId("/AQUARIUS/Acquisition/v2://9999-12-31T23:59:59.999Z");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservedProperty postObservedProperty16 = postObservedProperty14.setCustomId("http");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSpecimen putSpecimen17 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSpecimen();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Activity activity18 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Activity();
        putSpecimen17.Activity = activity18;
        java.lang.String str20 = activity18.Id;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ActivityType activityType21 = activity18.getType();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Device device22 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Device();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Device device24 = device22.setType("/AQUARIUS/Acquisition/v2");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Device device26 = device24.setType("/AQUARIUS/Acquisition/v2://9999-12-31T23:59:59.999Z");
        java.lang.String str27 = device24.getType();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Activity activity28 = activity18.setDevice(device24);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Activity activity30 = activity28.setCustomId("ZZZZZ");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity plannedActivity31 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Activity activity32 = activity28.setPlannedActivity(plannedActivity31);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivity samplingPlanPlannedActivity33 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivity();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes34 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivity samplingPlanPlannedActivity35 = samplingPlanPlannedActivity33.setAuditAttributes(auditAttributes34);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ActivityType activityType36 = samplingPlanPlannedActivity35.ActivityType;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivity samplingPlanPlannedActivity38 = samplingPlanPlannedActivity35.setId("'.'SSSSSSS");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity postActivity39 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity();
        postActivity39.SourceActivityId = "2021.4.62.0";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity plannedActivity42 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity postActivity43 = postActivity39.setPlannedActivity(plannedActivity42);
        java.time.OffsetDateTime offsetDateTime44 = null;
        postActivity39.StartTime = offsetDateTime44;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ActivityType activityType46 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ActivityType.REPLICATE;
        postActivity39.Type = activityType46;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivity samplingPlanPlannedActivity48 = samplingPlanPlannedActivity35.setActivityType(activityType46);
        activity32.Type = activityType46;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricConfiguration metricConfiguration50 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricConfiguration();
        java.lang.String str51 = metricConfiguration50.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty observedProperty52 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty();
        observedProperty52.CasNumber = "MinDuration";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricConfiguration metricConfiguration55 = metricConfiguration50.setObservedProperty(observedProperty52);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultType resultType56 = observedProperty52.ResultType;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservedProperty postObservedProperty57 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservedProperty();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UnitGroup unitGroup58 = postObservedProperty57.UnitGroup;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity quantity59 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Unit unit60 = null;
        quantity59.Unit = unit60;
        postObservedProperty57.LowerLimit = quantity59;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity quantity63 = postObservedProperty57.LowerLimit;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Unit unit64 = quantity63.Unit;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty observedProperty65 = observedProperty52.setUpperLimit(quantity63);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLabAnalysisMethod postLabAnalysisMethod66 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLabAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation67 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation();
        observation67.CustomId = "hi!";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.CategoricalResult categoricalResult70 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation71 = observation67.setCategoricalResult(categoricalResult70);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple[] importHistoryEventSimpleArray72 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple> importHistoryEventSimpleList73 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple>();
        boolean boolean74 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple>) importHistoryEventSimpleList73, importHistoryEventSimpleArray72);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation75 = observation67.setImportHistoryEventSimples((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple>) importHistoryEventSimpleList73);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLabAnalysisMethod postLabAnalysisMethod76 = postLabAnalysisMethod66.setImportHistoryEventSimples((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple>) importHistoryEventSimpleList73);
        observedProperty65.ImportHistoryEventSimples = importHistoryEventSimpleList73;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty observedProperty79 = observedProperty65.setCustomId("/AQUARIUS/Acquisition/v2");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservedProperty postObservedProperty80 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservedProperty();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UnitGroup unitGroup81 = postObservedProperty80.UnitGroup;
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple> importHistoryEventSimpleList82 = postObservedProperty80.ImportHistoryEventSimples;
        java.lang.Object obj83 = postObservedProperty80.getResponseType();
        postObservedProperty80.Id = "POST";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservedProperty postObservedProperty86 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservedProperty();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UnitGroup unitGroup87 = postObservedProperty86.UnitGroup;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity quantity88 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Unit unit89 = null;
        quantity88.Unit = unit89;
        postObservedProperty86.LowerLimit = quantity88;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservedProperty postObservedProperty92 = postObservedProperty80.setUpperLimit(quantity88);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty observedProperty93 = observedProperty79.setLowerLimit(quantity88);
        activity32.Depth = quantity88;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservedProperty postObservedProperty95 = postObservedProperty16.setLowerLimit(quantity88);
        org.junit.Assert.assertNotNull(observation6);
        org.junit.Assert.assertNotNull(importHistoryEventSimpleArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(observation10);
        org.junit.Assert.assertNotNull(postLabAnalysisMethod11);
        org.junit.Assert.assertNotNull(postObservedProperty12);
        org.junit.Assert.assertNotNull(postObservedProperty14);
        org.junit.Assert.assertNotNull(postObservedProperty16);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNull(activityType21);
        org.junit.Assert.assertNotNull(device24);
        org.junit.Assert.assertNotNull(device26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "/AQUARIUS/Acquisition/v2://9999-12-31T23:59:59.999Z" + "'", str27, "/AQUARIUS/Acquisition/v2://9999-12-31T23:59:59.999Z");
        org.junit.Assert.assertNotNull(activity28);
        org.junit.Assert.assertNotNull(activity30);
        org.junit.Assert.assertNotNull(activity32);
        org.junit.Assert.assertNotNull(samplingPlanPlannedActivity35);
        org.junit.Assert.assertNull(activityType36);
        org.junit.Assert.assertNotNull(samplingPlanPlannedActivity38);
        org.junit.Assert.assertNotNull(postActivity43);
        org.junit.Assert.assertTrue("'" + activityType46 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ActivityType.REPLICATE + "'", activityType46.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ActivityType.REPLICATE));
        org.junit.Assert.assertNotNull(samplingPlanPlannedActivity48);
        org.junit.Assert.assertNull(str51);
        org.junit.Assert.assertNotNull(metricConfiguration55);
        org.junit.Assert.assertNull(resultType56);
        org.junit.Assert.assertNull(unitGroup58);
        org.junit.Assert.assertNotNull(quantity63);
        org.junit.Assert.assertNull(unit64);
        org.junit.Assert.assertNotNull(observedProperty65);
        org.junit.Assert.assertNotNull(observation71);
        org.junit.Assert.assertNotNull(importHistoryEventSimpleArray72);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(observation75);
        org.junit.Assert.assertNotNull(postLabAnalysisMethod76);
        org.junit.Assert.assertNotNull(observedProperty79);
        org.junit.Assert.assertNull(unitGroup81);
        org.junit.Assert.assertNull(importHistoryEventSimpleList82);
        org.junit.Assert.assertNotNull(obj83);
        org.junit.Assert.assertEquals(obj83.toString(), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$ObservedProperty");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj83), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$ObservedProperty");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj83), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$ObservedProperty");
        org.junit.Assert.assertNull(unitGroup87);
        org.junit.Assert.assertNotNull(postObservedProperty92);
        org.junit.Assert.assertNotNull(observedProperty93);
        org.junit.Assert.assertNotNull(postObservedProperty95);
    }

    @Test
    public void test42857() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest85.test42857");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ActivityTemplate activityTemplate0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ActivityTemplate();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes1 = null;
        activityTemplate0.AuditAttributes = auditAttributes1;
        java.lang.String str3 = activityTemplate0.getComment();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ActivityTemplateType activityTemplateType4 = activityTemplate0.getType();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MediumType mediumType5 = activityTemplate0.Medium;
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate> specimenTemplateList6 = activityTemplate0.SpecimenTemplates;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes7 = activityTemplate0.getAuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MediumType mediumType8 = activityTemplate0.Medium;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes9 = activityTemplate0.AuditAttributes;
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(activityTemplateType4);
        org.junit.Assert.assertNull(mediumType5);
        org.junit.Assert.assertNull(specimenTemplateList6);
        org.junit.Assert.assertNull(auditAttributes7);
        org.junit.Assert.assertNull(mediumType8);
        org.junit.Assert.assertNull(auditAttributes9);
    }

    @Test
    public void test42858() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest85.test42858");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservedProperty postObservedProperty0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservedProperty();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UnitGroup unitGroup1 = postObservedProperty0.UnitGroup;
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple> importHistoryEventSimpleList2 = postObservedProperty0.ImportHistoryEventSimples;
        java.lang.Object obj3 = postObservedProperty0.getResponseType();
        java.lang.String str4 = postObservedProperty0.Name;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity quantity5 = postObservedProperty0.getUpperLimit();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservedProperty postObservedProperty7 = postObservedProperty0.setId("9999-12-31T23:59:59.9999999Z://2021.4.62.0");
        org.junit.Assert.assertNull(unitGroup1);
        org.junit.Assert.assertNull(importHistoryEventSimpleList2);
        org.junit.Assert.assertNotNull(obj3);
        org.junit.Assert.assertEquals(obj3.toString(), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$ObservedProperty");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj3), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$ObservedProperty");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj3), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$ObservedProperty");
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(quantity5);
        org.junit.Assert.assertNotNull(postObservedProperty7);
    }

    @Test
    public void test42859() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest85.test42859");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CrossSectionSurveyActivity crossSectionSurveyActivity0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CrossSectionSurveyActivity();
        java.time.Instant instant1 = crossSectionSurveyActivity0.StartTime;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity pointVelocityDischargeActivity2 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity();
        java.lang.String str3 = pointVelocityDischargeActivity2.SoftwareVersion;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity pointVelocityDischargeActivity5 = pointVelocityDischargeActivity2.setIsValid((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity pointVelocityDischargeActivity7 = pointVelocityDischargeActivity2.setSoftwareVersion("");
        java.lang.String str8 = pointVelocityDischargeActivity7.getManufacturer();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.StartPointType startPointType9 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.StartPointType.Unspecified;
        pointVelocityDischargeActivity7.StartPoint = startPointType9;
        crossSectionSurveyActivity0.StartingPoint = startPointType9;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CrossSectionPoint crossSectionPoint12 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CrossSectionPoint();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay13 = null;
        crossSectionPoint12.Distance = quantityWithDisplay13;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay15 = null;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CrossSectionPoint crossSectionPoint16 = crossSectionPoint12.setElevation(quantityWithDisplay15);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CrossSectionPoint crossSectionPoint17 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CrossSectionPoint();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay18 = null;
        crossSectionPoint17.Distance = quantityWithDisplay18;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay20 = null;
        crossSectionPoint17.Distance = quantityWithDisplay20;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CrossSectionPoint crossSectionPoint22 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CrossSectionPoint();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay23 = null;
        crossSectionPoint22.Distance = quantityWithDisplay23;
        crossSectionPoint22.PointOrder = 1;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay27 = null;
        crossSectionPoint22.Depth = quantityWithDisplay27;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CrossSectionPoint crossSectionPoint29 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CrossSectionPoint();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay30 = null;
        crossSectionPoint29.Distance = quantityWithDisplay30;
        crossSectionPoint29.PointOrder = 1;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay34 = crossSectionPoint29.getElevation();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CrossSectionPoint crossSectionPoint36 = crossSectionPoint29.setComments("hi!");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CrossSectionPoint crossSectionPoint37 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CrossSectionPoint();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay38 = null;
        crossSectionPoint37.Distance = quantityWithDisplay38;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay40 = null;
        crossSectionPoint37.Distance = quantityWithDisplay40;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CrossSectionPoint crossSectionPoint42 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CrossSectionPoint();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay43 = null;
        crossSectionPoint42.Distance = quantityWithDisplay43;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CrossSectionPoint crossSectionPoint45 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CrossSectionPoint();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay46 = null;
        crossSectionPoint45.Distance = quantityWithDisplay46;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay48 = null;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CrossSectionPoint crossSectionPoint49 = crossSectionPoint45.setElevation(quantityWithDisplay48);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CrossSectionPoint crossSectionPoint50 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CrossSectionPoint();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CrossSectionPoint crossSectionPoint51 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CrossSectionPoint();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay52 = null;
        crossSectionPoint51.Distance = quantityWithDisplay52;
        crossSectionPoint51.PointOrder = 1;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay56 = crossSectionPoint51.getElevation();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CrossSectionPoint crossSectionPoint58 = crossSectionPoint51.setComments("hi!");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CrossSectionPoint crossSectionPoint60 = crossSectionPoint51.setComments("2021.4.62.0");
        java.lang.String str61 = crossSectionPoint60.getComments();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CrossSectionPoint[] crossSectionPointArray62 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CrossSectionPoint[] { crossSectionPoint12, crossSectionPoint17, crossSectionPoint22, crossSectionPoint29, crossSectionPoint37, crossSectionPoint42, crossSectionPoint45, crossSectionPoint50, crossSectionPoint60 };
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CrossSectionPoint> crossSectionPointList63 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CrossSectionPoint>();
        boolean boolean64 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CrossSectionPoint>) crossSectionPointList63, crossSectionPointArray62);
        crossSectionSurveyActivity0.CrossSectionPoints = crossSectionPointList63;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CrossSectionSurveyActivity crossSectionSurveyActivity67 = crossSectionSurveyActivity0.setRelativeLocation("multipart/form-data; boundary=****2917d69a-62fa-41ce-b981-4dbe2deab9f5****");
        java.lang.String str68 = crossSectionSurveyActivity0.getParty();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay69 = crossSectionSurveyActivity0.getStage();
        org.junit.Assert.assertNull(instant1);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(pointVelocityDischargeActivity5);
        org.junit.Assert.assertNotNull(pointVelocityDischargeActivity7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertTrue("'" + startPointType9 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.StartPointType.Unspecified + "'", startPointType9.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.StartPointType.Unspecified));
        org.junit.Assert.assertNotNull(crossSectionPoint16);
        org.junit.Assert.assertNull(quantityWithDisplay34);
        org.junit.Assert.assertNotNull(crossSectionPoint36);
        org.junit.Assert.assertNotNull(crossSectionPoint49);
        org.junit.Assert.assertNull(quantityWithDisplay56);
        org.junit.Assert.assertNotNull(crossSectionPoint58);
        org.junit.Assert.assertNotNull(crossSectionPoint60);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "2021.4.62.0" + "'", str61, "2021.4.62.0");
        org.junit.Assert.assertNotNull(crossSectionPointArray62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertNotNull(crossSectionSurveyActivity67);
        org.junit.Assert.assertNull(str68);
        org.junit.Assert.assertNull(quantityWithDisplay69);
    }

    @Test
    public void test42860() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest85.test42860");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationTagListServiceResponse locationTagListServiceResponse0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationTagListServiceResponse();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationTagListServiceResponse locationTagListServiceResponse2 = locationTagListServiceResponse0.setResponseVersion((java.lang.Integer) 4);
        java.time.Instant instant3 = locationTagListServiceResponse0.ResponseTime;
        java.lang.String str4 = locationTagListServiceResponse0.getSummary();
        java.lang.String str5 = locationTagListServiceResponse0.getSummary();
        org.junit.Assert.assertNotNull(locationTagListServiceResponse2);
        org.junit.Assert.assertNull(instant3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(str5);
    }

    @Test
    public void test42861() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest85.test42861");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.GetAuthTokenServiceRequest getAuthTokenServiceRequest0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.GetAuthTokenServiceRequest();
        java.lang.String str1 = getAuthTokenServiceRequest0.getUsername();
        getAuthTokenServiceRequest0.Locale = "9999-12-31T23:59:59.999Z";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.GetAuthTokenServiceRequest getAuthTokenServiceRequest5 = getAuthTokenServiceRequest0.setUsername("https");
        java.lang.String str6 = getAuthTokenServiceRequest5.Username;
        java.lang.String str7 = getAuthTokenServiceRequest5.EncryptedPassword;
        getAuthTokenServiceRequest5.EncryptedPassword = "MaxDuration";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.GetAuthTokenServiceRequest getAuthTokenServiceRequest11 = getAuthTokenServiceRequest5.setLocale("multipart/form-data; boundary=****ee0ec537-fde4-45ee-9c35-68c37cf65c1c****");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.GetAuthTokenServiceRequest getAuthTokenServiceRequest13 = getAuthTokenServiceRequest5.setEncryptedPassword("multipart/form-data; boundary=****221f1588-b890-43c2-a3c8-0d77cfe54330****");
        java.lang.String str14 = getAuthTokenServiceRequest13.getLocale();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(getAuthTokenServiceRequest5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "https" + "'", str6, "https");
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(getAuthTokenServiceRequest11);
        org.junit.Assert.assertNotNull(getAuthTokenServiceRequest13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "multipart/form-data; boundary=****ee0ec537-fde4-45ee-9c35-68c37cf65c1c****" + "'", str14, "multipart/form-data; boundary=****ee0ec537-fde4-45ee-9c35-68c37cf65c1c****");
    }

    @Test
    public void test42862() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest85.test42862");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.FieldDataPlugin fieldDataPlugin0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.FieldDataPlugin();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.FieldDataPlugin fieldDataPlugin2 = fieldDataPlugin0.setUniqueId("http");
        fieldDataPlugin2.UniqueId = "multipart/form-data; boundary=****2d077bad-cd27-4736-8ba0-2a8d8a85733d****";
        java.lang.String str5 = fieldDataPlugin2.UniqueId;
        java.lang.String str6 = fieldDataPlugin2.getUniqueId();
        org.junit.Assert.assertNotNull(fieldDataPlugin2);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "multipart/form-data; boundary=****2d077bad-cd27-4736-8ba0-2a8d8a85733d****" + "'", str5, "multipart/form-data; boundary=****2d077bad-cd27-4736-8ba0-2a8d8a85733d****");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "multipart/form-data; boundary=****2d077bad-cd27-4736-8ba0-2a8d8a85733d****" + "'", str6, "multipart/form-data; boundary=****2d077bad-cd27-4736-8ba0-2a8d8a85733d****");
    }

    @Test
    public void test42863() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest85.test42863");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedFieldResult plannedFieldResult1 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation2 = observation0.setPlannedFieldResult(plannedFieldResult1);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabInstruction labInstruction3 = null;
        observation2.LabInstruction = labInstruction3;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationStatistics observationStatistics5 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation6 = observation2.setStatistics(observationStatistics5);
        java.time.OffsetDateTime offsetDateTime7 = observation6.getResultTime();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultGrade resultGrade8 = observation6.ResultGrade;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.NullMeasureQualifier nullMeasureQualifier9 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation10 = observation6.setNullMeasureQualifier(nullMeasureQualifier9);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservedProperty postObservedProperty11 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservedProperty();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UnitGroup unitGroup12 = postObservedProperty11.UnitGroup;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity quantity13 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Unit unit14 = null;
        quantity13.Unit = unit14;
        postObservedProperty11.LowerLimit = quantity13;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity quantity17 = postObservedProperty11.LowerLimit;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Unit unit18 = quantity17.Unit;
        observation10.Depth = quantity17;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservedProperty postObservedProperty20 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservedProperty();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UnitGroup unitGroup21 = postObservedProperty20.UnitGroup;
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple> importHistoryEventSimpleList22 = postObservedProperty20.ImportHistoryEventSimples;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisType analysisType23 = postObservedProperty20.AnalysisType;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UnitGroup unitGroup24 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservedProperty postObservedProperty25 = postObservedProperty20.setUnitGroup(unitGroup24);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultType resultType26 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultType.TAXON;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservedProperty postObservedProperty27 = postObservedProperty20.setResultType(resultType26);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity quantity28 = postObservedProperty20.UpperLimit;
        java.lang.String str29 = postObservedProperty20.getCasNumber();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostTaxon postTaxon30 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostTaxon();
        postTaxon30.ItisUrl = "MinInstant";
        postTaxon30.ItisTsn = "MaxDuration";
        postTaxon30.Comment = "MaxInstant";
        java.lang.String str37 = postTaxon30.getItisTsn();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSamplingLocation putSamplingLocation38 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSamplingLocation();
        putSamplingLocation38.Id = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSSSSSZZZZZ";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservedProperty postObservedProperty41 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservedProperty();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLabAnalysisMethod postLabAnalysisMethod42 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLabAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation43 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation();
        observation43.CustomId = "hi!";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.CategoricalResult categoricalResult46 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation47 = observation43.setCategoricalResult(categoricalResult46);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple[] importHistoryEventSimpleArray48 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple> importHistoryEventSimpleList49 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple>();
        boolean boolean50 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple>) importHistoryEventSimpleList49, importHistoryEventSimpleArray48);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation51 = observation43.setImportHistoryEventSimples((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple>) importHistoryEventSimpleList49);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLabAnalysisMethod postLabAnalysisMethod52 = postLabAnalysisMethod42.setImportHistoryEventSimples((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple>) importHistoryEventSimpleList49);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservedProperty postObservedProperty53 = postObservedProperty41.setImportHistoryEventSimples((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple>) importHistoryEventSimpleList49);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSamplingLocation putSamplingLocation54 = putSamplingLocation38.setImportHistoryEventSimples((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple>) importHistoryEventSimpleList49);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostTaxon postTaxon55 = postTaxon30.setImportHistoryEventSimples((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple>) importHistoryEventSimpleList49);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservedProperty postObservedProperty56 = postObservedProperty20.setImportHistoryEventSimples((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple>) importHistoryEventSimpleList49);
        observation10.ImportHistoryEventSimples = importHistoryEventSimpleList49;
        org.junit.Assert.assertNotNull(observation2);
        org.junit.Assert.assertNotNull(observation6);
        org.junit.Assert.assertNull(offsetDateTime7);
        org.junit.Assert.assertNull(resultGrade8);
        org.junit.Assert.assertNotNull(observation10);
        org.junit.Assert.assertNull(unitGroup12);
        org.junit.Assert.assertNotNull(quantity17);
        org.junit.Assert.assertNull(unit18);
        org.junit.Assert.assertNull(unitGroup21);
        org.junit.Assert.assertNull(importHistoryEventSimpleList22);
        org.junit.Assert.assertNull(analysisType23);
        org.junit.Assert.assertNotNull(postObservedProperty25);
        org.junit.Assert.assertTrue("'" + resultType26 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultType.TAXON + "'", resultType26.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultType.TAXON));
        org.junit.Assert.assertNotNull(postObservedProperty27);
        org.junit.Assert.assertNull(quantity28);
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "MaxDuration" + "'", str37, "MaxDuration");
        org.junit.Assert.assertNotNull(observation47);
        org.junit.Assert.assertNotNull(importHistoryEventSimpleArray48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(observation51);
        org.junit.Assert.assertNotNull(postLabAnalysisMethod52);
        org.junit.Assert.assertNotNull(postObservedProperty53);
        org.junit.Assert.assertNotNull(putSamplingLocation54);
        org.junit.Assert.assertNotNull(postTaxon55);
        org.junit.Assert.assertNotNull(postObservedProperty56);
    }

    @Test
    public void test42864() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest85.test42864");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservationV2 postObservationV2_0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservationV2();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabInstruction labInstruction1 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservationV2 postObservationV2_2 = postObservationV2_0.setLabInstruction(labInstruction1);
        java.lang.String str3 = postObservationV2_2.MediumSubdivision;
        java.lang.String str4 = postObservationV2_2.getComment();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails5 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservationV2 postObservationV2_6 = postObservationV2_2.setLabResultDetails(labResultDetails5);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation7 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedFieldResult plannedFieldResult8 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation9 = observation7.setPlannedFieldResult(plannedFieldResult8);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabInstruction labInstruction10 = null;
        observation9.LabInstruction = labInstruction10;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.CollectionMethod collectionMethod12 = observation9.CollectionMethod;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.NullMeasureQualifier nullMeasureQualifier13 = null;
        observation9.NullMeasureQualifier = nullMeasureQualifier13;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Specimen specimen15 = observation9.getSpecimen();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Device device16 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Device();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation17 = observation9.setDevice(device16);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Device device19 = device16.setDescription("MinInstant");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservationV2 postObservationV2_20 = postObservationV2_6.setDevice(device19);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.NullMeasureQualifier nullMeasureQualifier21 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.NullMeasureQualifier();
        java.lang.String str22 = nullMeasureQualifier21.getCustomId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes23 = nullMeasureQualifier21.getAuditAttributes();
        nullMeasureQualifier21.Id = "/AQUARIUS/Acquisition/v2://9999-12-31T23:59:59.999Z";
        postObservationV2_6.NullMeasureQualifier = nullMeasureQualifier21;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity quantity27 = postObservationV2_6.getDepth();
        org.junit.Assert.assertNotNull(postObservationV2_2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNotNull(postObservationV2_6);
        org.junit.Assert.assertNotNull(observation9);
        org.junit.Assert.assertNull(collectionMethod12);
        org.junit.Assert.assertNull(specimen15);
        org.junit.Assert.assertNotNull(observation17);
        org.junit.Assert.assertNotNull(device19);
        org.junit.Assert.assertNotNull(postObservationV2_20);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertNull(auditAttributes23);
        org.junit.Assert.assertNull(quantity27);
    }

    @Test
    public void test42865() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest85.test42865");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesThresholdPeriod timeSeriesThresholdPeriod0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesThresholdPeriod();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesThresholdPeriod timeSeriesThresholdPeriod2 = timeSeriesThresholdPeriod0.setReferenceValue((java.lang.Double) 0.0d);
        java.time.Instant instant3 = timeSeriesThresholdPeriod0.getEndTime();
        java.lang.Boolean boolean4 = timeSeriesThresholdPeriod0.isSuppressData();
        org.junit.Assert.assertNotNull(timeSeriesThresholdPeriod2);
        org.junit.Assert.assertNull(instant3);
        org.junit.Assert.assertNull(boolean4);
    }

    @Test
    public void test42866() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest85.test42866");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CrossSectionSurveyActivity crossSectionSurveyActivity0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CrossSectionSurveyActivity();
        java.time.Instant instant1 = crossSectionSurveyActivity0.getEndTime();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.StatisticalDateTimeOffset statisticalDateTimeOffset2 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.StatisticalDateTimeOffset();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostRecurringReport postRecurringReport3 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostRecurringReport();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary4 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        dischargeSummary4.Reviewer = "";
        java.time.Instant instant7 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        dischargeSummary4.MeasurementTime = instant7;
        postRecurringReport3.NextGenerationDate = instant7;
        java.time.Instant instant10 = postRecurringReport3.getNextGenerationDate();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.StatisticalDateTimeOffset statisticalDateTimeOffset11 = statisticalDateTimeOffset2.setDateTimeOffset(instant10);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DownchainProcessorListByRatingModelServiceRequest downchainProcessorListByRatingModelServiceRequest12 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DownchainProcessorListByRatingModelServiceRequest();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeTransactionListServiceRequest metadataChangeTransactionListServiceRequest13 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeTransactionListServiceRequest();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostRecurringReport postRecurringReport14 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostRecurringReport();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary15 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        dischargeSummary15.Reviewer = "";
        java.time.Instant instant18 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        dischargeSummary15.MeasurementTime = instant18;
        postRecurringReport14.NextGenerationDate = instant18;
        java.time.Instant instant21 = postRecurringReport14.getNextGenerationDate();
        java.lang.String str22 = com.aquaticinformatics.aquarius.sdk.samples.serializers.InstantSerializer.format(instant21);
        metadataChangeTransactionListServiceRequest13.QueryFrom = instant21;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DownchainProcessorListByRatingModelServiceRequest downchainProcessorListByRatingModelServiceRequest24 = downchainProcessorListByRatingModelServiceRequest12.setQueryTo(instant21);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DownchainProcessorListByRatingModelServiceRequest downchainProcessorListByRatingModelServiceRequest26 = downchainProcessorListByRatingModelServiceRequest12.setRatingModelIdentifier("hi!");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Qualifier qualifier27 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Qualifier();
        java.time.Instant instant28 = qualifier27.DateApplied;
        java.lang.String str29 = qualifier27.User;
        java.lang.String str30 = qualifier27.getIdentifier();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest31 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest();
        java.lang.Object obj32 = timeAlignedDataServiceRequest31.getResponseType();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse33 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant34 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse35 = locationDescriptionListServiceResponse33.setNextToken(instant34);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest36 = timeAlignedDataServiceRequest31.setQueryFrom(instant34);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Qualifier qualifier37 = qualifier27.setDateApplied(instant34);
        java.time.Instant instant38 = qualifier37.getDateApplied();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DownchainProcessorListByRatingModelServiceRequest downchainProcessorListByRatingModelServiceRequest39 = downchainProcessorListByRatingModelServiceRequest12.setQueryFrom(instant38);
        statisticalDateTimeOffset11.DateTimeOffset = instant38;
        java.time.Instant instant41 = statisticalDateTimeOffset11.DateTimeOffset;
        crossSectionSurveyActivity0.StartTime = instant41;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CrossSectionSurveyActivity crossSectionSurveyActivity44 = crossSectionSurveyActivity0.setRelativeLocation("multipart/form-data; boundary=****f2ce0d54-dac7-4cd0-b74f-1024089261f9****");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay45 = crossSectionSurveyActivity44.getStage();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CrossSectionSurveyActivity crossSectionSurveyActivity47 = crossSectionSurveyActivity44.setComments("/api");
        java.lang.String str48 = crossSectionSurveyActivity47.getComments();
        org.junit.Assert.assertNull(instant1);
        org.junit.Assert.assertNotNull(instant7);
        org.junit.Assert.assertNotNull(instant10);
        org.junit.Assert.assertNotNull(statisticalDateTimeOffset11);
        org.junit.Assert.assertNotNull(instant18);
        org.junit.Assert.assertNotNull(instant21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "9999-12-31T23:59:59.999Z" + "'", str22, "9999-12-31T23:59:59.999Z");
        org.junit.Assert.assertNotNull(downchainProcessorListByRatingModelServiceRequest24);
        org.junit.Assert.assertNotNull(downchainProcessorListByRatingModelServiceRequest26);
        org.junit.Assert.assertNull(instant28);
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertNotNull(obj32);
        org.junit.Assert.assertEquals(obj32.toString(), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj32), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj32), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertNotNull(instant34);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse35);
        org.junit.Assert.assertNotNull(timeAlignedDataServiceRequest36);
        org.junit.Assert.assertNotNull(qualifier37);
        org.junit.Assert.assertNotNull(instant38);
        org.junit.Assert.assertNotNull(downchainProcessorListByRatingModelServiceRequest39);
        org.junit.Assert.assertNotNull(instant41);
        org.junit.Assert.assertNotNull(crossSectionSurveyActivity44);
        org.junit.Assert.assertNull(quantityWithDisplay45);
        org.junit.Assert.assertNotNull(crossSectionSurveyActivity47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "/api" + "'", str48, "/api");
    }

    @Test
    public void test42867() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest85.test42867");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LevelSurveyActivity levelSurveyActivity0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LevelSurveyActivity();
        java.lang.String str1 = levelSurveyActivity0.getParty();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LevelSurveyActivity levelSurveyActivity3 = levelSurveyActivity0.setOriginReferencePointUniqueId("/AQUARIUS");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LevelSurveyActivity levelSurveyActivity5 = levelSurveyActivity3.setOriginReferencePointUniqueId("yyyy'-'MM'-'dd'T'HH':'mm':'ss");
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(levelSurveyActivity3);
        org.junit.Assert.assertNotNull(levelSurveyActivity5);
    }

    @Test
    public void test42868() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest85.test42868");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetProject getProject0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetProject();
        java.lang.String str1 = getProject0.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetProject getProject3 = getProject0.setId("0001-01-01T00:00:00.0000000Z");
        java.lang.String str4 = getProject0.Id;
        java.lang.String str5 = getProject0.getId();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(getProject3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "0001-01-01T00:00:00.0000000Z" + "'", str4, "0001-01-01T00:00:00.0000000Z");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "0001-01-01T00:00:00.0000000Z" + "'", str5, "0001-01-01T00:00:00.0000000Z");
    }

    @Test
    public void test42869() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest85.test42869");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity postActivity0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity();
        postActivity0.LoggerFileName = "hi!";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity plannedActivity3 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity postActivity4 = postActivity0.setPlannedActivity(plannedActivity3);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity plannedActivity5 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity postActivity6 = postActivity4.setPlannedActivity(plannedActivity5);
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttribute> extendedAttributeList7 = postActivity4.getExtendedAttributes();
        org.junit.Assert.assertNotNull(postActivity4);
        org.junit.Assert.assertNotNull(postActivity6);
        org.junit.Assert.assertNull(extendedAttributeList7);
    }

    @Test
    public void test42870() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest85.test42870");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Sensor sensor0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Sensor();
        java.time.Instant instant1 = sensor0.getLastModifiedUtc();
        java.time.Instant instant2 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Sensor sensor3 = sensor0.setLastModifiedUtc(instant2);
        java.time.Instant instant4 = sensor0.LastModifiedUtc;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Sensor sensor6 = sensor0.setUniqueId("MinInstant");
        java.lang.String str7 = sensor0.SubLocationIdentifier;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Sensor sensor9 = sensor0.setSerialNumber("yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ");
        org.junit.Assert.assertNull(instant1);
        org.junit.Assert.assertNotNull(instant2);
        org.junit.Assert.assertNotNull(sensor3);
        org.junit.Assert.assertNotNull(instant4);
        org.junit.Assert.assertNotNull(sensor6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(sensor9);
    }

    @Test
    public void test42871() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest85.test42871");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetUnitGroupWithUnit getUnitGroupWithUnit0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetUnitGroupWithUnit();
        java.lang.String str1 = getUnitGroupWithUnit0.getId();
        java.lang.Object obj2 = getUnitGroupWithUnit0.getResponseType();
        getUnitGroupWithUnit0.Id = "";
        getUnitGroupWithUnit0.Id = "multipart/form-data; boundary=****2e497db8-6b91-47d6-99bc-df65af225bf8****";
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(obj2);
        org.junit.Assert.assertEquals(obj2.toString(), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$UnitGroupWithUnits");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj2), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$UnitGroupWithUnits");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj2), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$UnitGroupWithUnits");
    }

    @Test
    public void test42872() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest85.test42872");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutActivity putActivity0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutActivity();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity plannedActivity1 = putActivity0.PlannedActivity;
        java.time.OffsetDateTime offsetDateTime2 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutActivity putActivity3 = putActivity0.setEndTime(offsetDateTime2);
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricResult> metricResultList4 = putActivity0.MetricResults;
        org.junit.Assert.assertNull(plannedActivity1);
        org.junit.Assert.assertNotNull(putActivity3);
        org.junit.Assert.assertNull(metricResultList4);
    }

    @Test
    public void test42873() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest85.test42873");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutReportPlugin putReportPlugin0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutReportPlugin();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutReportPlugin putReportPlugin2 = putReportPlugin0.setIsEnabled((java.lang.Boolean) false);
        java.lang.String str3 = putReportPlugin2.UniqueId;
        putReportPlugin2.UniqueId = "0001-01-01T00:00:00.000Z";
        java.lang.Object obj6 = putReportPlugin2.getResponseType();
        java.lang.Boolean boolean7 = putReportPlugin2.getIsEnabled();
        org.junit.Assert.assertNotNull(putReportPlugin2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(obj6);
        org.junit.Assert.assertEquals(obj6.toString(), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning$ReportPlugin");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj6), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning$ReportPlugin");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj6), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning$ReportPlugin");
        org.junit.Assert.assertEquals("'" + boolean7 + "' != '" + false + "'", boolean7, false);
    }

    @Test
    public void test42874() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest85.test42874");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostGenerateFieldVisits postGenerateFieldVisits0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostGenerateFieldVisits();
        postGenerateFieldVisits0.Id = "hi!";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostGenerateFieldVisits postGenerateFieldVisits4 = postGenerateFieldVisits0.setId("POST");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostGenerateFieldVisits postGenerateFieldVisits6 = postGenerateFieldVisits0.setId("http");
        java.lang.Object obj7 = postGenerateFieldVisits0.getResponseType();
        java.lang.String str8 = postGenerateFieldVisits0.getId();
        java.lang.Object obj9 = postGenerateFieldVisits0.getResponseType();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostGenerateFieldVisits postGenerateFieldVisits11 = postGenerateFieldVisits0.setId("0001-01-01T00:00:00.000Z");
        postGenerateFieldVisits0.Id = "http://MaxDurationhttp/json/reply/String";
        org.junit.Assert.assertNotNull(postGenerateFieldVisits4);
        org.junit.Assert.assertNotNull(postGenerateFieldVisits6);
        org.junit.Assert.assertNotNull(obj7);
        org.junit.Assert.assertEquals(obj7.toString(), "java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$FieldVisit>");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj7), "java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$FieldVisit>");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj7), "java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$FieldVisit>");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "http" + "'", str8, "http");
        org.junit.Assert.assertNotNull(obj9);
        org.junit.Assert.assertEquals(obj9.toString(), "java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$FieldVisit>");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj9), "java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$FieldVisit>");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj9), "java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$FieldVisit>");
        org.junit.Assert.assertNotNull(postGenerateFieldVisits11);
    }

    @Test
    public void test42875() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest85.test42875");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CorrectionOperation correctionOperation0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CorrectionOperation();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CorrectionType correctionType1 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CorrectionType.AdjustableTrim;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CorrectionOperation correctionOperation2 = correctionOperation0.setType(correctionType1);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CorrectionType correctionType3 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CorrectionType.ReplaceWithGap;
        correctionOperation2.Type = correctionType3;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CorrectionType correctionType5 = correctionOperation2.getType();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CorrectionOperation correctionOperation7 = correctionOperation2.setStackPosition((java.lang.Integer) 1);
        org.junit.Assert.assertTrue("'" + correctionType1 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CorrectionType.AdjustableTrim + "'", correctionType1.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CorrectionType.AdjustableTrim));
        org.junit.Assert.assertNotNull(correctionOperation2);
        org.junit.Assert.assertTrue("'" + correctionType3 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CorrectionType.ReplaceWithGap + "'", correctionType3.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CorrectionType.ReplaceWithGap));
        org.junit.Assert.assertTrue("'" + correctionType5 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CorrectionType.ReplaceWithGap + "'", correctionType5.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CorrectionType.ReplaceWithGap));
        org.junit.Assert.assertNotNull(correctionOperation7);
    }

    @Test
    public void test42876() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest85.test42876");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ChartData chartData0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ChartData();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UnitGroupWithUnits unitGroupWithUnits1 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UnitGroupWithUnits();
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Unit> unitList2 = unitGroupWithUnits1.Units;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ChartData chartData3 = chartData0.setDepthUnitGroupWithUnits(unitGroupWithUnits1);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes4 = unitGroupWithUnits1.AuditAttributes;
        org.junit.Assert.assertNull(unitList2);
        org.junit.Assert.assertNotNull(chartData3);
        org.junit.Assert.assertNull(auditAttributes4);
    }

    @Test
    public void test42877() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest85.test42877");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedPoint timeAlignedPoint0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedPoint();
        timeAlignedPoint0.Method9 = "multipart/form-data; boundary=****7eff1774-b6b0-471a-961c-156c64359366****";
        timeAlignedPoint0.DisplayValue9 = "";
        java.lang.String str5 = timeAlignedPoint0.getApprovalName4();
        java.lang.Long long6 = timeAlignedPoint0.getApprovalLevel7();
        timeAlignedPoint0.ApprovalName10 = "multipart/form-data; boundary=****1eab67e1-84c8-4b82-aa06-d6c7526551f8****";
        java.lang.Long long9 = timeAlignedPoint0.ApprovalLevel8;
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(long6);
        org.junit.Assert.assertNull(long9);
    }

    @Test
    public void test42878() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest85.test42878");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Sensor sensor0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Sensor();
        java.lang.String str1 = sensor0.Comments;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Sensor sensor3 = sensor0.setModel("/AQUARIUS/Provisioning/v1");
        java.lang.String str4 = sensor0.getSubLocationIdentifier();
        java.lang.String str5 = sensor0.getLocationUniqueId();
        sensor0.SubLocationIdentifier = "multipart/form-data; boundary=****5f5c0da4-c582-4ddf-ae9f-fc64a997490d****";
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(sensor3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(str5);
    }

    @Test
    public void test42879() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest85.test42879");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutSensor putSensor0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutSensor();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutSensor putSensor2 = putSensor0.setUniqueId("MinDuration");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.SensorBase sensorBase4 = putSensor2.setManufacturer("");
        putSensor2.MethodCode = "multipart/form-data; boundary=****2d077bad-cd27-4736-8ba0-2a8d8a85733d****";
        java.lang.Object obj7 = putSensor2.getResponseType();
        java.lang.String str8 = putSensor2.getUniqueId();
        org.junit.Assert.assertNotNull(putSensor2);
        org.junit.Assert.assertNotNull(sensorBase4);
        org.junit.Assert.assertNotNull(obj7);
        org.junit.Assert.assertEquals(obj7.toString(), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning$Sensor");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj7), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning$Sensor");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj7), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning$Sensor");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "MinDuration" + "'", str8, "MinDuration");
    }

    @Test
    public void test42880() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest85.test42880");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DeleteObservationsV2 deleteObservationsV2_0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DeleteObservationsV2();
        java.util.List<java.lang.String> strList1 = deleteObservationsV2_0.SamplingLocationIds;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportObservations getExportObservations2 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportObservations();
        java.util.List<java.lang.String> strList3 = getExportObservations2.getLabReportIds();
        java.lang.Double double4 = getExportObservations2.getNumericResultValue();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetChartDataV2 getChartDataV2_5 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetChartDataV2();
        java.lang.String str6 = getChartDataV2_5.getActivityCustomId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetChartDataV2 getChartDataV2_8 = getChartDataV2_5.setFilterId("");
        java.util.List<java.lang.String> strList9 = getChartDataV2_5.ResultGrades;
        getChartDataV2_5.MinNumericResultValue = 100.0d;
        java.lang.Double double12 = getChartDataV2_5.MaxNumericResultValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostTag postTag13 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostTag();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_14 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray17 = new java.lang.String[] { "", "" };
        java.util.ArrayList<java.lang.String> strList18 = new java.util.ArrayList<java.lang.String>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList18, strArray17);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_20 = getObservationsV2_14.setDataClassifications((java.util.List<java.lang.String>) strList18);
        postTag13.PickListValues = strList18;
        getChartDataV2_5.SamplingContextTagIds = strList18;
        getChartDataV2_5.Limit = (-1);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitDataByLocationServiceRequest fieldVisitDataByLocationServiceRequest25 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitDataByLocationServiceRequest();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitDataByLocationServiceRequest fieldVisitDataByLocationServiceRequest27 = fieldVisitDataByLocationServiceRequest25.setIncludeNodeDetails((java.lang.Boolean) true);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags28 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray32 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList33 = new java.util.ArrayList<java.lang.String>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList33, strArray32);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags35 = putLocationTags28.setTagUniqueIds(strList33);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitDataByLocationServiceRequest fieldVisitDataByLocationServiceRequest36 = fieldVisitDataByLocationServiceRequest27.setParameters(strList33);
        java.lang.Object obj37 = fieldVisitDataByLocationServiceRequest27.getResponseType();
        java.util.ArrayList<java.lang.String> strList38 = fieldVisitDataByLocationServiceRequest27.getParameters();
        getChartDataV2_5.Media = strList38;
        getExportObservations2.CollectionMethodIds = strList38;
        java.lang.Double double41 = getExportObservations2.NumericResultValue;
        java.util.List<java.lang.String> strList42 = getExportObservations2.CollectionMethodIds;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_43 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray46 = new java.lang.String[] { "", "" };
        java.util.ArrayList<java.lang.String> strList47 = new java.util.ArrayList<java.lang.String>();
        boolean boolean48 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList47, strArray46);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_49 = getObservationsV2_43.setDataClassifications((java.util.List<java.lang.String>) strList47);
        getObservationsV2_49.DepthUnitCustomId = "hi!";
        java.lang.String str52 = getObservationsV2_49.CustomId;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_53 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray55 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList56 = new java.util.ArrayList<java.lang.String>();
        boolean boolean57 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList56, strArray55);
        getObservationsV2_53.SpecimenIds = strList56;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags59 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray63 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList64 = new java.util.ArrayList<java.lang.String>();
        boolean boolean65 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList64, strArray63);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags66 = putLocationTags59.setTagUniqueIds(strList64);
        getObservationsV2_53.ActivityIds = strList64;
        getObservationsV2_49.ResultStatuses = strList64;
        getExportObservations2.ObservedPropertyIds = strList64;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DeleteObservationsV2 deleteObservationsV2_70 = deleteObservationsV2_0.setSearch((java.util.List<java.lang.String>) strList64);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SampleFractionType sampleFractionType71 = deleteObservationsV2_0.SampleFraction;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DeleteObservationsV2 deleteObservationsV2_73 = deleteObservationsV2_0.setNumericResultValue((java.lang.Double) (-1.0d));
        java.lang.Integer int74 = deleteObservationsV2_0.getLimit();
        org.junit.Assert.assertNull(strList1);
        org.junit.Assert.assertNull(strList3);
        org.junit.Assert.assertNull(double4);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNotNull(getChartDataV2_8);
        org.junit.Assert.assertNull(strList9);
        org.junit.Assert.assertNull(double12);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(getObservationsV2_20);
        org.junit.Assert.assertNotNull(fieldVisitDataByLocationServiceRequest27);
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(putLocationTags35);
        org.junit.Assert.assertNotNull(fieldVisitDataByLocationServiceRequest36);
        org.junit.Assert.assertNotNull(obj37);
        org.junit.Assert.assertEquals(obj37.toString(), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$FieldVisitDataByLocationServiceResponse");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj37), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$FieldVisitDataByLocationServiceResponse");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj37), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$FieldVisitDataByLocationServiceResponse");
        org.junit.Assert.assertNotNull(strList38);
        org.junit.Assert.assertNull(double41);
        org.junit.Assert.assertNotNull(strList42);
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(getObservationsV2_49);
        org.junit.Assert.assertNull(str52);
        org.junit.Assert.assertNotNull(strArray55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertNotNull(strArray63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertNotNull(putLocationTags66);
        org.junit.Assert.assertNotNull(deleteObservationsV2_70);
        org.junit.Assert.assertNull(sampleFractionType71);
        org.junit.Assert.assertNotNull(deleteObservationsV2_73);
        org.junit.Assert.assertNull(int74);
    }

    @Test
    public void test42881() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest85.test42881");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostStandard postStandard0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostStandard();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostStandard postStandard2 = postStandard0.setCustomId("/AQUARIUS/Provisioning/v1");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostStandard postStandard4 = postStandard2.setId("/AQUARIUS/Acquisition/v2://9999-12-31T23:59:59.999Z");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationStandard[] observationStandardArray5 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationStandard[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationStandard> observationStandardList6 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationStandard>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationStandard>) observationStandardList6, observationStandardArray5);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostStandard postStandard8 = postStandard4.setObservationStandards((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationStandard>) observationStandardList6);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostStandard postStandard10 = postStandard4.setActive((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationStandard[] observationStandardArray11 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationStandard[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationStandard> observationStandardList12 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationStandard>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationStandard>) observationStandardList12, observationStandardArray11);
        postStandard4.ObservationStandards = observationStandardList12;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostStandard postStandard16 = postStandard4.setId("multipart/form-data; boundary=****ebf59e0e-2d1f-43bc-996f-3c628a80f696****");
        com.aquaticinformatics.aquarius.sdk.samples.Interval interval17 = new com.aquaticinformatics.aquarius.sdk.samples.Interval();
        java.time.Instant instant18 = interval17.Start;
        java.time.Instant instant19 = interval17.End;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostStandard postStandard20 = postStandard16.setApplicabilityRange(interval17);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostStandard postStandard22 = postStandard20.setDescription("http");
        com.aquaticinformatics.aquarius.sdk.samples.Interval interval23 = postStandard22.ApplicabilityRange;
        org.junit.Assert.assertNotNull(postStandard2);
        org.junit.Assert.assertNotNull(postStandard4);
        org.junit.Assert.assertNotNull(observationStandardArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(postStandard8);
        org.junit.Assert.assertNotNull(postStandard10);
        org.junit.Assert.assertNotNull(observationStandardArray11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(postStandard16);
        org.junit.Assert.assertNull(instant18);
        org.junit.Assert.assertNull(instant19);
        org.junit.Assert.assertNotNull(postStandard20);
        org.junit.Assert.assertNotNull(postStandard22);
        org.junit.Assert.assertNotNull(interval23);
    }

    @Test
    public void test42882() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest85.test42882");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescription locationDescription0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescription();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescription locationDescription2 = locationDescription0.setIdentifier("");
        locationDescription2.Identifier = "MaxInstant";
        java.lang.Boolean boolean5 = locationDescription2.isPublish();
        locationDescription2.IsExternalLocation = false;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescription locationDescription9 = locationDescription2.setIsExternalLocation((java.lang.Boolean) true);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescription locationDescription11 = locationDescription2.setPrimaryFolder("multipart/form-data; boundary=****c82cca4e-7755-4a00-8acf-9ac791c56995****");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportObservations getExportObservations12 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportObservations();
        java.util.List<java.lang.String> strList13 = getExportObservations12.getLabReportIds();
        java.lang.String str14 = getExportObservations12.DepthUnitCustomId;
        java.util.List<java.lang.String> strList15 = getExportObservations12.getSearch();
        java.util.List<java.lang.String> strList16 = getExportObservations12.LabResultLaboratoryIds;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportSpecimens getExportSpecimens17 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportSpecimens();
        java.util.List<java.lang.String> strList18 = getExportSpecimens17.getProjectIds();
        java.util.List<java.lang.String> strList19 = getExportSpecimens17.FieldVisitId;
        java.util.List<java.lang.String> strList20 = getExportSpecimens17.ActivityTypes;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetSpecimens getSpecimens21 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetSpecimens();
        java.util.List<java.lang.String> strList22 = getSpecimens21.getActivityIds();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetSpecimens getSpecimens24 = getSpecimens21.setSort("MinDuration");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetChartDataV2 getChartDataV2_25 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetChartDataV2();
        java.lang.String str26 = getChartDataV2_25.getActivityCustomId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetChartDataV2 getChartDataV2_28 = getChartDataV2_25.setFilterId("");
        java.util.List<java.lang.String> strList29 = getChartDataV2_25.ResultGrades;
        getChartDataV2_25.MinNumericResultValue = 100.0d;
        java.lang.Double double32 = getChartDataV2_25.MaxNumericResultValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostTag postTag33 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostTag();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_34 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray37 = new java.lang.String[] { "", "" };
        java.util.ArrayList<java.lang.String> strList38 = new java.util.ArrayList<java.lang.String>();
        boolean boolean39 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList38, strArray37);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_40 = getObservationsV2_34.setDataClassifications((java.util.List<java.lang.String>) strList38);
        postTag33.PickListValues = strList38;
        getChartDataV2_25.SamplingContextTagIds = strList38;
        getSpecimens21.ActivityTypes = strList38;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportSpecimens getExportSpecimens44 = getExportSpecimens17.setActivityIds((java.util.List<java.lang.String>) strList38);
        getExportObservations12.ObservedPropertyIds = strList38;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescription locationDescription46 = locationDescription11.setSecondaryFolders(strList38);
        org.junit.Assert.assertNotNull(locationDescription2);
        org.junit.Assert.assertNull(boolean5);
        org.junit.Assert.assertNotNull(locationDescription9);
        org.junit.Assert.assertNotNull(locationDescription11);
        org.junit.Assert.assertNull(strList13);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNull(strList15);
        org.junit.Assert.assertNull(strList16);
        org.junit.Assert.assertNull(strList18);
        org.junit.Assert.assertNull(strList19);
        org.junit.Assert.assertNull(strList20);
        org.junit.Assert.assertNull(strList22);
        org.junit.Assert.assertNotNull(getSpecimens24);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertNotNull(getChartDataV2_28);
        org.junit.Assert.assertNull(strList29);
        org.junit.Assert.assertNull(double32);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(getObservationsV2_40);
        org.junit.Assert.assertNotNull(getExportSpecimens44);
        org.junit.Assert.assertNotNull(locationDescription46);
    }

    @Test
    public void test42883() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest85.test42883");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostBaseStandardReferenceDatum postBaseStandardReferenceDatum0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostBaseStandardReferenceDatum();
        postBaseStandardReferenceDatum0.Uncertainty = 1.0d;
        java.lang.Object obj3 = postBaseStandardReferenceDatum0.getResponseType();
        org.junit.Assert.assertNotNull(obj3);
        org.junit.Assert.assertEquals(obj3.toString(), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning$StandardReferenceDatum");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj3), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning$StandardReferenceDatum");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj3), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning$StandardReferenceDatum");
    }

    @Test
    public void test42884() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest85.test42884");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSpreadsheetTemplate putSpreadsheetTemplate0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSpreadsheetTemplate();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes1 = putSpreadsheetTemplate0.getAuditAttributes();
        putSpreadsheetTemplate0.CustomId = "MinDuration";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpreadsheetTemplateType spreadsheetTemplateType4 = putSpreadsheetTemplate0.getType();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFieldVisit postFieldVisit5 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFieldVisit();
        postFieldVisit5.Participants = "hi!:///AQUARIUS/Provisioning/v1";
        java.lang.String str8 = postFieldVisit5.Participants;
        java.lang.String str9 = postFieldVisit5.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabReport labReport10 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabReport();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Laboratory laboratory11 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Laboratory();
        laboratory11.Id = "MaxInstant";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Laboratory laboratory15 = laboratory11.setName("hi!:///AQUARIUS/Provisioning/v1");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabReport labReport16 = labReport10.setLaboratory(laboratory15);
        java.lang.String str17 = labReport16.getQcSummary();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabReport labReport19 = labReport16.setCustomId("http");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Laboratory laboratory20 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabReport labReport21 = labReport16.setLaboratory(laboratory20);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabReport labReport23 = labReport16.setCaseNarrative("-PT87591240H");
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment> domainObjectAttachmentList24 = labReport16.getAttachments();
        java.time.OffsetDateTime offsetDateTime25 = null;
        labReport16.DateReceived = offsetDateTime25;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutFieldVisit putFieldVisit27 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutFieldVisit();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity[] plannedActivityArray28 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity> plannedActivityList29 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity>) plannedActivityList29, plannedActivityArray28);
        putFieldVisit27.PlannedActivities = plannedActivityList29;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment32 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment();
        java.lang.String str33 = domainObjectAttachment32.getId();
        java.lang.String str34 = domainObjectAttachment32.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Attachment attachment35 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment36 = domainObjectAttachment32.setAttachment(attachment35);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment37 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment();
        java.lang.String str38 = domainObjectAttachment37.getId();
        java.lang.String str39 = domainObjectAttachment37.getId();
        domainObjectAttachment37.Id = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment43 = domainObjectAttachment37.setId("hi!");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment44 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment();
        java.lang.String str45 = domainObjectAttachment44.getId();
        java.lang.String str46 = domainObjectAttachment44.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Attachment attachment47 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment48 = domainObjectAttachment44.setAttachment(attachment47);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment49 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment();
        java.lang.String str50 = domainObjectAttachment49.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment51 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment();
        java.lang.String str52 = domainObjectAttachment51.getId();
        java.lang.String str53 = domainObjectAttachment51.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Attachment attachment54 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment55 = domainObjectAttachment51.setAttachment(attachment54);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment56 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment();
        java.lang.String str57 = domainObjectAttachment56.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment[] domainObjectAttachmentArray58 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment[] { domainObjectAttachment32, domainObjectAttachment37, domainObjectAttachment44, domainObjectAttachment49, domainObjectAttachment51, domainObjectAttachment56 };
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment> domainObjectAttachmentList59 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment>();
        boolean boolean60 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment>) domainObjectAttachmentList59, domainObjectAttachmentArray58);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutFieldVisit putFieldVisit61 = putFieldVisit27.setAttachments((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment>) domainObjectAttachmentList59);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlan samplingPlan62 = putFieldVisit27.getSamplingPlan();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment63 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment64 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment();
        java.lang.String str65 = domainObjectAttachment64.getId();
        java.lang.String str66 = domainObjectAttachment64.getId();
        domainObjectAttachment64.Id = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment70 = domainObjectAttachment64.setId("hi!");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment[] domainObjectAttachmentArray71 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment[] { domainObjectAttachment63, domainObjectAttachment64 };
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment> domainObjectAttachmentList72 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment>();
        boolean boolean73 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment>) domainObjectAttachmentList72, domainObjectAttachmentArray71);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutFieldVisit putFieldVisit74 = putFieldVisit27.setAttachments((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment>) domainObjectAttachmentList72);
        labReport16.Attachments = domainObjectAttachmentList72;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFieldVisit postFieldVisit76 = postFieldVisit5.setAttachments((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment>) domainObjectAttachmentList72);
        putSpreadsheetTemplate0.Attachments = domainObjectAttachmentList72;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSpreadsheetTemplate putSpreadsheetTemplate78 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSpreadsheetTemplate();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSpreadsheetTemplate putSpreadsheetTemplate80 = putSpreadsheetTemplate78.setId("POST");
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment> domainObjectAttachmentList81 = putSpreadsheetTemplate80.getAttachments();
        putSpreadsheetTemplate80.Description = "multipart/form-data; boundary=****d9f5d551-383a-4365-87fd-ae7094da6f3b****";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSpreadsheetTemplate putSpreadsheetTemplate84 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSpreadsheetTemplate();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes85 = putSpreadsheetTemplate84.AuditAttributes;
        putSpreadsheetTemplate84.CustomId = "2021.4.62.0";
        java.lang.String str88 = putSpreadsheetTemplate84.Id;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpreadsheetTemplateType spreadsheetTemplateType89 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpreadsheetTemplateType.OBSERVATION_EXPORT;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSpreadsheetTemplate putSpreadsheetTemplate90 = putSpreadsheetTemplate84.setType(spreadsheetTemplateType89);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSpreadsheetTemplate putSpreadsheetTemplate91 = putSpreadsheetTemplate80.setType(spreadsheetTemplateType89);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSpreadsheetTemplate putSpreadsheetTemplate92 = putSpreadsheetTemplate0.setType(spreadsheetTemplateType89);
        org.junit.Assert.assertNull(auditAttributes1);
        org.junit.Assert.assertNull(spreadsheetTemplateType4);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!:///AQUARIUS/Provisioning/v1" + "'", str8, "hi!:///AQUARIUS/Provisioning/v1");
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(laboratory15);
        org.junit.Assert.assertNotNull(labReport16);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertNotNull(labReport19);
        org.junit.Assert.assertNotNull(labReport21);
        org.junit.Assert.assertNotNull(labReport23);
        org.junit.Assert.assertNull(domainObjectAttachmentList24);
        org.junit.Assert.assertNotNull(plannedActivityArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertNotNull(domainObjectAttachment36);
        org.junit.Assert.assertNull(str38);
        org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertNotNull(domainObjectAttachment43);
        org.junit.Assert.assertNull(str45);
        org.junit.Assert.assertNull(str46);
        org.junit.Assert.assertNotNull(domainObjectAttachment48);
        org.junit.Assert.assertNull(str50);
        org.junit.Assert.assertNull(str52);
        org.junit.Assert.assertNull(str53);
        org.junit.Assert.assertNotNull(domainObjectAttachment55);
        org.junit.Assert.assertNull(str57);
        org.junit.Assert.assertNotNull(domainObjectAttachmentArray58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(putFieldVisit61);
        org.junit.Assert.assertNull(samplingPlan62);
        org.junit.Assert.assertNull(str65);
        org.junit.Assert.assertNull(str66);
        org.junit.Assert.assertNotNull(domainObjectAttachment70);
        org.junit.Assert.assertNotNull(domainObjectAttachmentArray71);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertNotNull(putFieldVisit74);
        org.junit.Assert.assertNotNull(postFieldVisit76);
        org.junit.Assert.assertNotNull(putSpreadsheetTemplate80);
        org.junit.Assert.assertNull(domainObjectAttachmentList81);
        org.junit.Assert.assertNull(auditAttributes85);
        org.junit.Assert.assertNull(str88);
        org.junit.Assert.assertTrue("'" + spreadsheetTemplateType89 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpreadsheetTemplateType.OBSERVATION_EXPORT + "'", spreadsheetTemplateType89.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpreadsheetTemplateType.OBSERVATION_EXPORT));
        org.junit.Assert.assertNotNull(putSpreadsheetTemplate90);
        org.junit.Assert.assertNotNull(putSpreadsheetTemplate91);
        org.junit.Assert.assertNotNull(putSpreadsheetTemplate92);
    }

    @Test
    public void test42885() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest85.test42885");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservationV2 postObservationV2_0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservationV2();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabInstruction labInstruction1 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservationV2 postObservationV2_2 = postObservationV2_0.setLabInstruction(labInstruction1);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails3 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails5 = labResultDetails3.setAnalysisComment("/AQUARIUS/Acquisition/v2");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails7 = labResultDetails3.setPreparationMethod("https");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservationV2 postObservationV2_8 = postObservationV2_2.setLabResultDetails(labResultDetails7);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFieldVisit postFieldVisit9 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFieldVisit();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlan samplingPlan10 = postFieldVisit9.SamplingPlan;
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedFieldResult> plannedFieldResultList11 = postFieldVisit9.getPlannedFieldResults();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlanningStatusType planningStatusType12 = postFieldVisit9.PlanningStatus;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocation samplingLocation13 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocation();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricConfiguration metricConfiguration14 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricConfiguration();
        java.lang.String str15 = metricConfiguration14.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty observedProperty16 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty();
        observedProperty16.CasNumber = "MinDuration";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricConfiguration metricConfiguration19 = metricConfiguration14.setObservedProperty(observedProperty16);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultType resultType20 = observedProperty16.ResultType;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservedProperty postObservedProperty21 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservedProperty();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UnitGroup unitGroup22 = postObservedProperty21.UnitGroup;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity quantity23 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Unit unit24 = null;
        quantity23.Unit = unit24;
        postObservedProperty21.LowerLimit = quantity23;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity quantity27 = postObservedProperty21.LowerLimit;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Unit unit28 = quantity27.Unit;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty observedProperty29 = observedProperty16.setUpperLimit(quantity27);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocation samplingLocation30 = samplingLocation13.setElevation(quantity27);
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment> domainObjectAttachmentList31 = samplingLocation30.getAttachments();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutFieldVisit putFieldVisit32 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutFieldVisit();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity[] plannedActivityArray33 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity> plannedActivityList34 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity>) plannedActivityList34, plannedActivityArray33);
        putFieldVisit32.PlannedActivities = plannedActivityList34;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment37 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment();
        java.lang.String str38 = domainObjectAttachment37.getId();
        java.lang.String str39 = domainObjectAttachment37.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Attachment attachment40 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment41 = domainObjectAttachment37.setAttachment(attachment40);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment42 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment();
        java.lang.String str43 = domainObjectAttachment42.getId();
        java.lang.String str44 = domainObjectAttachment42.getId();
        domainObjectAttachment42.Id = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment48 = domainObjectAttachment42.setId("hi!");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment49 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment();
        java.lang.String str50 = domainObjectAttachment49.getId();
        java.lang.String str51 = domainObjectAttachment49.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Attachment attachment52 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment53 = domainObjectAttachment49.setAttachment(attachment52);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment54 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment();
        java.lang.String str55 = domainObjectAttachment54.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment56 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment();
        java.lang.String str57 = domainObjectAttachment56.getId();
        java.lang.String str58 = domainObjectAttachment56.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Attachment attachment59 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment60 = domainObjectAttachment56.setAttachment(attachment59);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment61 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment();
        java.lang.String str62 = domainObjectAttachment61.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment[] domainObjectAttachmentArray63 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment[] { domainObjectAttachment37, domainObjectAttachment42, domainObjectAttachment49, domainObjectAttachment54, domainObjectAttachment56, domainObjectAttachment61 };
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment> domainObjectAttachmentList64 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment>();
        boolean boolean65 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment>) domainObjectAttachmentList64, domainObjectAttachmentArray63);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutFieldVisit putFieldVisit66 = putFieldVisit32.setAttachments((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment>) domainObjectAttachmentList64);
        samplingLocation30.Attachments = domainObjectAttachmentList64;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocation samplingLocation69 = samplingLocation30.setId("2021.4.62.0");
        java.lang.String str70 = samplingLocation69.Name;
        samplingLocation69.HorizontalDatum = "2021.8.9990";
        postFieldVisit9.SamplingLocation = samplingLocation69;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservationV2 postObservationV2_74 = postObservationV2_2.setSamplingLocation(samplingLocation69);
        java.lang.String str75 = samplingLocation69.getHorizontalDatum();
        org.junit.Assert.assertNotNull(postObservationV2_2);
        org.junit.Assert.assertNotNull(labResultDetails5);
        org.junit.Assert.assertNotNull(labResultDetails7);
        org.junit.Assert.assertNotNull(postObservationV2_8);
        org.junit.Assert.assertNull(samplingPlan10);
        org.junit.Assert.assertNull(plannedFieldResultList11);
        org.junit.Assert.assertNull(planningStatusType12);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNotNull(metricConfiguration19);
        org.junit.Assert.assertNull(resultType20);
        org.junit.Assert.assertNull(unitGroup22);
        org.junit.Assert.assertNotNull(quantity27);
        org.junit.Assert.assertNull(unit28);
        org.junit.Assert.assertNotNull(observedProperty29);
        org.junit.Assert.assertNotNull(samplingLocation30);
        org.junit.Assert.assertNull(domainObjectAttachmentList31);
        org.junit.Assert.assertNotNull(plannedActivityArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNull(str38);
        org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertNotNull(domainObjectAttachment41);
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertNull(str44);
        org.junit.Assert.assertNotNull(domainObjectAttachment48);
        org.junit.Assert.assertNull(str50);
        org.junit.Assert.assertNull(str51);
        org.junit.Assert.assertNotNull(domainObjectAttachment53);
        org.junit.Assert.assertNull(str55);
        org.junit.Assert.assertNull(str57);
        org.junit.Assert.assertNull(str58);
        org.junit.Assert.assertNotNull(domainObjectAttachment60);
        org.junit.Assert.assertNull(str62);
        org.junit.Assert.assertNotNull(domainObjectAttachmentArray63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertNotNull(putFieldVisit66);
        org.junit.Assert.assertNotNull(samplingLocation69);
        org.junit.Assert.assertNull(str70);
        org.junit.Assert.assertNotNull(postObservationV2_74);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "2021.8.9990" + "'", str75, "2021.8.9990");
    }

    @Test
    public void test42886() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest85.test42886");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Approval approval0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Approval();
        java.lang.String str1 = approval0.User;
        approval0.LevelDescription = "MinDuration";
        java.lang.String str4 = approval0.Comment;
        java.time.Instant instant5 = approval0.getDateAppliedUtc();
        java.lang.String str6 = approval0.getUser();
        java.time.Instant instant7 = approval0.getDateAppliedUtc();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CrossSectionSurveyActivity crossSectionSurveyActivity8 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CrossSectionSurveyActivity();
        java.time.Instant instant9 = crossSectionSurveyActivity8.getStartTime();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Qualifier qualifier10 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Qualifier();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutBulkEditResultGradesV2 putBulkEditResultGradesV2_11 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutBulkEditResultGradesV2();
        java.lang.Double double12 = putBulkEditResultGradesV2_11.DepthValue;
        java.util.List<java.lang.String> strList13 = putBulkEditResultGradesV2_11.Media;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary14 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        dischargeSummary14.Reviewer = "";
        java.time.Instant instant17 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        dischargeSummary14.MeasurementTime = instant17;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutBulkEditResultGradesV2 putBulkEditResultGradesV2_19 = putBulkEditResultGradesV2_11.setStartModificationTime(instant17);
        qualifier10.DateApplied = instant17;
        crossSectionSurveyActivity8.StartTime = instant17;
        java.lang.String str22 = crossSectionSurveyActivity8.getRelativeLocation();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.StartPointType startPointType23 = crossSectionSurveyActivity8.getStartingPoint();
        java.lang.String str24 = crossSectionSurveyActivity8.getComments();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary25 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay26 = dischargeSummary25.getMeanGageHeight();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay27 = dischargeSummary25.Discharge;
        java.lang.Integer int28 = dischargeSummary25.getGradeCode();
        java.lang.String str29 = dischargeSummary25.getQualityAssuranceComments();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Attachment attachment30 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Attachment();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse31 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary32 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary34 = dischargeSummary32.setPublish((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse35 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant36 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse37 = locationDescriptionListServiceResponse35.setNextToken(instant36);
        dischargeSummary32.MeasurementTime = instant36;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse39 = locationDescriptionListServiceResponse31.setNextToken(instant36);
        java.time.Instant instant40 = locationDescriptionListServiceResponse31.getNextToken();
        attachment30.DateLastAccessed = instant40;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary42 = dischargeSummary25.setMeasurementStartTime(instant40);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CrossSectionSurveyActivity crossSectionSurveyActivity43 = crossSectionSurveyActivity8.setEndTime(instant40);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Approval approval44 = approval0.setDateAppliedUtc(instant40);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Approval approval46 = approval44.setLevelDescription("multipart/form-data; boundary=****1165d1f3-8b30-4f2e-8d0b-ffebab458859****");
        java.lang.String str47 = approval46.getComment();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(instant5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(instant7);
        org.junit.Assert.assertNull(instant9);
        org.junit.Assert.assertNull(double12);
        org.junit.Assert.assertNull(strList13);
        org.junit.Assert.assertNotNull(instant17);
        org.junit.Assert.assertNotNull(putBulkEditResultGradesV2_19);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertNull(startPointType23);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNull(quantityWithDisplay26);
        org.junit.Assert.assertNull(quantityWithDisplay27);
        org.junit.Assert.assertNull(int28);
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertNotNull(dischargeSummary34);
        org.junit.Assert.assertNotNull(instant36);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse37);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse39);
        org.junit.Assert.assertNotNull(instant40);
        org.junit.Assert.assertNotNull(dischargeSummary42);
        org.junit.Assert.assertNotNull(crossSectionSurveyActivity43);
        org.junit.Assert.assertNotNull(approval44);
        org.junit.Assert.assertNotNull(approval46);
        org.junit.Assert.assertNull(str47);
    }

    @Test
    public void test42887() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest85.test42887");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutFieldVisit putFieldVisit0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutFieldVisit();
        putFieldVisit0.Notes = "MinDuration";
        java.time.OffsetDateTime offsetDateTime3 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutFieldVisit putFieldVisit4 = putFieldVisit0.setStartTime(offsetDateTime3);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocation samplingLocation5 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocation();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricConfiguration metricConfiguration6 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricConfiguration();
        java.lang.String str7 = metricConfiguration6.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty observedProperty8 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty();
        observedProperty8.CasNumber = "MinDuration";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricConfiguration metricConfiguration11 = metricConfiguration6.setObservedProperty(observedProperty8);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultType resultType12 = observedProperty8.ResultType;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservedProperty postObservedProperty13 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservedProperty();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UnitGroup unitGroup14 = postObservedProperty13.UnitGroup;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity quantity15 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Unit unit16 = null;
        quantity15.Unit = unit16;
        postObservedProperty13.LowerLimit = quantity15;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity quantity19 = postObservedProperty13.LowerLimit;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Unit unit20 = quantity19.Unit;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty observedProperty21 = observedProperty8.setUpperLimit(quantity19);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocation samplingLocation22 = samplingLocation5.setElevation(quantity19);
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment> domainObjectAttachmentList23 = samplingLocation22.getAttachments();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutFieldVisit putFieldVisit24 = putFieldVisit4.setSamplingLocation(samplingLocation22);
        putFieldVisit24.Id = "multipart/form-data; boundary=****44f0772e-c3ca-4316-8e2a-61ec8540d661****";
        org.junit.Assert.assertNotNull(putFieldVisit4);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(metricConfiguration11);
        org.junit.Assert.assertNull(resultType12);
        org.junit.Assert.assertNull(unitGroup14);
        org.junit.Assert.assertNotNull(quantity19);
        org.junit.Assert.assertNull(unit20);
        org.junit.Assert.assertNotNull(observedProperty21);
        org.junit.Assert.assertNotNull(samplingLocation22);
        org.junit.Assert.assertNull(domainObjectAttachmentList23);
        org.junit.Assert.assertNotNull(putFieldVisit24);
    }

    @Test
    public void test42888() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest85.test42888");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.util.List<java.lang.String> strList1 = getObservationsV2_0.SamplingContextTagIds;
        java.time.Instant instant2 = getObservationsV2_0.getEndModificationTime();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetActivities getActivities3 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetActivities();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse4 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary5 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary7 = dischargeSummary5.setPublish((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse8 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant9 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse10 = locationDescriptionListServiceResponse8.setNextToken(instant9);
        dischargeSummary5.MeasurementTime = instant9;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse12 = locationDescriptionListServiceResponse4.setNextToken(instant9);
        java.time.Instant instant13 = locationDescriptionListServiceResponse4.getNextToken();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetActivities getActivities14 = getActivities3.setToStartTime(instant13);
        java.lang.String str15 = getActivities14.getSort();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_16 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.util.List<java.lang.String> strList17 = getObservationsV2_16.SamplingContextTagIds;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_18 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray20 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList21 = new java.util.ArrayList<java.lang.String>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList21, strArray20);
        getObservationsV2_18.SpecimenIds = strList21;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags24 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray28 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList29 = new java.util.ArrayList<java.lang.String>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList29, strArray28);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags31 = putLocationTags24.setTagUniqueIds(strList29);
        getObservationsV2_18.QualityControlTypes = strList29;
        getObservationsV2_16.ResultGrades = strList29;
        getActivities14.Media = strList29;
        getObservationsV2_0.AnalysisMethodSimpleIds = strList29;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_37 = getObservationsV2_0.setDetectionCondition("MinInstant");
        java.util.List<java.lang.String> strList38 = getObservationsV2_37.getLabReportIds();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_40 = getObservationsV2_37.setImportHistoryEventId("multipart/form-data; boundary=****f642a130-eb6d-4fb6-a1a4-7c7216ab119b****");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_42 = getObservationsV2_37.setActivityCustomId("multipart/form-data; boundary=****bbcf5f9e-6ccf-4b63-91ab-6e645caf02af****");
        java.util.List<java.lang.String> strList43 = getObservationsV2_37.SamplingLocationIds;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.PostVisitFileResponse postVisitFileResponse44 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.PostVisitFileResponse();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.FieldDataPlugin fieldDataPlugin45 = null;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.PostVisitFileResponse postVisitFileResponse46 = postVisitFileResponse44.setHandledByPlugin(fieldDataPlugin45);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.FieldDataPlugin fieldDataPlugin47 = postVisitFileResponse44.getHandledByPlugin();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitDataByLocationServiceRequest fieldVisitDataByLocationServiceRequest48 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitDataByLocationServiceRequest();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitDataByLocationServiceRequest fieldVisitDataByLocationServiceRequest50 = fieldVisitDataByLocationServiceRequest48.setIncludeNodeDetails((java.lang.Boolean) true);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags51 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray55 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList56 = new java.util.ArrayList<java.lang.String>();
        boolean boolean57 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList56, strArray55);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags58 = putLocationTags51.setTagUniqueIds(strList56);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitDataByLocationServiceRequest fieldVisitDataByLocationServiceRequest59 = fieldVisitDataByLocationServiceRequest50.setParameters(strList56);
        java.util.ArrayList<java.lang.String> strList60 = fieldVisitDataByLocationServiceRequest59.getParameters();
        postVisitFileResponse44.VisitUris = strList60;
        getObservationsV2_37.Search = strList60;
        org.junit.Assert.assertNull(strList1);
        org.junit.Assert.assertNull(instant2);
        org.junit.Assert.assertNotNull(dischargeSummary7);
        org.junit.Assert.assertNotNull(instant9);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse10);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse12);
        org.junit.Assert.assertNotNull(instant13);
        org.junit.Assert.assertNotNull(getActivities14);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNull(strList17);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(putLocationTags31);
        org.junit.Assert.assertNotNull(getObservationsV2_37);
        org.junit.Assert.assertNull(strList38);
        org.junit.Assert.assertNotNull(getObservationsV2_40);
        org.junit.Assert.assertNotNull(getObservationsV2_42);
        org.junit.Assert.assertNull(strList43);
        org.junit.Assert.assertNotNull(postVisitFileResponse46);
        org.junit.Assert.assertNull(fieldDataPlugin47);
        org.junit.Assert.assertNotNull(fieldVisitDataByLocationServiceRequest50);
        org.junit.Assert.assertNotNull(strArray55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertNotNull(putLocationTags58);
        org.junit.Assert.assertNotNull(fieldVisitDataByLocationServiceRequest59);
        org.junit.Assert.assertNotNull(strList60);
    }

    @Test
    public void test42889() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest85.test42889");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity postActivity0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity();
        postActivity0.LoggerFileName = "hi!";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity postActivity4 = postActivity0.setCustomId("");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes5 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity postActivity6 = postActivity4.setAuditAttributes(auditAttributes5);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity postActivity8 = postActivity6.setCustomId("multipart/form-data; boundary=****bbcf5f9e-6ccf-4b63-91ab-6e645caf02af****");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation9 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedFieldResult plannedFieldResult10 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation11 = observation9.setPlannedFieldResult(plannedFieldResult10);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabInstruction labInstruction12 = null;
        observation11.LabInstruction = labInstruction12;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationStatistics observationStatistics14 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation15 = observation11.setStatistics(observationStatistics14);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Taxon taxon16 = null;
        observation11.RelatedTaxon = taxon16;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultStatus resultStatus18 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation19 = observation11.setResultStatus(resultStatus18);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes20 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation21 = observation11.setAuditAttributes(auditAttributes20);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Device device22 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Device();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Device device24 = device22.setType("/AQUARIUS/Acquisition/v2");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Device device26 = device24.setType("/AQUARIUS/Acquisition/v2://9999-12-31T23:59:59.999Z");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Device device28 = device24.setType("http");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation29 = observation11.setDevice(device24);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Medium medium30 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Medium();
        java.lang.String str31 = medium30.getCustomId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation32 = observation29.setMedium(medium30);
        medium30.CustomId = "0001-01-01T00:00:00.000Z";
        postActivity8.Medium = medium30;
        java.lang.String str36 = postActivity8.getSourceActivityId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.TaxonomicResult taxonomicResult37 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.TaxonomicResult();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Taxon taxon38 = taxonomicResult37.Taxon;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes39 = taxonomicResult37.AuditAttributes;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutTag putTag40 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutTag();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlan samplingPlan41 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlan();
        samplingPlan41.SamplingLocationGroupSelectionTypeRandomCount = 0;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationGroupSelectionType samplingLocationGroupSelectionType44 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationGroupSelectionType.ALL;
        samplingPlan41.SamplingLocationGroupSelectionType = samplingLocationGroupSelectionType44;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationGroup samplingLocationGroup46 = samplingPlan41.getSamplingLocationGroup();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes47 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlan samplingPlan48 = samplingPlan41.setAuditAttributes(auditAttributes47);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutTag putTag49 = putTag40.setAuditAttributes(auditAttributes47);
        taxonomicResult37.AuditAttributes = auditAttributes47;
        java.time.OffsetDateTime offsetDateTime51 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes52 = auditAttributes47.setModificationTime(offsetDateTime51);
        postActivity8.AuditAttributes = auditAttributes47;
        org.junit.Assert.assertNotNull(postActivity4);
        org.junit.Assert.assertNotNull(postActivity6);
        org.junit.Assert.assertNotNull(postActivity8);
        org.junit.Assert.assertNotNull(observation11);
        org.junit.Assert.assertNotNull(observation15);
        org.junit.Assert.assertNotNull(observation19);
        org.junit.Assert.assertNotNull(observation21);
        org.junit.Assert.assertNotNull(device24);
        org.junit.Assert.assertNotNull(device26);
        org.junit.Assert.assertNotNull(device28);
        org.junit.Assert.assertNotNull(observation29);
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertNotNull(observation32);
        org.junit.Assert.assertNull(str36);
        org.junit.Assert.assertNull(taxon38);
        org.junit.Assert.assertNull(auditAttributes39);
        org.junit.Assert.assertTrue("'" + samplingLocationGroupSelectionType44 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationGroupSelectionType.ALL + "'", samplingLocationGroupSelectionType44.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationGroupSelectionType.ALL));
        org.junit.Assert.assertNull(samplingLocationGroup46);
        org.junit.Assert.assertNotNull(samplingPlan48);
        org.junit.Assert.assertNotNull(putTag49);
        org.junit.Assert.assertNotNull(auditAttributes52);
    }

    @Test
    public void test42890() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest85.test42890");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservationV2 postObservationV2_0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservationV2();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabInstruction labInstruction1 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservationV2 postObservationV2_2 = postObservationV2_0.setLabInstruction(labInstruction1);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Taxon taxon3 = null;
        postObservationV2_2.RelatedTaxon = taxon3;
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.RuleValidationDetails> ruleValidationDetailsList5 = postObservationV2_2.getValidationWarnings();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.QualityControlType qualityControlType6 = postObservationV2_2.getQualityControlType();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationStatistics observationStatistics7 = postObservationV2_2.getStatistics();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethodSimple analysisMethodSimple8 = postObservationV2_2.AnalysisMethod;
        postObservationV2_2.Comment = "yyyy'-'MM'-'dd'T'HH':'mm':'ss";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Specimen specimen11 = postObservationV2_2.getSpecimen();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty observedProperty12 = postObservationV2_2.ObservedProperty;
        org.junit.Assert.assertNotNull(postObservationV2_2);
        org.junit.Assert.assertNull(ruleValidationDetailsList5);
        org.junit.Assert.assertNull(qualityControlType6);
        org.junit.Assert.assertNull(observationStatistics7);
        org.junit.Assert.assertNull(analysisMethodSimple8);
        org.junit.Assert.assertNull(specimen11);
        org.junit.Assert.assertNull(observedProperty12);
    }

    @Test
    public void test42891() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest85.test42891");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SearchResultObservationNestedInSpecimen searchResultObservationNestedInSpecimen0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SearchResultObservationNestedInSpecimen();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SearchResultObservationNestedInSpecimen searchResultObservationNestedInSpecimen2 = searchResultObservationNestedInSpecimen0.setCursor("");
        java.lang.Integer int3 = searchResultObservationNestedInSpecimen0.TotalCount;
        searchResultObservationNestedInSpecimen0.TotalCount = 0;
        java.lang.String str6 = searchResultObservationNestedInSpecimen0.Cursor;
        org.junit.Assert.assertNotNull(searchResultObservationNestedInSpecimen2);
        org.junit.Assert.assertNull(int3);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
    }

    @Test
    public void test42892() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest85.test42892");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ExpandedStageTableServiceRequest expandedStageTableServiceRequest0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ExpandedStageTableServiceRequest();
        java.lang.Object obj1 = expandedStageTableServiceRequest0.getResponseType();
        java.lang.Double double2 = expandedStageTableServiceRequest0.UtcOffset;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ExpandedStageTableServiceRequest expandedStageTableServiceRequest4 = expandedStageTableServiceRequest0.setEndValue((java.lang.Double) 10.0d);
        expandedStageTableServiceRequest4.EndValue = 0.0d;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ExpandedStageTableServiceRequest expandedStageTableServiceRequest8 = expandedStageTableServiceRequest4.setUtcOffset((java.lang.Double) 100.0d);
        org.junit.Assert.assertNotNull(obj1);
        org.junit.Assert.assertEquals(obj1.toString(), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$ExpandedStageTableServiceResponse");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj1), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$ExpandedStageTableServiceResponse");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj1), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$ExpandedStageTableServiceResponse");
        org.junit.Assert.assertNull(double2);
        org.junit.Assert.assertNotNull(expandedStageTableServiceRequest4);
        org.junit.Assert.assertNotNull(expandedStageTableServiceRequest8);
    }

    @Test
    public void test42893() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest85.test42893");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationExportIIV2 getObservationExportIIV2_0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationExportIIV2();
        java.util.List<java.lang.String> strList1 = getObservationExportIIV2_0.getCollectionMethodIds();
        java.lang.String str2 = getObservationExportIIV2_0.getDepthUnitCustomId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportObservations getExportObservations3 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportObservations();
        java.lang.String str4 = getExportObservations3.DepthUnitId;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportObservations getExportObservations6 = getExportObservations3.setSort("yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSSSSSZZZZZ");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportObservations getExportObservations8 = getExportObservations3.setSort("http://MaxDurationhttp/json/reply/Integer");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RecurringReport recurringReport9 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RecurringReport();
        recurringReport9.JsonTemplate = "2021.4.62.0";
        java.time.Instant instant12 = recurringReport9.getNextGenerationDate();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisit fieldVisit13 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisit();
        fieldVisit13.Weather = "/AQUARIUS/Acquisition/v2";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.LocationDatumPeriod locationDatumPeriod16 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.LocationDatumPeriod();
        java.time.Instant instant17 = locationDatumPeriod16.AppliedTimeUtc;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.LocationDatumPeriod locationDatumPeriod19 = locationDatumPeriod16.setAppliedByUser("/AQUARIUS/Acquisition/v2://9999-12-31T23:59:59.999Z");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDescription timeSeriesDescription20 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDescription();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest21 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest();
        java.lang.Object obj22 = timeAlignedDataServiceRequest21.getResponseType();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse23 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant24 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse25 = locationDescriptionListServiceResponse23.setNextToken(instant24);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest26 = timeAlignedDataServiceRequest21.setQueryFrom(instant24);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDescription timeSeriesDescription27 = timeSeriesDescription20.setRawStartTime(instant24);
        locationDatumPeriod16.ValidFrom = instant24;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitDescription fieldVisitDescription29 = fieldVisit13.setLastMatchedTime(instant24);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RecurringReport recurringReport30 = recurringReport9.setNextGenerationDate(instant24);
        getExportObservations3.StartModificationTime = instant24;
        java.lang.String str32 = getExportObservations3.ActivityCustomId;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostQualifier postQualifier33 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostQualifier();
        java.lang.Object obj34 = postQualifier33.getResponseType();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetActivities getActivities35 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetActivities();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutBulkEditResultGradesV2 putBulkEditResultGradesV2_36 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutBulkEditResultGradesV2();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RoleFlattened roleFlattened37 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RoleFlattened();
        java.lang.Boolean boolean38 = roleFlattened37.CanRemoveFieldVisits;
        roleFlattened37.Name = "MaxInstant";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationType putLocationType41 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationType();
        java.lang.String str42 = putLocationType41.Description;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_43 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray46 = new java.lang.String[] { "", "" };
        java.util.ArrayList<java.lang.String> strList47 = new java.util.ArrayList<java.lang.String>();
        boolean boolean48 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList47, strArray46);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_49 = getObservationsV2_43.setDataClassifications((java.util.List<java.lang.String>) strList47);
        getObservationsV2_49.DepthUnitCustomId = "hi!";
        java.lang.String str52 = getObservationsV2_49.CustomId;
        java.util.List<java.lang.String> strList53 = getObservationsV2_49.getSearch();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_54 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray56 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList57 = new java.util.ArrayList<java.lang.String>();
        boolean boolean58 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList57, strArray56);
        getObservationsV2_54.SpecimenIds = strList57;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags60 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray64 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList65 = new java.util.ArrayList<java.lang.String>();
        boolean boolean66 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList65, strArray64);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags67 = putLocationTags60.setTagUniqueIds(strList65);
        getObservationsV2_54.QualityControlTypes = strList65;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_69 = getObservationsV2_49.setMedia((java.util.List<java.lang.String>) strList65);
        putLocationType41.ExtendedAttributeDefinitionIds = strList65;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RoleFlattenedBase roleFlattenedBase71 = roleFlattened37.setRoleApprovalTransitions(strList65);
        putBulkEditResultGradesV2_36.ResultGrades = strList65;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetActivities getActivities73 = getActivities35.setSamplingLocationIds((java.util.List<java.lang.String>) strList65);
        postQualifier33.GroupIdentifiers = strList65;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportObservations getExportObservations75 = getExportObservations3.setActivityTypes((java.util.List<java.lang.String>) strList65);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationExportIIV2 getObservationExportIIV2_76 = getObservationExportIIV2_0.setQualityControlTypes((java.util.List<java.lang.String>) strList65);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationExportIIFormatType getObservationExportIIFormatType77 = getObservationExportIIV2_0.getFormat();
        java.util.List<java.lang.String> strList78 = getObservationExportIIV2_0.ProjectIds;
        java.util.List<java.lang.String> strList79 = getObservationExportIIV2_0.TaxonIds;
        org.junit.Assert.assertNull(strList1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNotNull(getExportObservations6);
        org.junit.Assert.assertNotNull(getExportObservations8);
        org.junit.Assert.assertNull(instant12);
        org.junit.Assert.assertNull(instant17);
        org.junit.Assert.assertNotNull(locationDatumPeriod19);
        org.junit.Assert.assertNotNull(obj22);
        org.junit.Assert.assertEquals(obj22.toString(), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj22), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj22), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertNotNull(instant24);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse25);
        org.junit.Assert.assertNotNull(timeAlignedDataServiceRequest26);
        org.junit.Assert.assertNotNull(timeSeriesDescription27);
        org.junit.Assert.assertNotNull(fieldVisitDescription29);
        org.junit.Assert.assertNotNull(recurringReport30);
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertNotNull(obj34);
        org.junit.Assert.assertEquals(obj34.toString(), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning$QualifierResponse");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj34), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning$QualifierResponse");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj34), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning$QualifierResponse");
        org.junit.Assert.assertNull(boolean38);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(getObservationsV2_49);
        org.junit.Assert.assertNull(str52);
        org.junit.Assert.assertNull(strList53);
        org.junit.Assert.assertNotNull(strArray56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(strArray64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertNotNull(putLocationTags67);
        org.junit.Assert.assertNotNull(getObservationsV2_69);
        org.junit.Assert.assertNotNull(roleFlattenedBase71);
        org.junit.Assert.assertNotNull(getActivities73);
        org.junit.Assert.assertNotNull(getExportObservations75);
        org.junit.Assert.assertNotNull(getObservationExportIIV2_76);
        org.junit.Assert.assertNull(getObservationExportIIFormatType77);
        org.junit.Assert.assertNull(strList78);
        org.junit.Assert.assertNull(strList79);
    }

    @Test
    public void test42894() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest85.test42894");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttribute extendedAttribute0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttribute();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttribute extendedAttribute2 = extendedAttribute0.setDefaultValue("multipart/form-data; boundary=****231224c4-98ce-4e30-bd65-1d25287c4abe****");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Processor processor3 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Processor();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostTag postTag4 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostTag();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_5 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray8 = new java.lang.String[] { "", "" };
        java.util.ArrayList<java.lang.String> strList9 = new java.util.ArrayList<java.lang.String>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList9, strArray8);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_11 = getObservationsV2_5.setDataClassifications((java.util.List<java.lang.String>) strList9);
        postTag4.PickListValues = strList9;
        java.util.ArrayList<java.lang.String> strList13 = postTag4.PickListValues;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Processor processor14 = processor3.setInputTimeSeriesUniqueIds(strList13);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Processor processor16 = processor14.setOutputTimeSeriesUniqueId("2021.4.62.0");
        java.lang.String str17 = processor16.getOutputTimeSeriesUniqueId();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeRange timeRange18 = processor16.ProcessorPeriod;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeRange timeRange19 = processor16.ProcessorPeriod;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeRange timeRange20 = processor16.getProcessorPeriod();
        java.lang.String str21 = processor16.Description;
        java.util.ArrayList<java.lang.String> strList22 = processor16.getInputTimeSeriesUniqueIds();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttribute extendedAttribute23 = extendedAttribute2.setPickListValues(strList22);
        java.lang.Boolean boolean24 = extendedAttribute2.isRequired();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttribute extendedAttribute26 = extendedAttribute2.setDefaultValue("http://MaxDurationhttp/json/reply/Float");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttribute extendedAttribute28 = extendedAttribute26.setAppliesToLocations((java.lang.Boolean) true);
        org.junit.Assert.assertNotNull(extendedAttribute2);
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(getObservationsV2_11);
        org.junit.Assert.assertNotNull(strList13);
        org.junit.Assert.assertNotNull(processor14);
        org.junit.Assert.assertNotNull(processor16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "2021.4.62.0" + "'", str17, "2021.4.62.0");
        org.junit.Assert.assertNull(timeRange18);
        org.junit.Assert.assertNull(timeRange19);
        org.junit.Assert.assertNull(timeRange20);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNotNull(strList22);
        org.junit.Assert.assertNotNull(extendedAttribute23);
        org.junit.Assert.assertNull(boolean24);
        org.junit.Assert.assertNotNull(extendedAttribute26);
        org.junit.Assert.assertNotNull(extendedAttribute28);
    }

    @Test
    public void test42895() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest85.test42895");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDataServiceResponse locationDataServiceResponse0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDataServiceResponse();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDescription timeSeriesDescription1 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDescription();
        java.time.Instant instant2 = timeSeriesDescription1.getCorrectedStartTime();
        java.lang.String str3 = timeSeriesDescription1.getComputationIdentifier();
        timeSeriesDescription1.TimeSeriesType = "-PT87591240H";
        java.lang.String str6 = timeSeriesDescription1.getIdentifier();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_7 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray10 = new java.lang.String[] { "", "" };
        java.util.ArrayList<java.lang.String> strList11 = new java.util.ArrayList<java.lang.String>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList11, strArray10);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_13 = getObservationsV2_7.setDataClassifications((java.util.List<java.lang.String>) strList11);
        java.util.List<java.lang.String> strList14 = getObservationsV2_7.ResultGrades;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary15 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        dischargeSummary15.Reviewer = "";
        java.time.Instant instant18 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        dischargeSummary15.MeasurementTime = instant18;
        getObservationsV2_7.StartResultTime = instant18;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDescription timeSeriesDescription21 = timeSeriesDescription1.setCorrectedStartTime(instant18);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetActivities getActivities22 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetActivities();
        getActivities22.Limit = 10;
        java.util.List<java.lang.String> strList25 = getActivities22.ActivityTemplateId;
        java.lang.String str26 = getActivities22.Sort;
        java.util.List<java.lang.String> strList27 = getActivities22.CollectionMethodIds;
        java.lang.String str28 = getActivities22.getCustomId();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitDescriptionListServiceResponse fieldVisitDescriptionListServiceResponse29 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitDescriptionListServiceResponse();
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitDescription> fieldVisitDescriptionList30 = fieldVisitDescriptionListServiceResponse29.getDeletedFieldVisitDescriptions();
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitDescription> fieldVisitDescriptionList31 = fieldVisitDescriptionListServiceResponse29.DeletedFieldVisitDescriptions;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary32 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        dischargeSummary32.Reviewer = "";
        java.time.Instant instant35 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        dischargeSummary32.MeasurementTime = instant35;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.BaseFlowType baseFlowType37 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.BaseFlowType.BaseFlow;
        dischargeSummary32.BaseFlow = baseFlowType37;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.BaseFlowType baseFlowType39 = dischargeSummary32.BaseFlow;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingModelDescriptionListServiceResponse ratingModelDescriptionListServiceResponse40 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingModelDescriptionListServiceResponse();
        java.util.List<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingModelDescription> ratingModelDescriptionList41 = ratingModelDescriptionListServiceResponse40.RatingModelDescriptions;
        java.time.Instant instant42 = ratingModelDescriptionListServiceResponse40.getNextToken();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CalibrationCheck calibrationCheck43 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CalibrationCheck();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CalibrationCheckType calibrationCheckType44 = calibrationCheck43.getCalibrationCheckType();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay45 = calibrationCheck43.Value;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse46 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary47 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary49 = dischargeSummary47.setPublish((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse50 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant51 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse52 = locationDescriptionListServiceResponse50.setNextToken(instant51);
        dischargeSummary47.MeasurementTime = instant51;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse54 = locationDescriptionListServiceResponse46.setNextToken(instant51);
        java.time.Instant instant55 = locationDescriptionListServiceResponse46.getNextToken();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CalibrationCheck calibrationCheck56 = calibrationCheck43.setTime(instant55);
        java.time.Instant instant57 = calibrationCheck56.Time;
        ratingModelDescriptionListServiceResponse40.NextToken = instant57;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary59 = dischargeSummary32.setMeasurementEndTime(instant57);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PublishServiceResponse publishServiceResponse60 = fieldVisitDescriptionListServiceResponse29.setResponseTime(instant57);
        getActivities22.FromStartTime = instant57;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDescription timeSeriesDescription62 = timeSeriesDescription21.setRawStartTime(instant57);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDescription timeSeriesDescription64 = timeSeriesDescription21.setParameterId("http://MaxDurationhttp/json/reply/ArrayList");
        java.time.Instant instant65 = timeSeriesDescription21.RawEndTime;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDescription timeSeriesDescription66 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDescription();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest67 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest();
        java.lang.Object obj68 = timeAlignedDataServiceRequest67.getResponseType();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse69 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant70 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse71 = locationDescriptionListServiceResponse69.setNextToken(instant70);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest72 = timeAlignedDataServiceRequest67.setQueryFrom(instant70);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDescription timeSeriesDescription73 = timeSeriesDescription66.setRawStartTime(instant70);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDescription timeSeriesDescription75 = timeSeriesDescription73.setSubLocationIdentifier("");
        java.time.Instant instant76 = timeSeriesDescription73.LastModified;
        java.lang.Boolean boolean77 = timeSeriesDescription73.isPublish();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ExtendedAttribute[] extendedAttributeArray78 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ExtendedAttribute[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ExtendedAttribute> extendedAttributeList79 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ExtendedAttribute>();
        boolean boolean80 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ExtendedAttribute>) extendedAttributeList79, extendedAttributeArray78);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDescription timeSeriesDescription81 = timeSeriesDescription73.setExtendedAttributes((java.util.List<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ExtendedAttribute>) extendedAttributeList79);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDescription timeSeriesDescription82 = timeSeriesDescription21.setExtendedAttributes((java.util.List<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ExtendedAttribute>) extendedAttributeList79);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDataServiceResponse locationDataServiceResponse83 = locationDataServiceResponse0.setExtendedAttributes(extendedAttributeList79);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDataServiceResponse locationDataServiceResponse85 = locationDataServiceResponse0.setUniqueId("'.'SSSSSSS");
        java.lang.String str86 = locationDataServiceResponse0.LocationType;
        java.lang.String str87 = locationDataServiceResponse0.getDescription();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDatum locationDatum88 = locationDataServiceResponse0.getLocationDatum();
        locationDataServiceResponse0.LocationName = "multipart/form-data; boundary=****7b815a50-252c-4af2-a735-92be77f9a852****";
        org.junit.Assert.assertNull(instant2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(getObservationsV2_13);
        org.junit.Assert.assertNull(strList14);
        org.junit.Assert.assertNotNull(instant18);
        org.junit.Assert.assertNotNull(timeSeriesDescription21);
        org.junit.Assert.assertNull(strList25);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertNull(strList27);
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertNull(fieldVisitDescriptionList30);
        org.junit.Assert.assertNull(fieldVisitDescriptionList31);
        org.junit.Assert.assertNotNull(instant35);
        org.junit.Assert.assertTrue("'" + baseFlowType37 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.BaseFlowType.BaseFlow + "'", baseFlowType37.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.BaseFlowType.BaseFlow));
        org.junit.Assert.assertTrue("'" + baseFlowType39 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.BaseFlowType.BaseFlow + "'", baseFlowType39.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.BaseFlowType.BaseFlow));
        org.junit.Assert.assertNull(ratingModelDescriptionList41);
        org.junit.Assert.assertNull(instant42);
        org.junit.Assert.assertNull(calibrationCheckType44);
        org.junit.Assert.assertNull(doubleWithDisplay45);
        org.junit.Assert.assertNotNull(dischargeSummary49);
        org.junit.Assert.assertNotNull(instant51);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse52);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse54);
        org.junit.Assert.assertNotNull(instant55);
        org.junit.Assert.assertNotNull(calibrationCheck56);
        org.junit.Assert.assertNotNull(instant57);
        org.junit.Assert.assertNotNull(dischargeSummary59);
        org.junit.Assert.assertNotNull(publishServiceResponse60);
        org.junit.Assert.assertNotNull(timeSeriesDescription62);
        org.junit.Assert.assertNotNull(timeSeriesDescription64);
        org.junit.Assert.assertNull(instant65);
        org.junit.Assert.assertNotNull(obj68);
        org.junit.Assert.assertEquals(obj68.toString(), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj68), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj68), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertNotNull(instant70);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse71);
        org.junit.Assert.assertNotNull(timeAlignedDataServiceRequest72);
        org.junit.Assert.assertNotNull(timeSeriesDescription73);
        org.junit.Assert.assertNotNull(timeSeriesDescription75);
        org.junit.Assert.assertNull(instant76);
        org.junit.Assert.assertNull(boolean77);
        org.junit.Assert.assertNotNull(extendedAttributeArray78);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(timeSeriesDescription81);
        org.junit.Assert.assertNotNull(timeSeriesDescription82);
        org.junit.Assert.assertNotNull(locationDataServiceResponse83);
        org.junit.Assert.assertNotNull(locationDataServiceResponse85);
        org.junit.Assert.assertNull(str86);
        org.junit.Assert.assertNull(str87);
        org.junit.Assert.assertNull(locationDatum88);
    }

    @Test
    public void test42896() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest85.test42896");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostSpecimen postSpecimen0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostSpecimen();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes1 = postSpecimen0.AuditAttributes;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes2 = postSpecimen0.getAuditAttributes();
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation> observationList3 = postSpecimen0.getObservations();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostSpecimen postSpecimen5 = postSpecimen0.setId("MinInstant");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenWithObservations specimenWithObservations6 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenWithObservations();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenWithObservations specimenWithObservations8 = specimenWithObservations6.setNumberOfReceivedObservations((java.lang.Integer) 1);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PreservativeType preservativeType9 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PreservativeType.NITRIC_ACID;
        specimenWithObservations6.Preservative = preservativeType9;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate11 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate();
        java.lang.String str12 = specimenTemplate11.CustomId;
        specimenWithObservations6.TemplateCreatedFrom = specimenTemplate11;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PreservativeType preservativeType14 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PreservativeType.FIELD_FREEZE;
        specimenWithObservations6.Preservative = preservativeType14;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLabReport postLabReport16 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLabReport();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFieldVisitActivityWithTemplate postFieldVisitActivityWithTemplate17 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFieldVisitActivityWithTemplate();
        java.lang.String str18 = postFieldVisitActivityWithTemplate17.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFieldVisitActivityWithTemplate postFieldVisitActivityWithTemplate20 = postFieldVisitActivityWithTemplate17.setCustomId("'.'SSSSSSS");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedFieldResult plannedFieldResult21 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedFieldResult();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes22 = plannedFieldResult21.AuditAttributes;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails23 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails25 = labResultDetails23.setAnalysisComment("/AQUARIUS/Acquisition/v2");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes26 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails27 = labResultDetails25.setAuditAttributes(auditAttributes26);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedFieldResult plannedFieldResult28 = plannedFieldResult21.setAuditAttributes(auditAttributes26);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroup analyticalGroup29 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroup();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupType analyticalGroupType30 = analyticalGroup29.getType();
        analyticalGroup29.Name = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSSSSSZZZZZ";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroup analyticalGroup33 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroup();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem analyticalGroupItem34 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod35 = analyticalGroupItem34.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem analyticalGroupItem36 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod37 = analyticalGroupItem36.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod38 = analyticalGroupItem36.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem analyticalGroupItem39 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod40 = analyticalGroupItem39.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod41 = analyticalGroupItem39.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod42 = null;
        analyticalGroupItem39.AnalysisMethod = analysisMethod42;
        java.lang.String str44 = analyticalGroupItem39.getHoldingTime();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem analyticalGroupItem45 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod46 = analyticalGroupItem45.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod47 = analyticalGroupItem45.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem analyticalGroupItem48 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod49 = analyticalGroupItem48.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem analyticalGroupItem50 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod51 = analyticalGroupItem50.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod52 = analyticalGroupItem50.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod53 = null;
        analyticalGroupItem50.AnalysisMethod = analysisMethod53;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem[] analyticalGroupItemArray55 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem[] { analyticalGroupItem34, analyticalGroupItem36, analyticalGroupItem39, analyticalGroupItem45, analyticalGroupItem48, analyticalGroupItem50 };
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem> analyticalGroupItemList56 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem>();
        boolean boolean57 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem>) analyticalGroupItemList56, analyticalGroupItemArray55);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroup analyticalGroup58 = analyticalGroup33.setAnalyticalGroupItems((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem>) analyticalGroupItemList56);
        analyticalGroup29.AnalyticalGroupItems = analyticalGroupItemList56;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes60 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes();
        analyticalGroup29.AuditAttributes = auditAttributes60;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedFieldResult plannedFieldResult62 = plannedFieldResult28.setAuditAttributes(auditAttributes60);
        postFieldVisitActivityWithTemplate20.AuditAttributes = auditAttributes60;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLabReport postLabReport64 = postLabReport16.setAuditAttributes(auditAttributes60);
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple> importHistoryEventSimpleList65 = postLabReport16.getImportHistoryEventSimples();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLabReport postLabReport67 = postLabReport16.setId("yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSSSSSZZZZZ");
        java.lang.String str68 = postLabReport16.getCaseNarrative();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails69 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails71 = labResultDetails69.setAnalysisComment("/AQUARIUS/Acquisition/v2");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes72 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails73 = labResultDetails71.setAuditAttributes(auditAttributes72);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Laboratory laboratory74 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Laboratory();
        laboratory74.Id = "MaxInstant";
        java.lang.String str77 = laboratory74.PhoneNumber;
        java.lang.String str78 = laboratory74.getPointOfContact();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails79 = labResultDetails71.setLaboratory(laboratory74);
        postLabReport16.Laboratory = laboratory74;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenWithObservations specimenWithObservations81 = specimenWithObservations6.setLaboratory(laboratory74);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostSpecimen postSpecimen82 = postSpecimen5.setLaboratory(laboratory74);
        postSpecimen5.Id = "multipart/form-data; boundary=****ebf59e0e-2d1f-43bc-996f-3c628a80f696****";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Laboratory laboratory85 = postSpecimen5.getLaboratory();
        java.lang.String str86 = laboratory85.PhoneNumber;
        org.junit.Assert.assertNull(auditAttributes1);
        org.junit.Assert.assertNull(auditAttributes2);
        org.junit.Assert.assertNull(observationList3);
        org.junit.Assert.assertNotNull(postSpecimen5);
        org.junit.Assert.assertNotNull(specimenWithObservations8);
        org.junit.Assert.assertTrue("'" + preservativeType9 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PreservativeType.NITRIC_ACID + "'", preservativeType9.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PreservativeType.NITRIC_ACID));
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertTrue("'" + preservativeType14 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PreservativeType.FIELD_FREEZE + "'", preservativeType14.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PreservativeType.FIELD_FREEZE));
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNotNull(postFieldVisitActivityWithTemplate20);
        org.junit.Assert.assertNull(auditAttributes22);
        org.junit.Assert.assertNotNull(labResultDetails25);
        org.junit.Assert.assertNotNull(labResultDetails27);
        org.junit.Assert.assertNotNull(plannedFieldResult28);
        org.junit.Assert.assertNull(analyticalGroupType30);
        org.junit.Assert.assertNull(analysisMethod35);
        org.junit.Assert.assertNull(analysisMethod37);
        org.junit.Assert.assertNull(analysisMethod38);
        org.junit.Assert.assertNull(analysisMethod40);
        org.junit.Assert.assertNull(analysisMethod41);
        org.junit.Assert.assertNull(str44);
        org.junit.Assert.assertNull(analysisMethod46);
        org.junit.Assert.assertNull(analysisMethod47);
        org.junit.Assert.assertNull(analysisMethod49);
        org.junit.Assert.assertNull(analysisMethod51);
        org.junit.Assert.assertNull(analysisMethod52);
        org.junit.Assert.assertNotNull(analyticalGroupItemArray55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertNotNull(analyticalGroup58);
        org.junit.Assert.assertNotNull(plannedFieldResult62);
        org.junit.Assert.assertNotNull(postLabReport64);
        org.junit.Assert.assertNull(importHistoryEventSimpleList65);
        org.junit.Assert.assertNotNull(postLabReport67);
        org.junit.Assert.assertNull(str68);
        org.junit.Assert.assertNotNull(labResultDetails71);
        org.junit.Assert.assertNotNull(labResultDetails73);
        org.junit.Assert.assertNull(str77);
        org.junit.Assert.assertNull(str78);
        org.junit.Assert.assertNotNull(labResultDetails79);
        org.junit.Assert.assertNotNull(specimenWithObservations81);
        org.junit.Assert.assertNotNull(postSpecimen82);
        org.junit.Assert.assertNotNull(laboratory85);
        org.junit.Assert.assertNull(str86);
    }

    @Test
    public void test42897() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest85.test42897");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetSamplingLocation getSamplingLocation0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetSamplingLocation();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetSamplingLocation getSamplingLocation2 = getSamplingLocation0.setId("POST");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetSamplingLocation getSamplingLocation4 = getSamplingLocation0.setId("hi!");
        getSamplingLocation0.Id = "POST";
        org.junit.Assert.assertNotNull(getSamplingLocation2);
        org.junit.Assert.assertNotNull(getSamplingLocation4);
    }

    @Test
    public void test42898() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest85.test42898");
        java.util.Map<java.lang.Object, java.lang.reflect.Type> objMap2 = null;
        java.util.Map<java.lang.Object, java.lang.reflect.Type> objMap5 = null;
        java.util.Map<java.lang.Object, java.lang.reflect.Type> objMap8 = null;
        java.util.Map<java.lang.Object, java.lang.reflect.Type> objMap11 = null;
        com.aquaticinformatics.aquarius.sdk.timeseries.FieldNamer fieldNamer12 = new com.aquaticinformatics.aquarius.sdk.timeseries.FieldNamer();
        com.aquaticinformatics.aquarius.sdk.helpers.SdkServiceClient sdkServiceClient14 = com.aquaticinformatics.aquarius.sdk.helpers.SdkServiceClient.Create("multipart/form-data; boundary=****bbcf5f9e-6ccf-4b63-91ab-6e645caf02af****", "0001-01-01T00:00:00.000Z", objMap11, (com.aquaticinformatics.aquarius.sdk.helpers.IFieldNamer) fieldNamer12, false);
        com.aquaticinformatics.aquarius.sdk.helpers.SdkServiceClient sdkServiceClient16 = com.aquaticinformatics.aquarius.sdk.helpers.SdkServiceClient.Create("multipart/form-data; boundary=****9fadde69-3f13-40c4-a87c-0f3f51c2dd35****", "http", objMap8, (com.aquaticinformatics.aquarius.sdk.helpers.IFieldNamer) fieldNamer12, true);
        com.aquaticinformatics.aquarius.sdk.helpers.SdkServiceClient sdkServiceClient18 = com.aquaticinformatics.aquarius.sdk.helpers.SdkServiceClient.Create("0001-01-01T00:00:00.0000000Z", "****231224c4-98ce-4e30-bd65-1d25287c4abe****", objMap5, (com.aquaticinformatics.aquarius.sdk.helpers.IFieldNamer) fieldNamer12, false);
        com.aquaticinformatics.aquarius.sdk.helpers.SdkServiceClient sdkServiceClient20 = com.aquaticinformatics.aquarius.sdk.helpers.SdkServiceClient.Create("****82feecb1-0c54-43a1-b60a-302dc897d638****", "multipart/form-data; boundary=****231224c4-98ce-4e30-bd65-1d25287c4abe****", objMap2, (com.aquaticinformatics.aquarius.sdk.helpers.IFieldNamer) fieldNamer12, false);
        java.net.HttpURLConnection httpURLConnection22 = sdkServiceClient20.get("");
        org.junit.Assert.assertNotNull(sdkServiceClient14);
        org.junit.Assert.assertNotNull(sdkServiceClient16);
        org.junit.Assert.assertNotNull(sdkServiceClient18);
        org.junit.Assert.assertNotNull(sdkServiceClient20);
        org.junit.Assert.assertNotNull(httpURLConnection22);
    }

    @Test
    public void test42899() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest85.test42899");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetLabAnalysisMethodHistory getLabAnalysisMethodHistory0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetLabAnalysisMethodHistory();
        java.lang.String str1 = getLabAnalysisMethodHistory0.Id;
        getLabAnalysisMethodHistory0.Id = "multipart/form-data; boundary=****ebf59e0e-2d1f-43bc-996f-3c628a80f696****";
        org.junit.Assert.assertNull(str1);
    }

    @Test
    public void test42900() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest85.test42900");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSamplingLocation putSamplingLocation0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSamplingLocation();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSamplingLocation putSamplingLocation2 = putSamplingLocation0.setCustomId("https");
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttribute> extendedAttributeList3 = putSamplingLocation0.ExtendedAttributes;
        java.lang.String str4 = putSamplingLocation0.Description;
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple> standardSimpleList5 = putSamplingLocation0.Standards;
        java.lang.String str6 = putSamplingLocation0.VerticalCollectionMethod;
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttribute> extendedAttributeList7 = putSamplingLocation0.getExtendedAttributes();
        java.lang.String str8 = putSamplingLocation0.CustomId;
        java.lang.String str9 = putSamplingLocation0.getLongitude();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostSamplingLocation postSamplingLocation10 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostSamplingLocation();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostSamplingLocation postSamplingLocation12 = postSamplingLocation10.setCustomId("hi!");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation13 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedFieldResult plannedFieldResult14 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation15 = observation13.setPlannedFieldResult(plannedFieldResult14);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabInstruction labInstruction16 = null;
        observation15.LabInstruction = labInstruction16;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationStatistics observationStatistics18 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation19 = observation15.setStatistics(observationStatistics18);
        java.time.OffsetDateTime offsetDateTime20 = observation19.getResultTime();
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple> importHistoryEventSimpleList21 = observation19.ImportHistoryEventSimples;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty observedProperty22 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation23 = observation19.setObservedProperty(observedProperty22);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultGrade resultGrade24 = observation23.ResultGrade;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails25 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails27 = labResultDetails25.setAnalysisComment("/AQUARIUS/Acquisition/v2");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes28 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails29 = labResultDetails27.setAuditAttributes(auditAttributes28);
        observation23.AuditAttributes = auditAttributes28;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostSamplingLocation postSamplingLocation31 = postSamplingLocation12.setAuditAttributes(auditAttributes28);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.TimeZone timeZone32 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.TimeZone();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostSamplingLocation postSamplingLocation33 = postSamplingLocation31.setTimeZone(timeZone32);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.TimeZone timeZone35 = timeZone32.setCustomId("multipart/form-data; boundary=****ee0ec537-fde4-45ee-9c35-68c37cf65c1c****");
        timeZone35.Id = "https";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSamplingLocation putSamplingLocation38 = putSamplingLocation0.setTimeZone(timeZone35);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSamplingLocation putSamplingLocation40 = putSamplingLocation38.setId("multipart/form-data; boundary=****6b8051d4-caf2-4095-9f11-faa36b95fc28****");
        org.junit.Assert.assertNotNull(putSamplingLocation2);
        org.junit.Assert.assertNull(extendedAttributeList3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(standardSimpleList5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(extendedAttributeList7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "https" + "'", str8, "https");
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(postSamplingLocation12);
        org.junit.Assert.assertNotNull(observation15);
        org.junit.Assert.assertNotNull(observation19);
        org.junit.Assert.assertNull(offsetDateTime20);
        org.junit.Assert.assertNull(importHistoryEventSimpleList21);
        org.junit.Assert.assertNotNull(observation23);
        org.junit.Assert.assertNull(resultGrade24);
        org.junit.Assert.assertNotNull(labResultDetails27);
        org.junit.Assert.assertNotNull(labResultDetails29);
        org.junit.Assert.assertNotNull(postSamplingLocation31);
        org.junit.Assert.assertNotNull(postSamplingLocation33);
        org.junit.Assert.assertNotNull(timeZone35);
        org.junit.Assert.assertNotNull(putSamplingLocation38);
        org.junit.Assert.assertNotNull(putSamplingLocation40);
    }

    @Test
    public void test42901() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest85.test42901");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetFieldVisits getFieldVisits0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetFieldVisits();
        java.lang.Integer int1 = getFieldVisits0.Limit;
        java.time.Instant instant2 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetFieldVisits getFieldVisits3 = getFieldVisits0.setStartStartTime(instant2);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetFieldVisits getFieldVisits5 = getFieldVisits0.setLimit((java.lang.Integer) 2);
        java.util.List<java.lang.String> strList6 = getFieldVisits5.getFieldTripIds();
        java.lang.String str7 = getFieldVisits5.Cursor;
        org.junit.Assert.assertNull(int1);
        org.junit.Assert.assertNotNull(getFieldVisits3);
        org.junit.Assert.assertNotNull(getFieldVisits5);
        org.junit.Assert.assertNull(strList6);
        org.junit.Assert.assertNull(str7);
    }

    @Test
    public void test42902() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest85.test42902");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutObservationV2 putObservationV2_0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutObservationV2();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty observedProperty1 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutObservationV2 putObservationV2_2 = putObservationV2_0.setObservedProperty(observedProperty1);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Activity activity3 = putObservationV2_2.Activity;
        java.time.OffsetDateTime offsetDateTime4 = null;
        putObservationV2_2.ObservedTime = offsetDateTime4;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.QualityControlType qualityControlType6 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.QualityControlType.BLANK;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutObservationV2 putObservationV2_7 = putObservationV2_2.setQualityControlType(qualityControlType6);
        java.time.OffsetDateTime offsetDateTime8 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutObservationV2 putObservationV2_9 = putObservationV2_2.setObservedTime(offsetDateTime8);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.TaxonomicResult taxonomicResult10 = putObservationV2_2.TaxonomicResult;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.TaxonomicResult taxonomicResult11 = putObservationV2_2.TaxonomicResult;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes12 = putObservationV2_2.getAuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Device device13 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Device();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Device device15 = device13.setType("/AQUARIUS/Acquisition/v2");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Device device17 = device15.setType("/AQUARIUS/Acquisition/v2://9999-12-31T23:59:59.999Z");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Device device19 = device15.setType("http");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Device device21 = device15.setCustomId("yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutObservationV2 putObservationV2_22 = putObservationV2_2.setDevice(device21);
        org.junit.Assert.assertNotNull(putObservationV2_2);
        org.junit.Assert.assertNull(activity3);
        org.junit.Assert.assertTrue("'" + qualityControlType6 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.QualityControlType.BLANK + "'", qualityControlType6.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.QualityControlType.BLANK));
        org.junit.Assert.assertNotNull(putObservationV2_7);
        org.junit.Assert.assertNotNull(putObservationV2_9);
        org.junit.Assert.assertNull(taxonomicResult10);
        org.junit.Assert.assertNull(taxonomicResult11);
        org.junit.Assert.assertNull(auditAttributes12);
        org.junit.Assert.assertNotNull(device15);
        org.junit.Assert.assertNotNull(device17);
        org.junit.Assert.assertNotNull(device19);
        org.junit.Assert.assertNotNull(device21);
        org.junit.Assert.assertNotNull(putObservationV2_22);
    }

    @Test
    public void test42903() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest85.test42903");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricConfiguration metricConfiguration0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricConfiguration();
        java.lang.String str1 = metricConfiguration0.getId();
        metricConfiguration0.CustomId = "/AQUARIUS/Acquisition/v2";
        java.lang.Boolean boolean4 = metricConfiguration0.getUseScoreRanges();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Unit unit5 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricConfiguration metricConfiguration6 = metricConfiguration0.setUnit(unit5);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AggregationType aggregationType7 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AggregationType.SUM;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricConfiguration metricConfiguration8 = metricConfiguration0.setAggregationType(aggregationType7);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.IndexConfiguration indexConfiguration9 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.IndexConfiguration();
        java.lang.String str10 = indexConfiguration9.CustomId;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Unit unit11 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Unit();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes12 = unit11.AuditAttributes;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Unit unit14 = unit11.setId("/AQUARIUS/Acquisition/v2://9999-12-31T23:59:59.999Z");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.IndexConfiguration indexConfiguration15 = indexConfiguration9.setUnit(unit14);
        metricConfiguration0.Unit = unit14;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(boolean4);
        org.junit.Assert.assertNotNull(metricConfiguration6);
        org.junit.Assert.assertTrue("'" + aggregationType7 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AggregationType.SUM + "'", aggregationType7.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AggregationType.SUM));
        org.junit.Assert.assertNotNull(metricConfiguration8);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNull(auditAttributes12);
        org.junit.Assert.assertNotNull(unit14);
        org.junit.Assert.assertNotNull(indexConfiguration15);
    }

    @Test
    public void test42904() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest85.test42904");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpreadsheetTemplate spreadsheetTemplate0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpreadsheetTemplate();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpreadsheetTemplateType spreadsheetTemplateType1 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpreadsheetTemplate spreadsheetTemplate2 = spreadsheetTemplate0.setType(spreadsheetTemplateType1);
        java.lang.String str3 = spreadsheetTemplate0.getCustomId();
        java.lang.String str4 = spreadsheetTemplate0.CustomId;
        org.junit.Assert.assertNotNull(spreadsheetTemplate2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(str4);
    }

    @Test
    public void test42905() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest85.test42905");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutProject putProject0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutProject();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutProject putProject2 = putProject0.setScopeStatement("yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ");
        putProject2.Approved = true;
        java.lang.String str5 = putProject2.getCustomId();
        java.time.OffsetDateTime offsetDateTime6 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutProject putProject7 = putProject2.setStartTime(offsetDateTime6);
        putProject2.CustomId = "MaxInstant";
        putProject2.CustomId = "http";
        java.lang.Boolean boolean12 = putProject2.Approved;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutProject putProject14 = putProject2.setScopeStatement("multipart/form-data; boundary=****3dee2050-7d6c-400f-bd51-383a1324f5dd****");
        org.junit.Assert.assertNotNull(putProject2);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(putProject7);
        org.junit.Assert.assertEquals("'" + boolean12 + "' != '" + true + "'", boolean12, true);
        org.junit.Assert.assertNotNull(putProject14);
    }

    @Test
    public void test42906() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest85.test42906");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeTransaction metadataChangeTransaction0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeTransaction();
        java.util.List<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.GapToleranceOperation> gapToleranceOperationList1 = metadataChangeTransaction0.GapToleranceOperations;
        java.util.List<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.NoteOperation> noteOperationList2 = metadataChangeTransaction0.getNoteOperations();
        java.util.List<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CorrectionOperation> correctionOperationList3 = metadataChangeTransaction0.getCorrectionOperations();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeTransaction metadataChangeTransaction5 = metadataChangeTransaction0.setAppliedByUser("multipart/form-data; boundary=****7eff1774-b6b0-471a-961c-156c64359366****");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeTransaction metadataChangeTransaction6 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeTransaction();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeTransaction metadataChangeTransaction7 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeTransaction();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CorrectionOperation correctionOperation8 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CorrectionOperation();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CorrectionType correctionType9 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CorrectionType.AdjustableTrim;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CorrectionOperation correctionOperation10 = correctionOperation8.setType(correctionType9);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeOperationType metadataChangeOperationType11 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeOperationType.Creation;
        correctionOperation8.OperationType = metadataChangeOperationType11;
        java.time.Instant instant13 = null;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CorrectionOperation correctionOperation14 = correctionOperation8.setDateAppliedUtc(instant13);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MethodOperation methodOperation15 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MethodOperation();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeOperationType metadataChangeOperationType16 = methodOperation15.getOperationType();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeOperationType metadataChangeOperationType17 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeOperationType.Creation;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MethodOperation methodOperation18 = methodOperation15.setOperationType(metadataChangeOperationType17);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CorrectionOperation correctionOperation19 = correctionOperation14.setOperationType(metadataChangeOperationType17);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CorrectionOperation correctionOperation20 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CorrectionOperation();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CorrectionType correctionType21 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CorrectionType.AdjustableTrim;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CorrectionOperation correctionOperation22 = correctionOperation20.setType(correctionType21);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeOperationType metadataChangeOperationType23 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeOperationType.Creation;
        correctionOperation20.OperationType = metadataChangeOperationType23;
        java.time.Instant instant25 = null;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CorrectionOperation correctionOperation26 = correctionOperation20.setDateAppliedUtc(instant25);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MethodOperation methodOperation27 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MethodOperation();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeOperationType metadataChangeOperationType28 = methodOperation27.getOperationType();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeOperationType metadataChangeOperationType29 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeOperationType.Creation;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MethodOperation methodOperation30 = methodOperation27.setOperationType(metadataChangeOperationType29);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CorrectionOperation correctionOperation31 = correctionOperation26.setOperationType(metadataChangeOperationType29);
        correctionOperation14.OperationType = metadataChangeOperationType29;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TrendLineAnalysisServiceRequest trendLineAnalysisServiceRequest33 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TrendLineAnalysisServiceRequest();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TrendLineAnalysisType trendLineAnalysisType34 = trendLineAnalysisServiceRequest33.getType();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationRemark locationRemark35 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationRemark();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationRemark locationRemark37 = locationRemark35.setDescription("MaxInstant");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse38 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant39 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse40 = locationDescriptionListServiceResponse38.setNextToken(instant39);
        locationRemark37.FromTime = instant39;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationRemark locationRemark43 = locationRemark37.setRemark("/AQUARIUS/Acquisition/v2");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesThresholdPeriod timeSeriesThresholdPeriod44 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesThresholdPeriod();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesThresholdPeriod timeSeriesThresholdPeriod46 = timeSeriesThresholdPeriod44.setReferenceValue((java.lang.Double) 0.0d);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescription locationDescription47 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescription();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescription locationDescription49 = locationDescription47.setIdentifier("");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ControlConditionActivity controlConditionActivity50 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ControlConditionActivity();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ControlCleanedType controlCleanedType51 = null;
        controlConditionActivity50.ControlCleaned = controlCleanedType51;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse53 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant54 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse55 = locationDescriptionListServiceResponse53.setNextToken(instant54);
        controlConditionActivity50.DateCleaned = instant54;
        locationDescription49.LastModified = instant54;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesThresholdPeriod timeSeriesThresholdPeriod58 = timeSeriesThresholdPeriod46.setAppliedTime(instant54);
        locationRemark43.ToTime = instant54;
        trendLineAnalysisServiceRequest33.QueryFrom = instant54;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CorrectionOperation correctionOperation61 = correctionOperation14.setDateAppliedUtc(instant54);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CorrectionOperation[] correctionOperationArray62 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CorrectionOperation[] { correctionOperation61 };
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CorrectionOperation> correctionOperationList63 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CorrectionOperation>();
        boolean boolean64 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CorrectionOperation>) correctionOperationList63, correctionOperationArray62);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeTransaction metadataChangeTransaction65 = metadataChangeTransaction7.setCorrectionOperations((java.util.List<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CorrectionOperation>) correctionOperationList63);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeTransaction metadataChangeTransaction66 = metadataChangeTransaction6.setCorrectionOperations((java.util.List<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CorrectionOperation>) correctionOperationList63);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetActivities getActivities67 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetActivities();
        java.lang.String str68 = getActivities67.getCustomId();
        java.time.Instant instant69 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MinConcreteValue;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetActivities getActivities70 = getActivities67.setFromStartTime(instant69);
        java.time.Instant instant71 = getActivities70.FromStartTime;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeTransaction metadataChangeTransaction72 = metadataChangeTransaction66.setAppliedTime(instant71);
        java.util.List<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.NoteOperation> noteOperationList73 = metadataChangeTransaction72.getNoteOperations();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeContentType metadataChangeContentType74 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeContentType.Corrected;
        metadataChangeTransaction72.ContentType = metadataChangeContentType74;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeTransaction metadataChangeTransaction76 = metadataChangeTransaction5.setContentType(metadataChangeContentType74);
        org.junit.Assert.assertNull(gapToleranceOperationList1);
        org.junit.Assert.assertNull(noteOperationList2);
        org.junit.Assert.assertNull(correctionOperationList3);
        org.junit.Assert.assertNotNull(metadataChangeTransaction5);
        org.junit.Assert.assertTrue("'" + correctionType9 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CorrectionType.AdjustableTrim + "'", correctionType9.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CorrectionType.AdjustableTrim));
        org.junit.Assert.assertNotNull(correctionOperation10);
        org.junit.Assert.assertTrue("'" + metadataChangeOperationType11 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeOperationType.Creation + "'", metadataChangeOperationType11.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeOperationType.Creation));
        org.junit.Assert.assertNotNull(correctionOperation14);
        org.junit.Assert.assertNull(metadataChangeOperationType16);
        org.junit.Assert.assertTrue("'" + metadataChangeOperationType17 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeOperationType.Creation + "'", metadataChangeOperationType17.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeOperationType.Creation));
        org.junit.Assert.assertNotNull(methodOperation18);
        org.junit.Assert.assertNotNull(correctionOperation19);
        org.junit.Assert.assertTrue("'" + correctionType21 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CorrectionType.AdjustableTrim + "'", correctionType21.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CorrectionType.AdjustableTrim));
        org.junit.Assert.assertNotNull(correctionOperation22);
        org.junit.Assert.assertTrue("'" + metadataChangeOperationType23 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeOperationType.Creation + "'", metadataChangeOperationType23.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeOperationType.Creation));
        org.junit.Assert.assertNotNull(correctionOperation26);
        org.junit.Assert.assertNull(metadataChangeOperationType28);
        org.junit.Assert.assertTrue("'" + metadataChangeOperationType29 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeOperationType.Creation + "'", metadataChangeOperationType29.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeOperationType.Creation));
        org.junit.Assert.assertNotNull(methodOperation30);
        org.junit.Assert.assertNotNull(correctionOperation31);
        org.junit.Assert.assertNull(trendLineAnalysisType34);
        org.junit.Assert.assertNotNull(locationRemark37);
        org.junit.Assert.assertNotNull(instant39);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse40);
        org.junit.Assert.assertNotNull(locationRemark43);
        org.junit.Assert.assertNotNull(timeSeriesThresholdPeriod46);
        org.junit.Assert.assertNotNull(locationDescription49);
        org.junit.Assert.assertNotNull(instant54);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse55);
        org.junit.Assert.assertNotNull(timeSeriesThresholdPeriod58);
        org.junit.Assert.assertNotNull(correctionOperation61);
        org.junit.Assert.assertNotNull(correctionOperationArray62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertNotNull(metadataChangeTransaction65);
        org.junit.Assert.assertNotNull(metadataChangeTransaction66);
        org.junit.Assert.assertNull(str68);
        org.junit.Assert.assertNotNull(instant69);
        org.junit.Assert.assertNotNull(getActivities70);
        org.junit.Assert.assertNotNull(instant71);
        org.junit.Assert.assertNotNull(metadataChangeTransaction72);
        org.junit.Assert.assertNull(noteOperationList73);
        org.junit.Assert.assertTrue("'" + metadataChangeContentType74 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeContentType.Corrected + "'", metadataChangeContentType74.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeContentType.Corrected));
        org.junit.Assert.assertNotNull(metadataChangeTransaction76);
    }

    @Test
    public void test42907() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest85.test42907");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.DeleteSensor deleteSensor0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.DeleteSensor();
        java.lang.String str1 = deleteSensor0.UniqueId;
        deleteSensor0.UniqueId = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ";
        java.lang.String str4 = deleteSensor0.getUniqueId();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ" + "'", str4, "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ");
    }

    @Test
    public void test42908() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest85.test42908");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Vertical vertical0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Vertical();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay1 = vertical0.SoundedDepth;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay2 = null;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Vertical vertical3 = vertical0.setSegmentDischarge(quantityWithDisplay2);
        java.lang.Boolean boolean4 = vertical0.getIsDischargeEstimated();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Vertical vertical6 = vertical0.setIsDischargeEstimated((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay7 = vertical6.SegmentDischarge;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Vertical vertical8 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Vertical();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FlowDirectionType flowDirectionType9 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FlowDirectionType.Reversed;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Vertical vertical10 = vertical8.setFlowDirection(flowDirectionType9);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VelocityObservation velocityObservation11 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VelocityObservation();
        vertical8.VelocityObservation = velocityObservation11;
        java.util.List<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VelocityDepthObservation> velocityDepthObservationList13 = velocityObservation11.getObservations();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Vertical vertical14 = vertical6.setVelocityObservation(velocityObservation11);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CrossSectionSurveyActivity crossSectionSurveyActivity15 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CrossSectionSurveyActivity();
        java.lang.String str16 = crossSectionSurveyActivity15.Channel;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CrossSectionSurveyActivity crossSectionSurveyActivity18 = crossSectionSurveyActivity15.setComments("ZZZZZ");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CrossSectionPoint crossSectionPoint19 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CrossSectionPoint();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay20 = null;
        crossSectionPoint19.Distance = quantityWithDisplay20;
        crossSectionPoint19.PointOrder = 1;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay24 = crossSectionPoint19.getElevation();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CrossSectionPoint crossSectionPoint26 = crossSectionPoint19.setComments("hi!");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay27 = null;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CrossSectionPoint crossSectionPoint28 = crossSectionPoint26.setElevation(quantityWithDisplay27);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay29 = null;
        crossSectionPoint28.Depth = quantityWithDisplay29;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DatumConvertedQuantityWithDisplay datumConvertedQuantityWithDisplay31 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DatumConvertedQuantityWithDisplay();
        crossSectionPoint28.Depth = datumConvertedQuantityWithDisplay31;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity pointVelocityDischargeActivity33 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity pointVelocityDischargeActivity35 = pointVelocityDischargeActivity33.setIsValid((java.lang.Boolean) false);
        pointVelocityDischargeActivity33.Manufacturer = "2021.4.62.0";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity pointVelocityDischargeActivity39 = pointVelocityDischargeActivity33.setSuspensionWeight("");
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Vertical> verticalList40 = pointVelocityDischargeActivity39.getVerticals();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DatumConvertedQuantityWithDisplay datumConvertedQuantityWithDisplay41 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DatumConvertedQuantityWithDisplay();
        pointVelocityDischargeActivity39.DistanceToMeter = datumConvertedQuantityWithDisplay41;
        crossSectionPoint28.Elevation = datumConvertedQuantityWithDisplay41;
        crossSectionSurveyActivity15.Stage = datumConvertedQuantityWithDisplay41;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Vertical vertical45 = vertical6.setMeanVelocity((com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay) datumConvertedQuantityWithDisplay41);
        java.lang.Double double46 = vertical6.getCosineOfUniqueFlow();
        org.junit.Assert.assertNull(quantityWithDisplay1);
        org.junit.Assert.assertNotNull(vertical3);
        org.junit.Assert.assertNull(boolean4);
        org.junit.Assert.assertNotNull(vertical6);
        org.junit.Assert.assertNull(quantityWithDisplay7);
        org.junit.Assert.assertTrue("'" + flowDirectionType9 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FlowDirectionType.Reversed + "'", flowDirectionType9.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FlowDirectionType.Reversed));
        org.junit.Assert.assertNotNull(vertical10);
        org.junit.Assert.assertNull(velocityDepthObservationList13);
        org.junit.Assert.assertNotNull(vertical14);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNotNull(crossSectionSurveyActivity18);
        org.junit.Assert.assertNull(quantityWithDisplay24);
        org.junit.Assert.assertNotNull(crossSectionPoint26);
        org.junit.Assert.assertNotNull(crossSectionPoint28);
        org.junit.Assert.assertNotNull(pointVelocityDischargeActivity35);
        org.junit.Assert.assertNotNull(pointVelocityDischargeActivity39);
        org.junit.Assert.assertNull(verticalList40);
        org.junit.Assert.assertNotNull(vertical45);
        org.junit.Assert.assertNull(double46);
    }

    @Test
    public void test42909() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest85.test42909");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemTaxon importItemTaxon0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemTaxon();
        java.util.List<java.lang.String> strList1 = importItemTaxon0.getWarningMessages();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Taxon taxon2 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemTaxon importItemTaxon3 = importItemTaxon0.setItem(taxon2);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostCalculatedDerivedTimeSeries postCalculatedDerivedTimeSeries4 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostCalculatedDerivedTimeSeries();
        java.lang.String str5 = postCalculatedDerivedTimeSeries4.LocationUniqueId;
        java.util.List<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeValue> extendedAttributeValueList6 = postCalculatedDerivedTimeSeries4.getExtendedAttributeValues();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemTaxon importItemTaxon7 = importItemTaxon3.setErrors((java.lang.Object) postCalculatedDerivedTimeSeries4);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObject importItemObject8 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObject();
        java.util.List<java.lang.String> strList9 = importItemObject8.getWarningMessages();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportChangeItem[] importChangeItemArray10 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportChangeItem[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportChangeItem> importChangeItemList11 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportChangeItem>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportChangeItem>) importChangeItemList11, importChangeItemArray10);
        importItemObject8.ItemComparison = importChangeItemList11;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags14 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray18 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList19 = new java.util.ArrayList<java.lang.String>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList19, strArray18);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags21 = putLocationTags14.setTagUniqueIds(strList19);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObject importItemObject22 = importItemObject8.setExistingItem((java.lang.Object) putLocationTags14);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.OpenIdConnectUser openIdConnectUser23 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.OpenIdConnectUser();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.OpenIdConnectUser openIdConnectUser25 = openIdConnectUser23.setIdentifier("");
        java.lang.Boolean boolean26 = openIdConnectUser25.CanConfigureSystem;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObject importItemObject27 = importItemObject8.setErrors((java.lang.Object) openIdConnectUser25);
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportChangeItem> importChangeItemList28 = importItemObject27.ItemComparison;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemTaxon importItemTaxon29 = importItemTaxon7.setItemComparison(importChangeItemList28);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemTaxon importItemTaxon30 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemTaxon();
        java.util.List<java.lang.String> strList31 = importItemTaxon30.getWarningMessages();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Taxon taxon32 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemTaxon importItemTaxon33 = importItemTaxon30.setItem(taxon32);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostCalculatedDerivedTimeSeries postCalculatedDerivedTimeSeries34 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostCalculatedDerivedTimeSeries();
        java.lang.String str35 = postCalculatedDerivedTimeSeries34.LocationUniqueId;
        java.util.List<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeValue> extendedAttributeValueList36 = postCalculatedDerivedTimeSeries34.getExtendedAttributeValues();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemTaxon importItemTaxon37 = importItemTaxon33.setErrors((java.lang.Object) postCalculatedDerivedTimeSeries34);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Taxon taxon38 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Taxon();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemTaxon importItemTaxon39 = importItemTaxon33.setExistingItem(taxon38);
        importItemTaxon7.Item = taxon38;
        taxon38.ItisTsn = "yyyy'-'MM'-'dd'T'HH':'mm':'ss";
        taxon38.ItisTsn = "MaxDuration";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutUnit putUnit45 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutUnit();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes46 = putUnit45.getAuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutDetectioncondition putDetectioncondition47 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutDetectioncondition();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes48 = putDetectioncondition47.getAuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutDetectioncondition putDetectioncondition50 = putDetectioncondition47.setCustomId("http");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivity samplingPlanPlannedActivity51 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivity();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes52 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivity samplingPlanPlannedActivity53 = samplingPlanPlannedActivity51.setAuditAttributes(auditAttributes52);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes54 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes56 = auditAttributes54.setCreationUserProfileId("'.'SSSSSSS");
        samplingPlanPlannedActivity53.AuditAttributes = auditAttributes54;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes58 = samplingPlanPlannedActivity53.AuditAttributes;
        putDetectioncondition47.AuditAttributes = auditAttributes58;
        putUnit45.AuditAttributes = auditAttributes58;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes62 = auditAttributes58.setCreationUserProfileId("http");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Taxon taxon63 = taxon38.setAuditAttributes(auditAttributes62);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes64 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Taxon taxon65 = taxon63.setAuditAttributes(auditAttributes64);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Taxon taxon67 = taxon65.setItisComment("/AQUARIUS");
        java.lang.String str68 = taxon65.getId();
        java.lang.String str69 = taxon65.getParentId();
        org.junit.Assert.assertNull(strList1);
        org.junit.Assert.assertNotNull(importItemTaxon3);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(extendedAttributeValueList6);
        org.junit.Assert.assertNotNull(importItemTaxon7);
        org.junit.Assert.assertNull(strList9);
        org.junit.Assert.assertNotNull(importChangeItemArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(putLocationTags21);
        org.junit.Assert.assertNotNull(importItemObject22);
        org.junit.Assert.assertNotNull(openIdConnectUser25);
        org.junit.Assert.assertNull(boolean26);
        org.junit.Assert.assertNotNull(importItemObject27);
        org.junit.Assert.assertNotNull(importChangeItemList28);
        org.junit.Assert.assertNotNull(importItemTaxon29);
        org.junit.Assert.assertNull(strList31);
        org.junit.Assert.assertNotNull(importItemTaxon33);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertNull(extendedAttributeValueList36);
        org.junit.Assert.assertNotNull(importItemTaxon37);
        org.junit.Assert.assertNotNull(importItemTaxon39);
        org.junit.Assert.assertNull(auditAttributes46);
        org.junit.Assert.assertNull(auditAttributes48);
        org.junit.Assert.assertNotNull(putDetectioncondition50);
        org.junit.Assert.assertNotNull(samplingPlanPlannedActivity53);
        org.junit.Assert.assertNotNull(auditAttributes56);
        org.junit.Assert.assertNotNull(auditAttributes58);
        org.junit.Assert.assertNotNull(auditAttributes62);
        org.junit.Assert.assertNotNull(taxon63);
        org.junit.Assert.assertNotNull(taxon65);
        org.junit.Assert.assertNotNull(taxon67);
        org.junit.Assert.assertNull(str68);
        org.junit.Assert.assertNull(str69);
    }

    @Test
    public void test42910() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest85.test42910");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportSummary importSummary0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportSummary();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple importHistoryEventSimple1 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple();
        java.time.OffsetDateTime offsetDateTime2 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple importHistoryEventSimple3 = importHistoryEventSimple1.setImportTime(offsetDateTime2);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportSummary importSummary4 = importSummary0.setImportHistoryEventSimple(importHistoryEventSimple3);
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportError> importErrorList5 = importSummary0.getImportJobErrors();
        java.lang.Integer int6 = importSummary0.getExpectedCount();
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObject> importItemObjectList7 = importSummary0.getNonErrorImportItems();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportSummary importSummary9 = importSummary0.setExpectedCount((java.lang.Integer) 100);
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObject> importItemObjectList10 = importSummary9.ErrorImportItems;
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObject> importItemObjectList11 = importSummary9.getNonErrorImportItems();
        org.junit.Assert.assertNotNull(importHistoryEventSimple3);
        org.junit.Assert.assertNotNull(importSummary4);
        org.junit.Assert.assertNull(importErrorList5);
        org.junit.Assert.assertNull(int6);
        org.junit.Assert.assertNull(importItemObjectList7);
        org.junit.Assert.assertNotNull(importSummary9);
        org.junit.Assert.assertNull(importItemObjectList10);
        org.junit.Assert.assertNull(importItemObjectList11);
    }

    @Test
    public void test42911() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest85.test42911");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemTaxon importItemTaxon0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemTaxon();
        java.util.List<java.lang.String> strList1 = importItemTaxon0.getWarningMessages();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Taxon taxon2 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemTaxon importItemTaxon3 = importItemTaxon0.setItem(taxon2);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostCalculatedDerivedTimeSeries postCalculatedDerivedTimeSeries4 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostCalculatedDerivedTimeSeries();
        java.lang.String str5 = postCalculatedDerivedTimeSeries4.LocationUniqueId;
        java.util.List<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeValue> extendedAttributeValueList6 = postCalculatedDerivedTimeSeries4.getExtendedAttributeValues();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemTaxon importItemTaxon7 = importItemTaxon3.setErrors((java.lang.Object) postCalculatedDerivedTimeSeries4);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObject importItemObject8 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObject();
        java.util.List<java.lang.String> strList9 = importItemObject8.getWarningMessages();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportChangeItem[] importChangeItemArray10 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportChangeItem[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportChangeItem> importChangeItemList11 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportChangeItem>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportChangeItem>) importChangeItemList11, importChangeItemArray10);
        importItemObject8.ItemComparison = importChangeItemList11;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags14 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray18 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList19 = new java.util.ArrayList<java.lang.String>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList19, strArray18);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags21 = putLocationTags14.setTagUniqueIds(strList19);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObject importItemObject22 = importItemObject8.setExistingItem((java.lang.Object) putLocationTags14);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.OpenIdConnectUser openIdConnectUser23 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.OpenIdConnectUser();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.OpenIdConnectUser openIdConnectUser25 = openIdConnectUser23.setIdentifier("");
        java.lang.Boolean boolean26 = openIdConnectUser25.CanConfigureSystem;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObject importItemObject27 = importItemObject8.setErrors((java.lang.Object) openIdConnectUser25);
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportChangeItem> importChangeItemList28 = importItemObject27.ItemComparison;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemTaxon importItemTaxon29 = importItemTaxon7.setItemComparison(importChangeItemList28);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemTaxon importItemTaxon30 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemTaxon();
        java.util.List<java.lang.String> strList31 = importItemTaxon30.getWarningMessages();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Taxon taxon32 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemTaxon importItemTaxon33 = importItemTaxon30.setItem(taxon32);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostCalculatedDerivedTimeSeries postCalculatedDerivedTimeSeries34 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostCalculatedDerivedTimeSeries();
        java.lang.String str35 = postCalculatedDerivedTimeSeries34.LocationUniqueId;
        java.util.List<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeValue> extendedAttributeValueList36 = postCalculatedDerivedTimeSeries34.getExtendedAttributeValues();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemTaxon importItemTaxon37 = importItemTaxon33.setErrors((java.lang.Object) postCalculatedDerivedTimeSeries34);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Taxon taxon38 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Taxon();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemTaxon importItemTaxon39 = importItemTaxon33.setExistingItem(taxon38);
        importItemTaxon7.Item = taxon38;
        taxon38.Source = "MaxDuration";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSchedule putSchedule43 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSchedule();
        java.time.OffsetDateTime offsetDateTime44 = putSchedule43.StartDate;
        java.time.OffsetDateTime offsetDateTime45 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSchedule putSchedule46 = putSchedule43.setEndDate(offsetDateTime45);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes47 = putSchedule46.AuditAttributes;
        java.time.OffsetDateTime offsetDateTime48 = putSchedule46.getEndDate();
        java.time.OffsetDateTime offsetDateTime49 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSchedule putSchedule50 = putSchedule46.setStartDate(offsetDateTime49);
        java.lang.Integer int51 = putSchedule46.SamplingLocationGroupSelectionTypeRandomCount;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.RecurrenceDayMonthlyType recurrenceDayMonthlyType52 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.RecurrenceDayMonthlyType.LAST_DAY_OF_MONTH;
        putSchedule46.RecurrenceDayMonthly = recurrenceDayMonthlyType52;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Unit unit54 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Unit();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes55 = unit54.AuditAttributes;
        unit54.BaseMultiplier = 0.0d;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutAccessGroup putAccessGroup58 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutAccessGroup();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivity samplingPlanPlannedActivity59 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivity();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes60 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivity samplingPlanPlannedActivity61 = samplingPlanPlannedActivity59.setAuditAttributes(auditAttributes60);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes62 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes64 = auditAttributes62.setCreationUserProfileId("'.'SSSSSSS");
        samplingPlanPlannedActivity61.AuditAttributes = auditAttributes62;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes66 = samplingPlanPlannedActivity61.AuditAttributes;
        putAccessGroup58.AuditAttributes = auditAttributes66;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Unit unit68 = unit54.setAuditAttributes(auditAttributes66);
        putSchedule46.AuditAttributes = auditAttributes66;
        java.lang.String str70 = auditAttributes66.getCreationUserProfileId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Taxon taxon71 = taxon38.setAuditAttributes(auditAttributes66);
        java.lang.String str72 = taxon38.ScientificName;
        taxon38.ParentId = "multipart/form-data; boundary=****f2ce0d54-dac7-4cd0-b74f-1024089261f9****";
        org.junit.Assert.assertNull(strList1);
        org.junit.Assert.assertNotNull(importItemTaxon3);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(extendedAttributeValueList6);
        org.junit.Assert.assertNotNull(importItemTaxon7);
        org.junit.Assert.assertNull(strList9);
        org.junit.Assert.assertNotNull(importChangeItemArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(putLocationTags21);
        org.junit.Assert.assertNotNull(importItemObject22);
        org.junit.Assert.assertNotNull(openIdConnectUser25);
        org.junit.Assert.assertNull(boolean26);
        org.junit.Assert.assertNotNull(importItemObject27);
        org.junit.Assert.assertNotNull(importChangeItemList28);
        org.junit.Assert.assertNotNull(importItemTaxon29);
        org.junit.Assert.assertNull(strList31);
        org.junit.Assert.assertNotNull(importItemTaxon33);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertNull(extendedAttributeValueList36);
        org.junit.Assert.assertNotNull(importItemTaxon37);
        org.junit.Assert.assertNotNull(importItemTaxon39);
        org.junit.Assert.assertNull(offsetDateTime44);
        org.junit.Assert.assertNotNull(putSchedule46);
        org.junit.Assert.assertNull(auditAttributes47);
        org.junit.Assert.assertNull(offsetDateTime48);
        org.junit.Assert.assertNotNull(putSchedule50);
        org.junit.Assert.assertNull(int51);
        org.junit.Assert.assertTrue("'" + recurrenceDayMonthlyType52 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.RecurrenceDayMonthlyType.LAST_DAY_OF_MONTH + "'", recurrenceDayMonthlyType52.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.RecurrenceDayMonthlyType.LAST_DAY_OF_MONTH));
        org.junit.Assert.assertNull(auditAttributes55);
        org.junit.Assert.assertNotNull(samplingPlanPlannedActivity61);
        org.junit.Assert.assertNotNull(auditAttributes64);
        org.junit.Assert.assertNotNull(auditAttributes66);
        org.junit.Assert.assertNotNull(unit68);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "'.'SSSSSSS" + "'", str70, "'.'SSSSSSS");
        org.junit.Assert.assertNotNull(taxon71);
        org.junit.Assert.assertNull(str72);
    }

    @Test
    public void test42912() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest85.test42912");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DeleteAccessGroup deleteAccessGroup0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DeleteAccessGroup();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DeleteAccessGroup deleteAccessGroup2 = deleteAccessGroup0.setId("multipart/form-data; boundary=****bbcf5f9e-6ccf-4b63-91ab-6e645caf02af****");
        java.lang.String str3 = deleteAccessGroup2.Id;
        java.lang.String str4 = deleteAccessGroup2.getId();
        org.junit.Assert.assertNotNull(deleteAccessGroup2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "multipart/form-data; boundary=****bbcf5f9e-6ccf-4b63-91ab-6e645caf02af****" + "'", str3, "multipart/form-data; boundary=****bbcf5f9e-6ccf-4b63-91ab-6e645caf02af****");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "multipart/form-data; boundary=****bbcf5f9e-6ccf-4b63-91ab-6e645caf02af****" + "'", str4, "multipart/form-data; boundary=****bbcf5f9e-6ccf-4b63-91ab-6e645caf02af****");
    }

    @Test
    public void test42913() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest85.test42913");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.GroundWaterMeasurement groundWaterMeasurement0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.GroundWaterMeasurement();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity pointVelocityDischargeActivity1 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity();
        java.lang.String str2 = pointVelocityDischargeActivity1.SoftwareVersion;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity pointVelocityDischargeActivity4 = pointVelocityDischargeActivity1.setIsValid((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay5 = pointVelocityDischargeActivity4.getVelocityAverage();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary6 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary8 = dischargeSummary6.setPublish((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay9 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay();
        dischargeSummary8.DifferenceDuringVisit = doubleWithDisplay9;
        java.lang.String str11 = doubleWithDisplay9.getDisplay();
        pointVelocityDischargeActivity4.MeanObservationDurationInSeconds = doubleWithDisplay9;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.GroundWaterMeasurement groundWaterMeasurement13 = groundWaterMeasurement0.setHold(doubleWithDisplay9);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay14 = groundWaterMeasurement0.getHold();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay15 = groundWaterMeasurement0.WaterLevel;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay16 = groundWaterMeasurement0.getTapeCorrection();
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNotNull(pointVelocityDischargeActivity4);
        org.junit.Assert.assertNull(quantityWithDisplay5);
        org.junit.Assert.assertNotNull(dischargeSummary8);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNotNull(groundWaterMeasurement13);
        org.junit.Assert.assertNotNull(doubleWithDisplay14);
        org.junit.Assert.assertNull(doubleWithDisplay15);
        org.junit.Assert.assertNull(doubleWithDisplay16);
    }

    @Test
    public void test42914() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest85.test42914");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostExtendedAttribute postExtendedAttribute0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostExtendedAttribute();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DataType dataType1 = postExtendedAttribute0.getDataType();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AppliesToType appliesToType2 = postExtendedAttribute0.getAppliesToType();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostExtendedAttribute postExtendedAttribute4 = postExtendedAttribute0.setId("hi!");
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttributeListItem> extendedAttributeListItemList5 = postExtendedAttribute4.getDropDownListItems();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttributeDefinition extendedAttributeDefinition6 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttributeDefinition();
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttributeListItem> extendedAttributeListItemList7 = extendedAttributeDefinition6.getDropDownListItems();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DataType dataType8 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttributeDefinition extendedAttributeDefinition9 = extendedAttributeDefinition6.setDataType(dataType8);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AppliesToType appliesToType10 = extendedAttributeDefinition6.getAppliesToType();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DataType dataType11 = extendedAttributeDefinition6.getDataType();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes12 = extendedAttributeDefinition6.getAuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DataType dataType13 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DataType.NUMBER;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttributeDefinition extendedAttributeDefinition14 = extendedAttributeDefinition6.setDataType(dataType13);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostExtendedAttribute postExtendedAttribute15 = postExtendedAttribute4.setDataType(dataType13);
        java.lang.String str16 = postExtendedAttribute4.DefaultValue;
        org.junit.Assert.assertNull(dataType1);
        org.junit.Assert.assertNull(appliesToType2);
        org.junit.Assert.assertNotNull(postExtendedAttribute4);
        org.junit.Assert.assertNull(extendedAttributeListItemList5);
        org.junit.Assert.assertNull(extendedAttributeListItemList7);
        org.junit.Assert.assertNotNull(extendedAttributeDefinition9);
        org.junit.Assert.assertNull(appliesToType10);
        org.junit.Assert.assertNull(dataType11);
        org.junit.Assert.assertNull(auditAttributes12);
        org.junit.Assert.assertTrue("'" + dataType13 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DataType.NUMBER + "'", dataType13.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DataType.NUMBER));
        org.junit.Assert.assertNotNull(extendedAttributeDefinition14);
        org.junit.Assert.assertNotNull(postExtendedAttribute15);
        org.junit.Assert.assertNull(str16);
    }

    @Test
    public void test42915() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest85.test42915");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingModelDescription ratingModelDescription0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingModelDescription();
        java.lang.String str1 = ratingModelDescription0.getDescription();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingModelDescription ratingModelDescription3 = ratingModelDescription0.setOutputUnit("MaxDuration");
        java.lang.String str4 = ratingModelDescription3.TemplateName;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(ratingModelDescription3);
        org.junit.Assert.assertNull(str4);
    }

    @Test
    public void test42916() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest85.test42916");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ExpandedRatingCurve expandedRatingCurve0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ExpandedRatingCurve();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingCurveType ratingCurveType1 = expandedRatingCurve0.Type;
        expandedRatingCurve0.IsBlended = false;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ExpandedRatingCurve expandedRatingCurve5 = expandedRatingCurve0.setIsBlended((java.lang.Boolean) true);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PeriodOfApplicability[] periodOfApplicabilityArray6 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PeriodOfApplicability[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PeriodOfApplicability> periodOfApplicabilityList7 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PeriodOfApplicability>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PeriodOfApplicability>) periodOfApplicabilityList7, periodOfApplicabilityArray6);
        expandedRatingCurve0.PeriodsOfApplicability = periodOfApplicabilityList7;
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingPoint> ratingPointList10 = expandedRatingCurve0.AdjustedRatingTable;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingShift ratingShift11 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingShift();
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingShiftPoint> ratingShiftPointList12 = ratingShift11.getShiftPoints();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingShift ratingShift13 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingShift();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PeriodOfApplicability periodOfApplicability14 = null;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingShift ratingShift15 = ratingShift13.setPeriodOfApplicability(periodOfApplicability14);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PeriodOfApplicability periodOfApplicability16 = ratingShift13.PeriodOfApplicability;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PeriodOfApplicability periodOfApplicability17 = ratingShift13.getPeriodOfApplicability();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingShift ratingShift18 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingShift();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingShift ratingShift19 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingShift();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PeriodOfApplicability periodOfApplicability20 = null;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingShift ratingShift21 = ratingShift19.setPeriodOfApplicability(periodOfApplicability20);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingShift ratingShift22 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingShift();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PeriodOfApplicability periodOfApplicability23 = null;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingShift ratingShift24 = ratingShift22.setPeriodOfApplicability(periodOfApplicability23);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingShiftPoint ratingShiftPoint25 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingShiftPoint();
        java.lang.Double double26 = ratingShiftPoint25.getInputValue();
        java.lang.Double double27 = ratingShiftPoint25.InputValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingShiftPoint ratingShiftPoint28 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingShiftPoint();
        java.lang.Double double29 = ratingShiftPoint28.getInputValue();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingShiftPoint ratingShiftPoint30 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingShiftPoint();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingShiftPoint ratingShiftPoint32 = ratingShiftPoint30.setInputValue((java.lang.Double) 0.0d);
        ratingShiftPoint30.Shift = 10.0d;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingShiftPoint ratingShiftPoint35 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingShiftPoint();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingShiftPoint ratingShiftPoint37 = ratingShiftPoint35.setInputValue((java.lang.Double) 0.0d);
        ratingShiftPoint35.Shift = 10.0d;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingShiftPoint ratingShiftPoint40 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingShiftPoint();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingShiftPoint[] ratingShiftPointArray41 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingShiftPoint[] { ratingShiftPoint25, ratingShiftPoint28, ratingShiftPoint30, ratingShiftPoint35, ratingShiftPoint40 };
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingShiftPoint> ratingShiftPointList42 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingShiftPoint>();
        boolean boolean43 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingShiftPoint>) ratingShiftPointList42, ratingShiftPointArray41);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingShift ratingShift44 = ratingShift22.setShiftPoints(ratingShiftPointList42);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingShift[] ratingShiftArray45 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingShift[] { ratingShift11, ratingShift13, ratingShift18, ratingShift19, ratingShift22 };
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingShift> ratingShiftList46 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingShift>();
        boolean boolean47 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingShift>) ratingShiftList46, ratingShiftArray45);
        expandedRatingCurve0.Shifts = ratingShiftList46;
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingShift> ratingShiftList49 = expandedRatingCurve0.getShifts();
        expandedRatingCurve0.Remarks = "/AQUARIUS/Provisioning/v1";
        java.lang.String str52 = expandedRatingCurve0.getId();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ExpandedRatingCurve expandedRatingCurve54 = expandedRatingCurve0.setIsBlended((java.lang.Boolean) false);
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PeriodOfApplicability> periodOfApplicabilityList55 = expandedRatingCurve54.PeriodsOfApplicability;
        org.junit.Assert.assertNull(ratingCurveType1);
        org.junit.Assert.assertNotNull(expandedRatingCurve5);
        org.junit.Assert.assertNotNull(periodOfApplicabilityArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(ratingPointList10);
        org.junit.Assert.assertNull(ratingShiftPointList12);
        org.junit.Assert.assertNotNull(ratingShift15);
        org.junit.Assert.assertNull(periodOfApplicability16);
        org.junit.Assert.assertNull(periodOfApplicability17);
        org.junit.Assert.assertNotNull(ratingShift21);
        org.junit.Assert.assertNotNull(ratingShift24);
        org.junit.Assert.assertNull(double26);
        org.junit.Assert.assertNull(double27);
        org.junit.Assert.assertNull(double29);
        org.junit.Assert.assertNotNull(ratingShiftPoint32);
        org.junit.Assert.assertNotNull(ratingShiftPoint37);
        org.junit.Assert.assertNotNull(ratingShiftPointArray41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(ratingShift44);
        org.junit.Assert.assertNotNull(ratingShiftArray45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(ratingShiftList49);
        org.junit.Assert.assertNull(str52);
        org.junit.Assert.assertNotNull(expandedRatingCurve54);
        org.junit.Assert.assertNotNull(periodOfApplicabilityList55);
    }

    @Test
    public void test42917() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest85.test42917");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.PostLocationAttachmentResponse postLocationAttachmentResponse0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.PostLocationAttachmentResponse();
        java.lang.String str1 = postLocationAttachmentResponse0.getComments();
        java.lang.String str2 = postLocationAttachmentResponse0.Comments;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.PostLocationAttachmentResponse postLocationAttachmentResponse4 = postLocationAttachmentResponse0.setComments("");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.AppliedTag appliedTag5 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.AppliedTag();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.AppliedTag appliedTag7 = appliedTag5.setValue("'.'SSSSSSS");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.AppliedTag appliedTag9 = appliedTag5.setValue("/AQUARIUS/Acquisition/v2://9999-12-31T23:59:59.999Z");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.AppliedTag appliedTag10 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.AppliedTag();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.AppliedTag appliedTag12 = appliedTag10.setValue("'.'SSSSSSS");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.AppliedTag appliedTag13 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.AppliedTag();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.AppliedTag appliedTag15 = appliedTag13.setValue("'.'SSSSSSS");
        appliedTag13.Value = "'.'SSSSSSS";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.AppliedTag appliedTag19 = appliedTag13.setKey("MaxInstant");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.AppliedTag appliedTag20 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.AppliedTag();
        appliedTag20.Key = "9999-12-31T23:59:59.999Z";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.AppliedTag appliedTag24 = appliedTag20.setKey("http");
        java.lang.String str25 = appliedTag20.UniqueId;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.AppliedTag appliedTag26 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.AppliedTag();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.AppliedTag appliedTag28 = appliedTag26.setValue("'.'SSSSSSS");
        appliedTag26.Value = "'.'SSSSSSS";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.AppliedTag appliedTag32 = appliedTag26.setKey("MaxInstant");
        appliedTag26.Key = "MaxInstant";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.AppliedTag appliedTag35 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.AppliedTag();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.AppliedTag appliedTag37 = appliedTag35.setValue("'.'SSSSSSS");
        appliedTag35.Value = "'.'SSSSSSS";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.AppliedTag appliedTag41 = appliedTag35.setKey("MaxInstant");
        java.lang.String str42 = appliedTag35.getValue();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.AppliedTag appliedTag43 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.AppliedTag();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.AppliedTag appliedTag45 = appliedTag43.setValue("MinInstant");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.AppliedTag appliedTag46 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.AppliedTag();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.AppliedTag appliedTag48 = appliedTag46.setValue("'.'SSSSSSS");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.AppliedTag appliedTag50 = appliedTag46.setValue("/AQUARIUS/Acquisition/v2://9999-12-31T23:59:59.999Z");
        java.lang.String str51 = appliedTag46.getValue();
        java.lang.String str52 = appliedTag46.getKey();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.AppliedTag appliedTag53 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.AppliedTag();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.AppliedTag appliedTag55 = appliedTag53.setValue("'.'SSSSSSS");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.AppliedTag appliedTag56 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.AppliedTag();
        appliedTag56.Key = "9999-12-31T23:59:59.999Z";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.AppliedTag appliedTag60 = appliedTag56.setKey("http");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.AppliedTag appliedTag61 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.AppliedTag();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.AppliedTag appliedTag63 = appliedTag61.setValue("'.'SSSSSSS");
        appliedTag61.Value = "0001-01-01T00:00:00.000Z";
        appliedTag61.Key = "multipart/form-data; boundary=****44f0772e-c3ca-4316-8e2a-61ec8540d661****";
        java.lang.String str68 = appliedTag61.getValue();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.AppliedTag appliedTag69 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.AppliedTag();
        appliedTag69.Key = "9999-12-31T23:59:59.999Z";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.AppliedTag appliedTag73 = appliedTag69.setKey("http");
        java.lang.String str74 = appliedTag73.UniqueId;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.AppliedTag[] appliedTagArray75 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.AppliedTag[] { appliedTag9, appliedTag12, appliedTag13, appliedTag20, appliedTag26, appliedTag35, appliedTag43, appliedTag46, appliedTag53, appliedTag60, appliedTag61, appliedTag73 };
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.AppliedTag> appliedTagList76 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.AppliedTag>();
        boolean boolean77 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.AppliedTag>) appliedTagList76, appliedTagArray75);
        postLocationAttachmentResponse4.Tags = appliedTagList76;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.PostLocationAttachmentResponse postLocationAttachmentResponse80 = postLocationAttachmentResponse4.setUrl("MinInstant");
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNotNull(postLocationAttachmentResponse4);
        org.junit.Assert.assertNotNull(appliedTag7);
        org.junit.Assert.assertNotNull(appliedTag9);
        org.junit.Assert.assertNotNull(appliedTag12);
        org.junit.Assert.assertNotNull(appliedTag15);
        org.junit.Assert.assertNotNull(appliedTag19);
        org.junit.Assert.assertNotNull(appliedTag24);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertNotNull(appliedTag28);
        org.junit.Assert.assertNotNull(appliedTag32);
        org.junit.Assert.assertNotNull(appliedTag37);
        org.junit.Assert.assertNotNull(appliedTag41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "'.'SSSSSSS" + "'", str42, "'.'SSSSSSS");
        org.junit.Assert.assertNotNull(appliedTag45);
        org.junit.Assert.assertNotNull(appliedTag48);
        org.junit.Assert.assertNotNull(appliedTag50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "/AQUARIUS/Acquisition/v2://9999-12-31T23:59:59.999Z" + "'", str51, "/AQUARIUS/Acquisition/v2://9999-12-31T23:59:59.999Z");
        org.junit.Assert.assertNull(str52);
        org.junit.Assert.assertNotNull(appliedTag55);
        org.junit.Assert.assertNotNull(appliedTag60);
        org.junit.Assert.assertNotNull(appliedTag63);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "0001-01-01T00:00:00.000Z" + "'", str68, "0001-01-01T00:00:00.000Z");
        org.junit.Assert.assertNotNull(appliedTag73);
        org.junit.Assert.assertNull(str74);
        org.junit.Assert.assertNotNull(appliedTagArray75);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertNotNull(postLocationAttachmentResponse80);
    }

    @Test
    public void test42918() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest85.test42918");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeActivity dischargeActivity0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeActivity();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.AdcpDischargeActivity[] adcpDischargeActivityArray1 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.AdcpDischargeActivity[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.AdcpDischargeActivity> adcpDischargeActivityList2 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.AdcpDischargeActivity>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.AdcpDischargeActivity>) adcpDischargeActivityList2, adcpDischargeActivityArray1);
        dischargeActivity0.AdcpDischargeActivities = adcpDischargeActivityList2;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.EngineeredStructureDischargeActivity[] engineeredStructureDischargeActivityArray5 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.EngineeredStructureDischargeActivity[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.EngineeredStructureDischargeActivity> engineeredStructureDischargeActivityList6 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.EngineeredStructureDischargeActivity>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.EngineeredStructureDischargeActivity>) engineeredStructureDischargeActivityList6, engineeredStructureDischargeActivityArray5);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeActivity dischargeActivity8 = dischargeActivity0.setEngineeredStructureDischargeActivities(engineeredStructureDischargeActivityList6);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.OtherMethodDischargeActivity[] otherMethodDischargeActivityArray9 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.OtherMethodDischargeActivity[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.OtherMethodDischargeActivity> otherMethodDischargeActivityList10 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.OtherMethodDischargeActivity>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.OtherMethodDischargeActivity>) otherMethodDischargeActivityList10, otherMethodDischargeActivityArray9);
        dischargeActivity0.OtherMethodDischargeActivities = otherMethodDischargeActivityList10;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VolumetricDischargeActivity[] volumetricDischargeActivityArray13 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VolumetricDischargeActivity[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VolumetricDischargeActivity> volumetricDischargeActivityList14 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VolumetricDischargeActivity>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VolumetricDischargeActivity>) volumetricDischargeActivityList14, volumetricDischargeActivityArray13);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeActivity dischargeActivity16 = dischargeActivity0.setVolumetricDischargeActivities(volumetricDischargeActivityList14);
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.EngineeredStructureDischargeActivity> engineeredStructureDischargeActivityList17 = dischargeActivity0.getEngineeredStructureDischargeActivities();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary18 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay19 = dischargeSummary18.getMeanGageHeight();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.BaseFlowType baseFlowType20 = dischargeSummary18.BaseFlow;
        java.time.Instant instant21 = dischargeSummary18.MeasurementTime;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary22 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Adjustment adjustment23 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Adjustment();
        java.lang.Double double24 = adjustment23.getAdjustmentAmount();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.AdjustmentType adjustmentType25 = adjustment23.getAdjustmentType();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.AdjustmentType adjustmentType26 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.AdjustmentType.Amount;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Adjustment adjustment27 = adjustment23.setAdjustmentType(adjustmentType26);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary28 = dischargeSummary22.setAdjustment(adjustment27);
        dischargeSummary18.Adjustment = adjustment27;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeActivity dischargeActivity30 = dischargeActivity0.setDischargeSummary(dischargeSummary18);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeActivity dischargeActivity31 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeActivity();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary32 = dischargeActivity31.DischargeSummary;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeActivity dischargeActivity33 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeActivity();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.AdcpDischargeActivity[] adcpDischargeActivityArray34 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.AdcpDischargeActivity[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.AdcpDischargeActivity> adcpDischargeActivityList35 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.AdcpDischargeActivity>();
        boolean boolean36 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.AdcpDischargeActivity>) adcpDischargeActivityList35, adcpDischargeActivityArray34);
        dischargeActivity33.AdcpDischargeActivities = adcpDischargeActivityList35;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.EngineeredStructureDischargeActivity[] engineeredStructureDischargeActivityArray38 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.EngineeredStructureDischargeActivity[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.EngineeredStructureDischargeActivity> engineeredStructureDischargeActivityList39 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.EngineeredStructureDischargeActivity>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.EngineeredStructureDischargeActivity>) engineeredStructureDischargeActivityList39, engineeredStructureDischargeActivityArray38);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeActivity dischargeActivity41 = dischargeActivity33.setEngineeredStructureDischargeActivities(engineeredStructureDischargeActivityList39);
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.EngineeredStructureDischargeActivity> engineeredStructureDischargeActivityList42 = dischargeActivity41.EngineeredStructureDischargeActivities;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeActivity dischargeActivity43 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeActivity();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.AdcpDischargeActivity[] adcpDischargeActivityArray44 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.AdcpDischargeActivity[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.AdcpDischargeActivity> adcpDischargeActivityList45 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.AdcpDischargeActivity>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.AdcpDischargeActivity>) adcpDischargeActivityList45, adcpDischargeActivityArray44);
        dischargeActivity43.AdcpDischargeActivities = adcpDischargeActivityList45;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeActivity dischargeActivity48 = dischargeActivity41.setAdcpDischargeActivities(adcpDischargeActivityList45);
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity> pointVelocityDischargeActivityList49 = dischargeActivity41.getPointVelocityDischargeActivities();
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.EngineeredStructureDischargeActivity> engineeredStructureDischargeActivityList50 = dischargeActivity41.EngineeredStructureDischargeActivities;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeActivity dischargeActivity51 = dischargeActivity31.setEngineeredStructureDischargeActivities(engineeredStructureDischargeActivityList50);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeActivity dischargeActivity52 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeActivity();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.AdcpDischargeActivity[] adcpDischargeActivityArray53 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.AdcpDischargeActivity[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.AdcpDischargeActivity> adcpDischargeActivityList54 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.AdcpDischargeActivity>();
        boolean boolean55 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.AdcpDischargeActivity>) adcpDischargeActivityList54, adcpDischargeActivityArray53);
        dischargeActivity52.AdcpDischargeActivities = adcpDischargeActivityList54;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.EngineeredStructureDischargeActivity[] engineeredStructureDischargeActivityArray57 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.EngineeredStructureDischargeActivity[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.EngineeredStructureDischargeActivity> engineeredStructureDischargeActivityList58 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.EngineeredStructureDischargeActivity>();
        boolean boolean59 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.EngineeredStructureDischargeActivity>) engineeredStructureDischargeActivityList58, engineeredStructureDischargeActivityArray57);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeActivity dischargeActivity60 = dischargeActivity52.setEngineeredStructureDischargeActivities(engineeredStructureDischargeActivityList58);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.OtherMethodDischargeActivity[] otherMethodDischargeActivityArray61 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.OtherMethodDischargeActivity[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.OtherMethodDischargeActivity> otherMethodDischargeActivityList62 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.OtherMethodDischargeActivity>();
        boolean boolean63 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.OtherMethodDischargeActivity>) otherMethodDischargeActivityList62, otherMethodDischargeActivityArray61);
        dischargeActivity52.OtherMethodDischargeActivities = otherMethodDischargeActivityList62;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VolumetricDischargeActivity[] volumetricDischargeActivityArray65 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VolumetricDischargeActivity[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VolumetricDischargeActivity> volumetricDischargeActivityList66 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VolumetricDischargeActivity>();
        boolean boolean67 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VolumetricDischargeActivity>) volumetricDischargeActivityList66, volumetricDischargeActivityArray65);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeActivity dischargeActivity68 = dischargeActivity52.setVolumetricDischargeActivities(volumetricDischargeActivityList66);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeActivity dischargeActivity69 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeActivity();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.AdcpDischargeActivity[] adcpDischargeActivityArray70 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.AdcpDischargeActivity[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.AdcpDischargeActivity> adcpDischargeActivityList71 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.AdcpDischargeActivity>();
        boolean boolean72 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.AdcpDischargeActivity>) adcpDischargeActivityList71, adcpDischargeActivityArray70);
        dischargeActivity69.AdcpDischargeActivities = adcpDischargeActivityList71;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.EngineeredStructureDischargeActivity[] engineeredStructureDischargeActivityArray74 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.EngineeredStructureDischargeActivity[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.EngineeredStructureDischargeActivity> engineeredStructureDischargeActivityList75 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.EngineeredStructureDischargeActivity>();
        boolean boolean76 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.EngineeredStructureDischargeActivity>) engineeredStructureDischargeActivityList75, engineeredStructureDischargeActivityArray74);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeActivity dischargeActivity77 = dischargeActivity69.setEngineeredStructureDischargeActivities(engineeredStructureDischargeActivityList75);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.OtherMethodDischargeActivity[] otherMethodDischargeActivityArray78 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.OtherMethodDischargeActivity[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.OtherMethodDischargeActivity> otherMethodDischargeActivityList79 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.OtherMethodDischargeActivity>();
        boolean boolean80 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.OtherMethodDischargeActivity>) otherMethodDischargeActivityList79, otherMethodDischargeActivityArray78);
        dischargeActivity69.OtherMethodDischargeActivities = otherMethodDischargeActivityList79;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeActivity dischargeActivity82 = dischargeActivity52.setOtherMethodDischargeActivities(otherMethodDischargeActivityList79);
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VolumetricDischargeActivity> volumetricDischargeActivityList83 = dischargeActivity82.getVolumetricDischargeActivities();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeActivity dischargeActivity84 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeActivity();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.AdcpDischargeActivity[] adcpDischargeActivityArray85 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.AdcpDischargeActivity[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.AdcpDischargeActivity> adcpDischargeActivityList86 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.AdcpDischargeActivity>();
        boolean boolean87 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.AdcpDischargeActivity>) adcpDischargeActivityList86, adcpDischargeActivityArray85);
        dischargeActivity84.AdcpDischargeActivities = adcpDischargeActivityList86;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.EngineeredStructureDischargeActivity[] engineeredStructureDischargeActivityArray89 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.EngineeredStructureDischargeActivity[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.EngineeredStructureDischargeActivity> engineeredStructureDischargeActivityList90 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.EngineeredStructureDischargeActivity>();
        boolean boolean91 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.EngineeredStructureDischargeActivity>) engineeredStructureDischargeActivityList90, engineeredStructureDischargeActivityArray89);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeActivity dischargeActivity92 = dischargeActivity84.setEngineeredStructureDischargeActivities(engineeredStructureDischargeActivityList90);
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.EngineeredStructureDischargeActivity> engineeredStructureDischargeActivityList93 = dischargeActivity92.EngineeredStructureDischargeActivities;
        dischargeActivity82.EngineeredStructureDischargeActivities = engineeredStructureDischargeActivityList93;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeActivity dischargeActivity95 = dischargeActivity31.setEngineeredStructureDischargeActivities(engineeredStructureDischargeActivityList93);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeActivity dischargeActivity96 = dischargeActivity30.setEngineeredStructureDischargeActivities(engineeredStructureDischargeActivityList93);
        org.junit.Assert.assertNotNull(adcpDischargeActivityArray1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(engineeredStructureDischargeActivityArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(dischargeActivity8);
        org.junit.Assert.assertNotNull(otherMethodDischargeActivityArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(volumetricDischargeActivityArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(dischargeActivity16);
        org.junit.Assert.assertNotNull(engineeredStructureDischargeActivityList17);
        org.junit.Assert.assertNull(quantityWithDisplay19);
        org.junit.Assert.assertNull(baseFlowType20);
        org.junit.Assert.assertNull(instant21);
        org.junit.Assert.assertNull(double24);
        org.junit.Assert.assertNull(adjustmentType25);
        org.junit.Assert.assertTrue("'" + adjustmentType26 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.AdjustmentType.Amount + "'", adjustmentType26.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.AdjustmentType.Amount));
        org.junit.Assert.assertNotNull(adjustment27);
        org.junit.Assert.assertNotNull(dischargeSummary28);
        org.junit.Assert.assertNotNull(dischargeActivity30);
        org.junit.Assert.assertNull(dischargeSummary32);
        org.junit.Assert.assertNotNull(adcpDischargeActivityArray34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(engineeredStructureDischargeActivityArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(dischargeActivity41);
        org.junit.Assert.assertNotNull(engineeredStructureDischargeActivityList42);
        org.junit.Assert.assertNotNull(adcpDischargeActivityArray44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(dischargeActivity48);
        org.junit.Assert.assertNull(pointVelocityDischargeActivityList49);
        org.junit.Assert.assertNotNull(engineeredStructureDischargeActivityList50);
        org.junit.Assert.assertNotNull(dischargeActivity51);
        org.junit.Assert.assertNotNull(adcpDischargeActivityArray53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(engineeredStructureDischargeActivityArray57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(dischargeActivity60);
        org.junit.Assert.assertNotNull(otherMethodDischargeActivityArray61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(volumetricDischargeActivityArray65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(dischargeActivity68);
        org.junit.Assert.assertNotNull(adcpDischargeActivityArray70);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(engineeredStructureDischargeActivityArray74);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(dischargeActivity77);
        org.junit.Assert.assertNotNull(otherMethodDischargeActivityArray78);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(dischargeActivity82);
        org.junit.Assert.assertNotNull(volumetricDischargeActivityList83);
        org.junit.Assert.assertNotNull(adcpDischargeActivityArray85);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertNotNull(engineeredStructureDischargeActivityArray89);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertNotNull(dischargeActivity92);
        org.junit.Assert.assertNotNull(engineeredStructureDischargeActivityList93);
        org.junit.Assert.assertNotNull(dischargeActivity95);
        org.junit.Assert.assertNotNull(dischargeActivity96);
    }

    @Test
    public void test42919() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest85.test42919");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RoundServiceRequest roundServiceRequest0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RoundServiceRequest();
        java.lang.String str1 = roundServiceRequest0.ValueForNaN;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingModelInputValuesServiceResponse ratingModelInputValuesServiceResponse2 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingModelInputValuesServiceResponse();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingModelInputValuesServiceResponse ratingModelInputValuesServiceResponse3 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingModelInputValuesServiceResponse();
        java.lang.Double[] doubleArray5 = new java.lang.Double[] { 0.0d };
        java.util.ArrayList<java.lang.Double> doubleList6 = new java.util.ArrayList<java.lang.Double>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.lang.Double>) doubleList6, doubleArray5);
        ratingModelInputValuesServiceResponse3.InputValues = doubleList6;
        java.util.ArrayList<java.lang.Double> doubleList9 = ratingModelInputValuesServiceResponse3.InputValues;
        ratingModelInputValuesServiceResponse2.InputValues = doubleList9;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RoundServiceRequest roundServiceRequest11 = roundServiceRequest0.setData(doubleList9);
        java.lang.String str12 = roundServiceRequest11.getValueForNaN();
        java.util.ArrayList<java.lang.Double> doubleList13 = roundServiceRequest11.Data;
        roundServiceRequest11.UnitId = "/AQUARIUS";
        roundServiceRequest11.UnitId = "multipart/form-data; boundary=****871ccc7e-c9d9-467b-8c95-d6f9599f0e81****";
        java.lang.String str18 = roundServiceRequest11.getUnitId();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(doubleList9);
        org.junit.Assert.assertNotNull(roundServiceRequest11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(doubleList13);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "multipart/form-data; boundary=****871ccc7e-c9d9-467b-8c95-d6f9599f0e81****" + "'", str18, "multipart/form-data; boundary=****871ccc7e-c9d9-467b-8c95-d6f9599f0e81****");
    }

    @Test
    public void test42920() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest85.test42920");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Sensor sensor0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Sensor();
        java.time.Instant instant1 = sensor0.getLastModifiedUtc();
        java.time.Instant instant2 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Sensor sensor3 = sensor0.setLastModifiedUtc(instant2);
        java.lang.String str4 = sensor0.ParameterId;
        java.lang.String str5 = sensor0.getLocationUniqueId();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Sensor sensor7 = sensor0.setComments("");
        java.lang.String str8 = sensor0.getUniqueId();
        sensor0.UniqueId = "MaxDuration";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Sensor sensor12 = sensor0.setUnitId("/AQUARIUS/Acquisition/v2://9999-12-31T23:59:59.999Z");
        java.lang.String str13 = sensor12.Manufacturer;
        java.lang.String str14 = sensor12.getUnitId();
        org.junit.Assert.assertNull(instant1);
        org.junit.Assert.assertNotNull(instant2);
        org.junit.Assert.assertNotNull(sensor3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(sensor7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(sensor12);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "/AQUARIUS/Acquisition/v2://9999-12-31T23:59:59.999Z" + "'", str14, "/AQUARIUS/Acquisition/v2://9999-12-31T23:59:59.999Z");
    }

    @Test
    public void test42921() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest85.test42921");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.util.List<java.lang.String> strList1 = getObservationsV2_0.SamplingContextTagIds;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SampleFractionType sampleFractionType2 = getObservationsV2_0.getSampleFraction();
        java.time.Instant instant3 = getObservationsV2_0.getStartObservedTime();
        getObservationsV2_0.CustomId = "MaxInstant";
        java.lang.Double double6 = getObservationsV2_0.MaxNumericResultValue;
        java.lang.String str7 = getObservationsV2_0.SpecimenName;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetGroupedObservationsV2 getGroupedObservationsV2_8 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetGroupedObservationsV2();
        java.util.List<java.lang.String> strList9 = getGroupedObservationsV2_8.LabResultLaboratoryIds;
        java.lang.String str10 = getGroupedObservationsV2_8.DepthUnitId;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExtendedAttributes getExtendedAttributes11 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExtendedAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AppliesToType appliesToType12 = getExtendedAttributes11.AppliesToType;
        java.lang.Object obj13 = getExtendedAttributes11.getResponseType();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AppliesToType appliesToType14 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AppliesToType.SAMPLING_LOCATION;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExtendedAttributes getExtendedAttributes15 = getExtendedAttributes11.setAppliesToType(appliesToType14);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.PostReportAttachment postReportAttachment16 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.PostReportAttachment();
        postReportAttachment16.Description = "2021.4.62.0";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.PostReportAttachment postReportAttachment20 = postReportAttachment16.setLocationUniqueId("MaxInstant");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_21 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray24 = new java.lang.String[] { "", "" };
        java.util.ArrayList<java.lang.String> strList25 = new java.util.ArrayList<java.lang.String>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList25, strArray24);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_27 = getObservationsV2_21.setDataClassifications((java.util.List<java.lang.String>) strList25);
        getObservationsV2_27.DepthUnitCustomId = "hi!";
        java.lang.String str30 = getObservationsV2_27.DepthUnitId;
        java.util.List<java.lang.String> strList31 = getObservationsV2_27.LabResultLaboratoryIds;
        getObservationsV2_27.MaxNumericResultValue = (-1.0d);
        java.lang.Integer int34 = getObservationsV2_27.Limit;
        java.util.List<java.lang.String> strList35 = getObservationsV2_27.LabResultLaboratoryIds;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObject importItemObject36 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObject();
        java.util.List<java.lang.String> strList37 = importItemObject36.getWarningMessages();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportChangeItem[] importChangeItemArray38 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportChangeItem[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportChangeItem> importChangeItemList39 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportChangeItem>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportChangeItem>) importChangeItemList39, importChangeItemArray38);
        importItemObject36.ItemComparison = importChangeItemList39;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags42 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray46 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList47 = new java.util.ArrayList<java.lang.String>();
        boolean boolean48 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList47, strArray46);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags49 = putLocationTags42.setTagUniqueIds(strList47);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObject importItemObject50 = importItemObject36.setExistingItem((java.lang.Object) putLocationTags42);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_51 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray53 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList54 = new java.util.ArrayList<java.lang.String>();
        boolean boolean55 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList54, strArray53);
        getObservationsV2_51.SpecimenIds = strList54;
        importItemObject50.WarningMessages = strList54;
        getObservationsV2_27.ProjectIds = strList54;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.PostReportAttachment postReportAttachment59 = postReportAttachment20.setSourceTimeSeriesUniqueIds(strList54);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExtendedAttributes getExtendedAttributes60 = getExtendedAttributes11.setIds((java.util.List<java.lang.String>) strList54);
        getGroupedObservationsV2_8.Media = strList54;
        getObservationsV2_0.Search = strList54;
        org.junit.Assert.assertNull(strList1);
        org.junit.Assert.assertNull(sampleFractionType2);
        org.junit.Assert.assertNull(instant3);
        org.junit.Assert.assertNull(double6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(strList9);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNull(appliesToType12);
        org.junit.Assert.assertNotNull(obj13);
        org.junit.Assert.assertEquals(obj13.toString(), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$SearchResultExtendedAttributeDefinition");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj13), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$SearchResultExtendedAttributeDefinition");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj13), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$SearchResultExtendedAttributeDefinition");
        org.junit.Assert.assertTrue("'" + appliesToType14 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AppliesToType.SAMPLING_LOCATION + "'", appliesToType14.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AppliesToType.SAMPLING_LOCATION));
        org.junit.Assert.assertNotNull(getExtendedAttributes15);
        org.junit.Assert.assertNotNull(postReportAttachment20);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(getObservationsV2_27);
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertNull(strList31);
        org.junit.Assert.assertNull(int34);
        org.junit.Assert.assertNull(strList35);
        org.junit.Assert.assertNull(strList37);
        org.junit.Assert.assertNotNull(importChangeItemArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(putLocationTags49);
        org.junit.Assert.assertNotNull(importItemObject50);
        org.junit.Assert.assertNotNull(strArray53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(postReportAttachment59);
        org.junit.Assert.assertNotNull(getExtendedAttributes60);
    }

    @Test
    public void test42922() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest85.test42922");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.DeleteSetting deleteSetting0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.DeleteSetting();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.DeleteSetting deleteSetting2 = deleteSetting0.setGroup("/AQUARIUS/Provisioning/v1");
        java.lang.String str3 = deleteSetting0.getKey();
        java.lang.String str4 = deleteSetting0.getGroup();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.DeleteSetting deleteSetting6 = deleteSetting0.setKey("/AQUARIUS/Acquisition/v2://9999-12-31T23:59:59.999Z");
        org.junit.Assert.assertNotNull(deleteSetting2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "/AQUARIUS/Provisioning/v1" + "'", str4, "/AQUARIUS/Provisioning/v1");
        org.junit.Assert.assertNotNull(deleteSetting6);
    }

    @Test
    public void test42923() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest85.test42923");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedPoint timeAlignedPoint0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedPoint();
        timeAlignedPoint0.Method9 = "multipart/form-data; boundary=****7eff1774-b6b0-471a-961c-156c64359366****";
        timeAlignedPoint0.DisplayValue9 = "";
        java.lang.String str5 = timeAlignedPoint0.getApprovalName4();
        java.lang.Long long6 = timeAlignedPoint0.getGradeCode3();
        timeAlignedPoint0.NumericValue6 = (-1.0d);
        timeAlignedPoint0.GradeName9 = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ";
        timeAlignedPoint0.ApprovalName4 = "'.'SSSSSSS";
        java.lang.String str13 = timeAlignedPoint0.Qualifiers3;
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(long6);
        org.junit.Assert.assertNull(str13);
    }

    @Test
    public void test42924() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest85.test42924");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostExtendedAttribute postExtendedAttribute0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostExtendedAttribute();
        java.lang.String str1 = postExtendedAttribute0.CustomId;
        java.lang.String str2 = postExtendedAttribute0.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostExtendedAttribute postExtendedAttribute4 = postExtendedAttribute0.setDescription("");
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNotNull(postExtendedAttribute4);
    }

    @Test
    public void test42925() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest85.test42925");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.UpchainProcessorListByTimeSeriesServiceRequest upchainProcessorListByTimeSeriesServiceRequest0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.UpchainProcessorListByTimeSeriesServiceRequest();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.UpchainProcessorListByTimeSeriesServiceRequest upchainProcessorListByTimeSeriesServiceRequest2 = upchainProcessorListByTimeSeriesServiceRequest0.setTimeSeriesUniqueId("MaxDuration");
        java.time.Instant instant3 = upchainProcessorListByTimeSeriesServiceRequest0.QueryTo;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetChartDataV2 getChartDataV2_4 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetChartDataV2();
        java.lang.String str5 = getChartDataV2_4.getActivityCustomId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetChartDataV2 getChartDataV2_7 = getChartDataV2_4.setFilterId("");
        java.util.List<java.lang.String> strList8 = getChartDataV2_4.ResultGrades;
        java.util.List<java.lang.String> strList9 = getChartDataV2_4.CollectionMethodIds;
        getChartDataV2_4.MinNumericResultValue = 10.0d;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItem importItem12 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_13 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray15 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList16 = new java.util.ArrayList<java.lang.String>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList16, strArray15);
        getObservationsV2_13.SpecimenIds = strList16;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags19 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray23 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList24 = new java.util.ArrayList<java.lang.String>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList24, strArray23);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags26 = putLocationTags19.setTagUniqueIds(strList24);
        getObservationsV2_13.QualityControlTypes = strList24;
        java.util.List<java.lang.String> strList28 = getObservationsV2_13.getLabReportIds();
        importItem12.Errors = getObservationsV2_13;
        java.lang.Object obj30 = importItem12.getExistingItem();
        importItem12.Input = "hi!";
        java.lang.Object obj33 = importItem12.getItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemStatusType importItemStatusType34 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemStatusType.SKIPPED;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItem importItem35 = importItem12.setStatus(importItemStatusType34);
        importItem35.Input = "/AQUARIUS/Provisioning/v1";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate38 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate();
        specimenTemplate38.CustomId = "hi!";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate42 = specimenTemplate38.setId("hi!");
        java.lang.Boolean boolean43 = specimenTemplate42.getFiltered();
        importItem35.Item = specimenTemplate42;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Processor processor45 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Processor();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostTag postTag46 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostTag();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_47 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray50 = new java.lang.String[] { "", "" };
        java.util.ArrayList<java.lang.String> strList51 = new java.util.ArrayList<java.lang.String>();
        boolean boolean52 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList51, strArray50);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_53 = getObservationsV2_47.setDataClassifications((java.util.List<java.lang.String>) strList51);
        postTag46.PickListValues = strList51;
        java.util.ArrayList<java.lang.String> strList55 = postTag46.PickListValues;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Processor processor56 = processor45.setInputTimeSeriesUniqueIds(strList55);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItem importItem57 = importItem35.setWarningMessages((java.util.List<java.lang.String>) strList55);
        java.util.List<java.lang.String> strList58 = importItem35.getWarningMessages();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetChartDataV2 getChartDataV2_59 = getChartDataV2_4.setSpecimenIds(strList58);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse60 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant61 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse62 = locationDescriptionListServiceResponse60.setNextToken(instant61);
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescription> locationDescriptionList63 = locationDescriptionListServiceResponse62.LocationDescriptions;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingCurveListServiceRequest ratingCurveListServiceRequest64 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingCurveListServiceRequest();
        java.time.Instant instant65 = ratingCurveListServiceRequest64.QueryTo;
        java.lang.String str66 = ratingCurveListServiceRequest64.getRatingModelIdentifier();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse67 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary68 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary70 = dischargeSummary68.setPublish((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse71 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant72 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse73 = locationDescriptionListServiceResponse71.setNextToken(instant72);
        dischargeSummary68.MeasurementTime = instant72;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse75 = locationDescriptionListServiceResponse67.setNextToken(instant72);
        java.time.Instant instant76 = locationDescriptionListServiceResponse67.getNextToken();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest77 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ControlConditionActivity controlConditionActivity78 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ControlConditionActivity();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ControlCleanedType controlCleanedType79 = null;
        controlConditionActivity78.ControlCleaned = controlCleanedType79;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse81 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant82 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse83 = locationDescriptionListServiceResponse81.setNextToken(instant82);
        controlConditionActivity78.DateCleaned = instant82;
        timeAlignedDataServiceRequest77.QueryFrom = instant82;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse86 = locationDescriptionListServiceResponse67.setNextToken(instant82);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingCurveListServiceRequest ratingCurveListServiceRequest87 = ratingCurveListServiceRequest64.setQueryTo(instant82);
        java.time.Instant instant88 = ratingCurveListServiceRequest87.getQueryTo();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse89 = locationDescriptionListServiceResponse62.setNextToken(instant88);
        getChartDataV2_4.EndResultTime = instant88;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.UpchainProcessorListByTimeSeriesServiceRequest upchainProcessorListByTimeSeriesServiceRequest91 = upchainProcessorListByTimeSeriesServiceRequest0.setQueryFrom(instant88);
        java.time.Instant instant92 = upchainProcessorListByTimeSeriesServiceRequest91.getQueryTo();
        upchainProcessorListByTimeSeriesServiceRequest91.TimeSeriesUniqueId = "zZZZZ";
        org.junit.Assert.assertNotNull(upchainProcessorListByTimeSeriesServiceRequest2);
        org.junit.Assert.assertNull(instant3);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(getChartDataV2_7);
        org.junit.Assert.assertNull(strList8);
        org.junit.Assert.assertNull(strList9);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(putLocationTags26);
        org.junit.Assert.assertNull(strList28);
        org.junit.Assert.assertNull(obj30);
        org.junit.Assert.assertNull(obj33);
        org.junit.Assert.assertTrue("'" + importItemStatusType34 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemStatusType.SKIPPED + "'", importItemStatusType34.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemStatusType.SKIPPED));
        org.junit.Assert.assertNotNull(importItem35);
        org.junit.Assert.assertNotNull(specimenTemplate42);
        org.junit.Assert.assertNull(boolean43);
        org.junit.Assert.assertNotNull(strArray50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(getObservationsV2_53);
        org.junit.Assert.assertNotNull(strList55);
        org.junit.Assert.assertNotNull(processor56);
        org.junit.Assert.assertNotNull(importItem57);
        org.junit.Assert.assertNotNull(strList58);
        org.junit.Assert.assertNotNull(getChartDataV2_59);
        org.junit.Assert.assertNotNull(instant61);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse62);
        org.junit.Assert.assertNull(locationDescriptionList63);
        org.junit.Assert.assertNull(instant65);
        org.junit.Assert.assertNull(str66);
        org.junit.Assert.assertNotNull(dischargeSummary70);
        org.junit.Assert.assertNotNull(instant72);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse73);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse75);
        org.junit.Assert.assertNotNull(instant76);
        org.junit.Assert.assertNotNull(instant82);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse83);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse86);
        org.junit.Assert.assertNotNull(ratingCurveListServiceRequest87);
        org.junit.Assert.assertNotNull(instant88);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse89);
        org.junit.Assert.assertNotNull(upchainProcessorListByTimeSeriesServiceRequest91);
        org.junit.Assert.assertNull(instant92);
    }

    @Test
    public void test42926() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest85.test42926");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Vertical vertical0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Vertical();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay1 = vertical0.SoundedDepth;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay2 = null;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Vertical vertical3 = vertical0.setSegmentDischarge(quantityWithDisplay2);
        java.lang.Boolean boolean4 = vertical0.getIsDischargeEstimated();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay5 = vertical0.getSegmentDischarge();
        vertical0.IsSoundedDepthEstimated = false;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitReading fieldVisitReading8 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitReading();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitReading fieldVisitReading10 = fieldVisitReading8.setUseLocationDatumAsReference((java.lang.Boolean) true);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitApproval fieldVisitApproval11 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitApproval();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitReading fieldVisitReading12 = fieldVisitReading10.setApproval(fieldVisitApproval11);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitReading fieldVisitReading14 = fieldVisitReading10.setGradeCode((java.lang.Integer) (-1));
        java.time.Instant instant15 = fieldVisitReading10.Time;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary16 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary18 = dischargeSummary16.setPublish((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay19 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay();
        dischargeSummary18.DifferenceDuringVisit = doubleWithDisplay19;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Adjustment adjustment21 = dischargeSummary18.getAdjustment();
        java.time.Instant instant22 = dischargeSummary18.getMeasurementEndTime();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.GageHeightCalculationType gageHeightCalculationType23 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.GageHeightCalculationType.SimpleAverage;
        dischargeSummary18.GageHeightCalculation = gageHeightCalculationType23;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary26 = dischargeSummary18.setGageHeightComments("multipart/form-data; boundary=****9fadde69-3f13-40c4-a87c-0f3f51c2dd35****");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity pointVelocityDischargeActivity27 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay28 = pointVelocityDischargeActivity27.getVelocityAverage();
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Vertical> verticalList29 = pointVelocityDischargeActivity27.Verticals;
        java.lang.String str30 = pointVelocityDischargeActivity27.SerialNumber;
        java.lang.Boolean boolean31 = pointVelocityDischargeActivity27.isMeterInspectedAfter();
        pointVelocityDischargeActivity27.MeterInspectedBefore = true;
        java.lang.String str34 = pointVelocityDischargeActivity27.SoftwareVersion;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CalibrationCheck calibrationCheck35 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CalibrationCheck();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CalibrationCheck calibrationCheck37 = calibrationCheck35.setUnit("hi!");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay38 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay40 = doubleWithDisplay38.setNumeric((java.lang.Double) 10.0d);
        java.lang.String str41 = doubleWithDisplay40.getDisplay();
        calibrationCheck37.Difference = doubleWithDisplay40;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity pointVelocityDischargeActivity43 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity pointVelocityDischargeActivity45 = pointVelocityDischargeActivity43.setIsValid((java.lang.Boolean) false);
        pointVelocityDischargeActivity43.Manufacturer = "2021.4.62.0";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity pointVelocityDischargeActivity49 = pointVelocityDischargeActivity43.setSuspensionWeight("");
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Vertical> verticalList50 = pointVelocityDischargeActivity49.getVerticals();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DatumConvertedQuantityWithDisplay datumConvertedQuantityWithDisplay51 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DatumConvertedQuantityWithDisplay();
        pointVelocityDischargeActivity49.DistanceToMeter = datumConvertedQuantityWithDisplay51;
        calibrationCheck37.Standard = datumConvertedQuantityWithDisplay51;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity pointVelocityDischargeActivity54 = pointVelocityDischargeActivity27.setMeanObservationDurationInSeconds((com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay) datumConvertedQuantityWithDisplay51);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary55 = dischargeSummary18.setMeanIndexVelocity((com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay) datumConvertedQuantityWithDisplay51);
        fieldVisitReading10.Value = datumConvertedQuantityWithDisplay51;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Vertical vertical57 = vertical0.setMeanVelocity((com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay) datumConvertedQuantityWithDisplay51);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay58 = vertical0.getSegmentDischarge();
        java.lang.Double double59 = vertical0.getPercentageOfTotalDischarge();
        org.junit.Assert.assertNull(quantityWithDisplay1);
        org.junit.Assert.assertNotNull(vertical3);
        org.junit.Assert.assertNull(boolean4);
        org.junit.Assert.assertNull(quantityWithDisplay5);
        org.junit.Assert.assertNotNull(fieldVisitReading10);
        org.junit.Assert.assertNotNull(fieldVisitReading12);
        org.junit.Assert.assertNotNull(fieldVisitReading14);
        org.junit.Assert.assertNull(instant15);
        org.junit.Assert.assertNotNull(dischargeSummary18);
        org.junit.Assert.assertNull(adjustment21);
        org.junit.Assert.assertNull(instant22);
        org.junit.Assert.assertTrue("'" + gageHeightCalculationType23 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.GageHeightCalculationType.SimpleAverage + "'", gageHeightCalculationType23.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.GageHeightCalculationType.SimpleAverage));
        org.junit.Assert.assertNotNull(dischargeSummary26);
        org.junit.Assert.assertNull(quantityWithDisplay28);
        org.junit.Assert.assertNull(verticalList29);
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertNull(boolean31);
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertNotNull(calibrationCheck37);
        org.junit.Assert.assertNotNull(doubleWithDisplay40);
        org.junit.Assert.assertNull(str41);
        org.junit.Assert.assertNotNull(pointVelocityDischargeActivity45);
        org.junit.Assert.assertNotNull(pointVelocityDischargeActivity49);
        org.junit.Assert.assertNull(verticalList50);
        org.junit.Assert.assertNotNull(pointVelocityDischargeActivity54);
        org.junit.Assert.assertNotNull(dischargeSummary55);
        org.junit.Assert.assertNotNull(vertical57);
        org.junit.Assert.assertNull(quantityWithDisplay58);
        org.junit.Assert.assertNull(double59);
    }

    @Test
    public void test42927() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest85.test42927");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity postActivity0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity();
        postActivity0.LoggerFileName = "hi!";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity postActivity4 = postActivity0.setCustomId("");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutActivity putActivity5 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutActivity();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity plannedActivity6 = null;
        putActivity5.PlannedActivity = plannedActivity6;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity postActivity8 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity();
        postActivity8.LoggerFileName = "hi!";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity plannedActivity11 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity postActivity12 = postActivity8.setPlannedActivity(plannedActivity11);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag samplingContextTag13 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag();
        java.lang.String str14 = samplingContextTag13.getDescription();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes15 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag samplingContextTag16 = samplingContextTag13.setAuditAttributes(auditAttributes15);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag samplingContextTag18 = samplingContextTag16.setId("yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag samplingContextTag19 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag();
        java.lang.String str20 = samplingContextTag19.getDescription();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag samplingContextTag21 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag();
        java.lang.String str22 = samplingContextTag21.getDescription();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes23 = null;
        samplingContextTag21.AuditAttributes = auditAttributes23;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag samplingContextTag25 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag();
        java.lang.String str26 = samplingContextTag25.getDescription();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes27 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag samplingContextTag28 = samplingContextTag25.setAuditAttributes(auditAttributes27);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag[] samplingContextTagArray29 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag[] { samplingContextTag18, samplingContextTag19, samplingContextTag21, samplingContextTag28 };
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag> samplingContextTagList30 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag>();
        boolean boolean31 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag>) samplingContextTagList30, samplingContextTagArray29);
        postActivity8.SamplingContextTags = samplingContextTagList30;
        putActivity5.SamplingContextTags = samplingContextTagList30;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity postActivity34 = postActivity4.setSamplingContextTags((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag>) samplingContextTagList30);
        java.time.OffsetDateTime offsetDateTime35 = postActivity4.getEndTime();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocation samplingLocation36 = postActivity4.getSamplingLocation();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Device device37 = null;
        postActivity4.Device = device37;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity quantity39 = postActivity4.Depth;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservationV2 postObservationV2_40 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservationV2();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabInstruction labInstruction41 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservationV2 postObservationV2_42 = postObservationV2_40.setLabInstruction(labInstruction41);
        java.lang.String str43 = postObservationV2_42.MediumSubdivision;
        java.lang.String str44 = postObservationV2_42.getComment();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DataClassificationType dataClassificationType45 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DataClassificationType.FIELD_RESULT;
        postObservationV2_42.DataClassification = dataClassificationType45;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails47 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails49 = labResultDetails47.setAnalysisComment("/AQUARIUS/Acquisition/v2");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails51 = labResultDetails47.setPreparationMethod("https");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes52 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails53 = labResultDetails47.setAuditAttributes(auditAttributes52);
        postObservationV2_42.LabResultDetails = labResultDetails53;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabInstruction labInstruction55 = postObservationV2_42.LabInstruction;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.CollectionMethod collectionMethod56 = postObservationV2_42.getCollectionMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DataClassificationType dataClassificationType57 = postObservationV2_42.DataClassification;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LocationObservationsGroup locationObservationsGroup58 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LocationObservationsGroup();
        java.lang.Integer int59 = locationObservationsGroup58.TotalCount;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocation samplingLocation60 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocation();
        java.lang.String str61 = samplingLocation60.Description;
        java.lang.String str62 = samplingLocation60.VerticalCollectionMethod;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocation samplingLocation63 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocation();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricConfiguration metricConfiguration64 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricConfiguration();
        java.lang.String str65 = metricConfiguration64.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty observedProperty66 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty();
        observedProperty66.CasNumber = "MinDuration";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricConfiguration metricConfiguration69 = metricConfiguration64.setObservedProperty(observedProperty66);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultType resultType70 = observedProperty66.ResultType;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservedProperty postObservedProperty71 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservedProperty();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UnitGroup unitGroup72 = postObservedProperty71.UnitGroup;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity quantity73 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Unit unit74 = null;
        quantity73.Unit = unit74;
        postObservedProperty71.LowerLimit = quantity73;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity quantity77 = postObservedProperty71.LowerLimit;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Unit unit78 = quantity77.Unit;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty observedProperty79 = observedProperty66.setUpperLimit(quantity77);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocation samplingLocation80 = samplingLocation63.setElevation(quantity77);
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment> domainObjectAttachmentList81 = samplingLocation80.getAttachments();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity postActivity82 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttribute[] extendedAttributeArray83 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttribute[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttribute> extendedAttributeList84 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttribute>();
        boolean boolean85 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttribute>) extendedAttributeList84, extendedAttributeArray83);
        postActivity82.ExtendedAttributes = extendedAttributeList84;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocation samplingLocation87 = samplingLocation80.setExtendedAttributes((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttribute>) extendedAttributeList84);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocation samplingLocation88 = samplingLocation60.setExtendedAttributes((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttribute>) extendedAttributeList84);
        locationObservationsGroup58.SamplingLocation = samplingLocation60;
        postObservationV2_42.SamplingLocation = samplingLocation60;
        java.lang.String str91 = samplingLocation60.Description;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity postActivity92 = postActivity4.setSamplingLocation(samplingLocation60);
        org.junit.Assert.assertNotNull(postActivity4);
        org.junit.Assert.assertNotNull(postActivity12);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(samplingContextTag16);
        org.junit.Assert.assertNotNull(samplingContextTag18);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertNotNull(samplingContextTag28);
        org.junit.Assert.assertNotNull(samplingContextTagArray29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(postActivity34);
        org.junit.Assert.assertNull(offsetDateTime35);
        org.junit.Assert.assertNull(samplingLocation36);
        org.junit.Assert.assertNull(quantity39);
        org.junit.Assert.assertNotNull(postObservationV2_42);
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertNull(str44);
        org.junit.Assert.assertTrue("'" + dataClassificationType45 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DataClassificationType.FIELD_RESULT + "'", dataClassificationType45.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DataClassificationType.FIELD_RESULT));
        org.junit.Assert.assertNotNull(labResultDetails49);
        org.junit.Assert.assertNotNull(labResultDetails51);
        org.junit.Assert.assertNotNull(labResultDetails53);
        org.junit.Assert.assertNull(labInstruction55);
        org.junit.Assert.assertNull(collectionMethod56);
        org.junit.Assert.assertTrue("'" + dataClassificationType57 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DataClassificationType.FIELD_RESULT + "'", dataClassificationType57.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DataClassificationType.FIELD_RESULT));
        org.junit.Assert.assertNull(int59);
        org.junit.Assert.assertNull(str61);
        org.junit.Assert.assertNull(str62);
        org.junit.Assert.assertNull(str65);
        org.junit.Assert.assertNotNull(metricConfiguration69);
        org.junit.Assert.assertNull(resultType70);
        org.junit.Assert.assertNull(unitGroup72);
        org.junit.Assert.assertNotNull(quantity77);
        org.junit.Assert.assertNull(unit78);
        org.junit.Assert.assertNotNull(observedProperty79);
        org.junit.Assert.assertNotNull(samplingLocation80);
        org.junit.Assert.assertNull(domainObjectAttachmentList81);
        org.junit.Assert.assertNotNull(extendedAttributeArray83);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertNotNull(samplingLocation87);
        org.junit.Assert.assertNotNull(samplingLocation88);
        org.junit.Assert.assertNull(str91);
        org.junit.Assert.assertNotNull(postActivity92);
    }

    @Test
    public void test42928() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest85.test42928");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.CodeTable codeTable0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.CodeTable();
        java.lang.String str1 = codeTable0.DisplayName;
        codeTable0.SystemCode = "MinInstant";
        java.lang.String str4 = codeTable0.SystemCode;
        codeTable0.DisplayName = "multipart/form-data; boundary=****1165d1f3-8b30-4f2e-8d0b-ffebab458859****";
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "MinInstant" + "'", str4, "MinInstant");
    }

    @Test
    public void test42929() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest85.test42929");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.IndexConfiguration indexConfiguration0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.IndexConfiguration();
        java.lang.String str1 = indexConfiguration0.CustomId;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Unit unit2 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Unit();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes3 = unit2.AuditAttributes;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Unit unit5 = unit2.setId("/AQUARIUS/Acquisition/v2://9999-12-31T23:59:59.999Z");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.IndexConfiguration indexConfiguration6 = indexConfiguration0.setUnit(unit5);
        java.lang.String str7 = unit5.getCustomId();
        java.lang.String str8 = unit5.getId();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(auditAttributes3);
        org.junit.Assert.assertNotNull(unit5);
        org.junit.Assert.assertNotNull(indexConfiguration6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "/AQUARIUS/Acquisition/v2://9999-12-31T23:59:59.999Z" + "'", str8, "/AQUARIUS/Acquisition/v2://9999-12-31T23:59:59.999Z");
    }

    @Test
    public void test42930() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest85.test42930");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisit fieldVisit0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisit();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DatumConversionResult datumConversionResult1 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DatumConversionResult();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DatumConversionResult datumConversionResult3 = datumConversionResult1.setFailureReason("MinInstant");
        fieldVisit0.DatumConversionResult = datumConversionResult3;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.GageHeightAtZeroFlowActivity gageHeightAtZeroFlowActivity5 = fieldVisit0.GageHeightAtZeroFlowActivity;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.GageHeightAtZeroFlowActivity gageHeightAtZeroFlowActivity6 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.GageHeightAtZeroFlowActivity();
        java.time.Instant instant7 = null;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.GageHeightAtZeroFlowActivity gageHeightAtZeroFlowActivity8 = gageHeightAtZeroFlowActivity6.setApplicableSince(instant7);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisit fieldVisit9 = fieldVisit0.setGageHeightAtZeroFlowActivity(gageHeightAtZeroFlowActivity6);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.GageHeightAtZeroFlowActivity gageHeightAtZeroFlowActivity10 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.GageHeightAtZeroFlowActivity();
        java.time.Instant instant11 = null;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.GageHeightAtZeroFlowActivity gageHeightAtZeroFlowActivity12 = gageHeightAtZeroFlowActivity10.setApplicableSince(instant11);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisit fieldVisit13 = fieldVisit0.setGageHeightAtZeroFlowActivity(gageHeightAtZeroFlowActivity10);
        java.lang.Boolean boolean14 = fieldVisit13.getIsValid();
        java.time.Instant instant15 = fieldVisit13.getStartTime();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitApproval fieldVisitApproval16 = fieldVisit13.Approval;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DatumConversionResult datumConversionResult17 = fieldVisit13.DatumConversionResult;
        org.junit.Assert.assertNotNull(datumConversionResult3);
        org.junit.Assert.assertNull(gageHeightAtZeroFlowActivity5);
        org.junit.Assert.assertNotNull(gageHeightAtZeroFlowActivity8);
        org.junit.Assert.assertNotNull(fieldVisit9);
        org.junit.Assert.assertNotNull(gageHeightAtZeroFlowActivity12);
        org.junit.Assert.assertNotNull(fieldVisit13);
        org.junit.Assert.assertNull(boolean14);
        org.junit.Assert.assertNull(instant15);
        org.junit.Assert.assertNull(fieldVisitApproval16);
        org.junit.Assert.assertNotNull(datumConversionResult17);
    }

    @Test
    public void test42931() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest85.test42931");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisit fieldVisit0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisit();
        fieldVisit0.Weather = "/AQUARIUS/Acquisition/v2";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.LocationDatumPeriod locationDatumPeriod3 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.LocationDatumPeriod();
        java.time.Instant instant4 = locationDatumPeriod3.AppliedTimeUtc;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.LocationDatumPeriod locationDatumPeriod6 = locationDatumPeriod3.setAppliedByUser("/AQUARIUS/Acquisition/v2://9999-12-31T23:59:59.999Z");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDescription timeSeriesDescription7 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDescription();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest8 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest();
        java.lang.Object obj9 = timeAlignedDataServiceRequest8.getResponseType();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse10 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant11 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse12 = locationDescriptionListServiceResponse10.setNextToken(instant11);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest13 = timeAlignedDataServiceRequest8.setQueryFrom(instant11);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDescription timeSeriesDescription14 = timeSeriesDescription7.setRawStartTime(instant11);
        locationDatumPeriod3.ValidFrom = instant11;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitDescription fieldVisitDescription16 = fieldVisit0.setLastMatchedTime(instant11);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitDataServiceResponse fieldVisitDataServiceResponse17 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitDataServiceResponse();
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CrossSectionSurveyActivity> crossSectionSurveyActivityList18 = fieldVisitDataServiceResponse17.CrossSectionSurveyActivity;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitDataServiceResponse fieldVisitDataServiceResponse20 = fieldVisitDataServiceResponse17.setIdentifier("");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeActivity dischargeActivity21 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeActivity();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.AdcpDischargeActivity[] adcpDischargeActivityArray22 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.AdcpDischargeActivity[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.AdcpDischargeActivity> adcpDischargeActivityList23 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.AdcpDischargeActivity>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.AdcpDischargeActivity>) adcpDischargeActivityList23, adcpDischargeActivityArray22);
        dischargeActivity21.AdcpDischargeActivities = adcpDischargeActivityList23;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeActivity dischargeActivity26 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeActivity();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeActivity[] dischargeActivityArray27 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeActivity[] { dischargeActivity21, dischargeActivity26 };
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeActivity> dischargeActivityList28 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeActivity>();
        boolean boolean29 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeActivity>) dischargeActivityList28, dischargeActivityArray27);
        fieldVisitDataServiceResponse20.DischargeActivities = dischargeActivityList28;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ControlConditionActivity controlConditionActivity31 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ControlConditionActivity();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ControlCleanedType controlCleanedType32 = null;
        controlConditionActivity31.ControlCleaned = controlCleanedType32;
        java.lang.String str34 = controlConditionActivity31.Comments;
        controlConditionActivity31.Comments = "/AQUARIUS/Acquisition/v2";
        java.lang.String str37 = controlConditionActivity31.Comments;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitDataServiceResponse fieldVisitDataServiceResponse38 = fieldVisitDataServiceResponse20.setControlConditionActivity(controlConditionActivity31);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisit fieldVisit39 = fieldVisit0.setControlConditionActivity(controlConditionActivity31);
        fieldVisit39.Weather = "multipart/form-data; boundary=****46b5d5e5-73d1-43c8-8704-4a7bbf2d8314****";
        org.junit.Assert.assertNull(instant4);
        org.junit.Assert.assertNotNull(locationDatumPeriod6);
        org.junit.Assert.assertNotNull(obj9);
        org.junit.Assert.assertEquals(obj9.toString(), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj9), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj9), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertNotNull(instant11);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse12);
        org.junit.Assert.assertNotNull(timeAlignedDataServiceRequest13);
        org.junit.Assert.assertNotNull(timeSeriesDescription14);
        org.junit.Assert.assertNotNull(fieldVisitDescription16);
        org.junit.Assert.assertNull(crossSectionSurveyActivityList18);
        org.junit.Assert.assertNotNull(fieldVisitDataServiceResponse20);
        org.junit.Assert.assertNotNull(adcpDischargeActivityArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(dischargeActivityArray27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "/AQUARIUS/Acquisition/v2" + "'", str37, "/AQUARIUS/Acquisition/v2");
        org.junit.Assert.assertNotNull(fieldVisitDataServiceResponse38);
        org.junit.Assert.assertNotNull(fieldVisit39);
    }

    @Test
    public void test42932() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest85.test42932");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.FieldDataPlugin fieldDataPlugin0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.FieldDataPlugin();
        java.lang.String str1 = fieldDataPlugin0.getAssemblyQualifiedTypeName();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.FieldDataPlugin fieldDataPlugin3 = fieldDataPlugin0.setPluginFolderName("9999-12-31T23:59:59.999Z");
        java.lang.String str4 = fieldDataPlugin3.UniqueId;
        java.lang.String str5 = fieldDataPlugin3.AssemblyQualifiedTypeName;
        java.lang.Boolean boolean6 = fieldDataPlugin3.IsEnabled;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(fieldDataPlugin3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(boolean6);
    }

    @Test
    public void test42933() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest85.test42933");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportChangeItem importChangeItem0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportChangeItem();
        importChangeItem0.PropertyName = "-PT87591240H";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDescriptionServiceRequest timeSeriesDescriptionServiceRequest3 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDescriptionServiceRequest();
        timeSeriesDescriptionServiceRequest3.ComputationIdentifier = "MinInstant";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDescriptionServiceRequest timeSeriesDescriptionServiceRequest7 = timeSeriesDescriptionServiceRequest3.setComputationPeriodIdentifier("multipart/form-data; boundary=****bbcf5f9e-6ccf-4b63-91ab-6e645caf02af****");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportChangeItem importChangeItem8 = importChangeItem0.setRight((java.lang.Object) timeSeriesDescriptionServiceRequest3);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationMinimal observationMinimal9 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationMinimal();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenNestedInActivity specimenNestedInActivity10 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationMinimal observationMinimal11 = observationMinimal9.setSpecimen(specimenNestedInActivity10);
        java.time.OffsetDateTime offsetDateTime12 = null;
        observationMinimal11.ObservedTime = offsetDateTime12;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenNestedInActivity specimenNestedInActivity14 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationMinimal observationMinimal15 = observationMinimal11.setSpecimen(specimenNestedInActivity14);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportChangeItem importChangeItem16 = importChangeItem8.setLeft((java.lang.Object) observationMinimal15);
        java.lang.Object obj17 = importChangeItem8.getRight();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDescription timeSeriesDescription18 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDescription();
        java.util.List<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesThreshold> timeSeriesThresholdList19 = timeSeriesDescription18.Thresholds;
        java.time.Instant instant20 = timeSeriesDescription18.getCorrectedEndTime();
        importChangeItem8.Right = timeSeriesDescription18;
        org.junit.Assert.assertNotNull(timeSeriesDescriptionServiceRequest7);
        org.junit.Assert.assertNotNull(importChangeItem8);
        org.junit.Assert.assertNotNull(observationMinimal11);
        org.junit.Assert.assertNotNull(observationMinimal15);
        org.junit.Assert.assertNotNull(importChangeItem16);
        org.junit.Assert.assertNotNull(obj17);
        org.junit.Assert.assertNull(timeSeriesThresholdList19);
        org.junit.Assert.assertNull(instant20);
    }

    @Test
    public void test42934() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest85.test42934");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetActivities getActivities0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetActivities();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse1 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary2 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary4 = dischargeSummary2.setPublish((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse5 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant6 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse7 = locationDescriptionListServiceResponse5.setNextToken(instant6);
        dischargeSummary2.MeasurementTime = instant6;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse9 = locationDescriptionListServiceResponse1.setNextToken(instant6);
        java.time.Instant instant10 = locationDescriptionListServiceResponse1.getNextToken();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetActivities getActivities11 = getActivities0.setToStartTime(instant10);
        java.lang.String str12 = getActivities11.getSort();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetActivities getActivities14 = getActivities11.setLimit((java.lang.Integer) 1);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest15 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest();
        java.lang.Object obj16 = timeAlignedDataServiceRequest15.getResponseType();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_17 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray20 = new java.lang.String[] { "", "" };
        java.util.ArrayList<java.lang.String> strList21 = new java.util.ArrayList<java.lang.String>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList21, strArray20);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_23 = getObservationsV2_17.setDataClassifications((java.util.List<java.lang.String>) strList21);
        getObservationsV2_23.DepthUnitCustomId = "hi!";
        java.lang.String str26 = getObservationsV2_23.CustomId;
        java.util.List<java.lang.String> strList27 = getObservationsV2_23.getSearch();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_28 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray30 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList31 = new java.util.ArrayList<java.lang.String>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList31, strArray30);
        getObservationsV2_28.SpecimenIds = strList31;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags34 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray38 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList39 = new java.util.ArrayList<java.lang.String>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList39, strArray38);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags41 = putLocationTags34.setTagUniqueIds(strList39);
        getObservationsV2_28.QualityControlTypes = strList39;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_43 = getObservationsV2_23.setMedia((java.util.List<java.lang.String>) strList39);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_44 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String str45 = getObservationsV2_44.getCustomId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_46 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList49 = new java.util.ArrayList<java.lang.String>();
        boolean boolean50 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList49, strArray48);
        getObservationsV2_46.SpecimenIds = strList49;
        getObservationsV2_44.ProjectIds = strList49;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_53 = getObservationsV2_23.setObservedPropertyIds((java.util.List<java.lang.String>) strList49);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest54 = timeAlignedDataServiceRequest15.setTimeSeriesOutputUnitIds(strList49);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetActivities getActivities55 = getActivities14.setActivityTypes((java.util.List<java.lang.String>) strList49);
        getActivities55.FieldVisitId = "/AQUARIUS/Acquisition/v2";
        java.time.Instant instant58 = null;
        getActivities55.FromStartTime = instant58;
        java.util.List<java.lang.String> strList60 = getActivities55.getActivityTemplateId();
        org.junit.Assert.assertNotNull(dischargeSummary4);
        org.junit.Assert.assertNotNull(instant6);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse7);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse9);
        org.junit.Assert.assertNotNull(instant10);
        org.junit.Assert.assertNotNull(getActivities11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(getActivities14);
        org.junit.Assert.assertNotNull(obj16);
        org.junit.Assert.assertEquals(obj16.toString(), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj16), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj16), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(getObservationsV2_23);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertNull(strList27);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(putLocationTags41);
        org.junit.Assert.assertNotNull(getObservationsV2_43);
        org.junit.Assert.assertNull(str45);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(getObservationsV2_53);
        org.junit.Assert.assertNotNull(timeAlignedDataServiceRequest54);
        org.junit.Assert.assertNotNull(getActivities55);
        org.junit.Assert.assertNull(strList60);
    }

    @Test
    public void test42935() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest85.test42935");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisit fieldVisit0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisit();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DatumConversionResult datumConversionResult1 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DatumConversionResult();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DatumConversionResult datumConversionResult3 = datumConversionResult1.setFailureReason("MinInstant");
        fieldVisit0.DatumConversionResult = datumConversionResult3;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.GageHeightAtZeroFlowActivity gageHeightAtZeroFlowActivity5 = fieldVisit0.GageHeightAtZeroFlowActivity;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.GageHeightAtZeroFlowActivity gageHeightAtZeroFlowActivity6 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.GageHeightAtZeroFlowActivity();
        java.time.Instant instant7 = null;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.GageHeightAtZeroFlowActivity gageHeightAtZeroFlowActivity8 = gageHeightAtZeroFlowActivity6.setApplicableSince(instant7);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisit fieldVisit9 = fieldVisit0.setGageHeightAtZeroFlowActivity(gageHeightAtZeroFlowActivity6);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitDataServiceResponse fieldVisitDataServiceResponse10 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitDataServiceResponse();
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeActivity> dischargeActivityList11 = fieldVisitDataServiceResponse10.DischargeActivities;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ControlConditionActivity controlConditionActivity12 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ControlConditionActivity();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ControlCleanedType controlCleanedType13 = null;
        controlConditionActivity12.ControlCleaned = controlCleanedType13;
        java.lang.String str15 = controlConditionActivity12.FlowOverControl;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitDataServiceResponse fieldVisitDataServiceResponse16 = fieldVisitDataServiceResponse10.setControlConditionActivity(controlConditionActivity12);
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeActivity> dischargeActivityList17 = fieldVisitDataServiceResponse10.DischargeActivities;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisit fieldVisit18 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisit();
        java.time.Instant instant19 = fieldVisit18.StartTime;
        java.lang.String str20 = fieldVisit18.getParty();
        fieldVisit18.Party = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LevelSurveyActivity levelSurveyActivity23 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LevelSurveyActivity();
        java.lang.String str24 = levelSurveyActivity23.getParty();
        java.lang.String str25 = levelSurveyActivity23.OriginReferencePointUniqueId;
        java.lang.String str26 = levelSurveyActivity23.Method;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisit fieldVisit27 = fieldVisit18.setLevelSurveyActivity(levelSurveyActivity23);
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LevelSurveyMeasurement> levelSurveyMeasurementList28 = levelSurveyActivity23.LevelMeasurements;
        java.lang.String str29 = levelSurveyActivity23.getOriginReferencePointUniqueId();
        java.lang.String str30 = levelSurveyActivity23.Party;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LevelSurveyActivity levelSurveyActivity32 = levelSurveyActivity23.setComments("multipart/form-data; boundary=****bbcf5f9e-6ccf-4b63-91ab-6e645caf02af****");
        fieldVisitDataServiceResponse10.LevelSurveyActivity = levelSurveyActivity23;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisit fieldVisit34 = fieldVisit9.setLevelSurveyActivity(levelSurveyActivity23);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CorrectionListServiceRequest correctionListServiceRequest35 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CorrectionListServiceRequest();
        correctionListServiceRequest35.TimeSeriesUniqueId = "/AQUARIUS";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse38 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary39 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary41 = dischargeSummary39.setPublish((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse42 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant43 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse44 = locationDescriptionListServiceResponse42.setNextToken(instant43);
        dischargeSummary39.MeasurementTime = instant43;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse46 = locationDescriptionListServiceResponse38.setNextToken(instant43);
        java.time.Instant instant47 = locationDescriptionListServiceResponse38.getNextToken();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest48 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ControlConditionActivity controlConditionActivity49 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ControlConditionActivity();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ControlCleanedType controlCleanedType50 = null;
        controlConditionActivity49.ControlCleaned = controlCleanedType50;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse52 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant53 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse54 = locationDescriptionListServiceResponse52.setNextToken(instant53);
        controlConditionActivity49.DateCleaned = instant53;
        timeAlignedDataServiceRequest48.QueryFrom = instant53;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse57 = locationDescriptionListServiceResponse38.setNextToken(instant53);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CorrectionListServiceRequest correctionListServiceRequest58 = correctionListServiceRequest35.setQueryTo(instant53);
        java.time.Instant instant59 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CorrectionListServiceRequest correctionListServiceRequest60 = correctionListServiceRequest58.setQueryTo(instant59);
        java.lang.String str61 = correctionListServiceRequest60.TimeSeriesUniqueId;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesApprovalsTransactionListServiceRequest timeSeriesApprovalsTransactionListServiceRequest62 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesApprovalsTransactionListServiceRequest();
        java.lang.String str63 = timeSeriesApprovalsTransactionListServiceRequest62.getTimeSeriesUniqueId();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ControlConditionActivity controlConditionActivity64 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ControlConditionActivity();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ControlCleanedType controlCleanedType65 = null;
        controlConditionActivity64.ControlCleaned = controlCleanedType65;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse67 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant68 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse69 = locationDescriptionListServiceResponse67.setNextToken(instant68);
        controlConditionActivity64.DateCleaned = instant68;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesApprovalsTransactionListServiceRequest timeSeriesApprovalsTransactionListServiceRequest71 = timeSeriesApprovalsTransactionListServiceRequest62.setQueryTo(instant68);
        correctionListServiceRequest60.QueryFrom = instant68;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitDescription fieldVisitDescription73 = fieldVisit9.setLastMatchedTime(instant68);
        org.junit.Assert.assertNotNull(datumConversionResult3);
        org.junit.Assert.assertNull(gageHeightAtZeroFlowActivity5);
        org.junit.Assert.assertNotNull(gageHeightAtZeroFlowActivity8);
        org.junit.Assert.assertNotNull(fieldVisit9);
        org.junit.Assert.assertNull(dischargeActivityList11);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNotNull(fieldVisitDataServiceResponse16);
        org.junit.Assert.assertNull(dischargeActivityList17);
        org.junit.Assert.assertNull(instant19);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertNotNull(fieldVisit27);
        org.junit.Assert.assertNull(levelSurveyMeasurementList28);
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertNotNull(levelSurveyActivity32);
        org.junit.Assert.assertNotNull(fieldVisit34);
        org.junit.Assert.assertNotNull(dischargeSummary41);
        org.junit.Assert.assertNotNull(instant43);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse44);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse46);
        org.junit.Assert.assertNotNull(instant47);
        org.junit.Assert.assertNotNull(instant53);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse54);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse57);
        org.junit.Assert.assertNotNull(correctionListServiceRequest58);
        org.junit.Assert.assertNotNull(instant59);
        org.junit.Assert.assertNotNull(correctionListServiceRequest60);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "/AQUARIUS" + "'", str61, "/AQUARIUS");
        org.junit.Assert.assertNull(str63);
        org.junit.Assert.assertNotNull(instant68);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse69);
        org.junit.Assert.assertNotNull(timeSeriesApprovalsTransactionListServiceRequest71);
        org.junit.Assert.assertNotNull(fieldVisitDescription73);
    }

    @Test
    public void test42936() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest85.test42936");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ApprovalMetadata approvalMetadata0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ApprovalMetadata();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ApprovalMetadata approvalMetadata2 = approvalMetadata0.setDisplayName("multipart/form-data; boundary=****231224c4-98ce-4e30-bd65-1d25287c4abe****");
        approvalMetadata2.Color = "multipart/form-data; boundary=****231224c4-98ce-4e30-bd65-1d25287c4abe****";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ApprovalMetadata approvalMetadata6 = approvalMetadata2.setIdentifier("http://MaxDurationhttp/json/reply/Float");
        approvalMetadata6.DisplayName = "yyyy'-'MM'-'dd'T'HH':'mm':'ss";
        java.lang.String str9 = approvalMetadata6.Color;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ApprovalMetadata approvalMetadata11 = approvalMetadata6.setColor("");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ApprovalMetadata approvalMetadata13 = approvalMetadata6.setColor("hi!:///AQUARIUS/Provisioning/v1");
        org.junit.Assert.assertNotNull(approvalMetadata2);
        org.junit.Assert.assertNotNull(approvalMetadata6);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "multipart/form-data; boundary=****231224c4-98ce-4e30-bd65-1d25287c4abe****" + "'", str9, "multipart/form-data; boundary=****231224c4-98ce-4e30-bd65-1d25287c4abe****");
        org.junit.Assert.assertNotNull(approvalMetadata11);
        org.junit.Assert.assertNotNull(approvalMetadata13);
    }

    @Test
    public void test42937() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest85.test42937");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostUnitGroup postUnitGroup0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostUnitGroup();
        java.lang.Integer int1 = postUnitGroup0.getTimeDimension();
        postUnitGroup0.BaseUnitIdentifier = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ";
        java.lang.String str4 = postUnitGroup0.getBaseUnitIdentifier();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostUnitGroup postUnitGroup6 = postUnitGroup0.setGroupIdentifier("multipart/form-data; boundary=****44f0772e-c3ca-4316-8e2a-61ec8540d661****");
        java.lang.String str7 = postUnitGroup0.BaseUnitSymbol;
        java.lang.Integer int8 = postUnitGroup0.MassDimension;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostUnitGroup postUnitGroup10 = postUnitGroup0.setBaseUnitPluralName("multipart/form-data; boundary=****e48381b1-dcc5-4af7-8a12-f30d1690cec2****");
        org.junit.Assert.assertNull(int1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ" + "'", str4, "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ");
        org.junit.Assert.assertNotNull(postUnitGroup6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(int8);
        org.junit.Assert.assertNotNull(postUnitGroup10);
    }

    @Test
    public void test42938() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest85.test42938");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray3 = new java.lang.String[] { "", "" };
        java.util.ArrayList<java.lang.String> strList4 = new java.util.ArrayList<java.lang.String>();
        boolean boolean5 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList4, strArray3);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_6 = getObservationsV2_0.setDataClassifications((java.util.List<java.lang.String>) strList4);
        getObservationsV2_6.DepthUnitCustomId = "hi!";
        java.lang.String str9 = getObservationsV2_6.CustomId;
        java.util.List<java.lang.String> strList10 = getObservationsV2_6.getSearch();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_11 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray13 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList14 = new java.util.ArrayList<java.lang.String>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList14, strArray13);
        getObservationsV2_11.SpecimenIds = strList14;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags17 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray21 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList22 = new java.util.ArrayList<java.lang.String>();
        boolean boolean23 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList22, strArray21);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags24 = putLocationTags17.setTagUniqueIds(strList22);
        getObservationsV2_11.QualityControlTypes = strList22;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_26 = getObservationsV2_6.setMedia((java.util.List<java.lang.String>) strList22);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_27 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String str28 = getObservationsV2_27.getCustomId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_29 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray31 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList32 = new java.util.ArrayList<java.lang.String>();
        boolean boolean33 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList32, strArray31);
        getObservationsV2_29.SpecimenIds = strList32;
        getObservationsV2_27.ProjectIds = strList32;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_36 = getObservationsV2_6.setObservedPropertyIds((java.util.List<java.lang.String>) strList32);
        getObservationsV2_36.Cursor = "'.'SSSSSSS";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest39 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest();
        java.lang.Object obj40 = timeAlignedDataServiceRequest39.getResponseType();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse41 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant42 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse43 = locationDescriptionListServiceResponse41.setNextToken(instant42);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest44 = timeAlignedDataServiceRequest39.setQueryFrom(instant42);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags45 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray49 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList50 = new java.util.ArrayList<java.lang.String>();
        boolean boolean51 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList50, strArray49);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags52 = putLocationTags45.setTagUniqueIds(strList50);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest53 = timeAlignedDataServiceRequest39.setTimeSeriesOutputUnitIds(strList50);
        getObservationsV2_36.Search = strList50;
        java.time.Instant instant55 = getObservationsV2_36.StartObservedTime;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_56 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray59 = new java.lang.String[] { "", "" };
        java.util.ArrayList<java.lang.String> strList60 = new java.util.ArrayList<java.lang.String>();
        boolean boolean61 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList60, strArray59);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_62 = getObservationsV2_56.setDataClassifications((java.util.List<java.lang.String>) strList60);
        getObservationsV2_62.DepthUnitCustomId = "hi!";
        java.lang.String str65 = getObservationsV2_62.CustomId;
        java.util.List<java.lang.String> strList66 = getObservationsV2_62.getSearch();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_67 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray69 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList70 = new java.util.ArrayList<java.lang.String>();
        boolean boolean71 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList70, strArray69);
        getObservationsV2_67.SpecimenIds = strList70;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags73 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray77 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList78 = new java.util.ArrayList<java.lang.String>();
        boolean boolean79 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList78, strArray77);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags80 = putLocationTags73.setTagUniqueIds(strList78);
        getObservationsV2_67.QualityControlTypes = strList78;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_82 = getObservationsV2_62.setMedia((java.util.List<java.lang.String>) strList78);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_83 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String str84 = getObservationsV2_83.getCustomId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_85 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray87 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList88 = new java.util.ArrayList<java.lang.String>();
        boolean boolean89 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList88, strArray87);
        getObservationsV2_85.SpecimenIds = strList88;
        getObservationsV2_83.ProjectIds = strList88;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_92 = getObservationsV2_62.setObservedPropertyIds((java.util.List<java.lang.String>) strList88);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_93 = getObservationsV2_36.setActivityIds((java.util.List<java.lang.String>) strList88);
        getObservationsV2_93.SpecimenName = "yyyy'-'MM'-'dd'T'HH':'mm':'ss";
        java.util.List<java.lang.String> strList96 = getObservationsV2_93.LabResultLabAnalysisMethodIds;
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(getObservationsV2_6);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNull(strList10);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(putLocationTags24);
        org.junit.Assert.assertNotNull(getObservationsV2_26);
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(getObservationsV2_36);
        org.junit.Assert.assertNotNull(obj40);
        org.junit.Assert.assertEquals(obj40.toString(), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj40), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj40), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertNotNull(instant42);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse43);
        org.junit.Assert.assertNotNull(timeAlignedDataServiceRequest44);
        org.junit.Assert.assertNotNull(strArray49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNotNull(putLocationTags52);
        org.junit.Assert.assertNotNull(timeAlignedDataServiceRequest53);
        org.junit.Assert.assertNull(instant55);
        org.junit.Assert.assertNotNull(strArray59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(getObservationsV2_62);
        org.junit.Assert.assertNull(str65);
        org.junit.Assert.assertNull(strList66);
        org.junit.Assert.assertNotNull(strArray69);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertNotNull(strArray77);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
        org.junit.Assert.assertNotNull(putLocationTags80);
        org.junit.Assert.assertNotNull(getObservationsV2_82);
        org.junit.Assert.assertNull(str84);
        org.junit.Assert.assertNotNull(strArray87);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + true + "'", boolean89 == true);
        org.junit.Assert.assertNotNull(getObservationsV2_92);
        org.junit.Assert.assertNotNull(getObservationsV2_93);
        org.junit.Assert.assertNull(strList96);
    }

    @Test
    public void test42939() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest85.test42939");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportChangeItem importChangeItem0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportChangeItem();
        java.lang.Object obj1 = importChangeItem0.getRight();
        java.lang.String str2 = importChangeItem0.getPropertyName();
        importChangeItem0.PropertyName = "hi!:///AQUARIUS/Provisioning/v1";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutQualifier putQualifier5 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutQualifier();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutQualifier putQualifier7 = putQualifier5.setUniqueId("");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_8 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray11 = new java.lang.String[] { "", "" };
        java.util.ArrayList<java.lang.String> strList12 = new java.util.ArrayList<java.lang.String>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList12, strArray11);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_14 = getObservationsV2_8.setDataClassifications((java.util.List<java.lang.String>) strList12);
        getObservationsV2_14.DepthUnitCustomId = "hi!";
        java.lang.String str17 = getObservationsV2_14.CustomId;
        java.util.List<java.lang.String> strList18 = getObservationsV2_14.getSearch();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_19 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray21 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList22 = new java.util.ArrayList<java.lang.String>();
        boolean boolean23 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList22, strArray21);
        getObservationsV2_19.SpecimenIds = strList22;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags25 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray29 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList30 = new java.util.ArrayList<java.lang.String>();
        boolean boolean31 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList30, strArray29);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags32 = putLocationTags25.setTagUniqueIds(strList30);
        getObservationsV2_19.QualityControlTypes = strList30;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_34 = getObservationsV2_14.setMedia((java.util.List<java.lang.String>) strList30);
        putQualifier5.GroupIdentifiers = strList30;
        importChangeItem0.Left = putQualifier5;
        java.lang.String str37 = putQualifier5.getUniqueId();
        putQualifier5.PublicIdentifier = "2021.4.62.0";
        putQualifier5.DisplayName = "9999-12-31T23:59:59.9999999Z://2021.4.62.0";
        java.lang.String str42 = putQualifier5.PublicIdentifier;
        org.junit.Assert.assertNull(obj1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNotNull(putQualifier7);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(getObservationsV2_14);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertNull(strList18);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(strArray29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(putLocationTags32);
        org.junit.Assert.assertNotNull(getObservationsV2_34);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "2021.4.62.0" + "'", str42, "2021.4.62.0");
    }

    @Test
    public void test42940() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest85.test42940");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDataServiceResponse locationDataServiceResponse0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDataServiceResponse();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDescription timeSeriesDescription1 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDescription();
        java.time.Instant instant2 = timeSeriesDescription1.getCorrectedStartTime();
        java.lang.String str3 = timeSeriesDescription1.getComputationIdentifier();
        timeSeriesDescription1.TimeSeriesType = "-PT87591240H";
        java.lang.String str6 = timeSeriesDescription1.getIdentifier();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_7 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray10 = new java.lang.String[] { "", "" };
        java.util.ArrayList<java.lang.String> strList11 = new java.util.ArrayList<java.lang.String>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList11, strArray10);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_13 = getObservationsV2_7.setDataClassifications((java.util.List<java.lang.String>) strList11);
        java.util.List<java.lang.String> strList14 = getObservationsV2_7.ResultGrades;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary15 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        dischargeSummary15.Reviewer = "";
        java.time.Instant instant18 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        dischargeSummary15.MeasurementTime = instant18;
        getObservationsV2_7.StartResultTime = instant18;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDescription timeSeriesDescription21 = timeSeriesDescription1.setCorrectedStartTime(instant18);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetActivities getActivities22 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetActivities();
        getActivities22.Limit = 10;
        java.util.List<java.lang.String> strList25 = getActivities22.ActivityTemplateId;
        java.lang.String str26 = getActivities22.Sort;
        java.util.List<java.lang.String> strList27 = getActivities22.CollectionMethodIds;
        java.lang.String str28 = getActivities22.getCustomId();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitDescriptionListServiceResponse fieldVisitDescriptionListServiceResponse29 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitDescriptionListServiceResponse();
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitDescription> fieldVisitDescriptionList30 = fieldVisitDescriptionListServiceResponse29.getDeletedFieldVisitDescriptions();
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitDescription> fieldVisitDescriptionList31 = fieldVisitDescriptionListServiceResponse29.DeletedFieldVisitDescriptions;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary32 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        dischargeSummary32.Reviewer = "";
        java.time.Instant instant35 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        dischargeSummary32.MeasurementTime = instant35;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.BaseFlowType baseFlowType37 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.BaseFlowType.BaseFlow;
        dischargeSummary32.BaseFlow = baseFlowType37;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.BaseFlowType baseFlowType39 = dischargeSummary32.BaseFlow;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingModelDescriptionListServiceResponse ratingModelDescriptionListServiceResponse40 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingModelDescriptionListServiceResponse();
        java.util.List<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingModelDescription> ratingModelDescriptionList41 = ratingModelDescriptionListServiceResponse40.RatingModelDescriptions;
        java.time.Instant instant42 = ratingModelDescriptionListServiceResponse40.getNextToken();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CalibrationCheck calibrationCheck43 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CalibrationCheck();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CalibrationCheckType calibrationCheckType44 = calibrationCheck43.getCalibrationCheckType();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay45 = calibrationCheck43.Value;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse46 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary47 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary49 = dischargeSummary47.setPublish((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse50 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant51 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse52 = locationDescriptionListServiceResponse50.setNextToken(instant51);
        dischargeSummary47.MeasurementTime = instant51;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse54 = locationDescriptionListServiceResponse46.setNextToken(instant51);
        java.time.Instant instant55 = locationDescriptionListServiceResponse46.getNextToken();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CalibrationCheck calibrationCheck56 = calibrationCheck43.setTime(instant55);
        java.time.Instant instant57 = calibrationCheck56.Time;
        ratingModelDescriptionListServiceResponse40.NextToken = instant57;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary59 = dischargeSummary32.setMeasurementEndTime(instant57);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PublishServiceResponse publishServiceResponse60 = fieldVisitDescriptionListServiceResponse29.setResponseTime(instant57);
        getActivities22.FromStartTime = instant57;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDescription timeSeriesDescription62 = timeSeriesDescription21.setRawStartTime(instant57);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDescription timeSeriesDescription64 = timeSeriesDescription21.setParameterId("http://MaxDurationhttp/json/reply/ArrayList");
        java.time.Instant instant65 = timeSeriesDescription21.RawEndTime;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDescription timeSeriesDescription66 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDescription();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest67 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest();
        java.lang.Object obj68 = timeAlignedDataServiceRequest67.getResponseType();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse69 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant70 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse71 = locationDescriptionListServiceResponse69.setNextToken(instant70);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest72 = timeAlignedDataServiceRequest67.setQueryFrom(instant70);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDescription timeSeriesDescription73 = timeSeriesDescription66.setRawStartTime(instant70);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDescription timeSeriesDescription75 = timeSeriesDescription73.setSubLocationIdentifier("");
        java.time.Instant instant76 = timeSeriesDescription73.LastModified;
        java.lang.Boolean boolean77 = timeSeriesDescription73.isPublish();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ExtendedAttribute[] extendedAttributeArray78 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ExtendedAttribute[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ExtendedAttribute> extendedAttributeList79 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ExtendedAttribute>();
        boolean boolean80 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ExtendedAttribute>) extendedAttributeList79, extendedAttributeArray78);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDescription timeSeriesDescription81 = timeSeriesDescription73.setExtendedAttributes((java.util.List<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ExtendedAttribute>) extendedAttributeList79);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDescription timeSeriesDescription82 = timeSeriesDescription21.setExtendedAttributes((java.util.List<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ExtendedAttribute>) extendedAttributeList79);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDataServiceResponse locationDataServiceResponse83 = locationDataServiceResponse0.setExtendedAttributes(extendedAttributeList79);
        java.lang.String str84 = locationDataServiceResponse83.ElevationUnits;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDataServiceResponse locationDataServiceResponse86 = locationDataServiceResponse83.setLatitude((java.lang.Double) 10.0d);
        org.junit.Assert.assertNull(instant2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(getObservationsV2_13);
        org.junit.Assert.assertNull(strList14);
        org.junit.Assert.assertNotNull(instant18);
        org.junit.Assert.assertNotNull(timeSeriesDescription21);
        org.junit.Assert.assertNull(strList25);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertNull(strList27);
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertNull(fieldVisitDescriptionList30);
        org.junit.Assert.assertNull(fieldVisitDescriptionList31);
        org.junit.Assert.assertNotNull(instant35);
        org.junit.Assert.assertTrue("'" + baseFlowType37 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.BaseFlowType.BaseFlow + "'", baseFlowType37.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.BaseFlowType.BaseFlow));
        org.junit.Assert.assertTrue("'" + baseFlowType39 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.BaseFlowType.BaseFlow + "'", baseFlowType39.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.BaseFlowType.BaseFlow));
        org.junit.Assert.assertNull(ratingModelDescriptionList41);
        org.junit.Assert.assertNull(instant42);
        org.junit.Assert.assertNull(calibrationCheckType44);
        org.junit.Assert.assertNull(doubleWithDisplay45);
        org.junit.Assert.assertNotNull(dischargeSummary49);
        org.junit.Assert.assertNotNull(instant51);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse52);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse54);
        org.junit.Assert.assertNotNull(instant55);
        org.junit.Assert.assertNotNull(calibrationCheck56);
        org.junit.Assert.assertNotNull(instant57);
        org.junit.Assert.assertNotNull(dischargeSummary59);
        org.junit.Assert.assertNotNull(publishServiceResponse60);
        org.junit.Assert.assertNotNull(timeSeriesDescription62);
        org.junit.Assert.assertNotNull(timeSeriesDescription64);
        org.junit.Assert.assertNull(instant65);
        org.junit.Assert.assertNotNull(obj68);
        org.junit.Assert.assertEquals(obj68.toString(), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj68), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj68), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertNotNull(instant70);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse71);
        org.junit.Assert.assertNotNull(timeAlignedDataServiceRequest72);
        org.junit.Assert.assertNotNull(timeSeriesDescription73);
        org.junit.Assert.assertNotNull(timeSeriesDescription75);
        org.junit.Assert.assertNull(instant76);
        org.junit.Assert.assertNull(boolean77);
        org.junit.Assert.assertNotNull(extendedAttributeArray78);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(timeSeriesDescription81);
        org.junit.Assert.assertNotNull(timeSeriesDescription82);
        org.junit.Assert.assertNotNull(locationDataServiceResponse83);
        org.junit.Assert.assertNull(str84);
        org.junit.Assert.assertNotNull(locationDataServiceResponse86);
    }

    @Test
    public void test42941() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest85.test42941");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDatumPeriod locationDatumPeriod0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDatumPeriod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetActivities getActivities1 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetActivities();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse2 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary3 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary5 = dischargeSummary3.setPublish((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse6 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant7 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse8 = locationDescriptionListServiceResponse6.setNextToken(instant7);
        dischargeSummary3.MeasurementTime = instant7;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse10 = locationDescriptionListServiceResponse2.setNextToken(instant7);
        java.time.Instant instant11 = locationDescriptionListServiceResponse2.getNextToken();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetActivities getActivities12 = getActivities1.setToStartTime(instant11);
        java.lang.String str13 = getActivities12.getSort();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetActivities getActivities15 = getActivities12.setLimit((java.lang.Integer) 1);
        getActivities15.Cursor = "";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_18 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray21 = new java.lang.String[] { "", "" };
        java.util.ArrayList<java.lang.String> strList22 = new java.util.ArrayList<java.lang.String>();
        boolean boolean23 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList22, strArray21);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_24 = getObservationsV2_18.setDataClassifications((java.util.List<java.lang.String>) strList22);
        java.util.List<java.lang.String> strList25 = getObservationsV2_18.ResultGrades;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary26 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        dischargeSummary26.Reviewer = "";
        java.time.Instant instant29 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        dischargeSummary26.MeasurementTime = instant29;
        getObservationsV2_18.StartResultTime = instant29;
        java.lang.String[] strArray41 = new java.lang.String[] { "https", "/AQUARIUS/Provisioning/v1", "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ", "2021.4.62.0", "hi!", "2021.4.62.0", "2021.4.62.0", "/AQUARIUS/Acquisition/v2", "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ" };
        java.util.ArrayList<java.lang.String> strList42 = new java.util.ArrayList<java.lang.String>();
        boolean boolean43 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList42, strArray41);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_44 = getObservationsV2_18.setAnalyticalGroupIds((java.util.List<java.lang.String>) strList42);
        getActivities15.ActivityTypes = strList42;
        java.lang.String str46 = getActivities15.Sort;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Qualifier qualifier47 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Qualifier();
        java.time.Instant instant48 = qualifier47.DateApplied;
        java.lang.String str49 = qualifier47.User;
        java.lang.String str50 = qualifier47.getIdentifier();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest51 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest();
        java.lang.Object obj52 = timeAlignedDataServiceRequest51.getResponseType();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse53 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant54 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse55 = locationDescriptionListServiceResponse53.setNextToken(instant54);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest56 = timeAlignedDataServiceRequest51.setQueryFrom(instant54);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Qualifier qualifier57 = qualifier47.setDateApplied(instant54);
        java.time.Instant instant58 = qualifier57.getDateApplied();
        getActivities15.ToStartTime = instant58;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDatumPeriod locationDatumPeriod60 = locationDatumPeriod0.setAppliedTimeUtc(instant58);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeRange timeRange61 = locationDatumPeriod0.TimeRange;
        java.lang.String str62 = locationDatumPeriod0.getComments();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ReferencePointPeriod referencePointPeriod63 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ReferencePointPeriod();
        java.lang.Boolean boolean64 = referencePointPeriod63.IsMeasuredAgainstLocalAssumedDatum;
        referencePointPeriod63.Unit = "/AQUARIUS/Acquisition/v2";
        java.lang.String str67 = referencePointPeriod63.Method;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ReferencePointPeriod referencePointPeriod69 = referencePointPeriod63.setMethod("yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MeasurementDirection measurementDirection70 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MeasurementDirection.FromBottomToTop;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ReferencePointPeriod referencePointPeriod71 = referencePointPeriod63.setMeasurementDirection(measurementDirection70);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDatumPeriod locationDatumPeriod72 = locationDatumPeriod0.setMeasurementDirection(measurementDirection70);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDatumPeriod locationDatumPeriod74 = locationDatumPeriod72.setComments("/AQUARIUS/Provisioning/v1");
        java.lang.Double double75 = locationDatumPeriod74.Uncertainty;
        org.junit.Assert.assertNotNull(dischargeSummary5);
        org.junit.Assert.assertNotNull(instant7);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse8);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse10);
        org.junit.Assert.assertNotNull(instant11);
        org.junit.Assert.assertNotNull(getActivities12);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNotNull(getActivities15);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(getObservationsV2_24);
        org.junit.Assert.assertNull(strList25);
        org.junit.Assert.assertNotNull(instant29);
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(getObservationsV2_44);
        org.junit.Assert.assertNull(str46);
        org.junit.Assert.assertNull(instant48);
        org.junit.Assert.assertNull(str49);
        org.junit.Assert.assertNull(str50);
        org.junit.Assert.assertNotNull(obj52);
        org.junit.Assert.assertEquals(obj52.toString(), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj52), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj52), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertNotNull(instant54);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse55);
        org.junit.Assert.assertNotNull(timeAlignedDataServiceRequest56);
        org.junit.Assert.assertNotNull(qualifier57);
        org.junit.Assert.assertNotNull(instant58);
        org.junit.Assert.assertNotNull(locationDatumPeriod60);
        org.junit.Assert.assertNull(timeRange61);
        org.junit.Assert.assertNull(str62);
        org.junit.Assert.assertNull(boolean64);
        org.junit.Assert.assertNull(str67);
        org.junit.Assert.assertNotNull(referencePointPeriod69);
        org.junit.Assert.assertTrue("'" + measurementDirection70 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MeasurementDirection.FromBottomToTop + "'", measurementDirection70.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MeasurementDirection.FromBottomToTop));
        org.junit.Assert.assertNotNull(referencePointPeriod71);
        org.junit.Assert.assertNotNull(locationDatumPeriod72);
        org.junit.Assert.assertNotNull(locationDatumPeriod74);
        org.junit.Assert.assertNull(double75);
    }

    @Test
    public void test42942() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest85.test42942");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag samplingContextTag0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag();
        java.lang.String str1 = samplingContextTag0.getDescription();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes2 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag samplingContextTag3 = samplingContextTag0.setAuditAttributes(auditAttributes2);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag samplingContextTag5 = samplingContextTag3.setId("yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ");
        java.lang.String str6 = samplingContextTag3.Name;
        java.lang.String str7 = samplingContextTag3.getName();
        java.lang.String str8 = samplingContextTag3.Id;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(samplingContextTag3);
        org.junit.Assert.assertNotNull(samplingContextTag5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ" + "'", str8, "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ");
    }

    @Test
    public void test42943() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest85.test42943");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ThresholdType thresholdType0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ThresholdType();
        thresholdType0.Description = "/AQUARIUS/Acquisition/v2://9999-12-31T23:59:59.999Z";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ThresholdTypeSeverity thresholdTypeSeverity3 = thresholdType0.getSeverity();
        java.lang.String str4 = thresholdType0.Description;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ThresholdSuppressionOption thresholdSuppressionOption5 = thresholdType0.getThresholdSuppressionOption();
        org.junit.Assert.assertNull(thresholdTypeSeverity3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "/AQUARIUS/Acquisition/v2://9999-12-31T23:59:59.999Z" + "'", str4, "/AQUARIUS/Acquisition/v2://9999-12-31T23:59:59.999Z");
        org.junit.Assert.assertNull(thresholdSuppressionOption5);
    }

    @Test
    public void test42944() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest85.test42944");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostBasicTimeSeries postBasicTimeSeries0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostBasicTimeSeries();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostBasicTimeSeries postBasicTimeSeries2 = postBasicTimeSeries0.setLabel("yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSSSSSZZZZZ");
        java.lang.Boolean boolean3 = postBasicTimeSeries2.isPublish();
        java.lang.String str4 = postBasicTimeSeries2.getUtcOffset();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostBasicTimeSeries postBasicTimeSeries6 = postBasicTimeSeries2.setParameter("multipart/form-data; boundary=****231224c4-98ce-4e30-bd65-1d25287c4abe****");
        org.junit.Assert.assertNotNull(postBasicTimeSeries2);
        org.junit.Assert.assertNull(boolean3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNotNull(postBasicTimeSeries6);
    }

    @Test
    public void test42945() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest85.test42945");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostStatisticalDerivedTimeSeries postStatisticalDerivedTimeSeries0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostStatisticalDerivedTimeSeries();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostStatisticalDerivedTimeSeries postStatisticalDerivedTimeSeries2 = postStatisticalDerivedTimeSeries0.setComment("'.'SSSSSSS");
        java.lang.String str3 = postStatisticalDerivedTimeSeries0.getParameter();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostStatisticalDerivedTimeSeries postStatisticalDerivedTimeSeries5 = postStatisticalDerivedTimeSeries0.setTimeSeriesUniqueId("");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.InterpolationType interpolationType6 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.InterpolationType.InstantaneousValues;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostStatisticalDerivedTimeSeries postStatisticalDerivedTimeSeries7 = postStatisticalDerivedTimeSeries0.setInterpolationType(interpolationType6);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostStatisticalDerivedTimeSeries postStatisticalDerivedTimeSeries9 = postStatisticalDerivedTimeSeries0.setDescription("");
        java.lang.String str10 = postStatisticalDerivedTimeSeries9.getComputationPeriodIdentifier();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.InterpolationType interpolationType11 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.InterpolationType.DiscreteValues;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostStatisticalDerivedTimeSeries postStatisticalDerivedTimeSeries12 = postStatisticalDerivedTimeSeries9.setInterpolationType(interpolationType11);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostStatisticalDerivedTimeSeries postStatisticalDerivedTimeSeries14 = postStatisticalDerivedTimeSeries12.setUtcOffset("multipart/form-data; boundary=****f2ce0d54-dac7-4cd0-b74f-1024089261f9****");
        postStatisticalDerivedTimeSeries12.LocationUniqueId = "0001-01-01T00:00:00.000Z";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostStatisticalDerivedTimeSeries postStatisticalDerivedTimeSeries18 = postStatisticalDerivedTimeSeries12.setParameter("hi!");
        java.lang.String str19 = postStatisticalDerivedTimeSeries18.Comment;
        java.lang.String str20 = postStatisticalDerivedTimeSeries18.getComment();
        org.junit.Assert.assertNotNull(postStatisticalDerivedTimeSeries2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(postStatisticalDerivedTimeSeries5);
        org.junit.Assert.assertTrue("'" + interpolationType6 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.InterpolationType.InstantaneousValues + "'", interpolationType6.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.InterpolationType.InstantaneousValues));
        org.junit.Assert.assertNotNull(postStatisticalDerivedTimeSeries7);
        org.junit.Assert.assertNotNull(postStatisticalDerivedTimeSeries9);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertTrue("'" + interpolationType11 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.InterpolationType.DiscreteValues + "'", interpolationType11.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.InterpolationType.DiscreteValues));
        org.junit.Assert.assertNotNull(postStatisticalDerivedTimeSeries12);
        org.junit.Assert.assertNotNull(postStatisticalDerivedTimeSeries14);
        org.junit.Assert.assertNotNull(postStatisticalDerivedTimeSeries18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "'.'SSSSSSS" + "'", str19, "'.'SSSSSSS");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "'.'SSSSSSS" + "'", str20, "'.'SSSSSSS");
    }

    @Test
    public void test42946() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest85.test42946");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttributeDefinition extendedAttributeDefinition0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttributeDefinition();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate1 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate3 = specimenTemplate1.setCustomId("hi!");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PreservativeType preservativeType4 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PreservativeType.SODIUM_AZIDE;
        specimenTemplate3.Preservative = preservativeType4;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails6 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails8 = labResultDetails6.setAnalysisComment("/AQUARIUS/Acquisition/v2");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes9 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails10 = labResultDetails8.setAuditAttributes(auditAttributes9);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate11 = specimenTemplate3.setAuditAttributes(auditAttributes9);
        extendedAttributeDefinition0.AuditAttributes = auditAttributes9;
        java.lang.Boolean boolean13 = extendedAttributeDefinition0.Mandatory;
        java.lang.Boolean boolean14 = extendedAttributeDefinition0.Mandatory;
        extendedAttributeDefinition0.DefaultValue = "multipart/form-data; boundary=****bbcf5f9e-6ccf-4b63-91ab-6e645caf02af****";
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttributeListItem> extendedAttributeListItemList17 = extendedAttributeDefinition0.getDropDownListItems();
        org.junit.Assert.assertNotNull(specimenTemplate3);
        org.junit.Assert.assertTrue("'" + preservativeType4 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PreservativeType.SODIUM_AZIDE + "'", preservativeType4.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PreservativeType.SODIUM_AZIDE));
        org.junit.Assert.assertNotNull(labResultDetails8);
        org.junit.Assert.assertNotNull(labResultDetails10);
        org.junit.Assert.assertNotNull(specimenTemplate11);
        org.junit.Assert.assertNull(boolean13);
        org.junit.Assert.assertNull(boolean14);
        org.junit.Assert.assertNull(extendedAttributeListItemList17);
    }

    @Test
    public void test42947() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest85.test42947");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetSamplingLocationGroup getSamplingLocationGroup0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetSamplingLocationGroup();
        java.lang.Object obj1 = getSamplingLocationGroup0.getResponseType();
        java.lang.String str2 = getSamplingLocationGroup0.Id;
        java.lang.String str3 = getSamplingLocationGroup0.Id;
        org.junit.Assert.assertNotNull(obj1);
        org.junit.Assert.assertEquals(obj1.toString(), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$SamplingLocationGroup");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj1), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$SamplingLocationGroup");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj1), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$SamplingLocationGroup");
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(str3);
    }

    @Test
    public void test42948() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest85.test42948");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutTaxon putTaxon0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutTaxon();
        putTaxon0.ParentId = "http://MaxDurationhttp/json/reply/ArrayList";
        java.lang.String str3 = putTaxon0.ScientificName;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutTaxon putTaxon5 = putTaxon0.setItisUrl("POST");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutTaxon putTaxon7 = putTaxon0.setItisComment("multipart/form-data; boundary=****7eff1774-b6b0-471a-961c-156c64359366****");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutTaxon putTaxon9 = putTaxon0.setParentId("http");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes10 = putTaxon9.AuditAttributes;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLabAnalysisMethod postLabAnalysisMethod11 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLabAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes12 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLabAnalysisMethod postLabAnalysisMethod13 = postLabAnalysisMethod11.setAuditAttributes(auditAttributes12);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty[] observedPropertyArray14 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty> observedPropertyList15 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty>) observedPropertyList15, observedPropertyArray14);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLabAnalysisMethod postLabAnalysisMethod17 = postLabAnalysisMethod13.setObservedProperties((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty>) observedPropertyList15);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes18 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLabAnalysisMethod postLabAnalysisMethod19 = postLabAnalysisMethod13.setAuditAttributes(auditAttributes18);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails20 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails();
        java.lang.String str21 = labResultDetails20.DilutionFactor;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Laboratory laboratory22 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails23 = labResultDetails20.setLaboratory(laboratory22);
        java.time.OffsetDateTime offsetDateTime24 = null;
        labResultDetails20.DatePrepared = offsetDateTime24;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes26 = labResultDetails20.AuditAttributes;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabReport labReport27 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabReport();
        labResultDetails20.LabReport = labReport27;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutObservedProperty putObservedProperty29 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutObservedProperty();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity quantity30 = putObservedProperty29.LowerLimit;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Unit unit31 = putObservedProperty29.getDefaultUnit();
        java.lang.String str32 = putObservedProperty29.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutObservedProperty putObservedProperty33 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutObservedProperty();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity quantity34 = putObservedProperty33.LowerLimit;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutObservedProperty putObservedProperty36 = putObservedProperty33.setDescription("");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisType analysisType37 = putObservedProperty33.AnalysisType;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisType analysisType38 = putObservedProperty33.getAnalysisType();
        putObservedProperty33.Description = "POST";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultType resultType41 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultType.CATEGORICAL_FIXED_VALUES;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutObservedProperty putObservedProperty42 = putObservedProperty33.setResultType(resultType41);
        putObservedProperty29.ResultType = resultType41;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricConfiguration metricConfiguration44 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricConfiguration();
        java.lang.String str45 = metricConfiguration44.getId();
        metricConfiguration44.CustomId = "/AQUARIUS/Acquisition/v2";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty observedProperty48 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricConfiguration metricConfiguration49 = metricConfiguration44.setObservedProperty(observedProperty48);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AggregationType aggregationType50 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AggregationType.SUM;
        metricConfiguration44.AggregationType = aggregationType50;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricConfiguration metricConfiguration52 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricConfiguration();
        java.lang.String str53 = metricConfiguration52.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty observedProperty54 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty();
        observedProperty54.CasNumber = "MinDuration";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricConfiguration metricConfiguration57 = metricConfiguration52.setObservedProperty(observedProperty54);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultType resultType58 = observedProperty54.ResultType;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservedProperty postObservedProperty59 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservedProperty();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UnitGroup unitGroup60 = postObservedProperty59.UnitGroup;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity quantity61 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Unit unit62 = null;
        quantity61.Unit = unit62;
        postObservedProperty59.LowerLimit = quantity61;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity quantity65 = postObservedProperty59.LowerLimit;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Unit unit66 = quantity65.Unit;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty observedProperty67 = observedProperty54.setUpperLimit(quantity65);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLabAnalysisMethod postLabAnalysisMethod68 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLabAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation69 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation();
        observation69.CustomId = "hi!";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.CategoricalResult categoricalResult72 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation73 = observation69.setCategoricalResult(categoricalResult72);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple[] importHistoryEventSimpleArray74 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple> importHistoryEventSimpleList75 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple>();
        boolean boolean76 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple>) importHistoryEventSimpleList75, importHistoryEventSimpleArray74);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation77 = observation69.setImportHistoryEventSimples((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple>) importHistoryEventSimpleList75);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLabAnalysisMethod postLabAnalysisMethod78 = postLabAnalysisMethod68.setImportHistoryEventSimples((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple>) importHistoryEventSimpleList75);
        observedProperty67.ImportHistoryEventSimples = importHistoryEventSimpleList75;
        metricConfiguration44.ObservedProperty = observedProperty67;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLabAnalysisMethod postLabAnalysisMethod81 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLabAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation82 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation();
        observation82.CustomId = "hi!";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.CategoricalResult categoricalResult85 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation86 = observation82.setCategoricalResult(categoricalResult85);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple[] importHistoryEventSimpleArray87 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple> importHistoryEventSimpleList88 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple>();
        boolean boolean89 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple>) importHistoryEventSimpleList88, importHistoryEventSimpleArray87);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation90 = observation82.setImportHistoryEventSimples((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple>) importHistoryEventSimpleList88);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLabAnalysisMethod postLabAnalysisMethod91 = postLabAnalysisMethod81.setImportHistoryEventSimples((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple>) importHistoryEventSimpleList88);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty observedProperty92 = observedProperty67.setImportHistoryEventSimples((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple>) importHistoryEventSimpleList88);
        putObservedProperty29.ImportHistoryEventSimples = importHistoryEventSimpleList88;
        labReport27.ImportHistoryEventSimples = importHistoryEventSimpleList88;
        postLabAnalysisMethod13.ImportHistoryEventSimples = importHistoryEventSimpleList88;
        putTaxon9.ImportHistoryEventSimples = importHistoryEventSimpleList88;
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(putTaxon5);
        org.junit.Assert.assertNotNull(putTaxon7);
        org.junit.Assert.assertNotNull(putTaxon9);
        org.junit.Assert.assertNull(auditAttributes10);
        org.junit.Assert.assertNotNull(postLabAnalysisMethod13);
        org.junit.Assert.assertNotNull(observedPropertyArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(postLabAnalysisMethod17);
        org.junit.Assert.assertNotNull(postLabAnalysisMethod19);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNotNull(labResultDetails23);
        org.junit.Assert.assertNull(auditAttributes26);
        org.junit.Assert.assertNull(quantity30);
        org.junit.Assert.assertNull(unit31);
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertNull(quantity34);
        org.junit.Assert.assertNotNull(putObservedProperty36);
        org.junit.Assert.assertNull(analysisType37);
        org.junit.Assert.assertNull(analysisType38);
        org.junit.Assert.assertTrue("'" + resultType41 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultType.CATEGORICAL_FIXED_VALUES + "'", resultType41.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultType.CATEGORICAL_FIXED_VALUES));
        org.junit.Assert.assertNotNull(putObservedProperty42);
        org.junit.Assert.assertNull(str45);
        org.junit.Assert.assertNotNull(metricConfiguration49);
        org.junit.Assert.assertTrue("'" + aggregationType50 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AggregationType.SUM + "'", aggregationType50.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AggregationType.SUM));
        org.junit.Assert.assertNull(str53);
        org.junit.Assert.assertNotNull(metricConfiguration57);
        org.junit.Assert.assertNull(resultType58);
        org.junit.Assert.assertNull(unitGroup60);
        org.junit.Assert.assertNotNull(quantity65);
        org.junit.Assert.assertNull(unit66);
        org.junit.Assert.assertNotNull(observedProperty67);
        org.junit.Assert.assertNotNull(observation73);
        org.junit.Assert.assertNotNull(importHistoryEventSimpleArray74);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(observation77);
        org.junit.Assert.assertNotNull(postLabAnalysisMethod78);
        org.junit.Assert.assertNotNull(observation86);
        org.junit.Assert.assertNotNull(importHistoryEventSimpleArray87);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertNotNull(observation90);
        org.junit.Assert.assertNotNull(postLabAnalysisMethod91);
        org.junit.Assert.assertNotNull(observedProperty92);
    }

    @Test
    public void test42949() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest85.test42949");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDataServiceResponse timeSeriesDataServiceResponse0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDataServiceResponse();
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.InterpolationType> interpolationTypeList1 = timeSeriesDataServiceResponse0.InterpolationTypes;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDataServiceResponse timeSeriesDataServiceResponse3 = timeSeriesDataServiceResponse0.setLabel("/AQUARIUS");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDataServiceResponse timeSeriesDataServiceResponse5 = timeSeriesDataServiceResponse3.setUniqueId("multipart/form-data; boundary=****bbcf5f9e-6ccf-4b63-91ab-6e645caf02af****");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDataServiceResponse timeSeriesDataServiceResponse7 = timeSeriesDataServiceResponse3.setLabel("MinDuration");
        java.lang.String str8 = timeSeriesDataServiceResponse3.getParameter();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDataServiceResponse timeSeriesDataServiceResponse10 = timeSeriesDataServiceResponse3.setLocationIdentifier("yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ");
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesPoint> timeSeriesPointList11 = timeSeriesDataServiceResponse3.getPoints();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDataServiceResponse timeSeriesDataServiceResponse12 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDataServiceResponse();
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.InterpolationType> interpolationTypeList13 = timeSeriesDataServiceResponse12.getInterpolationTypes();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.StatisticalTimeRange statisticalTimeRange14 = null;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDataServiceResponse timeSeriesDataServiceResponse15 = timeSeriesDataServiceResponse12.setTimeRange(statisticalTimeRange14);
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Approval> approvalList16 = null;
        timeSeriesDataServiceResponse12.Approvals = approvalList16;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDataServiceResponse timeSeriesDataServiceResponse19 = timeSeriesDataServiceResponse12.setLocationIdentifier("multipart/form-data; boundary=****2917d69a-62fa-41ce-b981-4dbe2deab9f5****");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.StatisticalTimeRange statisticalTimeRange20 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.StatisticalTimeRange();
        timeSeriesDataServiceResponse19.TimeRange = statisticalTimeRange20;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesPoint timeSeriesPoint22 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesPoint();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.StatisticalDateTimeOffset statisticalDateTimeOffset23 = timeSeriesPoint22.getTimestamp();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesPoint timeSeriesPoint24 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesPoint();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.StatisticalDateTimeOffset statisticalDateTimeOffset25 = null;
        timeSeriesPoint24.Timestamp = statisticalDateTimeOffset25;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.StatisticalDateTimeOffset statisticalDateTimeOffset27 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.StatisticalDateTimeOffset();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesPoint timeSeriesPoint28 = timeSeriesPoint24.setTimestamp(statisticalDateTimeOffset27);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesPoint timeSeriesPoint29 = timeSeriesPoint22.setTimestamp(statisticalDateTimeOffset27);
        statisticalTimeRange20.EndTime = statisticalDateTimeOffset27;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.StatisticalDateTimeOffset statisticalDateTimeOffset31 = statisticalTimeRange20.getEndTime();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDataServiceResponse timeSeriesDataServiceResponse32 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDataServiceResponse();
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.InterpolationType> interpolationTypeList33 = timeSeriesDataServiceResponse32.getInterpolationTypes();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.StatisticalTimeRange statisticalTimeRange34 = null;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDataServiceResponse timeSeriesDataServiceResponse35 = timeSeriesDataServiceResponse32.setTimeRange(statisticalTimeRange34);
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Approval> approvalList36 = null;
        timeSeriesDataServiceResponse32.Approvals = approvalList36;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDataServiceResponse timeSeriesDataServiceResponse39 = timeSeriesDataServiceResponse32.setLocationIdentifier("multipart/form-data; boundary=****2917d69a-62fa-41ce-b981-4dbe2deab9f5****");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.StatisticalTimeRange statisticalTimeRange40 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.StatisticalTimeRange();
        timeSeriesDataServiceResponse39.TimeRange = statisticalTimeRange40;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesPoint timeSeriesPoint42 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesPoint();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.StatisticalDateTimeOffset statisticalDateTimeOffset43 = timeSeriesPoint42.getTimestamp();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesPoint timeSeriesPoint44 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesPoint();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.StatisticalDateTimeOffset statisticalDateTimeOffset45 = null;
        timeSeriesPoint44.Timestamp = statisticalDateTimeOffset45;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.StatisticalDateTimeOffset statisticalDateTimeOffset47 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.StatisticalDateTimeOffset();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesPoint timeSeriesPoint48 = timeSeriesPoint44.setTimestamp(statisticalDateTimeOffset47);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesPoint timeSeriesPoint49 = timeSeriesPoint42.setTimestamp(statisticalDateTimeOffset47);
        statisticalTimeRange40.EndTime = statisticalDateTimeOffset47;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.StatisticalTimeRange statisticalTimeRange51 = statisticalTimeRange20.setStartTime(statisticalDateTimeOffset47);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.StatisticalDateTimeOffset statisticalDateTimeOffset52 = statisticalTimeRange51.StartTime;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDataServiceResponse timeSeriesDataServiceResponse53 = timeSeriesDataServiceResponse3.setTimeRange(statisticalTimeRange51);
        org.junit.Assert.assertNull(interpolationTypeList1);
        org.junit.Assert.assertNotNull(timeSeriesDataServiceResponse3);
        org.junit.Assert.assertNotNull(timeSeriesDataServiceResponse5);
        org.junit.Assert.assertNotNull(timeSeriesDataServiceResponse7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(timeSeriesDataServiceResponse10);
        org.junit.Assert.assertNull(timeSeriesPointList11);
        org.junit.Assert.assertNull(interpolationTypeList13);
        org.junit.Assert.assertNotNull(timeSeriesDataServiceResponse15);
        org.junit.Assert.assertNotNull(timeSeriesDataServiceResponse19);
        org.junit.Assert.assertNull(statisticalDateTimeOffset23);
        org.junit.Assert.assertNotNull(timeSeriesPoint28);
        org.junit.Assert.assertNotNull(timeSeriesPoint29);
        org.junit.Assert.assertNotNull(statisticalDateTimeOffset31);
        org.junit.Assert.assertNull(interpolationTypeList33);
        org.junit.Assert.assertNotNull(timeSeriesDataServiceResponse35);
        org.junit.Assert.assertNotNull(timeSeriesDataServiceResponse39);
        org.junit.Assert.assertNull(statisticalDateTimeOffset43);
        org.junit.Assert.assertNotNull(timeSeriesPoint48);
        org.junit.Assert.assertNotNull(timeSeriesPoint49);
        org.junit.Assert.assertNotNull(statisticalTimeRange51);
        org.junit.Assert.assertNotNull(statisticalDateTimeOffset52);
        org.junit.Assert.assertNotNull(timeSeriesDataServiceResponse53);
    }

    @Test
    public void test42950() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest85.test42950");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesUniqueIdListServiceRequest timeSeriesUniqueIdListServiceRequest0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesUniqueIdListServiceRequest();
        java.lang.Object obj1 = timeSeriesUniqueIdListServiceRequest0.getResponseType();
        timeSeriesUniqueIdListServiceRequest0.LocationIdentifier = "MinDuration";
        java.lang.String str4 = timeSeriesUniqueIdListServiceRequest0.getLocationIdentifier();
        java.lang.String str5 = timeSeriesUniqueIdListServiceRequest0.getLocationIdentifier();
        timeSeriesUniqueIdListServiceRequest0.ComputationIdentifier = "multipart/form-data; boundary=****7eff1774-b6b0-471a-961c-156c64359366****";
        java.lang.String str8 = timeSeriesUniqueIdListServiceRequest0.ComputationIdentifier;
        java.lang.String str9 = timeSeriesUniqueIdListServiceRequest0.getParameter();
        org.junit.Assert.assertNotNull(obj1);
        org.junit.Assert.assertEquals(obj1.toString(), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeSeriesUniqueIdListServiceResponse");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj1), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeSeriesUniqueIdListServiceResponse");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj1), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeSeriesUniqueIdListServiceResponse");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "MinDuration" + "'", str4, "MinDuration");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "MinDuration" + "'", str5, "MinDuration");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "multipart/form-data; boundary=****7eff1774-b6b0-471a-961c-156c64359366****" + "'", str8, "multipart/form-data; boundary=****7eff1774-b6b0-471a-961c-156c64359366****");
        org.junit.Assert.assertNull(str9);
    }

    @Test
    public void test42951() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest85.test42951");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RoundServiceResponse roundServiceResponse0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RoundServiceResponse();
        java.util.ArrayList<java.lang.String> strList1 = roundServiceResponse0.getData();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportObservations getExportObservations2 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportObservations();
        java.lang.String str3 = getExportObservations2.DepthUnitId;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportObservations getExportObservations5 = getExportObservations2.setSort("yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSSSSSZZZZZ");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportObservations getExportObservations7 = getExportObservations2.setSort("http://MaxDurationhttp/json/reply/Integer");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportObservations getExportObservations9 = getExportObservations7.setSort("-PT87591240H");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_10 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray13 = new java.lang.String[] { "", "" };
        java.util.ArrayList<java.lang.String> strList14 = new java.util.ArrayList<java.lang.String>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList14, strArray13);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_16 = getObservationsV2_10.setDataClassifications((java.util.List<java.lang.String>) strList14);
        getObservationsV2_16.DepthUnitCustomId = "hi!";
        java.lang.String str19 = getObservationsV2_16.CustomId;
        java.util.List<java.lang.String> strList20 = getObservationsV2_16.getSearch();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_21 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray23 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList24 = new java.util.ArrayList<java.lang.String>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList24, strArray23);
        getObservationsV2_21.SpecimenIds = strList24;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags27 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray31 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList32 = new java.util.ArrayList<java.lang.String>();
        boolean boolean33 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList32, strArray31);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags34 = putLocationTags27.setTagUniqueIds(strList32);
        getObservationsV2_21.QualityControlTypes = strList32;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_36 = getObservationsV2_16.setMedia((java.util.List<java.lang.String>) strList32);
        getExportObservations7.SamplingLocationGroupIds = strList32;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RoundServiceResponse roundServiceResponse38 = roundServiceResponse0.setData(strList32);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.PostVisitFileResponse postVisitFileResponse39 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.PostVisitFileResponse();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.FieldDataPlugin fieldDataPlugin40 = postVisitFileResponse39.getHandledByPlugin();
        java.util.ArrayList<java.lang.String> strList41 = postVisitFileResponse39.getVisitUris();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags42 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray46 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList47 = new java.util.ArrayList<java.lang.String>();
        boolean boolean48 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList47, strArray46);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags49 = putLocationTags42.setTagUniqueIds(strList47);
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ApplyTagRequest> applyTagRequestList50 = putLocationTags42.Tags;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags51 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String str52 = putLocationTags51.getLocationUniqueId();
        putLocationTags51.LocationUniqueId = "'.'SSSSSSS";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ApplyTagRequest[] applyTagRequestArray55 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ApplyTagRequest[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ApplyTagRequest> applyTagRequestList56 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ApplyTagRequest>();
        boolean boolean57 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ApplyTagRequest>) applyTagRequestList56, applyTagRequestArray55);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags58 = putLocationTags51.setTags(applyTagRequestList56);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags59 = putLocationTags42.setTags(applyTagRequestList56);
        java.util.ArrayList<java.lang.String> strList60 = putLocationTags42.getTagUniqueIds();
        postVisitFileResponse39.VisitIdentifiers = strList60;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RoundServiceResponse roundServiceResponse62 = roundServiceResponse38.setData(strList60);
        org.junit.Assert.assertNull(strList1);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(getExportObservations5);
        org.junit.Assert.assertNotNull(getExportObservations7);
        org.junit.Assert.assertNotNull(getExportObservations9);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(getObservationsV2_16);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertNull(strList20);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(putLocationTags34);
        org.junit.Assert.assertNotNull(getObservationsV2_36);
        org.junit.Assert.assertNotNull(roundServiceResponse38);
        org.junit.Assert.assertNull(fieldDataPlugin40);
        org.junit.Assert.assertNull(strList41);
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(putLocationTags49);
        org.junit.Assert.assertNull(applyTagRequestList50);
        org.junit.Assert.assertNull(str52);
        org.junit.Assert.assertNotNull(applyTagRequestArray55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(putLocationTags58);
        org.junit.Assert.assertNotNull(putLocationTags59);
        org.junit.Assert.assertNotNull(strList60);
        org.junit.Assert.assertNotNull(roundServiceResponse62);
    }

    @Test
    public void test42952() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest85.test42952");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VolumetricDischargeActivity volumetricDischargeActivity0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VolumetricDischargeActivity();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeChannelMeasurement dischargeChannelMeasurement1 = volumetricDischargeActivity0.getDischargeChannelMeasurement();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VolumetricDischargeActivity volumetricDischargeActivity3 = volumetricDischargeActivity0.setIsObserved((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VolumetricDischargeActivity volumetricDischargeActivity5 = volumetricDischargeActivity0.setIsValid((java.lang.Boolean) false);
        org.junit.Assert.assertNull(dischargeChannelMeasurement1);
        org.junit.Assert.assertNotNull(volumetricDischargeActivity3);
        org.junit.Assert.assertNotNull(volumetricDischargeActivity5);
    }

    @Test
    public void test42953() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest85.test42953");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostTag postTag0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostTag();
        java.lang.String str1 = postTag0.Description;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostTag postTag3 = postTag0.setName("MaxInstant");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostTag postTag5 = postTag3.setName("yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostTag postTag7 = postTag3.setDescription("");
        java.lang.String str8 = postTag7.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutShippingContainer putShippingContainer9 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutShippingContainer();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes10 = putShippingContainer9.AuditAttributes;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutShippingContainer putShippingContainer12 = putShippingContainer9.setId("multipart/form-data; boundary=****26835278-3e68-484a-a157-468aab2e69a2****");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostProject postProject13 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostProject();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes14 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostProject postProject15 = postProject13.setAuditAttributes(auditAttributes14);
        java.time.OffsetDateTime offsetDateTime16 = null;
        postProject13.StartTime = offsetDateTime16;
        java.time.OffsetDateTime offsetDateTime18 = postProject13.EndTime;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostProject postProject20 = postProject13.setScopeStatement("");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlan samplingPlan21 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlan();
        samplingPlan21.SamplingLocationGroupSelectionTypeRandomCount = 0;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationGroupSelectionType samplingLocationGroupSelectionType24 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationGroupSelectionType.ALL;
        samplingPlan21.SamplingLocationGroupSelectionType = samplingLocationGroupSelectionType24;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationGroup samplingLocationGroup26 = samplingPlan21.getSamplingLocationGroup();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes27 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlan samplingPlan28 = samplingPlan21.setAuditAttributes(auditAttributes27);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostProject postProject29 = postProject20.setAuditAttributes(auditAttributes27);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes30 = postProject20.AuditAttributes;
        java.lang.Boolean boolean31 = postProject20.getApproved();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes32 = postProject20.AuditAttributes;
        java.lang.String str33 = postProject20.getId();
        java.time.OffsetDateTime offsetDateTime34 = postProject20.getEndTime();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostProject postProject36 = postProject20.setId("https");
        java.lang.String str37 = postProject20.Id;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostProject postProject39 = postProject20.setApproved((java.lang.Boolean) true);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFieldVisitActivityFromPlannedActivity postFieldVisitActivityFromPlannedActivity40 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFieldVisitActivityFromPlannedActivity();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ActivityTemplate activityTemplate41 = postFieldVisitActivityFromPlannedActivity40.ActivityTemplate;
        postFieldVisitActivityFromPlannedActivity40.Id = "ZZZZZ";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricResult metricResult44 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricResult();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExtendedAttributeDropdownlistitems getExtendedAttributeDropdownlistitems45 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExtendedAttributeDropdownlistitems();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_46 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.util.List<java.lang.String> strList47 = getObservationsV2_46.SamplingContextTagIds;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_48 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray50 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList51 = new java.util.ArrayList<java.lang.String>();
        boolean boolean52 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList51, strArray50);
        getObservationsV2_48.SpecimenIds = strList51;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags54 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray58 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList59 = new java.util.ArrayList<java.lang.String>();
        boolean boolean60 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList59, strArray58);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags61 = putLocationTags54.setTagUniqueIds(strList59);
        getObservationsV2_48.QualityControlTypes = strList59;
        getObservationsV2_46.ResultGrades = strList59;
        getExtendedAttributeDropdownlistitems45.Search = strList59;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricResult metricResult65 = metricResult44.setMatchedObservations((java.util.List<java.lang.String>) strList59);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricResult metricResult67 = metricResult65.setOverriddenByUser((java.lang.Boolean) false);
        java.lang.Boolean boolean68 = metricResult65.getOverriddenByUser();
        metricResult65.AggregationResult = 1.0d;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFieldVisitActivityWithTemplate postFieldVisitActivityWithTemplate71 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFieldVisitActivityWithTemplate();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes72 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFieldVisitActivityWithTemplate postFieldVisitActivityWithTemplate73 = postFieldVisitActivityWithTemplate71.setAuditAttributes(auditAttributes72);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MediumType mediumType74 = null;
        postFieldVisitActivityWithTemplate73.Medium = mediumType74;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity postActivity76 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity();
        postActivity76.LoggerFileName = "hi!";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity postActivity80 = postActivity76.setCustomId("");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes81 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity postActivity82 = postActivity80.setAuditAttributes(auditAttributes81);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFieldVisitActivityWithTemplate postFieldVisitActivityWithTemplate83 = postFieldVisitActivityWithTemplate73.setAuditAttributes(auditAttributes81);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricResult metricResult84 = metricResult65.setAuditAttributes(auditAttributes81);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFieldVisitActivityFromPlannedActivity postFieldVisitActivityFromPlannedActivity85 = postFieldVisitActivityFromPlannedActivity40.setAuditAttributes(auditAttributes81);
        postProject39.AuditAttributes = auditAttributes81;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutShippingContainer putShippingContainer87 = putShippingContainer9.setAuditAttributes(auditAttributes81);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostTag postTag88 = postTag7.setAuditAttributes(auditAttributes81);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(postTag3);
        org.junit.Assert.assertNotNull(postTag5);
        org.junit.Assert.assertNotNull(postTag7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNull(auditAttributes10);
        org.junit.Assert.assertNotNull(putShippingContainer12);
        org.junit.Assert.assertNotNull(postProject15);
        org.junit.Assert.assertNull(offsetDateTime18);
        org.junit.Assert.assertNotNull(postProject20);
        org.junit.Assert.assertTrue("'" + samplingLocationGroupSelectionType24 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationGroupSelectionType.ALL + "'", samplingLocationGroupSelectionType24.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationGroupSelectionType.ALL));
        org.junit.Assert.assertNull(samplingLocationGroup26);
        org.junit.Assert.assertNotNull(samplingPlan28);
        org.junit.Assert.assertNotNull(postProject29);
        org.junit.Assert.assertNotNull(auditAttributes30);
        org.junit.Assert.assertNull(boolean31);
        org.junit.Assert.assertNotNull(auditAttributes32);
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertNull(offsetDateTime34);
        org.junit.Assert.assertNotNull(postProject36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "https" + "'", str37, "https");
        org.junit.Assert.assertNotNull(postProject39);
        org.junit.Assert.assertNull(activityTemplate41);
        org.junit.Assert.assertNull(strList47);
        org.junit.Assert.assertNotNull(strArray50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(strArray58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(putLocationTags61);
        org.junit.Assert.assertNotNull(metricResult65);
        org.junit.Assert.assertNotNull(metricResult67);
        org.junit.Assert.assertEquals("'" + boolean68 + "' != '" + false + "'", boolean68, false);
        org.junit.Assert.assertNotNull(postFieldVisitActivityWithTemplate73);
        org.junit.Assert.assertNotNull(postActivity80);
        org.junit.Assert.assertNotNull(postActivity82);
        org.junit.Assert.assertNotNull(postFieldVisitActivityWithTemplate83);
        org.junit.Assert.assertNotNull(metricResult84);
        org.junit.Assert.assertNotNull(postFieldVisitActivityFromPlannedActivity85);
        org.junit.Assert.assertNotNull(putShippingContainer87);
        org.junit.Assert.assertNotNull(postTag88);
    }

    @Test
    public void test42954() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest85.test42954");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSpreadsheetTemplate putSpreadsheetTemplate0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSpreadsheetTemplate();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSpreadsheetTemplate putSpreadsheetTemplate2 = putSpreadsheetTemplate0.setId("POST");
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment> domainObjectAttachmentList3 = putSpreadsheetTemplate2.getAttachments();
        putSpreadsheetTemplate2.Description = "multipart/form-data; boundary=****d9f5d551-383a-4365-87fd-ae7094da6f3b****";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes6 = null;
        putSpreadsheetTemplate2.AuditAttributes = auditAttributes6;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSpreadsheetTemplate putSpreadsheetTemplate9 = putSpreadsheetTemplate2.setDescription("");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpreadsheetTemplateType spreadsheetTemplateType10 = putSpreadsheetTemplate2.getType();
        org.junit.Assert.assertNotNull(putSpreadsheetTemplate2);
        org.junit.Assert.assertNull(domainObjectAttachmentList3);
        org.junit.Assert.assertNotNull(putSpreadsheetTemplate9);
        org.junit.Assert.assertNull(spreadsheetTemplateType10);
    }

    @Test
    public void test42955() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest85.test42955");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.QualifierGroupResponse qualifierGroupResponse0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.QualifierGroupResponse();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.QualifierGroupResponse qualifierGroupResponse2 = qualifierGroupResponse0.setIdentifier("hi!");
        java.lang.String str3 = qualifierGroupResponse2.UniqueId;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Report report4 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Report();
        java.lang.String str5 = report4.Description;
        report4.UserUniqueId = "multipart/form-data; boundary=****d9f5d551-383a-4365-87fd-ae7094da6f3b****";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_8 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String str9 = getObservationsV2_8.getCustomId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_10 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray12 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList13 = new java.util.ArrayList<java.lang.String>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList13, strArray12);
        getObservationsV2_10.SpecimenIds = strList13;
        getObservationsV2_8.ProjectIds = strList13;
        java.util.List<java.lang.String> strList17 = getObservationsV2_8.AnalysisMethodSimpleIds;
        java.util.List<java.lang.String> strList18 = getObservationsV2_8.getLabResultLabAnalysisMethodIds();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.OpenIdConnectRelyingPartyConfiguration openIdConnectRelyingPartyConfiguration19 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.OpenIdConnectRelyingPartyConfiguration();
        java.lang.String str20 = openIdConnectRelyingPartyConfiguration19.getClientIdentifier();
        openIdConnectRelyingPartyConfiguration19.ClientIdentifier = "MaxDuration";
        openIdConnectRelyingPartyConfiguration19.IssuerIdentifier = "MinInstant";
        java.util.List<java.lang.String> strList25 = openIdConnectRelyingPartyConfiguration19.Scopes;
        java.lang.String str26 = openIdConnectRelyingPartyConfiguration19.getOptionalIssuerDiscoveryUri();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Processor processor27 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Processor();
        processor27.ProcessorType = "'.'SSSSSSS";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetActivities getActivities30 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetActivities();
        getActivities30.Limit = 10;
        java.util.List<java.lang.String> strList33 = getActivities30.ActivityTemplateId;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportObservations getExportObservations34 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportObservations();
        java.util.List<java.lang.String> strList35 = getExportObservations34.getLabReportIds();
        java.lang.String str36 = getExportObservations34.DepthUnitCustomId;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetActivityTemplates getActivityTemplates37 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetActivityTemplates();
        java.lang.Object obj38 = getActivityTemplates37.getResponseType();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_39 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray41 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList42 = new java.util.ArrayList<java.lang.String>();
        boolean boolean43 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList42, strArray41);
        getObservationsV2_39.SpecimenIds = strList42;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags45 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray49 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList50 = new java.util.ArrayList<java.lang.String>();
        boolean boolean51 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList50, strArray49);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags52 = putLocationTags45.setTagUniqueIds(strList50);
        getObservationsV2_39.QualityControlTypes = strList50;
        getActivityTemplates37.Type = strList50;
        getExportObservations34.AnalyticalGroupIds = strList50;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetActivities getActivities56 = getActivities30.setMedia((java.util.List<java.lang.String>) strList50);
        processor27.InputTimeSeriesUniqueIds = strList50;
        openIdConnectRelyingPartyConfiguration19.Scopes = strList50;
        getObservationsV2_8.ObservedPropertyIds = strList50;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Report report60 = report4.setSourceTimeSeriesUniqueIds(strList50);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.QualifierGroupResponse qualifierGroupResponse61 = qualifierGroupResponse2.setQualifierCodeList(strList50);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.QualifierGroupResponse qualifierGroupResponse63 = qualifierGroupResponse2.setUniqueId("http://MaxDurationhttp/json/reply/Double");
        qualifierGroupResponse2.UniqueId = "****8e3722aa-afdf-4137-ab41-bb1bb285cdf2****";
        org.junit.Assert.assertNotNull(qualifierGroupResponse2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNull(strList17);
        org.junit.Assert.assertNull(strList18);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNull(strList25);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertNull(strList33);
        org.junit.Assert.assertNull(strList35);
        org.junit.Assert.assertNull(str36);
        org.junit.Assert.assertNotNull(obj38);
        org.junit.Assert.assertEquals(obj38.toString(), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$SearchResultActivityTemplate");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj38), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$SearchResultActivityTemplate");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj38), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$SearchResultActivityTemplate");
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(strArray49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNotNull(putLocationTags52);
        org.junit.Assert.assertNotNull(getActivities56);
        org.junit.Assert.assertNotNull(report60);
        org.junit.Assert.assertNotNull(qualifierGroupResponse61);
        org.junit.Assert.assertNotNull(qualifierGroupResponse63);
    }

    @Test
    public void test42956() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest85.test42956");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray3 = new java.lang.String[] { "", "" };
        java.util.ArrayList<java.lang.String> strList4 = new java.util.ArrayList<java.lang.String>();
        boolean boolean5 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList4, strArray3);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_6 = getObservationsV2_0.setDataClassifications((java.util.List<java.lang.String>) strList4);
        getObservationsV2_6.DepthUnitCustomId = "hi!";
        java.lang.String str9 = getObservationsV2_6.CustomId;
        java.util.List<java.lang.String> strList10 = getObservationsV2_6.getSearch();
        getObservationsV2_6.Cursor = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ";
        java.lang.Double double13 = getObservationsV2_6.getNumericResultValue();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_15 = getObservationsV2_6.setNumericResultValue((java.lang.Double) 1.0d);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_17 = getObservationsV2_6.setCursor("http://MaxDurationhttp/json/reply/Double");
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(getObservationsV2_6);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNull(strList10);
        org.junit.Assert.assertNull(double13);
        org.junit.Assert.assertNotNull(getObservationsV2_15);
        org.junit.Assert.assertNotNull(getObservationsV2_17);
    }

    @Test
    public void test42957() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest85.test42957");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedPoint timeAlignedPoint0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedPoint();
        timeAlignedPoint0.Method9 = "multipart/form-data; boundary=****7eff1774-b6b0-471a-961c-156c64359366****";
        timeAlignedPoint0.DisplayValue9 = "";
        java.lang.String str5 = timeAlignedPoint0.getApprovalName4();
        java.lang.Long long6 = timeAlignedPoint0.getApprovalLevel7();
        java.lang.String str7 = timeAlignedPoint0.Method7;
        timeAlignedPoint0.NumericValue8 = 0.0d;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedPoint timeAlignedPoint11 = timeAlignedPoint0.setDisplayValue4("multipart/form-data; boundary=****9fadde69-3f13-40c4-a87c-0f3f51c2dd35****");
        java.lang.String str12 = timeAlignedPoint11.getMethod1();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedPoint timeAlignedPoint14 = timeAlignedPoint11.setDisplayValue6("multipart/form-data; boundary=****1eab67e1-84c8-4b82-aa06-d6c7526551f8****");
        timeAlignedPoint11.DisplayValue9 = "9999-12-31T23:59:59.9999999Z://2021.4.62.0";
        timeAlignedPoint11.Qualifiers1 = "multipart/form-data; boundary=****930a219d-85cf-428e-8cad-9442e08cea99****";
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(long6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(timeAlignedPoint11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(timeAlignedPoint14);
    }

    @Test
    public void test42958() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest85.test42958");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutBulkEditResultGradesV2 putBulkEditResultGradesV2_0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutBulkEditResultGradesV2();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RoleFlattened roleFlattened1 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RoleFlattened();
        java.lang.Boolean boolean2 = roleFlattened1.CanRemoveFieldVisits;
        roleFlattened1.Name = "MaxInstant";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationType putLocationType5 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationType();
        java.lang.String str6 = putLocationType5.Description;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_7 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray10 = new java.lang.String[] { "", "" };
        java.util.ArrayList<java.lang.String> strList11 = new java.util.ArrayList<java.lang.String>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList11, strArray10);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_13 = getObservationsV2_7.setDataClassifications((java.util.List<java.lang.String>) strList11);
        getObservationsV2_13.DepthUnitCustomId = "hi!";
        java.lang.String str16 = getObservationsV2_13.CustomId;
        java.util.List<java.lang.String> strList17 = getObservationsV2_13.getSearch();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_18 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray20 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList21 = new java.util.ArrayList<java.lang.String>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList21, strArray20);
        getObservationsV2_18.SpecimenIds = strList21;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags24 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray28 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList29 = new java.util.ArrayList<java.lang.String>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList29, strArray28);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags31 = putLocationTags24.setTagUniqueIds(strList29);
        getObservationsV2_18.QualityControlTypes = strList29;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_33 = getObservationsV2_13.setMedia((java.util.List<java.lang.String>) strList29);
        putLocationType5.ExtendedAttributeDefinitionIds = strList29;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RoleFlattenedBase roleFlattenedBase35 = roleFlattened1.setRoleApprovalTransitions(strList29);
        putBulkEditResultGradesV2_0.ResultGrades = strList29;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Location location37 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Location();
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.AppliedTag> appliedTagList38 = location37.Tags;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Location location40 = location37.setUniqueId("MaxInstant");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Location location42 = location37.setLocationName("yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ");
        java.time.Instant instant43 = location42.getLastModified();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.StatisticalDateTimeOffset statisticalDateTimeOffset44 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.StatisticalDateTimeOffset();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostRecurringReport postRecurringReport45 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostRecurringReport();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary46 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        dischargeSummary46.Reviewer = "";
        java.time.Instant instant49 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        dischargeSummary46.MeasurementTime = instant49;
        postRecurringReport45.NextGenerationDate = instant49;
        java.time.Instant instant52 = postRecurringReport45.getNextGenerationDate();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.StatisticalDateTimeOffset statisticalDateTimeOffset53 = statisticalDateTimeOffset44.setDateTimeOffset(instant52);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DownchainProcessorListByRatingModelServiceRequest downchainProcessorListByRatingModelServiceRequest54 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DownchainProcessorListByRatingModelServiceRequest();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeTransactionListServiceRequest metadataChangeTransactionListServiceRequest55 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeTransactionListServiceRequest();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostRecurringReport postRecurringReport56 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostRecurringReport();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary57 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        dischargeSummary57.Reviewer = "";
        java.time.Instant instant60 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        dischargeSummary57.MeasurementTime = instant60;
        postRecurringReport56.NextGenerationDate = instant60;
        java.time.Instant instant63 = postRecurringReport56.getNextGenerationDate();
        java.lang.String str64 = com.aquaticinformatics.aquarius.sdk.samples.serializers.InstantSerializer.format(instant63);
        metadataChangeTransactionListServiceRequest55.QueryFrom = instant63;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DownchainProcessorListByRatingModelServiceRequest downchainProcessorListByRatingModelServiceRequest66 = downchainProcessorListByRatingModelServiceRequest54.setQueryTo(instant63);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DownchainProcessorListByRatingModelServiceRequest downchainProcessorListByRatingModelServiceRequest68 = downchainProcessorListByRatingModelServiceRequest54.setRatingModelIdentifier("hi!");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Qualifier qualifier69 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Qualifier();
        java.time.Instant instant70 = qualifier69.DateApplied;
        java.lang.String str71 = qualifier69.User;
        java.lang.String str72 = qualifier69.getIdentifier();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest73 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest();
        java.lang.Object obj74 = timeAlignedDataServiceRequest73.getResponseType();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse75 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant76 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse77 = locationDescriptionListServiceResponse75.setNextToken(instant76);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest78 = timeAlignedDataServiceRequest73.setQueryFrom(instant76);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Qualifier qualifier79 = qualifier69.setDateApplied(instant76);
        java.time.Instant instant80 = qualifier79.getDateApplied();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DownchainProcessorListByRatingModelServiceRequest downchainProcessorListByRatingModelServiceRequest81 = downchainProcessorListByRatingModelServiceRequest54.setQueryFrom(instant80);
        statisticalDateTimeOffset53.DateTimeOffset = instant80;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Location location83 = location42.setLastModified(instant80);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutBulkEditResultGradesV2 putBulkEditResultGradesV2_84 = putBulkEditResultGradesV2_0.setEndObservedTime(instant80);
        java.util.List<java.lang.String> strList85 = putBulkEditResultGradesV2_0.getSamplingContextTagIds();
        java.util.List<java.lang.String> strList86 = putBulkEditResultGradesV2_0.ActivityTypes;
        org.junit.Assert.assertNull(boolean2);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(getObservationsV2_13);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNull(strList17);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(putLocationTags31);
        org.junit.Assert.assertNotNull(getObservationsV2_33);
        org.junit.Assert.assertNotNull(roleFlattenedBase35);
        org.junit.Assert.assertNull(appliedTagList38);
        org.junit.Assert.assertNotNull(location40);
        org.junit.Assert.assertNotNull(location42);
        org.junit.Assert.assertNull(instant43);
        org.junit.Assert.assertNotNull(instant49);
        org.junit.Assert.assertNotNull(instant52);
        org.junit.Assert.assertNotNull(statisticalDateTimeOffset53);
        org.junit.Assert.assertNotNull(instant60);
        org.junit.Assert.assertNotNull(instant63);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "9999-12-31T23:59:59.999Z" + "'", str64, "9999-12-31T23:59:59.999Z");
        org.junit.Assert.assertNotNull(downchainProcessorListByRatingModelServiceRequest66);
        org.junit.Assert.assertNotNull(downchainProcessorListByRatingModelServiceRequest68);
        org.junit.Assert.assertNull(instant70);
        org.junit.Assert.assertNull(str71);
        org.junit.Assert.assertNull(str72);
        org.junit.Assert.assertNotNull(obj74);
        org.junit.Assert.assertEquals(obj74.toString(), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj74), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj74), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertNotNull(instant76);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse77);
        org.junit.Assert.assertNotNull(timeAlignedDataServiceRequest78);
        org.junit.Assert.assertNotNull(qualifier79);
        org.junit.Assert.assertNotNull(instant80);
        org.junit.Assert.assertNotNull(downchainProcessorListByRatingModelServiceRequest81);
        org.junit.Assert.assertNotNull(location83);
        org.junit.Assert.assertNotNull(putBulkEditResultGradesV2_84);
        org.junit.Assert.assertNull(strList85);
        org.junit.Assert.assertNull(strList86);
    }

    @Test
    public void test42959() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest85.test42959");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostSchedule postSchedule0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostSchedule();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationGroupSelectionType samplingLocationGroupSelectionType1 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationGroupSelectionType.ALL;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostSchedule postSchedule2 = postSchedule0.setSamplingLocationGroupSelectionType(samplingLocationGroupSelectionType1);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Laboratory laboratory3 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Laboratory();
        laboratory3.Id = "MaxInstant";
        java.lang.String str6 = laboratory3.PhoneNumber;
        laboratory3.Id = "/AQUARIUS/Acquisition/v2://9999-12-31T23:59:59.999Z";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSchedule putSchedule9 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSchedule();
        java.time.OffsetDateTime offsetDateTime10 = putSchedule9.StartDate;
        java.time.OffsetDateTime offsetDateTime11 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSchedule putSchedule12 = putSchedule9.setEndDate(offsetDateTime11);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes13 = putSchedule12.AuditAttributes;
        java.time.OffsetDateTime offsetDateTime14 = putSchedule12.getEndDate();
        java.time.OffsetDateTime offsetDateTime15 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSchedule putSchedule16 = putSchedule12.setStartDate(offsetDateTime15);
        java.lang.Integer int17 = putSchedule12.SamplingLocationGroupSelectionTypeRandomCount;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.RecurrenceDayMonthlyType recurrenceDayMonthlyType18 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.RecurrenceDayMonthlyType.LAST_DAY_OF_MONTH;
        putSchedule12.RecurrenceDayMonthly = recurrenceDayMonthlyType18;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Unit unit20 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Unit();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes21 = unit20.AuditAttributes;
        unit20.BaseMultiplier = 0.0d;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutAccessGroup putAccessGroup24 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutAccessGroup();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivity samplingPlanPlannedActivity25 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivity();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes26 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivity samplingPlanPlannedActivity27 = samplingPlanPlannedActivity25.setAuditAttributes(auditAttributes26);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes28 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes30 = auditAttributes28.setCreationUserProfileId("'.'SSSSSSS");
        samplingPlanPlannedActivity27.AuditAttributes = auditAttributes28;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes32 = samplingPlanPlannedActivity27.AuditAttributes;
        putAccessGroup24.AuditAttributes = auditAttributes32;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Unit unit34 = unit20.setAuditAttributes(auditAttributes32);
        putSchedule12.AuditAttributes = auditAttributes32;
        laboratory3.AuditAttributes = auditAttributes32;
        java.time.OffsetDateTime offsetDateTime37 = auditAttributes32.ModificationTime;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostSchedule postSchedule38 = postSchedule2.setAuditAttributes(auditAttributes32);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutUnitGroup putUnitGroup39 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutUnitGroup();
        java.lang.String str40 = putUnitGroup39.getCustomId();
        java.lang.Boolean boolean41 = putUnitGroup39.SupportsConversion;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutUnitGroupWithUnit putUnitGroupWithUnit42 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutUnitGroupWithUnit();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutUnitGroupWithUnit putUnitGroupWithUnit44 = putUnitGroupWithUnit42.setId("yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UnitGroupSystemCodeType unitGroupSystemCodeType45 = putUnitGroupWithUnit42.SystemCode;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutAccessGroup putAccessGroup46 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutAccessGroup();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivity samplingPlanPlannedActivity47 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivity();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes48 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivity samplingPlanPlannedActivity49 = samplingPlanPlannedActivity47.setAuditAttributes(auditAttributes48);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes50 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes52 = auditAttributes50.setCreationUserProfileId("'.'SSSSSSS");
        samplingPlanPlannedActivity49.AuditAttributes = auditAttributes50;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes54 = samplingPlanPlannedActivity49.AuditAttributes;
        putAccessGroup46.AuditAttributes = auditAttributes54;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutUnitGroupWithUnit putUnitGroupWithUnit56 = putUnitGroupWithUnit42.setAuditAttributes(auditAttributes54);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutUnitGroup putUnitGroup57 = putUnitGroup39.setAuditAttributes(auditAttributes54);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes59 = auditAttributes54.setModificationUserProfileId("");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostSchedule postSchedule60 = postSchedule2.setAuditAttributes(auditAttributes54);
        org.junit.Assert.assertTrue("'" + samplingLocationGroupSelectionType1 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationGroupSelectionType.ALL + "'", samplingLocationGroupSelectionType1.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationGroupSelectionType.ALL));
        org.junit.Assert.assertNotNull(postSchedule2);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(offsetDateTime10);
        org.junit.Assert.assertNotNull(putSchedule12);
        org.junit.Assert.assertNull(auditAttributes13);
        org.junit.Assert.assertNull(offsetDateTime14);
        org.junit.Assert.assertNotNull(putSchedule16);
        org.junit.Assert.assertNull(int17);
        org.junit.Assert.assertTrue("'" + recurrenceDayMonthlyType18 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.RecurrenceDayMonthlyType.LAST_DAY_OF_MONTH + "'", recurrenceDayMonthlyType18.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.RecurrenceDayMonthlyType.LAST_DAY_OF_MONTH));
        org.junit.Assert.assertNull(auditAttributes21);
        org.junit.Assert.assertNotNull(samplingPlanPlannedActivity27);
        org.junit.Assert.assertNotNull(auditAttributes30);
        org.junit.Assert.assertNotNull(auditAttributes32);
        org.junit.Assert.assertNotNull(unit34);
        org.junit.Assert.assertNull(offsetDateTime37);
        org.junit.Assert.assertNotNull(postSchedule38);
        org.junit.Assert.assertNull(str40);
        org.junit.Assert.assertNull(boolean41);
        org.junit.Assert.assertNotNull(putUnitGroupWithUnit44);
        org.junit.Assert.assertNull(unitGroupSystemCodeType45);
        org.junit.Assert.assertNotNull(samplingPlanPlannedActivity49);
        org.junit.Assert.assertNotNull(auditAttributes52);
        org.junit.Assert.assertNotNull(auditAttributes54);
        org.junit.Assert.assertNotNull(putUnitGroupWithUnit56);
        org.junit.Assert.assertNotNull(putUnitGroup57);
        org.junit.Assert.assertNotNull(auditAttributes59);
        org.junit.Assert.assertNotNull(postSchedule60);
    }

    @Test
    public void test42960() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest85.test42960");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TagMetadata tagMetadata0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TagMetadata();
        tagMetadata0.Name = "ZZZZZ";
        tagMetadata0.Value = "";
        java.lang.String str5 = tagMetadata0.getUniqueId();
        org.junit.Assert.assertNull(str5);
    }

    @Test
    public void test42961() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest85.test42961");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Grade grade0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Grade();
        grade0.Description = "ZZZZZ";
        java.lang.Integer int3 = grade0.GradeCode;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Grade grade5 = grade0.setIsSystem((java.lang.Boolean) true);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Grade grade7 = grade5.setColor("'.'SSSSSSS");
        java.lang.Integer int8 = grade5.getGradeCode();
        java.lang.Boolean boolean9 = grade5.getIsSystem();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Grade grade11 = grade5.setDescription("multipart/form-data; boundary=****bbcf5f9e-6ccf-4b63-91ab-6e645caf02af****");
        java.lang.Integer int12 = grade5.getGradeCode();
        java.lang.Integer int13 = grade5.GradeCode;
        org.junit.Assert.assertNull(int3);
        org.junit.Assert.assertNotNull(grade5);
        org.junit.Assert.assertNotNull(grade7);
        org.junit.Assert.assertNull(int8);
        org.junit.Assert.assertEquals("'" + boolean9 + "' != '" + true + "'", boolean9, true);
        org.junit.Assert.assertNotNull(grade11);
        org.junit.Assert.assertNull(int12);
        org.junit.Assert.assertNull(int13);
    }

    @Test
    public void test42962() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest85.test42962");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostUnitGroup postUnitGroup0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostUnitGroup();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UnitGroupSystemCodeType unitGroupSystemCodeType1 = postUnitGroup0.getSystemCode();
        java.lang.Object obj2 = postUnitGroup0.getResponseType();
        java.lang.String str3 = postUnitGroup0.CustomId;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UnitGroupSystemCodeType unitGroupSystemCodeType4 = postUnitGroup0.getSystemCode();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostUnitGroup postUnitGroup6 = postUnitGroup0.setId("multipart/form-data; boundary=****7eff1774-b6b0-471a-961c-156c64359366****");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UnitGroupSystemCodeType unitGroupSystemCodeType7 = postUnitGroup6.getSystemCode();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes8 = postUnitGroup6.getAuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UnitGroupSystemCodeType unitGroupSystemCodeType9 = postUnitGroup6.SystemCode;
        java.lang.String str10 = postUnitGroup6.CustomId;
        org.junit.Assert.assertNull(unitGroupSystemCodeType1);
        org.junit.Assert.assertNotNull(obj2);
        org.junit.Assert.assertEquals(obj2.toString(), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$UnitGroup");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj2), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$UnitGroup");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj2), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$UnitGroup");
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(unitGroupSystemCodeType4);
        org.junit.Assert.assertNotNull(postUnitGroup6);
        org.junit.Assert.assertNull(unitGroupSystemCodeType7);
        org.junit.Assert.assertNull(auditAttributes8);
        org.junit.Assert.assertNull(unitGroupSystemCodeType9);
        org.junit.Assert.assertNull(str10);
    }

    @Test
    public void test42963() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest85.test42963");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay1 = dischargeSummary0.getMeanGageHeight();
        java.lang.String str2 = dischargeSummary0.getGageHeightComments();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary4 = dischargeSummary0.setPublish((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay5 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay7 = doubleWithDisplay5.setNumeric((java.lang.Double) 10.0d);
        dischargeSummary0.DurationInHours = doubleWithDisplay7;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary9 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        dischargeSummary9.Reviewer = "";
        java.time.Instant instant12 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        dischargeSummary9.MeasurementTime = instant12;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.BaseFlowType baseFlowType14 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.BaseFlowType.BaseFlow;
        dischargeSummary9.BaseFlow = baseFlowType14;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.BaseFlowType baseFlowType16 = dischargeSummary9.BaseFlow;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay17 = dischargeSummary9.getDurationInHours();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary18 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay19 = dischargeSummary18.getMeanGageHeight();
        java.lang.String str20 = dischargeSummary18.MeanGageHeightMethod;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary22 = dischargeSummary18.setComments("hi!");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay23 = null;
        dischargeSummary18.AlternateRatingDischarge = quantityWithDisplay23;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay25 = dischargeSummary18.DurationInHours;
        java.time.Instant instant26 = dischargeSummary18.getMeasurementTime();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MeasurementGradeType measurementGradeType27 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MeasurementGradeType.Good;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary28 = dischargeSummary18.setMeasurementGrade(measurementGradeType27);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary29 = dischargeSummary9.setMeasurementGrade(measurementGradeType27);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary30 = dischargeSummary0.setMeasurementGrade(measurementGradeType27);
        org.junit.Assert.assertNull(quantityWithDisplay1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNotNull(dischargeSummary4);
        org.junit.Assert.assertNotNull(doubleWithDisplay7);
        org.junit.Assert.assertNotNull(instant12);
        org.junit.Assert.assertTrue("'" + baseFlowType14 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.BaseFlowType.BaseFlow + "'", baseFlowType14.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.BaseFlowType.BaseFlow));
        org.junit.Assert.assertTrue("'" + baseFlowType16 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.BaseFlowType.BaseFlow + "'", baseFlowType16.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.BaseFlowType.BaseFlow));
        org.junit.Assert.assertNull(doubleWithDisplay17);
        org.junit.Assert.assertNull(quantityWithDisplay19);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNotNull(dischargeSummary22);
        org.junit.Assert.assertNull(doubleWithDisplay25);
        org.junit.Assert.assertNull(instant26);
        org.junit.Assert.assertTrue("'" + measurementGradeType27 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MeasurementGradeType.Good + "'", measurementGradeType27.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MeasurementGradeType.Good));
        org.junit.Assert.assertNotNull(dischargeSummary28);
        org.junit.Assert.assertNotNull(dischargeSummary29);
        org.junit.Assert.assertNotNull(dischargeSummary30);
    }

    @Test
    public void test42964() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest85.test42964");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.IndexRange indexRange0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.IndexRange();
        java.lang.String str1 = indexRange0.Id;
        indexRange0.UpperLimitValue = 1;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.IndexRange indexRange5 = indexRange0.setLowerLimitValue((java.lang.Integer) 2);
        java.lang.String str6 = indexRange5.Comment;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(indexRange5);
        org.junit.Assert.assertNull(str6);
    }

    @Test
    public void test42965() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest85.test42965");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedPoint timeAlignedPoint0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedPoint();
        timeAlignedPoint0.Method9 = "multipart/form-data; boundary=****7eff1774-b6b0-471a-961c-156c64359366****";
        timeAlignedPoint0.DisplayValue9 = "";
        java.lang.String str5 = timeAlignedPoint0.getApprovalName4();
        java.lang.Long long6 = timeAlignedPoint0.getGradeCode3();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedPoint timeAlignedPoint8 = timeAlignedPoint0.setQualifiers1("MinInstant");
        java.lang.Double double9 = timeAlignedPoint8.getNumericValue10();
        timeAlignedPoint8.GradeName3 = "/AQUARIUS/Acquisition/v2";
        java.lang.String str12 = timeAlignedPoint8.Method10;
        timeAlignedPoint8.ApprovalLevel2 = 0L;
        java.lang.String str15 = timeAlignedPoint8.Method3;
        java.lang.Double double16 = timeAlignedPoint8.NumericValue9;
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(long6);
        org.junit.Assert.assertNotNull(timeAlignedPoint8);
        org.junit.Assert.assertNull(double9);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNull(double16);
    }

    @Test
    public void test42966() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest85.test42966");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ApprovalLevel approvalLevel0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ApprovalLevel();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ApprovalLevel approvalLevel2 = approvalLevel0.setDescription("MinInstant");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ApprovalLevel approvalLevel4 = approvalLevel0.setColor("MaxDuration");
        java.lang.Long long5 = approvalLevel0.Level;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ApprovalLevel approvalLevel7 = approvalLevel0.setLevel((java.lang.Long) 0L);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ApprovalLevel approvalLevel9 = approvalLevel0.setLevel((java.lang.Long) 0L);
        org.junit.Assert.assertNotNull(approvalLevel2);
        org.junit.Assert.assertNotNull(approvalLevel4);
        org.junit.Assert.assertNull(long5);
        org.junit.Assert.assertNotNull(approvalLevel7);
        org.junit.Assert.assertNotNull(approvalLevel9);
    }

    @Test
    public void test42967() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest85.test42967");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Report report0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Report();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Report report2 = report0.setUserName("/AQUARIUS/Acquisition/v2");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Report report4 = report2.setUserName("'.'SSSSSSS");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Report report6 = report4.setIsTransient((java.lang.Boolean) false);
        report4.Title = "multipart/form-data; boundary=****2917d69a-62fa-41ce-b981-4dbe2deab9f5****";
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TagMetadata> tagMetadataList9 = report4.getTags();
        java.time.Instant instant10 = report4.getCreatedTime();
        java.lang.String str11 = report4.getUrl();
        org.junit.Assert.assertNotNull(report2);
        org.junit.Assert.assertNotNull(report4);
        org.junit.Assert.assertNotNull(report6);
        org.junit.Assert.assertNull(tagMetadataList9);
        org.junit.Assert.assertNull(instant10);
        org.junit.Assert.assertNull(str11);
    }

    @Test
    public void test42968() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest85.test42968");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutObservationV2 putObservationV2_0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutObservationV2();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty observedProperty1 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutObservationV2 putObservationV2_2 = putObservationV2_0.setObservedProperty(observedProperty1);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Activity activity3 = putObservationV2_2.Activity;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DataClassificationType dataClassificationType4 = putObservationV2_2.getDataClassification();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.CategoricalResult categoricalResult5 = putObservationV2_2.CategoricalResult;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Specimen specimen6 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutObservationV2 putObservationV2_7 = putObservationV2_2.setSpecimen(specimen6);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity postActivity8 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity();
        postActivity8.SourceActivityId = "2021.4.62.0";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity plannedActivity11 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity postActivity12 = postActivity8.setPlannedActivity(plannedActivity11);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity postActivity14 = postActivity8.setLoggerFileName("https");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation15 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedFieldResult plannedFieldResult16 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation17 = observation15.setPlannedFieldResult(plannedFieldResult16);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabInstruction labInstruction18 = null;
        observation17.LabInstruction = labInstruction18;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationStatistics observationStatistics20 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation21 = observation17.setStatistics(observationStatistics20);
        java.time.OffsetDateTime offsetDateTime22 = observation21.getResultTime();
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple> importHistoryEventSimpleList23 = observation21.ImportHistoryEventSimples;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty observedProperty24 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation25 = observation21.setObservedProperty(observedProperty24);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.RuleValidationDetails[] ruleValidationDetailsArray26 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.RuleValidationDetails[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.RuleValidationDetails> ruleValidationDetailsList27 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.RuleValidationDetails>();
        boolean boolean28 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.RuleValidationDetails>) ruleValidationDetailsList27, ruleValidationDetailsArray26);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation29 = observation21.setValidationWarnings((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.RuleValidationDetails>) ruleValidationDetailsList27);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity postActivity30 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttribute[] extendedAttributeArray31 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttribute[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttribute> extendedAttributeList32 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttribute>();
        boolean boolean33 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttribute>) extendedAttributeList32, extendedAttributeArray31);
        postActivity30.ExtendedAttributes = extendedAttributeList32;
        observation29.ExtendedAttributes = extendedAttributeList32;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity postActivity36 = postActivity8.setExtendedAttributes((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttribute>) extendedAttributeList32);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutObservationV2 putObservationV2_37 = putObservationV2_2.setExtendedAttributes((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttribute>) extendedAttributeList32);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabInstruction labInstruction38 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutObservationV2 putObservationV2_39 = putObservationV2_2.setLabInstruction(labInstruction38);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.FieldVisit fieldVisit40 = putObservationV2_2.FieldVisit;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFieldVisitActivityWithTemplate postFieldVisitActivityWithTemplate41 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFieldVisitActivityWithTemplate();
        java.lang.String str42 = postFieldVisitActivityWithTemplate41.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.CollectionMethod collectionMethod43 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.CollectionMethod();
        java.lang.String str44 = collectionMethod43.getCustomId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.CollectionMethod collectionMethod46 = collectionMethod43.setCustomId("MinDuration");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFieldVisitActivityWithTemplate postFieldVisitActivityWithTemplate47 = postFieldVisitActivityWithTemplate41.setCollectionMethod(collectionMethod43);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutObservationV2 putObservationV2_48 = putObservationV2_2.setCollectionMethod(collectionMethod43);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.NumericResult numericResult49 = putObservationV2_2.NumericResult;
        org.junit.Assert.assertNotNull(putObservationV2_2);
        org.junit.Assert.assertNull(activity3);
        org.junit.Assert.assertNull(dataClassificationType4);
        org.junit.Assert.assertNull(categoricalResult5);
        org.junit.Assert.assertNotNull(putObservationV2_7);
        org.junit.Assert.assertNotNull(postActivity12);
        org.junit.Assert.assertNotNull(postActivity14);
        org.junit.Assert.assertNotNull(observation17);
        org.junit.Assert.assertNotNull(observation21);
        org.junit.Assert.assertNull(offsetDateTime22);
        org.junit.Assert.assertNull(importHistoryEventSimpleList23);
        org.junit.Assert.assertNotNull(observation25);
        org.junit.Assert.assertNotNull(ruleValidationDetailsArray26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(observation29);
        org.junit.Assert.assertNotNull(extendedAttributeArray31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(postActivity36);
        org.junit.Assert.assertNotNull(putObservationV2_37);
        org.junit.Assert.assertNotNull(putObservationV2_39);
        org.junit.Assert.assertNull(fieldVisit40);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertNull(str44);
        org.junit.Assert.assertNotNull(collectionMethod46);
        org.junit.Assert.assertNotNull(postFieldVisitActivityWithTemplate47);
        org.junit.Assert.assertNotNull(putObservationV2_48);
        org.junit.Assert.assertNull(numericResult49);
    }

    @Test
    public void test42969() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest85.test42969");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DatumConversionResult datumConversionResult0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DatumConversionResult();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DatumConversionResult datumConversionResult2 = datumConversionResult0.setTargetDatum("http");
        java.lang.String str3 = datumConversionResult0.TargetDatum;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DatumConversionResult datumConversionResult5 = datumConversionResult0.setTargetDatum("https");
        datumConversionResult5.TargetDatum = "/AQUARIUS";
        java.lang.String str8 = datumConversionResult5.getTargetDatum();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DatumConversionResult datumConversionResult10 = datumConversionResult5.setFailureReason("9999-12-31T23:59:59.999Z");
        datumConversionResult10.TargetDatum = "";
        datumConversionResult10.TargetDatum = "multipart/form-data; boundary=****f642a130-eb6d-4fb6-a1a4-7c7216ab119b****";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DatumConversionResult datumConversionResult16 = datumConversionResult10.setTargetDatum("/AQUARIUS/Provisioning/v1");
        org.junit.Assert.assertNotNull(datumConversionResult2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "http" + "'", str3, "http");
        org.junit.Assert.assertNotNull(datumConversionResult5);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "/AQUARIUS" + "'", str8, "/AQUARIUS");
        org.junit.Assert.assertNotNull(datumConversionResult10);
        org.junit.Assert.assertNotNull(datumConversionResult16);
    }

    @Test
    public void test42970() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest85.test42970");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutTaxon putTaxon0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutTaxon();
        putTaxon0.ParentId = "http://MaxDurationhttp/json/reply/ArrayList";
        java.lang.String str3 = putTaxon0.ScientificName;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttributeDefinition extendedAttributeDefinition4 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttributeDefinition();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate5 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate7 = specimenTemplate5.setCustomId("hi!");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PreservativeType preservativeType8 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PreservativeType.SODIUM_AZIDE;
        specimenTemplate7.Preservative = preservativeType8;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails10 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails12 = labResultDetails10.setAnalysisComment("/AQUARIUS/Acquisition/v2");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes13 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails14 = labResultDetails12.setAuditAttributes(auditAttributes13);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate15 = specimenTemplate7.setAuditAttributes(auditAttributes13);
        extendedAttributeDefinition4.AuditAttributes = auditAttributes13;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutTaxon putTaxon17 = putTaxon0.setAuditAttributes(auditAttributes13);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutTaxon putTaxon18 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutTaxon();
        putTaxon18.ParentId = "http://MaxDurationhttp/json/reply/ArrayList";
        java.lang.String str21 = putTaxon18.getComment();
        putTaxon18.ParentId = "";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservedProperty postObservedProperty24 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservedProperty();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisType analysisType25 = postObservedProperty24.getAnalysisType();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty observedProperty26 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation27 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation();
        observation27.CustomId = "hi!";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.CategoricalResult categoricalResult30 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation31 = observation27.setCategoricalResult(categoricalResult30);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple[] importHistoryEventSimpleArray32 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple> importHistoryEventSimpleList33 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple>) importHistoryEventSimpleList33, importHistoryEventSimpleArray32);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation35 = observation27.setImportHistoryEventSimples((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple>) importHistoryEventSimpleList33);
        observedProperty26.ImportHistoryEventSimples = importHistoryEventSimpleList33;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservedProperty postObservedProperty37 = postObservedProperty24.setImportHistoryEventSimples((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple>) importHistoryEventSimpleList33);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutTaxon putTaxon38 = putTaxon18.setImportHistoryEventSimples((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple>) importHistoryEventSimpleList33);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutTaxon putTaxon39 = putTaxon17.setImportHistoryEventSimples((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple>) importHistoryEventSimpleList33);
        java.lang.String str40 = putTaxon39.ItisUrl;
        java.lang.String str41 = putTaxon39.Source;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutTaxon putTaxon43 = putTaxon39.setScientificName("2021.4.62.0");
        putTaxon43.ItisTsn = "multipart/form-data; boundary=****f642a130-eb6d-4fb6-a1a4-7c7216ab119b****";
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(specimenTemplate7);
        org.junit.Assert.assertTrue("'" + preservativeType8 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PreservativeType.SODIUM_AZIDE + "'", preservativeType8.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PreservativeType.SODIUM_AZIDE));
        org.junit.Assert.assertNotNull(labResultDetails12);
        org.junit.Assert.assertNotNull(labResultDetails14);
        org.junit.Assert.assertNotNull(specimenTemplate15);
        org.junit.Assert.assertNotNull(putTaxon17);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNull(analysisType25);
        org.junit.Assert.assertNotNull(observation31);
        org.junit.Assert.assertNotNull(importHistoryEventSimpleArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(observation35);
        org.junit.Assert.assertNotNull(postObservedProperty37);
        org.junit.Assert.assertNotNull(putTaxon38);
        org.junit.Assert.assertNotNull(putTaxon39);
        org.junit.Assert.assertNull(str40);
        org.junit.Assert.assertNull(str41);
        org.junit.Assert.assertNotNull(putTaxon43);
    }

    @Test
    public void test42971() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest85.test42971");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TrendLineAnalysis trendLineAnalysis0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TrendLineAnalysis();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay1 = trendLineAnalysis0.getSlope();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesPoint timeSeriesPoint2 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesPoint();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.StatisticalDateTimeOffset statisticalDateTimeOffset3 = timeSeriesPoint2.getTimestamp();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.StatisticalDateTimeOffset statisticalDateTimeOffset4 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.StatisticalDateTimeOffset();
        java.time.Instant instant5 = statisticalDateTimeOffset4.getDateTimeOffset();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesPoint timeSeriesPoint6 = timeSeriesPoint2.setTimestamp(statisticalDateTimeOffset4);
        trendLineAnalysis0.StartPoint = timeSeriesPoint2;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay8 = trendLineAnalysis0.getLowerQuartileOfResiduals();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay9 = trendLineAnalysis0.MedianOfResiduals;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.AdcpDischargeActivity adcpDischargeActivity10 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.AdcpDischargeActivity();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.AdcpDischargeActivity adcpDischargeActivity12 = adcpDischargeActivity10.setSoftwareVersion("yyyy'-'MM'-'dd'T'HH':'mm':'ss");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay13 = adcpDischargeActivity12.getDischargeCoefficientVariation();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay14 = null;
        adcpDischargeActivity12.TopEstimateExponent = doubleWithDisplay14;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CalibrationCheck calibrationCheck16 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CalibrationCheck();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CalibrationCheckType calibrationCheckType17 = calibrationCheck16.getCalibrationCheckType();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay18 = calibrationCheck16.Value;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse19 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary20 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary22 = dischargeSummary20.setPublish((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse23 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant24 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse25 = locationDescriptionListServiceResponse23.setNextToken(instant24);
        dischargeSummary20.MeasurementTime = instant24;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse27 = locationDescriptionListServiceResponse19.setNextToken(instant24);
        java.time.Instant instant28 = locationDescriptionListServiceResponse19.getNextToken();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CalibrationCheck calibrationCheck29 = calibrationCheck16.setTime(instant28);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Reading reading30 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Reading();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary31 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary33 = dischargeSummary31.setPublish((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay34 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay();
        dischargeSummary33.DifferenceDuringVisit = doubleWithDisplay34;
        reading30.Value = doubleWithDisplay34;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CalibrationCheck calibrationCheck37 = calibrationCheck29.setValue(doubleWithDisplay34);
        adcpDischargeActivity12.MagneticVariation = doubleWithDisplay34;
        java.lang.String str39 = doubleWithDisplay34.getDisplay();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TrendLineAnalysis trendLineAnalysis40 = trendLineAnalysis0.setActualPercentageChange(doubleWithDisplay34);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay41 = trendLineAnalysis0.getActualPercentageChange();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitReading fieldVisitReading42 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitReading();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitReading fieldVisitReading44 = fieldVisitReading42.setUseLocationDatumAsReference((java.lang.Boolean) true);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitReading fieldVisitReading46 = fieldVisitReading44.setParameter("0001-01-01T00:00:00.000Z");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitReadingType fieldVisitReadingType47 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitReadingType.RoutineBefore;
        fieldVisitReading44.ReadingType = fieldVisitReadingType47;
        java.util.ArrayList<java.lang.String> strList49 = fieldVisitReading44.getQualifiers();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitReading fieldVisitReading51 = fieldVisitReading44.setUseLocationDatumAsReference((java.lang.Boolean) true);
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DatumConvertedQuantityWithDisplay> datumConvertedQuantityWithDisplayList52 = fieldVisitReading51.getDatumConvertedValues();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CrossSectionPoint crossSectionPoint53 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CrossSectionPoint();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay54 = null;
        crossSectionPoint53.Distance = quantityWithDisplay54;
        crossSectionPoint53.PointOrder = 1;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay58 = crossSectionPoint53.getElevation();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CrossSectionPoint crossSectionPoint60 = crossSectionPoint53.setComments("hi!");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay61 = null;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CrossSectionPoint crossSectionPoint62 = crossSectionPoint60.setElevation(quantityWithDisplay61);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay63 = null;
        crossSectionPoint62.Depth = quantityWithDisplay63;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DatumConvertedQuantityWithDisplay datumConvertedQuantityWithDisplay65 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DatumConvertedQuantityWithDisplay();
        crossSectionPoint62.Depth = datumConvertedQuantityWithDisplay65;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity pointVelocityDischargeActivity67 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity pointVelocityDischargeActivity69 = pointVelocityDischargeActivity67.setIsValid((java.lang.Boolean) false);
        pointVelocityDischargeActivity67.Manufacturer = "2021.4.62.0";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity pointVelocityDischargeActivity73 = pointVelocityDischargeActivity67.setSuspensionWeight("");
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Vertical> verticalList74 = pointVelocityDischargeActivity73.getVerticals();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DatumConvertedQuantityWithDisplay datumConvertedQuantityWithDisplay75 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DatumConvertedQuantityWithDisplay();
        pointVelocityDischargeActivity73.DistanceToMeter = datumConvertedQuantityWithDisplay75;
        crossSectionPoint62.Elevation = datumConvertedQuantityWithDisplay75;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitReading fieldVisitReading78 = fieldVisitReading51.setAdjustmentAmount((com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay) datumConvertedQuantityWithDisplay75);
        datumConvertedQuantityWithDisplay75.TargetDatum = "";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TrendLineAnalysis trendLineAnalysis81 = trendLineAnalysis0.setActualAbsoluteChange((com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay) datumConvertedQuantityWithDisplay75);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay82 = trendLineAnalysis81.SlopeStandardError;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay83 = trendLineAnalysis81.getStandardDeviation();
        org.junit.Assert.assertNull(doubleWithDisplay1);
        org.junit.Assert.assertNull(statisticalDateTimeOffset3);
        org.junit.Assert.assertNull(instant5);
        org.junit.Assert.assertNotNull(timeSeriesPoint6);
        org.junit.Assert.assertNull(doubleWithDisplay8);
        org.junit.Assert.assertNull(doubleWithDisplay9);
        org.junit.Assert.assertNotNull(adcpDischargeActivity12);
        org.junit.Assert.assertNull(doubleWithDisplay13);
        org.junit.Assert.assertNull(calibrationCheckType17);
        org.junit.Assert.assertNull(doubleWithDisplay18);
        org.junit.Assert.assertNotNull(dischargeSummary22);
        org.junit.Assert.assertNotNull(instant24);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse25);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse27);
        org.junit.Assert.assertNotNull(instant28);
        org.junit.Assert.assertNotNull(calibrationCheck29);
        org.junit.Assert.assertNotNull(dischargeSummary33);
        org.junit.Assert.assertNotNull(calibrationCheck37);
        org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertNotNull(trendLineAnalysis40);
        org.junit.Assert.assertNotNull(doubleWithDisplay41);
        org.junit.Assert.assertNotNull(fieldVisitReading44);
        org.junit.Assert.assertNotNull(fieldVisitReading46);
        org.junit.Assert.assertTrue("'" + fieldVisitReadingType47 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitReadingType.RoutineBefore + "'", fieldVisitReadingType47.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitReadingType.RoutineBefore));
        org.junit.Assert.assertNull(strList49);
        org.junit.Assert.assertNotNull(fieldVisitReading51);
        org.junit.Assert.assertNull(datumConvertedQuantityWithDisplayList52);
        org.junit.Assert.assertNull(quantityWithDisplay58);
        org.junit.Assert.assertNotNull(crossSectionPoint60);
        org.junit.Assert.assertNotNull(crossSectionPoint62);
        org.junit.Assert.assertNotNull(pointVelocityDischargeActivity69);
        org.junit.Assert.assertNotNull(pointVelocityDischargeActivity73);
        org.junit.Assert.assertNull(verticalList74);
        org.junit.Assert.assertNotNull(fieldVisitReading78);
        org.junit.Assert.assertNotNull(trendLineAnalysis81);
        org.junit.Assert.assertNull(doubleWithDisplay82);
        org.junit.Assert.assertNull(doubleWithDisplay83);
    }

    @Test
    public void test42972() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest85.test42972");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationRemark locationRemark0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationRemark();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationRemark locationRemark2 = locationRemark0.setDescription("MaxInstant");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse3 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant4 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse5 = locationDescriptionListServiceResponse3.setNextToken(instant4);
        locationRemark2.FromTime = instant4;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationRemark locationRemark8 = locationRemark2.setRemark("/AQUARIUS/Acquisition/v2");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest9 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest();
        java.lang.Object obj10 = timeAlignedDataServiceRequest9.getResponseType();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Attachment attachment11 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Attachment();
        java.lang.String str12 = attachment11.getUrl();
        java.lang.String str13 = attachment11.FileName;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutBulkEditResultGradesV2 putBulkEditResultGradesV2_14 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutBulkEditResultGradesV2();
        java.lang.Double double15 = putBulkEditResultGradesV2_14.DepthValue;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_16 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray18 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList19 = new java.util.ArrayList<java.lang.String>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList19, strArray18);
        getObservationsV2_16.SpecimenIds = strList19;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags22 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray26 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList27 = new java.util.ArrayList<java.lang.String>();
        boolean boolean28 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList27, strArray26);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags29 = putLocationTags22.setTagUniqueIds(strList27);
        getObservationsV2_16.QualityControlTypes = strList27;
        java.util.List<java.lang.String> strList31 = getObservationsV2_16.getAnalyticalGroupIds();
        java.util.List<java.lang.String> strList32 = getObservationsV2_16.DataClassifications;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.FieldResultType fieldResultType33 = getObservationsV2_16.FieldResultType;
        java.time.Instant instant34 = getObservationsV2_16.getEndObservedTime();
        java.lang.String str35 = getObservationsV2_16.DepthUnitCustomId;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags36 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray40 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList41 = new java.util.ArrayList<java.lang.String>();
        boolean boolean42 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList41, strArray40);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags43 = putLocationTags36.setTagUniqueIds(strList41);
        java.util.ArrayList<java.lang.String> strList44 = putLocationTags43.TagUniqueIds;
        getObservationsV2_16.ProjectIds = strList44;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutBulkEditResultGradesV2 putBulkEditResultGradesV2_46 = putBulkEditResultGradesV2_14.setSearch((java.util.List<java.lang.String>) strList44);
        java.util.List<java.lang.String> strList47 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutBulkEditResultGradesV2 putBulkEditResultGradesV2_48 = putBulkEditResultGradesV2_46.setLabResultLaboratoryIds(strList47);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CalibrationCheck calibrationCheck49 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CalibrationCheck();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CalibrationCheckType calibrationCheckType50 = calibrationCheck49.getCalibrationCheckType();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay51 = calibrationCheck49.Value;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse52 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary53 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary55 = dischargeSummary53.setPublish((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse56 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant57 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse58 = locationDescriptionListServiceResponse56.setNextToken(instant57);
        dischargeSummary53.MeasurementTime = instant57;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse60 = locationDescriptionListServiceResponse52.setNextToken(instant57);
        java.time.Instant instant61 = locationDescriptionListServiceResponse52.getNextToken();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CalibrationCheck calibrationCheck62 = calibrationCheck49.setTime(instant61);
        putBulkEditResultGradesV2_48.StartResultTime = instant61;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Attachment attachment64 = attachment11.setDateUploaded(instant61);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest65 = timeAlignedDataServiceRequest9.setQueryFrom(instant61);
        locationRemark2.CreateTime = instant61;
        java.time.Instant instant67 = locationRemark2.FromTime;
        org.junit.Assert.assertNotNull(locationRemark2);
        org.junit.Assert.assertNotNull(instant4);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse5);
        org.junit.Assert.assertNotNull(locationRemark8);
        org.junit.Assert.assertNotNull(obj10);
        org.junit.Assert.assertEquals(obj10.toString(), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj10), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj10), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNull(double15);
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(putLocationTags29);
        org.junit.Assert.assertNull(strList31);
        org.junit.Assert.assertNull(strList32);
        org.junit.Assert.assertNull(fieldResultType33);
        org.junit.Assert.assertNull(instant34);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(putLocationTags43);
        org.junit.Assert.assertNotNull(strList44);
        org.junit.Assert.assertNotNull(putBulkEditResultGradesV2_46);
        org.junit.Assert.assertNotNull(putBulkEditResultGradesV2_48);
        org.junit.Assert.assertNull(calibrationCheckType50);
        org.junit.Assert.assertNull(doubleWithDisplay51);
        org.junit.Assert.assertNotNull(dischargeSummary55);
        org.junit.Assert.assertNotNull(instant57);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse58);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse60);
        org.junit.Assert.assertNotNull(instant61);
        org.junit.Assert.assertNotNull(calibrationCheck62);
        org.junit.Assert.assertNotNull(attachment64);
        org.junit.Assert.assertNotNull(timeAlignedDataServiceRequest65);
        org.junit.Assert.assertNotNull(instant67);
    }

    @Test
    public void test42973() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest85.test42973");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFieldVisit postFieldVisit0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFieldVisit();
        postFieldVisit0.Participants = "hi!:///AQUARIUS/Provisioning/v1";
        java.lang.String str3 = postFieldVisit0.Participants;
        java.lang.String str4 = postFieldVisit0.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFieldVisit postFieldVisit6 = postFieldVisit0.setNotes("/AQUARIUS/Acquisition/v2");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocation samplingLocation7 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocation();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricConfiguration metricConfiguration8 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricConfiguration();
        java.lang.String str9 = metricConfiguration8.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty observedProperty10 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty();
        observedProperty10.CasNumber = "MinDuration";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricConfiguration metricConfiguration13 = metricConfiguration8.setObservedProperty(observedProperty10);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultType resultType14 = observedProperty10.ResultType;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservedProperty postObservedProperty15 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservedProperty();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UnitGroup unitGroup16 = postObservedProperty15.UnitGroup;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity quantity17 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Unit unit18 = null;
        quantity17.Unit = unit18;
        postObservedProperty15.LowerLimit = quantity17;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity quantity21 = postObservedProperty15.LowerLimit;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Unit unit22 = quantity21.Unit;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty observedProperty23 = observedProperty10.setUpperLimit(quantity21);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocation samplingLocation24 = samplingLocation7.setElevation(quantity21);
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment> domainObjectAttachmentList25 = samplingLocation24.getAttachments();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity postActivity26 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttribute[] extendedAttributeArray27 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttribute[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttribute> extendedAttributeList28 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttribute>();
        boolean boolean29 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttribute>) extendedAttributeList28, extendedAttributeArray27);
        postActivity26.ExtendedAttributes = extendedAttributeList28;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocation samplingLocation31 = samplingLocation24.setExtendedAttributes((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttribute>) extendedAttributeList28);
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttribute> extendedAttributeList32 = samplingLocation31.ExtendedAttributes;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFieldVisit postFieldVisit33 = postFieldVisit0.setExtendedAttributes(extendedAttributeList32);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutFieldVisit putFieldVisit34 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutFieldVisit();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity[] plannedActivityArray35 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity> plannedActivityList36 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity>();
        boolean boolean37 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity>) plannedActivityList36, plannedActivityArray35);
        putFieldVisit34.PlannedActivities = plannedActivityList36;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment39 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment();
        java.lang.String str40 = domainObjectAttachment39.getId();
        java.lang.String str41 = domainObjectAttachment39.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Attachment attachment42 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment43 = domainObjectAttachment39.setAttachment(attachment42);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment44 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment();
        java.lang.String str45 = domainObjectAttachment44.getId();
        java.lang.String str46 = domainObjectAttachment44.getId();
        domainObjectAttachment44.Id = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment50 = domainObjectAttachment44.setId("hi!");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment51 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment();
        java.lang.String str52 = domainObjectAttachment51.getId();
        java.lang.String str53 = domainObjectAttachment51.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Attachment attachment54 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment55 = domainObjectAttachment51.setAttachment(attachment54);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment56 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment();
        java.lang.String str57 = domainObjectAttachment56.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment58 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment();
        java.lang.String str59 = domainObjectAttachment58.getId();
        java.lang.String str60 = domainObjectAttachment58.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Attachment attachment61 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment62 = domainObjectAttachment58.setAttachment(attachment61);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment63 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment();
        java.lang.String str64 = domainObjectAttachment63.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment[] domainObjectAttachmentArray65 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment[] { domainObjectAttachment39, domainObjectAttachment44, domainObjectAttachment51, domainObjectAttachment56, domainObjectAttachment58, domainObjectAttachment63 };
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment> domainObjectAttachmentList66 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment>();
        boolean boolean67 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment>) domainObjectAttachmentList66, domainObjectAttachmentArray65);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutFieldVisit putFieldVisit68 = putFieldVisit34.setAttachments((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment>) domainObjectAttachmentList66);
        postFieldVisit0.Attachments = domainObjectAttachmentList66;
        java.lang.Object obj70 = postFieldVisit0.getResponseType();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes71 = postFieldVisit0.AuditAttributes;
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "hi!:///AQUARIUS/Provisioning/v1" + "'", str3, "hi!:///AQUARIUS/Provisioning/v1");
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNotNull(postFieldVisit6);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(metricConfiguration13);
        org.junit.Assert.assertNull(resultType14);
        org.junit.Assert.assertNull(unitGroup16);
        org.junit.Assert.assertNotNull(quantity21);
        org.junit.Assert.assertNull(unit22);
        org.junit.Assert.assertNotNull(observedProperty23);
        org.junit.Assert.assertNotNull(samplingLocation24);
        org.junit.Assert.assertNull(domainObjectAttachmentList25);
        org.junit.Assert.assertNotNull(extendedAttributeArray27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(samplingLocation31);
        org.junit.Assert.assertNotNull(extendedAttributeList32);
        org.junit.Assert.assertNotNull(postFieldVisit33);
        org.junit.Assert.assertNotNull(plannedActivityArray35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNull(str40);
        org.junit.Assert.assertNull(str41);
        org.junit.Assert.assertNotNull(domainObjectAttachment43);
        org.junit.Assert.assertNull(str45);
        org.junit.Assert.assertNull(str46);
        org.junit.Assert.assertNotNull(domainObjectAttachment50);
        org.junit.Assert.assertNull(str52);
        org.junit.Assert.assertNull(str53);
        org.junit.Assert.assertNotNull(domainObjectAttachment55);
        org.junit.Assert.assertNull(str57);
        org.junit.Assert.assertNull(str59);
        org.junit.Assert.assertNull(str60);
        org.junit.Assert.assertNotNull(domainObjectAttachment62);
        org.junit.Assert.assertNull(str64);
        org.junit.Assert.assertNotNull(domainObjectAttachmentArray65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertNotNull(putFieldVisit68);
        org.junit.Assert.assertNotNull(obj70);
        org.junit.Assert.assertEquals(obj70.toString(), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$FieldVisit");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj70), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$FieldVisit");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj70), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$FieldVisit");
        org.junit.Assert.assertNull(auditAttributes71);
    }

    @Test
    public void test42974() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest85.test42974");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostTaxon postTaxon0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostTaxon();
        postTaxon0.ItisUrl = "MinInstant";
        postTaxon0.ItisTsn = "MaxDuration";
        postTaxon0.Comment = "MaxInstant";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.TaxonomyLevel taxonomyLevel7 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.TaxonomyLevel();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostTaxon postTaxon8 = postTaxon0.setTaxonomyLevel(taxonomyLevel7);
        postTaxon0.ItisTsn = "9999-12-31T23:59:59.9999999Z://2021.4.62.0";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostTaxon postTaxon12 = postTaxon0.setComment("yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ");
        java.lang.String str13 = postTaxon12.getItisComment();
        postTaxon12.Comment = "ZZZZZ";
        java.lang.String str16 = postTaxon12.getScientificName();
        org.junit.Assert.assertNotNull(postTaxon8);
        org.junit.Assert.assertNotNull(postTaxon12);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNull(str16);
    }

    @Test
    public void test42975() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest85.test42975");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.PublicKey publicKey0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.PublicKey();
        publicKey0.Xml = "";
        publicKey0.Xml = "";
        publicKey0.Xml = "http://MaxDurationhttp/json/reply/Float";
    }

    @Test
    public void test42976() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest85.test42976");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.GetFieldVisitReadingsByLocationServiceRequest getFieldVisitReadingsByLocationServiceRequest0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.GetFieldVisitReadingsByLocationServiceRequest();
        java.lang.Boolean boolean1 = getFieldVisitReadingsByLocationServiceRequest0.ApplyRounding;
        java.lang.String str2 = getFieldVisitReadingsByLocationServiceRequest0.LocationIdentifier;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.GetFieldVisitReadingsByLocationServiceRequest getFieldVisitReadingsByLocationServiceRequest4 = getFieldVisitReadingsByLocationServiceRequest0.setPublish((java.lang.Boolean) true);
        java.lang.String str5 = getFieldVisitReadingsByLocationServiceRequest4.getLocationUniqueId();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.GetFieldVisitReadingsByLocationServiceRequest getFieldVisitReadingsByLocationServiceRequest7 = getFieldVisitReadingsByLocationServiceRequest4.setLocationIdentifier("hi!");
        java.lang.Boolean boolean8 = getFieldVisitReadingsByLocationServiceRequest4.ApplyRounding;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.User user9 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.User();
        java.util.List<java.lang.String> strList10 = user9.getRoles();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.User user12 = user9.setEmail("hi!");
        java.lang.String str13 = user9.Email;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UserProfile userProfile14 = null;
        user9.UserProfile = userProfile14;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitDataByLocationServiceRequest fieldVisitDataByLocationServiceRequest16 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitDataByLocationServiceRequest();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitDataByLocationServiceRequest fieldVisitDataByLocationServiceRequest18 = fieldVisitDataByLocationServiceRequest16.setIncludeNodeDetails((java.lang.Boolean) true);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags19 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray23 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList24 = new java.util.ArrayList<java.lang.String>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList24, strArray23);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags26 = putLocationTags19.setTagUniqueIds(strList24);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitDataByLocationServiceRequest fieldVisitDataByLocationServiceRequest27 = fieldVisitDataByLocationServiceRequest18.setParameters(strList24);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitDataByLocationServiceRequest fieldVisitDataByLocationServiceRequest29 = fieldVisitDataByLocationServiceRequest18.setConvertToStandardReferenceDatum("POST");
        fieldVisitDataByLocationServiceRequest18.IncludeInvalidActivities = true;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_32 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.util.List<java.lang.String> strList33 = getObservationsV2_32.SamplingContextTagIds;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItem importItem34 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_35 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray37 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList38 = new java.util.ArrayList<java.lang.String>();
        boolean boolean39 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList38, strArray37);
        getObservationsV2_35.SpecimenIds = strList38;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags41 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray45 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList46 = new java.util.ArrayList<java.lang.String>();
        boolean boolean47 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList46, strArray45);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags48 = putLocationTags41.setTagUniqueIds(strList46);
        getObservationsV2_35.QualityControlTypes = strList46;
        java.util.List<java.lang.String> strList50 = getObservationsV2_35.getLabReportIds();
        importItem34.Errors = getObservationsV2_35;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_52 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.util.List<java.lang.String> strList53 = getObservationsV2_52.SamplingContextTagIds;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_54 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray56 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList57 = new java.util.ArrayList<java.lang.String>();
        boolean boolean58 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList57, strArray56);
        getObservationsV2_54.SpecimenIds = strList57;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags60 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray64 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList65 = new java.util.ArrayList<java.lang.String>();
        boolean boolean66 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList65, strArray64);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags67 = putLocationTags60.setTagUniqueIds(strList65);
        getObservationsV2_54.QualityControlTypes = strList65;
        getObservationsV2_52.ResultGrades = strList65;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItem importItem70 = importItem34.setFields((java.util.List<java.lang.String>) strList65);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_71 = getObservationsV2_32.setAnalysisMethodIds((java.util.List<java.lang.String>) strList65);
        fieldVisitDataByLocationServiceRequest18.Parameters = strList65;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.User user73 = user9.setRoles((java.util.List<java.lang.String>) strList65);
        getFieldVisitReadingsByLocationServiceRequest4.Parameters = strList65;
        org.junit.Assert.assertNull(boolean1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNotNull(getFieldVisitReadingsByLocationServiceRequest4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(getFieldVisitReadingsByLocationServiceRequest7);
        org.junit.Assert.assertNull(boolean8);
        org.junit.Assert.assertNull(strList10);
        org.junit.Assert.assertNotNull(user12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "hi!" + "'", str13, "hi!");
        org.junit.Assert.assertNotNull(fieldVisitDataByLocationServiceRequest18);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(putLocationTags26);
        org.junit.Assert.assertNotNull(fieldVisitDataByLocationServiceRequest27);
        org.junit.Assert.assertNotNull(fieldVisitDataByLocationServiceRequest29);
        org.junit.Assert.assertNull(strList33);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(putLocationTags48);
        org.junit.Assert.assertNull(strList50);
        org.junit.Assert.assertNull(strList53);
        org.junit.Assert.assertNotNull(strArray56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(strArray64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertNotNull(putLocationTags67);
        org.junit.Assert.assertNotNull(importItem70);
        org.junit.Assert.assertNotNull(getObservationsV2_71);
        org.junit.Assert.assertNotNull(user73);
    }

    @Test
    public void test42977() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest85.test42977");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostStatisticalDerivedTimeSeries postStatisticalDerivedTimeSeries0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostStatisticalDerivedTimeSeries();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostStatisticalDerivedTimeSeries postStatisticalDerivedTimeSeries2 = postStatisticalDerivedTimeSeries0.setComment("'.'SSSSSSS");
        java.lang.String str3 = postStatisticalDerivedTimeSeries0.SubLocationIdentifier;
        java.lang.String str4 = postStatisticalDerivedTimeSeries0.getComputationPeriodIdentifier();
        postStatisticalDerivedTimeSeries0.Parameter = "-PT87591240H";
        org.junit.Assert.assertNotNull(postStatisticalDerivedTimeSeries2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(str4);
    }

    @Test
    public void test42978() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest85.test42978");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest();
        java.lang.Object obj1 = timeAlignedDataServiceRequest0.getResponseType();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse2 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant3 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse4 = locationDescriptionListServiceResponse2.setNextToken(instant3);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest5 = timeAlignedDataServiceRequest0.setQueryFrom(instant3);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags6 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray10 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList11 = new java.util.ArrayList<java.lang.String>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList11, strArray10);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags13 = putLocationTags6.setTagUniqueIds(strList11);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest14 = timeAlignedDataServiceRequest0.setTimeSeriesOutputUnitIds(strList11);
        timeAlignedDataServiceRequest14.IncludeGapMarkers = false;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutQualifierGroup putQualifierGroup17 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutQualifierGroup();
        putQualifierGroup17.Identifier = "";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_20 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray22 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList23 = new java.util.ArrayList<java.lang.String>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList23, strArray22);
        getObservationsV2_20.SpecimenIds = strList23;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags26 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray30 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList31 = new java.util.ArrayList<java.lang.String>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList31, strArray30);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags33 = putLocationTags26.setTagUniqueIds(strList31);
        getObservationsV2_20.QualityControlTypes = strList31;
        java.util.List<java.lang.String> strList35 = getObservationsV2_20.getAnalyticalGroupIds();
        java.util.List<java.lang.String> strList36 = getObservationsV2_20.DataClassifications;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObject importItemObject37 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObject();
        java.util.List<java.lang.String> strList38 = importItemObject37.getWarningMessages();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportChangeItem[] importChangeItemArray39 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportChangeItem[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportChangeItem> importChangeItemList40 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportChangeItem>();
        boolean boolean41 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportChangeItem>) importChangeItemList40, importChangeItemArray39);
        importItemObject37.ItemComparison = importChangeItemList40;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags43 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray47 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList48 = new java.util.ArrayList<java.lang.String>();
        boolean boolean49 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList48, strArray47);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags50 = putLocationTags43.setTagUniqueIds(strList48);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObject importItemObject51 = importItemObject37.setExistingItem((java.lang.Object) putLocationTags43);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemStatusType importItemStatusType52 = importItemObject51.Status;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutBulkEditResultGradesV2 putBulkEditResultGradesV2_53 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutBulkEditResultGradesV2();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RoleFlattened roleFlattened54 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RoleFlattened();
        java.lang.Boolean boolean55 = roleFlattened54.CanRemoveFieldVisits;
        roleFlattened54.Name = "MaxInstant";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationType putLocationType58 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationType();
        java.lang.String str59 = putLocationType58.Description;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_60 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray63 = new java.lang.String[] { "", "" };
        java.util.ArrayList<java.lang.String> strList64 = new java.util.ArrayList<java.lang.String>();
        boolean boolean65 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList64, strArray63);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_66 = getObservationsV2_60.setDataClassifications((java.util.List<java.lang.String>) strList64);
        getObservationsV2_66.DepthUnitCustomId = "hi!";
        java.lang.String str69 = getObservationsV2_66.CustomId;
        java.util.List<java.lang.String> strList70 = getObservationsV2_66.getSearch();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_71 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray73 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList74 = new java.util.ArrayList<java.lang.String>();
        boolean boolean75 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList74, strArray73);
        getObservationsV2_71.SpecimenIds = strList74;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags77 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray81 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList82 = new java.util.ArrayList<java.lang.String>();
        boolean boolean83 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList82, strArray81);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags84 = putLocationTags77.setTagUniqueIds(strList82);
        getObservationsV2_71.QualityControlTypes = strList82;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_86 = getObservationsV2_66.setMedia((java.util.List<java.lang.String>) strList82);
        putLocationType58.ExtendedAttributeDefinitionIds = strList82;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RoleFlattenedBase roleFlattenedBase88 = roleFlattened54.setRoleApprovalTransitions(strList82);
        putBulkEditResultGradesV2_53.ResultGrades = strList82;
        importItemObject51.WarningMessages = strList82;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_91 = getObservationsV2_20.setSamplingLocationGroupIds((java.util.List<java.lang.String>) strList82);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutQualifierGroup putQualifierGroup92 = putQualifierGroup17.setQualifierCodeList(strList82);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest93 = timeAlignedDataServiceRequest14.setTimeSeriesOutputUnitIds(strList82);
        java.lang.Double double94 = timeAlignedDataServiceRequest93.UtcOffset;
        java.lang.Boolean boolean95 = timeAlignedDataServiceRequest93.isApplyRounding();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest97 = timeAlignedDataServiceRequest93.setIncludeGapMarkers((java.lang.Boolean) true);
        java.time.Instant instant98 = timeAlignedDataServiceRequest97.getQueryTo();
        java.time.Instant instant99 = timeAlignedDataServiceRequest97.QueryFrom;
        org.junit.Assert.assertNotNull(obj1);
        org.junit.Assert.assertEquals(obj1.toString(), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj1), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj1), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertNotNull(instant3);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse4);
        org.junit.Assert.assertNotNull(timeAlignedDataServiceRequest5);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(putLocationTags13);
        org.junit.Assert.assertNotNull(timeAlignedDataServiceRequest14);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(putLocationTags33);
        org.junit.Assert.assertNull(strList35);
        org.junit.Assert.assertNull(strList36);
        org.junit.Assert.assertNull(strList38);
        org.junit.Assert.assertNotNull(importChangeItemArray39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(putLocationTags50);
        org.junit.Assert.assertNotNull(importItemObject51);
        org.junit.Assert.assertNull(importItemStatusType52);
        org.junit.Assert.assertNull(boolean55);
        org.junit.Assert.assertNull(str59);
        org.junit.Assert.assertNotNull(strArray63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertNotNull(getObservationsV2_66);
        org.junit.Assert.assertNull(str69);
        org.junit.Assert.assertNull(strList70);
        org.junit.Assert.assertNotNull(strArray73);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertNotNull(strArray81);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + true + "'", boolean83 == true);
        org.junit.Assert.assertNotNull(putLocationTags84);
        org.junit.Assert.assertNotNull(getObservationsV2_86);
        org.junit.Assert.assertNotNull(roleFlattenedBase88);
        org.junit.Assert.assertNotNull(getObservationsV2_91);
        org.junit.Assert.assertNotNull(putQualifierGroup92);
        org.junit.Assert.assertNotNull(timeAlignedDataServiceRequest93);
        org.junit.Assert.assertNull(double94);
        org.junit.Assert.assertNull(boolean95);
        org.junit.Assert.assertNotNull(timeAlignedDataServiceRequest97);
        org.junit.Assert.assertNull(instant98);
        org.junit.Assert.assertNotNull(instant99);
    }

    @Test
    public void test42979() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest85.test42979");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostStandardDatum postStandardDatum0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostStandardDatum();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.StandardDatumBase standardDatumBase2 = postStandardDatum0.setIdentifier("POST");
        java.lang.String str3 = standardDatumBase2.Identifier;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.StandardDatumBase standardDatumBase5 = standardDatumBase2.setIdentifier("multipart/form-data; boundary=****f2ce0d54-dac7-4cd0-b74f-1024089261f9****");
        org.junit.Assert.assertNotNull(standardDatumBase2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "POST" + "'", str3, "POST");
        org.junit.Assert.assertNotNull(standardDatumBase5);
    }

    @Test
    public void test42980() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest85.test42980");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SearchResultAttachment searchResultAttachment0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SearchResultAttachment();
        searchResultAttachment0.Cursor = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ";
        java.lang.Integer int3 = searchResultAttachment0.TotalCount;
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Attachment> attachmentList4 = searchResultAttachment0.DomainObjects;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SearchResultAttachment searchResultAttachment5 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SearchResultAttachment();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Attachment[] attachmentArray6 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Attachment[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Attachment> attachmentList7 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Attachment>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Attachment>) attachmentList7, attachmentArray6);
        searchResultAttachment5.DomainObjects = attachmentList7;
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Attachment> attachmentList10 = searchResultAttachment5.getDomainObjects();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SearchResultAttachment searchResultAttachment11 = searchResultAttachment0.setDomainObjects(attachmentList10);
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Attachment> attachmentList12 = searchResultAttachment0.DomainObjects;
        java.lang.Integer int13 = searchResultAttachment0.getTotalCount();
        searchResultAttachment0.TotalCount = 0;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SearchResultAttachment searchResultAttachment17 = searchResultAttachment0.setTotalCount((java.lang.Integer) 4);
        org.junit.Assert.assertNull(int3);
        org.junit.Assert.assertNull(attachmentList4);
        org.junit.Assert.assertNotNull(attachmentArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(attachmentList10);
        org.junit.Assert.assertNotNull(searchResultAttachment11);
        org.junit.Assert.assertNotNull(attachmentList12);
        org.junit.Assert.assertNull(int13);
        org.junit.Assert.assertNotNull(searchResultAttachment17);
    }

    @Test
    public void test42981() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest85.test42981");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutTimeSeries putTimeSeries0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutTimeSeries();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutTimeSeries putTimeSeries2 = putTimeSeries0.setDescription("hi!");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutTimeSeries putTimeSeries4 = putTimeSeries0.setDescription("/AQUARIUS/Acquisition/v2://9999-12-31T23:59:59.999Z");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutTimeSeries putTimeSeries6 = putTimeSeries4.setComment("MinDuration");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutTimeSeries putTimeSeries8 = putTimeSeries6.setPublish((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostStatisticalDerivedTimeSeries postStatisticalDerivedTimeSeries9 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostStatisticalDerivedTimeSeries();
        java.lang.String str10 = postStatisticalDerivedTimeSeries9.ComputationPeriodIdentifier;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostCalculatedDerivedTimeSeries postCalculatedDerivedTimeSeries11 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostCalculatedDerivedTimeSeries();
        java.util.ArrayList<java.lang.String> strList12 = postCalculatedDerivedTimeSeries11.TimeSeriesUniqueIds;
        java.lang.String str13 = postCalculatedDerivedTimeSeries11.Label;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostLocation postLocation14 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostLocation();
        postLocation14.Description = "hi!";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeValue[] extendedAttributeValueArray17 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeValue[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeValue> extendedAttributeValueList18 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeValue>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeValue>) extendedAttributeValueList18, extendedAttributeValueArray17);
        postLocation14.ExtendedAttributeValues = extendedAttributeValueList18;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostCalculatedDerivedTimeSeries postCalculatedDerivedTimeSeries21 = postCalculatedDerivedTimeSeries11.setExtendedAttributeValues((java.util.List<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeValue>) extendedAttributeValueList18);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostStatisticalDerivedTimeSeries postStatisticalDerivedTimeSeries22 = postStatisticalDerivedTimeSeries9.setExtendedAttributeValues((java.util.List<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeValue>) extendedAttributeValueList18);
        putTimeSeries8.ExtendedAttributeValues = extendedAttributeValueList18;
        java.lang.String str24 = putTimeSeries8.Label;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutTimeSeries putTimeSeries26 = putTimeSeries8.setTimeSeriesUniqueId("/AQUARIUS/Acquisition/v2://9999-12-31T23:59:59.999Z");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.TimeSeries timeSeries27 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.TimeSeries();
        java.lang.String str28 = timeSeries27.ComputationIdentifier;
        java.lang.String str29 = timeSeries27.getSubLocationIdentifier();
        java.lang.String str30 = timeSeries27.getComputationPeriodIdentifier();
        timeSeries27.SubLocationIdentifier = "http";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.TimeSeries timeSeries34 = timeSeries27.setUtcOffset("MaxDuration");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.TimeSeries timeSeries36 = timeSeries27.setLabel("multipart/form-data; boundary=****2d077bad-cd27-4736-8ba0-2a8d8a85733d****");
        java.lang.String str37 = timeSeries36.LocationIdentifier;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.TimeSeries timeSeries39 = timeSeries36.setDescription("http://MaxDurationhttp/json/reply/Float");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostLocation postLocation40 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostLocation();
        java.lang.Double double41 = postLocation40.getLatitude();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.LocationBase locationBase43 = postLocation40.setLocationPath("https");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.LocationBase locationBase45 = locationBase43.setPublish((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostCalculatedDerivedTimeSeries postCalculatedDerivedTimeSeries46 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostCalculatedDerivedTimeSeries();
        java.util.ArrayList<java.lang.String> strList47 = postCalculatedDerivedTimeSeries46.TimeSeriesUniqueIds;
        java.lang.String str48 = postCalculatedDerivedTimeSeries46.Label;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostLocation postLocation49 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostLocation();
        postLocation49.Description = "hi!";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeValue[] extendedAttributeValueArray52 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeValue[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeValue> extendedAttributeValueList53 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeValue>();
        boolean boolean54 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeValue>) extendedAttributeValueList53, extendedAttributeValueArray52);
        postLocation49.ExtendedAttributeValues = extendedAttributeValueList53;
        postCalculatedDerivedTimeSeries46.ExtendedAttributeValues = extendedAttributeValueList53;
        java.lang.String str57 = postCalculatedDerivedTimeSeries46.ComputationPeriodIdentifier;
        java.util.List<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeValue> extendedAttributeValueList58 = postCalculatedDerivedTimeSeries46.getExtendedAttributeValues();
        java.util.List<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeValue> extendedAttributeValueList59 = postCalculatedDerivedTimeSeries46.ExtendedAttributeValues;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.LocationBase locationBase60 = locationBase45.setExtendedAttributeValues(extendedAttributeValueList59);
        timeSeries39.ExtendedAttributeValues = extendedAttributeValueList59;
        putTimeSeries8.ExtendedAttributeValues = extendedAttributeValueList59;
        org.junit.Assert.assertNotNull(putTimeSeries2);
        org.junit.Assert.assertNotNull(putTimeSeries4);
        org.junit.Assert.assertNotNull(putTimeSeries6);
        org.junit.Assert.assertNotNull(putTimeSeries8);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNull(strList12);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNotNull(extendedAttributeValueArray17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(postCalculatedDerivedTimeSeries21);
        org.junit.Assert.assertNotNull(postStatisticalDerivedTimeSeries22);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNotNull(putTimeSeries26);
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertNotNull(timeSeries34);
        org.junit.Assert.assertNotNull(timeSeries36);
        org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertNotNull(timeSeries39);
        org.junit.Assert.assertNull(double41);
        org.junit.Assert.assertNotNull(locationBase43);
        org.junit.Assert.assertNotNull(locationBase45);
        org.junit.Assert.assertNull(strList47);
        org.junit.Assert.assertNull(str48);
        org.junit.Assert.assertNotNull(extendedAttributeValueArray52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNull(str57);
        org.junit.Assert.assertNotNull(extendedAttributeValueList58);
        org.junit.Assert.assertNotNull(extendedAttributeValueList59);
        org.junit.Assert.assertNotNull(locationBase60);
    }

    @Test
    public void test42982() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest85.test42982");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MonitoringMethod monitoringMethod0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MonitoringMethod();
        monitoringMethod0.Parameter = "/AQUARIUS/Acquisition/v2";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MonitoringMethod monitoringMethod4 = monitoringMethod0.setDescription("");
        java.lang.String str5 = monitoringMethod0.Description;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MonitoringMethod monitoringMethod7 = monitoringMethod0.setDescription("http");
        java.lang.String str8 = monitoringMethod0.MethodCode;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MonitoringMethod monitoringMethod10 = monitoringMethod0.setDisplayName("9999-12-31T23:59:59.9999999Z://2021.4.62.0");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MonitoringMethod monitoringMethod12 = monitoringMethod10.setParameter("PT87591240H");
        java.lang.String str13 = monitoringMethod12.getMethodCode();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MonitoringMethod monitoringMethod15 = monitoringMethod12.setDescription("multipart/form-data; boundary=****9fadde69-3f13-40c4-a87c-0f3f51c2dd35****");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MonitoringMethod monitoringMethod17 = monitoringMethod12.setDescription("/api");
        java.lang.String str18 = monitoringMethod17.DisplayName;
        java.lang.String str19 = monitoringMethod17.getRoundingSpec();
        org.junit.Assert.assertNotNull(monitoringMethod4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(monitoringMethod7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(monitoringMethod10);
        org.junit.Assert.assertNotNull(monitoringMethod12);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNotNull(monitoringMethod15);
        org.junit.Assert.assertNotNull(monitoringMethod17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "9999-12-31T23:59:59.9999999Z://2021.4.62.0" + "'", str18, "9999-12-31T23:59:59.9999999Z://2021.4.62.0");
        org.junit.Assert.assertNull(str19);
    }

    @Test
    public void test42983() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest85.test42983");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostThresholdType postThresholdType0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostThresholdType();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ThresholdBehavior thresholdBehavior1 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ThresholdBehavior.Unknown;
        postThresholdType0.CheckForBehavior = thresholdBehavior1;
        java.lang.String str3 = postThresholdType0.getReferenceValueCode();
        java.lang.String str4 = postThresholdType0.getReferenceValueCode();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ThresholdSuppressionOption thresholdSuppressionOption5 = postThresholdType0.ThresholdSuppressionOption;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ThresholdSuppressionOption thresholdSuppressionOption6 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ThresholdSuppressionOption.Off;
        postThresholdType0.ThresholdSuppressionOption = thresholdSuppressionOption6;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostThresholdType postThresholdType8 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostThresholdType();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ThresholdBehavior thresholdBehavior9 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ThresholdBehavior.Unknown;
        postThresholdType8.CheckForBehavior = thresholdBehavior9;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ThresholdBehavior thresholdBehavior11 = postThresholdType8.CheckForBehavior;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostThresholdType postThresholdType13 = postThresholdType8.setReferenceValueCode("MinDuration");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ThresholdType thresholdType14 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ThresholdType();
        thresholdType14.Description = "/AQUARIUS/Acquisition/v2://9999-12-31T23:59:59.999Z";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ThresholdType thresholdType17 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ThresholdType();
        thresholdType17.Description = "/AQUARIUS/Acquisition/v2://9999-12-31T23:59:59.999Z";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ThresholdSuppressionOption thresholdSuppressionOption20 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ThresholdSuppressionOption.Off;
        thresholdType17.ThresholdSuppressionOption = thresholdSuppressionOption20;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ThresholdSuppressionOption thresholdSuppressionOption22 = thresholdType17.getThresholdSuppressionOption();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ThresholdBehavior thresholdBehavior23 = thresholdType17.getCheckForBehavior();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ThresholdBehavior thresholdBehavior24 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ThresholdBehavior.ThresholdBelow;
        thresholdType17.CheckForBehavior = thresholdBehavior24;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ThresholdBehavior thresholdBehavior26 = thresholdType17.getCheckForBehavior();
        thresholdType14.CheckForBehavior = thresholdBehavior26;
        postThresholdType13.CheckForBehavior = thresholdBehavior26;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostThresholdType postThresholdType29 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostThresholdType();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ThresholdBehavior thresholdBehavior30 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ThresholdBehavior.Unknown;
        postThresholdType29.CheckForBehavior = thresholdBehavior30;
        java.lang.String str32 = postThresholdType29.getReferenceValueCode();
        java.lang.String str33 = postThresholdType29.getReferenceValueCode();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ThresholdSuppressionOption thresholdSuppressionOption34 = postThresholdType29.ThresholdSuppressionOption;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ThresholdSuppressionOption thresholdSuppressionOption35 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ThresholdSuppressionOption.Unknown;
        postThresholdType29.ThresholdSuppressionOption = thresholdSuppressionOption35;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostThresholdType postThresholdType37 = postThresholdType13.setThresholdSuppressionOption(thresholdSuppressionOption35);
        postThresholdType0.ThresholdSuppressionOption = thresholdSuppressionOption35;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ThresholdType thresholdType39 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ThresholdType();
        thresholdType39.Description = "/AQUARIUS/Acquisition/v2://9999-12-31T23:59:59.999Z";
        java.lang.String str42 = thresholdType39.ReferenceValueCode;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostThresholdType postThresholdType43 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostThresholdType();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ThresholdBehavior thresholdBehavior44 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ThresholdBehavior.Unknown;
        postThresholdType43.CheckForBehavior = thresholdBehavior44;
        java.lang.String str46 = postThresholdType43.getReferenceValueCode();
        java.lang.String str47 = postThresholdType43.getReferenceValueCode();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ThresholdSuppressionOption thresholdSuppressionOption48 = postThresholdType43.ThresholdSuppressionOption;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ThresholdSuppressionOption thresholdSuppressionOption49 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ThresholdSuppressionOption.Unknown;
        postThresholdType43.ThresholdSuppressionOption = thresholdSuppressionOption49;
        java.lang.String str51 = postThresholdType43.getReferenceValueCode();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ThresholdType thresholdType52 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ThresholdType();
        thresholdType52.Description = "/AQUARIUS/Acquisition/v2://9999-12-31T23:59:59.999Z";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ThresholdSuppressionOption thresholdSuppressionOption55 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ThresholdSuppressionOption.Off;
        thresholdType52.ThresholdSuppressionOption = thresholdSuppressionOption55;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ThresholdSuppressionOption thresholdSuppressionOption57 = thresholdType52.getThresholdSuppressionOption();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ThresholdTypeSeverity thresholdTypeSeverity58 = thresholdType52.Severity;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ThresholdTypeSeverity thresholdTypeSeverity59 = thresholdType52.getSeverity();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ThresholdType thresholdType60 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ThresholdType();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ThresholdSuppressionOption thresholdSuppressionOption61 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ThresholdSuppressionOption.Editable;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ThresholdType thresholdType62 = thresholdType60.setThresholdSuppressionOption(thresholdSuppressionOption61);
        thresholdType52.ThresholdSuppressionOption = thresholdSuppressionOption61;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ThresholdType thresholdType64 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ThresholdType();
        thresholdType64.Description = "/AQUARIUS/Acquisition/v2://9999-12-31T23:59:59.999Z";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ThresholdSuppressionOption thresholdSuppressionOption67 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ThresholdSuppressionOption.Off;
        thresholdType64.ThresholdSuppressionOption = thresholdSuppressionOption67;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ThresholdSuppressionOption thresholdSuppressionOption69 = thresholdType64.getThresholdSuppressionOption();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ThresholdTypeSeverity thresholdTypeSeverity70 = thresholdType64.Severity;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ThresholdType thresholdType71 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ThresholdType();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ThresholdSuppressionOption thresholdSuppressionOption72 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ThresholdSuppressionOption.Editable;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ThresholdType thresholdType73 = thresholdType71.setThresholdSuppressionOption(thresholdSuppressionOption72);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ThresholdTypeSeverity thresholdTypeSeverity74 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ThresholdTypeSeverity.Info;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ThresholdType thresholdType75 = thresholdType71.setSeverity(thresholdTypeSeverity74);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ThresholdType thresholdType76 = thresholdType64.setSeverity(thresholdTypeSeverity74);
        thresholdType52.Severity = thresholdTypeSeverity74;
        postThresholdType43.Severity = thresholdTypeSeverity74;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ThresholdType thresholdType79 = thresholdType39.setSeverity(thresholdTypeSeverity74);
        postThresholdType0.Severity = thresholdTypeSeverity74;
        postThresholdType0.ReferenceValueCode = "http:///AQUARIUS/Acquisition/v2multipart/form-data; boundary=****44f0772e-c3ca-4316-8e2a-61ec8540d661****/v1/observedproperties/{id}/categoricalvalues";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ThresholdSuppressionOption thresholdSuppressionOption83 = postThresholdType0.ThresholdSuppressionOption;
        org.junit.Assert.assertTrue("'" + thresholdBehavior1 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ThresholdBehavior.Unknown + "'", thresholdBehavior1.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ThresholdBehavior.Unknown));
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(thresholdSuppressionOption5);
        org.junit.Assert.assertTrue("'" + thresholdSuppressionOption6 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ThresholdSuppressionOption.Off + "'", thresholdSuppressionOption6.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ThresholdSuppressionOption.Off));
        org.junit.Assert.assertTrue("'" + thresholdBehavior9 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ThresholdBehavior.Unknown + "'", thresholdBehavior9.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ThresholdBehavior.Unknown));
        org.junit.Assert.assertTrue("'" + thresholdBehavior11 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ThresholdBehavior.Unknown + "'", thresholdBehavior11.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ThresholdBehavior.Unknown));
        org.junit.Assert.assertNotNull(postThresholdType13);
        org.junit.Assert.assertTrue("'" + thresholdSuppressionOption20 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ThresholdSuppressionOption.Off + "'", thresholdSuppressionOption20.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ThresholdSuppressionOption.Off));
        org.junit.Assert.assertTrue("'" + thresholdSuppressionOption22 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ThresholdSuppressionOption.Off + "'", thresholdSuppressionOption22.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ThresholdSuppressionOption.Off));
        org.junit.Assert.assertNull(thresholdBehavior23);
        org.junit.Assert.assertTrue("'" + thresholdBehavior24 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ThresholdBehavior.ThresholdBelow + "'", thresholdBehavior24.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ThresholdBehavior.ThresholdBelow));
        org.junit.Assert.assertTrue("'" + thresholdBehavior26 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ThresholdBehavior.ThresholdBelow + "'", thresholdBehavior26.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ThresholdBehavior.ThresholdBelow));
        org.junit.Assert.assertTrue("'" + thresholdBehavior30 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ThresholdBehavior.Unknown + "'", thresholdBehavior30.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ThresholdBehavior.Unknown));
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertNull(thresholdSuppressionOption34);
        org.junit.Assert.assertTrue("'" + thresholdSuppressionOption35 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ThresholdSuppressionOption.Unknown + "'", thresholdSuppressionOption35.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ThresholdSuppressionOption.Unknown));
        org.junit.Assert.assertNotNull(postThresholdType37);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertTrue("'" + thresholdBehavior44 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ThresholdBehavior.Unknown + "'", thresholdBehavior44.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ThresholdBehavior.Unknown));
        org.junit.Assert.assertNull(str46);
        org.junit.Assert.assertNull(str47);
        org.junit.Assert.assertNull(thresholdSuppressionOption48);
        org.junit.Assert.assertTrue("'" + thresholdSuppressionOption49 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ThresholdSuppressionOption.Unknown + "'", thresholdSuppressionOption49.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ThresholdSuppressionOption.Unknown));
        org.junit.Assert.assertNull(str51);
        org.junit.Assert.assertTrue("'" + thresholdSuppressionOption55 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ThresholdSuppressionOption.Off + "'", thresholdSuppressionOption55.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ThresholdSuppressionOption.Off));
        org.junit.Assert.assertTrue("'" + thresholdSuppressionOption57 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ThresholdSuppressionOption.Off + "'", thresholdSuppressionOption57.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ThresholdSuppressionOption.Off));
        org.junit.Assert.assertNull(thresholdTypeSeverity58);
        org.junit.Assert.assertNull(thresholdTypeSeverity59);
        org.junit.Assert.assertTrue("'" + thresholdSuppressionOption61 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ThresholdSuppressionOption.Editable + "'", thresholdSuppressionOption61.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ThresholdSuppressionOption.Editable));
        org.junit.Assert.assertNotNull(thresholdType62);
        org.junit.Assert.assertTrue("'" + thresholdSuppressionOption67 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ThresholdSuppressionOption.Off + "'", thresholdSuppressionOption67.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ThresholdSuppressionOption.Off));
        org.junit.Assert.assertTrue("'" + thresholdSuppressionOption69 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ThresholdSuppressionOption.Off + "'", thresholdSuppressionOption69.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ThresholdSuppressionOption.Off));
        org.junit.Assert.assertNull(thresholdTypeSeverity70);
        org.junit.Assert.assertTrue("'" + thresholdSuppressionOption72 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ThresholdSuppressionOption.Editable + "'", thresholdSuppressionOption72.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ThresholdSuppressionOption.Editable));
        org.junit.Assert.assertNotNull(thresholdType73);
        org.junit.Assert.assertTrue("'" + thresholdTypeSeverity74 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ThresholdTypeSeverity.Info + "'", thresholdTypeSeverity74.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ThresholdTypeSeverity.Info));
        org.junit.Assert.assertNotNull(thresholdType75);
        org.junit.Assert.assertNotNull(thresholdType76);
        org.junit.Assert.assertNotNull(thresholdType79);
        org.junit.Assert.assertTrue("'" + thresholdSuppressionOption83 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ThresholdSuppressionOption.Unknown + "'", thresholdSuppressionOption83.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ThresholdSuppressionOption.Unknown));
    }

    @Test
    public void test42984() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest85.test42984");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutBulkEditResultGradesV2 putBulkEditResultGradesV2_0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutBulkEditResultGradesV2();
        java.lang.Double double1 = putBulkEditResultGradesV2_0.DepthValue;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_2 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray4 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList5 = new java.util.ArrayList<java.lang.String>();
        boolean boolean6 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList5, strArray4);
        getObservationsV2_2.SpecimenIds = strList5;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags8 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray12 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList13 = new java.util.ArrayList<java.lang.String>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList13, strArray12);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags15 = putLocationTags8.setTagUniqueIds(strList13);
        getObservationsV2_2.QualityControlTypes = strList13;
        java.util.List<java.lang.String> strList17 = getObservationsV2_2.getAnalyticalGroupIds();
        java.util.List<java.lang.String> strList18 = getObservationsV2_2.DataClassifications;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.FieldResultType fieldResultType19 = getObservationsV2_2.FieldResultType;
        java.time.Instant instant20 = getObservationsV2_2.getEndObservedTime();
        java.lang.String str21 = getObservationsV2_2.DepthUnitCustomId;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags22 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray26 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList27 = new java.util.ArrayList<java.lang.String>();
        boolean boolean28 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList27, strArray26);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags29 = putLocationTags22.setTagUniqueIds(strList27);
        java.util.ArrayList<java.lang.String> strList30 = putLocationTags29.TagUniqueIds;
        getObservationsV2_2.ProjectIds = strList30;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutBulkEditResultGradesV2 putBulkEditResultGradesV2_32 = putBulkEditResultGradesV2_0.setSearch((java.util.List<java.lang.String>) strList30);
        java.util.List<java.lang.String> strList33 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutBulkEditResultGradesV2 putBulkEditResultGradesV2_34 = putBulkEditResultGradesV2_32.setLabResultLaboratoryIds(strList33);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CalibrationCheck calibrationCheck35 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CalibrationCheck();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CalibrationCheckType calibrationCheckType36 = calibrationCheck35.getCalibrationCheckType();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay37 = calibrationCheck35.Value;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse38 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary39 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary41 = dischargeSummary39.setPublish((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse42 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant43 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse44 = locationDescriptionListServiceResponse42.setNextToken(instant43);
        dischargeSummary39.MeasurementTime = instant43;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse46 = locationDescriptionListServiceResponse38.setNextToken(instant43);
        java.time.Instant instant47 = locationDescriptionListServiceResponse38.getNextToken();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CalibrationCheck calibrationCheck48 = calibrationCheck35.setTime(instant47);
        putBulkEditResultGradesV2_34.StartResultTime = instant47;
        java.lang.Double double50 = putBulkEditResultGradesV2_34.getMinNumericResultValue();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_51 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.util.List<java.lang.String> strList52 = getObservationsV2_51.SamplingContextTagIds;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_53 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray55 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList56 = new java.util.ArrayList<java.lang.String>();
        boolean boolean57 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList56, strArray55);
        getObservationsV2_53.SpecimenIds = strList56;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags59 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray63 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList64 = new java.util.ArrayList<java.lang.String>();
        boolean boolean65 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList64, strArray63);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags66 = putLocationTags59.setTagUniqueIds(strList64);
        getObservationsV2_53.QualityControlTypes = strList64;
        getObservationsV2_51.ResultGrades = strList64;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutBulkEditResultGradesV2 putBulkEditResultGradesV2_69 = putBulkEditResultGradesV2_34.setAnalysisMethodSimpleIds((java.util.List<java.lang.String>) strList64);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetGroupedObservationsV2 getGroupedObservationsV2_70 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetGroupedObservationsV2();
        java.time.Instant instant71 = getGroupedObservationsV2_70.getStartModificationTime();
        java.util.List<java.lang.String> strList72 = getGroupedObservationsV2_70.getAnalysisMethodIds();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutQualifier putQualifier73 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutQualifier();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutQualifier putQualifier75 = putQualifier73.setUniqueId("");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest76 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_77 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray79 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList80 = new java.util.ArrayList<java.lang.String>();
        boolean boolean81 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList80, strArray79);
        getObservationsV2_77.SpecimenIds = strList80;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags83 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray87 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList88 = new java.util.ArrayList<java.lang.String>();
        boolean boolean89 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList88, strArray87);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags90 = putLocationTags83.setTagUniqueIds(strList88);
        getObservationsV2_77.QualityControlTypes = strList88;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest92 = timeAlignedDataServiceRequest76.setTimeSeriesUniqueIds(strList88);
        putQualifier73.GroupIdentifiers = strList88;
        java.util.ArrayList<java.lang.String> strList94 = putQualifier73.GroupIdentifiers;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutQualifier putQualifier96 = putQualifier73.setDisplayName("multipart/form-data; boundary=****1eab67e1-84c8-4b82-aa06-d6c7526551f8****");
        java.util.ArrayList<java.lang.String> strList97 = putQualifier96.getGroupIdentifiers();
        getGroupedObservationsV2_70.AnalyticalGroupIds = strList97;
        putBulkEditResultGradesV2_34.ActivityTypes = strList97;
        org.junit.Assert.assertNull(double1);
        org.junit.Assert.assertNotNull(strArray4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(putLocationTags15);
        org.junit.Assert.assertNull(strList17);
        org.junit.Assert.assertNull(strList18);
        org.junit.Assert.assertNull(fieldResultType19);
        org.junit.Assert.assertNull(instant20);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(putLocationTags29);
        org.junit.Assert.assertNotNull(strList30);
        org.junit.Assert.assertNotNull(putBulkEditResultGradesV2_32);
        org.junit.Assert.assertNotNull(putBulkEditResultGradesV2_34);
        org.junit.Assert.assertNull(calibrationCheckType36);
        org.junit.Assert.assertNull(doubleWithDisplay37);
        org.junit.Assert.assertNotNull(dischargeSummary41);
        org.junit.Assert.assertNotNull(instant43);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse44);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse46);
        org.junit.Assert.assertNotNull(instant47);
        org.junit.Assert.assertNotNull(calibrationCheck48);
        org.junit.Assert.assertNull(double50);
        org.junit.Assert.assertNull(strList52);
        org.junit.Assert.assertNotNull(strArray55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertNotNull(strArray63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertNotNull(putLocationTags66);
        org.junit.Assert.assertNotNull(putBulkEditResultGradesV2_69);
        org.junit.Assert.assertNull(instant71);
        org.junit.Assert.assertNull(strList72);
        org.junit.Assert.assertNotNull(putQualifier75);
        org.junit.Assert.assertNotNull(strArray79);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
        org.junit.Assert.assertNotNull(strArray87);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + true + "'", boolean89 == true);
        org.junit.Assert.assertNotNull(putLocationTags90);
        org.junit.Assert.assertNotNull(timeAlignedDataServiceRequest92);
        org.junit.Assert.assertNotNull(strList94);
        org.junit.Assert.assertNotNull(putQualifier96);
        org.junit.Assert.assertNotNull(strList97);
    }

    @Test
    public void test42985() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest85.test42985");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Tag tag0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Tag();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Tag tag2 = tag0.setAppliesToAttachments((java.lang.Boolean) false);
        java.lang.String str3 = tag2.Key;
        java.util.ArrayList<java.lang.String> strList4 = tag2.getPickListValues();
        java.lang.Boolean boolean5 = tag2.AppliesToLocationNotes;
        tag2.AppliesToAttachments = false;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.TagValueType tagValueType8 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.TagValueType.Number;
        tag2.ValueType = tagValueType8;
        java.lang.Boolean boolean10 = tag2.AppliesToLocationNotes;
        java.lang.Boolean boolean11 = tag2.isAppliesToLocations();
        tag2.AppliesToLocations = false;
        org.junit.Assert.assertNotNull(tag2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(strList4);
        org.junit.Assert.assertNull(boolean5);
        org.junit.Assert.assertTrue("'" + tagValueType8 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.TagValueType.Number + "'", tagValueType8.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.TagValueType.Number));
        org.junit.Assert.assertNull(boolean10);
        org.junit.Assert.assertNull(boolean11);
    }

    @Test
    public void test42986() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest85.test42986");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDataRawServiceRequest timeSeriesDataRawServiceRequest0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDataRawServiceRequest();
        java.lang.Boolean boolean1 = timeSeriesDataRawServiceRequest0.ApplyRounding;
        timeSeriesDataRawServiceRequest0.ApplyRounding = false;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDataRawServiceRequest timeSeriesDataRawServiceRequest5 = timeSeriesDataRawServiceRequest0.setApplyRounding((java.lang.Boolean) false);
        java.lang.String str6 = timeSeriesDataRawServiceRequest0.getGetParts();
        java.lang.Boolean boolean7 = timeSeriesDataRawServiceRequest0.ApplyRounding;
        java.lang.String str8 = timeSeriesDataRawServiceRequest0.getTimeSeriesUniqueId();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Reading reading9 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Reading();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay10 = reading9.getValue();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Reading reading12 = reading9.setParameterId("hi!");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Reading reading14 = reading12.setModel("MaxInstant");
        java.time.Instant instant15 = reading12.Time;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedPoint timeAlignedPoint16 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedPoint();
        timeAlignedPoint16.Method9 = "multipart/form-data; boundary=****7eff1774-b6b0-471a-961c-156c64359366****";
        timeAlignedPoint16.DisplayValue9 = "";
        java.lang.String str21 = timeAlignedPoint16.getApprovalName4();
        timeAlignedPoint16.ApprovalLevel2 = 0L;
        timeAlignedPoint16.GradeCode1 = 1L;
        java.lang.String str26 = timeAlignedPoint16.ApprovalName10;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedPoint timeAlignedPoint28 = timeAlignedPoint16.setGradeCode6((java.lang.Long) 1L);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedPoint timeAlignedPoint30 = timeAlignedPoint28.setApprovalName3("multipart/form-data; boundary=****2917d69a-62fa-41ce-b981-4dbe2deab9f5****");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedPoint timeAlignedPoint32 = timeAlignedPoint28.setQualifiers1("2021.4.62.0");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedPoint timeAlignedPoint34 = timeAlignedPoint28.setApprovalName5("http:///AQUARIUS/Acquisition/v2multipart/form-data; boundary=****44f0772e-c3ca-4316-8e2a-61ec8540d661****/v1/observedproperties/{id}/categoricalvalues");
        timeAlignedPoint34.DisplayValue3 = "multipart/form-data; boundary=****5b5bcc49-98d5-445c-ae15-d7e16405ad8c****";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ReportListServiceRequest reportListServiceRequest37 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ReportListServiceRequest();
        reportListServiceRequest37.ReportTitle = "MinDuration";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ReportListServiceRequest reportListServiceRequest41 = reportListServiceRequest37.setUserUniqueId("hi!:///AQUARIUS/Provisioning/v1");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary42 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary44 = dischargeSummary42.setPublish((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary45 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay46 = dischargeSummary45.getMeanGageHeight();
        java.lang.String str47 = dischargeSummary45.getGageHeightComments();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay48 = null;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary49 = dischargeSummary45.setDischarge(quantityWithDisplay48);
        java.time.Instant instant50 = dischargeSummary45.MeasurementStartTime;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay51 = null;
        dischargeSummary45.Discharge = quantityWithDisplay51;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.BaseFlowType baseFlowType53 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.BaseFlowType.NonBaseFlow;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary54 = dischargeSummary45.setBaseFlow(baseFlowType53);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary55 = dischargeSummary42.setBaseFlow(baseFlowType53);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetChartDataV2 getChartDataV2_56 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetChartDataV2();
        java.util.List<java.lang.String> strList57 = getChartDataV2_56.getProjectIds();
        java.util.List<java.lang.String> strList58 = getChartDataV2_56.ActivityTypes;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationTagListServiceResponse locationTagListServiceResponse59 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationTagListServiceResponse();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.NameTagDefinition[] nameTagDefinitionArray60 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.NameTagDefinition[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.NameTagDefinition> nameTagDefinitionList61 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.NameTagDefinition>();
        boolean boolean62 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.NameTagDefinition>) nameTagDefinitionList61, nameTagDefinitionArray60);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationTagListServiceResponse locationTagListServiceResponse63 = locationTagListServiceResponse59.setTags(nameTagDefinitionList61);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary64 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary66 = dischargeSummary64.setPublish((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse67 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant68 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse69 = locationDescriptionListServiceResponse67.setNextToken(instant68);
        dischargeSummary64.MeasurementTime = instant68;
        locationTagListServiceResponse59.ResponseTime = instant68;
        getChartDataV2_56.StartResultTime = instant68;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary73 = dischargeSummary55.setMeasurementTime(instant68);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ReportListServiceRequest reportListServiceRequest74 = reportListServiceRequest37.setCreatedFrom(instant68);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedPoint timeAlignedPoint75 = timeAlignedPoint34.setTimestamp(instant68);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Reading reading76 = reading12.setTime(instant68);
        timeSeriesDataRawServiceRequest0.QueryFrom = instant68;
        org.junit.Assert.assertNull(boolean1);
        org.junit.Assert.assertNotNull(timeSeriesDataRawServiceRequest5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertEquals("'" + boolean7 + "' != '" + false + "'", boolean7, false);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNull(doubleWithDisplay10);
        org.junit.Assert.assertNotNull(reading12);
        org.junit.Assert.assertNotNull(reading14);
        org.junit.Assert.assertNull(instant15);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertNotNull(timeAlignedPoint28);
        org.junit.Assert.assertNotNull(timeAlignedPoint30);
        org.junit.Assert.assertNotNull(timeAlignedPoint32);
        org.junit.Assert.assertNotNull(timeAlignedPoint34);
        org.junit.Assert.assertNotNull(reportListServiceRequest41);
        org.junit.Assert.assertNotNull(dischargeSummary44);
        org.junit.Assert.assertNull(quantityWithDisplay46);
        org.junit.Assert.assertNull(str47);
        org.junit.Assert.assertNotNull(dischargeSummary49);
        org.junit.Assert.assertNull(instant50);
        org.junit.Assert.assertTrue("'" + baseFlowType53 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.BaseFlowType.NonBaseFlow + "'", baseFlowType53.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.BaseFlowType.NonBaseFlow));
        org.junit.Assert.assertNotNull(dischargeSummary54);
        org.junit.Assert.assertNotNull(dischargeSummary55);
        org.junit.Assert.assertNull(strList57);
        org.junit.Assert.assertNull(strList58);
        org.junit.Assert.assertNotNull(nameTagDefinitionArray60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(locationTagListServiceResponse63);
        org.junit.Assert.assertNotNull(dischargeSummary66);
        org.junit.Assert.assertNotNull(instant68);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse69);
        org.junit.Assert.assertNotNull(dischargeSummary73);
        org.junit.Assert.assertNotNull(reportListServiceRequest74);
        org.junit.Assert.assertNotNull(timeAlignedPoint75);
        org.junit.Assert.assertNotNull(reading76);
    }

    @Test
    public void test42987() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest85.test42987");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CalibrationCheck calibrationCheck0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CalibrationCheck();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CalibrationCheckType calibrationCheckType1 = calibrationCheck0.getCalibrationCheckType();
        calibrationCheck0.SensorUniqueId = "MinDuration";
        java.lang.String str4 = calibrationCheck0.getParameterId();
        java.lang.String str5 = calibrationCheck0.getComments();
        java.lang.String str6 = calibrationCheck0.SubLocationIdentifier;
        java.lang.Boolean boolean7 = calibrationCheck0.IsValid;
        org.junit.Assert.assertNull(calibrationCheckType1);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(boolean7);
    }

    @Test
    public void test42988() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest85.test42988");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostSensor postSensor0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostSensor();
        postSensor0.SerialNumber = "";
        java.lang.Object obj3 = postSensor0.getResponseType();
        org.junit.Assert.assertNotNull(obj3);
        org.junit.Assert.assertEquals(obj3.toString(), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning$Sensor");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj3), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning$Sensor");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj3), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning$Sensor");
    }

    @Test
    public void test42989() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest85.test42989");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.GetDropDownListsByType getDropDownListsByType0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.GetDropDownListsByType();
        java.lang.Object obj1 = getDropDownListsByType0.getResponseType();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.DropDownListType dropDownListType2 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.DropDownListType.Configurable;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.GetDropDownListsByType getDropDownListsByType3 = getDropDownListsByType0.setType(dropDownListType2);
        java.lang.Object obj4 = getDropDownListsByType0.getResponseType();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.DropDownListType dropDownListType5 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.DropDownListType.Configurable;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.GetDropDownListsByType getDropDownListsByType6 = getDropDownListsByType0.setType(dropDownListType5);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.DropDownListType dropDownListType7 = getDropDownListsByType6.Type;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.GetDropDownListsByType getDropDownListsByType8 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.GetDropDownListsByType();
        java.lang.Object obj9 = getDropDownListsByType8.getResponseType();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.DropDownListType dropDownListType10 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.DropDownListType.Configurable;
        getDropDownListsByType8.Type = dropDownListType10;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.DropDownListType dropDownListType12 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.DropDownListType.Configurable;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.GetDropDownListsByType getDropDownListsByType13 = getDropDownListsByType8.setType(dropDownListType12);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.DropDownListType dropDownListType14 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.DropDownListType.Configurable;
        getDropDownListsByType8.Type = dropDownListType14;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.GetDropDownListsByType getDropDownListsByType16 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.GetDropDownListsByType();
        java.lang.Object obj17 = getDropDownListsByType16.getResponseType();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.DropDownListType dropDownListType18 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.DropDownListType.Configurable;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.GetDropDownListsByType getDropDownListsByType19 = getDropDownListsByType16.setType(dropDownListType18);
        java.lang.Object obj20 = getDropDownListsByType16.getResponseType();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.DropDownListType dropDownListType21 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.DropDownListType.Configurable;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.GetDropDownListsByType getDropDownListsByType22 = getDropDownListsByType16.setType(dropDownListType21);
        getDropDownListsByType8.Type = dropDownListType21;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.DropDownListType dropDownListType24 = getDropDownListsByType8.getType();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.GetDropDownListsByType getDropDownListsByType25 = getDropDownListsByType6.setType(dropDownListType24);
        org.junit.Assert.assertNotNull(obj1);
        org.junit.Assert.assertEquals(obj1.toString(), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning$DropDownListResponse");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj1), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning$DropDownListResponse");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj1), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning$DropDownListResponse");
        org.junit.Assert.assertTrue("'" + dropDownListType2 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.DropDownListType.Configurable + "'", dropDownListType2.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.DropDownListType.Configurable));
        org.junit.Assert.assertNotNull(getDropDownListsByType3);
        org.junit.Assert.assertNotNull(obj4);
        org.junit.Assert.assertEquals(obj4.toString(), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning$DropDownListResponse");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj4), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning$DropDownListResponse");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj4), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning$DropDownListResponse");
        org.junit.Assert.assertTrue("'" + dropDownListType5 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.DropDownListType.Configurable + "'", dropDownListType5.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.DropDownListType.Configurable));
        org.junit.Assert.assertNotNull(getDropDownListsByType6);
        org.junit.Assert.assertTrue("'" + dropDownListType7 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.DropDownListType.Configurable + "'", dropDownListType7.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.DropDownListType.Configurable));
        org.junit.Assert.assertNotNull(obj9);
        org.junit.Assert.assertEquals(obj9.toString(), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning$DropDownListResponse");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj9), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning$DropDownListResponse");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj9), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning$DropDownListResponse");
        org.junit.Assert.assertTrue("'" + dropDownListType10 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.DropDownListType.Configurable + "'", dropDownListType10.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.DropDownListType.Configurable));
        org.junit.Assert.assertTrue("'" + dropDownListType12 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.DropDownListType.Configurable + "'", dropDownListType12.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.DropDownListType.Configurable));
        org.junit.Assert.assertNotNull(getDropDownListsByType13);
        org.junit.Assert.assertTrue("'" + dropDownListType14 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.DropDownListType.Configurable + "'", dropDownListType14.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.DropDownListType.Configurable));
        org.junit.Assert.assertNotNull(obj17);
        org.junit.Assert.assertEquals(obj17.toString(), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning$DropDownListResponse");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj17), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning$DropDownListResponse");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj17), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning$DropDownListResponse");
        org.junit.Assert.assertTrue("'" + dropDownListType18 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.DropDownListType.Configurable + "'", dropDownListType18.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.DropDownListType.Configurable));
        org.junit.Assert.assertNotNull(getDropDownListsByType19);
        org.junit.Assert.assertNotNull(obj20);
        org.junit.Assert.assertEquals(obj20.toString(), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning$DropDownListResponse");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj20), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning$DropDownListResponse");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj20), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning$DropDownListResponse");
        org.junit.Assert.assertTrue("'" + dropDownListType21 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.DropDownListType.Configurable + "'", dropDownListType21.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.DropDownListType.Configurable));
        org.junit.Assert.assertNotNull(getDropDownListsByType22);
        org.junit.Assert.assertTrue("'" + dropDownListType24 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.DropDownListType.Configurable + "'", dropDownListType24.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.DropDownListType.Configurable));
        org.junit.Assert.assertNotNull(getDropDownListsByType25);
    }

    @Test
    public void test42990() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest85.test42990");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostStatisticalDerivedTimeSeries postStatisticalDerivedTimeSeries0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostStatisticalDerivedTimeSeries();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostStatisticalDerivedTimeSeries postStatisticalDerivedTimeSeries2 = postStatisticalDerivedTimeSeries0.setComment("'.'SSSSSSS");
        java.lang.String str3 = postStatisticalDerivedTimeSeries0.getParameter();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostStatisticalDerivedTimeSeries postStatisticalDerivedTimeSeries5 = postStatisticalDerivedTimeSeries0.setComputationPeriodIdentifier("/AQUARIUS/Provisioning/v1");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.NewValueLocationType newValueLocationType6 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.NewValueLocationType.Unknown;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostStatisticalDerivedTimeSeries postStatisticalDerivedTimeSeries7 = postStatisticalDerivedTimeSeries0.setNewValueLocation(newValueLocationType6);
        postStatisticalDerivedTimeSeries7.Label = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ";
        postStatisticalDerivedTimeSeries7.RequireMinimumCoverage = true;
        java.lang.String str12 = postStatisticalDerivedTimeSeries7.Unit;
        java.lang.String str13 = postStatisticalDerivedTimeSeries7.BinAnchorOffsetPeriod;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostStatisticalDerivedTimeSeries postStatisticalDerivedTimeSeries15 = postStatisticalDerivedTimeSeries7.setBinAnchorOffsetPeriod("MaxDuration");
        java.lang.String str16 = postStatisticalDerivedTimeSeries15.ComputationIdentifier;
        org.junit.Assert.assertNotNull(postStatisticalDerivedTimeSeries2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(postStatisticalDerivedTimeSeries5);
        org.junit.Assert.assertTrue("'" + newValueLocationType6 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.NewValueLocationType.Unknown + "'", newValueLocationType6.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.NewValueLocationType.Unknown));
        org.junit.Assert.assertNotNull(postStatisticalDerivedTimeSeries7);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNotNull(postStatisticalDerivedTimeSeries15);
        org.junit.Assert.assertNull(str16);
    }

    @Test
    public void test42991() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest85.test42991");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutFilter putFilter0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutFilter();
        java.time.OffsetDateTime offsetDateTime1 = putFilter0.StartTime;
        putFilter0.Description = "multipart/form-data; boundary=****6b8051d4-caf2-4095-9f11-faa36b95fc28****";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutFilter putFilter5 = putFilter0.setId("http://MaxDurationhttp/json/reply/Float://multipart/form-data; boundary=****231224c4-98ce-4e30-bd65-1d25287c4abe****");
        putFilter5.Description = "multipart/form-data; boundary=****139d2780-c7bb-430f-8369-46ea90b53b7d****";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutFilter putFilter9 = putFilter5.setId("multipart/form-data; boundary=****c5ace73f-96fd-4e64-b844-d9edac3c6d02****");
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocation> samplingLocationList10 = putFilter5.getSamplingLocations();
        org.junit.Assert.assertNull(offsetDateTime1);
        org.junit.Assert.assertNotNull(putFilter5);
        org.junit.Assert.assertNotNull(putFilter9);
        org.junit.Assert.assertNull(samplingLocationList10);
    }

    @Test
    public void test42992() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest85.test42992");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Unit unit0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Unit();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Unit unit2 = unit0.setPluralName("");
        java.lang.Boolean boolean3 = unit0.IsSystem;
        java.lang.String str4 = unit0.Symbol;
        org.junit.Assert.assertNotNull(unit2);
        org.junit.Assert.assertNull(boolean3);
        org.junit.Assert.assertNull(str4);
    }

    @Test
    public void test42993() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest85.test42993");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Address address0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Address();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Address address2 = address0.setCityName("/AQUARIUS/Acquisition/v2://9999-12-31T23:59:59.999Z");
        address0.CountryCode = "POST";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Address address6 = address0.setCountyCode("yyyy'-'MM'-'dd'T'HH':'mm':'ss");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostSamplingLocation postSamplingLocation7 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostSamplingLocation();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostSamplingLocation postSamplingLocation9 = postSamplingLocation7.setCustomId("hi!");
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttribute> extendedAttributeList10 = postSamplingLocation7.getExtendedAttributes();
        java.lang.String str11 = postSamplingLocation7.getLatitude();
        java.lang.String str12 = postSamplingLocation7.Id;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSamplingLocation putSamplingLocation13 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSamplingLocation();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSamplingLocation putSamplingLocation15 = putSamplingLocation13.setCustomId("https");
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttribute> extendedAttributeList16 = putSamplingLocation13.ExtendedAttributes;
        java.lang.String str17 = putSamplingLocation13.VerticalCollectionMethod;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Address address18 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Address();
        putSamplingLocation13.Address = address18;
        java.lang.String str20 = address18.getCountyCode();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostSamplingLocation postSamplingLocation21 = postSamplingLocation7.setAddress(address18);
        address18.PostalCode = "http://MaxDurationhttp/json/reply/ArrayList";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Address address24 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Address();
        address24.StreetName = "http://MaxDurationhttp/json/reply/ArrayList";
        java.lang.String str27 = address24.StreetName;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AddressType addressType28 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AddressType.SHIPPING;
        address24.AddressType = addressType28;
        address18.AddressType = addressType28;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Address address31 = address6.setAddressType(addressType28);
        java.lang.String str32 = address6.StreetName;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AddressType addressType33 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AddressType.MAILING;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Address address34 = address6.setAddressType(addressType33);
        java.lang.String str35 = address34.getStreetName();
        org.junit.Assert.assertNotNull(address2);
        org.junit.Assert.assertNotNull(address6);
        org.junit.Assert.assertNotNull(postSamplingLocation9);
        org.junit.Assert.assertNull(extendedAttributeList10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(putSamplingLocation15);
        org.junit.Assert.assertNull(extendedAttributeList16);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNotNull(postSamplingLocation21);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "http://MaxDurationhttp/json/reply/ArrayList" + "'", str27, "http://MaxDurationhttp/json/reply/ArrayList");
        org.junit.Assert.assertTrue("'" + addressType28 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AddressType.SHIPPING + "'", addressType28.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AddressType.SHIPPING));
        org.junit.Assert.assertNotNull(address31);
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertTrue("'" + addressType33 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AddressType.MAILING + "'", addressType33.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AddressType.MAILING));
        org.junit.Assert.assertNotNull(address34);
        org.junit.Assert.assertNull(str35);
    }

    @Test
    public void test42994() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest85.test42994");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.AdcpDischargeActivity adcpDischargeActivity0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.AdcpDischargeActivity();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay1 = null;
        adcpDischargeActivity0.TransducerDepth = quantityWithDisplay1;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary3 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        dischargeSummary3.Reviewer = "";
        java.time.Instant instant6 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        dischargeSummary3.MeasurementTime = instant6;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.BaseFlowType baseFlowType8 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.BaseFlowType.BaseFlow;
        dischargeSummary3.BaseFlow = baseFlowType8;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeUncertainty dischargeUncertainty10 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeUncertainty();
        dischargeSummary3.DischargeUncertainty = dischargeUncertainty10;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary12 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay13 = dischargeSummary12.getMeanGageHeight();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay14 = dischargeSummary12.Discharge;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay15 = dischargeSummary12.DurationInHours;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay16 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay18 = doubleWithDisplay16.setNumeric((java.lang.Double) 10.0d);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary19 = dischargeSummary12.setDurationInHours(doubleWithDisplay16);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeUncertainty dischargeUncertainty20 = dischargeUncertainty10.setQuantitativeUncertainty(doubleWithDisplay16);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.AdcpDischargeActivity adcpDischargeActivity21 = adcpDischargeActivity0.setTopEstimateExponent(doubleWithDisplay16);
        java.lang.String str22 = adcpDischargeActivity0.FirmwareVersion;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.AdcpDischargeActivity adcpDischargeActivity24 = adcpDischargeActivity0.setModel("");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.AdcpDischargeActivity adcpDischargeActivity26 = adcpDischargeActivity0.setSoftwareVersion("-PT87591240H");
        java.lang.String str27 = adcpDischargeActivity0.NodeDetails;
        adcpDischargeActivity0.NodeDetails = "2021.8.9990";
        org.junit.Assert.assertNotNull(instant6);
        org.junit.Assert.assertTrue("'" + baseFlowType8 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.BaseFlowType.BaseFlow + "'", baseFlowType8.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.BaseFlowType.BaseFlow));
        org.junit.Assert.assertNull(quantityWithDisplay13);
        org.junit.Assert.assertNull(quantityWithDisplay14);
        org.junit.Assert.assertNull(doubleWithDisplay15);
        org.junit.Assert.assertNotNull(doubleWithDisplay18);
        org.junit.Assert.assertNotNull(dischargeSummary19);
        org.junit.Assert.assertNotNull(dischargeUncertainty20);
        org.junit.Assert.assertNotNull(adcpDischargeActivity21);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertNotNull(adcpDischargeActivity24);
        org.junit.Assert.assertNotNull(adcpDischargeActivity26);
        org.junit.Assert.assertNull(str27);
    }

    @Test
    public void test42995() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest85.test42995");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ActivityWithDetails activityWithDetails0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ActivityWithDetails();
        activityWithDetails0.LoggerFileName = "'.'SSSSSSS";
        java.time.OffsetDateTime offsetDateTime3 = activityWithDetails0.getEndTime();
        java.lang.String str4 = activityWithDetails0.CustomId;
        activityWithDetails0.SourceActivityId = "multipart/form-data; boundary=****1eab67e1-84c8-4b82-aa06-d6c7526551f8****";
        org.junit.Assert.assertNull(offsetDateTime3);
        org.junit.Assert.assertNull(str4);
    }

    @Test
    public void test42996() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest85.test42996");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ReferencePointPeriod referencePointPeriod0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ReferencePointPeriod();
        java.lang.Boolean boolean1 = referencePointPeriod0.IsMeasuredAgainstLocalAssumedDatum;
        referencePointPeriod0.AppliedByUser = "MinDuration";
        java.lang.String str4 = referencePointPeriod0.Method;
        java.time.Instant instant5 = referencePointPeriod0.ValidFrom;
        org.junit.Assert.assertNull(boolean1);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(instant5);
    }

    @Test
    public void test42997() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest85.test42997");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod();
        java.lang.String str1 = analysisMethod0.getName();
        analysisMethod0.MethodId = "multipart/form-data; boundary=****f2ce0d54-dac7-4cd0-b74f-1024089261f9****";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLabAnalysisMethod postLabAnalysisMethod4 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLabAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes5 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLabAnalysisMethod postLabAnalysisMethod6 = postLabAnalysisMethod4.setAuditAttributes(auditAttributes5);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty[] observedPropertyArray7 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty> observedPropertyList8 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty>) observedPropertyList8, observedPropertyArray7);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLabAnalysisMethod postLabAnalysisMethod10 = postLabAnalysisMethod6.setObservedProperties((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty>) observedPropertyList8);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes11 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLabAnalysisMethod postLabAnalysisMethod12 = postLabAnalysisMethod6.setAuditAttributes(auditAttributes11);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes13 = postLabAnalysisMethod12.getAuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SearchResultObservedProperty searchResultObservedProperty14 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SearchResultObservedProperty();
        java.lang.Integer int15 = searchResultObservedProperty14.TotalCount;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SearchResultObservedProperty searchResultObservedProperty17 = searchResultObservedProperty14.setCursor("multipart/form-data; boundary=****231224c4-98ce-4e30-bd65-1d25287c4abe****");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLabAnalysisMethod postLabAnalysisMethod18 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLabAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes19 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLabAnalysisMethod postLabAnalysisMethod20 = postLabAnalysisMethod18.setAuditAttributes(auditAttributes19);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty[] observedPropertyArray21 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty> observedPropertyList22 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty>();
        boolean boolean23 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty>) observedPropertyList22, observedPropertyArray21);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLabAnalysisMethod postLabAnalysisMethod24 = postLabAnalysisMethod20.setObservedProperties((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty>) observedPropertyList22);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes25 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLabAnalysisMethod postLabAnalysisMethod26 = postLabAnalysisMethod20.setAuditAttributes(auditAttributes25);
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty> observedPropertyList27 = postLabAnalysisMethod26.getObservedProperties();
        searchResultObservedProperty14.DomainObjects = observedPropertyList27;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLabAnalysisMethod postLabAnalysisMethod29 = postLabAnalysisMethod12.setObservedProperties(observedPropertyList27);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod30 = analysisMethod0.setObservedProperties(observedPropertyList27);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutUnitGroup putUnitGroup31 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutUnitGroup();
        java.lang.String str32 = putUnitGroup31.getCustomId();
        java.lang.Boolean boolean33 = putUnitGroup31.SupportsConversion;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutUnitGroupWithUnit putUnitGroupWithUnit34 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutUnitGroupWithUnit();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutUnitGroupWithUnit putUnitGroupWithUnit36 = putUnitGroupWithUnit34.setId("yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UnitGroupSystemCodeType unitGroupSystemCodeType37 = putUnitGroupWithUnit34.SystemCode;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutAccessGroup putAccessGroup38 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutAccessGroup();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivity samplingPlanPlannedActivity39 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivity();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes40 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivity samplingPlanPlannedActivity41 = samplingPlanPlannedActivity39.setAuditAttributes(auditAttributes40);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes42 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes44 = auditAttributes42.setCreationUserProfileId("'.'SSSSSSS");
        samplingPlanPlannedActivity41.AuditAttributes = auditAttributes42;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes46 = samplingPlanPlannedActivity41.AuditAttributes;
        putAccessGroup38.AuditAttributes = auditAttributes46;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutUnitGroupWithUnit putUnitGroupWithUnit48 = putUnitGroupWithUnit34.setAuditAttributes(auditAttributes46);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutUnitGroup putUnitGroup49 = putUnitGroup31.setAuditAttributes(auditAttributes46);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLaboratory postLaboratory50 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLaboratory();
        java.lang.String str51 = postLaboratory50.Address;
        java.lang.String str52 = postLaboratory50.Name;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivity samplingPlanPlannedActivity53 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivity();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes54 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivity samplingPlanPlannedActivity55 = samplingPlanPlannedActivity53.setAuditAttributes(auditAttributes54);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes56 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes58 = auditAttributes56.setCreationUserProfileId("'.'SSSSSSS");
        samplingPlanPlannedActivity55.AuditAttributes = auditAttributes56;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes60 = samplingPlanPlannedActivity55.AuditAttributes;
        postLaboratory50.AuditAttributes = auditAttributes60;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLaboratory postLaboratory63 = postLaboratory50.setName("yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes64 = postLaboratory63.AuditAttributes;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutUnitGroup putUnitGroup65 = putUnitGroup31.setAuditAttributes(auditAttributes64);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostProject postProject66 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostProject();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes67 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostProject postProject68 = postProject66.setAuditAttributes(auditAttributes67);
        java.time.OffsetDateTime offsetDateTime69 = null;
        postProject66.StartTime = offsetDateTime69;
        java.time.OffsetDateTime offsetDateTime71 = postProject66.EndTime;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostProject postProject73 = postProject66.setScopeStatement("");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlan samplingPlan74 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlan();
        samplingPlan74.SamplingLocationGroupSelectionTypeRandomCount = 0;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationGroupSelectionType samplingLocationGroupSelectionType77 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationGroupSelectionType.ALL;
        samplingPlan74.SamplingLocationGroupSelectionType = samplingLocationGroupSelectionType77;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationGroup samplingLocationGroup79 = samplingPlan74.getSamplingLocationGroup();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes80 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlan samplingPlan81 = samplingPlan74.setAuditAttributes(auditAttributes80);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostProject postProject82 = postProject73.setAuditAttributes(auditAttributes80);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes83 = postProject73.AuditAttributes;
        java.lang.Boolean boolean84 = postProject73.getApproved();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes85 = postProject73.AuditAttributes;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutUnitGroup putUnitGroup86 = putUnitGroup65.setAuditAttributes(auditAttributes85);
        analysisMethod0.AuditAttributes = auditAttributes85;
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple> importHistoryEventSimpleList88 = analysisMethod0.ImportHistoryEventSimples;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes89 = analysisMethod0.getAuditAttributes();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(postLabAnalysisMethod6);
        org.junit.Assert.assertNotNull(observedPropertyArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(postLabAnalysisMethod10);
        org.junit.Assert.assertNotNull(postLabAnalysisMethod12);
        org.junit.Assert.assertNull(auditAttributes13);
        org.junit.Assert.assertNull(int15);
        org.junit.Assert.assertNotNull(searchResultObservedProperty17);
        org.junit.Assert.assertNotNull(postLabAnalysisMethod20);
        org.junit.Assert.assertNotNull(observedPropertyArray21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(postLabAnalysisMethod24);
        org.junit.Assert.assertNotNull(postLabAnalysisMethod26);
        org.junit.Assert.assertNotNull(observedPropertyList27);
        org.junit.Assert.assertNotNull(postLabAnalysisMethod29);
        org.junit.Assert.assertNotNull(analysisMethod30);
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertNull(boolean33);
        org.junit.Assert.assertNotNull(putUnitGroupWithUnit36);
        org.junit.Assert.assertNull(unitGroupSystemCodeType37);
        org.junit.Assert.assertNotNull(samplingPlanPlannedActivity41);
        org.junit.Assert.assertNotNull(auditAttributes44);
        org.junit.Assert.assertNotNull(auditAttributes46);
        org.junit.Assert.assertNotNull(putUnitGroupWithUnit48);
        org.junit.Assert.assertNotNull(putUnitGroup49);
        org.junit.Assert.assertNull(str51);
        org.junit.Assert.assertNull(str52);
        org.junit.Assert.assertNotNull(samplingPlanPlannedActivity55);
        org.junit.Assert.assertNotNull(auditAttributes58);
        org.junit.Assert.assertNotNull(auditAttributes60);
        org.junit.Assert.assertNotNull(postLaboratory63);
        org.junit.Assert.assertNotNull(auditAttributes64);
        org.junit.Assert.assertNotNull(putUnitGroup65);
        org.junit.Assert.assertNotNull(postProject68);
        org.junit.Assert.assertNull(offsetDateTime71);
        org.junit.Assert.assertNotNull(postProject73);
        org.junit.Assert.assertTrue("'" + samplingLocationGroupSelectionType77 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationGroupSelectionType.ALL + "'", samplingLocationGroupSelectionType77.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationGroupSelectionType.ALL));
        org.junit.Assert.assertNull(samplingLocationGroup79);
        org.junit.Assert.assertNotNull(samplingPlan81);
        org.junit.Assert.assertNotNull(postProject82);
        org.junit.Assert.assertNotNull(auditAttributes83);
        org.junit.Assert.assertNull(boolean84);
        org.junit.Assert.assertNotNull(auditAttributes85);
        org.junit.Assert.assertNotNull(putUnitGroup86);
        org.junit.Assert.assertNull(importHistoryEventSimpleList88);
        org.junit.Assert.assertNotNull(auditAttributes89);
    }

    @Test
    public void test42998() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest85.test42998");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray2 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList3 = new java.util.ArrayList<java.lang.String>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList3, strArray2);
        getObservationsV2_0.SpecimenIds = strList3;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags6 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray10 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList11 = new java.util.ArrayList<java.lang.String>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList11, strArray10);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags13 = putLocationTags6.setTagUniqueIds(strList11);
        getObservationsV2_0.QualityControlTypes = strList11;
        java.util.List<java.lang.String> strList15 = getObservationsV2_0.getAnalyticalGroupIds();
        java.util.List<java.lang.String> strList16 = getObservationsV2_0.DataClassifications;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.FieldResultType fieldResultType17 = getObservationsV2_0.FieldResultType;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemTaxon importItemTaxon18 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemTaxon();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemTaxon importItemTaxon20 = importItemTaxon18.setRowId("/AQUARIUS/Provisioning/v1");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemTaxon importItemTaxon22 = importItemTaxon18.setRowId("9999-12-31T23:59:59.999Z");
        java.lang.String[] strArray29 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSSSSSZZZZZ", "", "2021.4.62.0", "/AQUARIUS", "hi!" };
        java.util.ArrayList<java.lang.String> strList30 = new java.util.ArrayList<java.lang.String>();
        boolean boolean31 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList30, strArray29);
        importItemTaxon22.Fields = strList30;
        getObservationsV2_0.ProjectIds = strList30;
        java.lang.String str34 = getObservationsV2_0.DepthUnitId;
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(putLocationTags13);
        org.junit.Assert.assertNull(strList15);
        org.junit.Assert.assertNull(strList16);
        org.junit.Assert.assertNull(fieldResultType17);
        org.junit.Assert.assertNotNull(importItemTaxon20);
        org.junit.Assert.assertNotNull(importItemTaxon22);
        org.junit.Assert.assertNotNull(strArray29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNull(str34);
    }

    @Test
    public void test42999() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest85.test42999");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostUnitGroupWithUnit postUnitGroupWithUnit0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostUnitGroupWithUnit();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostUnitGroupWithUnit postUnitGroupWithUnit2 = postUnitGroupWithUnit0.setCustomId("hi!");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UnitGroupWithUnitsSystemCodeType unitGroupWithUnitsSystemCodeType3 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UnitGroupWithUnitsSystemCodeType.LENGTH;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostUnitGroupWithUnit postUnitGroupWithUnit4 = postUnitGroupWithUnit2.setSystemCode(unitGroupWithUnitsSystemCodeType3);
        java.lang.String str5 = postUnitGroupWithUnit4.getCustomId();
        java.lang.Boolean boolean6 = postUnitGroupWithUnit4.SupportsConversion;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostUnitGroupWithUnit postUnitGroupWithUnit8 = postUnitGroupWithUnit4.setSupportsConversion((java.lang.Boolean) true);
        java.lang.Object obj9 = postUnitGroupWithUnit4.getResponseType();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostUnitGroupWithUnit postUnitGroupWithUnit11 = postUnitGroupWithUnit4.setCustomId("multipart/form-data; boundary=****d9f5d551-383a-4365-87fd-ae7094da6f3b****");
        org.junit.Assert.assertNotNull(postUnitGroupWithUnit2);
        org.junit.Assert.assertTrue("'" + unitGroupWithUnitsSystemCodeType3 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UnitGroupWithUnitsSystemCodeType.LENGTH + "'", unitGroupWithUnitsSystemCodeType3.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UnitGroupWithUnitsSystemCodeType.LENGTH));
        org.junit.Assert.assertNotNull(postUnitGroupWithUnit4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "hi!" + "'", str5, "hi!");
        org.junit.Assert.assertNull(boolean6);
        org.junit.Assert.assertNotNull(postUnitGroupWithUnit8);
        org.junit.Assert.assertNotNull(obj9);
        org.junit.Assert.assertEquals(obj9.toString(), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$UnitGroupWithUnits");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj9), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$UnitGroupWithUnits");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj9), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$UnitGroupWithUnits");
        org.junit.Assert.assertNotNull(postUnitGroupWithUnit11);
    }

    @Test
    public void test43000() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest85.test43000");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedFieldResult plannedFieldResult0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedFieldResult();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes1 = plannedFieldResult0.AuditAttributes;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty observedProperty2 = plannedFieldResult0.ObservedProperty;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedFieldResult plannedFieldResult4 = plannedFieldResult0.setComment("http://MaxDurationhttp/json/reply/Integer");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MediumType mediumType5 = plannedFieldResult4.getMedium();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedFieldResult plannedFieldResult7 = plannedFieldResult4.setId("http://MaxDurationhttp/json/reply/Integer");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ActivityTemplate activityTemplate8 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ActivityTemplate();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MediumType mediumType9 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MediumType.BIOLOGICAL;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ActivityTemplate activityTemplate10 = activityTemplate8.setMedium(mediumType9);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity quantity11 = activityTemplate10.Depth;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFieldVisitActivityWithTemplate postFieldVisitActivityWithTemplate12 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFieldVisitActivityWithTemplate();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes13 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFieldVisitActivityWithTemplate postFieldVisitActivityWithTemplate14 = postFieldVisitActivityWithTemplate12.setAuditAttributes(auditAttributes13);
        java.lang.String str15 = postFieldVisitActivityWithTemplate14.getCustomId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFieldVisitActivityWithTemplate postFieldVisitActivityWithTemplate17 = postFieldVisitActivityWithTemplate14.setId("MinDuration");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MediumType mediumType18 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MediumType.GROUNDWATER;
        postFieldVisitActivityWithTemplate17.Medium = mediumType18;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ActivityTemplate activityTemplate20 = activityTemplate10.setMedium(mediumType18);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MediumType mediumType21 = activityTemplate10.getMedium();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedFieldResult plannedFieldResult22 = plannedFieldResult7.setMedium(mediumType21);
        org.junit.Assert.assertNull(auditAttributes1);
        org.junit.Assert.assertNull(observedProperty2);
        org.junit.Assert.assertNotNull(plannedFieldResult4);
        org.junit.Assert.assertNull(mediumType5);
        org.junit.Assert.assertNotNull(plannedFieldResult7);
        org.junit.Assert.assertTrue("'" + mediumType9 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MediumType.BIOLOGICAL + "'", mediumType9.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MediumType.BIOLOGICAL));
        org.junit.Assert.assertNotNull(activityTemplate10);
        org.junit.Assert.assertNull(quantity11);
        org.junit.Assert.assertNotNull(postFieldVisitActivityWithTemplate14);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNotNull(postFieldVisitActivityWithTemplate17);
        org.junit.Assert.assertTrue("'" + mediumType18 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MediumType.GROUNDWATER + "'", mediumType18.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MediumType.GROUNDWATER));
        org.junit.Assert.assertNotNull(activityTemplate20);
        org.junit.Assert.assertTrue("'" + mediumType21 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MediumType.GROUNDWATER + "'", mediumType21.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MediumType.GROUNDWATER));
        org.junit.Assert.assertNotNull(plannedFieldResult22);
    }
}

