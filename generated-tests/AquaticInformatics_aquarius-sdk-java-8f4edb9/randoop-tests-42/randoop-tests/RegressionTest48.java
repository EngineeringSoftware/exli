import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest48 {

    public static boolean debug = false;

    @Test
    public void test24001() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest48.test24001");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationImportSummary observationImportSummary0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationImportSummary();
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObservation> importItemObservationList1 = observationImportSummary0.getErrorImportItems();
        java.lang.Integer int2 = observationImportSummary0.SkippedCount;
        java.lang.Integer int3 = observationImportSummary0.getUpdateCount();
        org.junit.Assert.assertNull(importItemObservationList1);
        org.junit.Assert.assertNull(int2);
        org.junit.Assert.assertNull(int3);
    }

    @Test
    public void test24002() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest48.test24002");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutExtendedAttribute putExtendedAttribute0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutExtendedAttribute();
        java.lang.String str1 = putExtendedAttribute0.Description;
        java.lang.Object obj2 = putExtendedAttribute0.getResponseType();
        java.lang.String str3 = putExtendedAttribute0.DefaultValue;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AppliesToType appliesToType4 = putExtendedAttribute0.AppliesToType;
        java.lang.String str5 = putExtendedAttribute0.Description;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(obj2);
        org.junit.Assert.assertEquals(obj2.toString(), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$ExtendedAttributeDefinition");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj2), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$ExtendedAttributeDefinition");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj2), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$ExtendedAttributeDefinition");
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(appliesToType4);
        org.junit.Assert.assertNull(str5);
    }

    @Test
    public void test24003() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest48.test24003");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Parameter parameter0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Parameter();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Parameter parameter2 = parameter0.setParameterId("hi!");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Parameter parameter4 = parameter2.setMinValue((java.lang.Double) 0.0d);
        java.lang.String str5 = parameter4.DisplayName;
        java.lang.Boolean boolean6 = parameter4.isSystem();
        java.lang.Double double7 = parameter4.MaxValue;
        org.junit.Assert.assertNotNull(parameter2);
        org.junit.Assert.assertNotNull(parameter4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(boolean6);
        org.junit.Assert.assertNull(double7);
    }

    @Test
    public void test24004() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest48.test24004");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DeleteSamplingLocation deleteSamplingLocation0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DeleteSamplingLocation();
        java.lang.String str1 = deleteSamplingLocation0.Id;
        java.lang.String str2 = deleteSamplingLocation0.Id;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DeleteSamplingLocation deleteSamplingLocation4 = deleteSamplingLocation0.setId("multipart/form-data; boundary=****2d077bad-cd27-4736-8ba0-2a8d8a85733d****");
        java.lang.String str5 = deleteSamplingLocation4.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DeleteSamplingLocation deleteSamplingLocation7 = deleteSamplingLocation4.setId("multipart/form-data; boundary=****2917d69a-62fa-41ce-b981-4dbe2deab9f5****");
        java.lang.String str8 = deleteSamplingLocation4.Id;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNotNull(deleteSamplingLocation4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "multipart/form-data; boundary=****2d077bad-cd27-4736-8ba0-2a8d8a85733d****" + "'", str5, "multipart/form-data; boundary=****2d077bad-cd27-4736-8ba0-2a8d8a85733d****");
        org.junit.Assert.assertNotNull(deleteSamplingLocation7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "multipart/form-data; boundary=****2917d69a-62fa-41ce-b981-4dbe2deab9f5****" + "'", str8, "multipart/form-data; boundary=****2917d69a-62fa-41ce-b981-4dbe2deab9f5****");
    }

    @Test
    public void test24005() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest48.test24005");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservationV2 postObservationV2_0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservationV2();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabInstruction labInstruction1 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservationV2 postObservationV2_2 = postObservationV2_0.setLabInstruction(labInstruction1);
        java.lang.String str3 = postObservationV2_2.MediumSubdivision;
        java.lang.String str4 = postObservationV2_2.getComment();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DataClassificationType dataClassificationType5 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DataClassificationType.FIELD_RESULT;
        postObservationV2_2.DataClassification = dataClassificationType5;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails7 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails9 = labResultDetails7.setAnalysisComment("/AQUARIUS/Acquisition/v2");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails11 = labResultDetails7.setPreparationMethod("https");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes12 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails13 = labResultDetails7.setAuditAttributes(auditAttributes12);
        postObservationV2_2.LabResultDetails = labResultDetails13;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultGrade resultGrade15 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultGrade();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultGrade resultGrade17 = resultGrade15.setId("/AQUARIUS/Provisioning/v1");
        postObservationV2_2.ResultGrade = resultGrade17;
        java.lang.String str19 = postObservationV2_2.getCustomId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservationV2 postObservationV2_21 = postObservationV2_2.setCustomId("yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSSSSSZZZZZ");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservationV2 postObservationV2_23 = postObservationV2_2.setComment("9999-12-31T23:59:59.9999999Z");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethodSimple analysisMethodSimple24 = postObservationV2_2.AnalysisMethod;
        org.junit.Assert.assertNotNull(postObservationV2_2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + dataClassificationType5 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DataClassificationType.FIELD_RESULT + "'", dataClassificationType5.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DataClassificationType.FIELD_RESULT));
        org.junit.Assert.assertNotNull(labResultDetails9);
        org.junit.Assert.assertNotNull(labResultDetails11);
        org.junit.Assert.assertNotNull(labResultDetails13);
        org.junit.Assert.assertNotNull(resultGrade17);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertNotNull(postObservationV2_21);
        org.junit.Assert.assertNotNull(postObservationV2_23);
        org.junit.Assert.assertNull(analysisMethodSimple24);
    }

    @Test
    public void test24006() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest48.test24006");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SearchResultUnitGroupWithUnits searchResultUnitGroupWithUnits0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SearchResultUnitGroupWithUnits();
        searchResultUnitGroupWithUnits0.Cursor = "multipart/form-data; boundary=****2917d69a-62fa-41ce-b981-4dbe2deab9f5****";
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UnitGroupWithUnits> unitGroupWithUnitsList3 = searchResultUnitGroupWithUnits0.DomainObjects;
        java.lang.String str4 = searchResultUnitGroupWithUnits0.Cursor;
        java.lang.Integer int5 = searchResultUnitGroupWithUnits0.TotalCount;
        org.junit.Assert.assertNull(unitGroupWithUnitsList3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "multipart/form-data; boundary=****2917d69a-62fa-41ce-b981-4dbe2deab9f5****" + "'", str4, "multipart/form-data; boundary=****2917d69a-62fa-41ce-b981-4dbe2deab9f5****");
        org.junit.Assert.assertNull(int5);
    }

    @Test
    public void test24007() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest48.test24007");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails2 = labResultDetails0.setAnalysisComment("/AQUARIUS/Acquisition/v2");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails4 = labResultDetails0.setPreparationMethod("https");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes5 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails6 = labResultDetails0.setAuditAttributes(auditAttributes5);
        java.lang.String str7 = labResultDetails6.getAnalysisComment();
        java.time.OffsetDateTime offsetDateTime8 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails9 = labResultDetails6.setDatePrepared(offsetDateTime8);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Laboratory laboratory10 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Laboratory();
        laboratory10.Id = "MaxInstant";
        java.lang.String str13 = laboratory10.PhoneNumber;
        laboratory10.Id = "/AQUARIUS/Acquisition/v2://9999-12-31T23:59:59.999Z";
        labResultDetails6.Laboratory = laboratory10;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Laboratory laboratory17 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Laboratory();
        laboratory17.Id = "MaxInstant";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Laboratory laboratory21 = laboratory17.setName("hi!:///AQUARIUS/Provisioning/v1");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Laboratory laboratory23 = laboratory17.setPhoneNumber("");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails24 = labResultDetails6.setLaboratory(laboratory23);
        java.lang.String str25 = labResultDetails24.DilutionFactor;
        org.junit.Assert.assertNotNull(labResultDetails2);
        org.junit.Assert.assertNotNull(labResultDetails4);
        org.junit.Assert.assertNotNull(labResultDetails6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "/AQUARIUS/Acquisition/v2" + "'", str7, "/AQUARIUS/Acquisition/v2");
        org.junit.Assert.assertNotNull(labResultDetails9);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNotNull(laboratory21);
        org.junit.Assert.assertNotNull(laboratory23);
        org.junit.Assert.assertNotNull(labResultDetails24);
        org.junit.Assert.assertNull(str25);
    }

    @Test
    public void test24008() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest48.test24008");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricConfiguration metricConfiguration0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricConfiguration();
        java.lang.String str1 = metricConfiguration0.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty observedProperty2 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty();
        observedProperty2.CasNumber = "MinDuration";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricConfiguration metricConfiguration5 = metricConfiguration0.setObservedProperty(observedProperty2);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AggregationType aggregationType6 = metricConfiguration5.AggregationType;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(metricConfiguration5);
        org.junit.Assert.assertNull(aggregationType6);
    }

    @Test
    public void test24009() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest48.test24009");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.MonitoringMethodWriteBase monitoringMethodWriteBase0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.MonitoringMethodWriteBase();
        java.lang.String str1 = monitoringMethodWriteBase0.Description;
        monitoringMethodWriteBase0.ParameterUniqueId = "/AQUARIUS/Provisioning/v1";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.MonitoringMethodWriteBase monitoringMethodWriteBase5 = monitoringMethodWriteBase0.setDisplayName("hi!:///AQUARIUS/Provisioning/v1");
        monitoringMethodWriteBase0.Description = "multipart/form-data; boundary=****e48381b1-dcc5-4af7-8a12-f30d1690cec2****";
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(monitoringMethodWriteBase5);
    }

    @Test
    public void test24010() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest48.test24010");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutUser putUser0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutUser();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UserProfile userProfile1 = putUser0.getUserProfile();
        java.lang.String str2 = putUser0.Id;
        org.junit.Assert.assertNull(userProfile1);
        org.junit.Assert.assertNull(str2);
    }

    @Test
    public void test24011() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest48.test24011");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ParametersResponse parametersResponse0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ParametersResponse();
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Parameter> parameterList1 = parametersResponse0.Results;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ParametersResponse parametersResponse2 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ParametersResponse();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Parameter[] parameterArray3 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Parameter[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Parameter> parameterList4 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Parameter>();
        boolean boolean5 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Parameter>) parameterList4, parameterArray3);
        parametersResponse2.Results = parameterList4;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ParametersResponse parametersResponse7 = parametersResponse0.setResults(parameterList4);
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Parameter> parameterList8 = parametersResponse0.Results;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ParametersResponse parametersResponse9 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ParametersResponse();
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Parameter> parameterList10 = parametersResponse9.Results;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ParametersResponse parametersResponse11 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ParametersResponse();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Parameter[] parameterArray12 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Parameter[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Parameter> parameterList13 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Parameter>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Parameter>) parameterList13, parameterArray12);
        parametersResponse11.Results = parameterList13;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ParametersResponse parametersResponse16 = parametersResponse9.setResults(parameterList13);
        parametersResponse0.Results = parameterList13;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ParametersResponse parametersResponse18 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ParametersResponse();
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Parameter> parameterList19 = parametersResponse18.Results;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ParametersResponse parametersResponse20 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ParametersResponse();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Parameter[] parameterArray21 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Parameter[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Parameter> parameterList22 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Parameter>();
        boolean boolean23 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Parameter>) parameterList22, parameterArray21);
        parametersResponse20.Results = parameterList22;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ParametersResponse parametersResponse25 = parametersResponse18.setResults(parameterList22);
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Parameter> parameterList26 = parametersResponse18.Results;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ParametersResponse parametersResponse27 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ParametersResponse();
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Parameter> parameterList28 = parametersResponse27.Results;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ParametersResponse parametersResponse29 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ParametersResponse();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Parameter[] parameterArray30 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Parameter[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Parameter> parameterList31 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Parameter>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Parameter>) parameterList31, parameterArray30);
        parametersResponse29.Results = parameterList31;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ParametersResponse parametersResponse34 = parametersResponse27.setResults(parameterList31);
        parametersResponse18.Results = parameterList31;
        parametersResponse0.Results = parameterList31;
        org.junit.Assert.assertNull(parameterList1);
        org.junit.Assert.assertNotNull(parameterArray3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(parametersResponse7);
        org.junit.Assert.assertNotNull(parameterList8);
        org.junit.Assert.assertNull(parameterList10);
        org.junit.Assert.assertNotNull(parameterArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(parametersResponse16);
        org.junit.Assert.assertNull(parameterList19);
        org.junit.Assert.assertNotNull(parameterArray21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(parametersResponse25);
        org.junit.Assert.assertNotNull(parameterList26);
        org.junit.Assert.assertNull(parameterList28);
        org.junit.Assert.assertNotNull(parameterArray30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(parametersResponse34);
    }

    @Test
    public void test24012() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest48.test24012");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationStandard observationStandard0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationStandard();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricConfiguration metricConfiguration1 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricConfiguration();
        java.lang.String str2 = metricConfiguration1.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty observedProperty3 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty();
        observedProperty3.CasNumber = "MinDuration";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricConfiguration metricConfiguration6 = metricConfiguration1.setObservedProperty(observedProperty3);
        java.lang.String str7 = observedProperty3.getDescription();
        observedProperty3.CustomId = "multipart/form-data; boundary=****2917d69a-62fa-41ce-b981-4dbe2deab9f5****";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationStandard observationStandard10 = observationStandard0.setObservedProperty(observedProperty3);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity quantity11 = observationStandard0.ResultLowerLimit;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostUnitGroupWithUnit postUnitGroupWithUnit12 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostUnitGroupWithUnit();
        postUnitGroupWithUnit12.Id = "multipart/form-data; boundary=****f2ce0d54-dac7-4cd0-b74f-1024089261f9****";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation15 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedFieldResult plannedFieldResult16 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation17 = observation15.setPlannedFieldResult(plannedFieldResult16);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabInstruction labInstruction18 = null;
        observation17.LabInstruction = labInstruction18;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationStatistics observationStatistics20 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation21 = observation17.setStatistics(observationStatistics20);
        java.time.OffsetDateTime offsetDateTime22 = observation21.getResultTime();
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple> importHistoryEventSimpleList23 = observation21.ImportHistoryEventSimples;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty observedProperty24 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation25 = observation21.setObservedProperty(observedProperty24);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultGrade resultGrade26 = observation25.ResultGrade;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails27 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails29 = labResultDetails27.setAnalysisComment("/AQUARIUS/Acquisition/v2");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes30 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails31 = labResultDetails29.setAuditAttributes(auditAttributes30);
        observation25.AuditAttributes = auditAttributes30;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostUnitGroupWithUnit postUnitGroupWithUnit33 = postUnitGroupWithUnit12.setAuditAttributes(auditAttributes30);
        java.lang.String str34 = postUnitGroupWithUnit33.Id;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostUnitGroupWithUnit postUnitGroupWithUnit36 = postUnitGroupWithUnit33.setSupportsConversion((java.lang.Boolean) true);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes37 = postUnitGroupWithUnit33.getAuditAttributes();
        observationStandard0.AuditAttributes = auditAttributes37;
        java.lang.String str39 = observationStandard0.getRuleText();
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNotNull(metricConfiguration6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(observationStandard10);
        org.junit.Assert.assertNull(quantity11);
        org.junit.Assert.assertNotNull(observation17);
        org.junit.Assert.assertNotNull(observation21);
        org.junit.Assert.assertNull(offsetDateTime22);
        org.junit.Assert.assertNull(importHistoryEventSimpleList23);
        org.junit.Assert.assertNotNull(observation25);
        org.junit.Assert.assertNull(resultGrade26);
        org.junit.Assert.assertNotNull(labResultDetails29);
        org.junit.Assert.assertNotNull(labResultDetails31);
        org.junit.Assert.assertNotNull(postUnitGroupWithUnit33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "multipart/form-data; boundary=****f2ce0d54-dac7-4cd0-b74f-1024089261f9****" + "'", str34, "multipart/form-data; boundary=****f2ce0d54-dac7-4cd0-b74f-1024089261f9****");
        org.junit.Assert.assertNotNull(postUnitGroupWithUnit36);
        org.junit.Assert.assertNotNull(auditAttributes37);
        org.junit.Assert.assertNull(str39);
    }

    @Test
    public void test24013() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest48.test24013");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitDescriptionListServiceRequest fieldVisitDescriptionListServiceRequest0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitDescriptionListServiceRequest();
        java.time.Instant instant1 = com.aquaticinformatics.aquarius.sdk.samples.serializers.InstantDeserializer.MaxValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitDescriptionListServiceRequest fieldVisitDescriptionListServiceRequest2 = fieldVisitDescriptionListServiceRequest0.setQueryTo(instant1);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitDescriptionListServiceRequest fieldVisitDescriptionListServiceRequest4 = fieldVisitDescriptionListServiceRequest2.setLocationIdentifier("2021.4.62.0");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitDescriptionListServiceRequest fieldVisitDescriptionListServiceRequest6 = fieldVisitDescriptionListServiceRequest2.setLocationIdentifier("multipart/form-data; boundary=****231224c4-98ce-4e30-bd65-1d25287c4abe****");
        fieldVisitDescriptionListServiceRequest6.LocationIdentifier = "yyyy'-'MM'-'dd'T'HH':'mm':'ss";
        org.junit.Assert.assertNotNull(instant1);
        org.junit.Assert.assertNotNull(fieldVisitDescriptionListServiceRequest2);
        org.junit.Assert.assertNotNull(fieldVisitDescriptionListServiceRequest4);
        org.junit.Assert.assertNotNull(fieldVisitDescriptionListServiceRequest6);
    }

    @Test
    public void test24014() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest48.test24014");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutActivity putActivity0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutActivity();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity quantity1 = null;
        putActivity0.Depth = quantity1;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricResult[] metricResultArray3 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricResult[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricResult> metricResultList4 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricResult>();
        boolean boolean5 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricResult>) metricResultList4, metricResultArray3);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutActivity putActivity6 = putActivity0.setMetricResults((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricResult>) metricResultList4);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutActivity putActivity8 = putActivity0.setLoggerFileName("");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Device device9 = putActivity8.getDevice();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity postActivity10 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity();
        postActivity10.LoggerFileName = "hi!";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity plannedActivity13 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity postActivity14 = postActivity10.setPlannedActivity(plannedActivity13);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ActivityType activityType15 = postActivity10.Type;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFieldVisitActivityWithTemplate postFieldVisitActivityWithTemplate16 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFieldVisitActivityWithTemplate();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate17 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate();
        specimenTemplate17.CustomId = "hi!";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate20 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate21 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate();
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabInstructionTemplate> labInstructionTemplateList22 = specimenTemplate21.getLabInstructionTemplates();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate23 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate25 = specimenTemplate23.setCustomId("hi!");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate26 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate27 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate();
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabInstructionTemplate> labInstructionTemplateList28 = specimenTemplate27.LabInstructionTemplates;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate[] specimenTemplateArray29 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate[] { specimenTemplate17, specimenTemplate20, specimenTemplate21, specimenTemplate25, specimenTemplate26, specimenTemplate27 };
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate> specimenTemplateList30 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate>();
        boolean boolean31 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate>) specimenTemplateList30, specimenTemplateArray29);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFieldVisitActivityWithTemplate postFieldVisitActivityWithTemplate32 = postFieldVisitActivityWithTemplate16.setSpecimenTemplates((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate>) specimenTemplateList30);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.CollectionMethod collectionMethod33 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.CollectionMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFieldVisitActivityWithTemplate postFieldVisitActivityWithTemplate34 = postFieldVisitActivityWithTemplate32.setCollectionMethod(collectionMethod33);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity postActivity35 = postActivity10.setCollectionMethod(collectionMethod33);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Medium medium36 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Medium();
        postActivity10.Medium = medium36;
        putActivity8.Medium = medium36;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostExtendedAttribute postExtendedAttribute39 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostExtendedAttribute();
        java.lang.String str40 = postExtendedAttribute39.CustomId;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DataType dataType41 = postExtendedAttribute39.DataType;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivity samplingPlanPlannedActivity42 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivity();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes43 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivity samplingPlanPlannedActivity44 = samplingPlanPlannedActivity42.setAuditAttributes(auditAttributes43);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes45 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes47 = auditAttributes45.setCreationUserProfileId("'.'SSSSSSS");
        samplingPlanPlannedActivity44.AuditAttributes = auditAttributes45;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes49 = samplingPlanPlannedActivity44.AuditAttributes;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostExtendedAttribute postExtendedAttribute50 = postExtendedAttribute39.setAuditAttributes(auditAttributes49);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Medium medium51 = medium36.setAuditAttributes(auditAttributes49);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity postActivity52 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity();
        postActivity52.LoggerFileName = "hi!";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity plannedActivity55 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity postActivity56 = postActivity52.setPlannedActivity(plannedActivity55);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ActivityType activityType57 = postActivity52.Type;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFieldVisitActivityWithTemplate postFieldVisitActivityWithTemplate58 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFieldVisitActivityWithTemplate();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate59 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate();
        specimenTemplate59.CustomId = "hi!";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate62 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate63 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate();
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabInstructionTemplate> labInstructionTemplateList64 = specimenTemplate63.getLabInstructionTemplates();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate65 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate67 = specimenTemplate65.setCustomId("hi!");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate68 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate69 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate();
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabInstructionTemplate> labInstructionTemplateList70 = specimenTemplate69.LabInstructionTemplates;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate[] specimenTemplateArray71 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate[] { specimenTemplate59, specimenTemplate62, specimenTemplate63, specimenTemplate67, specimenTemplate68, specimenTemplate69 };
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate> specimenTemplateList72 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate>();
        boolean boolean73 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate>) specimenTemplateList72, specimenTemplateArray71);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFieldVisitActivityWithTemplate postFieldVisitActivityWithTemplate74 = postFieldVisitActivityWithTemplate58.setSpecimenTemplates((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate>) specimenTemplateList72);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.CollectionMethod collectionMethod75 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.CollectionMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFieldVisitActivityWithTemplate postFieldVisitActivityWithTemplate76 = postFieldVisitActivityWithTemplate74.setCollectionMethod(collectionMethod75);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity postActivity77 = postActivity52.setCollectionMethod(collectionMethod75);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Medium medium78 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Medium();
        postActivity52.Medium = medium78;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MediumSystemCodeType mediumSystemCodeType80 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MediumSystemCodeType.WASTE_WATER;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Medium medium81 = medium78.setSystemCode(mediumSystemCodeType80);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Medium medium83 = medium78.setId("multipart/form-data; boundary=****7eff1774-b6b0-471a-961c-156c64359366****");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MediumSystemCodeType mediumSystemCodeType84 = medium78.SystemCode;
        medium36.SystemCode = mediumSystemCodeType84;
        org.junit.Assert.assertNotNull(metricResultArray3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(putActivity6);
        org.junit.Assert.assertNotNull(putActivity8);
        org.junit.Assert.assertNull(device9);
        org.junit.Assert.assertNotNull(postActivity14);
        org.junit.Assert.assertNull(activityType15);
        org.junit.Assert.assertNull(labInstructionTemplateList22);
        org.junit.Assert.assertNotNull(specimenTemplate25);
        org.junit.Assert.assertNull(labInstructionTemplateList28);
        org.junit.Assert.assertNotNull(specimenTemplateArray29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(postFieldVisitActivityWithTemplate32);
        org.junit.Assert.assertNotNull(postFieldVisitActivityWithTemplate34);
        org.junit.Assert.assertNotNull(postActivity35);
        org.junit.Assert.assertNull(str40);
        org.junit.Assert.assertNull(dataType41);
        org.junit.Assert.assertNotNull(samplingPlanPlannedActivity44);
        org.junit.Assert.assertNotNull(auditAttributes47);
        org.junit.Assert.assertNotNull(auditAttributes49);
        org.junit.Assert.assertNotNull(postExtendedAttribute50);
        org.junit.Assert.assertNotNull(medium51);
        org.junit.Assert.assertNotNull(postActivity56);
        org.junit.Assert.assertNull(activityType57);
        org.junit.Assert.assertNull(labInstructionTemplateList64);
        org.junit.Assert.assertNotNull(specimenTemplate67);
        org.junit.Assert.assertNull(labInstructionTemplateList70);
        org.junit.Assert.assertNotNull(specimenTemplateArray71);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertNotNull(postFieldVisitActivityWithTemplate74);
        org.junit.Assert.assertNotNull(postFieldVisitActivityWithTemplate76);
        org.junit.Assert.assertNotNull(postActivity77);
        org.junit.Assert.assertTrue("'" + mediumSystemCodeType80 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MediumSystemCodeType.WASTE_WATER + "'", mediumSystemCodeType80.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MediumSystemCodeType.WASTE_WATER));
        org.junit.Assert.assertNotNull(medium81);
        org.junit.Assert.assertNotNull(medium83);
        org.junit.Assert.assertTrue("'" + mediumSystemCodeType84 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MediumSystemCodeType.WASTE_WATER + "'", mediumSystemCodeType84.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MediumSystemCodeType.WASTE_WATER));
    }

    @Test
    public void test24015() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest48.test24015");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributesFull auditAttributesFull0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributesFull();
        java.lang.String str1 = auditAttributesFull0.getModificationUserProfileId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UserProfile userProfile2 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributesFull auditAttributesFull3 = auditAttributesFull0.setCreationUserProfile(userProfile2);
        java.time.OffsetDateTime offsetDateTime4 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributesFull auditAttributesFull5 = auditAttributesFull0.setModificationTime(offsetDateTime4);
        java.time.OffsetDateTime offsetDateTime6 = auditAttributesFull0.ModificationTime;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(auditAttributesFull3);
        org.junit.Assert.assertNotNull(auditAttributesFull5);
        org.junit.Assert.assertNull(offsetDateTime6);
    }

    @Test
    public void test24016() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest48.test24016");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Device device1 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Device();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Device device3 = device1.setType("/AQUARIUS/Acquisition/v2");
        device3.Description = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSSSSSZZZZZ";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation6 = observation0.setDevice(device3);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationMinimal observationMinimal7 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationMinimal();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenNestedInActivity specimenNestedInActivity8 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationMinimal observationMinimal9 = observationMinimal7.setSpecimen(specimenNestedInActivity8);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty observedProperty10 = observationMinimal9.ObservedProperty;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.CategoricalResult categoricalResult11 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.CategoricalResult();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.CategoricalValue categoricalValue12 = categoricalResult11.getFixedValue();
        observationMinimal9.CategoricalResult = categoricalResult11;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.CategoricalResult categoricalResult14 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.CategoricalResult();
        categoricalResult14.Value = "'.'SSSSSSS";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.CategoricalValue categoricalValue17 = categoricalResult14.FixedValue;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.NullMeasureQualifier nullMeasureQualifier18 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.NullMeasureQualifier();
        categoricalResult14.NullMeasureQualifier = nullMeasureQualifier18;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.CategoricalResult categoricalResult20 = categoricalResult11.setNullMeasureQualifier(nullMeasureQualifier18);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation21 = observation0.setNullMeasureQualifier(nullMeasureQualifier18);
        java.lang.String str22 = nullMeasureQualifier18.getCustomId();
        org.junit.Assert.assertNotNull(device3);
        org.junit.Assert.assertNotNull(observation6);
        org.junit.Assert.assertNotNull(observationMinimal9);
        org.junit.Assert.assertNull(observedProperty10);
        org.junit.Assert.assertNull(categoricalValue12);
        org.junit.Assert.assertNull(categoricalValue17);
        org.junit.Assert.assertNotNull(categoricalResult20);
        org.junit.Assert.assertNotNull(observation21);
        org.junit.Assert.assertNull(str22);
    }

    @Test
    public void test24017() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest48.test24017");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingCurve ratingCurve0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingCurve();
        java.lang.String str1 = ratingCurve0.Equation;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ExpandedRatingCurve expandedRatingCurve2 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ExpandedRatingCurve();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingCurveType ratingCurveType3 = expandedRatingCurve2.Type;
        expandedRatingCurve2.IsBlended = false;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ParameterWithUnit parameterWithUnit6 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ParameterWithUnit();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ExpandedRatingCurve expandedRatingCurve7 = expandedRatingCurve2.setOutputParameter(parameterWithUnit6);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingCurve ratingCurve8 = ratingCurve0.setInputParameter(parameterWithUnit6);
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.OffsetPoint> offsetPointList9 = ratingCurve0.getOffsets();
        ratingCurve0.Id = "https";
        java.lang.String str12 = ratingCurve0.Remarks;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingCurve ratingCurve14 = ratingCurve0.setEquation("/AQUARIUS/Acquisition/v2");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ParameterWithUnit parameterWithUnit15 = ratingCurve14.getInputParameter();
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingPoint> ratingPointList16 = ratingCurve14.getBaseRatingTable();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingCurveType ratingCurveType17 = ratingCurve14.Type;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ExpandedRatingCurve expandedRatingCurve18 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ExpandedRatingCurve();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ParameterWithUnit parameterWithUnit19 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ParameterWithUnit();
        expandedRatingCurve18.OutputParameter = parameterWithUnit19;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingCurve ratingCurve21 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingCurve();
        java.lang.String str22 = ratingCurve21.getRemarks();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ExpandedRatingCurve expandedRatingCurve23 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ExpandedRatingCurve();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingCurveType ratingCurveType24 = expandedRatingCurve23.Type;
        expandedRatingCurve23.IsBlended = false;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingShift ratingShift27 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingShift();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PeriodOfApplicability periodOfApplicability28 = null;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingShift ratingShift29 = ratingShift27.setPeriodOfApplicability(periodOfApplicability28);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PeriodOfApplicability periodOfApplicability30 = ratingShift27.getPeriodOfApplicability();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingShift ratingShift31 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingShift();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PeriodOfApplicability periodOfApplicability32 = null;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingShift ratingShift33 = ratingShift31.setPeriodOfApplicability(periodOfApplicability32);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PeriodOfApplicability periodOfApplicability34 = ratingShift31.getPeriodOfApplicability();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingShift ratingShift35 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingShift();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PeriodOfApplicability periodOfApplicability36 = null;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingShift ratingShift37 = ratingShift35.setPeriodOfApplicability(periodOfApplicability36);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingShift ratingShift38 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingShift();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PeriodOfApplicability periodOfApplicability39 = null;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingShift ratingShift40 = ratingShift38.setPeriodOfApplicability(periodOfApplicability39);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PeriodOfApplicability periodOfApplicability41 = ratingShift38.getPeriodOfApplicability();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingShift ratingShift42 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingShift();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PeriodOfApplicability periodOfApplicability43 = null;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingShift ratingShift44 = ratingShift42.setPeriodOfApplicability(periodOfApplicability43);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingShiftPoint ratingShiftPoint45 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingShiftPoint();
        java.lang.Double double46 = ratingShiftPoint45.getInputValue();
        java.lang.Double double47 = ratingShiftPoint45.InputValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingShiftPoint ratingShiftPoint48 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingShiftPoint();
        java.lang.Double double49 = ratingShiftPoint48.getInputValue();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingShiftPoint ratingShiftPoint50 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingShiftPoint();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingShiftPoint ratingShiftPoint52 = ratingShiftPoint50.setInputValue((java.lang.Double) 0.0d);
        ratingShiftPoint50.Shift = 10.0d;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingShiftPoint ratingShiftPoint55 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingShiftPoint();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingShiftPoint ratingShiftPoint57 = ratingShiftPoint55.setInputValue((java.lang.Double) 0.0d);
        ratingShiftPoint55.Shift = 10.0d;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingShiftPoint ratingShiftPoint60 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingShiftPoint();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingShiftPoint[] ratingShiftPointArray61 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingShiftPoint[] { ratingShiftPoint45, ratingShiftPoint48, ratingShiftPoint50, ratingShiftPoint55, ratingShiftPoint60 };
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingShiftPoint> ratingShiftPointList62 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingShiftPoint>();
        boolean boolean63 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingShiftPoint>) ratingShiftPointList62, ratingShiftPointArray61);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingShift ratingShift64 = ratingShift42.setShiftPoints(ratingShiftPointList62);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingShift ratingShift65 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingShift();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PeriodOfApplicability periodOfApplicability66 = null;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingShift ratingShift67 = ratingShift65.setPeriodOfApplicability(periodOfApplicability66);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingShift ratingShift68 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingShift();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PeriodOfApplicability periodOfApplicability69 = null;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingShift ratingShift70 = ratingShift68.setPeriodOfApplicability(periodOfApplicability69);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PeriodOfApplicability periodOfApplicability71 = ratingShift68.getPeriodOfApplicability();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingShift ratingShift72 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingShift();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PeriodOfApplicability periodOfApplicability73 = null;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingShift ratingShift74 = ratingShift72.setPeriodOfApplicability(periodOfApplicability73);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingShift[] ratingShiftArray75 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingShift[] { ratingShift27, ratingShift31, ratingShift35, ratingShift38, ratingShift42, ratingShift65, ratingShift68, ratingShift74 };
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingShift> ratingShiftList76 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingShift>();
        boolean boolean77 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingShift>) ratingShiftList76, ratingShiftArray75);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ExpandedRatingCurve expandedRatingCurve78 = expandedRatingCurve23.setShifts(ratingShiftList76);
        ratingCurve21.Shifts = ratingShiftList76;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ExpandedRatingCurve expandedRatingCurve80 = expandedRatingCurve18.setShifts(ratingShiftList76);
        ratingCurve14.Shifts = ratingShiftList76;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(ratingCurveType3);
        org.junit.Assert.assertNotNull(expandedRatingCurve7);
        org.junit.Assert.assertNotNull(ratingCurve8);
        org.junit.Assert.assertNull(offsetPointList9);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(ratingCurve14);
        org.junit.Assert.assertNotNull(parameterWithUnit15);
        org.junit.Assert.assertNull(ratingPointList16);
        org.junit.Assert.assertNull(ratingCurveType17);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertNull(ratingCurveType24);
        org.junit.Assert.assertNotNull(ratingShift29);
        org.junit.Assert.assertNull(periodOfApplicability30);
        org.junit.Assert.assertNotNull(ratingShift33);
        org.junit.Assert.assertNull(periodOfApplicability34);
        org.junit.Assert.assertNotNull(ratingShift37);
        org.junit.Assert.assertNotNull(ratingShift40);
        org.junit.Assert.assertNull(periodOfApplicability41);
        org.junit.Assert.assertNotNull(ratingShift44);
        org.junit.Assert.assertNull(double46);
        org.junit.Assert.assertNull(double47);
        org.junit.Assert.assertNull(double49);
        org.junit.Assert.assertNotNull(ratingShiftPoint52);
        org.junit.Assert.assertNotNull(ratingShiftPoint57);
        org.junit.Assert.assertNotNull(ratingShiftPointArray61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNotNull(ratingShift64);
        org.junit.Assert.assertNotNull(ratingShift67);
        org.junit.Assert.assertNotNull(ratingShift70);
        org.junit.Assert.assertNull(periodOfApplicability71);
        org.junit.Assert.assertNotNull(ratingShift74);
        org.junit.Assert.assertNotNull(ratingShiftArray75);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertNotNull(expandedRatingCurve78);
        org.junit.Assert.assertNotNull(expandedRatingCurve80);
    }

    @Test
    public void test24018() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest48.test24018");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetSamplingLocations getSamplingLocations0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetSamplingLocations();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ReportListServiceRequest reportListServiceRequest1 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ReportListServiceRequest();
        reportListServiceRequest1.ReportTitle = "MinDuration";
        reportListServiceRequest1.LocationUniqueId = "/AQUARIUS";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportSpecimens getExportSpecimens6 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportSpecimens();
        java.util.List<java.lang.String> strList7 = getExportSpecimens6.getActivityTypes();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Qualifier qualifier8 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Qualifier();
        java.time.Instant instant9 = qualifier8.DateApplied;
        java.lang.String str10 = qualifier8.User;
        java.lang.String str11 = qualifier8.getIdentifier();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest12 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest();
        java.lang.Object obj13 = timeAlignedDataServiceRequest12.getResponseType();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse14 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant15 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse16 = locationDescriptionListServiceResponse14.setNextToken(instant15);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest17 = timeAlignedDataServiceRequest12.setQueryFrom(instant15);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Qualifier qualifier18 = qualifier8.setDateApplied(instant15);
        getExportSpecimens6.Before = instant15;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationRemark locationRemark20 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationRemark();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationRemark locationRemark22 = locationRemark20.setDescription("MaxInstant");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitDataServiceResponse fieldVisitDataServiceResponse23 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitDataServiceResponse();
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CrossSectionSurveyActivity> crossSectionSurveyActivityList24 = fieldVisitDataServiceResponse23.CrossSectionSurveyActivity;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitDataServiceResponse fieldVisitDataServiceResponse26 = fieldVisitDataServiceResponse23.setIdentifier("");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary27 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        dischargeSummary27.Reviewer = "";
        java.time.Instant instant30 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        dischargeSummary27.MeasurementTime = instant30;
        fieldVisitDataServiceResponse23.ResponseTime = instant30;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationRemark locationRemark33 = locationRemark20.setCreateTime(instant30);
        getExportSpecimens6.EndModificationTime = instant30;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ReportListServiceRequest reportListServiceRequest35 = reportListServiceRequest1.setCreatedFrom(instant30);
        getSamplingLocations0.StartModificationTime = instant30;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_37 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray40 = new java.lang.String[] { "", "" };
        java.util.ArrayList<java.lang.String> strList41 = new java.util.ArrayList<java.lang.String>();
        boolean boolean42 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList41, strArray40);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_43 = getObservationsV2_37.setDataClassifications((java.util.List<java.lang.String>) strList41);
        getObservationsV2_43.DepthUnitCustomId = "hi!";
        java.lang.String str46 = getObservationsV2_43.CustomId;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_47 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray49 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList50 = new java.util.ArrayList<java.lang.String>();
        boolean boolean51 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList50, strArray49);
        getObservationsV2_47.SpecimenIds = strList50;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags53 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray57 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList58 = new java.util.ArrayList<java.lang.String>();
        boolean boolean59 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList58, strArray57);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags60 = putLocationTags53.setTagUniqueIds(strList58);
        getObservationsV2_47.QualityControlTypes = strList58;
        java.util.List<java.lang.String> strList62 = getObservationsV2_47.getAnalyticalGroupIds();
        java.util.List<java.lang.String> strList63 = getObservationsV2_47.DataClassifications;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.FieldResultType fieldResultType64 = getObservationsV2_47.FieldResultType;
        java.time.Instant instant65 = getObservationsV2_47.getEndObservedTime();
        java.lang.String str66 = getObservationsV2_47.DepthUnitCustomId;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags67 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray71 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList72 = new java.util.ArrayList<java.lang.String>();
        boolean boolean73 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList72, strArray71);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags74 = putLocationTags67.setTagUniqueIds(strList72);
        java.util.ArrayList<java.lang.String> strList75 = putLocationTags74.TagUniqueIds;
        getObservationsV2_47.ProjectIds = strList75;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_77 = getObservationsV2_43.setQualityControlTypes((java.util.List<java.lang.String>) strList75);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetSamplingLocations getSamplingLocations78 = getSamplingLocations0.setLocationTypeIds((java.util.List<java.lang.String>) strList75);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetSamplingLocations getSamplingLocations80 = getSamplingLocations0.setCustomId("");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetSamplingLocations getSamplingLocations82 = getSamplingLocations80.setLimit((java.lang.Integer) 1);
        java.lang.String str83 = getSamplingLocations82.CustomId;
        org.junit.Assert.assertNull(strList7);
        org.junit.Assert.assertNull(instant9);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNotNull(obj13);
        org.junit.Assert.assertEquals(obj13.toString(), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj13), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj13), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertNotNull(instant15);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse16);
        org.junit.Assert.assertNotNull(timeAlignedDataServiceRequest17);
        org.junit.Assert.assertNotNull(qualifier18);
        org.junit.Assert.assertNotNull(locationRemark22);
        org.junit.Assert.assertNull(crossSectionSurveyActivityList24);
        org.junit.Assert.assertNotNull(fieldVisitDataServiceResponse26);
        org.junit.Assert.assertNotNull(instant30);
        org.junit.Assert.assertNotNull(locationRemark33);
        org.junit.Assert.assertNotNull(reportListServiceRequest35);
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(getObservationsV2_43);
        org.junit.Assert.assertNull(str46);
        org.junit.Assert.assertNotNull(strArray49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNotNull(strArray57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(putLocationTags60);
        org.junit.Assert.assertNull(strList62);
        org.junit.Assert.assertNull(strList63);
        org.junit.Assert.assertNull(fieldResultType64);
        org.junit.Assert.assertNull(instant65);
        org.junit.Assert.assertNull(str66);
        org.junit.Assert.assertNotNull(strArray71);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertNotNull(putLocationTags74);
        org.junit.Assert.assertNotNull(strList75);
        org.junit.Assert.assertNotNull(getObservationsV2_77);
        org.junit.Assert.assertNotNull(getSamplingLocations78);
        org.junit.Assert.assertNotNull(getSamplingLocations80);
        org.junit.Assert.assertNotNull(getSamplingLocations82);
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "" + "'", str83, "");
    }

    @Test
    public void test24019() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest48.test24019");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.OtherMethodDischargeActivity otherMethodDischargeActivity0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.OtherMethodDischargeActivity();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeChannelMeasurement dischargeChannelMeasurement1 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeChannelMeasurement();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ChannelMaterialType channelMaterialType2 = dischargeChannelMeasurement1.getChannelMaterial();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay3 = dischargeChannelMeasurement1.Discharge;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.HorizontalFlowType horizontalFlowType4 = dischargeChannelMeasurement1.getHorizontalFlow();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeChannelMeasurement dischargeChannelMeasurement6 = dischargeChannelMeasurement1.setParty("yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSSSSSZZZZZ");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VelocityVariationType velocityVariationType7 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VelocityVariationType.Steady;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeChannelMeasurement dischargeChannelMeasurement8 = dischargeChannelMeasurement6.setVelocityVariation(velocityVariationType7);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ChannelEvennessType channelEvennessType9 = dischargeChannelMeasurement8.ChannelEvenness;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MeterSuspensionType meterSuspensionType10 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MeterSuspensionType.Unknown;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeChannelMeasurement dischargeChannelMeasurement11 = dischargeChannelMeasurement8.setMeterSuspension(meterSuspensionType10);
        otherMethodDischargeActivity0.DischargeChannelMeasurement = dischargeChannelMeasurement11;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.LocationDatumPeriod locationDatumPeriod13 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.LocationDatumPeriod();
        java.time.Instant instant14 = locationDatumPeriod13.AppliedTimeUtc;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.LocationDatumPeriod locationDatumPeriod16 = locationDatumPeriod13.setAppliedByUser("/AQUARIUS/Acquisition/v2://9999-12-31T23:59:59.999Z");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesThresholdPeriod timeSeriesThresholdPeriod17 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesThresholdPeriod();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesThresholdPeriod timeSeriesThresholdPeriod19 = timeSeriesThresholdPeriod17.setReferenceValue((java.lang.Double) 0.0d);
        java.time.Instant instant20 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MinValue;
        timeSeriesThresholdPeriod17.AppliedTime = instant20;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeTransactionListServiceRequest metadataChangeTransactionListServiceRequest22 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeTransactionListServiceRequest();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostRecurringReport postRecurringReport23 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostRecurringReport();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary24 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        dischargeSummary24.Reviewer = "";
        java.time.Instant instant27 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        dischargeSummary24.MeasurementTime = instant27;
        postRecurringReport23.NextGenerationDate = instant27;
        java.time.Instant instant30 = postRecurringReport23.getNextGenerationDate();
        java.lang.String str31 = com.aquaticinformatics.aquarius.sdk.samples.serializers.InstantSerializer.format(instant30);
        metadataChangeTransactionListServiceRequest22.QueryFrom = instant30;
        timeSeriesThresholdPeriod17.AppliedTime = instant30;
        locationDatumPeriod16.AppliedTimeUtc = instant30;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeChannelMeasurement dischargeChannelMeasurement35 = dischargeChannelMeasurement11.setEndTime(instant30);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CurrentMeterType currentMeterType36 = dischargeChannelMeasurement35.getCurrentMeter();
        org.junit.Assert.assertNull(channelMaterialType2);
        org.junit.Assert.assertNull(quantityWithDisplay3);
        org.junit.Assert.assertNull(horizontalFlowType4);
        org.junit.Assert.assertNotNull(dischargeChannelMeasurement6);
        org.junit.Assert.assertTrue("'" + velocityVariationType7 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VelocityVariationType.Steady + "'", velocityVariationType7.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VelocityVariationType.Steady));
        org.junit.Assert.assertNotNull(dischargeChannelMeasurement8);
        org.junit.Assert.assertNull(channelEvennessType9);
        org.junit.Assert.assertTrue("'" + meterSuspensionType10 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MeterSuspensionType.Unknown + "'", meterSuspensionType10.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MeterSuspensionType.Unknown));
        org.junit.Assert.assertNotNull(dischargeChannelMeasurement11);
        org.junit.Assert.assertNull(instant14);
        org.junit.Assert.assertNotNull(locationDatumPeriod16);
        org.junit.Assert.assertNotNull(timeSeriesThresholdPeriod19);
        org.junit.Assert.assertNotNull(instant20);
        org.junit.Assert.assertNotNull(instant27);
        org.junit.Assert.assertNotNull(instant30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "9999-12-31T23:59:59.999Z" + "'", str31, "9999-12-31T23:59:59.999Z");
        org.junit.Assert.assertNotNull(dischargeChannelMeasurement35);
        org.junit.Assert.assertNull(currentMeterType36);
    }

    @Test
    public void test24020() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest48.test24020");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardDefinition standardDefinition0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardDefinition();
        java.lang.String str1 = standardDefinition0.getDescription();
        com.aquaticinformatics.aquarius.sdk.samples.Interval interval2 = standardDefinition0.getApplicabilityRange();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardDefinition standardDefinition4 = standardDefinition0.setIssuingOrganization("https");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes5 = standardDefinition0.AuditAttributes;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(interval2);
        org.junit.Assert.assertNotNull(standardDefinition4);
        org.junit.Assert.assertNull(auditAttributes5);
    }

    @Test
    public void test24021() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest48.test24021");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails();
        java.lang.String str1 = labResultDetails0.DilutionFactor;
        labResultDetails0.PreparationMethod = "/AQUARIUS/Acquisition/v2";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes4 = null;
        labResultDetails0.AuditAttributes = auditAttributes4;
        org.junit.Assert.assertNull(str1);
    }

    @Test
    public void test24022() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest48.test24022");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedPoint timeAlignedPoint0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedPoint();
        timeAlignedPoint0.Method9 = "multipart/form-data; boundary=****7eff1774-b6b0-471a-961c-156c64359366****";
        timeAlignedPoint0.DisplayValue9 = "";
        java.lang.String str5 = timeAlignedPoint0.getApprovalName4();
        java.lang.Long long6 = timeAlignedPoint0.getGradeCode3();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedPoint timeAlignedPoint8 = timeAlignedPoint0.setGradeCode2((java.lang.Long) 1L);
        java.lang.Long long9 = timeAlignedPoint8.ApprovalLevel6;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedPoint timeAlignedPoint11 = timeAlignedPoint8.setApprovalName1("http://MaxDurationhttp/json/reply/ArrayList");
        timeAlignedPoint8.GradeCode1 = 1L;
        timeAlignedPoint8.GradeName8 = "POST";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedPoint timeAlignedPoint17 = timeAlignedPoint8.setGradeCode1((java.lang.Long) 0L);
        java.lang.String str18 = timeAlignedPoint8.GradeName5;
        java.lang.String str19 = timeAlignedPoint8.ApprovalName9;
        timeAlignedPoint8.GradeCode3 = 0L;
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(long6);
        org.junit.Assert.assertNotNull(timeAlignedPoint8);
        org.junit.Assert.assertNull(long9);
        org.junit.Assert.assertNotNull(timeAlignedPoint11);
        org.junit.Assert.assertNotNull(timeAlignedPoint17);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNull(str19);
    }

    @Test
    public void test24023() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest48.test24023");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.OpenWaterData openWaterData0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.OpenWaterData();
        java.lang.Double double1 = openWaterData0.getDryLineCorrection();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary2 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        dischargeSummary2.Reviewer = "";
        java.time.Instant instant5 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        dischargeSummary2.MeasurementTime = instant5;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.BaseFlowType baseFlowType7 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.BaseFlowType.BaseFlow;
        dischargeSummary2.BaseFlow = baseFlowType7;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.BaseFlowType baseFlowType9 = dischargeSummary2.BaseFlow;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingModelDescriptionListServiceResponse ratingModelDescriptionListServiceResponse10 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingModelDescriptionListServiceResponse();
        java.util.List<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingModelDescription> ratingModelDescriptionList11 = ratingModelDescriptionListServiceResponse10.RatingModelDescriptions;
        java.time.Instant instant12 = ratingModelDescriptionListServiceResponse10.getNextToken();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CalibrationCheck calibrationCheck13 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CalibrationCheck();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CalibrationCheckType calibrationCheckType14 = calibrationCheck13.getCalibrationCheckType();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay15 = calibrationCheck13.Value;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse16 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary17 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary19 = dischargeSummary17.setPublish((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse20 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant21 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse22 = locationDescriptionListServiceResponse20.setNextToken(instant21);
        dischargeSummary17.MeasurementTime = instant21;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse24 = locationDescriptionListServiceResponse16.setNextToken(instant21);
        java.time.Instant instant25 = locationDescriptionListServiceResponse16.getNextToken();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CalibrationCheck calibrationCheck26 = calibrationCheck13.setTime(instant25);
        java.time.Instant instant27 = calibrationCheck26.Time;
        ratingModelDescriptionListServiceResponse10.NextToken = instant27;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary29 = dischargeSummary2.setMeasurementEndTime(instant27);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay30 = dischargeSummary29.MeanGageHeight;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary32 = dischargeSummary29.setGageHeightComments("http");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CrossSectionSurveyActivity crossSectionSurveyActivity33 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CrossSectionSurveyActivity();
        java.lang.String str34 = crossSectionSurveyActivity33.Channel;
        java.lang.String str35 = crossSectionSurveyActivity33.Channel;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.AdcpDischargeActivity adcpDischargeActivity36 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.AdcpDischargeActivity();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.AdcpDischargeActivity adcpDischargeActivity38 = adcpDischargeActivity36.setSoftwareVersion("yyyy'-'MM'-'dd'T'HH':'mm':'ss");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay39 = adcpDischargeActivity38.getDischargeCoefficientVariation();
        adcpDischargeActivity38.NodeDetails = "yyyy'-'MM'-'dd'T'HH':'mm':'ss";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary42 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay43 = dischargeSummary42.getMeanGageHeight();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay44 = dischargeSummary42.Discharge;
        java.lang.Integer int45 = dischargeSummary42.getGradeCode();
        java.lang.String str46 = dischargeSummary42.MeasurementId;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DatumConvertedQuantityWithDisplay datumConvertedQuantityWithDisplay47 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DatumConvertedQuantityWithDisplay();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary48 = dischargeSummary42.setAlternateRatingDischarge((com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay) datumConvertedQuantityWithDisplay47);
        adcpDischargeActivity38.Area = datumConvertedQuantityWithDisplay47;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CrossSectionSurveyActivity crossSectionSurveyActivity50 = crossSectionSurveyActivity33.setStage((com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay) datumConvertedQuantityWithDisplay47);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary51 = dischargeSummary32.setGageHeightAdjustmentAmount((com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay) datumConvertedQuantityWithDisplay47);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.OpenWaterData openWaterData52 = openWaterData0.setDistanceToMeter((com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay) datumConvertedQuantityWithDisplay47);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.OpenWaterData openWaterData54 = openWaterData52.setSuspensionWeight("multipart/form-data; boundary=****ee0ec537-fde4-45ee-9c35-68c37cf65c1c****");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.OpenWaterData openWaterData56 = openWaterData54.setDryLineCorrection((java.lang.Double) (-1.0d));
        java.lang.Double double57 = openWaterData56.WetLineCorrection;
        org.junit.Assert.assertNull(double1);
        org.junit.Assert.assertNotNull(instant5);
        org.junit.Assert.assertTrue("'" + baseFlowType7 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.BaseFlowType.BaseFlow + "'", baseFlowType7.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.BaseFlowType.BaseFlow));
        org.junit.Assert.assertTrue("'" + baseFlowType9 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.BaseFlowType.BaseFlow + "'", baseFlowType9.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.BaseFlowType.BaseFlow));
        org.junit.Assert.assertNull(ratingModelDescriptionList11);
        org.junit.Assert.assertNull(instant12);
        org.junit.Assert.assertNull(calibrationCheckType14);
        org.junit.Assert.assertNull(doubleWithDisplay15);
        org.junit.Assert.assertNotNull(dischargeSummary19);
        org.junit.Assert.assertNotNull(instant21);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse22);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse24);
        org.junit.Assert.assertNotNull(instant25);
        org.junit.Assert.assertNotNull(calibrationCheck26);
        org.junit.Assert.assertNotNull(instant27);
        org.junit.Assert.assertNotNull(dischargeSummary29);
        org.junit.Assert.assertNull(quantityWithDisplay30);
        org.junit.Assert.assertNotNull(dischargeSummary32);
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertNotNull(adcpDischargeActivity38);
        org.junit.Assert.assertNull(doubleWithDisplay39);
        org.junit.Assert.assertNull(quantityWithDisplay43);
        org.junit.Assert.assertNull(quantityWithDisplay44);
        org.junit.Assert.assertNull(int45);
        org.junit.Assert.assertNull(str46);
        org.junit.Assert.assertNotNull(dischargeSummary48);
        org.junit.Assert.assertNotNull(crossSectionSurveyActivity50);
        org.junit.Assert.assertNotNull(dischargeSummary51);
        org.junit.Assert.assertNotNull(openWaterData52);
        org.junit.Assert.assertNotNull(openWaterData54);
        org.junit.Assert.assertNotNull(openWaterData56);
        org.junit.Assert.assertNull(double57);
    }

    @Test
    public void test24024() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest48.test24024");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceRequest locationDescriptionListServiceRequest0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceRequest();
        java.lang.String str1 = locationDescriptionListServiceRequest0.LocationName;
        java.util.ArrayList<java.lang.String> strList2 = locationDescriptionListServiceRequest0.getTagKeys();
        java.lang.Boolean boolean3 = locationDescriptionListServiceRequest0.Publish;
        java.util.ArrayList<java.lang.String> strList4 = locationDescriptionListServiceRequest0.TagNames;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceRequest locationDescriptionListServiceRequest6 = locationDescriptionListServiceRequest0.setLocationName("multipart/form-data; boundary=****59879c02-0839-4b96-bc41-a13ebb706be4****");
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(strList2);
        org.junit.Assert.assertNull(boolean3);
        org.junit.Assert.assertNull(strList4);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceRequest6);
    }

    @Test
    public void test24025() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest48.test24025");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray3 = new java.lang.String[] { "", "" };
        java.util.ArrayList<java.lang.String> strList4 = new java.util.ArrayList<java.lang.String>();
        boolean boolean5 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList4, strArray3);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_6 = getObservationsV2_0.setDataClassifications((java.util.List<java.lang.String>) strList4);
        getObservationsV2_6.DepthUnitCustomId = "hi!";
        java.lang.String str9 = getObservationsV2_6.CustomId;
        java.util.List<java.lang.String> strList10 = getObservationsV2_6.getSearch();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_11 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray13 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList14 = new java.util.ArrayList<java.lang.String>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList14, strArray13);
        getObservationsV2_11.SpecimenIds = strList14;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags17 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray21 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList22 = new java.util.ArrayList<java.lang.String>();
        boolean boolean23 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList22, strArray21);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags24 = putLocationTags17.setTagUniqueIds(strList22);
        getObservationsV2_11.QualityControlTypes = strList22;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_26 = getObservationsV2_6.setMedia((java.util.List<java.lang.String>) strList22);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_27 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String str28 = getObservationsV2_27.getCustomId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_29 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray31 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList32 = new java.util.ArrayList<java.lang.String>();
        boolean boolean33 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList32, strArray31);
        getObservationsV2_29.SpecimenIds = strList32;
        getObservationsV2_27.ProjectIds = strList32;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_36 = getObservationsV2_6.setObservedPropertyIds((java.util.List<java.lang.String>) strList32);
        java.util.List<java.lang.String> strList37 = getObservationsV2_36.getMedia();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_39 = getObservationsV2_36.setCursor("multipart/form-data; boundary=****59879c02-0839-4b96-bc41-a13ebb706be4****");
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(getObservationsV2_6);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNull(strList10);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(putLocationTags24);
        org.junit.Assert.assertNotNull(getObservationsV2_26);
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(getObservationsV2_36);
        org.junit.Assert.assertNotNull(strList37);
        org.junit.Assert.assertNotNull(getObservationsV2_39);
    }

    @Test
    public void test24026() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest48.test24026");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportError importError0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportError();
        importError0.ErrorMessage = "";
        importError0.ErrorFieldValue = "multipart/form-data; boundary=****bbcf5f9e-6ccf-4b63-91ab-6e645caf02af****";
        java.lang.String str5 = importError0.ErrorCode;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportError importError7 = importError0.setErrorCode("multipart/form-data; boundary=****bbcf5f9e-6ccf-4b63-91ab-6e645caf02af****");
        importError0.ErrorMessage = "'.'SSSSSSS";
        importError0.ErrorCode = "http";
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(importError7);
    }

    @Test
    public void test24027() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest48.test24027");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.TaxonomicResult taxonomicResult0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.TaxonomicResult();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Taxon taxon1 = taxonomicResult0.Taxon;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes2 = taxonomicResult0.AuditAttributes;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutTag putTag3 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutTag();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlan samplingPlan4 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlan();
        samplingPlan4.SamplingLocationGroupSelectionTypeRandomCount = 0;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationGroupSelectionType samplingLocationGroupSelectionType7 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationGroupSelectionType.ALL;
        samplingPlan4.SamplingLocationGroupSelectionType = samplingLocationGroupSelectionType7;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationGroup samplingLocationGroup9 = samplingPlan4.getSamplingLocationGroup();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes10 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlan samplingPlan11 = samplingPlan4.setAuditAttributes(auditAttributes10);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutTag putTag12 = putTag3.setAuditAttributes(auditAttributes10);
        taxonomicResult0.AuditAttributes = auditAttributes10;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Taxon taxon14 = taxonomicResult0.Taxon;
        java.lang.String str15 = taxonomicResult0.getId();
        org.junit.Assert.assertNull(taxon1);
        org.junit.Assert.assertNull(auditAttributes2);
        org.junit.Assert.assertTrue("'" + samplingLocationGroupSelectionType7 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationGroupSelectionType.ALL + "'", samplingLocationGroupSelectionType7.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationGroupSelectionType.ALL));
        org.junit.Assert.assertNull(samplingLocationGroup9);
        org.junit.Assert.assertNotNull(samplingPlan11);
        org.junit.Assert.assertNotNull(putTag12);
        org.junit.Assert.assertNull(taxon14);
        org.junit.Assert.assertNull(str15);
    }

    @Test
    public void test24028() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest48.test24028");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutFilter putFilter0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutFilter();
        java.time.OffsetDateTime offsetDateTime1 = putFilter0.StartTime;
        putFilter0.Description = "multipart/form-data; boundary=****6b8051d4-caf2-4095-9f11-faa36b95fc28****";
        java.lang.String str4 = putFilter0.getCustomId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutFilter putFilter6 = putFilter0.setCustomId("multipart/form-data; boundary=****6b8051d4-caf2-4095-9f11-faa36b95fc28****");
        java.lang.String str7 = putFilter6.Description;
        org.junit.Assert.assertNull(offsetDateTime1);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNotNull(putFilter6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "multipart/form-data; boundary=****6b8051d4-caf2-4095-9f11-faa36b95fc28****" + "'", str7, "multipart/form-data; boundary=****6b8051d4-caf2-4095-9f11-faa36b95fc28****");
    }

    @Test
    public void test24029() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest48.test24029");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationExportIIV2 getObservationExportIIV2_0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationExportIIV2();
        java.util.List<java.lang.String> strList1 = getObservationExportIIV2_0.getCollectionMethodIds();
        java.util.List<java.lang.String> strList2 = getObservationExportIIV2_0.AnalyticalGroupIds;
        java.lang.Double double3 = getObservationExportIIV2_0.getMaxNumericResultValue();
        java.util.List<java.lang.String> strList4 = getObservationExportIIV2_0.getDataClassifications();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationExportIIV2 getObservationExportIIV2_6 = getObservationExportIIV2_0.setCursor("multipart/form-data; boundary=****1eab67e1-84c8-4b82-aa06-d6c7526551f8****");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationExportIIV2 getObservationExportIIV2_8 = getObservationExportIIV2_6.setLimit((java.lang.Integer) 0);
        org.junit.Assert.assertNull(strList1);
        org.junit.Assert.assertNull(strList2);
        org.junit.Assert.assertNull(double3);
        org.junit.Assert.assertNull(strList4);
        org.junit.Assert.assertNotNull(getObservationExportIIV2_6);
        org.junit.Assert.assertNotNull(getObservationExportIIV2_8);
    }

    @Test
    public void test24030() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest48.test24030");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails2 = labResultDetails0.setAnalysisComment("/AQUARIUS/Acquisition/v2");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes3 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails4 = labResultDetails2.setAuditAttributes(auditAttributes3);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Laboratory laboratory5 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Laboratory();
        laboratory5.Id = "MaxInstant";
        java.lang.String str8 = laboratory5.PhoneNumber;
        java.lang.String str9 = laboratory5.getPointOfContact();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails10 = labResultDetails2.setLaboratory(laboratory5);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Laboratory laboratory11 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Laboratory();
        laboratory11.Id = "MaxInstant";
        java.lang.String str14 = laboratory11.PhoneNumber;
        laboratory11.Id = "/AQUARIUS/Acquisition/v2://9999-12-31T23:59:59.999Z";
        java.lang.String str17 = laboratory11.PointOfContact;
        laboratory11.Name = "";
        labResultDetails10.Laboratory = laboratory11;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabReport labReport21 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabReport();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Laboratory laboratory22 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Laboratory();
        laboratory22.Id = "MaxInstant";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Laboratory laboratory26 = laboratory22.setName("hi!:///AQUARIUS/Provisioning/v1");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabReport labReport27 = labReport21.setLaboratory(laboratory26);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabReport labReport29 = labReport21.setId("/AQUARIUS");
        labResultDetails10.LabReport = labReport21;
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple> importHistoryEventSimpleList31 = labReport21.ImportHistoryEventSimples;
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment> domainObjectAttachmentList32 = labReport21.getAttachments();
        org.junit.Assert.assertNotNull(labResultDetails2);
        org.junit.Assert.assertNotNull(labResultDetails4);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(labResultDetails10);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertNotNull(laboratory26);
        org.junit.Assert.assertNotNull(labReport27);
        org.junit.Assert.assertNotNull(labReport29);
        org.junit.Assert.assertNull(importHistoryEventSimpleList31);
        org.junit.Assert.assertNull(domainObjectAttachmentList32);
    }

    @Test
    public void test24031() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest48.test24031");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LevelSurveyMeasurement levelSurveyMeasurement0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LevelSurveyMeasurement();
        java.lang.String str1 = levelSurveyMeasurement0.ReferencePointUniqueId;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay2 = levelSurveyMeasurement0.MeasuredElevation;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay3 = levelSurveyMeasurement0.getMeasuredElevation();
        java.time.Instant instant4 = levelSurveyMeasurement0.MeasurementTime;
        java.lang.String str5 = levelSurveyMeasurement0.getReferencePointUniqueId();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest6 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest();
        java.lang.Object obj7 = timeAlignedDataServiceRequest6.getResponseType();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse8 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant9 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse10 = locationDescriptionListServiceResponse8.setNextToken(instant9);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest11 = timeAlignedDataServiceRequest6.setQueryFrom(instant9);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LevelSurveyMeasurement levelSurveyMeasurement12 = levelSurveyMeasurement0.setMeasurementTime(instant9);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LevelSurveyMeasurement levelSurveyMeasurement14 = levelSurveyMeasurement0.setComments("");
        levelSurveyMeasurement14.Comments = "-PT87591240H";
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(quantityWithDisplay2);
        org.junit.Assert.assertNull(quantityWithDisplay3);
        org.junit.Assert.assertNull(instant4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(obj7);
        org.junit.Assert.assertEquals(obj7.toString(), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj7), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj7), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertNotNull(instant9);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse10);
        org.junit.Assert.assertNotNull(timeAlignedDataServiceRequest11);
        org.junit.Assert.assertNotNull(levelSurveyMeasurement12);
        org.junit.Assert.assertNotNull(levelSurveyMeasurement14);
    }

    @Test
    public void test24032() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest48.test24032");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostExtendedAttribute postExtendedAttribute0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostExtendedAttribute();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DataType dataType1 = postExtendedAttribute0.getDataType();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AppliesToType appliesToType2 = postExtendedAttribute0.getAppliesToType();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostExtendedAttribute postExtendedAttribute4 = postExtendedAttribute0.setId("hi!");
        java.lang.String str5 = postExtendedAttribute4.getId();
        postExtendedAttribute4.Description = "multipart/form-data; boundary=****bbcf5f9e-6ccf-4b63-91ab-6e645caf02af****";
        org.junit.Assert.assertNull(dataType1);
        org.junit.Assert.assertNull(appliesToType2);
        org.junit.Assert.assertNotNull(postExtendedAttribute4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "hi!" + "'", str5, "hi!");
    }

    @Test
    public void test24033() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest48.test24033");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceRequest locationDescriptionListServiceRequest0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceRequest();
        java.lang.String str1 = locationDescriptionListServiceRequest0.LocationName;
        java.util.ArrayList<java.lang.String> strList2 = locationDescriptionListServiceRequest0.TagNames;
        java.lang.Object obj3 = locationDescriptionListServiceRequest0.getResponseType();
        java.lang.String str4 = locationDescriptionListServiceRequest0.getLocationName();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceRequest locationDescriptionListServiceRequest6 = locationDescriptionListServiceRequest0.setPublish((java.lang.Boolean) false);
        locationDescriptionListServiceRequest6.LocationName = "2021.8.9990";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceRequest locationDescriptionListServiceRequest10 = locationDescriptionListServiceRequest6.setLocationIdentifier("multipart/form-data; boundary=****6b8051d4-caf2-4095-9f11-faa36b95fc28****");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceRequest locationDescriptionListServiceRequest12 = locationDescriptionListServiceRequest10.setLocationName("yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSSSSSZZZZZ");
        java.lang.String str13 = locationDescriptionListServiceRequest10.getLocationName();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesUniqueIdListServiceRequest timeSeriesUniqueIdListServiceRequest14 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesUniqueIdListServiceRequest();
        timeSeriesUniqueIdListServiceRequest14.Publish = true;
        timeSeriesUniqueIdListServiceRequest14.LocationIdentifier = "/AQUARIUS/Provisioning/v1";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ExtendedAttributeFilter extendedAttributeFilter19 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ExtendedAttributeFilter();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ExtendedAttributeFilter extendedAttributeFilter21 = extendedAttributeFilter19.setFilterValue("/AQUARIUS/Acquisition/v2");
        java.lang.String str22 = extendedAttributeFilter19.getFilterValue();
        extendedAttributeFilter19.FilterName = "";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ExtendedAttributeFilter extendedAttributeFilter25 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ExtendedAttributeFilter();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ExtendedAttributeFilter extendedAttributeFilter27 = extendedAttributeFilter25.setFilterValue("/AQUARIUS/Acquisition/v2");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ExtendedAttributeFilter extendedAttributeFilter29 = extendedAttributeFilter27.setFilterValue("hi!:///AQUARIUS/Provisioning/v1");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ExtendedAttributeFilter extendedAttributeFilter30 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ExtendedAttributeFilter();
        java.lang.String str31 = extendedAttributeFilter30.FilterValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ExtendedAttributeFilter extendedAttributeFilter32 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ExtendedAttributeFilter();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ExtendedAttributeFilter extendedAttributeFilter34 = extendedAttributeFilter32.setFilterValue("/AQUARIUS/Acquisition/v2");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ExtendedAttributeFilter extendedAttributeFilter35 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ExtendedAttributeFilter();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ExtendedAttributeFilter extendedAttributeFilter37 = extendedAttributeFilter35.setFilterValue("/AQUARIUS/Acquisition/v2");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ExtendedAttributeFilter extendedAttributeFilter38 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ExtendedAttributeFilter();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ExtendedAttributeFilter extendedAttributeFilter40 = extendedAttributeFilter38.setFilterValue("/AQUARIUS/Acquisition/v2");
        java.lang.String str41 = extendedAttributeFilter38.getFilterValue();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ExtendedAttributeFilter extendedAttributeFilter42 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ExtendedAttributeFilter();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ExtendedAttributeFilter extendedAttributeFilter44 = extendedAttributeFilter42.setFilterValue("/AQUARIUS/Acquisition/v2");
        java.lang.String str45 = extendedAttributeFilter42.getFilterName();
        extendedAttributeFilter42.FilterName = "MaxDuration";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ExtendedAttributeFilter extendedAttributeFilter48 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ExtendedAttributeFilter();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ExtendedAttributeFilter extendedAttributeFilter50 = extendedAttributeFilter48.setFilterValue("/AQUARIUS/Acquisition/v2");
        java.lang.String str51 = extendedAttributeFilter48.getFilterName();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ExtendedAttributeFilter extendedAttributeFilter52 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ExtendedAttributeFilter();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ExtendedAttributeFilter extendedAttributeFilter53 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ExtendedAttributeFilter();
        java.lang.String str54 = extendedAttributeFilter53.FilterName;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ExtendedAttributeFilter extendedAttributeFilter55 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ExtendedAttributeFilter();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ExtendedAttributeFilter extendedAttributeFilter57 = extendedAttributeFilter55.setFilterValue("/AQUARIUS/Acquisition/v2");
        java.lang.String str58 = extendedAttributeFilter55.getFilterName();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ExtendedAttributeFilter extendedAttributeFilter59 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ExtendedAttributeFilter();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ExtendedAttributeFilter extendedAttributeFilter60 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ExtendedAttributeFilter();
        java.lang.String str61 = extendedAttributeFilter60.FilterName;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ExtendedAttributeFilter[] extendedAttributeFilterArray62 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ExtendedAttributeFilter[] { extendedAttributeFilter19, extendedAttributeFilter27, extendedAttributeFilter30, extendedAttributeFilter32, extendedAttributeFilter35, extendedAttributeFilter38, extendedAttributeFilter42, extendedAttributeFilter48, extendedAttributeFilter52, extendedAttributeFilter53, extendedAttributeFilter55, extendedAttributeFilter59, extendedAttributeFilter60 };
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ExtendedAttributeFilter> extendedAttributeFilterList63 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ExtendedAttributeFilter>();
        boolean boolean64 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ExtendedAttributeFilter>) extendedAttributeFilterList63, extendedAttributeFilterArray62);
        timeSeriesUniqueIdListServiceRequest14.ExtendedFilters = extendedAttributeFilterList63;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceRequest locationDescriptionListServiceRequest66 = locationDescriptionListServiceRequest10.setExtendedFilters(extendedAttributeFilterList63);
        java.lang.String str67 = locationDescriptionListServiceRequest10.LocationIdentifier;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(strList2);
        org.junit.Assert.assertNotNull(obj3);
        org.junit.Assert.assertEquals(obj3.toString(), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$LocationDescriptionListServiceResponse");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj3), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$LocationDescriptionListServiceResponse");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj3), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$LocationDescriptionListServiceResponse");
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceRequest6);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceRequest10);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceRequest12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSSSSSZZZZZ" + "'", str13, "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSSSSSZZZZZ");
        org.junit.Assert.assertNotNull(extendedAttributeFilter21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "/AQUARIUS/Acquisition/v2" + "'", str22, "/AQUARIUS/Acquisition/v2");
        org.junit.Assert.assertNotNull(extendedAttributeFilter27);
        org.junit.Assert.assertNotNull(extendedAttributeFilter29);
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertNotNull(extendedAttributeFilter34);
        org.junit.Assert.assertNotNull(extendedAttributeFilter37);
        org.junit.Assert.assertNotNull(extendedAttributeFilter40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "/AQUARIUS/Acquisition/v2" + "'", str41, "/AQUARIUS/Acquisition/v2");
        org.junit.Assert.assertNotNull(extendedAttributeFilter44);
        org.junit.Assert.assertNull(str45);
        org.junit.Assert.assertNotNull(extendedAttributeFilter50);
        org.junit.Assert.assertNull(str51);
        org.junit.Assert.assertNull(str54);
        org.junit.Assert.assertNotNull(extendedAttributeFilter57);
        org.junit.Assert.assertNull(str58);
        org.junit.Assert.assertNull(str61);
        org.junit.Assert.assertNotNull(extendedAttributeFilterArray62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceRequest66);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "multipart/form-data; boundary=****6b8051d4-caf2-4095-9f11-faa36b95fc28****" + "'", str67, "multipart/form-data; boundary=****6b8051d4-caf2-4095-9f11-faa36b95fc28****");
    }

    @Test
    public void test24034() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest48.test24034");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportSummaryObservation importSummaryObservation0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportSummaryObservation();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportSummaryObservation importSummaryObservation2 = importSummaryObservation0.setSummaryReportText("multipart/form-data; boundary=****bbcf5f9e-6ccf-4b63-91ab-6e645caf02af****");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationImportSummary observationImportSummary3 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationImportSummary();
        observationImportSummary3.UpdateCount = (-1);
        java.lang.Integer int6 = observationImportSummary3.ExpectedCount;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationImportSummary observationImportSummary7 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationImportSummary();
        observationImportSummary7.UpdateCount = (-1);
        java.lang.Integer int10 = observationImportSummary7.ExpectedCount;
        java.lang.String str11 = observationImportSummary7.SummaryReportText;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObservation[] importItemObservationArray12 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObservation[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObservation> importItemObservationList13 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObservation>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObservation>) importItemObservationList13, importItemObservationArray12);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationImportSummary observationImportSummary15 = observationImportSummary7.setImportItems((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObservation>) importItemObservationList13);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationImportSummary observationImportSummary16 = observationImportSummary3.setNonErrorImportItems((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObservation>) importItemObservationList13);
        importSummaryObservation0.ImportItems = importItemObservationList13;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple importHistoryEventSimple18 = importSummaryObservation0.ImportHistoryEventSimple;
        java.lang.Integer int19 = importSummaryObservation0.getSkippedCount();
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObservation> importItemObservationList20 = importSummaryObservation0.NonErrorImportItems;
        importSummaryObservation0.SummaryReportText = "/AQUARIUS";
        importSummaryObservation0.SkippedCount = 100;
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObservation> importItemObservationList25 = importSummaryObservation0.getErrorImportItems();
        importSummaryObservation0.ErrorCount = 2;
        org.junit.Assert.assertNotNull(importSummaryObservation2);
        org.junit.Assert.assertNull(int6);
        org.junit.Assert.assertNull(int10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNotNull(importItemObservationArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(observationImportSummary15);
        org.junit.Assert.assertNotNull(observationImportSummary16);
        org.junit.Assert.assertNull(importHistoryEventSimple18);
        org.junit.Assert.assertNull(int19);
        org.junit.Assert.assertNull(importItemObservationList20);
        org.junit.Assert.assertNull(importItemObservationList25);
    }

    @Test
    public void test24035() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest48.test24035");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationExportIIV2 getObservationExportIIV2_0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationExportIIV2();
        java.util.List<java.lang.String> strList1 = getObservationExportIIV2_0.getCollectionMethodIds();
        java.lang.String str2 = getObservationExportIIV2_0.getDepthUnitCustomId();
        java.time.Instant instant3 = getObservationExportIIV2_0.EndObservedTime;
        java.lang.Double double4 = getObservationExportIIV2_0.NumericResultValue;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationExportIIV2 getObservationExportIIV2_6 = getObservationExportIIV2_0.setImportHistoryEventId("");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationExportIIV2 getObservationExportIIV2_8 = getObservationExportIIV2_0.setSort("multipart/form-data; boundary=****ebf59e0e-2d1f-43bc-996f-3c628a80f696****");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SampleFractionType sampleFractionType9 = getObservationExportIIV2_0.SampleFraction;
        org.junit.Assert.assertNull(strList1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(instant3);
        org.junit.Assert.assertNull(double4);
        org.junit.Assert.assertNotNull(getObservationExportIIV2_6);
        org.junit.Assert.assertNotNull(getObservationExportIIV2_8);
        org.junit.Assert.assertNull(sampleFractionType9);
    }

    @Test
    public void test24036() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest48.test24036");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Location location0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Location();
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.AppliedTag> appliedTagList1 = location0.Tags;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Location location3 = location0.setUniqueId("MaxInstant");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Location location5 = location3.setUtcOffset("9999-12-31T23:59:59.999Z");
        java.lang.Boolean boolean6 = location3.isPublish();
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.AppliedTag> appliedTagList7 = null;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Location location8 = location3.setTags(appliedTagList7);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Location location9 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Location();
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.AppliedTag> appliedTagList10 = location9.Tags;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Location location12 = location9.setUniqueId("MaxInstant");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Location location14 = location12.setUtcOffset("9999-12-31T23:59:59.999Z");
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.AppliedTag> appliedTagList15 = location12.getTags();
        java.lang.String str16 = location12.getIdentifier();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.AppliedTag appliedTag17 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.AppliedTag();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.AppliedTag appliedTag18 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.AppliedTag();
        java.lang.String str19 = appliedTag18.getUniqueId();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.AppliedTag appliedTag20 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.AppliedTag();
        java.lang.String str21 = appliedTag20.getUniqueId();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.AppliedTag[] appliedTagArray22 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.AppliedTag[] { appliedTag17, appliedTag18, appliedTag20 };
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.AppliedTag> appliedTagList23 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.AppliedTag>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.AppliedTag>) appliedTagList23, appliedTagArray22);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Location location25 = location12.setTags(appliedTagList23);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeValue[] extendedAttributeValueArray26 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeValue[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeValue> extendedAttributeValueList27 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeValue>();
        boolean boolean28 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeValue>) extendedAttributeValueList27, extendedAttributeValueArray26);
        location25.ExtendedAttributeValues = extendedAttributeValueList27;
        java.lang.Boolean boolean30 = location25.getIsExternalLocation();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Sensor sensor31 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Sensor();
        java.time.Instant instant32 = sensor31.getLastModifiedUtc();
        java.time.Instant instant33 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Sensor sensor34 = sensor31.setLastModifiedUtc(instant33);
        java.lang.String str35 = sensor31.ParameterId;
        java.lang.String str36 = sensor31.getLocationUniqueId();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Sensor sensor38 = sensor31.setLocationUniqueId("https");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Sensor sensor40 = sensor38.setComments("9999-12-31T23:59:59.999Z");
        java.lang.String str41 = sensor38.SerialNumber;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Location location42 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Location();
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.AppliedTag> appliedTagList43 = location42.Tags;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Location location45 = location42.setUniqueId("MaxInstant");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Location location47 = location45.setUtcOffset("9999-12-31T23:59:59.999Z");
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.AppliedTag> appliedTagList48 = location45.getTags();
        java.lang.String str49 = location45.getIdentifier();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.AppliedTag appliedTag50 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.AppliedTag();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.AppliedTag appliedTag51 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.AppliedTag();
        java.lang.String str52 = appliedTag51.getUniqueId();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.AppliedTag appliedTag53 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.AppliedTag();
        java.lang.String str54 = appliedTag53.getUniqueId();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.AppliedTag[] appliedTagArray55 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.AppliedTag[] { appliedTag50, appliedTag51, appliedTag53 };
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.AppliedTag> appliedTagList56 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.AppliedTag>();
        boolean boolean57 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.AppliedTag>) appliedTagList56, appliedTagArray55);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Location location58 = location45.setTags(appliedTagList56);
        sensor38.Tags = appliedTagList56;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Location location60 = location25.setTags(appliedTagList56);
        location8.Tags = appliedTagList56;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Location location63 = location8.setLocationName("multipart/form-data; boundary=****1eab67e1-84c8-4b82-aa06-d6c7526551f8****");
        java.lang.String str64 = location8.getUtcOffset();
        org.junit.Assert.assertNull(appliedTagList1);
        org.junit.Assert.assertNotNull(location3);
        org.junit.Assert.assertNotNull(location5);
        org.junit.Assert.assertNull(boolean6);
        org.junit.Assert.assertNotNull(location8);
        org.junit.Assert.assertNull(appliedTagList10);
        org.junit.Assert.assertNotNull(location12);
        org.junit.Assert.assertNotNull(location14);
        org.junit.Assert.assertNull(appliedTagList15);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNotNull(appliedTagArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(location25);
        org.junit.Assert.assertNotNull(extendedAttributeValueArray26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNull(boolean30);
        org.junit.Assert.assertNull(instant32);
        org.junit.Assert.assertNotNull(instant33);
        org.junit.Assert.assertNotNull(sensor34);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertNull(str36);
        org.junit.Assert.assertNotNull(sensor38);
        org.junit.Assert.assertNotNull(sensor40);
        org.junit.Assert.assertNull(str41);
        org.junit.Assert.assertNull(appliedTagList43);
        org.junit.Assert.assertNotNull(location45);
        org.junit.Assert.assertNotNull(location47);
        org.junit.Assert.assertNull(appliedTagList48);
        org.junit.Assert.assertNull(str49);
        org.junit.Assert.assertNull(str52);
        org.junit.Assert.assertNull(str54);
        org.junit.Assert.assertNotNull(appliedTagArray55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertNotNull(location58);
        org.junit.Assert.assertNotNull(location60);
        org.junit.Assert.assertNotNull(location63);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "9999-12-31T23:59:59.999Z" + "'", str64, "9999-12-31T23:59:59.999Z");
    }

    @Test
    public void test24037() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest48.test24037");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutUnit putUnit0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutUnit();
        putUnit0.PluralName = "http://MaxDurationhttp/json/reply/Integer";
        java.lang.String str3 = putUnit0.PluralName;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.UnitBase unitBase5 = putUnit0.setSingularName("****ee0ec537-fde4-45ee-9c35-68c37cf65c1c****");
        java.lang.String str6 = putUnit0.UniqueId;
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "http://MaxDurationhttp/json/reply/Integer" + "'", str3, "http://MaxDurationhttp/json/reply/Integer");
        org.junit.Assert.assertNotNull(unitBase5);
        org.junit.Assert.assertNull(str6);
    }

    @Test
    public void test24038() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest48.test24038");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DeleteFieldVisits deleteFieldVisits0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DeleteFieldVisits();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ReportListServiceRequest reportListServiceRequest1 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ReportListServiceRequest();
        reportListServiceRequest1.ReportTitle = "MinDuration";
        java.lang.String str4 = reportListServiceRequest1.getLocationUniqueId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_5 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList8 = new java.util.ArrayList<java.lang.String>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList8, strArray7);
        getObservationsV2_5.SpecimenIds = strList8;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags11 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray15 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList16 = new java.util.ArrayList<java.lang.String>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList16, strArray15);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags18 = putLocationTags11.setTagUniqueIds(strList16);
        getObservationsV2_5.QualityControlTypes = strList16;
        java.util.List<java.lang.String> strList20 = getObservationsV2_5.getAnalyticalGroupIds();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_22 = getObservationsV2_5.setSpecimenName("/AQUARIUS/Acquisition/v2://9999-12-31T23:59:59.999Z");
        java.util.List<java.lang.String> strList23 = getObservationsV2_22.getMedia();
        java.time.Instant instant24 = getObservationsV2_22.getStartModificationTime();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_25 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray27 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList28 = new java.util.ArrayList<java.lang.String>();
        boolean boolean29 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList28, strArray27);
        getObservationsV2_25.SpecimenIds = strList28;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_31 = getObservationsV2_22.setProjectIds((java.util.List<java.lang.String>) strList28);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ReportListServiceRequest reportListServiceRequest32 = reportListServiceRequest1.setTagKeys(strList28);
        reportListServiceRequest1.LocationUniqueId = "9999-12-31T23:59:59.999Z";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DeleteFieldVisits deleteFieldVisits35 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DeleteFieldVisits();
        java.lang.String str36 = deleteFieldVisits35.Sort;
        deleteFieldVisits35.Sort = "9999-12-31T23:59:59.999Z";
        java.util.List<java.lang.String> strList39 = deleteFieldVisits35.getScheduleIds();
        java.util.List<java.lang.String> strList40 = deleteFieldVisits35.getFieldTripIds();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostTag postTag41 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostTag();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_42 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray45 = new java.lang.String[] { "", "" };
        java.util.ArrayList<java.lang.String> strList46 = new java.util.ArrayList<java.lang.String>();
        boolean boolean47 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList46, strArray45);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_48 = getObservationsV2_42.setDataClassifications((java.util.List<java.lang.String>) strList46);
        postTag41.PickListValues = strList46;
        java.util.ArrayList<java.lang.String> strList50 = postTag41.PickListValues;
        deleteFieldVisits35.PlanningStatuses = strList50;
        reportListServiceRequest1.TagKeys = strList50;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostTag postTag53 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostTag();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_54 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray57 = new java.lang.String[] { "", "" };
        java.util.ArrayList<java.lang.String> strList58 = new java.util.ArrayList<java.lang.String>();
        boolean boolean59 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList58, strArray57);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_60 = getObservationsV2_54.setDataClassifications((java.util.List<java.lang.String>) strList58);
        postTag53.PickListValues = strList58;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ReportListServiceRequest reportListServiceRequest62 = reportListServiceRequest1.setReportUniqueIds(strList58);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DeleteFieldVisits deleteFieldVisits63 = deleteFieldVisits0.setScheduleIds((java.util.List<java.lang.String>) strList58);
        java.lang.String str64 = deleteFieldVisits0.getSort();
        java.lang.String str65 = deleteFieldVisits0.Sort;
        java.lang.Integer int66 = deleteFieldVisits0.getLimit();
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(putLocationTags18);
        org.junit.Assert.assertNull(strList20);
        org.junit.Assert.assertNotNull(getObservationsV2_22);
        org.junit.Assert.assertNull(strList23);
        org.junit.Assert.assertNull(instant24);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(getObservationsV2_31);
        org.junit.Assert.assertNotNull(reportListServiceRequest32);
        org.junit.Assert.assertNull(str36);
        org.junit.Assert.assertNull(strList39);
        org.junit.Assert.assertNull(strList40);
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(getObservationsV2_48);
        org.junit.Assert.assertNotNull(strList50);
        org.junit.Assert.assertNotNull(strArray57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(getObservationsV2_60);
        org.junit.Assert.assertNotNull(reportListServiceRequest62);
        org.junit.Assert.assertNotNull(deleteFieldVisits63);
        org.junit.Assert.assertNull(str64);
        org.junit.Assert.assertNull(str65);
        org.junit.Assert.assertNull(int66);
    }

    @Test
    public void test24039() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest48.test24039");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostDatumConvertedTimeSeries postDatumConvertedTimeSeries0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostDatumConvertedTimeSeries();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostDatumConvertedTimeSeries postDatumConvertedTimeSeries2 = postDatumConvertedTimeSeries0.setDescription("yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ");
        postDatumConvertedTimeSeries0.ComputationPeriodIdentifier = "'.'SSSSSSS";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostDatumConvertedTimeSeries postDatumConvertedTimeSeries6 = postDatumConvertedTimeSeries0.setComputationPeriodIdentifier("multipart/form-data; boundary=****44f0772e-c3ca-4316-8e2a-61ec8540d661****");
        java.lang.String str7 = postDatumConvertedTimeSeries0.getDescription();
        org.junit.Assert.assertNotNull(postDatumConvertedTimeSeries2);
        org.junit.Assert.assertNotNull(postDatumConvertedTimeSeries6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ" + "'", str7, "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ");
    }

    @Test
    public void test24040() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest48.test24040");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportObservations getExportObservations0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportObservations();
        java.util.List<java.lang.String> strList1 = getExportObservations0.getLabReportIds();
        java.lang.String str2 = getExportObservations0.DepthUnitCustomId;
        java.util.List<java.lang.String> strList3 = getExportObservations0.getSearch();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetChartDataV2 getChartDataV2_4 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetChartDataV2();
        java.lang.String str5 = getChartDataV2_4.getActivityCustomId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetChartDataV2 getChartDataV2_7 = getChartDataV2_4.setFilterId("");
        java.util.List<java.lang.String> strList8 = getChartDataV2_4.getIds();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExtendedAttributeDropdownlistitems getExtendedAttributeDropdownlistitems9 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExtendedAttributeDropdownlistitems();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_10 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.util.List<java.lang.String> strList11 = getObservationsV2_10.SamplingContextTagIds;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_12 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray14 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList15 = new java.util.ArrayList<java.lang.String>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList15, strArray14);
        getObservationsV2_12.SpecimenIds = strList15;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags18 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray22 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList23 = new java.util.ArrayList<java.lang.String>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList23, strArray22);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags25 = putLocationTags18.setTagUniqueIds(strList23);
        getObservationsV2_12.QualityControlTypes = strList23;
        getObservationsV2_10.ResultGrades = strList23;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExtendedAttributeDropdownlistitems getExtendedAttributeDropdownlistitems28 = getExtendedAttributeDropdownlistitems9.setSearch((java.util.List<java.lang.String>) strList23);
        getChartDataV2_4.ObservedPropertyIds = strList23;
        getChartDataV2_4.SpecimenName = "MinDuration";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportObservations getExportObservations32 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportObservations();
        java.util.List<java.lang.String> strList33 = getExportObservations32.getLabReportIds();
        java.lang.String str34 = getExportObservations32.DepthUnitCustomId;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetActivityTemplates getActivityTemplates35 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetActivityTemplates();
        java.lang.Object obj36 = getActivityTemplates35.getResponseType();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_37 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray39 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList40 = new java.util.ArrayList<java.lang.String>();
        boolean boolean41 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList40, strArray39);
        getObservationsV2_37.SpecimenIds = strList40;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags43 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray47 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList48 = new java.util.ArrayList<java.lang.String>();
        boolean boolean49 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList48, strArray47);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags50 = putLocationTags43.setTagUniqueIds(strList48);
        getObservationsV2_37.QualityControlTypes = strList48;
        getActivityTemplates35.Type = strList48;
        getExportObservations32.AnalyticalGroupIds = strList48;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetChartDataV2 getChartDataV2_54 = getChartDataV2_4.setAnalysisMethodIds((java.util.List<java.lang.String>) strList48);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportObservations getExportObservations55 = getExportObservations0.setAnalyticalGroupIds((java.util.List<java.lang.String>) strList48);
        java.util.List<java.lang.String> strList56 = getExportObservations0.SpecimenIds;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportObservations getExportObservations57 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportObservations();
        java.util.List<java.lang.String> strList58 = getExportObservations57.getLabReportIds();
        java.lang.String str59 = getExportObservations57.DepthUnitCustomId;
        java.util.List<java.lang.String> strList60 = getExportObservations57.getSearch();
        java.util.List<java.lang.String> strList61 = getExportObservations57.LabResultLaboratoryIds;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeTransactionListServiceRequest metadataChangeTransactionListServiceRequest62 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeTransactionListServiceRequest();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostRecurringReport postRecurringReport63 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostRecurringReport();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary64 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        dischargeSummary64.Reviewer = "";
        java.time.Instant instant67 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        dischargeSummary64.MeasurementTime = instant67;
        postRecurringReport63.NextGenerationDate = instant67;
        java.time.Instant instant70 = postRecurringReport63.getNextGenerationDate();
        java.lang.String str71 = com.aquaticinformatics.aquarius.sdk.samples.serializers.InstantSerializer.format(instant70);
        metadataChangeTransactionListServiceRequest62.QueryFrom = instant70;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportObservations getExportObservations73 = getExportObservations57.setEndObservedTime(instant70);
        getExportObservations73.MaxNumericResultValue = 1.0d;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportObservations getExportObservations77 = getExportObservations73.setImportHistoryEventId("MaxInstant");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportObservationsFormatType getExportObservationsFormatType78 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportObservationsFormatType.XSLX;
        getExportObservations73.Format = getExportObservationsFormatType78;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportObservations getExportObservations80 = getExportObservations0.setFormat(getExportObservationsFormatType78);
        java.lang.String str81 = getExportObservations80.getImportHistoryEventId();
        org.junit.Assert.assertNull(strList1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(strList3);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(getChartDataV2_7);
        org.junit.Assert.assertNull(strList8);
        org.junit.Assert.assertNull(strList11);
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(putLocationTags25);
        org.junit.Assert.assertNotNull(getExtendedAttributeDropdownlistitems28);
        org.junit.Assert.assertNull(strList33);
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertNotNull(obj36);
        org.junit.Assert.assertEquals(obj36.toString(), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$SearchResultActivityTemplate");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj36), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$SearchResultActivityTemplate");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj36), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$SearchResultActivityTemplate");
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(putLocationTags50);
        org.junit.Assert.assertNotNull(getChartDataV2_54);
        org.junit.Assert.assertNotNull(getExportObservations55);
        org.junit.Assert.assertNull(strList56);
        org.junit.Assert.assertNull(strList58);
        org.junit.Assert.assertNull(str59);
        org.junit.Assert.assertNull(strList60);
        org.junit.Assert.assertNull(strList61);
        org.junit.Assert.assertNotNull(instant67);
        org.junit.Assert.assertNotNull(instant70);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "9999-12-31T23:59:59.999Z" + "'", str71, "9999-12-31T23:59:59.999Z");
        org.junit.Assert.assertNotNull(getExportObservations73);
        org.junit.Assert.assertNotNull(getExportObservations77);
        org.junit.Assert.assertTrue("'" + getExportObservationsFormatType78 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportObservationsFormatType.XSLX + "'", getExportObservationsFormatType78.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportObservationsFormatType.XSLX));
        org.junit.Assert.assertNotNull(getExportObservations80);
        org.junit.Assert.assertNull(str81);
    }

    @Test
    public void test24041() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest48.test24041");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.PostLocationAttachment postLocationAttachment0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.PostLocationAttachment();
        java.lang.String str1 = postLocationAttachment0.LocationUniqueId;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.IHttpFile iHttpFile2 = postLocationAttachment0.getFile();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.IHttpFile iHttpFile3 = null;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.PostLocationAttachment postLocationAttachment4 = postLocationAttachment0.setFile(iHttpFile3);
        java.lang.String str5 = postLocationAttachment4.LocationUniqueId;
        java.lang.String str6 = postLocationAttachment4.LocationUniqueId;
        postLocationAttachment4.LocationUniqueId = "multipart/form-data; boundary=****9fadde69-3f13-40c4-a87c-0f3f51c2dd35****";
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(iHttpFile2);
        org.junit.Assert.assertNotNull(postLocationAttachment4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(str6);
    }

    @Test
    public void test24042() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest48.test24042");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutObservationV2 putObservationV2_0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutObservationV2();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty observedProperty1 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutObservationV2 putObservationV2_2 = putObservationV2_0.setObservedProperty(observedProperty1);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Activity activity3 = putObservationV2_2.Activity;
        java.time.OffsetDateTime offsetDateTime4 = null;
        putObservationV2_2.ObservedTime = offsetDateTime4;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.QualityControlType qualityControlType6 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.QualityControlType.BLANK;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutObservationV2 putObservationV2_7 = putObservationV2_2.setQualityControlType(qualityControlType6);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSpecimen putSpecimen8 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSpecimen();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Activity activity9 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Activity();
        putSpecimen8.Activity = activity9;
        java.lang.String str11 = activity9.Id;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutObservationV2 putObservationV2_12 = putObservationV2_2.setActivity(activity9);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservationV2 postObservationV2_13 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservationV2();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabInstruction labInstruction14 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservationV2 postObservationV2_15 = postObservationV2_13.setLabInstruction(labInstruction14);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedFieldResult plannedFieldResult16 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedFieldResult();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes17 = plannedFieldResult16.AuditAttributes;
        plannedFieldResult16.Id = "'.'SSSSSSS";
        java.lang.String str20 = plannedFieldResult16.DeviceType;
        java.lang.String str21 = plannedFieldResult16.Id;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricConfiguration metricConfiguration22 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricConfiguration();
        java.lang.String str23 = metricConfiguration22.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty observedProperty24 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty();
        observedProperty24.CasNumber = "MinDuration";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricConfiguration metricConfiguration27 = metricConfiguration22.setObservedProperty(observedProperty24);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultType resultType28 = observedProperty24.ResultType;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservedProperty postObservedProperty29 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservedProperty();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UnitGroup unitGroup30 = postObservedProperty29.UnitGroup;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity quantity31 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Unit unit32 = null;
        quantity31.Unit = unit32;
        postObservedProperty29.LowerLimit = quantity31;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity quantity35 = postObservedProperty29.LowerLimit;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Unit unit36 = quantity35.Unit;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty observedProperty37 = observedProperty24.setUpperLimit(quantity35);
        plannedFieldResult16.ObservedProperty = observedProperty37;
        plannedFieldResult16.Id = "/AQUARIUS/Acquisition/v2";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservationV2 postObservationV2_41 = postObservationV2_13.setPlannedFieldResult(plannedFieldResult16);
        plannedFieldResult16.Id = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSSSSSZZZZZ";
        plannedFieldResult16.Comment = "ZZZZZ";
        putObservationV2_12.PlannedFieldResult = plannedFieldResult16;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation47 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DataClassificationType dataClassificationType48 = observation47.getDataClassification();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Medium medium49 = null;
        observation47.Medium = medium49;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity quantity51 = observation47.getDepth();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethodSimple analysisMethodSimple52 = observation47.AnalysisMethod;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedFieldResult plannedFieldResult53 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedFieldResult();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes54 = plannedFieldResult53.AuditAttributes;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails55 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails57 = labResultDetails55.setAnalysisComment("/AQUARIUS/Acquisition/v2");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes58 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails59 = labResultDetails57.setAuditAttributes(auditAttributes58);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedFieldResult plannedFieldResult60 = plannedFieldResult53.setAuditAttributes(auditAttributes58);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty observedProperty61 = plannedFieldResult60.getObservedProperty();
        observation47.PlannedFieldResult = plannedFieldResult60;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutObservationV2 putObservationV2_63 = putObservationV2_12.setPlannedFieldResult(plannedFieldResult60);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationMinimal observationMinimal64 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationMinimal();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty observedProperty65 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationMinimal observationMinimal66 = observationMinimal64.setObservedProperty(observedProperty65);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultStatus resultStatus67 = observationMinimal66.getResultStatus();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenNestedInActivity specimenNestedInActivity68 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationMinimal observationMinimal69 = observationMinimal66.setSpecimen(specimenNestedInActivity68);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.NumericResult numericResult70 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.NumericResult();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultDetectionCondition resultDetectionCondition71 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultDetectionCondition();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes72 = resultDetectionCondition71.getAuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultDetectionCondition resultDetectionCondition74 = resultDetectionCondition71.setId("/AQUARIUS");
        java.lang.String str75 = resultDetectionCondition71.Name;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultDetectionCondition resultDetectionCondition77 = resultDetectionCondition71.setDescription("POST");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.NumericResult numericResult78 = numericResult70.setDetectionCondition(resultDetectionCondition77);
        numericResult70.RoundingSpecification = "/AQUARIUS/Acquisition/v2";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationMinimal observationMinimal81 = observationMinimal66.setNumericResult(numericResult70);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutObservationV2 putObservationV2_82 = putObservationV2_12.setNumericResult(numericResult70);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Specimen specimen83 = putObservationV2_12.Specimen;
        org.junit.Assert.assertNotNull(putObservationV2_2);
        org.junit.Assert.assertNull(activity3);
        org.junit.Assert.assertTrue("'" + qualityControlType6 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.QualityControlType.BLANK + "'", qualityControlType6.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.QualityControlType.BLANK));
        org.junit.Assert.assertNotNull(putObservationV2_7);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNotNull(putObservationV2_12);
        org.junit.Assert.assertNotNull(postObservationV2_15);
        org.junit.Assert.assertNull(auditAttributes17);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "'.'SSSSSSS" + "'", str21, "'.'SSSSSSS");
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertNotNull(metricConfiguration27);
        org.junit.Assert.assertNull(resultType28);
        org.junit.Assert.assertNull(unitGroup30);
        org.junit.Assert.assertNotNull(quantity35);
        org.junit.Assert.assertNull(unit36);
        org.junit.Assert.assertNotNull(observedProperty37);
        org.junit.Assert.assertNotNull(postObservationV2_41);
        org.junit.Assert.assertNull(dataClassificationType48);
        org.junit.Assert.assertNull(quantity51);
        org.junit.Assert.assertNull(analysisMethodSimple52);
        org.junit.Assert.assertNull(auditAttributes54);
        org.junit.Assert.assertNotNull(labResultDetails57);
        org.junit.Assert.assertNotNull(labResultDetails59);
        org.junit.Assert.assertNotNull(plannedFieldResult60);
        org.junit.Assert.assertNull(observedProperty61);
        org.junit.Assert.assertNotNull(putObservationV2_63);
        org.junit.Assert.assertNotNull(observationMinimal66);
        org.junit.Assert.assertNull(resultStatus67);
        org.junit.Assert.assertNotNull(observationMinimal69);
        org.junit.Assert.assertNull(auditAttributes72);
        org.junit.Assert.assertNotNull(resultDetectionCondition74);
        org.junit.Assert.assertNull(str75);
        org.junit.Assert.assertNotNull(resultDetectionCondition77);
        org.junit.Assert.assertNotNull(numericResult78);
        org.junit.Assert.assertNotNull(observationMinimal81);
        org.junit.Assert.assertNotNull(putObservationV2_82);
        org.junit.Assert.assertNull(specimen83);
    }

    @Test
    public void test24043() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest48.test24043");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray3 = new java.lang.String[] { "", "" };
        java.util.ArrayList<java.lang.String> strList4 = new java.util.ArrayList<java.lang.String>();
        boolean boolean5 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList4, strArray3);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_6 = getObservationsV2_0.setDataClassifications((java.util.List<java.lang.String>) strList4);
        getObservationsV2_6.DepthUnitCustomId = "hi!";
        java.lang.String str9 = getObservationsV2_6.DepthUnitId;
        java.util.List<java.lang.String> strList10 = getObservationsV2_6.LabResultLaboratoryIds;
        getObservationsV2_6.MaxNumericResultValue = (-1.0d);
        java.lang.Integer int13 = getObservationsV2_6.Limit;
        java.util.List<java.lang.String> strList14 = getObservationsV2_6.ObservedPropertyIds;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_16 = getObservationsV2_6.setDepthUnitId("multipart/form-data; boundary=****bbcf5f9e-6ccf-4b63-91ab-6e645caf02af****");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisit fieldVisit17 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisit();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.GageHeightAtZeroFlowActivity gageHeightAtZeroFlowActivity18 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.GageHeightAtZeroFlowActivity();
        java.time.Instant instant19 = null;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.GageHeightAtZeroFlowActivity gageHeightAtZeroFlowActivity20 = gageHeightAtZeroFlowActivity18.setApplicableSince(instant19);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.GageHeightAtZeroFlowActivity gageHeightAtZeroFlowActivity22 = gageHeightAtZeroFlowActivity20.setIsObserved((java.lang.Boolean) true);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisit fieldVisit23 = fieldVisit17.setGageHeightAtZeroFlowActivity(gageHeightAtZeroFlowActivity22);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CompletedWork completedWork24 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CompletedWork();
        java.lang.Boolean boolean25 = completedWork24.isSafetyInspectionPerformed();
        java.lang.Boolean boolean26 = completedWork24.isGroundWaterLevelPerformed();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitDescription fieldVisitDescription27 = fieldVisit23.setCompletedWork(completedWork24);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_28 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.util.List<java.lang.String> strList29 = getObservationsV2_28.ResultGrades;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MonitoringMethodListServiceResponse monitoringMethodListServiceResponse30 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MonitoringMethodListServiceResponse();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CalibrationCheck calibrationCheck31 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CalibrationCheck();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CalibrationCheckType calibrationCheckType32 = calibrationCheck31.getCalibrationCheckType();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay33 = calibrationCheck31.Value;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse34 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary35 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary37 = dischargeSummary35.setPublish((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse38 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant39 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse40 = locationDescriptionListServiceResponse38.setNextToken(instant39);
        dischargeSummary35.MeasurementTime = instant39;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse42 = locationDescriptionListServiceResponse34.setNextToken(instant39);
        java.time.Instant instant43 = locationDescriptionListServiceResponse34.getNextToken();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CalibrationCheck calibrationCheck44 = calibrationCheck31.setTime(instant43);
        monitoringMethodListServiceResponse30.ResponseTime = instant43;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_46 = getObservationsV2_28.setEndResultTime(instant43);
        fieldVisitDescription27.StartTime = instant43;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_48 = getObservationsV2_16.setStartObservedTime(instant43);
        java.util.List<java.lang.String> strList49 = getObservationsV2_16.LabResultLaboratoryIds;
        java.util.List<java.lang.String> strList50 = getObservationsV2_16.getTaxonIds();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.FieldResultType fieldResultType51 = getObservationsV2_16.FieldResultType;
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(getObservationsV2_6);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNull(strList10);
        org.junit.Assert.assertNull(int13);
        org.junit.Assert.assertNull(strList14);
        org.junit.Assert.assertNotNull(getObservationsV2_16);
        org.junit.Assert.assertNotNull(gageHeightAtZeroFlowActivity20);
        org.junit.Assert.assertNotNull(gageHeightAtZeroFlowActivity22);
        org.junit.Assert.assertNotNull(fieldVisit23);
        org.junit.Assert.assertNull(boolean25);
        org.junit.Assert.assertNull(boolean26);
        org.junit.Assert.assertNotNull(fieldVisitDescription27);
        org.junit.Assert.assertNull(strList29);
        org.junit.Assert.assertNull(calibrationCheckType32);
        org.junit.Assert.assertNull(doubleWithDisplay33);
        org.junit.Assert.assertNotNull(dischargeSummary37);
        org.junit.Assert.assertNotNull(instant39);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse40);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse42);
        org.junit.Assert.assertNotNull(instant43);
        org.junit.Assert.assertNotNull(calibrationCheck44);
        org.junit.Assert.assertNotNull(getObservationsV2_46);
        org.junit.Assert.assertNotNull(getObservationsV2_48);
        org.junit.Assert.assertNull(strList49);
        org.junit.Assert.assertNull(strList50);
        org.junit.Assert.assertNull(fieldResultType51);
    }

    @Test
    public void test24044() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest48.test24044");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutBulkEditResultGradesV2 putBulkEditResultGradesV2_0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutBulkEditResultGradesV2();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RoleFlattened roleFlattened1 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RoleFlattened();
        java.lang.Boolean boolean2 = roleFlattened1.CanRemoveFieldVisits;
        roleFlattened1.Name = "MaxInstant";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationType putLocationType5 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationType();
        java.lang.String str6 = putLocationType5.Description;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_7 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray10 = new java.lang.String[] { "", "" };
        java.util.ArrayList<java.lang.String> strList11 = new java.util.ArrayList<java.lang.String>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList11, strArray10);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_13 = getObservationsV2_7.setDataClassifications((java.util.List<java.lang.String>) strList11);
        getObservationsV2_13.DepthUnitCustomId = "hi!";
        java.lang.String str16 = getObservationsV2_13.CustomId;
        java.util.List<java.lang.String> strList17 = getObservationsV2_13.getSearch();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_18 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray20 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList21 = new java.util.ArrayList<java.lang.String>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList21, strArray20);
        getObservationsV2_18.SpecimenIds = strList21;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags24 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray28 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList29 = new java.util.ArrayList<java.lang.String>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList29, strArray28);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags31 = putLocationTags24.setTagUniqueIds(strList29);
        getObservationsV2_18.QualityControlTypes = strList29;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_33 = getObservationsV2_13.setMedia((java.util.List<java.lang.String>) strList29);
        putLocationType5.ExtendedAttributeDefinitionIds = strList29;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RoleFlattenedBase roleFlattenedBase35 = roleFlattened1.setRoleApprovalTransitions(strList29);
        putBulkEditResultGradesV2_0.ResultGrades = strList29;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Location location37 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Location();
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.AppliedTag> appliedTagList38 = location37.Tags;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Location location40 = location37.setUniqueId("MaxInstant");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Location location42 = location37.setLocationName("yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ");
        java.time.Instant instant43 = location42.getLastModified();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.StatisticalDateTimeOffset statisticalDateTimeOffset44 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.StatisticalDateTimeOffset();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostRecurringReport postRecurringReport45 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostRecurringReport();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary46 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        dischargeSummary46.Reviewer = "";
        java.time.Instant instant49 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        dischargeSummary46.MeasurementTime = instant49;
        postRecurringReport45.NextGenerationDate = instant49;
        java.time.Instant instant52 = postRecurringReport45.getNextGenerationDate();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.StatisticalDateTimeOffset statisticalDateTimeOffset53 = statisticalDateTimeOffset44.setDateTimeOffset(instant52);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DownchainProcessorListByRatingModelServiceRequest downchainProcessorListByRatingModelServiceRequest54 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DownchainProcessorListByRatingModelServiceRequest();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeTransactionListServiceRequest metadataChangeTransactionListServiceRequest55 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeTransactionListServiceRequest();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostRecurringReport postRecurringReport56 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostRecurringReport();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary57 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        dischargeSummary57.Reviewer = "";
        java.time.Instant instant60 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        dischargeSummary57.MeasurementTime = instant60;
        postRecurringReport56.NextGenerationDate = instant60;
        java.time.Instant instant63 = postRecurringReport56.getNextGenerationDate();
        java.lang.String str64 = com.aquaticinformatics.aquarius.sdk.samples.serializers.InstantSerializer.format(instant63);
        metadataChangeTransactionListServiceRequest55.QueryFrom = instant63;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DownchainProcessorListByRatingModelServiceRequest downchainProcessorListByRatingModelServiceRequest66 = downchainProcessorListByRatingModelServiceRequest54.setQueryTo(instant63);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DownchainProcessorListByRatingModelServiceRequest downchainProcessorListByRatingModelServiceRequest68 = downchainProcessorListByRatingModelServiceRequest54.setRatingModelIdentifier("hi!");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Qualifier qualifier69 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Qualifier();
        java.time.Instant instant70 = qualifier69.DateApplied;
        java.lang.String str71 = qualifier69.User;
        java.lang.String str72 = qualifier69.getIdentifier();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest73 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest();
        java.lang.Object obj74 = timeAlignedDataServiceRequest73.getResponseType();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse75 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant76 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse77 = locationDescriptionListServiceResponse75.setNextToken(instant76);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest78 = timeAlignedDataServiceRequest73.setQueryFrom(instant76);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Qualifier qualifier79 = qualifier69.setDateApplied(instant76);
        java.time.Instant instant80 = qualifier79.getDateApplied();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DownchainProcessorListByRatingModelServiceRequest downchainProcessorListByRatingModelServiceRequest81 = downchainProcessorListByRatingModelServiceRequest54.setQueryFrom(instant80);
        statisticalDateTimeOffset53.DateTimeOffset = instant80;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Location location83 = location42.setLastModified(instant80);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutBulkEditResultGradesV2 putBulkEditResultGradesV2_84 = putBulkEditResultGradesV2_0.setEndObservedTime(instant80);
        java.util.List<java.lang.String> strList85 = putBulkEditResultGradesV2_0.getSamplingContextTagIds();
        java.lang.String str86 = putBulkEditResultGradesV2_0.getSort();
        putBulkEditResultGradesV2_0.CustomId = "http://MaxDurationhttp/json/reply/String";
        java.util.List<java.lang.String> strList89 = putBulkEditResultGradesV2_0.getSpecimenIds();
        org.junit.Assert.assertNull(boolean2);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(getObservationsV2_13);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNull(strList17);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(putLocationTags31);
        org.junit.Assert.assertNotNull(getObservationsV2_33);
        org.junit.Assert.assertNotNull(roleFlattenedBase35);
        org.junit.Assert.assertNull(appliedTagList38);
        org.junit.Assert.assertNotNull(location40);
        org.junit.Assert.assertNotNull(location42);
        org.junit.Assert.assertNull(instant43);
        org.junit.Assert.assertNotNull(instant49);
        org.junit.Assert.assertNotNull(instant52);
        org.junit.Assert.assertNotNull(statisticalDateTimeOffset53);
        org.junit.Assert.assertNotNull(instant60);
        org.junit.Assert.assertNotNull(instant63);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "9999-12-31T23:59:59.999Z" + "'", str64, "9999-12-31T23:59:59.999Z");
        org.junit.Assert.assertNotNull(downchainProcessorListByRatingModelServiceRequest66);
        org.junit.Assert.assertNotNull(downchainProcessorListByRatingModelServiceRequest68);
        org.junit.Assert.assertNull(instant70);
        org.junit.Assert.assertNull(str71);
        org.junit.Assert.assertNull(str72);
        org.junit.Assert.assertNotNull(obj74);
        org.junit.Assert.assertEquals(obj74.toString(), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj74), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj74), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertNotNull(instant76);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse77);
        org.junit.Assert.assertNotNull(timeAlignedDataServiceRequest78);
        org.junit.Assert.assertNotNull(qualifier79);
        org.junit.Assert.assertNotNull(instant80);
        org.junit.Assert.assertNotNull(downchainProcessorListByRatingModelServiceRequest81);
        org.junit.Assert.assertNotNull(location83);
        org.junit.Assert.assertNotNull(putBulkEditResultGradesV2_84);
        org.junit.Assert.assertNull(strList85);
        org.junit.Assert.assertNull(str86);
        org.junit.Assert.assertNull(strList89);
    }

    @Test
    public void test24045() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest48.test24045");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Specimen specimen0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Specimen();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Specimen specimen2 = specimen0.setFiltrationComment("9999-12-31T23:59:59.9999999Z://2021.4.62.0");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Specimen specimen4 = specimen2.setName("9999-12-31T23:59:59.9999999Z://2021.4.62.0");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Activity activity5 = specimen2.Activity;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate6 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate8 = specimenTemplate6.setCustomId("hi!");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PreservativeType preservativeType9 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PreservativeType.SODIUM_AZIDE;
        specimenTemplate8.Preservative = preservativeType9;
        specimenTemplate8.FiltrationComment = "hi!";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroup analyticalGroup13 = specimenTemplate8.AnalyticalGroup;
        specimen2.TemplateCreatedFrom = specimenTemplate8;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroup analyticalGroup15 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroup();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupType analyticalGroupType16 = analyticalGroup15.getType();
        java.lang.String str17 = analyticalGroup15.Name;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem analyticalGroupItem18 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod19 = analyticalGroupItem18.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod20 = analyticalGroupItem18.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod21 = null;
        analyticalGroupItem18.AnalysisMethod = analysisMethod21;
        java.lang.String str23 = analyticalGroupItem18.getHoldingTime();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod24 = analyticalGroupItem18.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem[] analyticalGroupItemArray25 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem[] { analyticalGroupItem18 };
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem> analyticalGroupItemList26 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem>();
        boolean boolean27 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem>) analyticalGroupItemList26, analyticalGroupItemArray25);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroup analyticalGroup28 = analyticalGroup15.setAnalyticalGroupItems((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem>) analyticalGroupItemList26);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Specimen specimen29 = specimen2.setAnalyticalGroup(analyticalGroup15);
        java.lang.String str30 = specimen2.Id;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Laboratory laboratory31 = specimen2.getLaboratory();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroup analyticalGroup32 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroup();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupType analyticalGroupType33 = analyticalGroup32.getType();
        analyticalGroup32.Name = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSSSSSZZZZZ";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroup analyticalGroup36 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroup();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem analyticalGroupItem37 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod38 = analyticalGroupItem37.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem analyticalGroupItem39 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod40 = analyticalGroupItem39.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod41 = analyticalGroupItem39.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem analyticalGroupItem42 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod43 = analyticalGroupItem42.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod44 = analyticalGroupItem42.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod45 = null;
        analyticalGroupItem42.AnalysisMethod = analysisMethod45;
        java.lang.String str47 = analyticalGroupItem42.getHoldingTime();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem analyticalGroupItem48 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod49 = analyticalGroupItem48.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod50 = analyticalGroupItem48.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem analyticalGroupItem51 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod52 = analyticalGroupItem51.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem analyticalGroupItem53 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod54 = analyticalGroupItem53.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod55 = analyticalGroupItem53.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod56 = null;
        analyticalGroupItem53.AnalysisMethod = analysisMethod56;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem[] analyticalGroupItemArray58 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem[] { analyticalGroupItem37, analyticalGroupItem39, analyticalGroupItem42, analyticalGroupItem48, analyticalGroupItem51, analyticalGroupItem53 };
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem> analyticalGroupItemList59 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem>();
        boolean boolean60 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem>) analyticalGroupItemList59, analyticalGroupItemArray58);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroup analyticalGroup61 = analyticalGroup36.setAnalyticalGroupItems((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem>) analyticalGroupItemList59);
        analyticalGroup32.AnalyticalGroupItems = analyticalGroupItemList59;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes63 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes();
        analyticalGroup32.AuditAttributes = auditAttributes63;
        java.lang.String str65 = analyticalGroup32.Id;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupType analyticalGroupType66 = analyticalGroup32.getType();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupType analyticalGroupType67 = analyticalGroup32.getType();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupType analyticalGroupType68 = analyticalGroup32.getType();
        specimen2.AnalyticalGroup = analyticalGroup32;
        java.lang.Integer int70 = specimen2.getNumberOfRequestedObservations();
        org.junit.Assert.assertNotNull(specimen2);
        org.junit.Assert.assertNotNull(specimen4);
        org.junit.Assert.assertNull(activity5);
        org.junit.Assert.assertNotNull(specimenTemplate8);
        org.junit.Assert.assertTrue("'" + preservativeType9 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PreservativeType.SODIUM_AZIDE + "'", preservativeType9.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PreservativeType.SODIUM_AZIDE));
        org.junit.Assert.assertNull(analyticalGroup13);
        org.junit.Assert.assertNull(analyticalGroupType16);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertNull(analysisMethod19);
        org.junit.Assert.assertNull(analysisMethod20);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertNull(analysisMethod24);
        org.junit.Assert.assertNotNull(analyticalGroupItemArray25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(analyticalGroup28);
        org.junit.Assert.assertNotNull(specimen29);
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertNull(laboratory31);
        org.junit.Assert.assertNull(analyticalGroupType33);
        org.junit.Assert.assertNull(analysisMethod38);
        org.junit.Assert.assertNull(analysisMethod40);
        org.junit.Assert.assertNull(analysisMethod41);
        org.junit.Assert.assertNull(analysisMethod43);
        org.junit.Assert.assertNull(analysisMethod44);
        org.junit.Assert.assertNull(str47);
        org.junit.Assert.assertNull(analysisMethod49);
        org.junit.Assert.assertNull(analysisMethod50);
        org.junit.Assert.assertNull(analysisMethod52);
        org.junit.Assert.assertNull(analysisMethod54);
        org.junit.Assert.assertNull(analysisMethod55);
        org.junit.Assert.assertNotNull(analyticalGroupItemArray58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(analyticalGroup61);
        org.junit.Assert.assertNull(str65);
        org.junit.Assert.assertNull(analyticalGroupType66);
        org.junit.Assert.assertNull(analyticalGroupType67);
        org.junit.Assert.assertNull(analyticalGroupType68);
        org.junit.Assert.assertNull(int70);
    }

    @Test
    public void test24046() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest48.test24046");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation();
        observation0.CustomId = "hi!";
        java.lang.String str3 = observation0.CustomId;
        observation0.CustomId = "/AQUARIUS/Acquisition/v2";
        java.time.OffsetDateTime offsetDateTime6 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation7 = observation0.setObservedTime(offsetDateTime6);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.FieldVisit fieldVisit8 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.FieldVisit();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.FieldTripSimple fieldTripSimple9 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.FieldVisit fieldVisit10 = fieldVisit8.setFieldTrip(fieldTripSimple9);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation11 = observation7.setFieldVisit(fieldVisit8);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.NumericResult numericResult12 = observation11.getNumericResult();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.NullMeasureQualifier nullMeasureQualifier13 = observation11.getNullMeasureQualifier();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "hi!" + "'", str3, "hi!");
        org.junit.Assert.assertNotNull(observation7);
        org.junit.Assert.assertNotNull(fieldVisit10);
        org.junit.Assert.assertNotNull(observation11);
        org.junit.Assert.assertNull(numericResult12);
        org.junit.Assert.assertNull(nullMeasureQualifier13);
    }

    @Test
    public void test24047() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest48.test24047");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutAccessGroup putAccessGroup0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutAccessGroup();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivity samplingPlanPlannedActivity1 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivity();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes2 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivity samplingPlanPlannedActivity3 = samplingPlanPlannedActivity1.setAuditAttributes(auditAttributes2);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes4 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes6 = auditAttributes4.setCreationUserProfileId("'.'SSSSSSS");
        samplingPlanPlannedActivity3.AuditAttributes = auditAttributes4;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes8 = samplingPlanPlannedActivity3.AuditAttributes;
        putAccessGroup0.AuditAttributes = auditAttributes8;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutAccessGroup putAccessGroup11 = putAccessGroup0.setName("MaxInstant");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutAccessGroup putAccessGroup12 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutAccessGroup();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostAccessGroup postAccessGroup13 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostAccessGroup();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationGroup[] samplingLocationGroupArray14 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationGroup[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationGroup> samplingLocationGroupList15 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationGroup>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationGroup>) samplingLocationGroupList15, samplingLocationGroupArray14);
        postAccessGroup13.SamplingLocationGroups = samplingLocationGroupList15;
        putAccessGroup12.SamplingLocationGroups = samplingLocationGroupList15;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutTag putTag19 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutTag();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlan samplingPlan20 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlan();
        samplingPlan20.SamplingLocationGroupSelectionTypeRandomCount = 0;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationGroupSelectionType samplingLocationGroupSelectionType23 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationGroupSelectionType.ALL;
        samplingPlan20.SamplingLocationGroupSelectionType = samplingLocationGroupSelectionType23;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationGroup samplingLocationGroup25 = samplingPlan20.getSamplingLocationGroup();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes26 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlan samplingPlan27 = samplingPlan20.setAuditAttributes(auditAttributes26);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutTag putTag28 = putTag19.setAuditAttributes(auditAttributes26);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutAccessGroup putAccessGroup29 = putAccessGroup12.setAuditAttributes(auditAttributes26);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostSamplingLocation postSamplingLocation30 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostSamplingLocation();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostSamplingLocation postSamplingLocation32 = postSamplingLocation30.setCustomId("hi!");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Address address33 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostSamplingLocation postSamplingLocation34 = postSamplingLocation30.setAddress(address33);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity quantity35 = postSamplingLocation34.getElevation();
        postSamplingLocation34.Longitude = "POST";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes38 = postSamplingLocation34.getAuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostAccessGroup postAccessGroup39 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostAccessGroup();
        java.lang.String str40 = postAccessGroup39.Name;
        postAccessGroup39.Id = "";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostSamplingLocation postSamplingLocation43 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostSamplingLocation();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostSamplingLocation postSamplingLocation45 = postSamplingLocation43.setCustomId("hi!");
        java.lang.String str46 = postSamplingLocation45.getName();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostSamplingLocation postSamplingLocation47 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostSamplingLocation();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostSamplingLocation postSamplingLocation49 = postSamplingLocation47.setCustomId("hi!");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Address address50 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostSamplingLocation postSamplingLocation51 = postSamplingLocation47.setAddress(address50);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity quantity52 = postSamplingLocation51.getElevation();
        postSamplingLocation51.Longitude = "POST";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes55 = postSamplingLocation51.getAuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostAccessGroup postAccessGroup56 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostAccessGroup();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationGroup[] samplingLocationGroupArray57 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationGroup[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationGroup> samplingLocationGroupList58 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationGroup>();
        boolean boolean59 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationGroup>) samplingLocationGroupList58, samplingLocationGroupArray57);
        postAccessGroup56.SamplingLocationGroups = samplingLocationGroupList58;
        postSamplingLocation51.SamplingLocationGroups = samplingLocationGroupList58;
        postSamplingLocation45.SamplingLocationGroups = samplingLocationGroupList58;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostAccessGroup postAccessGroup63 = postAccessGroup39.setSamplingLocationGroups((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationGroup>) samplingLocationGroupList58);
        postSamplingLocation34.SamplingLocationGroups = samplingLocationGroupList58;
        putAccessGroup29.SamplingLocationGroups = samplingLocationGroupList58;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostSamplingLocation postSamplingLocation66 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostSamplingLocation();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostSamplingLocation postSamplingLocation68 = postSamplingLocation66.setCustomId("hi!");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Address address69 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostSamplingLocation postSamplingLocation70 = postSamplingLocation66.setAddress(address69);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Address address71 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostSamplingLocation postSamplingLocation72 = postSamplingLocation66.setAddress(address71);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostAccessGroup postAccessGroup73 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostAccessGroup();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationGroup[] samplingLocationGroupArray74 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationGroup[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationGroup> samplingLocationGroupList75 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationGroup>();
        boolean boolean76 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationGroup>) samplingLocationGroupList75, samplingLocationGroupArray74);
        postAccessGroup73.SamplingLocationGroups = samplingLocationGroupList75;
        postSamplingLocation72.SamplingLocationGroups = samplingLocationGroupList75;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutAccessGroup putAccessGroup79 = putAccessGroup29.setSamplingLocationGroups((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationGroup>) samplingLocationGroupList75);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutAccessGroup putAccessGroup80 = putAccessGroup11.setSamplingLocationGroups((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationGroup>) samplingLocationGroupList75);
        org.junit.Assert.assertNotNull(samplingPlanPlannedActivity3);
        org.junit.Assert.assertNotNull(auditAttributes6);
        org.junit.Assert.assertNotNull(auditAttributes8);
        org.junit.Assert.assertNotNull(putAccessGroup11);
        org.junit.Assert.assertNotNull(samplingLocationGroupArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + samplingLocationGroupSelectionType23 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationGroupSelectionType.ALL + "'", samplingLocationGroupSelectionType23.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationGroupSelectionType.ALL));
        org.junit.Assert.assertNull(samplingLocationGroup25);
        org.junit.Assert.assertNotNull(samplingPlan27);
        org.junit.Assert.assertNotNull(putTag28);
        org.junit.Assert.assertNotNull(putAccessGroup29);
        org.junit.Assert.assertNotNull(postSamplingLocation32);
        org.junit.Assert.assertNotNull(postSamplingLocation34);
        org.junit.Assert.assertNull(quantity35);
        org.junit.Assert.assertNull(auditAttributes38);
        org.junit.Assert.assertNull(str40);
        org.junit.Assert.assertNotNull(postSamplingLocation45);
        org.junit.Assert.assertNull(str46);
        org.junit.Assert.assertNotNull(postSamplingLocation49);
        org.junit.Assert.assertNotNull(postSamplingLocation51);
        org.junit.Assert.assertNull(quantity52);
        org.junit.Assert.assertNull(auditAttributes55);
        org.junit.Assert.assertNotNull(samplingLocationGroupArray57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(postAccessGroup63);
        org.junit.Assert.assertNotNull(postSamplingLocation68);
        org.junit.Assert.assertNotNull(postSamplingLocation70);
        org.junit.Assert.assertNotNull(postSamplingLocation72);
        org.junit.Assert.assertNotNull(samplingLocationGroupArray74);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(putAccessGroup79);
        org.junit.Assert.assertNotNull(putAccessGroup80);
    }

    @Test
    public void test24048() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest48.test24048");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedFieldResult plannedFieldResult1 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation2 = observation0.setPlannedFieldResult(plannedFieldResult1);
        observation2.CustomId = "";
        observation2.Id = "/AQUARIUS/Provisioning/v1";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocation samplingLocation7 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocation();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricConfiguration metricConfiguration8 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricConfiguration();
        java.lang.String str9 = metricConfiguration8.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty observedProperty10 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty();
        observedProperty10.CasNumber = "MinDuration";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricConfiguration metricConfiguration13 = metricConfiguration8.setObservedProperty(observedProperty10);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultType resultType14 = observedProperty10.ResultType;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservedProperty postObservedProperty15 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservedProperty();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UnitGroup unitGroup16 = postObservedProperty15.UnitGroup;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity quantity17 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Unit unit18 = null;
        quantity17.Unit = unit18;
        postObservedProperty15.LowerLimit = quantity17;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity quantity21 = postObservedProperty15.LowerLimit;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Unit unit22 = quantity21.Unit;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty observedProperty23 = observedProperty10.setUpperLimit(quantity21);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocation samplingLocation24 = samplingLocation7.setElevation(quantity21);
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment> domainObjectAttachmentList25 = samplingLocation24.getAttachments();
        java.lang.String str26 = samplingLocation24.getHorizontalCollectionMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation27 = observation2.setSamplingLocation(samplingLocation24);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity quantity28 = samplingLocation24.Elevation;
        java.lang.String str29 = samplingLocation24.Name;
        org.junit.Assert.assertNotNull(observation2);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(metricConfiguration13);
        org.junit.Assert.assertNull(resultType14);
        org.junit.Assert.assertNull(unitGroup16);
        org.junit.Assert.assertNotNull(quantity21);
        org.junit.Assert.assertNull(unit22);
        org.junit.Assert.assertNotNull(observedProperty23);
        org.junit.Assert.assertNotNull(samplingLocation24);
        org.junit.Assert.assertNull(domainObjectAttachmentList25);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertNotNull(observation27);
        org.junit.Assert.assertNotNull(quantity28);
        org.junit.Assert.assertNull(str29);
    }

    @Test
    public void test24049() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest48.test24049");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ReferencePointPeriod referencePointPeriod0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ReferencePointPeriod();
        java.lang.String str1 = referencePointPeriod0.AppliedByUser;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ReferencePointPeriodBase referencePointPeriodBase3 = referencePointPeriod0.setIsMeasuredAgainstLocalAssumedDatum((java.lang.Boolean) true);
        java.lang.String str4 = referencePointPeriod0.ReferencePointUniqueId;
        java.time.Instant instant5 = referencePointPeriod0.ValidFrom;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ReferencePointPeriodBase referencePointPeriodBase7 = referencePointPeriod0.setMethod("/AQUARIUS/Provisioning/v1");
        java.lang.String str8 = referencePointPeriod0.getReferencePointUniqueId();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(referencePointPeriodBase3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(instant5);
        org.junit.Assert.assertNotNull(referencePointPeriodBase7);
        org.junit.Assert.assertNull(str8);
    }

    @Test
    public void test24050() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest48.test24050");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutCollectionMethod putCollectionMethod0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutCollectionMethod();
        java.lang.String str1 = putCollectionMethod0.Name;
        putCollectionMethod0.Id = "MinInstant";
        java.lang.String str4 = putCollectionMethod0.getIdentifierOrganization();
        putCollectionMethod0.Id = "http://MaxDurationhttp/json/reply/ArrayList";
        java.lang.Object obj7 = putCollectionMethod0.getResponseType();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutCollectionMethod putCollectionMethod9 = putCollectionMethod0.setIdentifierOrganization("/AQUARIUS");
        java.lang.String str10 = putCollectionMethod9.CustomId;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNotNull(obj7);
        org.junit.Assert.assertEquals(obj7.toString(), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$CollectionMethod");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj7), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$CollectionMethod");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj7), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$CollectionMethod");
        org.junit.Assert.assertNotNull(putCollectionMethod9);
        org.junit.Assert.assertNull(str10);
    }

    @Test
    public void test24051() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest48.test24051");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.TimeSeriesResponse timeSeriesResponse0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.TimeSeriesResponse();
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.TimeSeries> timeSeriesList1 = timeSeriesResponse0.Results;
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.TimeSeries> timeSeriesList2 = timeSeriesResponse0.getResults();
        org.junit.Assert.assertNull(timeSeriesList1);
        org.junit.Assert.assertNull(timeSeriesList2);
    }

    @Test
    public void test24052() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest48.test24052");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostCalculatedDerivedTimeSeries postCalculatedDerivedTimeSeries0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostCalculatedDerivedTimeSeries();
        java.lang.String str1 = postCalculatedDerivedTimeSeries0.LocationUniqueId;
        java.lang.String str2 = postCalculatedDerivedTimeSeries0.SubLocationIdentifier;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostCalculatedDerivedTimeSeries postCalculatedDerivedTimeSeries4 = postCalculatedDerivedTimeSeries0.setFormula("MaxInstant");
        postCalculatedDerivedTimeSeries0.Comment = "/AQUARIUS/Acquisition/v2://9999-12-31T23:59:59.999Z";
        postCalculatedDerivedTimeSeries0.LocationUniqueId = "MaxInstant";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostCalculatedDerivedTimeSeries postCalculatedDerivedTimeSeries10 = postCalculatedDerivedTimeSeries0.setSubLocationIdentifier("");
        java.lang.String str11 = postCalculatedDerivedTimeSeries0.SubLocationIdentifier;
        java.lang.Boolean boolean12 = postCalculatedDerivedTimeSeries0.Publish;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNotNull(postCalculatedDerivedTimeSeries4);
        org.junit.Assert.assertNotNull(postCalculatedDerivedTimeSeries10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNull(boolean12);
    }

    @Test
    public void test24053() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest48.test24053");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutAttachment putAttachment0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutAttachment();
        putAttachment0.Latitude = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutAttachment putAttachment4 = putAttachment0.setLatitude("****231224c4-98ce-4e30-bd65-1d25287c4abe****");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutAttachment putAttachment6 = putAttachment0.setFileSize((java.lang.Integer) 1);
        java.lang.String str7 = putAttachment0.Comment;
        org.junit.Assert.assertNotNull(putAttachment4);
        org.junit.Assert.assertNotNull(putAttachment6);
        org.junit.Assert.assertNull(str7);
    }

    @Test
    public void test24054() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest48.test24054");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.PostReportAttachment postReportAttachment0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.PostReportAttachment();
        postReportAttachment0.Description = "2021.4.62.0";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.PostReportAttachment postReportAttachment4 = postReportAttachment0.setLocationUniqueId("MaxInstant");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.IHttpFile iHttpFile5 = null;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.PostReportAttachment postReportAttachment6 = postReportAttachment4.setFile(iHttpFile5);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.IHttpFile iHttpFile7 = postReportAttachment6.getFile();
        org.junit.Assert.assertNotNull(postReportAttachment4);
        org.junit.Assert.assertNotNull(postReportAttachment6);
        org.junit.Assert.assertNull(iHttpFile7);
    }

    @Test
    public void test24055() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest48.test24055");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.UnitListServiceRequest unitListServiceRequest0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.UnitListServiceRequest();
        unitListServiceRequest0.GroupIdentifier = "/AQUARIUS/Acquisition/v2://9999-12-31T23:59:59.999Z";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.UnitListServiceRequest unitListServiceRequest4 = unitListServiceRequest0.setGroupIdentifier("'.'SSSSSSS");
        java.lang.String str5 = unitListServiceRequest4.getGroupIdentifier();
        java.lang.String str6 = unitListServiceRequest4.GroupIdentifier;
        java.lang.String str7 = unitListServiceRequest4.GroupIdentifier;
        org.junit.Assert.assertNotNull(unitListServiceRequest4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "'.'SSSSSSS" + "'", str5, "'.'SSSSSSS");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "'.'SSSSSSS" + "'", str6, "'.'SSSSSSS");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "'.'SSSSSSS" + "'", str7, "'.'SSSSSSS");
    }

    @Test
    public void test24056() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest48.test24056");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationExportIIV2 getObservationExportIIV2_0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationExportIIV2();
        java.util.List<java.lang.String> strList1 = getObservationExportIIV2_0.getCollectionMethodIds();
        java.util.List<java.lang.String> strList2 = getObservationExportIIV2_0.AnalyticalGroupIds;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationExportIIV2 getObservationExportIIV2_4 = getObservationExportIIV2_0.setNumericResultValue((java.lang.Double) 0.0d);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitReading fieldVisitReading5 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitReading();
        fieldVisitReading5.FieldVisitIdentifier = "MaxInstant";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitReading fieldVisitReading9 = fieldVisitReading5.setModel("multipart/form-data; boundary=****44f0772e-c3ca-4316-8e2a-61ec8540d661****");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetChartDataV2 getChartDataV2_10 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetChartDataV2();
        java.lang.String str11 = getChartDataV2_10.getActivityCustomId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetChartDataV2 getChartDataV2_13 = getChartDataV2_10.setFilterId("");
        java.util.List<java.lang.String> strList14 = getChartDataV2_10.getIds();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExtendedAttributeDropdownlistitems getExtendedAttributeDropdownlistitems15 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExtendedAttributeDropdownlistitems();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_16 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.util.List<java.lang.String> strList17 = getObservationsV2_16.SamplingContextTagIds;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_18 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray20 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList21 = new java.util.ArrayList<java.lang.String>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList21, strArray20);
        getObservationsV2_18.SpecimenIds = strList21;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags24 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray28 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList29 = new java.util.ArrayList<java.lang.String>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList29, strArray28);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags31 = putLocationTags24.setTagUniqueIds(strList29);
        getObservationsV2_18.QualityControlTypes = strList29;
        getObservationsV2_16.ResultGrades = strList29;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExtendedAttributeDropdownlistitems getExtendedAttributeDropdownlistitems34 = getExtendedAttributeDropdownlistitems15.setSearch((java.util.List<java.lang.String>) strList29);
        getChartDataV2_10.ObservedPropertyIds = strList29;
        getChartDataV2_10.SpecimenName = "MinDuration";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportObservations getExportObservations38 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportObservations();
        java.util.List<java.lang.String> strList39 = getExportObservations38.getLabReportIds();
        java.lang.String str40 = getExportObservations38.DepthUnitCustomId;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetActivityTemplates getActivityTemplates41 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetActivityTemplates();
        java.lang.Object obj42 = getActivityTemplates41.getResponseType();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_43 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray45 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList46 = new java.util.ArrayList<java.lang.String>();
        boolean boolean47 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList46, strArray45);
        getObservationsV2_43.SpecimenIds = strList46;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags49 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray53 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList54 = new java.util.ArrayList<java.lang.String>();
        boolean boolean55 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList54, strArray53);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags56 = putLocationTags49.setTagUniqueIds(strList54);
        getObservationsV2_43.QualityControlTypes = strList54;
        getActivityTemplates41.Type = strList54;
        getExportObservations38.AnalyticalGroupIds = strList54;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetChartDataV2 getChartDataV2_60 = getChartDataV2_10.setAnalysisMethodIds((java.util.List<java.lang.String>) strList54);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitReading fieldVisitReading61 = fieldVisitReading5.setQualifiers(strList54);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationExportIIV2 getObservationExportIIV2_62 = getObservationExportIIV2_0.setLabReportIds((java.util.List<java.lang.String>) strList54);
        getObservationExportIIV2_62.MaxNumericResultValue = (-1.0d);
        java.lang.String str65 = getObservationExportIIV2_62.getSort();
        getObservationExportIIV2_62.DepthUnitCustomId = "multipart/form-data; boundary=****44f0772e-c3ca-4316-8e2a-61ec8540d661****";
        java.util.List<java.lang.String> strList68 = getObservationExportIIV2_62.getSamplingLocationIds();
        org.junit.Assert.assertNull(strList1);
        org.junit.Assert.assertNull(strList2);
        org.junit.Assert.assertNotNull(getObservationExportIIV2_4);
        org.junit.Assert.assertNotNull(fieldVisitReading9);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNotNull(getChartDataV2_13);
        org.junit.Assert.assertNull(strList14);
        org.junit.Assert.assertNull(strList17);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(putLocationTags31);
        org.junit.Assert.assertNotNull(getExtendedAttributeDropdownlistitems34);
        org.junit.Assert.assertNull(strList39);
        org.junit.Assert.assertNull(str40);
        org.junit.Assert.assertNotNull(obj42);
        org.junit.Assert.assertEquals(obj42.toString(), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$SearchResultActivityTemplate");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj42), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$SearchResultActivityTemplate");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj42), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$SearchResultActivityTemplate");
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(strArray53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(putLocationTags56);
        org.junit.Assert.assertNotNull(getChartDataV2_60);
        org.junit.Assert.assertNotNull(fieldVisitReading61);
        org.junit.Assert.assertNotNull(getObservationExportIIV2_62);
        org.junit.Assert.assertNull(str65);
        org.junit.Assert.assertNull(strList68);
    }

    @Test
    public void test24057() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest48.test24057");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity pointVelocityDischargeActivity0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity();
        java.lang.String str1 = pointVelocityDischargeActivity0.SoftwareVersion;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity pointVelocityDischargeActivity3 = pointVelocityDischargeActivity0.setIsValid((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity pointVelocityDischargeActivity5 = pointVelocityDischargeActivity0.setSoftwareVersion("");
        java.lang.String str6 = pointVelocityDischargeActivity5.getManufacturer();
        pointVelocityDischargeActivity5.NumberOfPanels = 4;
        java.lang.String str9 = pointVelocityDischargeActivity5.getSuspensionWeight();
        java.lang.String str10 = pointVelocityDischargeActivity5.getFirmwareVersion();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(pointVelocityDischargeActivity3);
        org.junit.Assert.assertNotNull(pointVelocityDischargeActivity5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNull(str10);
    }

    @Test
    public void test24058() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest48.test24058");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostSamplingLocation postSamplingLocation0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostSamplingLocation();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostSamplingLocation postSamplingLocation2 = postSamplingLocation0.setCustomId("hi!");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation3 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedFieldResult plannedFieldResult4 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation5 = observation3.setPlannedFieldResult(plannedFieldResult4);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabInstruction labInstruction6 = null;
        observation5.LabInstruction = labInstruction6;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationStatistics observationStatistics8 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation9 = observation5.setStatistics(observationStatistics8);
        java.time.OffsetDateTime offsetDateTime10 = observation9.getResultTime();
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple> importHistoryEventSimpleList11 = observation9.ImportHistoryEventSimples;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty observedProperty12 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation13 = observation9.setObservedProperty(observedProperty12);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultGrade resultGrade14 = observation13.ResultGrade;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails15 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails17 = labResultDetails15.setAnalysisComment("/AQUARIUS/Acquisition/v2");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes18 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails19 = labResultDetails17.setAuditAttributes(auditAttributes18);
        observation13.AuditAttributes = auditAttributes18;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostSamplingLocation postSamplingLocation21 = postSamplingLocation2.setAuditAttributes(auditAttributes18);
        java.lang.String str22 = postSamplingLocation21.Latitude;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostSamplingLocation postSamplingLocation23 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostSamplingLocation();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostSamplingLocation postSamplingLocation25 = postSamplingLocation23.setCustomId("hi!");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Address address26 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostSamplingLocation postSamplingLocation27 = postSamplingLocation23.setAddress(address26);
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple> importHistoryEventSimpleList28 = postSamplingLocation27.ImportHistoryEventSimples;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Address address29 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Address();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Address address31 = address29.setStreetName("2021.8.9990");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostSamplingLocation postSamplingLocation32 = postSamplingLocation27.setAddress(address29);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Address address34 = address29.setStreetName("MinInstant");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostSamplingLocation postSamplingLocation35 = postSamplingLocation21.setAddress(address29);
        java.lang.String str36 = address29.StateProvinceCode;
        java.lang.String str37 = address29.StateProvinceCode;
        org.junit.Assert.assertNotNull(postSamplingLocation2);
        org.junit.Assert.assertNotNull(observation5);
        org.junit.Assert.assertNotNull(observation9);
        org.junit.Assert.assertNull(offsetDateTime10);
        org.junit.Assert.assertNull(importHistoryEventSimpleList11);
        org.junit.Assert.assertNotNull(observation13);
        org.junit.Assert.assertNull(resultGrade14);
        org.junit.Assert.assertNotNull(labResultDetails17);
        org.junit.Assert.assertNotNull(labResultDetails19);
        org.junit.Assert.assertNotNull(postSamplingLocation21);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertNotNull(postSamplingLocation25);
        org.junit.Assert.assertNotNull(postSamplingLocation27);
        org.junit.Assert.assertNull(importHistoryEventSimpleList28);
        org.junit.Assert.assertNotNull(address31);
        org.junit.Assert.assertNotNull(postSamplingLocation32);
        org.junit.Assert.assertNotNull(address34);
        org.junit.Assert.assertNotNull(postSamplingLocation35);
        org.junit.Assert.assertNull(str36);
        org.junit.Assert.assertNull(str37);
    }

    @Test
    public void test24059() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest48.test24059");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDescription timeSeriesDescription0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDescription();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest1 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest();
        java.lang.Object obj2 = timeAlignedDataServiceRequest1.getResponseType();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse3 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant4 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse5 = locationDescriptionListServiceResponse3.setNextToken(instant4);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest6 = timeAlignedDataServiceRequest1.setQueryFrom(instant4);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDescription timeSeriesDescription7 = timeSeriesDescription0.setRawStartTime(instant4);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDescription timeSeriesDescription9 = timeSeriesDescription7.setSubLocationIdentifier("");
        java.lang.String str10 = timeSeriesDescription7.getComputationIdentifier();
        java.lang.String str11 = timeSeriesDescription7.Unit;
        org.junit.Assert.assertNotNull(obj2);
        org.junit.Assert.assertEquals(obj2.toString(), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj2), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj2), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertNotNull(instant4);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse5);
        org.junit.Assert.assertNotNull(timeAlignedDataServiceRequest6);
        org.junit.Assert.assertNotNull(timeSeriesDescription7);
        org.junit.Assert.assertNotNull(timeSeriesDescription9);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNull(str11);
    }

    @Test
    public void test24060() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest48.test24060");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Adjustment adjustment0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Adjustment();
        java.lang.Double double1 = adjustment0.getAdjustmentAmount();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Adjustment adjustment3 = adjustment0.setAdjustmentAmount((java.lang.Double) 0.0d);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ReasonForAdjustmentType reasonForAdjustmentType4 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ReasonForAdjustmentType.Unspecified;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Adjustment adjustment5 = adjustment0.setReasonForAdjustment(reasonForAdjustmentType4);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ReasonForAdjustmentType reasonForAdjustmentType6 = adjustment0.getReasonForAdjustment();
        org.junit.Assert.assertNull(double1);
        org.junit.Assert.assertNotNull(adjustment3);
        org.junit.Assert.assertTrue("'" + reasonForAdjustmentType4 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ReasonForAdjustmentType.Unspecified + "'", reasonForAdjustmentType4.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ReasonForAdjustmentType.Unspecified));
        org.junit.Assert.assertNotNull(adjustment5);
        org.junit.Assert.assertTrue("'" + reasonForAdjustmentType6 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ReasonForAdjustmentType.Unspecified + "'", reasonForAdjustmentType6.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ReasonForAdjustmentType.Unspecified));
    }

    @Test
    public void test24061() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest48.test24061");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CrossSectionSurveyActivity crossSectionSurveyActivity0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CrossSectionSurveyActivity();
        java.time.Instant instant1 = crossSectionSurveyActivity0.StartTime;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity pointVelocityDischargeActivity2 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity();
        java.lang.String str3 = pointVelocityDischargeActivity2.SoftwareVersion;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity pointVelocityDischargeActivity5 = pointVelocityDischargeActivity2.setIsValid((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity pointVelocityDischargeActivity7 = pointVelocityDischargeActivity2.setSoftwareVersion("");
        java.lang.String str8 = pointVelocityDischargeActivity7.getManufacturer();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.StartPointType startPointType9 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.StartPointType.Unspecified;
        pointVelocityDischargeActivity7.StartPoint = startPointType9;
        crossSectionSurveyActivity0.StartingPoint = startPointType9;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CrossSectionPoint crossSectionPoint12 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CrossSectionPoint();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay13 = null;
        crossSectionPoint12.Distance = quantityWithDisplay13;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay15 = null;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CrossSectionPoint crossSectionPoint16 = crossSectionPoint12.setElevation(quantityWithDisplay15);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CrossSectionPoint crossSectionPoint17 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CrossSectionPoint();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay18 = null;
        crossSectionPoint17.Distance = quantityWithDisplay18;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay20 = null;
        crossSectionPoint17.Distance = quantityWithDisplay20;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CrossSectionPoint crossSectionPoint22 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CrossSectionPoint();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay23 = null;
        crossSectionPoint22.Distance = quantityWithDisplay23;
        crossSectionPoint22.PointOrder = 1;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay27 = null;
        crossSectionPoint22.Depth = quantityWithDisplay27;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CrossSectionPoint crossSectionPoint29 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CrossSectionPoint();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay30 = null;
        crossSectionPoint29.Distance = quantityWithDisplay30;
        crossSectionPoint29.PointOrder = 1;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay34 = crossSectionPoint29.getElevation();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CrossSectionPoint crossSectionPoint36 = crossSectionPoint29.setComments("hi!");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CrossSectionPoint crossSectionPoint37 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CrossSectionPoint();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay38 = null;
        crossSectionPoint37.Distance = quantityWithDisplay38;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay40 = null;
        crossSectionPoint37.Distance = quantityWithDisplay40;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CrossSectionPoint crossSectionPoint42 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CrossSectionPoint();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay43 = null;
        crossSectionPoint42.Distance = quantityWithDisplay43;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CrossSectionPoint crossSectionPoint45 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CrossSectionPoint();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay46 = null;
        crossSectionPoint45.Distance = quantityWithDisplay46;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay48 = null;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CrossSectionPoint crossSectionPoint49 = crossSectionPoint45.setElevation(quantityWithDisplay48);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CrossSectionPoint crossSectionPoint50 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CrossSectionPoint();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CrossSectionPoint crossSectionPoint51 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CrossSectionPoint();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay52 = null;
        crossSectionPoint51.Distance = quantityWithDisplay52;
        crossSectionPoint51.PointOrder = 1;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay56 = crossSectionPoint51.getElevation();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CrossSectionPoint crossSectionPoint58 = crossSectionPoint51.setComments("hi!");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CrossSectionPoint crossSectionPoint60 = crossSectionPoint51.setComments("2021.4.62.0");
        java.lang.String str61 = crossSectionPoint60.getComments();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CrossSectionPoint[] crossSectionPointArray62 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CrossSectionPoint[] { crossSectionPoint12, crossSectionPoint17, crossSectionPoint22, crossSectionPoint29, crossSectionPoint37, crossSectionPoint42, crossSectionPoint45, crossSectionPoint50, crossSectionPoint60 };
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CrossSectionPoint> crossSectionPointList63 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CrossSectionPoint>();
        boolean boolean64 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CrossSectionPoint>) crossSectionPointList63, crossSectionPointArray62);
        crossSectionSurveyActivity0.CrossSectionPoints = crossSectionPointList63;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity pointVelocityDischargeActivity66 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity();
        java.lang.String str67 = pointVelocityDischargeActivity66.getModel();
        java.lang.String str68 = pointVelocityDischargeActivity66.getFirmwareVersion();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay69 = null;
        pointVelocityDischargeActivity66.Width = quantityWithDisplay69;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.StartPointType startPointType71 = null;
        pointVelocityDischargeActivity66.StartPoint = startPointType71;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay73 = pointVelocityDischargeActivity66.Width;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CrossSectionSurveyActivity crossSectionSurveyActivity74 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CrossSectionSurveyActivity();
        java.time.Instant instant75 = crossSectionSurveyActivity74.StartTime;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity pointVelocityDischargeActivity76 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity();
        java.lang.String str77 = pointVelocityDischargeActivity76.SoftwareVersion;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity pointVelocityDischargeActivity79 = pointVelocityDischargeActivity76.setIsValid((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity pointVelocityDischargeActivity81 = pointVelocityDischargeActivity76.setSoftwareVersion("");
        java.lang.String str82 = pointVelocityDischargeActivity81.getManufacturer();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.StartPointType startPointType83 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.StartPointType.Unspecified;
        pointVelocityDischargeActivity81.StartPoint = startPointType83;
        crossSectionSurveyActivity74.StartingPoint = startPointType83;
        pointVelocityDischargeActivity66.StartPoint = startPointType83;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CrossSectionSurveyActivity crossSectionSurveyActivity87 = crossSectionSurveyActivity0.setStartingPoint(startPointType83);
        crossSectionSurveyActivity0.RelativeLocation = "multipart/form-data; boundary=****ee0ec537-fde4-45ee-9c35-68c37cf65c1c****";
        org.junit.Assert.assertNull(instant1);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(pointVelocityDischargeActivity5);
        org.junit.Assert.assertNotNull(pointVelocityDischargeActivity7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertTrue("'" + startPointType9 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.StartPointType.Unspecified + "'", startPointType9.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.StartPointType.Unspecified));
        org.junit.Assert.assertNotNull(crossSectionPoint16);
        org.junit.Assert.assertNull(quantityWithDisplay34);
        org.junit.Assert.assertNotNull(crossSectionPoint36);
        org.junit.Assert.assertNotNull(crossSectionPoint49);
        org.junit.Assert.assertNull(quantityWithDisplay56);
        org.junit.Assert.assertNotNull(crossSectionPoint58);
        org.junit.Assert.assertNotNull(crossSectionPoint60);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "2021.4.62.0" + "'", str61, "2021.4.62.0");
        org.junit.Assert.assertNotNull(crossSectionPointArray62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertNull(str67);
        org.junit.Assert.assertNull(str68);
        org.junit.Assert.assertNull(quantityWithDisplay73);
        org.junit.Assert.assertNull(instant75);
        org.junit.Assert.assertNull(str77);
        org.junit.Assert.assertNotNull(pointVelocityDischargeActivity79);
        org.junit.Assert.assertNotNull(pointVelocityDischargeActivity81);
        org.junit.Assert.assertNull(str82);
        org.junit.Assert.assertTrue("'" + startPointType83 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.StartPointType.Unspecified + "'", startPointType83.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.StartPointType.Unspecified));
        org.junit.Assert.assertNotNull(crossSectionSurveyActivity87);
    }

    @Test
    public void test24062() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest48.test24062");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObservation importItemObservation0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObservation();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest1 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest();
        java.lang.Object obj2 = timeAlignedDataServiceRequest1.getResponseType();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse3 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant4 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse5 = locationDescriptionListServiceResponse3.setNextToken(instant4);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest6 = timeAlignedDataServiceRequest1.setQueryFrom(instant4);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags7 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray11 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList12 = new java.util.ArrayList<java.lang.String>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList12, strArray11);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags14 = putLocationTags7.setTagUniqueIds(strList12);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest15 = timeAlignedDataServiceRequest1.setTimeSeriesOutputUnitIds(strList12);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObservation importItemObservation16 = importItemObservation0.setFields((java.util.List<java.lang.String>) strList12);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation17 = importItemObservation16.Item;
        java.util.List<java.lang.String> strList18 = importItemObservation16.WarningMessages;
        org.junit.Assert.assertNotNull(obj2);
        org.junit.Assert.assertEquals(obj2.toString(), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj2), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj2), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertNotNull(instant4);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse5);
        org.junit.Assert.assertNotNull(timeAlignedDataServiceRequest6);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(putLocationTags14);
        org.junit.Assert.assertNotNull(timeAlignedDataServiceRequest15);
        org.junit.Assert.assertNotNull(importItemObservation16);
        org.junit.Assert.assertNull(observation17);
        org.junit.Assert.assertNull(strList18);
    }

    @Test
    public void test24063() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest48.test24063");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SearchResultLabReport searchResultLabReport0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SearchResultLabReport();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SearchResultLabReport searchResultLabReport2 = searchResultLabReport0.setCursor("POST");
        java.lang.String str3 = searchResultLabReport2.Cursor;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SearchResultLabReport searchResultLabReport5 = searchResultLabReport2.setCursor("ZZZZZ");
        java.lang.String str6 = searchResultLabReport5.Cursor;
        java.lang.Integer int7 = searchResultLabReport5.getTotalCount();
        org.junit.Assert.assertNotNull(searchResultLabReport2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "POST" + "'", str3, "POST");
        org.junit.Assert.assertNotNull(searchResultLabReport5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "ZZZZZ" + "'", str6, "ZZZZZ");
        org.junit.Assert.assertNull(int7);
    }

    @Test
    public void test24064() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest48.test24064");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.GageHeightAtZeroFlowActivity gageHeightAtZeroFlowActivity0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.GageHeightAtZeroFlowActivity();
        java.time.Instant instant1 = null;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.GageHeightAtZeroFlowActivity gageHeightAtZeroFlowActivity2 = gageHeightAtZeroFlowActivity0.setApplicableSince(instant1);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.GageHeightAtZeroFlowActivity gageHeightAtZeroFlowActivity4 = gageHeightAtZeroFlowActivity2.setIsObserved((java.lang.Boolean) true);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CalibrationCheck calibrationCheck5 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CalibrationCheck();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CalibrationCheckType calibrationCheckType6 = calibrationCheck5.getCalibrationCheckType();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay7 = calibrationCheck5.Value;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse8 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary9 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary11 = dischargeSummary9.setPublish((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse12 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant13 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse14 = locationDescriptionListServiceResponse12.setNextToken(instant13);
        dischargeSummary9.MeasurementTime = instant13;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse16 = locationDescriptionListServiceResponse8.setNextToken(instant13);
        java.time.Instant instant17 = locationDescriptionListServiceResponse8.getNextToken();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CalibrationCheck calibrationCheck18 = calibrationCheck5.setTime(instant17);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Reading reading19 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Reading();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary20 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary22 = dischargeSummary20.setPublish((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay23 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay();
        dischargeSummary22.DifferenceDuringVisit = doubleWithDisplay23;
        reading19.Value = doubleWithDisplay23;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CalibrationCheck calibrationCheck26 = calibrationCheck18.setValue(doubleWithDisplay23);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CalibrationCheck calibrationCheck28 = calibrationCheck18.setSubLocationIdentifier("-PT87591240H");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay29 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay();
        calibrationCheck18.Difference = doubleWithDisplay29;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.GageHeightAtZeroFlowActivity gageHeightAtZeroFlowActivity31 = gageHeightAtZeroFlowActivity4.setZeroFlowHeight(doubleWithDisplay29);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.GageHeightAtZeroFlowActivity gageHeightAtZeroFlowActivity33 = gageHeightAtZeroFlowActivity4.setIsValid((java.lang.Boolean) true);
        java.lang.Boolean boolean34 = gageHeightAtZeroFlowActivity4.getIsValid();
        java.lang.Boolean boolean35 = gageHeightAtZeroFlowActivity4.getIsObserved();
        java.lang.String str36 = gageHeightAtZeroFlowActivity4.getUnit();
        org.junit.Assert.assertNotNull(gageHeightAtZeroFlowActivity2);
        org.junit.Assert.assertNotNull(gageHeightAtZeroFlowActivity4);
        org.junit.Assert.assertNull(calibrationCheckType6);
        org.junit.Assert.assertNull(doubleWithDisplay7);
        org.junit.Assert.assertNotNull(dischargeSummary11);
        org.junit.Assert.assertNotNull(instant13);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse14);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse16);
        org.junit.Assert.assertNotNull(instant17);
        org.junit.Assert.assertNotNull(calibrationCheck18);
        org.junit.Assert.assertNotNull(dischargeSummary22);
        org.junit.Assert.assertNotNull(calibrationCheck26);
        org.junit.Assert.assertNotNull(calibrationCheck28);
        org.junit.Assert.assertNotNull(gageHeightAtZeroFlowActivity31);
        org.junit.Assert.assertNotNull(gageHeightAtZeroFlowActivity33);
        org.junit.Assert.assertEquals("'" + boolean34 + "' != '" + true + "'", boolean34, true);
        org.junit.Assert.assertEquals("'" + boolean35 + "' != '" + true + "'", boolean35, true);
        org.junit.Assert.assertNull(str36);
    }

    @Test
    public void test24065() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest48.test24065");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Vertical vertical0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Vertical();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Vertical vertical2 = vertical0.setPercentageOfTotalDischarge((java.lang.Double) 100.0d);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay3 = vertical2.getSegmentWidth();
        java.lang.Double double4 = vertical2.CosineOfUniqueFlow;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.OpenWaterData openWaterData5 = null;
        vertical2.OpenWaterData = openWaterData5;
        java.time.Instant instant7 = vertical2.getMeasurementTime();
        org.junit.Assert.assertNotNull(vertical2);
        org.junit.Assert.assertNull(quantityWithDisplay3);
        org.junit.Assert.assertNull(double4);
        org.junit.Assert.assertNull(instant7);
    }

    @Test
    public void test24066() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest48.test24066");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SearchResultExtendedAttributeListItem searchResultExtendedAttributeListItem0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SearchResultExtendedAttributeListItem();
        searchResultExtendedAttributeListItem0.TotalCount = 10;
        searchResultExtendedAttributeListItem0.Cursor = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSSSSSZZZZZ";
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttributeListItem> extendedAttributeListItemList5 = searchResultExtendedAttributeListItem0.getDomainObjects();
        org.junit.Assert.assertNull(extendedAttributeListItemList5);
    }

    @Test
    public void test24067() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest48.test24067");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Inspection inspection0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Inspection();
        inspection0.Manufacturer = "MinDuration";
        java.lang.String str3 = inspection0.SerialNumber;
        java.time.Instant instant4 = inspection0.Time;
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(instant4);
    }

    @Test
    public void test24068() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest48.test24068");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutAnalyticalGroup putAnalyticalGroup0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutAnalyticalGroup();
        java.lang.Object obj1 = putAnalyticalGroup0.getResponseType();
        java.lang.Integer int2 = putAnalyticalGroup0.getNumberOfAnalysisMethodsInGroupItems();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupType analyticalGroupType3 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupType.KNOWN;
        putAnalyticalGroup0.Type = analyticalGroupType3;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroup analyticalGroup5 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroup();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupType analyticalGroupType6 = analyticalGroup5.getType();
        java.lang.String str7 = analyticalGroup5.Name;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem analyticalGroupItem8 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod9 = analyticalGroupItem8.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod10 = analyticalGroupItem8.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod11 = null;
        analyticalGroupItem8.AnalysisMethod = analysisMethod11;
        java.lang.String str13 = analyticalGroupItem8.getHoldingTime();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod14 = analyticalGroupItem8.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem[] analyticalGroupItemArray15 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem[] { analyticalGroupItem8 };
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem> analyticalGroupItemList16 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem>) analyticalGroupItemList16, analyticalGroupItemArray15);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroup analyticalGroup18 = analyticalGroup5.setAnalyticalGroupItems((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem>) analyticalGroupItemList16);
        putAnalyticalGroup0.AnalyticalGroupItems = analyticalGroupItemList16;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutAnalyticalGroup putAnalyticalGroup21 = putAnalyticalGroup0.setId("multipart/form-data; boundary=****59879c02-0839-4b96-bc41-a13ebb706be4****");
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem> analyticalGroupItemList22 = putAnalyticalGroup0.getAnalyticalGroupItems();
        org.junit.Assert.assertNotNull(obj1);
        org.junit.Assert.assertEquals(obj1.toString(), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$AnalyticalGroup");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj1), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$AnalyticalGroup");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj1), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$AnalyticalGroup");
        org.junit.Assert.assertNull(int2);
        org.junit.Assert.assertTrue("'" + analyticalGroupType3 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupType.KNOWN + "'", analyticalGroupType3.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupType.KNOWN));
        org.junit.Assert.assertNull(analyticalGroupType6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(analysisMethod9);
        org.junit.Assert.assertNull(analysisMethod10);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNull(analysisMethod14);
        org.junit.Assert.assertNotNull(analyticalGroupItemArray15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(analyticalGroup18);
        org.junit.Assert.assertNotNull(putAnalyticalGroup21);
        org.junit.Assert.assertNotNull(analyticalGroupItemList22);
    }

    @Test
    public void test24069() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest48.test24069");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutAnalyticalGroup putAnalyticalGroup0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutAnalyticalGroup();
        java.lang.Object obj1 = putAnalyticalGroup0.getResponseType();
        putAnalyticalGroup0.Name = "-PT87591240H";
        java.lang.String str4 = putAnalyticalGroup0.getDescription();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupType analyticalGroupType5 = putAnalyticalGroup0.getType();
        org.junit.Assert.assertNotNull(obj1);
        org.junit.Assert.assertEquals(obj1.toString(), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$AnalyticalGroup");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj1), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$AnalyticalGroup");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj1), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$AnalyticalGroup");
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(analyticalGroupType5);
    }

    @Test
    public void test24070() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest48.test24070");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.GetAuthTokenServiceRequest getAuthTokenServiceRequest0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.GetAuthTokenServiceRequest();
        java.lang.String str1 = getAuthTokenServiceRequest0.getUsername();
        getAuthTokenServiceRequest0.EncryptedPassword = "/AQUARIUS/Acquisition/v2://9999-12-31T23:59:59.999Z";
        java.lang.String str4 = getAuthTokenServiceRequest0.getUsername();
        java.lang.String str5 = getAuthTokenServiceRequest0.getLocale();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(str5);
    }

    @Test
    public void test24071() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest48.test24071");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutUnit putUnit0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutUnit();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutUnit putUnit2 = putUnit0.setName("MinInstant");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UnitGroup unitGroup3 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UnitGroup();
        unitGroup3.CustomId = "https";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UnitGroupSystemCodeType unitGroupSystemCodeType6 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UnitGroup unitGroup7 = unitGroup3.setSystemCode(unitGroupSystemCodeType6);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutUnit putUnit8 = putUnit2.setUnitGroup(unitGroup7);
        putUnit8.BaseMultiplier = (-1.0d);
        java.lang.String str11 = putUnit8.Id;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutUnit putUnit13 = putUnit8.setId("yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSSSSSZZZZZ");
        org.junit.Assert.assertNotNull(putUnit2);
        org.junit.Assert.assertNotNull(unitGroup7);
        org.junit.Assert.assertNotNull(putUnit8);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNotNull(putUnit13);
    }

    @Test
    public void test24072() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest48.test24072");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutLabReport putLabReport0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutLabReport();
        java.lang.String str1 = putLabReport0.getId();
        java.time.OffsetDateTime offsetDateTime2 = null;
        putLabReport0.DateReceived = offsetDateTime2;
        putLabReport0.QcSummary = "/AQUARIUS/Acquisition/v2";
        org.junit.Assert.assertNull(str1);
    }

    @Test
    public void test24073() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest48.test24073");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportObservations getExportObservations0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportObservations();
        java.util.List<java.lang.String> strList1 = getExportObservations0.getLabReportIds();
        java.lang.String str2 = getExportObservations0.DepthUnitCustomId;
        java.util.List<java.lang.String> strList3 = getExportObservations0.getSearch();
        java.util.List<java.lang.String> strList4 = getExportObservations0.LabResultLaboratoryIds;
        java.util.List<java.lang.String> strList5 = getExportObservations0.getSpecimenIds();
        getExportObservations0.MinNumericResultValue = 100.0d;
        java.lang.Double double8 = getExportObservations0.NumericResultValue;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetActivities getActivities9 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetActivities();
        getActivities9.Limit = 10;
        java.util.List<java.lang.String> strList12 = getActivities9.ActivityTemplateId;
        java.lang.String str13 = getActivities9.Sort;
        java.util.List<java.lang.String> strList14 = getActivities9.CollectionMethodIds;
        java.lang.String str15 = getActivities9.getCustomId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetSpecimens getSpecimens16 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetSpecimens();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutUserV2 putUserV2_17 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutUserV2();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UserType userType18 = putUserV2_17.UserType;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetActivities getActivities19 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetActivities();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse20 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary21 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary23 = dischargeSummary21.setPublish((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse24 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant25 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse26 = locationDescriptionListServiceResponse24.setNextToken(instant25);
        dischargeSummary21.MeasurementTime = instant25;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse28 = locationDescriptionListServiceResponse20.setNextToken(instant25);
        java.time.Instant instant29 = locationDescriptionListServiceResponse20.getNextToken();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetActivities getActivities30 = getActivities19.setToStartTime(instant29);
        java.lang.String str31 = getActivities30.getSort();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_32 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.util.List<java.lang.String> strList33 = getObservationsV2_32.SamplingContextTagIds;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_34 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray36 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList37 = new java.util.ArrayList<java.lang.String>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList37, strArray36);
        getObservationsV2_34.SpecimenIds = strList37;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags40 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray44 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList45 = new java.util.ArrayList<java.lang.String>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList45, strArray44);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags47 = putLocationTags40.setTagUniqueIds(strList45);
        getObservationsV2_34.QualityControlTypes = strList45;
        getObservationsV2_32.ResultGrades = strList45;
        getActivities30.Media = strList45;
        putUserV2_17.AccessGroups = strList45;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetSpecimens getSpecimens52 = getSpecimens16.setSamplingLocationIds((java.util.List<java.lang.String>) strList45);
        getActivities9.ActivityTemplateId = strList45;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportObservations getExportObservations54 = getExportObservations0.setProjectIds((java.util.List<java.lang.String>) strList45);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.FieldResultType fieldResultType55 = getExportObservations54.FieldResultType;
        java.lang.Integer int56 = getExportObservations54.Limit;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DeleteObservationsV2 deleteObservationsV2_57 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DeleteObservationsV2();
        java.util.List<java.lang.String> strList58 = deleteObservationsV2_57.SamplingLocationIds;
        deleteObservationsV2_57.MinNumericResultValue = 100.0d;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DeleteObservationsV2 deleteObservationsV2_62 = deleteObservationsV2_57.setFieldVisitId("MinInstant");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.LocationDatumPeriod locationDatumPeriod63 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.LocationDatumPeriod();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.LocationDatumPeriodBase locationDatumPeriodBase65 = locationDatumPeriod63.setComment("'.'SSSSSSS");
        java.lang.String str66 = locationDatumPeriodBase65.Method;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse67 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant68 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse69 = locationDescriptionListServiceResponse67.setNextToken(instant68);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.LocationDatumPeriodBase locationDatumPeriodBase70 = locationDatumPeriodBase65.setValidFrom(instant68);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DeleteObservationsV2 deleteObservationsV2_71 = deleteObservationsV2_57.setStartResultTime(instant68);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportObservations getExportObservations72 = getExportObservations54.setStartModificationTime(instant68);
        java.lang.Double double73 = getExportObservations72.getDepthValue();
        org.junit.Assert.assertNull(strList1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(strList3);
        org.junit.Assert.assertNull(strList4);
        org.junit.Assert.assertNull(strList5);
        org.junit.Assert.assertNull(double8);
        org.junit.Assert.assertNull(strList12);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNull(strList14);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNull(userType18);
        org.junit.Assert.assertNotNull(dischargeSummary23);
        org.junit.Assert.assertNotNull(instant25);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse26);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse28);
        org.junit.Assert.assertNotNull(instant29);
        org.junit.Assert.assertNotNull(getActivities30);
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertNull(strList33);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(strArray44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(putLocationTags47);
        org.junit.Assert.assertNotNull(getSpecimens52);
        org.junit.Assert.assertNotNull(getExportObservations54);
        org.junit.Assert.assertNull(fieldResultType55);
        org.junit.Assert.assertNull(int56);
        org.junit.Assert.assertNull(strList58);
        org.junit.Assert.assertNotNull(deleteObservationsV2_62);
        org.junit.Assert.assertNotNull(locationDatumPeriodBase65);
        org.junit.Assert.assertNull(str66);
        org.junit.Assert.assertNotNull(instant68);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse69);
        org.junit.Assert.assertNotNull(locationDatumPeriodBase70);
        org.junit.Assert.assertNotNull(deleteObservationsV2_71);
        org.junit.Assert.assertNotNull(getExportObservations72);
        org.junit.Assert.assertNull(double73);
    }

    @Test
    public void test24074() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest48.test24074");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetAnalysisMethods getAnalysisMethods0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetAnalysisMethods();
        java.lang.String str1 = getAnalysisMethods0.Context;
        java.util.List<java.lang.String> strList2 = getAnalysisMethods0.ObservedPropertyIds;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags3 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray7 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList8 = new java.util.ArrayList<java.lang.String>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList8, strArray7);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags10 = putLocationTags3.setTagUniqueIds(strList8);
        java.util.ArrayList<java.lang.String> strList11 = putLocationTags10.TagUniqueIds;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetAnalysisMethods getAnalysisMethods12 = getAnalysisMethods0.setObservedPropertyIds((java.util.List<java.lang.String>) strList11);
        java.lang.String str13 = getAnalysisMethods0.Context;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetAnalysisMethods getAnalysisMethods15 = getAnalysisMethods0.setContext("/AQUARIUS/Publish/v2");
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(strList2);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(putLocationTags10);
        org.junit.Assert.assertNotNull(strList11);
        org.junit.Assert.assertNotNull(getAnalysisMethods12);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNotNull(getAnalysisMethods15);
    }

    @Test
    public void test24075() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest48.test24075");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutBulkEditResultGradesV2 putBulkEditResultGradesV2_0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutBulkEditResultGradesV2();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RoleFlattened roleFlattened1 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RoleFlattened();
        java.lang.Boolean boolean2 = roleFlattened1.CanRemoveFieldVisits;
        roleFlattened1.Name = "MaxInstant";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationType putLocationType5 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationType();
        java.lang.String str6 = putLocationType5.Description;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_7 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray10 = new java.lang.String[] { "", "" };
        java.util.ArrayList<java.lang.String> strList11 = new java.util.ArrayList<java.lang.String>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList11, strArray10);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_13 = getObservationsV2_7.setDataClassifications((java.util.List<java.lang.String>) strList11);
        getObservationsV2_13.DepthUnitCustomId = "hi!";
        java.lang.String str16 = getObservationsV2_13.CustomId;
        java.util.List<java.lang.String> strList17 = getObservationsV2_13.getSearch();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_18 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray20 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList21 = new java.util.ArrayList<java.lang.String>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList21, strArray20);
        getObservationsV2_18.SpecimenIds = strList21;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags24 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray28 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList29 = new java.util.ArrayList<java.lang.String>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList29, strArray28);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags31 = putLocationTags24.setTagUniqueIds(strList29);
        getObservationsV2_18.QualityControlTypes = strList29;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_33 = getObservationsV2_13.setMedia((java.util.List<java.lang.String>) strList29);
        putLocationType5.ExtendedAttributeDefinitionIds = strList29;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RoleFlattenedBase roleFlattenedBase35 = roleFlattened1.setRoleApprovalTransitions(strList29);
        putBulkEditResultGradesV2_0.ResultGrades = strList29;
        java.lang.String str37 = putBulkEditResultGradesV2_0.FieldVisitId;
        java.util.List<java.lang.String> strList38 = putBulkEditResultGradesV2_0.getIds();
        putBulkEditResultGradesV2_0.ImportHistoryEventId = "";
        putBulkEditResultGradesV2_0.DepthUnitId = "http://MaxDurationhttp/json/reply/String";
        putBulkEditResultGradesV2_0.NumericResultValue = 0.0d;
        putBulkEditResultGradesV2_0.DepthUnitCustomId = "'.'SSSSSSS://multipart/form-data; boundary=****e0afd3ef-ab93-4371-a368-4a6f5ef58c71****";
        java.lang.String str47 = putBulkEditResultGradesV2_0.DetectionCondition;
        java.lang.String str48 = putBulkEditResultGradesV2_0.getFieldVisitId();
        java.util.List<java.lang.String> strList49 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutBulkEditResultGradesV2 putBulkEditResultGradesV2_50 = putBulkEditResultGradesV2_0.setSamplingLocationIds(strList49);
        org.junit.Assert.assertNull(boolean2);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(getObservationsV2_13);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNull(strList17);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(putLocationTags31);
        org.junit.Assert.assertNotNull(getObservationsV2_33);
        org.junit.Assert.assertNotNull(roleFlattenedBase35);
        org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertNull(strList38);
        org.junit.Assert.assertNull(str47);
        org.junit.Assert.assertNull(str48);
        org.junit.Assert.assertNotNull(putBulkEditResultGradesV2_50);
    }

    @Test
    public void test24076() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest48.test24076");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetChartDataV2 getChartDataV2_0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetChartDataV2();
        java.util.List<java.lang.String> strList1 = getChartDataV2_0.getProjectIds();
        java.util.List<java.lang.String> strList2 = getChartDataV2_0.ActivityTypes;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationTagListServiceResponse locationTagListServiceResponse3 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationTagListServiceResponse();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.NameTagDefinition[] nameTagDefinitionArray4 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.NameTagDefinition[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.NameTagDefinition> nameTagDefinitionList5 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.NameTagDefinition>();
        boolean boolean6 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.NameTagDefinition>) nameTagDefinitionList5, nameTagDefinitionArray4);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationTagListServiceResponse locationTagListServiceResponse7 = locationTagListServiceResponse3.setTags(nameTagDefinitionList5);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary8 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary10 = dischargeSummary8.setPublish((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse11 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant12 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse13 = locationDescriptionListServiceResponse11.setNextToken(instant12);
        dischargeSummary8.MeasurementTime = instant12;
        locationTagListServiceResponse3.ResponseTime = instant12;
        getChartDataV2_0.StartResultTime = instant12;
        java.util.List<java.lang.String> strList17 = getChartDataV2_0.ObservedPropertyIds;
        org.junit.Assert.assertNull(strList1);
        org.junit.Assert.assertNull(strList2);
        org.junit.Assert.assertNotNull(nameTagDefinitionArray4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(locationTagListServiceResponse7);
        org.junit.Assert.assertNotNull(dischargeSummary10);
        org.junit.Assert.assertNotNull(instant12);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse13);
        org.junit.Assert.assertNull(strList17);
    }

    @Test
    public void test24077() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest48.test24077");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TagMetadata tagMetadata0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TagMetadata();
        tagMetadata0.Name = "ZZZZZ";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TagMetadata tagMetadata4 = tagMetadata0.setValue("");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TagMetadata tagMetadata6 = tagMetadata4.setKey("http:///AQUARIUS/Acquisition/v2multipart/form-data; boundary=****44f0772e-c3ca-4316-8e2a-61ec8540d661****/v1/observedproperties/{id}/categoricalvalues");
        org.junit.Assert.assertNotNull(tagMetadata4);
        org.junit.Assert.assertNotNull(tagMetadata6);
    }

    @Test
    public void test24078() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest48.test24078");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ControlConditionActivity controlConditionActivity1 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ControlConditionActivity();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ControlCleanedType controlCleanedType2 = null;
        controlConditionActivity1.ControlCleaned = controlCleanedType2;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse4 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant5 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse6 = locationDescriptionListServiceResponse4.setNextToken(instant5);
        controlConditionActivity1.DateCleaned = instant5;
        timeAlignedDataServiceRequest0.QueryFrom = instant5;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_9 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray11 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList12 = new java.util.ArrayList<java.lang.String>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList12, strArray11);
        getObservationsV2_9.SpecimenIds = strList12;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags15 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray19 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList20 = new java.util.ArrayList<java.lang.String>();
        boolean boolean21 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList20, strArray19);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags22 = putLocationTags15.setTagUniqueIds(strList20);
        getObservationsV2_9.ActivityIds = strList20;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest24 = timeAlignedDataServiceRequest0.setTimeSeriesOutputUnitIds(strList20);
        java.lang.Boolean boolean25 = timeAlignedDataServiceRequest0.isApplyRounding();
        timeAlignedDataServiceRequest0.UtcOffset = 100.0d;
        java.time.Instant instant28 = timeAlignedDataServiceRequest0.getQueryTo();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest30 = timeAlignedDataServiceRequest0.setUtcOffset((java.lang.Double) 1.0d);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingModelEffectiveShiftsByStageValuesServiceResponse ratingModelEffectiveShiftsByStageValuesServiceResponse31 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingModelEffectiveShiftsByStageValuesServiceResponse();
        java.util.ArrayList<java.lang.Double> doubleList32 = ratingModelEffectiveShiftsByStageValuesServiceResponse31.EffectiveShiftValues;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetChartDataV2 getChartDataV2_33 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetChartDataV2();
        java.lang.String str34 = getChartDataV2_33.getActivityCustomId();
        java.util.List<java.lang.String> strList35 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetChartDataV2 getChartDataV2_36 = getChartDataV2_33.setSearch(strList35);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_37 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray40 = new java.lang.String[] { "", "" };
        java.util.ArrayList<java.lang.String> strList41 = new java.util.ArrayList<java.lang.String>();
        boolean boolean42 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList41, strArray40);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_43 = getObservationsV2_37.setDataClassifications((java.util.List<java.lang.String>) strList41);
        java.util.List<java.lang.String> strList44 = getObservationsV2_37.ResultGrades;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary45 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        dischargeSummary45.Reviewer = "";
        java.time.Instant instant48 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        dischargeSummary45.MeasurementTime = instant48;
        getObservationsV2_37.StartResultTime = instant48;
        java.lang.String[] strArray60 = new java.lang.String[] { "https", "/AQUARIUS/Provisioning/v1", "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ", "2021.4.62.0", "hi!", "2021.4.62.0", "2021.4.62.0", "/AQUARIUS/Acquisition/v2", "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ" };
        java.util.ArrayList<java.lang.String> strList61 = new java.util.ArrayList<java.lang.String>();
        boolean boolean62 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList61, strArray60);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_63 = getObservationsV2_37.setAnalyticalGroupIds((java.util.List<java.lang.String>) strList61);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescription locationDescription64 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescription();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescription locationDescription66 = locationDescription64.setIdentifier("");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ControlConditionActivity controlConditionActivity67 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ControlConditionActivity();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ControlCleanedType controlCleanedType68 = null;
        controlConditionActivity67.ControlCleaned = controlCleanedType68;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse70 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant71 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse72 = locationDescriptionListServiceResponse70.setNextToken(instant71);
        controlConditionActivity67.DateCleaned = instant71;
        locationDescription66.LastModified = instant71;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_75 = getObservationsV2_63.setStartResultTime(instant71);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetChartDataV2 getChartDataV2_76 = getChartDataV2_33.setEndObservedTime(instant71);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingModelEffectiveShiftsByStageValuesServiceResponse ratingModelEffectiveShiftsByStageValuesServiceResponse77 = ratingModelEffectiveShiftsByStageValuesServiceResponse31.setTimestamp(instant71);
        java.time.Instant instant78 = ratingModelEffectiveShiftsByStageValuesServiceResponse77.getTimestamp();
        timeAlignedDataServiceRequest30.QueryFrom = instant78;
        org.junit.Assert.assertNotNull(instant5);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse6);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(putLocationTags22);
        org.junit.Assert.assertNotNull(timeAlignedDataServiceRequest24);
        org.junit.Assert.assertNull(boolean25);
        org.junit.Assert.assertNull(instant28);
        org.junit.Assert.assertNotNull(timeAlignedDataServiceRequest30);
        org.junit.Assert.assertNull(doubleList32);
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertNotNull(getChartDataV2_36);
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(getObservationsV2_43);
        org.junit.Assert.assertNull(strList44);
        org.junit.Assert.assertNotNull(instant48);
        org.junit.Assert.assertNotNull(strArray60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertNotNull(getObservationsV2_63);
        org.junit.Assert.assertNotNull(locationDescription66);
        org.junit.Assert.assertNotNull(instant71);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse72);
        org.junit.Assert.assertNotNull(getObservationsV2_75);
        org.junit.Assert.assertNotNull(getChartDataV2_76);
        org.junit.Assert.assertNotNull(ratingModelEffectiveShiftsByStageValuesServiceResponse77);
        org.junit.Assert.assertNotNull(instant78);
    }

    @Test
    public void test24079() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest48.test24079");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingModelDescription ratingModelDescription0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingModelDescription();
        java.lang.String str1 = ratingModelDescription0.getDescription();
        java.lang.String str2 = ratingModelDescription0.InputParameter;
        java.lang.String str3 = ratingModelDescription0.getLabel();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Attachment attachment4 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Attachment();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.AttachmentCategory attachmentCategory5 = attachment4.AttachmentCategory;
        java.lang.Double double6 = attachment4.GpsLongitude;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary7 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        dischargeSummary7.Reviewer = "";
        dischargeSummary7.Publish = true;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MeasurementGradeType measurementGradeType12 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MeasurementGradeType.Good;
        dischargeSummary7.MeasurementGrade = measurementGradeType12;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.StatisticalDateTimeOffset statisticalDateTimeOffset14 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.StatisticalDateTimeOffset();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostRecurringReport postRecurringReport15 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostRecurringReport();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary16 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        dischargeSummary16.Reviewer = "";
        java.time.Instant instant19 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        dischargeSummary16.MeasurementTime = instant19;
        postRecurringReport15.NextGenerationDate = instant19;
        java.time.Instant instant22 = postRecurringReport15.getNextGenerationDate();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.StatisticalDateTimeOffset statisticalDateTimeOffset23 = statisticalDateTimeOffset14.setDateTimeOffset(instant22);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary24 = dischargeSummary7.setMeasurementTime(instant22);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Attachment attachment25 = attachment4.setDateUploaded(instant22);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingModelDescription ratingModelDescription26 = ratingModelDescription0.setLastModified(instant22);
        ratingModelDescription0.Publish = false;
        java.lang.String str29 = ratingModelDescription0.TemplateName;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(attachmentCategory5);
        org.junit.Assert.assertNull(double6);
        org.junit.Assert.assertTrue("'" + measurementGradeType12 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MeasurementGradeType.Good + "'", measurementGradeType12.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MeasurementGradeType.Good));
        org.junit.Assert.assertNotNull(instant19);
        org.junit.Assert.assertNotNull(instant22);
        org.junit.Assert.assertNotNull(statisticalDateTimeOffset23);
        org.junit.Assert.assertNotNull(dischargeSummary24);
        org.junit.Assert.assertNotNull(attachment25);
        org.junit.Assert.assertNotNull(ratingModelDescription26);
        org.junit.Assert.assertNull(str29);
    }

    @Test
    public void test24080() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest48.test24080");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostStatisticalDerivedTimeSeries postStatisticalDerivedTimeSeries0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostStatisticalDerivedTimeSeries();
        java.lang.String str1 = postStatisticalDerivedTimeSeries0.ComputationPeriodIdentifier;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostStatisticalDerivedTimeSeries postStatisticalDerivedTimeSeries3 = postStatisticalDerivedTimeSeries0.setUtcOffset("/AQUARIUS/Provisioning/v1");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostStatisticalDerivedTimeSeries postStatisticalDerivedTimeSeries5 = postStatisticalDerivedTimeSeries0.setComputationIdentifier("2021.4.62.0");
        postStatisticalDerivedTimeSeries5.BinAnchorOffsetPeriod = "multipart/form-data; boundary=****c82cca4e-7755-4a00-8acf-9ac791c56995****";
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(postStatisticalDerivedTimeSeries3);
        org.junit.Assert.assertNotNull(postStatisticalDerivedTimeSeries5);
    }

    @Test
    public void test24081() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest48.test24081");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ReferencePoint referencePoint0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ReferencePoint();
        java.lang.String str1 = referencePoint0.Name;
        java.lang.String str2 = referencePoint0.getUniqueId();
        java.time.Instant instant3 = referencePoint0.getPrimarySinceDate();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(instant3);
    }

    @Test
    public void test24082() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest48.test24082");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItem importItem0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_1 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray3 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList4 = new java.util.ArrayList<java.lang.String>();
        boolean boolean5 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList4, strArray3);
        getObservationsV2_1.SpecimenIds = strList4;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags7 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray11 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList12 = new java.util.ArrayList<java.lang.String>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList12, strArray11);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags14 = putLocationTags7.setTagUniqueIds(strList12);
        getObservationsV2_1.QualityControlTypes = strList12;
        java.util.List<java.lang.String> strList16 = getObservationsV2_1.getLabReportIds();
        importItem0.Errors = getObservationsV2_1;
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportChangeItem> importChangeItemList18 = importItem0.getItemComparison();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObject importItemObject19 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObject();
        java.util.List<java.lang.String> strList20 = importItemObject19.getWarningMessages();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportChangeItem[] importChangeItemArray21 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportChangeItem[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportChangeItem> importChangeItemList22 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportChangeItem>();
        boolean boolean23 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportChangeItem>) importChangeItemList22, importChangeItemArray21);
        importItemObject19.ItemComparison = importChangeItemList22;
        importItem0.ItemComparison = importChangeItemList22;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Processor processor26 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Processor();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostTag postTag27 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostTag();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_28 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray31 = new java.lang.String[] { "", "" };
        java.util.ArrayList<java.lang.String> strList32 = new java.util.ArrayList<java.lang.String>();
        boolean boolean33 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList32, strArray31);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_34 = getObservationsV2_28.setDataClassifications((java.util.List<java.lang.String>) strList32);
        postTag27.PickListValues = strList32;
        java.util.ArrayList<java.lang.String> strList36 = postTag27.PickListValues;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Processor processor37 = processor26.setInputTimeSeriesUniqueIds(strList36);
        importItem0.Fields = strList36;
        java.util.List<java.lang.String> strList39 = importItem0.Fields;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemSamplingLocation importItemSamplingLocation40 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemSamplingLocation();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemSamplingLocation importItemSamplingLocation42 = importItemSamplingLocation40.setInput("yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ");
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportChangeItem> importChangeItemList43 = importItemSamplingLocation40.ItemComparison;
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportChangeItem> importChangeItemList44 = importItemSamplingLocation40.ItemComparison;
        java.lang.Object obj45 = importItemSamplingLocation40.getErrors();
        java.util.List<java.lang.String> strList46 = importItemSamplingLocation40.getWarningMessages();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemSpecimen importItemSpecimen47 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemSpecimen();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemStatusType importItemStatusType48 = importItemSpecimen47.Status;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObject importItemObject49 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObject();
        java.util.List<java.lang.String> strList50 = importItemObject49.getWarningMessages();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportChangeItem[] importChangeItemArray51 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportChangeItem[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportChangeItem> importChangeItemList52 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportChangeItem>();
        boolean boolean53 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportChangeItem>) importChangeItemList52, importChangeItemArray51);
        importItemObject49.ItemComparison = importChangeItemList52;
        java.lang.String str55 = importItemObject49.Input;
        java.lang.String str56 = importItemObject49.getRowId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItem importItem57 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_58 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray60 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList61 = new java.util.ArrayList<java.lang.String>();
        boolean boolean62 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList61, strArray60);
        getObservationsV2_58.SpecimenIds = strList61;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags64 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray68 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList69 = new java.util.ArrayList<java.lang.String>();
        boolean boolean70 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList69, strArray68);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags71 = putLocationTags64.setTagUniqueIds(strList69);
        getObservationsV2_58.QualityControlTypes = strList69;
        java.util.List<java.lang.String> strList73 = getObservationsV2_58.getLabReportIds();
        importItem57.Errors = getObservationsV2_58;
        java.lang.Object obj75 = importItem57.getExistingItem();
        importItem57.Input = "hi!";
        java.lang.Object obj78 = importItem57.getItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemStatusType importItemStatusType79 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemStatusType.SKIPPED;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItem importItem80 = importItem57.setStatus(importItemStatusType79);
        importItemObject49.Status = importItemStatusType79;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemSpecimen importItemSpecimen82 = importItemSpecimen47.setStatus(importItemStatusType79);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemSamplingLocation importItemSamplingLocation83 = importItemSamplingLocation40.setStatus(importItemStatusType79);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemStatusType importItemStatusType84 = importItemSamplingLocation83.Status;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItem importItem85 = importItem0.setStatus(importItemStatusType84);
        java.lang.String str86 = importItem85.getInput();
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(putLocationTags14);
        org.junit.Assert.assertNull(strList16);
        org.junit.Assert.assertNull(importChangeItemList18);
        org.junit.Assert.assertNull(strList20);
        org.junit.Assert.assertNotNull(importChangeItemArray21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(getObservationsV2_34);
        org.junit.Assert.assertNotNull(strList36);
        org.junit.Assert.assertNotNull(processor37);
        org.junit.Assert.assertNotNull(strList39);
        org.junit.Assert.assertNotNull(importItemSamplingLocation42);
        org.junit.Assert.assertNull(importChangeItemList43);
        org.junit.Assert.assertNull(importChangeItemList44);
        org.junit.Assert.assertNull(obj45);
        org.junit.Assert.assertNull(strList46);
        org.junit.Assert.assertNull(importItemStatusType48);
        org.junit.Assert.assertNull(strList50);
        org.junit.Assert.assertNotNull(importChangeItemArray51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNull(str55);
        org.junit.Assert.assertNull(str56);
        org.junit.Assert.assertNotNull(strArray60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertNotNull(putLocationTags71);
        org.junit.Assert.assertNull(strList73);
        org.junit.Assert.assertNull(obj75);
        org.junit.Assert.assertNull(obj78);
        org.junit.Assert.assertTrue("'" + importItemStatusType79 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemStatusType.SKIPPED + "'", importItemStatusType79.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemStatusType.SKIPPED));
        org.junit.Assert.assertNotNull(importItem80);
        org.junit.Assert.assertNotNull(importItemSpecimen82);
        org.junit.Assert.assertNotNull(importItemSamplingLocation83);
        org.junit.Assert.assertTrue("'" + importItemStatusType84 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemStatusType.SKIPPED + "'", importItemStatusType84.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemStatusType.SKIPPED));
        org.junit.Assert.assertNotNull(importItem85);
        org.junit.Assert.assertNull(str86);
    }

    @Test
    public void test24083() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest48.test24083");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ExpandedRatingCurve expandedRatingCurve0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ExpandedRatingCurve();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ParameterWithUnit parameterWithUnit1 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ParameterWithUnit();
        expandedRatingCurve0.OutputParameter = parameterWithUnit1;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingPoint[] ratingPointArray3 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingPoint[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingPoint> ratingPointList4 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingPoint>();
        boolean boolean5 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingPoint>) ratingPointList4, ratingPointArray3);
        expandedRatingCurve0.BaseRatingTable = ratingPointList4;
        java.lang.Boolean boolean7 = expandedRatingCurve0.getIsBlended();
        java.lang.Boolean boolean8 = expandedRatingCurve0.IsBlended;
        java.lang.Boolean boolean9 = expandedRatingCurve0.getIsBlended();
        org.junit.Assert.assertNotNull(ratingPointArray3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(boolean7);
        org.junit.Assert.assertNull(boolean8);
        org.junit.Assert.assertNull(boolean9);
    }

    @Test
    public void test24084() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest48.test24084");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostSchedule postSchedule0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostSchedule();
        java.time.OffsetDateTime offsetDateTime1 = postSchedule0.EndDate;
        java.time.OffsetDateTime offsetDateTime2 = postSchedule0.getStartDate();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostSchedule postSchedule4 = postSchedule0.setId("/AQUARIUS");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Schedule schedule5 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Schedule();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Schedule schedule7 = schedule5.setCustomId("");
        java.time.OffsetDateTime offsetDateTime8 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Schedule schedule9 = schedule5.setStartDate(offsetDateTime8);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSchedule putSchedule10 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSchedule();
        java.time.OffsetDateTime offsetDateTime11 = putSchedule10.StartDate;
        java.time.OffsetDateTime offsetDateTime12 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSchedule putSchedule13 = putSchedule10.setEndDate(offsetDateTime12);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationGroup samplingLocationGroup14 = putSchedule13.getSamplingLocationGroup();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Schedule schedule15 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Schedule();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Schedule schedule17 = schedule15.setCustomId("");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SchedulePlannedActivity[] schedulePlannedActivityArray18 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SchedulePlannedActivity[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SchedulePlannedActivity> schedulePlannedActivityList19 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SchedulePlannedActivity>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SchedulePlannedActivity>) schedulePlannedActivityList19, schedulePlannedActivityArray18);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Schedule schedule21 = schedule17.setSchedulePlannedActivities((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SchedulePlannedActivity>) schedulePlannedActivityList19);
        putSchedule13.SchedulePlannedActivities = schedulePlannedActivityList19;
        schedule5.SchedulePlannedActivities = schedulePlannedActivityList19;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSchedule putSchedule24 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSchedule();
        java.time.OffsetDateTime offsetDateTime25 = putSchedule24.StartDate;
        java.time.OffsetDateTime offsetDateTime26 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSchedule putSchedule27 = putSchedule24.setEndDate(offsetDateTime26);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationGroup samplingLocationGroup28 = putSchedule27.getSamplingLocationGroup();
        java.time.OffsetDateTime offsetDateTime29 = null;
        putSchedule27.EndDate = offsetDateTime29;
        java.time.OffsetDateTime offsetDateTime31 = putSchedule27.getLastGenerationDate();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.RecurrenceDayMonthlyType recurrenceDayMonthlyType32 = putSchedule27.getRecurrenceDayMonthly();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSchedule putSchedule33 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSchedule();
        java.time.OffsetDateTime offsetDateTime34 = putSchedule33.StartDate;
        java.time.OffsetDateTime offsetDateTime35 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSchedule putSchedule36 = putSchedule33.setEndDate(offsetDateTime35);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes37 = putSchedule36.AuditAttributes;
        java.time.OffsetDateTime offsetDateTime38 = null;
        putSchedule36.LastGenerationDate = offsetDateTime38;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSchedule putSchedule40 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSchedule();
        java.lang.Integer int41 = putSchedule40.getSamplingLocationGroupSelectionTypeRandomCount();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.RecurrenceType recurrenceType42 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.RecurrenceType.BI_WEEKLY;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSchedule putSchedule43 = putSchedule40.setRecurrenceType(recurrenceType42);
        putSchedule36.RecurrenceType = recurrenceType42;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSchedule putSchedule45 = putSchedule27.setRecurrenceType(recurrenceType42);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationGroup samplingLocationGroup46 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationGroup();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationGroup samplingLocationGroup48 = samplingLocationGroup46.setDescription("POST");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationGroup samplingLocationGroup50 = samplingLocationGroup48.setName("yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ");
        putSchedule45.SamplingLocationGroup = samplingLocationGroup50;
        schedule5.SamplingLocationGroup = samplingLocationGroup50;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostSchedule postSchedule53 = postSchedule0.setSamplingLocationGroup(samplingLocationGroup50);
        java.lang.String str54 = postSchedule53.getCustomId();
        org.junit.Assert.assertNull(offsetDateTime1);
        org.junit.Assert.assertNull(offsetDateTime2);
        org.junit.Assert.assertNotNull(postSchedule4);
        org.junit.Assert.assertNotNull(schedule7);
        org.junit.Assert.assertNotNull(schedule9);
        org.junit.Assert.assertNull(offsetDateTime11);
        org.junit.Assert.assertNotNull(putSchedule13);
        org.junit.Assert.assertNull(samplingLocationGroup14);
        org.junit.Assert.assertNotNull(schedule17);
        org.junit.Assert.assertNotNull(schedulePlannedActivityArray18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(schedule21);
        org.junit.Assert.assertNull(offsetDateTime25);
        org.junit.Assert.assertNotNull(putSchedule27);
        org.junit.Assert.assertNull(samplingLocationGroup28);
        org.junit.Assert.assertNull(offsetDateTime31);
        org.junit.Assert.assertNull(recurrenceDayMonthlyType32);
        org.junit.Assert.assertNull(offsetDateTime34);
        org.junit.Assert.assertNotNull(putSchedule36);
        org.junit.Assert.assertNull(auditAttributes37);
        org.junit.Assert.assertNull(int41);
        org.junit.Assert.assertTrue("'" + recurrenceType42 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.RecurrenceType.BI_WEEKLY + "'", recurrenceType42.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.RecurrenceType.BI_WEEKLY));
        org.junit.Assert.assertNotNull(putSchedule43);
        org.junit.Assert.assertNotNull(putSchedule45);
        org.junit.Assert.assertNotNull(samplingLocationGroup48);
        org.junit.Assert.assertNotNull(samplingLocationGroup50);
        org.junit.Assert.assertNotNull(postSchedule53);
        org.junit.Assert.assertNull(str54);
    }

    @Test
    public void test24085() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest48.test24085");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RoundServiceSpecRequest roundServiceSpecRequest0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RoundServiceSpecRequest();
        java.lang.String str1 = roundServiceSpecRequest0.RoundingSpec;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RoundServiceSpecRequest roundServiceSpecRequest3 = roundServiceSpecRequest0.setValueForNaN("multipart/form-data; boundary=****1165d1f3-8b30-4f2e-8d0b-ffebab458859****");
        java.util.ArrayList<java.lang.Double> doubleList4 = roundServiceSpecRequest3.getData();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(roundServiceSpecRequest3);
        org.junit.Assert.assertNull(doubleList4);
    }

    @Test
    public void test24086() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest48.test24086");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ReportListServiceRequest reportListServiceRequest0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ReportListServiceRequest();
        reportListServiceRequest0.ReportTitle = "MinDuration";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ReportListServiceRequest reportListServiceRequest4 = reportListServiceRequest0.setUserUniqueId("hi!:///AQUARIUS/Provisioning/v1");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DeleteFieldVisits deleteFieldVisits5 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DeleteFieldVisits();
        java.lang.String str6 = deleteFieldVisits5.Sort;
        deleteFieldVisits5.Sort = "9999-12-31T23:59:59.999Z";
        java.time.Instant instant9 = deleteFieldVisits5.EndStartTime;
        java.util.List<java.lang.String> strList10 = deleteFieldVisits5.getPlanningStatuses();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_11 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.util.List<java.lang.String> strList12 = getObservationsV2_11.SamplingContextTagIds;
        java.time.Instant instant13 = getObservationsV2_11.getEndModificationTime();
        java.util.List<java.lang.String> strList14 = getObservationsV2_11.Media;
        java.util.List<java.lang.String> strList15 = getObservationsV2_11.ActivityTypes;
        java.util.List<java.lang.String> strList16 = getObservationsV2_11.getLabResultLaboratoryIds();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_17 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray19 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList20 = new java.util.ArrayList<java.lang.String>();
        boolean boolean21 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList20, strArray19);
        getObservationsV2_17.SpecimenIds = strList20;
        getObservationsV2_11.LabResultLabAnalysisMethodIds = strList20;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DeleteFieldVisits deleteFieldVisits24 = deleteFieldVisits5.setFieldTripIds((java.util.List<java.lang.String>) strList20);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportSpecimens getExportSpecimens25 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportSpecimens();
        java.util.List<java.lang.String> strList26 = getExportSpecimens25.getActivityTypes();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Qualifier qualifier27 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Qualifier();
        java.time.Instant instant28 = qualifier27.DateApplied;
        java.lang.String str29 = qualifier27.User;
        java.lang.String str30 = qualifier27.getIdentifier();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest31 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest();
        java.lang.Object obj32 = timeAlignedDataServiceRequest31.getResponseType();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse33 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant34 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse35 = locationDescriptionListServiceResponse33.setNextToken(instant34);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest36 = timeAlignedDataServiceRequest31.setQueryFrom(instant34);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Qualifier qualifier37 = qualifier27.setDateApplied(instant34);
        getExportSpecimens25.Before = instant34;
        java.util.List<java.lang.String> strList39 = getExportSpecimens25.getLaboratoryIds();
        java.util.List<java.lang.String> strList40 = getExportSpecimens25.getSearch();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivityRecurrence samplingPlanPlannedActivityRecurrence41 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivityRecurrence();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.RecurrenceFrequencyType recurrenceFrequencyType42 = samplingPlanPlannedActivityRecurrence41.RecurrenceFrequency;
        java.util.List<java.lang.String> strList43 = samplingPlanPlannedActivityRecurrence41.getMonthsOfYear();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutQualifier putQualifier44 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutQualifier();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutQualifier putQualifier46 = putQualifier44.setUniqueId("");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest47 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_48 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray50 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList51 = new java.util.ArrayList<java.lang.String>();
        boolean boolean52 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList51, strArray50);
        getObservationsV2_48.SpecimenIds = strList51;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags54 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray58 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList59 = new java.util.ArrayList<java.lang.String>();
        boolean boolean60 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList59, strArray58);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags61 = putLocationTags54.setTagUniqueIds(strList59);
        getObservationsV2_48.QualityControlTypes = strList59;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest63 = timeAlignedDataServiceRequest47.setTimeSeriesUniqueIds(strList59);
        putQualifier44.GroupIdentifiers = strList59;
        java.util.ArrayList<java.lang.String> strList65 = putQualifier44.GroupIdentifiers;
        samplingPlanPlannedActivityRecurrence41.MonthsOfYear = strList65;
        getExportSpecimens25.ActivityTypes = strList65;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_68 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.util.List<java.lang.String> strList69 = getObservationsV2_68.SamplingContextTagIds;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_70 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray72 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList73 = new java.util.ArrayList<java.lang.String>();
        boolean boolean74 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList73, strArray72);
        getObservationsV2_70.SpecimenIds = strList73;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags76 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray80 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList81 = new java.util.ArrayList<java.lang.String>();
        boolean boolean82 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList81, strArray80);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags83 = putLocationTags76.setTagUniqueIds(strList81);
        getObservationsV2_70.QualityControlTypes = strList81;
        getObservationsV2_68.ResultGrades = strList81;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportSpecimens getExportSpecimens86 = getExportSpecimens25.setSamplingLocationGroupIds((java.util.List<java.lang.String>) strList81);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags87 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray91 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList92 = new java.util.ArrayList<java.lang.String>();
        boolean boolean93 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList92, strArray91);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags94 = putLocationTags87.setTagUniqueIds(strList92);
        getExportSpecimens25.AnalyticalGroupIds = strList92;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DeleteFieldVisits deleteFieldVisits96 = deleteFieldVisits5.setScheduleIds((java.util.List<java.lang.String>) strList92);
        reportListServiceRequest0.TimeSeriesUniqueIds = strList92;
        java.util.ArrayList<java.lang.String> strList98 = reportListServiceRequest0.getTimeSeriesUniqueIds();
        org.junit.Assert.assertNotNull(reportListServiceRequest4);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(instant9);
        org.junit.Assert.assertNull(strList10);
        org.junit.Assert.assertNull(strList12);
        org.junit.Assert.assertNull(instant13);
        org.junit.Assert.assertNull(strList14);
        org.junit.Assert.assertNull(strList15);
        org.junit.Assert.assertNull(strList16);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(deleteFieldVisits24);
        org.junit.Assert.assertNull(strList26);
        org.junit.Assert.assertNull(instant28);
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertNotNull(obj32);
        org.junit.Assert.assertEquals(obj32.toString(), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj32), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj32), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertNotNull(instant34);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse35);
        org.junit.Assert.assertNotNull(timeAlignedDataServiceRequest36);
        org.junit.Assert.assertNotNull(qualifier37);
        org.junit.Assert.assertNull(strList39);
        org.junit.Assert.assertNull(strList40);
        org.junit.Assert.assertNull(recurrenceFrequencyType42);
        org.junit.Assert.assertNull(strList43);
        org.junit.Assert.assertNotNull(putQualifier46);
        org.junit.Assert.assertNotNull(strArray50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(strArray58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(putLocationTags61);
        org.junit.Assert.assertNotNull(timeAlignedDataServiceRequest63);
        org.junit.Assert.assertNotNull(strList65);
        org.junit.Assert.assertNull(strList69);
        org.junit.Assert.assertNotNull(strArray72);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertNotNull(strArray80);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true);
        org.junit.Assert.assertNotNull(putLocationTags83);
        org.junit.Assert.assertNotNull(getExportSpecimens86);
        org.junit.Assert.assertNotNull(strArray91);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + true + "'", boolean93 == true);
        org.junit.Assert.assertNotNull(putLocationTags94);
        org.junit.Assert.assertNotNull(deleteFieldVisits96);
        org.junit.Assert.assertNotNull(strList98);
    }

    @Test
    public void test24087() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest48.test24087");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutFieldTrip putFieldTrip0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutFieldTrip();
        java.lang.String str1 = putFieldTrip0.Notes;
        putFieldTrip0.Id = "PT87591240H";
        org.junit.Assert.assertNull(str1);
    }

    @Test
    public void test24088() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest48.test24088");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutUnitGroupWithUnit putUnitGroupWithUnit0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutUnitGroupWithUnit();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutUnitGroupWithUnit putUnitGroupWithUnit2 = putUnitGroupWithUnit0.setId("yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ");
        java.lang.String str3 = putUnitGroupWithUnit2.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlan samplingPlan4 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlan();
        samplingPlan4.SamplingLocationGroupSelectionTypeRandomCount = 0;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationGroupSelectionType samplingLocationGroupSelectionType7 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationGroupSelectionType.ALL;
        samplingPlan4.SamplingLocationGroupSelectionType = samplingLocationGroupSelectionType7;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationGroup samplingLocationGroup9 = samplingPlan4.getSamplingLocationGroup();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes10 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlan samplingPlan11 = samplingPlan4.setAuditAttributes(auditAttributes10);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutUnitGroupWithUnit putUnitGroupWithUnit12 = putUnitGroupWithUnit2.setAuditAttributes(auditAttributes10);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutDetectioncondition putDetectioncondition13 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutDetectioncondition();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes14 = putDetectioncondition13.getAuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutDetectioncondition putDetectioncondition16 = putDetectioncondition13.setCustomId("http");
        putDetectioncondition16.CustomId = "POST";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity postActivity19 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity();
        postActivity19.LoggerFileName = "hi!";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity plannedActivity22 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity postActivity23 = postActivity19.setPlannedActivity(plannedActivity22);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ActivityType activityType24 = postActivity19.Type;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFieldVisitActivityWithTemplate postFieldVisitActivityWithTemplate25 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFieldVisitActivityWithTemplate();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate26 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate();
        specimenTemplate26.CustomId = "hi!";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate29 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate30 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate();
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabInstructionTemplate> labInstructionTemplateList31 = specimenTemplate30.getLabInstructionTemplates();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate32 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate34 = specimenTemplate32.setCustomId("hi!");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate35 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate36 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate();
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabInstructionTemplate> labInstructionTemplateList37 = specimenTemplate36.LabInstructionTemplates;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate[] specimenTemplateArray38 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate[] { specimenTemplate26, specimenTemplate29, specimenTemplate30, specimenTemplate34, specimenTemplate35, specimenTemplate36 };
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate> specimenTemplateList39 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate>) specimenTemplateList39, specimenTemplateArray38);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFieldVisitActivityWithTemplate postFieldVisitActivityWithTemplate41 = postFieldVisitActivityWithTemplate25.setSpecimenTemplates((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate>) specimenTemplateList39);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.CollectionMethod collectionMethod42 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.CollectionMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFieldVisitActivityWithTemplate postFieldVisitActivityWithTemplate43 = postFieldVisitActivityWithTemplate41.setCollectionMethod(collectionMethod42);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity postActivity44 = postActivity19.setCollectionMethod(collectionMethod42);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Medium medium45 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Medium();
        postActivity19.Medium = medium45;
        medium45.CustomId = "-PT87591240H";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroup analyticalGroup49 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroup();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupType analyticalGroupType50 = analyticalGroup49.getType();
        analyticalGroup49.Name = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSSSSSZZZZZ";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroup analyticalGroup53 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroup();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem analyticalGroupItem54 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod55 = analyticalGroupItem54.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem analyticalGroupItem56 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod57 = analyticalGroupItem56.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod58 = analyticalGroupItem56.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem analyticalGroupItem59 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod60 = analyticalGroupItem59.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod61 = analyticalGroupItem59.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod62 = null;
        analyticalGroupItem59.AnalysisMethod = analysisMethod62;
        java.lang.String str64 = analyticalGroupItem59.getHoldingTime();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem analyticalGroupItem65 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod66 = analyticalGroupItem65.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod67 = analyticalGroupItem65.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem analyticalGroupItem68 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod69 = analyticalGroupItem68.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem analyticalGroupItem70 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod71 = analyticalGroupItem70.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod72 = analyticalGroupItem70.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod73 = null;
        analyticalGroupItem70.AnalysisMethod = analysisMethod73;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem[] analyticalGroupItemArray75 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem[] { analyticalGroupItem54, analyticalGroupItem56, analyticalGroupItem59, analyticalGroupItem65, analyticalGroupItem68, analyticalGroupItem70 };
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem> analyticalGroupItemList76 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem>();
        boolean boolean77 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem>) analyticalGroupItemList76, analyticalGroupItemArray75);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroup analyticalGroup78 = analyticalGroup53.setAnalyticalGroupItems((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem>) analyticalGroupItemList76);
        analyticalGroup49.AnalyticalGroupItems = analyticalGroupItemList76;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes80 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes();
        analyticalGroup49.AuditAttributes = auditAttributes80;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Medium medium82 = medium45.setAuditAttributes(auditAttributes80);
        putDetectioncondition16.AuditAttributes = auditAttributes80;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes84 = putDetectioncondition16.AuditAttributes;
        java.time.OffsetDateTime offsetDateTime85 = auditAttributes84.CreationTime;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutUnitGroupWithUnit putUnitGroupWithUnit86 = putUnitGroupWithUnit12.setAuditAttributes(auditAttributes84);
        java.lang.String str87 = putUnitGroupWithUnit86.getCustomId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutUnitGroupWithUnit putUnitGroupWithUnit89 = putUnitGroupWithUnit86.setId("multipart/form-data; boundary=****c82cca4e-7755-4a00-8acf-9ac791c56995****");
        org.junit.Assert.assertNotNull(putUnitGroupWithUnit2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ" + "'", str3, "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ");
        org.junit.Assert.assertTrue("'" + samplingLocationGroupSelectionType7 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationGroupSelectionType.ALL + "'", samplingLocationGroupSelectionType7.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationGroupSelectionType.ALL));
        org.junit.Assert.assertNull(samplingLocationGroup9);
        org.junit.Assert.assertNotNull(samplingPlan11);
        org.junit.Assert.assertNotNull(putUnitGroupWithUnit12);
        org.junit.Assert.assertNull(auditAttributes14);
        org.junit.Assert.assertNotNull(putDetectioncondition16);
        org.junit.Assert.assertNotNull(postActivity23);
        org.junit.Assert.assertNull(activityType24);
        org.junit.Assert.assertNull(labInstructionTemplateList31);
        org.junit.Assert.assertNotNull(specimenTemplate34);
        org.junit.Assert.assertNull(labInstructionTemplateList37);
        org.junit.Assert.assertNotNull(specimenTemplateArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(postFieldVisitActivityWithTemplate41);
        org.junit.Assert.assertNotNull(postFieldVisitActivityWithTemplate43);
        org.junit.Assert.assertNotNull(postActivity44);
        org.junit.Assert.assertNull(analyticalGroupType50);
        org.junit.Assert.assertNull(analysisMethod55);
        org.junit.Assert.assertNull(analysisMethod57);
        org.junit.Assert.assertNull(analysisMethod58);
        org.junit.Assert.assertNull(analysisMethod60);
        org.junit.Assert.assertNull(analysisMethod61);
        org.junit.Assert.assertNull(str64);
        org.junit.Assert.assertNull(analysisMethod66);
        org.junit.Assert.assertNull(analysisMethod67);
        org.junit.Assert.assertNull(analysisMethod69);
        org.junit.Assert.assertNull(analysisMethod71);
        org.junit.Assert.assertNull(analysisMethod72);
        org.junit.Assert.assertNotNull(analyticalGroupItemArray75);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertNotNull(analyticalGroup78);
        org.junit.Assert.assertNotNull(medium82);
        org.junit.Assert.assertNotNull(auditAttributes84);
        org.junit.Assert.assertNull(offsetDateTime85);
        org.junit.Assert.assertNotNull(putUnitGroupWithUnit86);
        org.junit.Assert.assertNull(str87);
        org.junit.Assert.assertNotNull(putUnitGroupWithUnit89);
    }

    @Test
    public void test24089() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest48.test24089");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportObservations getExportObservations0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportObservations();
        java.util.List<java.lang.String> strList1 = getExportObservations0.getLabReportIds();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportObservations getExportObservations3 = getExportObservations0.setNumericResultValue((java.lang.Double) (-1.0d));
        java.util.List<java.lang.String> strList4 = getExportObservations0.LabResultLabAnalysisMethodIds;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportObservations getExportObservations5 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportObservations();
        java.lang.Double double6 = getExportObservations5.NumericResultValue;
        java.util.List<java.lang.String> strList7 = getExportObservations5.getActivityTypes();
        java.util.List<java.lang.String> strList8 = getExportObservations5.ProjectIds;
        java.time.Instant instant9 = null;
        getExportObservations5.EndResultTime = instant9;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_11 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray14 = new java.lang.String[] { "", "" };
        java.util.ArrayList<java.lang.String> strList15 = new java.util.ArrayList<java.lang.String>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList15, strArray14);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_17 = getObservationsV2_11.setDataClassifications((java.util.List<java.lang.String>) strList15);
        getObservationsV2_17.DepthUnitCustomId = "hi!";
        java.lang.String str20 = getObservationsV2_17.CustomId;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_21 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray23 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList24 = new java.util.ArrayList<java.lang.String>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList24, strArray23);
        getObservationsV2_21.SpecimenIds = strList24;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags27 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray31 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList32 = new java.util.ArrayList<java.lang.String>();
        boolean boolean33 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList32, strArray31);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags34 = putLocationTags27.setTagUniqueIds(strList32);
        getObservationsV2_21.ActivityIds = strList32;
        getObservationsV2_17.ResultStatuses = strList32;
        getExportObservations5.ActivityTypes = strList32;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportObservations getExportObservations38 = getExportObservations0.setQualityControlTypes((java.util.List<java.lang.String>) strList32);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportObservations getExportObservations40 = getExportObservations0.setDepthUnitCustomId("multipart/form-data; boundary=****44f0772e-c3ca-4316-8e2a-61ec8540d661****");
        java.time.Instant instant41 = getExportObservations40.EndObservedTime;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportObservations getExportObservations43 = getExportObservations40.setDepthUnitCustomId("");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SampleFractionType sampleFractionType44 = getExportObservations40.SampleFraction;
        org.junit.Assert.assertNull(strList1);
        org.junit.Assert.assertNotNull(getExportObservations3);
        org.junit.Assert.assertNull(strList4);
        org.junit.Assert.assertNull(double6);
        org.junit.Assert.assertNull(strList7);
        org.junit.Assert.assertNull(strList8);
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(getObservationsV2_17);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(putLocationTags34);
        org.junit.Assert.assertNotNull(getExportObservations38);
        org.junit.Assert.assertNotNull(getExportObservations40);
        org.junit.Assert.assertNull(instant41);
        org.junit.Assert.assertNotNull(getExportObservations43);
        org.junit.Assert.assertNull(sampleFractionType44);
    }

    @Test
    public void test24090() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest48.test24090");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostCalculatedDerivedTimeSeries postCalculatedDerivedTimeSeries0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostCalculatedDerivedTimeSeries();
        java.util.ArrayList<java.lang.String> strList1 = postCalculatedDerivedTimeSeries0.TimeSeriesUniqueIds;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostCalculatedDerivedTimeSeries postCalculatedDerivedTimeSeries3 = postCalculatedDerivedTimeSeries0.setMethod("'.'SSSSSSS");
        java.lang.String str4 = postCalculatedDerivedTimeSeries3.getFormula();
        java.lang.String str5 = postCalculatedDerivedTimeSeries3.getParameter();
        org.junit.Assert.assertNull(strList1);
        org.junit.Assert.assertNotNull(postCalculatedDerivedTimeSeries3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(str5);
    }

    @Test
    public void test24091() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest48.test24091");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetGroupedObservationsV2 getGroupedObservationsV2_0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetGroupedObservationsV2();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TagDefinition tagDefinition1 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TagDefinition();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TagValueType tagValueType2 = null;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TagDefinition tagDefinition3 = tagDefinition1.setValueType(tagValueType2);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TagDefinition tagDefinition5 = tagDefinition1.setAppliesToAttachments((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TagDefinition tagDefinition7 = tagDefinition5.setKey("yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TagDefinition tagDefinition9 = tagDefinition5.setAppliesToReports((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest10 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest();
        java.lang.Object obj11 = timeAlignedDataServiceRequest10.getResponseType();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse12 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant13 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse14 = locationDescriptionListServiceResponse12.setNextToken(instant13);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest15 = timeAlignedDataServiceRequest10.setQueryFrom(instant13);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags16 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray20 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList21 = new java.util.ArrayList<java.lang.String>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList21, strArray20);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags23 = putLocationTags16.setTagUniqueIds(strList21);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest24 = timeAlignedDataServiceRequest10.setTimeSeriesOutputUnitIds(strList21);
        tagDefinition9.PickListValues = strList21;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetGroupedObservationsV2 getGroupedObservationsV2_26 = getGroupedObservationsV2_0.setLabResultLabAnalysisMethodIds((java.util.List<java.lang.String>) strList21);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.FieldResultType fieldResultType27 = getGroupedObservationsV2_26.FieldResultType;
        getGroupedObservationsV2_26.SpecimenName = "MaxInstant";
        java.lang.String str30 = getGroupedObservationsV2_26.getDetectionCondition();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetGroupedObservationsV2 getGroupedObservationsV2_32 = getGroupedObservationsV2_26.setCustomId("MinDuration");
        java.time.Instant instant33 = getGroupedObservationsV2_26.StartObservedTime;
        java.util.List<java.lang.String> strList34 = getGroupedObservationsV2_26.getLabResultLabAnalysisMethodIds();
        java.time.Instant instant35 = null;
        getGroupedObservationsV2_26.StartObservedTime = instant35;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetGroupedObservationsV2 getGroupedObservationsV2_38 = getGroupedObservationsV2_26.setImportHistoryEventId("");
        java.util.List<java.lang.String> strList39 = getGroupedObservationsV2_38.getCollectionMethodIds();
        org.junit.Assert.assertNotNull(tagDefinition3);
        org.junit.Assert.assertNotNull(tagDefinition5);
        org.junit.Assert.assertNotNull(tagDefinition7);
        org.junit.Assert.assertNotNull(tagDefinition9);
        org.junit.Assert.assertNotNull(obj11);
        org.junit.Assert.assertEquals(obj11.toString(), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj11), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj11), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertNotNull(instant13);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse14);
        org.junit.Assert.assertNotNull(timeAlignedDataServiceRequest15);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(putLocationTags23);
        org.junit.Assert.assertNotNull(timeAlignedDataServiceRequest24);
        org.junit.Assert.assertNotNull(getGroupedObservationsV2_26);
        org.junit.Assert.assertNull(fieldResultType27);
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertNotNull(getGroupedObservationsV2_32);
        org.junit.Assert.assertNull(instant33);
        org.junit.Assert.assertNotNull(strList34);
        org.junit.Assert.assertNotNull(getGroupedObservationsV2_38);
        org.junit.Assert.assertNull(strList39);
    }

    @Test
    public void test24092() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest48.test24092");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDataServiceResponse locationDataServiceResponse0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDataServiceResponse();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDescription timeSeriesDescription1 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDescription();
        java.time.Instant instant2 = timeSeriesDescription1.getCorrectedStartTime();
        java.lang.String str3 = timeSeriesDescription1.getComputationIdentifier();
        timeSeriesDescription1.TimeSeriesType = "-PT87591240H";
        java.lang.String str6 = timeSeriesDescription1.getIdentifier();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_7 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray10 = new java.lang.String[] { "", "" };
        java.util.ArrayList<java.lang.String> strList11 = new java.util.ArrayList<java.lang.String>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList11, strArray10);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_13 = getObservationsV2_7.setDataClassifications((java.util.List<java.lang.String>) strList11);
        java.util.List<java.lang.String> strList14 = getObservationsV2_7.ResultGrades;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary15 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        dischargeSummary15.Reviewer = "";
        java.time.Instant instant18 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        dischargeSummary15.MeasurementTime = instant18;
        getObservationsV2_7.StartResultTime = instant18;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDescription timeSeriesDescription21 = timeSeriesDescription1.setCorrectedStartTime(instant18);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetActivities getActivities22 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetActivities();
        getActivities22.Limit = 10;
        java.util.List<java.lang.String> strList25 = getActivities22.ActivityTemplateId;
        java.lang.String str26 = getActivities22.Sort;
        java.util.List<java.lang.String> strList27 = getActivities22.CollectionMethodIds;
        java.lang.String str28 = getActivities22.getCustomId();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitDescriptionListServiceResponse fieldVisitDescriptionListServiceResponse29 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitDescriptionListServiceResponse();
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitDescription> fieldVisitDescriptionList30 = fieldVisitDescriptionListServiceResponse29.getDeletedFieldVisitDescriptions();
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitDescription> fieldVisitDescriptionList31 = fieldVisitDescriptionListServiceResponse29.DeletedFieldVisitDescriptions;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary32 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        dischargeSummary32.Reviewer = "";
        java.time.Instant instant35 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        dischargeSummary32.MeasurementTime = instant35;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.BaseFlowType baseFlowType37 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.BaseFlowType.BaseFlow;
        dischargeSummary32.BaseFlow = baseFlowType37;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.BaseFlowType baseFlowType39 = dischargeSummary32.BaseFlow;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingModelDescriptionListServiceResponse ratingModelDescriptionListServiceResponse40 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingModelDescriptionListServiceResponse();
        java.util.List<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingModelDescription> ratingModelDescriptionList41 = ratingModelDescriptionListServiceResponse40.RatingModelDescriptions;
        java.time.Instant instant42 = ratingModelDescriptionListServiceResponse40.getNextToken();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CalibrationCheck calibrationCheck43 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CalibrationCheck();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CalibrationCheckType calibrationCheckType44 = calibrationCheck43.getCalibrationCheckType();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay45 = calibrationCheck43.Value;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse46 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary47 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary49 = dischargeSummary47.setPublish((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse50 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant51 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse52 = locationDescriptionListServiceResponse50.setNextToken(instant51);
        dischargeSummary47.MeasurementTime = instant51;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse54 = locationDescriptionListServiceResponse46.setNextToken(instant51);
        java.time.Instant instant55 = locationDescriptionListServiceResponse46.getNextToken();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CalibrationCheck calibrationCheck56 = calibrationCheck43.setTime(instant55);
        java.time.Instant instant57 = calibrationCheck56.Time;
        ratingModelDescriptionListServiceResponse40.NextToken = instant57;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary59 = dischargeSummary32.setMeasurementEndTime(instant57);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PublishServiceResponse publishServiceResponse60 = fieldVisitDescriptionListServiceResponse29.setResponseTime(instant57);
        getActivities22.FromStartTime = instant57;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDescription timeSeriesDescription62 = timeSeriesDescription21.setRawStartTime(instant57);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDescription timeSeriesDescription64 = timeSeriesDescription21.setParameterId("http://MaxDurationhttp/json/reply/ArrayList");
        java.time.Instant instant65 = timeSeriesDescription21.RawEndTime;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDescription timeSeriesDescription66 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDescription();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest67 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest();
        java.lang.Object obj68 = timeAlignedDataServiceRequest67.getResponseType();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse69 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant70 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse71 = locationDescriptionListServiceResponse69.setNextToken(instant70);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest72 = timeAlignedDataServiceRequest67.setQueryFrom(instant70);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDescription timeSeriesDescription73 = timeSeriesDescription66.setRawStartTime(instant70);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDescription timeSeriesDescription75 = timeSeriesDescription73.setSubLocationIdentifier("");
        java.time.Instant instant76 = timeSeriesDescription73.LastModified;
        java.lang.Boolean boolean77 = timeSeriesDescription73.isPublish();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ExtendedAttribute[] extendedAttributeArray78 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ExtendedAttribute[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ExtendedAttribute> extendedAttributeList79 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ExtendedAttribute>();
        boolean boolean80 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ExtendedAttribute>) extendedAttributeList79, extendedAttributeArray78);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDescription timeSeriesDescription81 = timeSeriesDescription73.setExtendedAttributes((java.util.List<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ExtendedAttribute>) extendedAttributeList79);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDescription timeSeriesDescription82 = timeSeriesDescription21.setExtendedAttributes((java.util.List<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ExtendedAttribute>) extendedAttributeList79);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDataServiceResponse locationDataServiceResponse83 = locationDataServiceResponse0.setExtendedAttributes(extendedAttributeList79);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDataServiceResponse locationDataServiceResponse85 = locationDataServiceResponse83.setIsExternalLocation((java.lang.Boolean) false);
        java.lang.Boolean boolean86 = locationDataServiceResponse83.IsExternalLocation;
        java.lang.Double double87 = locationDataServiceResponse83.Longitude;
        java.lang.String str88 = locationDataServiceResponse83.getDescription();
        org.junit.Assert.assertNull(instant2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(getObservationsV2_13);
        org.junit.Assert.assertNull(strList14);
        org.junit.Assert.assertNotNull(instant18);
        org.junit.Assert.assertNotNull(timeSeriesDescription21);
        org.junit.Assert.assertNull(strList25);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertNull(strList27);
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertNull(fieldVisitDescriptionList30);
        org.junit.Assert.assertNull(fieldVisitDescriptionList31);
        org.junit.Assert.assertNotNull(instant35);
        org.junit.Assert.assertTrue("'" + baseFlowType37 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.BaseFlowType.BaseFlow + "'", baseFlowType37.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.BaseFlowType.BaseFlow));
        org.junit.Assert.assertTrue("'" + baseFlowType39 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.BaseFlowType.BaseFlow + "'", baseFlowType39.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.BaseFlowType.BaseFlow));
        org.junit.Assert.assertNull(ratingModelDescriptionList41);
        org.junit.Assert.assertNull(instant42);
        org.junit.Assert.assertNull(calibrationCheckType44);
        org.junit.Assert.assertNull(doubleWithDisplay45);
        org.junit.Assert.assertNotNull(dischargeSummary49);
        org.junit.Assert.assertNotNull(instant51);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse52);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse54);
        org.junit.Assert.assertNotNull(instant55);
        org.junit.Assert.assertNotNull(calibrationCheck56);
        org.junit.Assert.assertNotNull(instant57);
        org.junit.Assert.assertNotNull(dischargeSummary59);
        org.junit.Assert.assertNotNull(publishServiceResponse60);
        org.junit.Assert.assertNotNull(timeSeriesDescription62);
        org.junit.Assert.assertNotNull(timeSeriesDescription64);
        org.junit.Assert.assertNull(instant65);
        org.junit.Assert.assertNotNull(obj68);
        org.junit.Assert.assertEquals(obj68.toString(), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj68), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj68), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertNotNull(instant70);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse71);
        org.junit.Assert.assertNotNull(timeAlignedDataServiceRequest72);
        org.junit.Assert.assertNotNull(timeSeriesDescription73);
        org.junit.Assert.assertNotNull(timeSeriesDescription75);
        org.junit.Assert.assertNull(instant76);
        org.junit.Assert.assertNull(boolean77);
        org.junit.Assert.assertNotNull(extendedAttributeArray78);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(timeSeriesDescription81);
        org.junit.Assert.assertNotNull(timeSeriesDescription82);
        org.junit.Assert.assertNotNull(locationDataServiceResponse83);
        org.junit.Assert.assertNotNull(locationDataServiceResponse85);
        org.junit.Assert.assertEquals("'" + boolean86 + "' != '" + false + "'", boolean86, false);
        org.junit.Assert.assertNull(double87);
        org.junit.Assert.assertNull(str88);
    }

    @Test
    public void test24093() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest48.test24093");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutActivityTemplate putActivityTemplate0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutActivityTemplate();
        java.lang.String str1 = putActivityTemplate0.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes2 = putActivityTemplate0.getAuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MediumType mediumType3 = putActivityTemplate0.getMedium();
        java.lang.String str4 = putActivityTemplate0.Id;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutObservedProperty putObservedProperty5 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutObservedProperty();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity quantity6 = putObservedProperty5.LowerLimit;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutObservedProperty putObservedProperty8 = putObservedProperty5.setDescription("");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisType analysisType9 = putObservedProperty5.AnalysisType;
        putObservedProperty5.Name = "/AQUARIUS";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity quantity12 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Unit unit13 = null;
        quantity12.Unit = unit13;
        java.lang.Double double15 = quantity12.Value;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity quantity17 = quantity12.setValue((java.lang.Double) (-1.0d));
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutObservedProperty putObservedProperty18 = putObservedProperty5.setUpperLimit(quantity17);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity quantity19 = putObservedProperty18.UpperLimit;
        putActivityTemplate0.Depth = quantity19;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation21 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedFieldResult plannedFieldResult22 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation23 = observation21.setPlannedFieldResult(plannedFieldResult22);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultStatus resultStatus24 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation25 = observation23.setResultStatus(resultStatus24);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity postActivity26 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity();
        postActivity26.LoggerFileName = "hi!";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity plannedActivity29 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity postActivity30 = postActivity26.setPlannedActivity(plannedActivity29);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ActivityType activityType31 = postActivity26.Type;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFieldVisitActivityWithTemplate postFieldVisitActivityWithTemplate32 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFieldVisitActivityWithTemplate();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate33 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate();
        specimenTemplate33.CustomId = "hi!";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate36 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate37 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate();
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabInstructionTemplate> labInstructionTemplateList38 = specimenTemplate37.getLabInstructionTemplates();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate39 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate41 = specimenTemplate39.setCustomId("hi!");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate42 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate43 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate();
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabInstructionTemplate> labInstructionTemplateList44 = specimenTemplate43.LabInstructionTemplates;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate[] specimenTemplateArray45 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate[] { specimenTemplate33, specimenTemplate36, specimenTemplate37, specimenTemplate41, specimenTemplate42, specimenTemplate43 };
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate> specimenTemplateList46 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate>();
        boolean boolean47 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate>) specimenTemplateList46, specimenTemplateArray45);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFieldVisitActivityWithTemplate postFieldVisitActivityWithTemplate48 = postFieldVisitActivityWithTemplate32.setSpecimenTemplates((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate>) specimenTemplateList46);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.CollectionMethod collectionMethod49 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.CollectionMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFieldVisitActivityWithTemplate postFieldVisitActivityWithTemplate50 = postFieldVisitActivityWithTemplate48.setCollectionMethod(collectionMethod49);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity postActivity51 = postActivity26.setCollectionMethod(collectionMethod49);
        observation25.CollectionMethod = collectionMethod49;
        collectionMethod49.Name = "http";
        java.lang.String str55 = collectionMethod49.Name;
        putActivityTemplate0.CollectionMethod = collectionMethod49;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(auditAttributes2);
        org.junit.Assert.assertNull(mediumType3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(quantity6);
        org.junit.Assert.assertNotNull(putObservedProperty8);
        org.junit.Assert.assertNull(analysisType9);
        org.junit.Assert.assertNull(double15);
        org.junit.Assert.assertNotNull(quantity17);
        org.junit.Assert.assertNotNull(putObservedProperty18);
        org.junit.Assert.assertNotNull(quantity19);
        org.junit.Assert.assertNotNull(observation23);
        org.junit.Assert.assertNotNull(observation25);
        org.junit.Assert.assertNotNull(postActivity30);
        org.junit.Assert.assertNull(activityType31);
        org.junit.Assert.assertNull(labInstructionTemplateList38);
        org.junit.Assert.assertNotNull(specimenTemplate41);
        org.junit.Assert.assertNull(labInstructionTemplateList44);
        org.junit.Assert.assertNotNull(specimenTemplateArray45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(postFieldVisitActivityWithTemplate48);
        org.junit.Assert.assertNotNull(postFieldVisitActivityWithTemplate50);
        org.junit.Assert.assertNotNull(postActivity51);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "http" + "'", str55, "http");
    }

    @Test
    public void test24094() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest48.test24094");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CalibrationCheck calibrationCheck0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CalibrationCheck();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CalibrationCheckType calibrationCheckType1 = calibrationCheck0.getCalibrationCheckType();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay2 = calibrationCheck0.Value;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse3 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary4 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary6 = dischargeSummary4.setPublish((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse7 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant8 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse9 = locationDescriptionListServiceResponse7.setNextToken(instant8);
        dischargeSummary4.MeasurementTime = instant8;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse11 = locationDescriptionListServiceResponse3.setNextToken(instant8);
        java.time.Instant instant12 = locationDescriptionListServiceResponse3.getNextToken();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CalibrationCheck calibrationCheck13 = calibrationCheck0.setTime(instant12);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Reading reading14 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Reading();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary15 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary17 = dischargeSummary15.setPublish((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay18 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay();
        dischargeSummary17.DifferenceDuringVisit = doubleWithDisplay18;
        reading14.Value = doubleWithDisplay18;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CalibrationCheck calibrationCheck21 = calibrationCheck13.setValue(doubleWithDisplay18);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingCurveListServiceRequest ratingCurveListServiceRequest22 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingCurveListServiceRequest();
        java.time.Instant instant23 = ratingCurveListServiceRequest22.QueryTo;
        java.lang.String str24 = ratingCurveListServiceRequest22.getRatingModelIdentifier();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse25 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary26 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary28 = dischargeSummary26.setPublish((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse29 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant30 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse31 = locationDescriptionListServiceResponse29.setNextToken(instant30);
        dischargeSummary26.MeasurementTime = instant30;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse33 = locationDescriptionListServiceResponse25.setNextToken(instant30);
        java.time.Instant instant34 = locationDescriptionListServiceResponse25.getNextToken();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest35 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ControlConditionActivity controlConditionActivity36 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ControlConditionActivity();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ControlCleanedType controlCleanedType37 = null;
        controlConditionActivity36.ControlCleaned = controlCleanedType37;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse39 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant40 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse41 = locationDescriptionListServiceResponse39.setNextToken(instant40);
        controlConditionActivity36.DateCleaned = instant40;
        timeAlignedDataServiceRequest35.QueryFrom = instant40;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse44 = locationDescriptionListServiceResponse25.setNextToken(instant40);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingCurveListServiceRequest ratingCurveListServiceRequest45 = ratingCurveListServiceRequest22.setQueryTo(instant40);
        java.time.Instant instant46 = ratingCurveListServiceRequest45.getQueryTo();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CalibrationCheck calibrationCheck47 = calibrationCheck21.setTime(instant46);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity pointVelocityDischargeActivity48 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity();
        java.lang.String str49 = pointVelocityDischargeActivity48.SoftwareVersion;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity pointVelocityDischargeActivity51 = pointVelocityDischargeActivity48.setIsValid((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity pointVelocityDischargeActivity53 = pointVelocityDischargeActivity48.setMethodCoefficientUsed((java.lang.Boolean) true);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Vertical vertical54 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Vertical();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay55 = vertical54.SoundedDepth;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VerticalType verticalType56 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VerticalType.StartEdgeNoWaterBefore;
        vertical54.VerticalType = verticalType56;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VelocityObservation velocityObservation58 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VelocityObservation();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DeploymentMethodType deploymentMethodType59 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DeploymentMethodType.Unknown;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VelocityObservation velocityObservation60 = velocityObservation58.setDeploymentMethod(deploymentMethodType59);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VelocityObservation velocityObservation61 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VelocityObservation();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DeploymentMethodType deploymentMethodType62 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DeploymentMethodType.Unknown;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VelocityObservation velocityObservation63 = velocityObservation61.setDeploymentMethod(deploymentMethodType62);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VelocityDepthObservation[] velocityDepthObservationArray64 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VelocityDepthObservation[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VelocityDepthObservation> velocityDepthObservationList65 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VelocityDepthObservation>();
        boolean boolean66 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VelocityDepthObservation>) velocityDepthObservationList65, velocityDepthObservationArray64);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VelocityObservation velocityObservation67 = velocityObservation63.setObservations((java.util.List<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VelocityDepthObservation>) velocityDepthObservationList65);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VelocityObservation velocityObservation68 = velocityObservation58.setObservations((java.util.List<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VelocityDepthObservation>) velocityDepthObservationList65);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Vertical vertical69 = vertical54.setVelocityObservation(velocityObservation58);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DatumConvertedQuantityWithDisplay datumConvertedQuantityWithDisplay70 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DatumConvertedQuantityWithDisplay();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Vertical vertical71 = vertical69.setEffectiveDepth((com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay) datumConvertedQuantityWithDisplay70);
        pointVelocityDischargeActivity48.Width = datumConvertedQuantityWithDisplay70;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CalibrationCheck calibrationCheck73 = calibrationCheck47.setValue((com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay) datumConvertedQuantityWithDisplay70);
        java.lang.Boolean boolean74 = calibrationCheck47.isPublish();
        org.junit.Assert.assertNull(calibrationCheckType1);
        org.junit.Assert.assertNull(doubleWithDisplay2);
        org.junit.Assert.assertNotNull(dischargeSummary6);
        org.junit.Assert.assertNotNull(instant8);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse9);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse11);
        org.junit.Assert.assertNotNull(instant12);
        org.junit.Assert.assertNotNull(calibrationCheck13);
        org.junit.Assert.assertNotNull(dischargeSummary17);
        org.junit.Assert.assertNotNull(calibrationCheck21);
        org.junit.Assert.assertNull(instant23);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNotNull(dischargeSummary28);
        org.junit.Assert.assertNotNull(instant30);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse31);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse33);
        org.junit.Assert.assertNotNull(instant34);
        org.junit.Assert.assertNotNull(instant40);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse41);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse44);
        org.junit.Assert.assertNotNull(ratingCurveListServiceRequest45);
        org.junit.Assert.assertNotNull(instant46);
        org.junit.Assert.assertNotNull(calibrationCheck47);
        org.junit.Assert.assertNull(str49);
        org.junit.Assert.assertNotNull(pointVelocityDischargeActivity51);
        org.junit.Assert.assertNotNull(pointVelocityDischargeActivity53);
        org.junit.Assert.assertNull(quantityWithDisplay55);
        org.junit.Assert.assertTrue("'" + verticalType56 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VerticalType.StartEdgeNoWaterBefore + "'", verticalType56.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VerticalType.StartEdgeNoWaterBefore));
        org.junit.Assert.assertTrue("'" + deploymentMethodType59 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DeploymentMethodType.Unknown + "'", deploymentMethodType59.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DeploymentMethodType.Unknown));
        org.junit.Assert.assertNotNull(velocityObservation60);
        org.junit.Assert.assertTrue("'" + deploymentMethodType62 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DeploymentMethodType.Unknown + "'", deploymentMethodType62.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DeploymentMethodType.Unknown));
        org.junit.Assert.assertNotNull(velocityObservation63);
        org.junit.Assert.assertNotNull(velocityDepthObservationArray64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(velocityObservation67);
        org.junit.Assert.assertNotNull(velocityObservation68);
        org.junit.Assert.assertNotNull(vertical69);
        org.junit.Assert.assertNotNull(vertical71);
        org.junit.Assert.assertNotNull(calibrationCheck73);
        org.junit.Assert.assertNull(boolean74);
    }

    @Test
    public void test24095() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest48.test24095");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostTag postTag0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostTag();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_1 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray4 = new java.lang.String[] { "", "" };
        java.util.ArrayList<java.lang.String> strList5 = new java.util.ArrayList<java.lang.String>();
        boolean boolean6 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList5, strArray4);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_7 = getObservationsV2_1.setDataClassifications((java.util.List<java.lang.String>) strList5);
        postTag0.PickListValues = strList5;
        java.util.ArrayList<java.lang.String> strList9 = postTag0.PickListValues;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.TagApplicability tagApplicability10 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.TagApplicability.AppliesToSensorsGauges;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.TagApplicability[] tagApplicabilityArray11 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.TagApplicability[] { tagApplicability10 };
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.TagApplicability> tagApplicabilityList12 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.TagApplicability>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.TagApplicability>) tagApplicabilityList12, tagApplicabilityArray11);
        postTag0.Applicability = tagApplicabilityList12;
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.TagApplicability> tagApplicabilityList15 = postTag0.Applicability;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostTag postTag16 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostTag();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_17 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray20 = new java.lang.String[] { "", "" };
        java.util.ArrayList<java.lang.String> strList21 = new java.util.ArrayList<java.lang.String>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList21, strArray20);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_23 = getObservationsV2_17.setDataClassifications((java.util.List<java.lang.String>) strList21);
        postTag16.PickListValues = strList21;
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.TagApplicability> tagApplicabilityList25 = postTag16.Applicability;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.TagRequestBase tagRequestBase27 = postTag16.setKey("");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.TagValueType tagValueType28 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.TagValueType.PickList;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.TagRequestBase tagRequestBase29 = tagRequestBase27.setValueType(tagValueType28);
        java.lang.String str30 = tagRequestBase29.getKey();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostTag postTag31 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostTag();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_32 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray35 = new java.lang.String[] { "", "" };
        java.util.ArrayList<java.lang.String> strList36 = new java.util.ArrayList<java.lang.String>();
        boolean boolean37 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList36, strArray35);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_38 = getObservationsV2_32.setDataClassifications((java.util.List<java.lang.String>) strList36);
        postTag31.PickListValues = strList36;
        java.util.ArrayList<java.lang.String> strList40 = postTag31.PickListValues;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.TagApplicability tagApplicability41 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.TagApplicability.AppliesToSensorsGauges;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.TagApplicability[] tagApplicabilityArray42 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.TagApplicability[] { tagApplicability41 };
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.TagApplicability> tagApplicabilityList43 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.TagApplicability>();
        boolean boolean44 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.TagApplicability>) tagApplicabilityList43, tagApplicabilityArray42);
        postTag31.Applicability = tagApplicabilityList43;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.TagRequestBase tagRequestBase47 = postTag31.setKey("yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSSSSSZZZZZ");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.TagValueType tagValueType48 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.TagValueType.PickList;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.TagRequestBase tagRequestBase49 = postTag31.setValueType(tagValueType48);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostTag postTag50 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostTag();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_51 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray54 = new java.lang.String[] { "", "" };
        java.util.ArrayList<java.lang.String> strList55 = new java.util.ArrayList<java.lang.String>();
        boolean boolean56 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList55, strArray54);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_57 = getObservationsV2_51.setDataClassifications((java.util.List<java.lang.String>) strList55);
        postTag50.PickListValues = strList55;
        java.util.ArrayList<java.lang.String> strList59 = postTag50.PickListValues;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.TagApplicability tagApplicability60 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.TagApplicability.AppliesToSensorsGauges;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.TagApplicability[] tagApplicabilityArray61 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.TagApplicability[] { tagApplicability60 };
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.TagApplicability> tagApplicabilityList62 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.TagApplicability>();
        boolean boolean63 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.TagApplicability>) tagApplicabilityList62, tagApplicabilityArray61);
        postTag50.Applicability = tagApplicabilityList62;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.TagRequestBase tagRequestBase66 = postTag50.setKey("yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSSSSSZZZZZ");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.TagValueType tagValueType67 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.TagValueType.PickList;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.TagRequestBase tagRequestBase68 = postTag50.setValueType(tagValueType67);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostTag postTag69 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostTag();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_70 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray73 = new java.lang.String[] { "", "" };
        java.util.ArrayList<java.lang.String> strList74 = new java.util.ArrayList<java.lang.String>();
        boolean boolean75 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList74, strArray73);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_76 = getObservationsV2_70.setDataClassifications((java.util.List<java.lang.String>) strList74);
        postTag69.PickListValues = strList74;
        java.util.ArrayList<java.lang.String> strList78 = postTag69.PickListValues;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostTag postTag79 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostTag();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_80 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray83 = new java.lang.String[] { "", "" };
        java.util.ArrayList<java.lang.String> strList84 = new java.util.ArrayList<java.lang.String>();
        boolean boolean85 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList84, strArray83);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_86 = getObservationsV2_80.setDataClassifications((java.util.List<java.lang.String>) strList84);
        postTag79.PickListValues = strList84;
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.TagApplicability> tagApplicabilityList88 = postTag79.Applicability;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.TagApplicability tagApplicability89 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.TagApplicability.AppliesToAttachments;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.TagApplicability[] tagApplicabilityArray90 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.TagApplicability[] { tagApplicability89 };
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.TagApplicability> tagApplicabilityList91 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.TagApplicability>();
        boolean boolean92 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.TagApplicability>) tagApplicabilityList91, tagApplicabilityArray90);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.TagRequestBase tagRequestBase93 = postTag79.setApplicability(tagApplicabilityList91);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.TagRequestBase tagRequestBase94 = postTag69.setApplicability(tagApplicabilityList91);
        postTag50.Applicability = tagApplicabilityList91;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.TagRequestBase tagRequestBase96 = tagRequestBase49.setApplicability(tagApplicabilityList91);
        tagRequestBase29.Applicability = tagApplicabilityList91;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.TagRequestBase tagRequestBase98 = postTag0.setApplicability(tagApplicabilityList91);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.TagValueType tagValueType99 = tagRequestBase98.ValueType;
        org.junit.Assert.assertNotNull(strArray4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(getObservationsV2_7);
        org.junit.Assert.assertNotNull(strList9);
        org.junit.Assert.assertTrue("'" + tagApplicability10 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.TagApplicability.AppliesToSensorsGauges + "'", tagApplicability10.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.TagApplicability.AppliesToSensorsGauges));
        org.junit.Assert.assertNotNull(tagApplicabilityArray11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(tagApplicabilityList15);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(getObservationsV2_23);
        org.junit.Assert.assertNull(tagApplicabilityList25);
        org.junit.Assert.assertNotNull(tagRequestBase27);
        org.junit.Assert.assertTrue("'" + tagValueType28 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.TagValueType.PickList + "'", tagValueType28.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.TagValueType.PickList));
        org.junit.Assert.assertNotNull(tagRequestBase29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(getObservationsV2_38);
        org.junit.Assert.assertNotNull(strList40);
        org.junit.Assert.assertTrue("'" + tagApplicability41 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.TagApplicability.AppliesToSensorsGauges + "'", tagApplicability41.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.TagApplicability.AppliesToSensorsGauges));
        org.junit.Assert.assertNotNull(tagApplicabilityArray42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(tagRequestBase47);
        org.junit.Assert.assertTrue("'" + tagValueType48 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.TagValueType.PickList + "'", tagValueType48.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.TagValueType.PickList));
        org.junit.Assert.assertNotNull(tagRequestBase49);
        org.junit.Assert.assertNotNull(strArray54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(getObservationsV2_57);
        org.junit.Assert.assertNotNull(strList59);
        org.junit.Assert.assertTrue("'" + tagApplicability60 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.TagApplicability.AppliesToSensorsGauges + "'", tagApplicability60.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.TagApplicability.AppliesToSensorsGauges));
        org.junit.Assert.assertNotNull(tagApplicabilityArray61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNotNull(tagRequestBase66);
        org.junit.Assert.assertTrue("'" + tagValueType67 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.TagValueType.PickList + "'", tagValueType67.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.TagValueType.PickList));
        org.junit.Assert.assertNotNull(tagRequestBase68);
        org.junit.Assert.assertNotNull(strArray73);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertNotNull(getObservationsV2_76);
        org.junit.Assert.assertNotNull(strList78);
        org.junit.Assert.assertNotNull(strArray83);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + true + "'", boolean85 == true);
        org.junit.Assert.assertNotNull(getObservationsV2_86);
        org.junit.Assert.assertNull(tagApplicabilityList88);
        org.junit.Assert.assertTrue("'" + tagApplicability89 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.TagApplicability.AppliesToAttachments + "'", tagApplicability89.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.TagApplicability.AppliesToAttachments));
        org.junit.Assert.assertNotNull(tagApplicabilityArray90);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + true + "'", boolean92 == true);
        org.junit.Assert.assertNotNull(tagRequestBase93);
        org.junit.Assert.assertNotNull(tagRequestBase94);
        org.junit.Assert.assertNotNull(tagRequestBase96);
        org.junit.Assert.assertNotNull(tagRequestBase98);
        org.junit.Assert.assertNull(tagValueType99);
    }

    @Test
    public void test24096() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest48.test24096");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationExportIIV2 getObservationExportIIV2_0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationExportIIV2();
        java.util.List<java.lang.String> strList1 = getObservationExportIIV2_0.getCollectionMethodIds();
        java.util.List<java.lang.String> strList2 = getObservationExportIIV2_0.AnalyticalGroupIds;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportObservations getExportObservations3 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportObservations();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportObservations getExportObservations5 = getExportObservations3.setLimit((java.lang.Integer) 2);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DeleteFieldVisits deleteFieldVisits6 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DeleteFieldVisits();
        java.lang.String str7 = deleteFieldVisits6.Sort;
        deleteFieldVisits6.Sort = "9999-12-31T23:59:59.999Z";
        java.util.List<java.lang.String> strList10 = deleteFieldVisits6.getScheduleIds();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetShippingContainers getShippingContainers11 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetShippingContainers();
        java.util.List<java.lang.String> strList12 = getShippingContainers11.Search;
        java.util.List<java.lang.String> strList13 = getShippingContainers11.Search;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetAnalysisMethods getAnalysisMethods14 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetAnalysisMethods();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItem importItem15 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_16 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray18 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList19 = new java.util.ArrayList<java.lang.String>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList19, strArray18);
        getObservationsV2_16.SpecimenIds = strList19;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags22 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray26 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList27 = new java.util.ArrayList<java.lang.String>();
        boolean boolean28 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList27, strArray26);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags29 = putLocationTags22.setTagUniqueIds(strList27);
        getObservationsV2_16.QualityControlTypes = strList27;
        java.util.List<java.lang.String> strList31 = getObservationsV2_16.getLabReportIds();
        importItem15.Errors = getObservationsV2_16;
        java.lang.Object obj33 = importItem15.getExistingItem();
        importItem15.Input = "hi!";
        java.lang.Object obj36 = importItem15.getItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemStatusType importItemStatusType37 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemStatusType.SKIPPED;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItem importItem38 = importItem15.setStatus(importItemStatusType37);
        importItem38.Input = "/AQUARIUS/Provisioning/v1";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate41 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate();
        specimenTemplate41.CustomId = "hi!";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate45 = specimenTemplate41.setId("hi!");
        java.lang.Boolean boolean46 = specimenTemplate45.getFiltered();
        importItem38.Item = specimenTemplate45;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Processor processor48 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Processor();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostTag postTag49 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostTag();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_50 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray53 = new java.lang.String[] { "", "" };
        java.util.ArrayList<java.lang.String> strList54 = new java.util.ArrayList<java.lang.String>();
        boolean boolean55 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList54, strArray53);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_56 = getObservationsV2_50.setDataClassifications((java.util.List<java.lang.String>) strList54);
        postTag49.PickListValues = strList54;
        java.util.ArrayList<java.lang.String> strList58 = postTag49.PickListValues;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Processor processor59 = processor48.setInputTimeSeriesUniqueIds(strList58);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItem importItem60 = importItem38.setWarningMessages((java.util.List<java.lang.String>) strList58);
        java.util.List<java.lang.String> strList61 = importItem38.getWarningMessages();
        getAnalysisMethods14.ObservedPropertyIds = strList61;
        getShippingContainers11.Search = strList61;
        deleteFieldVisits6.SamplingLocationIds = strList61;
        getExportObservations3.SpecimenIds = strList61;
        getObservationExportIIV2_0.SamplingLocationGroupIds = strList61;
        java.util.List<java.lang.String> strList67 = getObservationExportIIV2_0.AnalysisMethodIds;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationExportIIV2 getObservationExportIIV2_69 = getObservationExportIIV2_0.setLimit((java.lang.Integer) 10);
        java.util.List<java.lang.String> strList70 = getObservationExportIIV2_0.getSpecimenIds();
        org.junit.Assert.assertNull(strList1);
        org.junit.Assert.assertNull(strList2);
        org.junit.Assert.assertNotNull(getExportObservations5);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(strList10);
        org.junit.Assert.assertNull(strList12);
        org.junit.Assert.assertNull(strList13);
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(putLocationTags29);
        org.junit.Assert.assertNull(strList31);
        org.junit.Assert.assertNull(obj33);
        org.junit.Assert.assertNull(obj36);
        org.junit.Assert.assertTrue("'" + importItemStatusType37 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemStatusType.SKIPPED + "'", importItemStatusType37.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemStatusType.SKIPPED));
        org.junit.Assert.assertNotNull(importItem38);
        org.junit.Assert.assertNotNull(specimenTemplate45);
        org.junit.Assert.assertNull(boolean46);
        org.junit.Assert.assertNotNull(strArray53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(getObservationsV2_56);
        org.junit.Assert.assertNotNull(strList58);
        org.junit.Assert.assertNotNull(processor59);
        org.junit.Assert.assertNotNull(importItem60);
        org.junit.Assert.assertNotNull(strList61);
        org.junit.Assert.assertNull(strList67);
        org.junit.Assert.assertNotNull(getObservationExportIIV2_69);
        org.junit.Assert.assertNull(strList70);
    }

    @Test
    public void test24097() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest48.test24097");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostImportLabReportData postImportLabReportData0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostImportLabReportData();
        java.lang.String str1 = postImportLabReportData0.TimeZoneOffset;
        java.lang.Boolean boolean2 = postImportLabReportData0.getCreateMissingObjects();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(boolean2);
    }

    @Test
    public void test24098() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest48.test24098");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemSpecimen importItemSpecimen0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemSpecimen();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemStatusType importItemStatusType1 = importItemSpecimen0.Status;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObject importItemObject2 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObject();
        java.util.List<java.lang.String> strList3 = importItemObject2.getWarningMessages();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportChangeItem[] importChangeItemArray4 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportChangeItem[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportChangeItem> importChangeItemList5 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportChangeItem>();
        boolean boolean6 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportChangeItem>) importChangeItemList5, importChangeItemArray4);
        importItemObject2.ItemComparison = importChangeItemList5;
        java.lang.String str8 = importItemObject2.Input;
        java.lang.String str9 = importItemObject2.getRowId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItem importItem10 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_11 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray13 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList14 = new java.util.ArrayList<java.lang.String>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList14, strArray13);
        getObservationsV2_11.SpecimenIds = strList14;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags17 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray21 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList22 = new java.util.ArrayList<java.lang.String>();
        boolean boolean23 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList22, strArray21);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags24 = putLocationTags17.setTagUniqueIds(strList22);
        getObservationsV2_11.QualityControlTypes = strList22;
        java.util.List<java.lang.String> strList26 = getObservationsV2_11.getLabReportIds();
        importItem10.Errors = getObservationsV2_11;
        java.lang.Object obj28 = importItem10.getExistingItem();
        importItem10.Input = "hi!";
        java.lang.Object obj31 = importItem10.getItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemStatusType importItemStatusType32 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemStatusType.SKIPPED;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItem importItem33 = importItem10.setStatus(importItemStatusType32);
        importItemObject2.Status = importItemStatusType32;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemSpecimen importItemSpecimen35 = importItemSpecimen0.setStatus(importItemStatusType32);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObject importItemObject36 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObject();
        java.util.List<java.lang.String> strList37 = importItemObject36.getWarningMessages();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportChangeItem[] importChangeItemArray38 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportChangeItem[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportChangeItem> importChangeItemList39 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportChangeItem>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportChangeItem>) importChangeItemList39, importChangeItemArray38);
        importItemObject36.ItemComparison = importChangeItemList39;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags42 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray46 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList47 = new java.util.ArrayList<java.lang.String>();
        boolean boolean48 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList47, strArray46);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags49 = putLocationTags42.setTagUniqueIds(strList47);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObject importItemObject50 = importItemObject36.setExistingItem((java.lang.Object) putLocationTags42);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_51 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray53 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList54 = new java.util.ArrayList<java.lang.String>();
        boolean boolean55 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList54, strArray53);
        getObservationsV2_51.SpecimenIds = strList54;
        importItemObject50.WarningMessages = strList54;
        importItemSpecimen35.WarningMessages = strList54;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemSpecimen importItemSpecimen60 = importItemSpecimen35.setInput("hi!");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemSpecimen importItemSpecimen62 = importItemSpecimen35.setRowId("multipart/form-data; boundary=****895246ac-50fd-4284-9cd4-5cdd869d7100****");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Specimen specimen63 = importItemSpecimen35.Item;
        org.junit.Assert.assertNull(importItemStatusType1);
        org.junit.Assert.assertNull(strList3);
        org.junit.Assert.assertNotNull(importChangeItemArray4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(putLocationTags24);
        org.junit.Assert.assertNull(strList26);
        org.junit.Assert.assertNull(obj28);
        org.junit.Assert.assertNull(obj31);
        org.junit.Assert.assertTrue("'" + importItemStatusType32 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemStatusType.SKIPPED + "'", importItemStatusType32.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemStatusType.SKIPPED));
        org.junit.Assert.assertNotNull(importItem33);
        org.junit.Assert.assertNotNull(importItemSpecimen35);
        org.junit.Assert.assertNull(strList37);
        org.junit.Assert.assertNotNull(importChangeItemArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(putLocationTags49);
        org.junit.Assert.assertNotNull(importItemObject50);
        org.junit.Assert.assertNotNull(strArray53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(importItemSpecimen60);
        org.junit.Assert.assertNotNull(importItemSpecimen62);
        org.junit.Assert.assertNull(specimen63);
    }

    @Test
    public void test24099() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest48.test24099");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutAnalysisMethod putAnalysisMethod0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes1 = putAnalysisMethod0.getAuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutObservedProperty putObservedProperty2 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutObservedProperty();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultType resultType3 = null;
        putObservedProperty2.ResultType = resultType3;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostAnalysisMethod postAnalysisMethod5 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostAnalysisMethod();
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple> importHistoryEventSimpleList6 = postAnalysisMethod5.ImportHistoryEventSimples;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostAnalysisMethod postAnalysisMethod8 = postAnalysisMethod5.setDescription("https");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostAnalysisMethod postAnalysisMethod10 = postAnalysisMethod5.setName("hi!:///AQUARIUS/Provisioning/v1");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservedProperty postObservedProperty11 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservedProperty();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UnitGroup unitGroup12 = postObservedProperty11.UnitGroup;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple[] importHistoryEventSimpleArray13 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple> importHistoryEventSimpleList14 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple>) importHistoryEventSimpleList14, importHistoryEventSimpleArray13);
        postObservedProperty11.ImportHistoryEventSimples = importHistoryEventSimpleList14;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostAnalysisMethod postAnalysisMethod17 = postAnalysisMethod5.setImportHistoryEventSimples((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple>) importHistoryEventSimpleList14);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutObservedProperty putObservedProperty18 = putObservedProperty2.setImportHistoryEventSimples((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple>) importHistoryEventSimpleList14);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutAnalysisMethod putAnalysisMethod19 = putAnalysisMethod0.setImportHistoryEventSimples((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple>) importHistoryEventSimpleList14);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostAnalysisMethod postAnalysisMethod20 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostAnalysisMethod();
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple> importHistoryEventSimpleList21 = postAnalysisMethod20.ImportHistoryEventSimples;
        postAnalysisMethod20.Id = "MinDuration";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLabAnalysisMethod postLabAnalysisMethod24 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLabAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes25 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLabAnalysisMethod postLabAnalysisMethod26 = postLabAnalysisMethod24.setAuditAttributes(auditAttributes25);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty[] observedPropertyArray27 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty> observedPropertyList28 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty>();
        boolean boolean29 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty>) observedPropertyList28, observedPropertyArray27);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLabAnalysisMethod postLabAnalysisMethod30 = postLabAnalysisMethod26.setObservedProperties((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty>) observedPropertyList28);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes31 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLabAnalysisMethod postLabAnalysisMethod32 = postLabAnalysisMethod26.setAuditAttributes(auditAttributes31);
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty> observedPropertyList33 = postLabAnalysisMethod32.getObservedProperties();
        postAnalysisMethod20.ObservedProperties = observedPropertyList33;
        putAnalysisMethod19.ObservedProperties = observedPropertyList33;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutAnalysisMethod putAnalysisMethod37 = putAnalysisMethod19.setContext("9999-12-31T23:59:59.9999999Z://2021.4.62.0");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutAnalysisMethod putAnalysisMethod39 = putAnalysisMethod37.setMethodId("****231224c4-98ce-4e30-bd65-1d25287c4abe****");
        org.junit.Assert.assertNull(auditAttributes1);
        org.junit.Assert.assertNull(importHistoryEventSimpleList6);
        org.junit.Assert.assertNotNull(postAnalysisMethod8);
        org.junit.Assert.assertNotNull(postAnalysisMethod10);
        org.junit.Assert.assertNull(unitGroup12);
        org.junit.Assert.assertNotNull(importHistoryEventSimpleArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(postAnalysisMethod17);
        org.junit.Assert.assertNotNull(putObservedProperty18);
        org.junit.Assert.assertNotNull(putAnalysisMethod19);
        org.junit.Assert.assertNull(importHistoryEventSimpleList21);
        org.junit.Assert.assertNotNull(postLabAnalysisMethod26);
        org.junit.Assert.assertNotNull(observedPropertyArray27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(postLabAnalysisMethod30);
        org.junit.Assert.assertNotNull(postLabAnalysisMethod32);
        org.junit.Assert.assertNotNull(observedPropertyList33);
        org.junit.Assert.assertNotNull(putAnalysisMethod37);
        org.junit.Assert.assertNotNull(putAnalysisMethod39);
    }

    @Test
    public void test24100() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest48.test24100");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetCollectionMethods getCollectionMethods0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetCollectionMethods();
        java.lang.Object obj1 = getCollectionMethods0.getResponseType();
        java.lang.Object obj2 = getCollectionMethods0.getResponseType();
        java.lang.Object obj3 = getCollectionMethods0.getResponseType();
        java.lang.Object obj4 = getCollectionMethods0.getResponseType();
        org.junit.Assert.assertNotNull(obj1);
        org.junit.Assert.assertEquals(obj1.toString(), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$SearchResultCollectionMethod");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj1), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$SearchResultCollectionMethod");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj1), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$SearchResultCollectionMethod");
        org.junit.Assert.assertNotNull(obj2);
        org.junit.Assert.assertEquals(obj2.toString(), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$SearchResultCollectionMethod");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj2), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$SearchResultCollectionMethod");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj2), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$SearchResultCollectionMethod");
        org.junit.Assert.assertNotNull(obj3);
        org.junit.Assert.assertEquals(obj3.toString(), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$SearchResultCollectionMethod");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj3), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$SearchResultCollectionMethod");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj3), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$SearchResultCollectionMethod");
        org.junit.Assert.assertNotNull(obj4);
        org.junit.Assert.assertEquals(obj4.toString(), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$SearchResultCollectionMethod");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj4), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$SearchResultCollectionMethod");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj4), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$SearchResultCollectionMethod");
    }

    @Test
    public void test24101() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest48.test24101");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CorrectionListServiceRequest correctionListServiceRequest0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CorrectionListServiceRequest();
        java.time.Instant instant1 = correctionListServiceRequest0.getQueryFrom();
        correctionListServiceRequest0.TimeSeriesUniqueId = "http://MaxDurationhttp/json/reply/Double";
        org.junit.Assert.assertNull(instant1);
    }

    @Test
    public void test24102() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest48.test24102");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.GetAuthTokenServiceRequest getAuthTokenServiceRequest0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.GetAuthTokenServiceRequest();
        java.lang.String str1 = getAuthTokenServiceRequest0.getUsername();
        getAuthTokenServiceRequest0.Locale = "9999-12-31T23:59:59.999Z";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.GetAuthTokenServiceRequest getAuthTokenServiceRequest5 = getAuthTokenServiceRequest0.setUsername("https");
        java.lang.Object obj6 = getAuthTokenServiceRequest5.getResponseType();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(getAuthTokenServiceRequest5);
        org.junit.Assert.assertNotNull(obj6);
        org.junit.Assert.assertEquals(obj6.toString(), "class java.lang.String");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj6), "class java.lang.String");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj6), "class java.lang.String");
    }

    @Test
    public void test24103() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest48.test24103");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TrendLineAnalysisServiceResponse trendLineAnalysisServiceResponse0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TrendLineAnalysisServiceResponse();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TrendLineAnalysis trendLineAnalysis1 = trendLineAnalysisServiceResponse0.TrendLineAnalysis;
        java.time.Instant instant2 = trendLineAnalysisServiceResponse0.getResponseTime();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TrendLineAnalysis trendLineAnalysis3 = null;
        trendLineAnalysisServiceResponse0.TrendLineAnalysis = trendLineAnalysis3;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TrendLineAnalysis trendLineAnalysis5 = null;
        trendLineAnalysisServiceResponse0.TrendLineAnalysis = trendLineAnalysis5;
        java.lang.String str7 = trendLineAnalysisServiceResponse0.Summary;
        org.junit.Assert.assertNull(trendLineAnalysis1);
        org.junit.Assert.assertNull(instant2);
        org.junit.Assert.assertNull(str7);
    }

    @Test
    public void test24104() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest48.test24104");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSamplingLocation putSamplingLocation0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSamplingLocation();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSamplingLocation putSamplingLocation2 = putSamplingLocation0.setCustomId("https");
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttribute> extendedAttributeList3 = putSamplingLocation0.ExtendedAttributes;
        java.lang.String str4 = putSamplingLocation0.Description;
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple> standardSimpleList5 = putSamplingLocation0.Standards;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutFieldVisit putFieldVisit6 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutFieldVisit();
        putFieldVisit6.Notes = "MinDuration";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutFieldVisit putFieldVisit9 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutFieldVisit();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity[] plannedActivityArray10 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity> plannedActivityList11 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity>) plannedActivityList11, plannedActivityArray10);
        putFieldVisit9.PlannedActivities = plannedActivityList11;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutFieldVisit putFieldVisit14 = putFieldVisit6.setPlannedActivities((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity>) plannedActivityList11);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.FieldVisit fieldVisit15 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.FieldVisit();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment16 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment();
        java.lang.String str17 = domainObjectAttachment16.getId();
        java.lang.String str18 = domainObjectAttachment16.getId();
        domainObjectAttachment16.Id = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment22 = domainObjectAttachment16.setId("hi!");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment24 = domainObjectAttachment22.setId("hi!");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment25 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment();
        java.lang.String str26 = domainObjectAttachment25.getId();
        java.lang.String str27 = domainObjectAttachment25.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment[] domainObjectAttachmentArray28 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment[] { domainObjectAttachment22, domainObjectAttachment25 };
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment> domainObjectAttachmentList29 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment>) domainObjectAttachmentList29, domainObjectAttachmentArray28);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.FieldVisit fieldVisit31 = fieldVisit15.setAttachments((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment>) domainObjectAttachmentList29);
        putFieldVisit14.Attachments = domainObjectAttachmentList29;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSamplingLocation putSamplingLocation33 = putSamplingLocation0.setAttachments((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment>) domainObjectAttachmentList29);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSamplingLocation putSamplingLocation35 = putSamplingLocation0.setVerticalCollectionMethod("");
        java.lang.String str36 = putSamplingLocation0.getVerticalDatum();
        java.lang.String str37 = putSamplingLocation0.HorizontalDatum;
        java.lang.String str38 = putSamplingLocation0.getVerticalCollectionMethod();
        org.junit.Assert.assertNotNull(putSamplingLocation2);
        org.junit.Assert.assertNull(extendedAttributeList3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(standardSimpleList5);
        org.junit.Assert.assertNotNull(plannedActivityArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(putFieldVisit14);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNotNull(domainObjectAttachment22);
        org.junit.Assert.assertNotNull(domainObjectAttachment24);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertNotNull(domainObjectAttachmentArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(fieldVisit31);
        org.junit.Assert.assertNotNull(putSamplingLocation33);
        org.junit.Assert.assertNotNull(putSamplingLocation35);
        org.junit.Assert.assertNull(str36);
        org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
    }

    @Test
    public void test24105() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest48.test24105");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedTimeSeriesInfo timeAlignedTimeSeriesInfo0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedTimeSeriesInfo();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedTimeSeriesInfo timeAlignedTimeSeriesInfo2 = timeAlignedTimeSeriesInfo0.setLabel("multipart/form-data; boundary=****9fadde69-3f13-40c4-a87c-0f3f51c2dd35****");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedTimeSeriesInfo timeAlignedTimeSeriesInfo4 = timeAlignedTimeSeriesInfo0.setParameter("multipart/form-data; boundary=****221f1588-b890-43c2-a3c8-0d77cfe54330****");
        org.junit.Assert.assertNotNull(timeAlignedTimeSeriesInfo2);
        org.junit.Assert.assertNotNull(timeAlignedTimeSeriesInfo4);
    }

    @Test
    public void test24106() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest48.test24106");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.FieldVisitStatistics fieldVisitStatistics0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.FieldVisitStatistics();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.FieldVisitStatistics fieldVisitStatistics2 = fieldVisitStatistics0.setVerticalProfileCount((java.lang.Integer) 10);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.FieldVisitStatistics fieldVisitStatistics4 = fieldVisitStatistics0.setFieldSurveyCount((java.lang.Integer) 100);
        org.junit.Assert.assertNotNull(fieldVisitStatistics2);
        org.junit.Assert.assertNotNull(fieldVisitStatistics4);
    }

    @Test
    public void test24107() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest48.test24107");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Unit unit0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Unit();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Unit unit2 = unit0.setBaseOffset((java.lang.Double) (-1.0d));
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Unit unit4 = unit0.setSymbol("yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ");
        java.lang.String str5 = unit4.GroupIdentifier;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Unit unit7 = unit4.setBaseMultiplier((java.lang.Double) 10.0d);
        java.lang.Boolean boolean8 = unit4.getIsSystem();
        java.lang.String str9 = unit4.GroupIdentifier;
        java.lang.String str10 = unit4.getPluralName();
        org.junit.Assert.assertNotNull(unit2);
        org.junit.Assert.assertNotNull(unit4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(unit7);
        org.junit.Assert.assertNull(boolean8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNull(str10);
    }

    @Test
    public void test24108() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest48.test24108");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutExtendedAttribute putExtendedAttribute0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutExtendedAttribute();
        putExtendedAttribute0.Key = "/AQUARIUS/Acquisition/v2://9999-12-31T23:59:59.999Z";
        putExtendedAttribute0.Required = true;
        java.lang.String str5 = putExtendedAttribute0.Key;
        java.lang.Boolean boolean6 = putExtendedAttribute0.isRequired();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutExtendedAttribute putExtendedAttribute8 = putExtendedAttribute0.setUniqueId("multipart/form-data; boundary=****59879c02-0839-4b96-bc41-a13ebb706be4****");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutExtendedAttribute putExtendedAttribute10 = putExtendedAttribute0.setUniqueId("yyyy'-'MM'-'dd'T'HH':'mm':'ss");
        java.lang.String str11 = putExtendedAttribute10.UniqueId;
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "/AQUARIUS/Acquisition/v2://9999-12-31T23:59:59.999Z" + "'", str5, "/AQUARIUS/Acquisition/v2://9999-12-31T23:59:59.999Z");
        org.junit.Assert.assertEquals("'" + boolean6 + "' != '" + true + "'", boolean6, true);
        org.junit.Assert.assertNotNull(putExtendedAttribute8);
        org.junit.Assert.assertNotNull(putExtendedAttribute10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "yyyy'-'MM'-'dd'T'HH':'mm':'ss" + "'", str11, "yyyy'-'MM'-'dd'T'HH':'mm':'ss");
    }

    @Test
    public void test24109() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest48.test24109");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportSummaryObservation importSummaryObservation0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportSummaryObservation();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportSummaryObservation importSummaryObservation2 = importSummaryObservation0.setSummaryReportText("multipart/form-data; boundary=****bbcf5f9e-6ccf-4b63-91ab-6e645caf02af****");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportSummaryObservation importSummaryObservation4 = importSummaryObservation2.setSuccessCount((java.lang.Integer) 2);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple importHistoryEventSimple5 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple();
        java.time.OffsetDateTime offsetDateTime6 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple importHistoryEventSimple7 = importHistoryEventSimple5.setImportTime(offsetDateTime6);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple importHistoryEventSimple9 = importHistoryEventSimple5.setTimeZoneOffset("http://MaxDurationhttp/json/reply/Integer");
        java.lang.String str10 = importHistoryEventSimple9.getTimeZoneOffset();
        importSummaryObservation4.ImportHistoryEventSimple = importHistoryEventSimple9;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportSummaryObservation importSummaryObservation12 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportSummaryObservation();
        importSummaryObservation12.InvalidRowsCsvUrl = "hi!";
        java.lang.Integer int15 = importSummaryObservation12.SuccessCount;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationImportSummary observationImportSummary16 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationImportSummary();
        observationImportSummary16.UpdateCount = (-1);
        java.lang.Integer int19 = observationImportSummary16.ExpectedCount;
        java.lang.String str20 = observationImportSummary16.SummaryReportText;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportError[] importErrorArray21 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportError[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportError> importErrorList22 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportError>();
        boolean boolean23 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportError>) importErrorList22, importErrorArray21);
        observationImportSummary16.ImportJobErrors = importErrorList22;
        observationImportSummary16.NewCount = 1;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple importHistoryEventSimple27 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple();
        java.lang.String str28 = importHistoryEventSimple27.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationImportSummary observationImportSummary29 = observationImportSummary16.setImportHistoryEventSimple(importHistoryEventSimple27);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationImportSummary observationImportSummary30 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationImportSummary();
        observationImportSummary30.UpdateCount = (-1);
        java.lang.Integer int33 = observationImportSummary30.ExpectedCount;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationImportSummary observationImportSummary34 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationImportSummary();
        observationImportSummary34.UpdateCount = (-1);
        java.lang.Integer int37 = observationImportSummary34.ExpectedCount;
        java.lang.String str38 = observationImportSummary34.SummaryReportText;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObservation[] importItemObservationArray39 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObservation[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObservation> importItemObservationList40 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObservation>();
        boolean boolean41 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObservation>) importItemObservationList40, importItemObservationArray39);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationImportSummary observationImportSummary42 = observationImportSummary34.setImportItems((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObservation>) importItemObservationList40);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationImportSummary observationImportSummary43 = observationImportSummary30.setNonErrorImportItems((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObservation>) importItemObservationList40);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationImportSummary observationImportSummary44 = observationImportSummary16.setNonErrorImportItems((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObservation>) importItemObservationList40);
        importSummaryObservation12.NonErrorImportItems = importItemObservationList40;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportSummaryObservation importSummaryObservation46 = importSummaryObservation4.setImportItems((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObservation>) importItemObservationList40);
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportError> importErrorList47 = importSummaryObservation46.ImportJobErrors;
        org.junit.Assert.assertNotNull(importSummaryObservation2);
        org.junit.Assert.assertNotNull(importSummaryObservation4);
        org.junit.Assert.assertNotNull(importHistoryEventSimple7);
        org.junit.Assert.assertNotNull(importHistoryEventSimple9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "http://MaxDurationhttp/json/reply/Integer" + "'", str10, "http://MaxDurationhttp/json/reply/Integer");
        org.junit.Assert.assertNull(int15);
        org.junit.Assert.assertNull(int19);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNotNull(importErrorArray21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertNotNull(observationImportSummary29);
        org.junit.Assert.assertNull(int33);
        org.junit.Assert.assertNull(int37);
        org.junit.Assert.assertNull(str38);
        org.junit.Assert.assertNotNull(importItemObservationArray39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(observationImportSummary42);
        org.junit.Assert.assertNotNull(observationImportSummary43);
        org.junit.Assert.assertNotNull(observationImportSummary44);
        org.junit.Assert.assertNotNull(importSummaryObservation46);
        org.junit.Assert.assertNull(importErrorList47);
    }

    @Test
    public void test24110() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest48.test24110");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity pointVelocityDischargeActivity0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity();
        java.lang.String str1 = pointVelocityDischargeActivity0.SoftwareVersion;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity pointVelocityDischargeActivity3 = pointVelocityDischargeActivity0.setIsValid((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity pointVelocityDischargeActivity5 = pointVelocityDischargeActivity0.setSoftwareVersion("");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity pointVelocityDischargeActivity7 = pointVelocityDischargeActivity5.setSoftwareVersion("MaxInstant");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay8 = pointVelocityDischargeActivity7.getDistanceToMeter();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(pointVelocityDischargeActivity3);
        org.junit.Assert.assertNotNull(pointVelocityDischargeActivity5);
        org.junit.Assert.assertNotNull(pointVelocityDischargeActivity7);
        org.junit.Assert.assertNull(quantityWithDisplay8);
    }

    @Test
    public void test24111() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest48.test24111");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DeleteFieldVisits deleteFieldVisits0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DeleteFieldVisits();
        java.lang.String str1 = deleteFieldVisits0.Sort;
        deleteFieldVisits0.Sort = "9999-12-31T23:59:59.999Z";
        java.time.Instant instant4 = deleteFieldVisits0.EndStartTime;
        java.util.List<java.lang.String> strList5 = deleteFieldVisits0.getPlanningStatuses();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_6 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.util.List<java.lang.String> strList7 = getObservationsV2_6.SamplingContextTagIds;
        java.time.Instant instant8 = getObservationsV2_6.getEndModificationTime();
        java.util.List<java.lang.String> strList9 = getObservationsV2_6.Media;
        java.util.List<java.lang.String> strList10 = getObservationsV2_6.ActivityTypes;
        java.util.List<java.lang.String> strList11 = getObservationsV2_6.getLabResultLaboratoryIds();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_12 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray14 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList15 = new java.util.ArrayList<java.lang.String>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList15, strArray14);
        getObservationsV2_12.SpecimenIds = strList15;
        getObservationsV2_6.LabResultLabAnalysisMethodIds = strList15;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DeleteFieldVisits deleteFieldVisits19 = deleteFieldVisits0.setFieldTripIds((java.util.List<java.lang.String>) strList15);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportSpecimens getExportSpecimens20 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportSpecimens();
        java.util.List<java.lang.String> strList21 = getExportSpecimens20.getActivityTypes();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Qualifier qualifier22 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Qualifier();
        java.time.Instant instant23 = qualifier22.DateApplied;
        java.lang.String str24 = qualifier22.User;
        java.lang.String str25 = qualifier22.getIdentifier();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest26 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest();
        java.lang.Object obj27 = timeAlignedDataServiceRequest26.getResponseType();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse28 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant29 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse30 = locationDescriptionListServiceResponse28.setNextToken(instant29);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest31 = timeAlignedDataServiceRequest26.setQueryFrom(instant29);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Qualifier qualifier32 = qualifier22.setDateApplied(instant29);
        getExportSpecimens20.Before = instant29;
        java.util.List<java.lang.String> strList34 = getExportSpecimens20.getLaboratoryIds();
        java.util.List<java.lang.String> strList35 = getExportSpecimens20.getSearch();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivityRecurrence samplingPlanPlannedActivityRecurrence36 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivityRecurrence();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.RecurrenceFrequencyType recurrenceFrequencyType37 = samplingPlanPlannedActivityRecurrence36.RecurrenceFrequency;
        java.util.List<java.lang.String> strList38 = samplingPlanPlannedActivityRecurrence36.getMonthsOfYear();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutQualifier putQualifier39 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutQualifier();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutQualifier putQualifier41 = putQualifier39.setUniqueId("");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest42 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_43 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray45 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList46 = new java.util.ArrayList<java.lang.String>();
        boolean boolean47 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList46, strArray45);
        getObservationsV2_43.SpecimenIds = strList46;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags49 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray53 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList54 = new java.util.ArrayList<java.lang.String>();
        boolean boolean55 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList54, strArray53);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags56 = putLocationTags49.setTagUniqueIds(strList54);
        getObservationsV2_43.QualityControlTypes = strList54;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest58 = timeAlignedDataServiceRequest42.setTimeSeriesUniqueIds(strList54);
        putQualifier39.GroupIdentifiers = strList54;
        java.util.ArrayList<java.lang.String> strList60 = putQualifier39.GroupIdentifiers;
        samplingPlanPlannedActivityRecurrence36.MonthsOfYear = strList60;
        getExportSpecimens20.ActivityTypes = strList60;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_63 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.util.List<java.lang.String> strList64 = getObservationsV2_63.SamplingContextTagIds;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_65 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray67 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList68 = new java.util.ArrayList<java.lang.String>();
        boolean boolean69 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList68, strArray67);
        getObservationsV2_65.SpecimenIds = strList68;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags71 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray75 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList76 = new java.util.ArrayList<java.lang.String>();
        boolean boolean77 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList76, strArray75);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags78 = putLocationTags71.setTagUniqueIds(strList76);
        getObservationsV2_65.QualityControlTypes = strList76;
        getObservationsV2_63.ResultGrades = strList76;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportSpecimens getExportSpecimens81 = getExportSpecimens20.setSamplingLocationGroupIds((java.util.List<java.lang.String>) strList76);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags82 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray86 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList87 = new java.util.ArrayList<java.lang.String>();
        boolean boolean88 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList87, strArray86);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags89 = putLocationTags82.setTagUniqueIds(strList87);
        getExportSpecimens20.AnalyticalGroupIds = strList87;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DeleteFieldVisits deleteFieldVisits91 = deleteFieldVisits0.setScheduleIds((java.util.List<java.lang.String>) strList87);
        java.util.List<java.lang.String> strList92 = deleteFieldVisits91.Ids;
        java.util.List<java.lang.String> strList93 = deleteFieldVisits91.getSamplingPlanIds();
        java.util.List<java.lang.String> strList94 = deleteFieldVisits91.SamplingLocationIds;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(instant4);
        org.junit.Assert.assertNull(strList5);
        org.junit.Assert.assertNull(strList7);
        org.junit.Assert.assertNull(instant8);
        org.junit.Assert.assertNull(strList9);
        org.junit.Assert.assertNull(strList10);
        org.junit.Assert.assertNull(strList11);
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(deleteFieldVisits19);
        org.junit.Assert.assertNull(strList21);
        org.junit.Assert.assertNull(instant23);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertNotNull(obj27);
        org.junit.Assert.assertEquals(obj27.toString(), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj27), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj27), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertNotNull(instant29);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse30);
        org.junit.Assert.assertNotNull(timeAlignedDataServiceRequest31);
        org.junit.Assert.assertNotNull(qualifier32);
        org.junit.Assert.assertNull(strList34);
        org.junit.Assert.assertNull(strList35);
        org.junit.Assert.assertNull(recurrenceFrequencyType37);
        org.junit.Assert.assertNull(strList38);
        org.junit.Assert.assertNotNull(putQualifier41);
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(strArray53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(putLocationTags56);
        org.junit.Assert.assertNotNull(timeAlignedDataServiceRequest58);
        org.junit.Assert.assertNotNull(strList60);
        org.junit.Assert.assertNull(strList64);
        org.junit.Assert.assertNotNull(strArray67);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertNotNull(strArray75);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertNotNull(putLocationTags78);
        org.junit.Assert.assertNotNull(getExportSpecimens81);
        org.junit.Assert.assertNotNull(strArray86);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + true + "'", boolean88 == true);
        org.junit.Assert.assertNotNull(putLocationTags89);
        org.junit.Assert.assertNotNull(deleteFieldVisits91);
        org.junit.Assert.assertNull(strList92);
        org.junit.Assert.assertNull(strList93);
        org.junit.Assert.assertNull(strList94);
    }

    @Test
    public void test24112() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest48.test24112");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetFieldVisits getFieldVisits0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetFieldVisits();
        java.util.List<java.lang.String> strList1 = getFieldVisits0.getSamplingLocationIds();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags2 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray6 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList7 = new java.util.ArrayList<java.lang.String>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList7, strArray6);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags9 = putLocationTags2.setTagUniqueIds(strList7);
        java.util.ArrayList<java.lang.String> strList10 = putLocationTags9.TagUniqueIds;
        getFieldVisits0.ScheduleIds = strList10;
        java.lang.Integer int12 = getFieldVisits0.Limit;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetActivities getActivities13 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetActivities();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse14 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary15 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary17 = dischargeSummary15.setPublish((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse18 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant19 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse20 = locationDescriptionListServiceResponse18.setNextToken(instant19);
        dischargeSummary15.MeasurementTime = instant19;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse22 = locationDescriptionListServiceResponse14.setNextToken(instant19);
        java.time.Instant instant23 = locationDescriptionListServiceResponse14.getNextToken();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetActivities getActivities24 = getActivities13.setToStartTime(instant23);
        java.lang.String str25 = getActivities24.getSort();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetActivities getActivities27 = getActivities24.setLimit((java.lang.Integer) 1);
        getActivities27.Cursor = "";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_30 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray33 = new java.lang.String[] { "", "" };
        java.util.ArrayList<java.lang.String> strList34 = new java.util.ArrayList<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList34, strArray33);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_36 = getObservationsV2_30.setDataClassifications((java.util.List<java.lang.String>) strList34);
        java.util.List<java.lang.String> strList37 = getObservationsV2_30.ResultGrades;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary38 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        dischargeSummary38.Reviewer = "";
        java.time.Instant instant41 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        dischargeSummary38.MeasurementTime = instant41;
        getObservationsV2_30.StartResultTime = instant41;
        java.lang.String[] strArray53 = new java.lang.String[] { "https", "/AQUARIUS/Provisioning/v1", "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ", "2021.4.62.0", "hi!", "2021.4.62.0", "2021.4.62.0", "/AQUARIUS/Acquisition/v2", "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ" };
        java.util.ArrayList<java.lang.String> strList54 = new java.util.ArrayList<java.lang.String>();
        boolean boolean55 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList54, strArray53);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_56 = getObservationsV2_30.setAnalyticalGroupIds((java.util.List<java.lang.String>) strList54);
        getActivities27.ActivityTypes = strList54;
        getFieldVisits0.PlanningStatuses = strList54;
        java.lang.String str59 = getFieldVisits0.Sort;
        getFieldVisits0.Sort = "MinInstant";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetFieldVisits getFieldVisits63 = getFieldVisits0.setSort("/AQUARIUS/Provisioning/v1");
        java.time.Instant instant64 = getFieldVisits63.getStartStartTime();
        org.junit.Assert.assertNull(strList1);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(putLocationTags9);
        org.junit.Assert.assertNotNull(strList10);
        org.junit.Assert.assertNull(int12);
        org.junit.Assert.assertNotNull(dischargeSummary17);
        org.junit.Assert.assertNotNull(instant19);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse20);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse22);
        org.junit.Assert.assertNotNull(instant23);
        org.junit.Assert.assertNotNull(getActivities24);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertNotNull(getActivities27);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(getObservationsV2_36);
        org.junit.Assert.assertNull(strList37);
        org.junit.Assert.assertNotNull(instant41);
        org.junit.Assert.assertNotNull(strArray53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(getObservationsV2_56);
        org.junit.Assert.assertNull(str59);
        org.junit.Assert.assertNotNull(getFieldVisits63);
        org.junit.Assert.assertNull(instant64);
    }

    @Test
    public void test24113() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest48.test24113");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ReferenceStandardOffset referenceStandardOffset0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ReferenceStandardOffset();
        java.lang.String str1 = referenceStandardOffset0.getStandard();
        java.lang.String str2 = referenceStandardOffset0.getStandard();
        java.lang.String str3 = referenceStandardOffset0.Comments;
        java.lang.Double double4 = referenceStandardOffset0.OffsetToReferenceStandard;
        referenceStandardOffset0.OffsetToReferenceStandard = 0.0d;
        referenceStandardOffset0.Method = "";
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(double4);
    }

    @Test
    public void test24114() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest48.test24114");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple importHistoryEventSimple0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple();
        java.time.OffsetDateTime offsetDateTime1 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple importHistoryEventSimple2 = importHistoryEventSimple0.setImportTime(offsetDateTime1);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UserProfile userProfile3 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple importHistoryEventSimple4 = importHistoryEventSimple2.setImportedBy(userProfile3);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UserProfile userProfile5 = importHistoryEventSimple2.getImportedBy();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple importHistoryEventSimple7 = importHistoryEventSimple2.setFileName("http://MaxDurationhttp/json/reply/Double");
        org.junit.Assert.assertNotNull(importHistoryEventSimple2);
        org.junit.Assert.assertNotNull(importHistoryEventSimple4);
        org.junit.Assert.assertNull(userProfile5);
        org.junit.Assert.assertNotNull(importHistoryEventSimple7);
    }

    @Test
    public void test24115() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest48.test24115");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Attachment attachment0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Attachment();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.AttachmentCategory attachmentCategory1 = attachment0.AttachmentCategory;
        java.lang.Double double2 = attachment0.GpsLongitude;
        java.lang.String str3 = attachment0.UploadedByUser;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Attachment attachment5 = attachment0.setUniqueId("http://MaxDurationhttp/json/reply/ArrayList");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.AttachmentType attachmentType6 = attachment5.AttachmentType;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.AttachmentCategory attachmentCategory7 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.AttachmentCategory.CrossSection;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Attachment attachment8 = attachment5.setAttachmentCategory(attachmentCategory7);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Attachment attachment10 = attachment5.setFileName("");
        java.lang.String str11 = attachment10.Comment;
        org.junit.Assert.assertNull(attachmentCategory1);
        org.junit.Assert.assertNull(double2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(attachment5);
        org.junit.Assert.assertNull(attachmentType6);
        org.junit.Assert.assertTrue("'" + attachmentCategory7 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.AttachmentCategory.CrossSection + "'", attachmentCategory7.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.AttachmentCategory.CrossSection));
        org.junit.Assert.assertNotNull(attachment8);
        org.junit.Assert.assertNotNull(attachment10);
        org.junit.Assert.assertNull(str11);
    }

    @Test
    public void test24116() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest48.test24116");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.IndexConfiguration indexConfiguration0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.IndexConfiguration();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Unit unit1 = indexConfiguration0.Unit;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes2 = indexConfiguration0.AuditAttributes;
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.IndexRange> indexRangeList3 = indexConfiguration0.getIndexRanges();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.IndexConfiguration indexConfiguration5 = indexConfiguration0.setIssuingOrganization("MaxInstant");
        indexConfiguration5.CustomId = "ZZZZZ";
        indexConfiguration5.IssuingOrganization = "multipart/form-data; boundary=****895246ac-50fd-4284-9cd4-5cdd869d7100****";
        org.junit.Assert.assertNull(unit1);
        org.junit.Assert.assertNull(auditAttributes2);
        org.junit.Assert.assertNull(indexRangeList3);
        org.junit.Assert.assertNotNull(indexConfiguration5);
    }

    @Test
    public void test24117() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest48.test24117");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PopulatedUnitGroup populatedUnitGroup0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PopulatedUnitGroup();
        java.lang.String str1 = populatedUnitGroup0.getDisplayName();
        java.lang.String str2 = populatedUnitGroup0.getBaseUnitIdentifier();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.UnitGroup unitGroup4 = populatedUnitGroup0.setTimeDimension((java.lang.Integer) 0);
        java.lang.Integer int5 = populatedUnitGroup0.CurrentDimension;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNotNull(unitGroup4);
        org.junit.Assert.assertNull(int5);
    }

    @Test
    public void test24118() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest48.test24118");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescription locationDescription0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescription();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescription locationDescription2 = locationDescription0.setIdentifier("");
        locationDescription2.UtcOffset = 1.0d;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescription locationDescription6 = locationDescription2.setUniqueId("9999-12-31T23:59:59.999Z");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportObservations getExportObservations7 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportObservations();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_8 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray11 = new java.lang.String[] { "", "" };
        java.util.ArrayList<java.lang.String> strList12 = new java.util.ArrayList<java.lang.String>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList12, strArray11);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_14 = getObservationsV2_8.setDataClassifications((java.util.List<java.lang.String>) strList12);
        java.time.Instant instant15 = getObservationsV2_8.getStartObservedTime();
        getObservationsV2_8.MinNumericResultValue = (-1.0d);
        java.util.List<java.lang.String> strList18 = null;
        getObservationsV2_8.SamplingContextTagIds = strList18;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescription locationDescription20 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescription();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescription locationDescription22 = locationDescription20.setIdentifier("");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ControlConditionActivity controlConditionActivity23 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ControlConditionActivity();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ControlCleanedType controlCleanedType24 = null;
        controlConditionActivity23.ControlCleaned = controlCleanedType24;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse26 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant27 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse28 = locationDescriptionListServiceResponse26.setNextToken(instant27);
        controlConditionActivity23.DateCleaned = instant27;
        locationDescription22.LastModified = instant27;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_31 = getObservationsV2_8.setStartResultTime(instant27);
        getExportObservations7.StartObservedTime = instant27;
        locationDescription2.LastModified = instant27;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExtendedAttributes getExtendedAttributes34 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExtendedAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AppliesToType appliesToType35 = getExtendedAttributes34.AppliesToType;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DeleteFieldVisits deleteFieldVisits36 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DeleteFieldVisits();
        java.lang.String str37 = deleteFieldVisits36.getSort();
        java.util.List<java.lang.String> strList38 = deleteFieldVisits36.Ids;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_39 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray42 = new java.lang.String[] { "", "" };
        java.util.ArrayList<java.lang.String> strList43 = new java.util.ArrayList<java.lang.String>();
        boolean boolean44 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList43, strArray42);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_45 = getObservationsV2_39.setDataClassifications((java.util.List<java.lang.String>) strList43);
        java.util.List<java.lang.String> strList46 = getObservationsV2_39.ResultGrades;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary47 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        dischargeSummary47.Reviewer = "";
        java.time.Instant instant50 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        dischargeSummary47.MeasurementTime = instant50;
        getObservationsV2_39.StartResultTime = instant50;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest53 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ControlConditionActivity controlConditionActivity54 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ControlConditionActivity();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ControlCleanedType controlCleanedType55 = null;
        controlConditionActivity54.ControlCleaned = controlCleanedType55;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse57 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant58 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse59 = locationDescriptionListServiceResponse57.setNextToken(instant58);
        controlConditionActivity54.DateCleaned = instant58;
        timeAlignedDataServiceRequest53.QueryFrom = instant58;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_62 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray64 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList65 = new java.util.ArrayList<java.lang.String>();
        boolean boolean66 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList65, strArray64);
        getObservationsV2_62.SpecimenIds = strList65;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags68 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray72 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList73 = new java.util.ArrayList<java.lang.String>();
        boolean boolean74 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList73, strArray72);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags75 = putLocationTags68.setTagUniqueIds(strList73);
        getObservationsV2_62.ActivityIds = strList73;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest77 = timeAlignedDataServiceRequest53.setTimeSeriesOutputUnitIds(strList73);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_78 = getObservationsV2_39.setCollectionMethodIds((java.util.List<java.lang.String>) strList73);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DeleteFieldVisits deleteFieldVisits79 = deleteFieldVisits36.setSamplingPlanIds((java.util.List<java.lang.String>) strList73);
        getExtendedAttributes34.Ids = strList73;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescription locationDescription81 = locationDescription2.setSecondaryFolders(strList73);
        java.lang.String str82 = locationDescription81.getUniqueId();
        org.junit.Assert.assertNotNull(locationDescription2);
        org.junit.Assert.assertNotNull(locationDescription6);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(getObservationsV2_14);
        org.junit.Assert.assertNull(instant15);
        org.junit.Assert.assertNotNull(locationDescription22);
        org.junit.Assert.assertNotNull(instant27);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse28);
        org.junit.Assert.assertNotNull(getObservationsV2_31);
        org.junit.Assert.assertNull(appliesToType35);
        org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertNull(strList38);
        org.junit.Assert.assertNotNull(strArray42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(getObservationsV2_45);
        org.junit.Assert.assertNull(strList46);
        org.junit.Assert.assertNotNull(instant50);
        org.junit.Assert.assertNotNull(instant58);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse59);
        org.junit.Assert.assertNotNull(strArray64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertNotNull(strArray72);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertNotNull(putLocationTags75);
        org.junit.Assert.assertNotNull(timeAlignedDataServiceRequest77);
        org.junit.Assert.assertNotNull(getObservationsV2_78);
        org.junit.Assert.assertNotNull(deleteFieldVisits79);
        org.junit.Assert.assertNotNull(locationDescription81);
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "9999-12-31T23:59:59.999Z" + "'", str82, "9999-12-31T23:59:59.999Z");
    }

    @Test
    public void test24119() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest48.test24119");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservedProperty postObservedProperty0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservedProperty();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisType analysisType1 = postObservedProperty0.getAnalysisType();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty observedProperty2 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation3 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation();
        observation3.CustomId = "hi!";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.CategoricalResult categoricalResult6 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation7 = observation3.setCategoricalResult(categoricalResult6);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple[] importHistoryEventSimpleArray8 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple> importHistoryEventSimpleList9 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple>) importHistoryEventSimpleList9, importHistoryEventSimpleArray8);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation11 = observation3.setImportHistoryEventSimples((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple>) importHistoryEventSimpleList9);
        observedProperty2.ImportHistoryEventSimples = importHistoryEventSimpleList9;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservedProperty postObservedProperty13 = postObservedProperty0.setImportHistoryEventSimples((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple>) importHistoryEventSimpleList9);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservedProperty postObservedProperty15 = postObservedProperty13.setCasNumber("MinInstant");
        java.lang.String str16 = postObservedProperty13.Name;
        org.junit.Assert.assertNull(analysisType1);
        org.junit.Assert.assertNotNull(observation7);
        org.junit.Assert.assertNotNull(importHistoryEventSimpleArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(observation11);
        org.junit.Assert.assertNotNull(postObservedProperty13);
        org.junit.Assert.assertNotNull(postObservedProperty15);
        org.junit.Assert.assertNull(str16);
    }

    @Test
    public void test24120() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest48.test24120");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Vertical vertical0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Vertical();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay1 = vertical0.SoundedDepth;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay2 = null;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Vertical vertical3 = vertical0.setSegmentDischarge(quantityWithDisplay2);
        java.lang.Boolean boolean4 = vertical0.getIsDischargeEstimated();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Vertical vertical6 = vertical0.setIsDischargeEstimated((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Vertical vertical7 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Vertical();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FlowDirectionType flowDirectionType8 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FlowDirectionType.Reversed;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Vertical vertical9 = vertical7.setFlowDirection(flowDirectionType8);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VelocityObservation velocityObservation10 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VelocityObservation();
        vertical7.VelocityObservation = velocityObservation10;
        vertical7.CosineOfUniqueFlow = (-1.0d);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Vertical vertical15 = vertical7.setVerticalNumber((java.lang.Double) 100.0d);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity pointVelocityDischargeActivity16 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity();
        java.lang.String str17 = pointVelocityDischargeActivity16.SoftwareVersion;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity pointVelocityDischargeActivity19 = pointVelocityDischargeActivity16.setIsValid((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity pointVelocityDischargeActivity21 = pointVelocityDischargeActivity16.setMethodCoefficientUsed((java.lang.Boolean) true);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Vertical vertical22 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Vertical();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay23 = vertical22.SoundedDepth;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VerticalType verticalType24 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VerticalType.StartEdgeNoWaterBefore;
        vertical22.VerticalType = verticalType24;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VelocityObservation velocityObservation26 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VelocityObservation();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DeploymentMethodType deploymentMethodType27 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DeploymentMethodType.Unknown;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VelocityObservation velocityObservation28 = velocityObservation26.setDeploymentMethod(deploymentMethodType27);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VelocityObservation velocityObservation29 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VelocityObservation();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DeploymentMethodType deploymentMethodType30 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DeploymentMethodType.Unknown;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VelocityObservation velocityObservation31 = velocityObservation29.setDeploymentMethod(deploymentMethodType30);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VelocityDepthObservation[] velocityDepthObservationArray32 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VelocityDepthObservation[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VelocityDepthObservation> velocityDepthObservationList33 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VelocityDepthObservation>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VelocityDepthObservation>) velocityDepthObservationList33, velocityDepthObservationArray32);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VelocityObservation velocityObservation35 = velocityObservation31.setObservations((java.util.List<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VelocityDepthObservation>) velocityDepthObservationList33);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VelocityObservation velocityObservation36 = velocityObservation26.setObservations((java.util.List<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VelocityDepthObservation>) velocityDepthObservationList33);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Vertical vertical37 = vertical22.setVelocityObservation(velocityObservation26);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DatumConvertedQuantityWithDisplay datumConvertedQuantityWithDisplay38 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DatumConvertedQuantityWithDisplay();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Vertical vertical39 = vertical37.setEffectiveDepth((com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay) datumConvertedQuantityWithDisplay38);
        pointVelocityDischargeActivity16.Width = datumConvertedQuantityWithDisplay38;
        datumConvertedQuantityWithDisplay38.Unit = "multipart/form-data; boundary=****f2ce0d54-dac7-4cd0-b74f-1024089261f9****";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay44 = datumConvertedQuantityWithDisplay38.setUnit("");
        vertical7.TaglinePosition = quantityWithDisplay44;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Vertical vertical46 = vertical6.setSegmentArea(quantityWithDisplay44);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ActiveMeterDetails activeMeterDetails47 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ActiveMeterDetails();
        java.lang.String str48 = activeMeterDetails47.SoftwareVersion;
        java.lang.String str49 = activeMeterDetails47.SerialNumber;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MeterType meterType50 = activeMeterDetails47.getMeterType();
        vertical6.CurrentMeter = activeMeterDetails47;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ActiveMeterDetails activeMeterDetails53 = activeMeterDetails47.setSoftwareVersion("****26835278-3e68-484a-a157-468aab2e69a2****");
        org.junit.Assert.assertNull(quantityWithDisplay1);
        org.junit.Assert.assertNotNull(vertical3);
        org.junit.Assert.assertNull(boolean4);
        org.junit.Assert.assertNotNull(vertical6);
        org.junit.Assert.assertTrue("'" + flowDirectionType8 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FlowDirectionType.Reversed + "'", flowDirectionType8.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FlowDirectionType.Reversed));
        org.junit.Assert.assertNotNull(vertical9);
        org.junit.Assert.assertNotNull(vertical15);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertNotNull(pointVelocityDischargeActivity19);
        org.junit.Assert.assertNotNull(pointVelocityDischargeActivity21);
        org.junit.Assert.assertNull(quantityWithDisplay23);
        org.junit.Assert.assertTrue("'" + verticalType24 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VerticalType.StartEdgeNoWaterBefore + "'", verticalType24.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VerticalType.StartEdgeNoWaterBefore));
        org.junit.Assert.assertTrue("'" + deploymentMethodType27 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DeploymentMethodType.Unknown + "'", deploymentMethodType27.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DeploymentMethodType.Unknown));
        org.junit.Assert.assertNotNull(velocityObservation28);
        org.junit.Assert.assertTrue("'" + deploymentMethodType30 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DeploymentMethodType.Unknown + "'", deploymentMethodType30.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DeploymentMethodType.Unknown));
        org.junit.Assert.assertNotNull(velocityObservation31);
        org.junit.Assert.assertNotNull(velocityDepthObservationArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(velocityObservation35);
        org.junit.Assert.assertNotNull(velocityObservation36);
        org.junit.Assert.assertNotNull(vertical37);
        org.junit.Assert.assertNotNull(vertical39);
        org.junit.Assert.assertNotNull(quantityWithDisplay44);
        org.junit.Assert.assertNotNull(vertical46);
        org.junit.Assert.assertNull(str48);
        org.junit.Assert.assertNull(str49);
        org.junit.Assert.assertNull(meterType50);
        org.junit.Assert.assertNotNull(activeMeterDetails53);
    }

    @Test
    public void test24121() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest48.test24121");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.TimeSeries timeSeries0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.TimeSeries();
        java.lang.String str1 = timeSeries0.ComputationIdentifier;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeTransactionListServiceRequest metadataChangeTransactionListServiceRequest2 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeTransactionListServiceRequest();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostRecurringReport postRecurringReport3 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostRecurringReport();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary4 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        dischargeSummary4.Reviewer = "";
        java.time.Instant instant7 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        dischargeSummary4.MeasurementTime = instant7;
        postRecurringReport3.NextGenerationDate = instant7;
        java.time.Instant instant10 = postRecurringReport3.getNextGenerationDate();
        java.lang.String str11 = com.aquaticinformatics.aquarius.sdk.samples.serializers.InstantSerializer.format(instant10);
        metadataChangeTransactionListServiceRequest2.QueryFrom = instant10;
        java.time.Instant instant13 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MinValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeTransactionListServiceRequest metadataChangeTransactionListServiceRequest14 = metadataChangeTransactionListServiceRequest2.setQueryFrom(instant13);
        timeSeries0.LastModifiedTime = instant13;
        timeSeries0.Publish = false;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.StatisticalDateTimeOffset statisticalDateTimeOffset18 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.StatisticalDateTimeOffset();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostRecurringReport postRecurringReport19 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostRecurringReport();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary20 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        dischargeSummary20.Reviewer = "";
        java.time.Instant instant23 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        dischargeSummary20.MeasurementTime = instant23;
        postRecurringReport19.NextGenerationDate = instant23;
        java.time.Instant instant26 = postRecurringReport19.getNextGenerationDate();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.StatisticalDateTimeOffset statisticalDateTimeOffset27 = statisticalDateTimeOffset18.setDateTimeOffset(instant26);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDescription timeSeriesDescription28 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDescription();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest29 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest();
        java.lang.Object obj30 = timeAlignedDataServiceRequest29.getResponseType();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse31 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant32 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse33 = locationDescriptionListServiceResponse31.setNextToken(instant32);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest34 = timeAlignedDataServiceRequest29.setQueryFrom(instant32);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDescription timeSeriesDescription35 = timeSeriesDescription28.setRawStartTime(instant32);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.StatisticalDateTimeOffset statisticalDateTimeOffset36 = statisticalDateTimeOffset18.setDateTimeOffset(instant32);
        timeSeries0.LastModifiedTime = instant32;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.TimeSeries timeSeries39 = timeSeries0.setIdentifier("");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.TimeSeries timeSeries41 = timeSeries0.setComment("MaxDuration");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.TimeSeries timeSeries43 = timeSeries41.setPublish((java.lang.Boolean) true);
        java.time.Instant instant44 = timeSeries41.getLastModifiedTime();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.TimeSeries timeSeries46 = timeSeries41.setComputationIdentifier("hi!:///AQUARIUS/Provisioning/v1");
        timeSeries46.Unit = "multipart/form-data; boundary=****f2ce0d54-dac7-4cd0-b74f-1024089261f9****";
        timeSeries46.ComputationIdentifier = "0001-01-01T00:00:00.0000000Z";
        java.lang.String str51 = timeSeries46.getLocationUniqueId();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(instant7);
        org.junit.Assert.assertNotNull(instant10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "9999-12-31T23:59:59.999Z" + "'", str11, "9999-12-31T23:59:59.999Z");
        org.junit.Assert.assertNotNull(instant13);
        org.junit.Assert.assertNotNull(metadataChangeTransactionListServiceRequest14);
        org.junit.Assert.assertNotNull(instant23);
        org.junit.Assert.assertNotNull(instant26);
        org.junit.Assert.assertNotNull(statisticalDateTimeOffset27);
        org.junit.Assert.assertNotNull(obj30);
        org.junit.Assert.assertEquals(obj30.toString(), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj30), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj30), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertNotNull(instant32);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse33);
        org.junit.Assert.assertNotNull(timeAlignedDataServiceRequest34);
        org.junit.Assert.assertNotNull(timeSeriesDescription35);
        org.junit.Assert.assertNotNull(statisticalDateTimeOffset36);
        org.junit.Assert.assertNotNull(timeSeries39);
        org.junit.Assert.assertNotNull(timeSeries41);
        org.junit.Assert.assertNotNull(timeSeries43);
        org.junit.Assert.assertNotNull(instant44);
        org.junit.Assert.assertNotNull(timeSeries46);
        org.junit.Assert.assertNull(str51);
    }

    @Test
    public void test24122() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest48.test24122");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationReferenceStandard locationReferenceStandard0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationReferenceStandard();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ReferenceStandardOffset[] referenceStandardOffsetArray1 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ReferenceStandardOffset[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ReferenceStandardOffset> referenceStandardOffsetList2 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ReferenceStandardOffset>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ReferenceStandardOffset>) referenceStandardOffsetList2, referenceStandardOffsetArray1);
        locationReferenceStandard0.ReferenceStandardOffsets = referenceStandardOffsetList2;
        locationReferenceStandard0.ReferenceStandard = "2021.4.62.0";
        java.lang.String str7 = locationReferenceStandard0.Method;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationReferenceStandard locationReferenceStandard9 = locationReferenceStandard0.setReferenceStandard("https");
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ReferenceStandardOffset> referenceStandardOffsetList10 = locationReferenceStandard9.getReferenceStandardOffsets();
        java.lang.String str11 = locationReferenceStandard9.ReferenceStandard;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationReferenceStandard locationReferenceStandard13 = locationReferenceStandard9.setComments("'.'SSSSSSS");
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ReferenceStandardOffset> referenceStandardOffsetList14 = locationReferenceStandard13.ReferenceStandardOffsets;
        org.junit.Assert.assertNotNull(referenceStandardOffsetArray1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(locationReferenceStandard9);
        org.junit.Assert.assertNotNull(referenceStandardOffsetList10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "https" + "'", str11, "https");
        org.junit.Assert.assertNotNull(locationReferenceStandard13);
        org.junit.Assert.assertNotNull(referenceStandardOffsetList14);
    }

    @Test
    public void test24123() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest48.test24123");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Laboratory laboratory0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Laboratory();
        laboratory0.Id = "MaxInstant";
        java.lang.String str3 = laboratory0.PhoneNumber;
        java.lang.String str4 = laboratory0.getPointOfContact();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Laboratory laboratory6 = laboratory0.setPhoneNumber("yyyy'-'MM'-'dd'T'HH':'mm':'ss");
        laboratory0.PointOfContact = "2021.4.62.0";
        java.lang.String str9 = laboratory0.getName();
        java.lang.String str10 = laboratory0.Address;
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNotNull(laboratory6);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNull(str10);
    }

    @Test
    public void test24124() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest48.test24124");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostUnitGroup postUnitGroup0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostUnitGroup();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes1 = null;
        postUnitGroup0.AuditAttributes = auditAttributes1;
        postUnitGroup0.Id = "/AQUARIUS/Acquisition/v2://9999-12-31T23:59:59.999Z";
        java.lang.String str5 = postUnitGroup0.Id;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes6 = postUnitGroup0.getAuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostUnitGroup postUnitGroup8 = postUnitGroup0.setId("multipart/form-data; boundary=****d9f5d551-383a-4365-87fd-ae7094da6f3b****");
        java.lang.String str9 = postUnitGroup0.Id;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutUnitGroup putUnitGroup10 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutUnitGroup();
        java.lang.String str11 = putUnitGroup10.getCustomId();
        putUnitGroup10.SupportsConversion = false;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutUnitGroupWithUnit putUnitGroupWithUnit14 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutUnitGroupWithUnit();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutUnitGroupWithUnit putUnitGroupWithUnit16 = putUnitGroupWithUnit14.setId("yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UnitGroupSystemCodeType unitGroupSystemCodeType17 = putUnitGroupWithUnit14.SystemCode;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutUnitGroupWithUnit putUnitGroupWithUnit19 = putUnitGroupWithUnit14.setCustomId("/AQUARIUS/Acquisition/v2");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UnitGroupSystemCodeType unitGroupSystemCodeType20 = putUnitGroupWithUnit14.getSystemCode();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UnitGroupSystemCodeType unitGroupSystemCodeType21 = null;
        putUnitGroupWithUnit14.SystemCode = unitGroupSystemCodeType21;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UnitGroupSystemCodeType unitGroupSystemCodeType23 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UnitGroupSystemCodeType.LENGTH;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutUnitGroupWithUnit putUnitGroupWithUnit24 = putUnitGroupWithUnit14.setSystemCode(unitGroupSystemCodeType23);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutUnitGroup putUnitGroup25 = putUnitGroup10.setSystemCode(unitGroupSystemCodeType23);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutUnitGroupWithUnit putUnitGroupWithUnit26 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutUnitGroupWithUnit();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutUnitGroupWithUnit putUnitGroupWithUnit28 = putUnitGroupWithUnit26.setId("yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UnitGroupSystemCodeType unitGroupSystemCodeType29 = putUnitGroupWithUnit26.SystemCode;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutUnitGroupWithUnit putUnitGroupWithUnit31 = putUnitGroupWithUnit26.setCustomId("/AQUARIUS/Acquisition/v2");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UnitGroupSystemCodeType unitGroupSystemCodeType32 = putUnitGroupWithUnit26.getSystemCode();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UnitGroupSystemCodeType unitGroupSystemCodeType33 = null;
        putUnitGroupWithUnit26.SystemCode = unitGroupSystemCodeType33;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UnitGroupSystemCodeType unitGroupSystemCodeType35 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UnitGroupSystemCodeType.LENGTH;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutUnitGroupWithUnit putUnitGroupWithUnit36 = putUnitGroupWithUnit26.setSystemCode(unitGroupSystemCodeType35);
        putUnitGroup10.SystemCode = unitGroupSystemCodeType35;
        postUnitGroup0.SystemCode = unitGroupSystemCodeType35;
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "/AQUARIUS/Acquisition/v2://9999-12-31T23:59:59.999Z" + "'", str5, "/AQUARIUS/Acquisition/v2://9999-12-31T23:59:59.999Z");
        org.junit.Assert.assertNull(auditAttributes6);
        org.junit.Assert.assertNotNull(postUnitGroup8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "multipart/form-data; boundary=****d9f5d551-383a-4365-87fd-ae7094da6f3b****" + "'", str9, "multipart/form-data; boundary=****d9f5d551-383a-4365-87fd-ae7094da6f3b****");
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNotNull(putUnitGroupWithUnit16);
        org.junit.Assert.assertNull(unitGroupSystemCodeType17);
        org.junit.Assert.assertNotNull(putUnitGroupWithUnit19);
        org.junit.Assert.assertNull(unitGroupSystemCodeType20);
        org.junit.Assert.assertTrue("'" + unitGroupSystemCodeType23 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UnitGroupSystemCodeType.LENGTH + "'", unitGroupSystemCodeType23.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UnitGroupSystemCodeType.LENGTH));
        org.junit.Assert.assertNotNull(putUnitGroupWithUnit24);
        org.junit.Assert.assertNotNull(putUnitGroup25);
        org.junit.Assert.assertNotNull(putUnitGroupWithUnit28);
        org.junit.Assert.assertNull(unitGroupSystemCodeType29);
        org.junit.Assert.assertNotNull(putUnitGroupWithUnit31);
        org.junit.Assert.assertNull(unitGroupSystemCodeType32);
        org.junit.Assert.assertTrue("'" + unitGroupSystemCodeType35 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UnitGroupSystemCodeType.LENGTH + "'", unitGroupSystemCodeType35.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UnitGroupSystemCodeType.LENGTH));
        org.junit.Assert.assertNotNull(putUnitGroupWithUnit36);
    }

    @Test
    public void test24125() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest48.test24125");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitReading fieldVisitReading0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitReading();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitReading fieldVisitReading2 = fieldVisitReading0.setUseLocationDatumAsReference((java.lang.Boolean) true);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Uncertainty uncertainty3 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Uncertainty();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.UncertaintyType uncertaintyType4 = null;
        uncertainty3.UncertaintyType = uncertaintyType4;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay6 = uncertainty3.getQuantitativeUncertainty();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Uncertainty uncertainty7 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Uncertainty();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QualitativeUncertaintyType qualitativeUncertaintyType8 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QualitativeUncertaintyType.Excellent;
        uncertainty7.QualitativeUncertainty = qualitativeUncertaintyType8;
        uncertainty3.QualitativeUncertainty = qualitativeUncertaintyType8;
        fieldVisitReading2.Uncertainty = uncertainty3;
        java.lang.String str12 = fieldVisitReading2.FieldVisitIdentifier;
        org.junit.Assert.assertNotNull(fieldVisitReading2);
        org.junit.Assert.assertNull(doubleWithDisplay6);
        org.junit.Assert.assertTrue("'" + qualitativeUncertaintyType8 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QualitativeUncertaintyType.Excellent + "'", qualitativeUncertaintyType8.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QualitativeUncertaintyType.Excellent));
        org.junit.Assert.assertNull(str12);
    }

    @Test
    public void test24126() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest48.test24126");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostDatumConvertedTimeSeries postDatumConvertedTimeSeries0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostDatumConvertedTimeSeries();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostDatumConvertedTimeSeries postDatumConvertedTimeSeries2 = postDatumConvertedTimeSeries0.setDescription("yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ");
        postDatumConvertedTimeSeries0.Publish = false;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostDatumConvertedTimeSeries postDatumConvertedTimeSeries6 = postDatumConvertedTimeSeries0.setUnit("multipart/form-data; boundary=****bbcf5f9e-6ccf-4b63-91ab-6e645caf02af****");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostDatumConvertedTimeSeries postDatumConvertedTimeSeries8 = postDatumConvertedTimeSeries6.setComputationIdentifier("https");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostDatumConvertedTimeSeries postDatumConvertedTimeSeries10 = postDatumConvertedTimeSeries6.setMethod("multipart/form-data; boundary=****59879c02-0839-4b96-bc41-a13ebb706be4****");
        java.lang.Boolean boolean11 = postDatumConvertedTimeSeries10.isPublish();
        postDatumConvertedTimeSeries10.TargetIsLocalAssumedDatum = false;
        org.junit.Assert.assertNotNull(postDatumConvertedTimeSeries2);
        org.junit.Assert.assertNotNull(postDatumConvertedTimeSeries6);
        org.junit.Assert.assertNotNull(postDatumConvertedTimeSeries8);
        org.junit.Assert.assertNotNull(postDatumConvertedTimeSeries10);
        org.junit.Assert.assertEquals("'" + boolean11 + "' != '" + false + "'", boolean11, false);
    }

    @Test
    public void test24127() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest48.test24127");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.DeleteQualifierGroup deleteQualifierGroup0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.DeleteQualifierGroup();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.DeleteQualifierGroup deleteQualifierGroup2 = deleteQualifierGroup0.setUniqueId("https");
        java.lang.String str3 = deleteQualifierGroup0.getUniqueId();
        deleteQualifierGroup0.UniqueId = "https";
        java.lang.String str6 = deleteQualifierGroup0.UniqueId;
        org.junit.Assert.assertNotNull(deleteQualifierGroup2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "https" + "'", str3, "https");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "https" + "'", str6, "https");
    }

    @Test
    public void test24128() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest48.test24128");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationExportIIV2 getObservationExportIIV2_0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationExportIIV2();
        java.util.List<java.lang.String> strList1 = getObservationExportIIV2_0.getCollectionMethodIds();
        java.lang.String str2 = getObservationExportIIV2_0.getDepthUnitCustomId();
        java.time.Instant instant3 = getObservationExportIIV2_0.EndObservedTime;
        java.util.List<java.lang.String> strList4 = getObservationExportIIV2_0.getObservedPropertyIds();
        java.time.Instant instant5 = getObservationExportIIV2_0.getStartResultTime();
        java.time.Instant instant6 = getObservationExportIIV2_0.EndResultTime;
        org.junit.Assert.assertNull(strList1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(instant3);
        org.junit.Assert.assertNull(strList4);
        org.junit.Assert.assertNull(instant5);
        org.junit.Assert.assertNull(instant6);
    }

    @Test
    public void test24129() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest48.test24129");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeTransactionListServiceRequest metadataChangeTransactionListServiceRequest0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeTransactionListServiceRequest();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostRecurringReport postRecurringReport1 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostRecurringReport();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary2 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        dischargeSummary2.Reviewer = "";
        java.time.Instant instant5 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        dischargeSummary2.MeasurementTime = instant5;
        postRecurringReport1.NextGenerationDate = instant5;
        java.time.Instant instant8 = postRecurringReport1.getNextGenerationDate();
        java.lang.String str9 = com.aquaticinformatics.aquarius.sdk.samples.serializers.InstantSerializer.format(instant8);
        metadataChangeTransactionListServiceRequest0.QueryFrom = instant8;
        java.time.Instant instant11 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MinValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeTransactionListServiceRequest metadataChangeTransactionListServiceRequest12 = metadataChangeTransactionListServiceRequest0.setQueryFrom(instant11);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse13 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant14 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse15 = locationDescriptionListServiceResponse13.setNextToken(instant14);
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescription> locationDescriptionList16 = locationDescriptionListServiceResponse15.LocationDescriptions;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesApprovalsTransactionListServiceRequest timeSeriesApprovalsTransactionListServiceRequest17 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesApprovalsTransactionListServiceRequest();
        java.lang.String str18 = timeSeriesApprovalsTransactionListServiceRequest17.getTimeSeriesUniqueId();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ControlConditionActivity controlConditionActivity19 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ControlConditionActivity();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ControlCleanedType controlCleanedType20 = null;
        controlConditionActivity19.ControlCleaned = controlCleanedType20;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse22 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant23 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse24 = locationDescriptionListServiceResponse22.setNextToken(instant23);
        controlConditionActivity19.DateCleaned = instant23;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesApprovalsTransactionListServiceRequest timeSeriesApprovalsTransactionListServiceRequest26 = timeSeriesApprovalsTransactionListServiceRequest17.setQueryTo(instant23);
        java.time.Instant instant27 = timeSeriesApprovalsTransactionListServiceRequest17.QueryTo;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse28 = locationDescriptionListServiceResponse15.setNextToken(instant27);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeTransactionListServiceRequest metadataChangeTransactionListServiceRequest29 = metadataChangeTransactionListServiceRequest12.setQueryFrom(instant27);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingModelEffectiveShiftsServiceRequest ratingModelEffectiveShiftsServiceRequest30 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingModelEffectiveShiftsServiceRequest();
        java.lang.String str31 = ratingModelEffectiveShiftsServiceRequest30.getRatingModelIdentifier();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutBulkEditResultGradesV2 putBulkEditResultGradesV2_32 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutBulkEditResultGradesV2();
        java.lang.Double double33 = putBulkEditResultGradesV2_32.DepthValue;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_34 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray36 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList37 = new java.util.ArrayList<java.lang.String>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList37, strArray36);
        getObservationsV2_34.SpecimenIds = strList37;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags40 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray44 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList45 = new java.util.ArrayList<java.lang.String>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList45, strArray44);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags47 = putLocationTags40.setTagUniqueIds(strList45);
        getObservationsV2_34.QualityControlTypes = strList45;
        java.util.List<java.lang.String> strList49 = getObservationsV2_34.getAnalyticalGroupIds();
        java.util.List<java.lang.String> strList50 = getObservationsV2_34.DataClassifications;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.FieldResultType fieldResultType51 = getObservationsV2_34.FieldResultType;
        java.time.Instant instant52 = getObservationsV2_34.getEndObservedTime();
        java.lang.String str53 = getObservationsV2_34.DepthUnitCustomId;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags54 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray58 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList59 = new java.util.ArrayList<java.lang.String>();
        boolean boolean60 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList59, strArray58);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags61 = putLocationTags54.setTagUniqueIds(strList59);
        java.util.ArrayList<java.lang.String> strList62 = putLocationTags61.TagUniqueIds;
        getObservationsV2_34.ProjectIds = strList62;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutBulkEditResultGradesV2 putBulkEditResultGradesV2_64 = putBulkEditResultGradesV2_32.setSearch((java.util.List<java.lang.String>) strList62);
        java.util.List<java.lang.String> strList65 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutBulkEditResultGradesV2 putBulkEditResultGradesV2_66 = putBulkEditResultGradesV2_64.setLabResultLaboratoryIds(strList65);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitDataServiceResponse fieldVisitDataServiceResponse67 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitDataServiceResponse();
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CrossSectionSurveyActivity> crossSectionSurveyActivityList68 = fieldVisitDataServiceResponse67.CrossSectionSurveyActivity;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitDataServiceResponse fieldVisitDataServiceResponse70 = fieldVisitDataServiceResponse67.setIdentifier("");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary71 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        dischargeSummary71.Reviewer = "";
        java.time.Instant instant74 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        dischargeSummary71.MeasurementTime = instant74;
        fieldVisitDataServiceResponse67.ResponseTime = instant74;
        putBulkEditResultGradesV2_66.EndModificationTime = instant74;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingModelEffectiveShiftsServiceRequest ratingModelEffectiveShiftsServiceRequest78 = ratingModelEffectiveShiftsServiceRequest30.setQueryFrom(instant74);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeTransactionListServiceRequest metadataChangeTransactionListServiceRequest79 = metadataChangeTransactionListServiceRequest29.setQueryTo(instant74);
        java.lang.String str80 = metadataChangeTransactionListServiceRequest29.TimeSeriesUniqueId;
        java.lang.String str81 = metadataChangeTransactionListServiceRequest29.getTimeSeriesUniqueId();
        org.junit.Assert.assertNotNull(instant5);
        org.junit.Assert.assertNotNull(instant8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "9999-12-31T23:59:59.999Z" + "'", str9, "9999-12-31T23:59:59.999Z");
        org.junit.Assert.assertNotNull(instant11);
        org.junit.Assert.assertNotNull(metadataChangeTransactionListServiceRequest12);
        org.junit.Assert.assertNotNull(instant14);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse15);
        org.junit.Assert.assertNull(locationDescriptionList16);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNotNull(instant23);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse24);
        org.junit.Assert.assertNotNull(timeSeriesApprovalsTransactionListServiceRequest26);
        org.junit.Assert.assertNotNull(instant27);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse28);
        org.junit.Assert.assertNotNull(metadataChangeTransactionListServiceRequest29);
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertNull(double33);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(strArray44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(putLocationTags47);
        org.junit.Assert.assertNull(strList49);
        org.junit.Assert.assertNull(strList50);
        org.junit.Assert.assertNull(fieldResultType51);
        org.junit.Assert.assertNull(instant52);
        org.junit.Assert.assertNull(str53);
        org.junit.Assert.assertNotNull(strArray58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(putLocationTags61);
        org.junit.Assert.assertNotNull(strList62);
        org.junit.Assert.assertNotNull(putBulkEditResultGradesV2_64);
        org.junit.Assert.assertNotNull(putBulkEditResultGradesV2_66);
        org.junit.Assert.assertNull(crossSectionSurveyActivityList68);
        org.junit.Assert.assertNotNull(fieldVisitDataServiceResponse70);
        org.junit.Assert.assertNotNull(instant74);
        org.junit.Assert.assertNotNull(ratingModelEffectiveShiftsServiceRequest78);
        org.junit.Assert.assertNotNull(metadataChangeTransactionListServiceRequest79);
        org.junit.Assert.assertNull(str80);
        org.junit.Assert.assertNull(str81);
    }

    @Test
    public void test24130() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest48.test24130");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetTaxons getTaxons0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetTaxons();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetTaxons getTaxons2 = getTaxons0.setScientificName("yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ");
        java.lang.String str3 = getTaxons0.ScientificName;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetTaxons getTaxons5 = getTaxons0.setScientificName("yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetTaxons getTaxons7 = getTaxons5.setScientificName("ZZZZZ");
        getTaxons5.ScientificName = "";
        getTaxons5.ScientificName = "multipart/form-data; boundary=****1eab67e1-84c8-4b82-aa06-d6c7526551f8****";
        java.lang.String str12 = getTaxons5.getScientificName();
        java.lang.String str13 = getTaxons5.ScientificName;
        org.junit.Assert.assertNotNull(getTaxons2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ" + "'", str3, "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ");
        org.junit.Assert.assertNotNull(getTaxons5);
        org.junit.Assert.assertNotNull(getTaxons7);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "multipart/form-data; boundary=****1eab67e1-84c8-4b82-aa06-d6c7526551f8****" + "'", str12, "multipart/form-data; boundary=****1eab67e1-84c8-4b82-aa06-d6c7526551f8****");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "multipart/form-data; boundary=****1eab67e1-84c8-4b82-aa06-d6c7526551f8****" + "'", str13, "multipart/form-data; boundary=****1eab67e1-84c8-4b82-aa06-d6c7526551f8****");
    }

    @Test
    public void test24131() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest48.test24131");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationExportIIV2 getObservationExportIIV2_0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationExportIIV2();
        java.util.List<java.lang.String> strList1 = getObservationExportIIV2_0.getCollectionMethodIds();
        java.util.List<java.lang.String> strList2 = getObservationExportIIV2_0.AnalyticalGroupIds;
        java.lang.Double double3 = getObservationExportIIV2_0.getMaxNumericResultValue();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetGroupedObservationsV2 getGroupedObservationsV2_4 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetGroupedObservationsV2();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TagDefinition tagDefinition5 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TagDefinition();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TagValueType tagValueType6 = null;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TagDefinition tagDefinition7 = tagDefinition5.setValueType(tagValueType6);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TagDefinition tagDefinition9 = tagDefinition5.setAppliesToAttachments((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TagDefinition tagDefinition11 = tagDefinition9.setKey("yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TagDefinition tagDefinition13 = tagDefinition9.setAppliesToReports((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest14 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest();
        java.lang.Object obj15 = timeAlignedDataServiceRequest14.getResponseType();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse16 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant17 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse18 = locationDescriptionListServiceResponse16.setNextToken(instant17);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest19 = timeAlignedDataServiceRequest14.setQueryFrom(instant17);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags20 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray24 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList25 = new java.util.ArrayList<java.lang.String>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList25, strArray24);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags27 = putLocationTags20.setTagUniqueIds(strList25);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest28 = timeAlignedDataServiceRequest14.setTimeSeriesOutputUnitIds(strList25);
        tagDefinition13.PickListValues = strList25;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetGroupedObservationsV2 getGroupedObservationsV2_30 = getGroupedObservationsV2_4.setLabResultLabAnalysisMethodIds((java.util.List<java.lang.String>) strList25);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.FieldResultType fieldResultType31 = getGroupedObservationsV2_30.FieldResultType;
        getGroupedObservationsV2_30.SpecimenName = "MaxInstant";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetGroupedObservationsV2 getGroupedObservationsV2_35 = getGroupedObservationsV2_30.setCustomId("/AQUARIUS");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags36 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray40 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList41 = new java.util.ArrayList<java.lang.String>();
        boolean boolean42 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList41, strArray40);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags43 = putLocationTags36.setTagUniqueIds(strList41);
        getGroupedObservationsV2_30.AnalysisMethodIds = strList41;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Report report45 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Report();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Report report47 = report45.setUserName("/AQUARIUS/Acquisition/v2");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Report report49 = report47.setUserName("'.'SSSSSSS");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Report report51 = report49.setIsTransient((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetFieldVisits getFieldVisits52 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetFieldVisits();
        java.util.List<java.lang.String> strList53 = getFieldVisits52.getSamplingLocationIds();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags54 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray58 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList59 = new java.util.ArrayList<java.lang.String>();
        boolean boolean60 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList59, strArray58);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags61 = putLocationTags54.setTagUniqueIds(strList59);
        java.util.ArrayList<java.lang.String> strList62 = putLocationTags61.TagUniqueIds;
        getFieldVisits52.ScheduleIds = strList62;
        java.lang.Integer int64 = getFieldVisits52.Limit;
        java.util.List<java.lang.String> strList65 = getFieldVisits52.getFieldTripIds();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_66 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray68 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList69 = new java.util.ArrayList<java.lang.String>();
        boolean boolean70 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList69, strArray68);
        getObservationsV2_66.SpecimenIds = strList69;
        getFieldVisits52.Search = strList69;
        java.lang.String[] strArray84 = new java.lang.String[] { "", "multipart/form-data; boundary=****bbcf5f9e-6ccf-4b63-91ab-6e645caf02af****", "/AQUARIUS/Provisioning/v1", "", "MinDuration", "multipart/form-data; boundary=****bbcf5f9e-6ccf-4b63-91ab-6e645caf02af****", "2021.4.62.0", "multipart/form-data; boundary=****bbcf5f9e-6ccf-4b63-91ab-6e645caf02af****", "multipart/form-data; boundary=****bbcf5f9e-6ccf-4b63-91ab-6e645caf02af****", "/AQUARIUS/Acquisition/v2", "/AQUARIUS/Acquisition/v2://9999-12-31T23:59:59.999Z" };
        java.util.ArrayList<java.lang.String> strList85 = new java.util.ArrayList<java.lang.String>();
        boolean boolean86 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList85, strArray84);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetFieldVisits getFieldVisits87 = getFieldVisits52.setSamplingPlanIds((java.util.List<java.lang.String>) strList85);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Report report88 = report49.setSourceTimeSeriesUniqueIds(strList85);
        getGroupedObservationsV2_30.ProjectIds = strList85;
        getObservationExportIIV2_0.SamplingLocationIds = strList85;
        org.junit.Assert.assertNull(strList1);
        org.junit.Assert.assertNull(strList2);
        org.junit.Assert.assertNull(double3);
        org.junit.Assert.assertNotNull(tagDefinition7);
        org.junit.Assert.assertNotNull(tagDefinition9);
        org.junit.Assert.assertNotNull(tagDefinition11);
        org.junit.Assert.assertNotNull(tagDefinition13);
        org.junit.Assert.assertNotNull(obj15);
        org.junit.Assert.assertEquals(obj15.toString(), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj15), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj15), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertNotNull(instant17);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse18);
        org.junit.Assert.assertNotNull(timeAlignedDataServiceRequest19);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(putLocationTags27);
        org.junit.Assert.assertNotNull(timeAlignedDataServiceRequest28);
        org.junit.Assert.assertNotNull(getGroupedObservationsV2_30);
        org.junit.Assert.assertNull(fieldResultType31);
        org.junit.Assert.assertNotNull(getGroupedObservationsV2_35);
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(putLocationTags43);
        org.junit.Assert.assertNotNull(report47);
        org.junit.Assert.assertNotNull(report49);
        org.junit.Assert.assertNotNull(report51);
        org.junit.Assert.assertNull(strList53);
        org.junit.Assert.assertNotNull(strArray58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(putLocationTags61);
        org.junit.Assert.assertNotNull(strList62);
        org.junit.Assert.assertNull(int64);
        org.junit.Assert.assertNull(strList65);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertNotNull(strArray84);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + true + "'", boolean86 == true);
        org.junit.Assert.assertNotNull(getFieldVisits87);
        org.junit.Assert.assertNotNull(report88);
    }

    @Test
    public void test24132() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest48.test24132");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivityTemplate postActivityTemplate0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivityTemplate();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity quantity1 = postActivityTemplate0.Depth;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MediumType mediumType2 = postActivityTemplate0.getMedium();
        postActivityTemplate0.Id = "POST";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity quantity5 = null;
        postActivityTemplate0.Depth = quantity5;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivityTemplate postActivityTemplate8 = postActivityTemplate0.setCustomId("'.'SSSSSSS");
        java.lang.String str9 = postActivityTemplate0.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostProject postProject10 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostProject();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes11 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostProject postProject12 = postProject10.setAuditAttributes(auditAttributes11);
        java.time.OffsetDateTime offsetDateTime13 = null;
        postProject10.StartTime = offsetDateTime13;
        java.time.OffsetDateTime offsetDateTime15 = postProject10.EndTime;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostProject postProject17 = postProject10.setScopeStatement("");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlan samplingPlan18 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlan();
        samplingPlan18.SamplingLocationGroupSelectionTypeRandomCount = 0;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationGroupSelectionType samplingLocationGroupSelectionType21 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationGroupSelectionType.ALL;
        samplingPlan18.SamplingLocationGroupSelectionType = samplingLocationGroupSelectionType21;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationGroup samplingLocationGroup23 = samplingPlan18.getSamplingLocationGroup();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes24 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlan samplingPlan25 = samplingPlan18.setAuditAttributes(auditAttributes24);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostProject postProject26 = postProject17.setAuditAttributes(auditAttributes24);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes27 = postProject17.AuditAttributes;
        java.lang.Boolean boolean28 = postProject17.getApproved();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes29 = postProject17.AuditAttributes;
        postActivityTemplate0.AuditAttributes = auditAttributes29;
        org.junit.Assert.assertNull(quantity1);
        org.junit.Assert.assertNull(mediumType2);
        org.junit.Assert.assertNotNull(postActivityTemplate8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "POST" + "'", str9, "POST");
        org.junit.Assert.assertNotNull(postProject12);
        org.junit.Assert.assertNull(offsetDateTime15);
        org.junit.Assert.assertNotNull(postProject17);
        org.junit.Assert.assertTrue("'" + samplingLocationGroupSelectionType21 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationGroupSelectionType.ALL + "'", samplingLocationGroupSelectionType21.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationGroupSelectionType.ALL));
        org.junit.Assert.assertNull(samplingLocationGroup23);
        org.junit.Assert.assertNotNull(samplingPlan25);
        org.junit.Assert.assertNotNull(postProject26);
        org.junit.Assert.assertNotNull(auditAttributes27);
        org.junit.Assert.assertNull(boolean28);
        org.junit.Assert.assertNotNull(auditAttributes29);
    }

    @Test
    public void test24133() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest48.test24133");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationReferenceStandard locationReferenceStandard0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationReferenceStandard();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationReferenceStandard locationReferenceStandard2 = locationReferenceStandard0.setComments("yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationReferenceStandard locationReferenceStandard3 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationReferenceStandard();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ReferenceStandardOffset[] referenceStandardOffsetArray4 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ReferenceStandardOffset[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ReferenceStandardOffset> referenceStandardOffsetList5 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ReferenceStandardOffset>();
        boolean boolean6 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ReferenceStandardOffset>) referenceStandardOffsetList5, referenceStandardOffsetArray4);
        locationReferenceStandard3.ReferenceStandardOffsets = referenceStandardOffsetList5;
        locationReferenceStandard2.ReferenceStandardOffsets = referenceStandardOffsetList5;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationReferenceStandard locationReferenceStandard9 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationReferenceStandard();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationReferenceStandard locationReferenceStandard11 = locationReferenceStandard9.setComments("yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationReferenceStandard locationReferenceStandard12 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationReferenceStandard();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ReferenceStandardOffset[] referenceStandardOffsetArray13 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ReferenceStandardOffset[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ReferenceStandardOffset> referenceStandardOffsetList14 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ReferenceStandardOffset>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ReferenceStandardOffset>) referenceStandardOffsetList14, referenceStandardOffsetArray13);
        locationReferenceStandard12.ReferenceStandardOffsets = referenceStandardOffsetList14;
        locationReferenceStandard11.ReferenceStandardOffsets = referenceStandardOffsetList14;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationReferenceStandard locationReferenceStandard18 = locationReferenceStandard2.setReferenceStandardOffsets(referenceStandardOffsetList14);
        org.junit.Assert.assertNotNull(locationReferenceStandard2);
        org.junit.Assert.assertNotNull(referenceStandardOffsetArray4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(locationReferenceStandard11);
        org.junit.Assert.assertNotNull(referenceStandardOffsetArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(locationReferenceStandard18);
    }

    @Test
    public void test24134() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest48.test24134");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray3 = new java.lang.String[] { "", "" };
        java.util.ArrayList<java.lang.String> strList4 = new java.util.ArrayList<java.lang.String>();
        boolean boolean5 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList4, strArray3);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_6 = getObservationsV2_0.setDataClassifications((java.util.List<java.lang.String>) strList4);
        getObservationsV2_6.DepthUnitCustomId = "hi!";
        java.lang.String str9 = getObservationsV2_6.CustomId;
        java.util.List<java.lang.String> strList10 = getObservationsV2_6.getSearch();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_11 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray13 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList14 = new java.util.ArrayList<java.lang.String>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList14, strArray13);
        getObservationsV2_11.SpecimenIds = strList14;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags17 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray21 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList22 = new java.util.ArrayList<java.lang.String>();
        boolean boolean23 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList22, strArray21);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags24 = putLocationTags17.setTagUniqueIds(strList22);
        getObservationsV2_11.QualityControlTypes = strList22;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_26 = getObservationsV2_6.setMedia((java.util.List<java.lang.String>) strList22);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_27 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String str28 = getObservationsV2_27.getCustomId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_29 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray31 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList32 = new java.util.ArrayList<java.lang.String>();
        boolean boolean33 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList32, strArray31);
        getObservationsV2_29.SpecimenIds = strList32;
        getObservationsV2_27.ProjectIds = strList32;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_36 = getObservationsV2_6.setObservedPropertyIds((java.util.List<java.lang.String>) strList32);
        getObservationsV2_36.Cursor = "'.'SSSSSSS";
        java.lang.String str39 = getObservationsV2_36.getSort();
        java.util.List<java.lang.String> strList40 = getObservationsV2_36.Ids;
        java.util.List<java.lang.String> strList41 = getObservationsV2_36.ResultStatuses;
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(getObservationsV2_6);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNull(strList10);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(putLocationTags24);
        org.junit.Assert.assertNotNull(getObservationsV2_26);
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(getObservationsV2_36);
        org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertNull(strList40);
        org.junit.Assert.assertNull(strList41);
    }

    @Test
    public void test24135() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest48.test24135");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationSummary samplingLocationSummary0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationSummary();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationSummary samplingLocationSummary2 = samplingLocationSummary0.setFieldVisitCount((java.lang.Integer) (-1));
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationSummary samplingLocationSummary4 = samplingLocationSummary0.setObservationCount((java.lang.Integer) 100);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.FieldVisitSummaryRepresentation fieldVisitSummaryRepresentation5 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.FieldVisitSummaryRepresentation();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.FieldVisitSummaryRepresentation fieldVisitSummaryRepresentation7 = fieldVisitSummaryRepresentation5.setId("MinDuration");
        samplingLocationSummary0.LatestFieldVisit = fieldVisitSummaryRepresentation7;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.FieldVisitSummaryRepresentation fieldVisitSummaryRepresentation9 = samplingLocationSummary0.getLatestFieldVisit();
        org.junit.Assert.assertNotNull(samplingLocationSummary2);
        org.junit.Assert.assertNotNull(samplingLocationSummary4);
        org.junit.Assert.assertNotNull(fieldVisitSummaryRepresentation7);
        org.junit.Assert.assertNotNull(fieldVisitSummaryRepresentation9);
    }

    @Test
    public void test24136() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest48.test24136");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationMonitoringMethod locationMonitoringMethod0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationMonitoringMethod();
        java.lang.String str1 = locationMonitoringMethod0.getModel();
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TagMetadata> tagMetadataList2 = null;
        locationMonitoringMethod0.Tags = tagMetadataList2;
        java.lang.String str4 = locationMonitoringMethod0.getParameterUniqueId();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationMonitoringMethod locationMonitoringMethod6 = locationMonitoringMethod0.setMethod("'.'SSSSSSS");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationMonitoringMethod locationMonitoringMethod8 = locationMonitoringMethod0.setName("https");
        java.lang.String str9 = locationMonitoringMethod0.getSubLocationIdentifier();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNotNull(locationMonitoringMethod6);
        org.junit.Assert.assertNotNull(locationMonitoringMethod8);
        org.junit.Assert.assertNull(str9);
    }

    @Test
    public void test24137() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest48.test24137");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity postActivity0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity();
        postActivity0.LoggerFileName = "hi!";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity postActivity4 = postActivity0.setCustomId("");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutActivity putActivity5 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutActivity();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity plannedActivity6 = null;
        putActivity5.PlannedActivity = plannedActivity6;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity postActivity8 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity();
        postActivity8.LoggerFileName = "hi!";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity plannedActivity11 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity postActivity12 = postActivity8.setPlannedActivity(plannedActivity11);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag samplingContextTag13 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag();
        java.lang.String str14 = samplingContextTag13.getDescription();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes15 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag samplingContextTag16 = samplingContextTag13.setAuditAttributes(auditAttributes15);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag samplingContextTag18 = samplingContextTag16.setId("yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag samplingContextTag19 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag();
        java.lang.String str20 = samplingContextTag19.getDescription();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag samplingContextTag21 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag();
        java.lang.String str22 = samplingContextTag21.getDescription();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes23 = null;
        samplingContextTag21.AuditAttributes = auditAttributes23;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag samplingContextTag25 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag();
        java.lang.String str26 = samplingContextTag25.getDescription();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes27 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag samplingContextTag28 = samplingContextTag25.setAuditAttributes(auditAttributes27);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag[] samplingContextTagArray29 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag[] { samplingContextTag18, samplingContextTag19, samplingContextTag21, samplingContextTag28 };
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag> samplingContextTagList30 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag>();
        boolean boolean31 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag>) samplingContextTagList30, samplingContextTagArray29);
        postActivity8.SamplingContextTags = samplingContextTagList30;
        putActivity5.SamplingContextTags = samplingContextTagList30;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity postActivity34 = postActivity4.setSamplingContextTags((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag>) samplingContextTagList30);
        java.time.OffsetDateTime offsetDateTime35 = postActivity4.getEndTime();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocation samplingLocation36 = postActivity4.getSamplingLocation();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Device device37 = null;
        postActivity4.Device = device37;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity quantity39 = postActivity4.Depth;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocation samplingLocation40 = postActivity4.getSamplingLocation();
        org.junit.Assert.assertNotNull(postActivity4);
        org.junit.Assert.assertNotNull(postActivity12);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(samplingContextTag16);
        org.junit.Assert.assertNotNull(samplingContextTag18);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertNotNull(samplingContextTag28);
        org.junit.Assert.assertNotNull(samplingContextTagArray29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(postActivity34);
        org.junit.Assert.assertNull(offsetDateTime35);
        org.junit.Assert.assertNull(samplingLocation36);
        org.junit.Assert.assertNull(quantity39);
        org.junit.Assert.assertNull(samplingLocation40);
    }

    @Test
    public void test24138() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest48.test24138");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingCurve ratingCurve0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingCurve();
        java.lang.String str1 = ratingCurve0.Equation;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ExpandedRatingCurve expandedRatingCurve2 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ExpandedRatingCurve();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingCurveType ratingCurveType3 = expandedRatingCurve2.Type;
        expandedRatingCurve2.IsBlended = false;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ParameterWithUnit parameterWithUnit6 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ParameterWithUnit();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ExpandedRatingCurve expandedRatingCurve7 = expandedRatingCurve2.setOutputParameter(parameterWithUnit6);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingCurve ratingCurve8 = ratingCurve0.setInputParameter(parameterWithUnit6);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ParameterWithUnit parameterWithUnit9 = ratingCurve0.getInputParameter();
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.OffsetPoint> offsetPointList10 = ratingCurve0.getOffsets();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingCurve ratingCurve11 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingCurve();
        java.lang.String str12 = ratingCurve11.Equation;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ParameterWithUnit parameterWithUnit13 = ratingCurve11.getInputParameter();
        java.lang.String str14 = ratingCurve11.getRemarks();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ExpandedRatingCurve expandedRatingCurve15 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ExpandedRatingCurve();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingCurveType ratingCurveType16 = expandedRatingCurve15.Type;
        expandedRatingCurve15.IsBlended = false;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ParameterWithUnit parameterWithUnit19 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ParameterWithUnit();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ExpandedRatingCurve expandedRatingCurve20 = expandedRatingCurve15.setOutputParameter(parameterWithUnit19);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ParameterWithUnit parameterWithUnit21 = expandedRatingCurve20.getOutputParameter();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ExpandedRatingCurve expandedRatingCurve23 = expandedRatingCurve20.setId("multipart/form-data; boundary=****44f0772e-c3ca-4316-8e2a-61ec8540d661****");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ParameterWithUnit parameterWithUnit24 = expandedRatingCurve23.getOutputParameter();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ExpandedRatingCurve expandedRatingCurve25 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ExpandedRatingCurve();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ParameterWithUnit parameterWithUnit26 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ParameterWithUnit();
        expandedRatingCurve25.OutputParameter = parameterWithUnit26;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ExpandedRatingCurve expandedRatingCurve28 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ExpandedRatingCurve();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingCurveType ratingCurveType29 = expandedRatingCurve28.Type;
        expandedRatingCurve28.IsBlended = false;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ExpandedRatingCurve expandedRatingCurve33 = expandedRatingCurve28.setIsBlended((java.lang.Boolean) true);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PeriodOfApplicability[] periodOfApplicabilityArray34 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PeriodOfApplicability[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PeriodOfApplicability> periodOfApplicabilityList35 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PeriodOfApplicability>();
        boolean boolean36 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PeriodOfApplicability>) periodOfApplicabilityList35, periodOfApplicabilityArray34);
        expandedRatingCurve28.PeriodsOfApplicability = periodOfApplicabilityList35;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ExpandedRatingCurve expandedRatingCurve38 = expandedRatingCurve25.setPeriodsOfApplicability(periodOfApplicabilityList35);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ExpandedRatingCurve expandedRatingCurve39 = expandedRatingCurve23.setPeriodsOfApplicability(periodOfApplicabilityList35);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingCurve ratingCurve40 = ratingCurve11.setPeriodsOfApplicability(periodOfApplicabilityList35);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingCurve ratingCurve41 = ratingCurve0.setPeriodsOfApplicability(periodOfApplicabilityList35);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ParameterWithUnit parameterWithUnit42 = ratingCurve0.InputParameter;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(ratingCurveType3);
        org.junit.Assert.assertNotNull(expandedRatingCurve7);
        org.junit.Assert.assertNotNull(ratingCurve8);
        org.junit.Assert.assertNotNull(parameterWithUnit9);
        org.junit.Assert.assertNull(offsetPointList10);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNull(parameterWithUnit13);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNull(ratingCurveType16);
        org.junit.Assert.assertNotNull(expandedRatingCurve20);
        org.junit.Assert.assertNotNull(parameterWithUnit21);
        org.junit.Assert.assertNotNull(expandedRatingCurve23);
        org.junit.Assert.assertNotNull(parameterWithUnit24);
        org.junit.Assert.assertNull(ratingCurveType29);
        org.junit.Assert.assertNotNull(expandedRatingCurve33);
        org.junit.Assert.assertNotNull(periodOfApplicabilityArray34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(expandedRatingCurve38);
        org.junit.Assert.assertNotNull(expandedRatingCurve39);
        org.junit.Assert.assertNotNull(ratingCurve40);
        org.junit.Assert.assertNotNull(ratingCurve41);
        org.junit.Assert.assertNotNull(parameterWithUnit42);
    }

    @Test
    public void test24139() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest48.test24139");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostStatisticalDerivedTimeSeries postStatisticalDerivedTimeSeries0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostStatisticalDerivedTimeSeries();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostStatisticalDerivedTimeSeries postStatisticalDerivedTimeSeries2 = postStatisticalDerivedTimeSeries0.setComment("'.'SSSSSSS");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostStatisticalDerivedTimeSeries postStatisticalDerivedTimeSeries4 = postStatisticalDerivedTimeSeries0.setLabel("'.'SSSSSSS");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostStatisticalDerivedTimeSeries postStatisticalDerivedTimeSeries6 = postStatisticalDerivedTimeSeries0.setParameter("/AQUARIUS/Provisioning/v1");
        postStatisticalDerivedTimeSeries6.Parameter = "multipart/form-data; boundary=****bbcf5f9e-6ccf-4b63-91ab-6e645caf02af****";
        org.junit.Assert.assertNotNull(postStatisticalDerivedTimeSeries2);
        org.junit.Assert.assertNotNull(postStatisticalDerivedTimeSeries4);
        org.junit.Assert.assertNotNull(postStatisticalDerivedTimeSeries6);
    }

    @Test
    public void test24140() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest48.test24140");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.UnitListServiceRequest unitListServiceRequest0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.UnitListServiceRequest();
        unitListServiceRequest0.GroupIdentifier = "/AQUARIUS/Acquisition/v2://9999-12-31T23:59:59.999Z";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.UnitListServiceRequest unitListServiceRequest4 = unitListServiceRequest0.setGroupIdentifier("'.'SSSSSSS");
        java.lang.String str5 = unitListServiceRequest4.getGroupIdentifier();
        java.lang.Object obj6 = unitListServiceRequest4.getResponseType();
        org.junit.Assert.assertNotNull(unitListServiceRequest4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "'.'SSSSSSS" + "'", str5, "'.'SSSSSSS");
        org.junit.Assert.assertNotNull(obj6);
        org.junit.Assert.assertEquals(obj6.toString(), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$UnitListServiceResponse");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj6), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$UnitListServiceResponse");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj6), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$UnitListServiceResponse");
    }

    @Test
    public void test24141() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest48.test24141");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity postActivity0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity();
        postActivity0.LoggerFileName = "hi!";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity plannedActivity3 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity postActivity4 = postActivity0.setPlannedActivity(plannedActivity3);
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttribute> extendedAttributeList5 = null;
        postActivity0.ExtendedAttributes = extendedAttributeList5;
        java.lang.String str7 = postActivity0.getId();
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttribute> extendedAttributeList8 = postActivity0.ExtendedAttributes;
        postActivity0.SourceActivityId = "http://MaxDurationhttp/json/reply/Integer";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Device device11 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Device();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Device device13 = device11.setType("/AQUARIUS/Acquisition/v2");
        postActivity0.Device = device11;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity postActivity16 = postActivity0.setLoggerFileName("multipart/form-data; boundary=****44f0772e-c3ca-4316-8e2a-61ec8540d661****");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity plannedActivity17 = postActivity0.getPlannedActivity();
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag> samplingContextTagList18 = postActivity0.getSamplingContextTags();
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag> samplingContextTagList19 = postActivity0.getSamplingContextTags();
        org.junit.Assert.assertNotNull(postActivity4);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(extendedAttributeList8);
        org.junit.Assert.assertNotNull(device13);
        org.junit.Assert.assertNotNull(postActivity16);
        org.junit.Assert.assertNull(plannedActivity17);
        org.junit.Assert.assertNull(samplingContextTagList18);
        org.junit.Assert.assertNull(samplingContextTagList19);
    }

    @Test
    public void test24142() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest48.test24142");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DeleteObservationsV2 deleteObservationsV2_0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DeleteObservationsV2();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DeleteObservationsV2 deleteObservationsV2_2 = deleteObservationsV2_0.setFilterId("-PT87591240H");
        java.time.Instant instant3 = deleteObservationsV2_2.getStartModificationTime();
        java.lang.Double double4 = deleteObservationsV2_2.getDepthValue();
        org.junit.Assert.assertNotNull(deleteObservationsV2_2);
        org.junit.Assert.assertNull(instant3);
        org.junit.Assert.assertNull(double4);
    }

    @Test
    public void test24143() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest48.test24143");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Specimen specimen0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Specimen();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Specimen specimen2 = specimen0.setFiltrationComment("9999-12-31T23:59:59.9999999Z://2021.4.62.0");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Laboratory laboratory3 = specimen2.Laboratory;
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttribute> extendedAttributeList4 = specimen2.getExtendedAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PreservativeType preservativeType5 = specimen2.getPreservative();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroup analyticalGroup6 = specimen2.getAnalyticalGroup();
        java.lang.String str7 = specimen2.FiltrationComment;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenViewStatusType specimenViewStatusType8 = specimen2.getStatus();
        org.junit.Assert.assertNotNull(specimen2);
        org.junit.Assert.assertNull(laboratory3);
        org.junit.Assert.assertNull(extendedAttributeList4);
        org.junit.Assert.assertNull(preservativeType5);
        org.junit.Assert.assertNull(analyticalGroup6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "9999-12-31T23:59:59.9999999Z://2021.4.62.0" + "'", str7, "9999-12-31T23:59:59.9999999Z://2021.4.62.0");
        org.junit.Assert.assertNull(specimenViewStatusType8);
    }

    @Test
    public void test24144() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest48.test24144");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenWithObservations specimenWithObservations0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenWithObservations();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenWithObservations specimenWithObservations2 = specimenWithObservations0.setNumberOfReceivedObservations((java.lang.Integer) 1);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabReport labReport3 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabReport();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Laboratory laboratory4 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Laboratory();
        laboratory4.Id = "MaxInstant";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Laboratory laboratory8 = laboratory4.setName("hi!:///AQUARIUS/Provisioning/v1");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabReport labReport9 = labReport3.setLaboratory(laboratory8);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Laboratory laboratory10 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Laboratory();
        laboratory10.Id = "MaxInstant";
        java.lang.String str13 = laboratory10.PhoneNumber;
        laboratory10.Id = "/AQUARIUS/Acquisition/v2://9999-12-31T23:59:59.999Z";
        java.lang.String str16 = laboratory10.PointOfContact;
        labReport3.Laboratory = laboratory10;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenWithObservations specimenWithObservations18 = specimenWithObservations0.setLaboratory(laboratory10);
        java.lang.String str19 = laboratory10.CustomId;
        org.junit.Assert.assertNotNull(specimenWithObservations2);
        org.junit.Assert.assertNotNull(laboratory8);
        org.junit.Assert.assertNotNull(labReport9);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNotNull(specimenWithObservations18);
        org.junit.Assert.assertNull(str19);
    }

    @Test
    public void test24145() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest48.test24145");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostStatisticalDerivedTimeSeries postStatisticalDerivedTimeSeries0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostStatisticalDerivedTimeSeries();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostStatisticalDerivedTimeSeries postStatisticalDerivedTimeSeries2 = postStatisticalDerivedTimeSeries0.setComment("'.'SSSSSSS");
        java.util.List<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeValue> extendedAttributeValueList3 = postStatisticalDerivedTimeSeries2.getExtendedAttributeValues();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostStatisticalDerivedTimeSeries postStatisticalDerivedTimeSeries4 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostStatisticalDerivedTimeSeries();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostStatisticalDerivedTimeSeries postStatisticalDerivedTimeSeries6 = postStatisticalDerivedTimeSeries4.setComment("'.'SSSSSSS");
        java.lang.String str7 = postStatisticalDerivedTimeSeries4.getParameter();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostStatisticalDerivedTimeSeries postStatisticalDerivedTimeSeries9 = postStatisticalDerivedTimeSeries4.setComputationPeriodIdentifier("/AQUARIUS/Provisioning/v1");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.NewValueLocationType newValueLocationType10 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.NewValueLocationType.Unknown;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostStatisticalDerivedTimeSeries postStatisticalDerivedTimeSeries11 = postStatisticalDerivedTimeSeries4.setNewValueLocation(newValueLocationType10);
        postStatisticalDerivedTimeSeries2.NewValueLocation = newValueLocationType10;
        java.lang.Boolean boolean13 = postStatisticalDerivedTimeSeries2.isRequireMinimumCoverage();
        java.lang.String str14 = postStatisticalDerivedTimeSeries2.LocationUniqueId;
        org.junit.Assert.assertNotNull(postStatisticalDerivedTimeSeries2);
        org.junit.Assert.assertNull(extendedAttributeValueList3);
        org.junit.Assert.assertNotNull(postStatisticalDerivedTimeSeries6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(postStatisticalDerivedTimeSeries9);
        org.junit.Assert.assertTrue("'" + newValueLocationType10 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.NewValueLocationType.Unknown + "'", newValueLocationType10.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.NewValueLocationType.Unknown));
        org.junit.Assert.assertNotNull(postStatisticalDerivedTimeSeries11);
        org.junit.Assert.assertNull(boolean13);
        org.junit.Assert.assertNull(str14);
    }

    @Test
    public void test24146() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest48.test24146");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DeleteObservedProperty deleteObservedProperty0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DeleteObservedProperty();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DeleteObservedProperty deleteObservedProperty2 = deleteObservedProperty0.setId("multipart/form-data; boundary=****f2ce0d54-dac7-4cd0-b74f-1024089261f9****");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DeleteObservedProperty deleteObservedProperty4 = deleteObservedProperty0.setId("http://MaxDurationhttp/json/reply/Integer");
        java.lang.String str5 = deleteObservedProperty4.Id;
        org.junit.Assert.assertNotNull(deleteObservedProperty2);
        org.junit.Assert.assertNotNull(deleteObservedProperty4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "http://MaxDurationhttp/json/reply/Integer" + "'", str5, "http://MaxDurationhttp/json/reply/Integer");
    }

    @Test
    public void test24147() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest48.test24147");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Attachment attachment0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Attachment();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributesFull auditAttributesFull1 = attachment0.AuditAttributes;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributesFull auditAttributesFull2 = attachment0.getAuditAttributes();
        attachment0.ContentType = "/AQUARIUS/Provisioning/v1";
        java.lang.String str5 = attachment0.ContentType;
        attachment0.Comment = "hi!";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Attachment attachment9 = attachment0.setResolution("multipart/form-data; boundary=****231224c4-98ce-4e30-bd65-1d25287c4abe****");
        java.time.OffsetDateTime offsetDateTime10 = attachment0.getDateTaken();
        java.lang.Integer int11 = attachment0.getFileSize();
        org.junit.Assert.assertNull(auditAttributesFull1);
        org.junit.Assert.assertNull(auditAttributesFull2);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "/AQUARIUS/Provisioning/v1" + "'", str5, "/AQUARIUS/Provisioning/v1");
        org.junit.Assert.assertNotNull(attachment9);
        org.junit.Assert.assertNull(offsetDateTime10);
        org.junit.Assert.assertNull(int11);
    }

    @Test
    public void test24148() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest48.test24148");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostAnalyticalGroup postAnalyticalGroup0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostAnalyticalGroup();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostAnalyticalGroup postAnalyticalGroup2 = postAnalyticalGroup0.setDescription("");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostAnalyticalGroup postAnalyticalGroup4 = postAnalyticalGroup0.setNumberOfAnalysisMethodsInGroupItems((java.lang.Integer) 0);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupType analyticalGroupType5 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupType.FIELD_SURVEY;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostAnalyticalGroup postAnalyticalGroup6 = postAnalyticalGroup0.setType(analyticalGroupType5);
        java.lang.Integer int7 = postAnalyticalGroup6.NumberOfObservedPropertiesInGroupItems;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupType analyticalGroupType8 = postAnalyticalGroup6.getType();
        org.junit.Assert.assertNotNull(postAnalyticalGroup2);
        org.junit.Assert.assertNotNull(postAnalyticalGroup4);
        org.junit.Assert.assertTrue("'" + analyticalGroupType5 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupType.FIELD_SURVEY + "'", analyticalGroupType5.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupType.FIELD_SURVEY));
        org.junit.Assert.assertNotNull(postAnalyticalGroup6);
        org.junit.Assert.assertNull(int7);
        org.junit.Assert.assertTrue("'" + analyticalGroupType8 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupType.FIELD_SURVEY + "'", analyticalGroupType8.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupType.FIELD_SURVEY));
    }

    @Test
    public void test24149() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest48.test24149");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupSimple analyticalGroupSimple0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupSimple();
        java.lang.Integer int1 = analyticalGroupSimple0.getNumberOfAnalysisMethodsInGroupItems();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupSimple analyticalGroupSimple3 = analyticalGroupSimple0.setId("POST");
        analyticalGroupSimple0.NumberOfObservedPropertiesInGroupItems = (-1);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupSimple analyticalGroupSimple7 = analyticalGroupSimple0.setDescription("/AQUARIUS/Acquisition/v2://9999-12-31T23:59:59.999Z");
        org.junit.Assert.assertNull(int1);
        org.junit.Assert.assertNotNull(analyticalGroupSimple3);
        org.junit.Assert.assertNotNull(analyticalGroupSimple7);
    }

    @Test
    public void test24150() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest48.test24150");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray4 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList5 = new java.util.ArrayList<java.lang.String>();
        boolean boolean6 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList5, strArray4);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags7 = putLocationTags0.setTagUniqueIds(strList5);
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ApplyTagRequest> applyTagRequestList8 = putLocationTags0.Tags;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags9 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String str10 = putLocationTags9.getLocationUniqueId();
        putLocationTags9.LocationUniqueId = "'.'SSSSSSS";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ApplyTagRequest[] applyTagRequestArray13 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ApplyTagRequest[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ApplyTagRequest> applyTagRequestList14 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ApplyTagRequest>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ApplyTagRequest>) applyTagRequestList14, applyTagRequestArray13);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags16 = putLocationTags9.setTags(applyTagRequestList14);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags17 = putLocationTags0.setTags(applyTagRequestList14);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags18 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray22 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList23 = new java.util.ArrayList<java.lang.String>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList23, strArray22);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags25 = putLocationTags18.setTagUniqueIds(strList23);
        java.util.ArrayList<java.lang.String> strList26 = putLocationTags25.TagUniqueIds;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags28 = putLocationTags25.setLocationUniqueId("https");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags29 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String str30 = putLocationTags29.LocationUniqueId;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ApplyTagRequest applyTagRequest31 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ApplyTagRequest();
        applyTagRequest31.Value = "'.'SSSSSSS";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ApplyTagRequest applyTagRequest34 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ApplyTagRequest();
        java.lang.String str35 = applyTagRequest34.Value;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ApplyTagRequest applyTagRequest36 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ApplyTagRequest();
        java.lang.String str37 = applyTagRequest36.Value;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ApplyTagRequest applyTagRequest38 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ApplyTagRequest();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ApplyTagRequest[] applyTagRequestArray39 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ApplyTagRequest[] { applyTagRequest31, applyTagRequest34, applyTagRequest36, applyTagRequest38 };
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ApplyTagRequest> applyTagRequestList40 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ApplyTagRequest>();
        boolean boolean41 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ApplyTagRequest>) applyTagRequestList40, applyTagRequestArray39);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags42 = putLocationTags29.setTags(applyTagRequestList40);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags43 = putLocationTags25.setTags(applyTagRequestList40);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags45 = putLocationTags43.setLocationUniqueId("'.'SSSSSSS");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags46 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray50 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList51 = new java.util.ArrayList<java.lang.String>();
        boolean boolean52 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList51, strArray50);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags53 = putLocationTags46.setTagUniqueIds(strList51);
        java.util.ArrayList<java.lang.String> strList54 = putLocationTags53.TagUniqueIds;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags56 = putLocationTags53.setLocationUniqueId("https");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags57 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String str58 = putLocationTags57.LocationUniqueId;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ApplyTagRequest applyTagRequest59 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ApplyTagRequest();
        applyTagRequest59.Value = "'.'SSSSSSS";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ApplyTagRequest applyTagRequest62 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ApplyTagRequest();
        java.lang.String str63 = applyTagRequest62.Value;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ApplyTagRequest applyTagRequest64 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ApplyTagRequest();
        java.lang.String str65 = applyTagRequest64.Value;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ApplyTagRequest applyTagRequest66 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ApplyTagRequest();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ApplyTagRequest[] applyTagRequestArray67 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ApplyTagRequest[] { applyTagRequest59, applyTagRequest62, applyTagRequest64, applyTagRequest66 };
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ApplyTagRequest> applyTagRequestList68 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ApplyTagRequest>();
        boolean boolean69 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ApplyTagRequest>) applyTagRequestList68, applyTagRequestArray67);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags70 = putLocationTags57.setTags(applyTagRequestList68);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags71 = putLocationTags53.setTags(applyTagRequestList68);
        putLocationTags43.Tags = applyTagRequestList68;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags73 = putLocationTags0.setTags(applyTagRequestList68);
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ApplyTagRequest> applyTagRequestList74 = putLocationTags73.getTags();
        org.junit.Assert.assertNotNull(strArray4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(putLocationTags7);
        org.junit.Assert.assertNull(applyTagRequestList8);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNotNull(applyTagRequestArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(putLocationTags16);
        org.junit.Assert.assertNotNull(putLocationTags17);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(putLocationTags25);
        org.junit.Assert.assertNotNull(strList26);
        org.junit.Assert.assertNotNull(putLocationTags28);
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertNotNull(applyTagRequestArray39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(putLocationTags42);
        org.junit.Assert.assertNotNull(putLocationTags43);
        org.junit.Assert.assertNotNull(putLocationTags45);
        org.junit.Assert.assertNotNull(strArray50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(putLocationTags53);
        org.junit.Assert.assertNotNull(strList54);
        org.junit.Assert.assertNotNull(putLocationTags56);
        org.junit.Assert.assertNull(str58);
        org.junit.Assert.assertNull(str63);
        org.junit.Assert.assertNull(str65);
        org.junit.Assert.assertNotNull(applyTagRequestArray67);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertNotNull(putLocationTags70);
        org.junit.Assert.assertNotNull(putLocationTags71);
        org.junit.Assert.assertNotNull(putLocationTags73);
        org.junit.Assert.assertNotNull(applyTagRequestList74);
    }

    @Test
    public void test24151() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest48.test24151");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.AdcpDischargeActivity adcpDischargeActivity0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.AdcpDischargeActivity();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay1 = null;
        adcpDischargeActivity0.TransducerDepth = quantityWithDisplay1;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary3 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        dischargeSummary3.Reviewer = "";
        java.time.Instant instant6 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        dischargeSummary3.MeasurementTime = instant6;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.BaseFlowType baseFlowType8 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.BaseFlowType.BaseFlow;
        dischargeSummary3.BaseFlow = baseFlowType8;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeUncertainty dischargeUncertainty10 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeUncertainty();
        dischargeSummary3.DischargeUncertainty = dischargeUncertainty10;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary12 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay13 = dischargeSummary12.getMeanGageHeight();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay14 = dischargeSummary12.Discharge;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay15 = dischargeSummary12.DurationInHours;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay16 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay18 = doubleWithDisplay16.setNumeric((java.lang.Double) 10.0d);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary19 = dischargeSummary12.setDurationInHours(doubleWithDisplay16);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeUncertainty dischargeUncertainty20 = dischargeUncertainty10.setQuantitativeUncertainty(doubleWithDisplay16);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.AdcpDischargeActivity adcpDischargeActivity21 = adcpDischargeActivity0.setTopEstimateExponent(doubleWithDisplay16);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay22 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay24 = doubleWithDisplay22.setNumeric((java.lang.Double) 10.0d);
        java.lang.String str25 = doubleWithDisplay24.getDisplay();
        java.lang.String str26 = doubleWithDisplay24.getDisplay();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.AdcpDischargeActivity adcpDischargeActivity27 = adcpDischargeActivity21.setDischargeCoefficientVariation(doubleWithDisplay24);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.AdcpDischargeActivity adcpDischargeActivity29 = adcpDischargeActivity27.setTopEstimateMethod("https");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay30 = adcpDischargeActivity29.getBottomEstimateExponent();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.AdcpDischargeActivity adcpDischargeActivity32 = adcpDischargeActivity29.setNumberOfTransects((java.lang.Integer) 0);
        java.lang.String str33 = adcpDischargeActivity32.getBottomEstimateMethod();
        java.lang.String str34 = adcpDischargeActivity32.BottomEstimateMethod;
        org.junit.Assert.assertNotNull(instant6);
        org.junit.Assert.assertTrue("'" + baseFlowType8 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.BaseFlowType.BaseFlow + "'", baseFlowType8.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.BaseFlowType.BaseFlow));
        org.junit.Assert.assertNull(quantityWithDisplay13);
        org.junit.Assert.assertNull(quantityWithDisplay14);
        org.junit.Assert.assertNull(doubleWithDisplay15);
        org.junit.Assert.assertNotNull(doubleWithDisplay18);
        org.junit.Assert.assertNotNull(dischargeSummary19);
        org.junit.Assert.assertNotNull(dischargeUncertainty20);
        org.junit.Assert.assertNotNull(adcpDischargeActivity21);
        org.junit.Assert.assertNotNull(doubleWithDisplay24);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertNotNull(adcpDischargeActivity27);
        org.junit.Assert.assertNotNull(adcpDischargeActivity29);
        org.junit.Assert.assertNull(doubleWithDisplay30);
        org.junit.Assert.assertNotNull(adcpDischargeActivity32);
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertNull(str34);
    }

    @Test
    public void test24152() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest48.test24152");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFieldVisitActivityWithTemplate postFieldVisitActivityWithTemplate0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFieldVisitActivityWithTemplate();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate1 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate();
        specimenTemplate1.CustomId = "hi!";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate4 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate5 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate();
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabInstructionTemplate> labInstructionTemplateList6 = specimenTemplate5.getLabInstructionTemplates();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate7 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate9 = specimenTemplate7.setCustomId("hi!");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate10 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate11 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate();
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabInstructionTemplate> labInstructionTemplateList12 = specimenTemplate11.LabInstructionTemplates;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate[] specimenTemplateArray13 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate[] { specimenTemplate1, specimenTemplate4, specimenTemplate5, specimenTemplate9, specimenTemplate10, specimenTemplate11 };
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate> specimenTemplateList14 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate>) specimenTemplateList14, specimenTemplateArray13);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFieldVisitActivityWithTemplate postFieldVisitActivityWithTemplate16 = postFieldVisitActivityWithTemplate0.setSpecimenTemplates((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate>) specimenTemplateList14);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ActivityTemplateType activityTemplateType17 = postFieldVisitActivityWithTemplate16.getType();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation18 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedFieldResult plannedFieldResult19 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation20 = observation18.setPlannedFieldResult(plannedFieldResult19);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultStatus resultStatus21 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation22 = observation20.setResultStatus(resultStatus21);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity postActivity23 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity();
        postActivity23.LoggerFileName = "hi!";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity plannedActivity26 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity postActivity27 = postActivity23.setPlannedActivity(plannedActivity26);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ActivityType activityType28 = postActivity23.Type;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFieldVisitActivityWithTemplate postFieldVisitActivityWithTemplate29 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFieldVisitActivityWithTemplate();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate30 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate();
        specimenTemplate30.CustomId = "hi!";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate33 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate34 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate();
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabInstructionTemplate> labInstructionTemplateList35 = specimenTemplate34.getLabInstructionTemplates();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate36 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate38 = specimenTemplate36.setCustomId("hi!");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate39 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate40 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate();
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabInstructionTemplate> labInstructionTemplateList41 = specimenTemplate40.LabInstructionTemplates;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate[] specimenTemplateArray42 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate[] { specimenTemplate30, specimenTemplate33, specimenTemplate34, specimenTemplate38, specimenTemplate39, specimenTemplate40 };
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate> specimenTemplateList43 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate>();
        boolean boolean44 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate>) specimenTemplateList43, specimenTemplateArray42);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFieldVisitActivityWithTemplate postFieldVisitActivityWithTemplate45 = postFieldVisitActivityWithTemplate29.setSpecimenTemplates((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate>) specimenTemplateList43);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.CollectionMethod collectionMethod46 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.CollectionMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFieldVisitActivityWithTemplate postFieldVisitActivityWithTemplate47 = postFieldVisitActivityWithTemplate45.setCollectionMethod(collectionMethod46);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity postActivity48 = postActivity23.setCollectionMethod(collectionMethod46);
        observation22.CollectionMethod = collectionMethod46;
        collectionMethod46.Name = "http";
        java.lang.String str52 = collectionMethod46.getCustomId();
        collectionMethod46.CustomId = "MinDuration";
        collectionMethod46.CustomId = "0001-01-01T00:00:00.000Z";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFieldVisitActivityWithTemplate postFieldVisitActivityWithTemplate57 = postFieldVisitActivityWithTemplate16.setCollectionMethod(collectionMethod46);
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate> specimenTemplateList58 = postFieldVisitActivityWithTemplate57.SpecimenTemplates;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFieldVisitActivityWithTemplate postFieldVisitActivityWithTemplate60 = postFieldVisitActivityWithTemplate57.setCustomId("hi!:///AQUARIUS/Provisioning/v1");
        org.junit.Assert.assertNull(labInstructionTemplateList6);
        org.junit.Assert.assertNotNull(specimenTemplate9);
        org.junit.Assert.assertNull(labInstructionTemplateList12);
        org.junit.Assert.assertNotNull(specimenTemplateArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(postFieldVisitActivityWithTemplate16);
        org.junit.Assert.assertNull(activityTemplateType17);
        org.junit.Assert.assertNotNull(observation20);
        org.junit.Assert.assertNotNull(observation22);
        org.junit.Assert.assertNotNull(postActivity27);
        org.junit.Assert.assertNull(activityType28);
        org.junit.Assert.assertNull(labInstructionTemplateList35);
        org.junit.Assert.assertNotNull(specimenTemplate38);
        org.junit.Assert.assertNull(labInstructionTemplateList41);
        org.junit.Assert.assertNotNull(specimenTemplateArray42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(postFieldVisitActivityWithTemplate45);
        org.junit.Assert.assertNotNull(postFieldVisitActivityWithTemplate47);
        org.junit.Assert.assertNotNull(postActivity48);
        org.junit.Assert.assertNull(str52);
        org.junit.Assert.assertNotNull(postFieldVisitActivityWithTemplate57);
        org.junit.Assert.assertNotNull(specimenTemplateList58);
        org.junit.Assert.assertNotNull(postFieldVisitActivityWithTemplate60);
    }

    @Test
    public void test24153() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest48.test24153");
        java.util.Map<java.lang.Object, java.lang.reflect.Type> objMap2 = null;
        java.util.Map<java.lang.Object, java.lang.reflect.Type> objMap5 = null;
        com.aquaticinformatics.aquarius.sdk.samples.FieldNamer fieldNamer6 = new com.aquaticinformatics.aquarius.sdk.samples.FieldNamer();
        com.aquaticinformatics.aquarius.sdk.helpers.SdkServiceClient sdkServiceClient8 = com.aquaticinformatics.aquarius.sdk.helpers.SdkServiceClient.Create("MaxDuration", "http", objMap5, (com.aquaticinformatics.aquarius.sdk.helpers.IFieldNamer) fieldNamer6, false);
        com.aquaticinformatics.aquarius.sdk.helpers.SdkServiceClient sdkServiceClient10 = com.aquaticinformatics.aquarius.sdk.helpers.SdkServiceClient.Create("/AQUARIUS/Acquisition/v2", "multipart/form-data; boundary=****44f0772e-c3ca-4316-8e2a-61ec8540d661****", objMap2, (com.aquaticinformatics.aquarius.sdk.helpers.IFieldNamer) fieldNamer6, true);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservedPropertyCategoricalValues getObservedPropertyCategoricalValues11 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservedPropertyCategoricalValues();
        java.lang.String str12 = getObservedPropertyCategoricalValues11.Id;
        java.lang.String str13 = getObservedPropertyCategoricalValues11.getId();
        java.lang.String str14 = getObservedPropertyCategoricalValues11.Id;
        java.lang.Object obj15 = getObservedPropertyCategoricalValues11.getResponseType();
        java.util.Map<java.lang.String, java.lang.String> strMap16 = null;
        java.lang.String str17 = sdkServiceClient10.createUrl((java.lang.Object) getObservedPropertyCategoricalValues11, strMap16);
        sdkServiceClient10.setCredentials("2021.8.9990", "multipart/form-data; boundary=****9fadde69-3f13-40c4-a87c-0f3f51c2dd35****");
        java.net.HttpURLConnection httpURLConnection22 = sdkServiceClient10.get("0001-01-01T00:00:00.0000000Z");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetResultGrades getResultGrades23 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetResultGrades();
        java.lang.Object obj24 = getResultGrades23.getResponseType();
        // The following exception was thrown during execution in test generation
        try {
            com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SearchResultResultGrade searchResultResultGrade25 = sdkServiceClient10.post((net.servicestack.client.IReturn<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SearchResultResultGrade>) getResultGrades23);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(sdkServiceClient8);
        org.junit.Assert.assertNotNull(sdkServiceClient10);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(obj15);
        org.junit.Assert.assertEquals(obj15.toString(), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$SearchResultCategoricalValue");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj15), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$SearchResultCategoricalValue");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj15), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$SearchResultCategoricalValue");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "http:///AQUARIUS/Acquisition/v2multipart/form-data; boundary=****44f0772e-c3ca-4316-8e2a-61ec8540d661****/v1/observedproperties/{id}/categoricalvalues" + "'", str17, "http:///AQUARIUS/Acquisition/v2multipart/form-data; boundary=****44f0772e-c3ca-4316-8e2a-61ec8540d661****/v1/observedproperties/{id}/categoricalvalues");
        org.junit.Assert.assertNotNull(httpURLConnection22);
        org.junit.Assert.assertNotNull(obj24);
        org.junit.Assert.assertEquals(obj24.toString(), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$SearchResultResultGrade");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj24), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$SearchResultResultGrade");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj24), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$SearchResultResultGrade");
    }

    @Test
    public void test24154() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest48.test24154");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutProject putProject0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutProject();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutProject putProject2 = putProject0.setScopeStatement("yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ");
        putProject2.Approved = true;
        java.lang.String str5 = putProject2.getCustomId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutProject putProject7 = putProject2.setApproved((java.lang.Boolean) false);
        java.lang.String str8 = putProject7.getScopeStatement();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutProject putProject10 = putProject7.setScopeStatement("https");
        java.time.OffsetDateTime offsetDateTime11 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutProject putProject12 = putProject10.setStartTime(offsetDateTime11);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutProject putProject14 = putProject12.setApproved((java.lang.Boolean) true);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutProject putProject15 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutProject();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutProject putProject17 = putProject15.setScopeStatement("yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ");
        java.lang.Object obj18 = putProject15.getResponseType();
        putProject15.ScopeStatement = "hi!";
        java.time.OffsetDateTime offsetDateTime21 = putProject15.StartTime;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Project project22 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Project();
        java.lang.String str23 = project22.getName();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ProjectType projectType24 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ProjectType.EVENT_BASED_MONITORING;
        project22.Type = projectType24;
        putProject15.Type = projectType24;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutProject putProject27 = putProject14.setType(projectType24);
        java.lang.Boolean boolean28 = putProject27.Approved;
        org.junit.Assert.assertNotNull(putProject2);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(putProject7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ" + "'", str8, "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ");
        org.junit.Assert.assertNotNull(putProject10);
        org.junit.Assert.assertNotNull(putProject12);
        org.junit.Assert.assertNotNull(putProject14);
        org.junit.Assert.assertNotNull(putProject17);
        org.junit.Assert.assertNotNull(obj18);
        org.junit.Assert.assertEquals(obj18.toString(), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$Project");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj18), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$Project");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj18), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$Project");
        org.junit.Assert.assertNull(offsetDateTime21);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertTrue("'" + projectType24 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ProjectType.EVENT_BASED_MONITORING + "'", projectType24.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ProjectType.EVENT_BASED_MONITORING));
        org.junit.Assert.assertNotNull(putProject27);
        org.junit.Assert.assertEquals("'" + boolean28 + "' != '" + true + "'", boolean28, true);
    }

    @Test
    public void test24155() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest48.test24155");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationMinimal observationMinimal0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationMinimal();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty observedProperty1 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationMinimal observationMinimal2 = observationMinimal0.setObservedProperty(observedProperty1);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenNestedInActivity specimenNestedInActivity3 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationMinimal observationMinimal4 = observationMinimal2.setSpecimen(specimenNestedInActivity3);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.TaxonomicResult taxonomicResult5 = null;
        observationMinimal4.TaxonomicResult = taxonomicResult5;
        java.time.OffsetDateTime offsetDateTime7 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationMinimal observationMinimal8 = observationMinimal4.setResultTime(offsetDateTime7);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.NumericResult numericResult9 = observationMinimal8.NumericResult;
        org.junit.Assert.assertNotNull(observationMinimal2);
        org.junit.Assert.assertNotNull(observationMinimal4);
        org.junit.Assert.assertNotNull(observationMinimal8);
        org.junit.Assert.assertNull(numericResult9);
    }

    @Test
    public void test24156() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest48.test24156");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabInstructionTemplate labInstructionTemplate0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabInstructionTemplate();
        java.lang.String str1 = labInstructionTemplate0.HoldingTime;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty observedProperty2 = labInstructionTemplate0.getObservedProperty();
        java.lang.String str3 = labInstructionTemplate0.getId();
        java.lang.String str4 = labInstructionTemplate0.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem analyticalGroupItem5 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod6 = analyticalGroupItem5.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod7 = analyticalGroupItem5.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod8 = null;
        analyticalGroupItem5.AnalysisMethod = analysisMethod8;
        java.lang.String str10 = analyticalGroupItem5.getHoldingTime();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod11 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod();
        java.lang.String str12 = analysisMethod11.getName();
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple> importHistoryEventSimpleList13 = analysisMethod11.ImportHistoryEventSimples;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem analyticalGroupItem14 = analyticalGroupItem5.setAnalysisMethod(analysisMethod11);
        java.lang.String str15 = analysisMethod11.Description;
        java.lang.String str16 = analysisMethod11.Context;
        labInstructionTemplate0.AnalysisMethod = analysisMethod11;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes18 = analysisMethod11.getAuditAttributes();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(observedProperty2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(analysisMethod6);
        org.junit.Assert.assertNull(analysisMethod7);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNull(importHistoryEventSimpleList13);
        org.junit.Assert.assertNotNull(analyticalGroupItem14);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNull(auditAttributes18);
    }

    @Test
    public void test24157() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest48.test24157");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RoundServiceResponse roundServiceResponse0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RoundServiceResponse();
        java.util.ArrayList<java.lang.String> strList1 = roundServiceResponse0.getData();
        java.util.ArrayList<java.lang.String> strList2 = roundServiceResponse0.getData();
        java.util.ArrayList<java.lang.String> strList3 = null;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RoundServiceResponse roundServiceResponse4 = roundServiceResponse0.setData(strList3);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DeleteFieldVisits deleteFieldVisits5 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DeleteFieldVisits();
        java.lang.String str6 = deleteFieldVisits5.getSort();
        java.time.Instant instant7 = deleteFieldVisits5.EndStartTime;
        java.util.List<java.lang.String> strList8 = deleteFieldVisits5.getSamplingLocationIds();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutUserV2 putUserV2_9 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutUserV2();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UserType userType10 = putUserV2_9.UserType;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetActivities getActivities11 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetActivities();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse12 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary13 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary15 = dischargeSummary13.setPublish((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse16 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant17 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse18 = locationDescriptionListServiceResponse16.setNextToken(instant17);
        dischargeSummary13.MeasurementTime = instant17;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse20 = locationDescriptionListServiceResponse12.setNextToken(instant17);
        java.time.Instant instant21 = locationDescriptionListServiceResponse12.getNextToken();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetActivities getActivities22 = getActivities11.setToStartTime(instant21);
        java.lang.String str23 = getActivities22.getSort();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_24 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.util.List<java.lang.String> strList25 = getObservationsV2_24.SamplingContextTagIds;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_26 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray28 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList29 = new java.util.ArrayList<java.lang.String>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList29, strArray28);
        getObservationsV2_26.SpecimenIds = strList29;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags32 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray36 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList37 = new java.util.ArrayList<java.lang.String>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList37, strArray36);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags39 = putLocationTags32.setTagUniqueIds(strList37);
        getObservationsV2_26.QualityControlTypes = strList37;
        getObservationsV2_24.ResultGrades = strList37;
        getActivities22.Media = strList37;
        putUserV2_9.AccessGroups = strList37;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DeleteFieldVisits deleteFieldVisits44 = deleteFieldVisits5.setSearch((java.util.List<java.lang.String>) strList37);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DeleteFieldVisits deleteFieldVisits45 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DeleteFieldVisits();
        java.lang.String str46 = deleteFieldVisits45.Sort;
        deleteFieldVisits45.Sort = "9999-12-31T23:59:59.999Z";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_49 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray52 = new java.lang.String[] { "", "" };
        java.util.ArrayList<java.lang.String> strList53 = new java.util.ArrayList<java.lang.String>();
        boolean boolean54 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList53, strArray52);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_55 = getObservationsV2_49.setDataClassifications((java.util.List<java.lang.String>) strList53);
        getObservationsV2_55.DepthUnitCustomId = "hi!";
        java.lang.String str58 = getObservationsV2_55.CustomId;
        java.util.List<java.lang.String> strList59 = getObservationsV2_55.getSearch();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_60 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray62 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList63 = new java.util.ArrayList<java.lang.String>();
        boolean boolean64 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList63, strArray62);
        getObservationsV2_60.SpecimenIds = strList63;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags66 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray70 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList71 = new java.util.ArrayList<java.lang.String>();
        boolean boolean72 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList71, strArray70);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags73 = putLocationTags66.setTagUniqueIds(strList71);
        getObservationsV2_60.QualityControlTypes = strList71;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_75 = getObservationsV2_55.setMedia((java.util.List<java.lang.String>) strList71);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DeleteFieldVisits deleteFieldVisits76 = deleteFieldVisits45.setSearch((java.util.List<java.lang.String>) strList71);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DeleteFieldVisits deleteFieldVisits77 = deleteFieldVisits44.setProjectIds((java.util.List<java.lang.String>) strList71);
        roundServiceResponse4.Data = strList71;
        org.junit.Assert.assertNull(strList1);
        org.junit.Assert.assertNull(strList2);
        org.junit.Assert.assertNotNull(roundServiceResponse4);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(instant7);
        org.junit.Assert.assertNull(strList8);
        org.junit.Assert.assertNull(userType10);
        org.junit.Assert.assertNotNull(dischargeSummary15);
        org.junit.Assert.assertNotNull(instant17);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse18);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse20);
        org.junit.Assert.assertNotNull(instant21);
        org.junit.Assert.assertNotNull(getActivities22);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertNull(strList25);
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(putLocationTags39);
        org.junit.Assert.assertNotNull(deleteFieldVisits44);
        org.junit.Assert.assertNull(str46);
        org.junit.Assert.assertNotNull(strArray52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(getObservationsV2_55);
        org.junit.Assert.assertNull(str58);
        org.junit.Assert.assertNull(strList59);
        org.junit.Assert.assertNotNull(strArray62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertNotNull(strArray70);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertNotNull(putLocationTags73);
        org.junit.Assert.assertNotNull(getObservationsV2_75);
        org.junit.Assert.assertNotNull(deleteFieldVisits76);
        org.junit.Assert.assertNotNull(deleteFieldVisits77);
    }

    @Test
    public void test24158() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest48.test24158");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Attachment attachment0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Attachment();
        java.lang.String str1 = attachment0.getUrl();
        java.lang.String str2 = attachment0.FileName;
        java.lang.String str3 = attachment0.getFileName();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.AttachmentType attachmentType4 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.AttachmentType.Swami;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Attachment attachment5 = attachment0.setAttachmentType(attachmentType4);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.AttachmentCategory attachmentCategory6 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.AttachmentCategory.LevelSurvey;
        attachment5.AttachmentCategory = attachmentCategory6;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.AttachmentCategory attachmentCategory8 = attachment5.AttachmentCategory;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Attachment attachment10 = attachment5.setFileName("0001-01-01T00:00:00.000Z");
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertTrue("'" + attachmentType4 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.AttachmentType.Swami + "'", attachmentType4.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.AttachmentType.Swami));
        org.junit.Assert.assertNotNull(attachment5);
        org.junit.Assert.assertTrue("'" + attachmentCategory6 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.AttachmentCategory.LevelSurvey + "'", attachmentCategory6.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.AttachmentCategory.LevelSurvey));
        org.junit.Assert.assertTrue("'" + attachmentCategory8 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.AttachmentCategory.LevelSurvey + "'", attachmentCategory8.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.AttachmentCategory.LevelSurvey));
        org.junit.Assert.assertNotNull(attachment10);
    }

    @Test
    public void test24159() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest48.test24159");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.OpenIdConnectRelyingPartyConfiguration openIdConnectRelyingPartyConfiguration0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.OpenIdConnectRelyingPartyConfiguration();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.OpenIdConnectRelyingPartyConfiguration openIdConnectRelyingPartyConfiguration2 = openIdConnectRelyingPartyConfiguration0.setIssuerIdentifier("yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ");
        openIdConnectRelyingPartyConfiguration2.OptionalIssuerDiscoveryUri = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ";
        java.lang.String str5 = openIdConnectRelyingPartyConfiguration2.RedirectUri;
        openIdConnectRelyingPartyConfiguration2.IdentifierClaim = "hi!";
        org.junit.Assert.assertNotNull(openIdConnectRelyingPartyConfiguration2);
        org.junit.Assert.assertNull(str5);
    }

    @Test
    public void test24160() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest48.test24160");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TagMetadata tagMetadata0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TagMetadata();
        java.lang.String str1 = tagMetadata0.getValue();
        java.lang.String str2 = tagMetadata0.UniqueId;
        java.lang.String str3 = tagMetadata0.getName();
        java.lang.String str4 = tagMetadata0.getKey();
        java.lang.String str5 = tagMetadata0.getUniqueId();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(str5);
    }

    @Test
    public void test24161() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest48.test24161");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisit fieldVisit0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisit();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.InspectionActivity inspectionActivity1 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.InspectionActivity();
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Inspection> inspectionList2 = inspectionActivity1.getInspections();
        java.lang.String str3 = inspectionActivity1.Party;
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Reading> readingList4 = inspectionActivity1.Readings;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.InspectionActivity inspectionActivity6 = inspectionActivity1.setParty("https");
        fieldVisit0.InspectionActivity = inspectionActivity6;
        java.time.Instant instant8 = fieldVisit0.EndTime;
        org.junit.Assert.assertNull(inspectionList2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(readingList4);
        org.junit.Assert.assertNotNull(inspectionActivity6);
        org.junit.Assert.assertNull(instant8);
    }

    @Test
    public void test24162() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest48.test24162");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetUnitGroupWithUnits getUnitGroupWithUnits0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetUnitGroupWithUnits();
        getUnitGroupWithUnits0.CustomId = "multipart/form-data; boundary=****bbcf5f9e-6ccf-4b63-91ab-6e645caf02af****";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetUnitGroupWithUnitsSystemCodeType getUnitGroupWithUnitsSystemCodeType3 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetUnitGroupWithUnitsSystemCodeType.LENGTH;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetUnitGroupWithUnits getUnitGroupWithUnits4 = getUnitGroupWithUnits0.setSystemCode(getUnitGroupWithUnitsSystemCodeType3);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetUnitGroupWithUnits getUnitGroupWithUnits5 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetUnitGroupWithUnits();
        getUnitGroupWithUnits5.CustomId = "multipart/form-data; boundary=****bbcf5f9e-6ccf-4b63-91ab-6e645caf02af****";
        java.lang.String str8 = getUnitGroupWithUnits5.getCustomId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetUnitGroupWithUnitsSystemCodeType getUnitGroupWithUnitsSystemCodeType9 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetUnitGroupWithUnitsSystemCodeType.LENGTH;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetUnitGroupWithUnits getUnitGroupWithUnits10 = getUnitGroupWithUnits5.setSystemCode(getUnitGroupWithUnitsSystemCodeType9);
        getUnitGroupWithUnits4.SystemCode = getUnitGroupWithUnitsSystemCodeType9;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetUnitGroupWithUnits getUnitGroupWithUnits13 = getUnitGroupWithUnits4.setCustomId("/AQUARIUS/Publish/v2");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetUnitGroupWithUnits getUnitGroupWithUnits15 = getUnitGroupWithUnits4.setCustomId("multipart/form-data; boundary=****9fadde69-3f13-40c4-a87c-0f3f51c2dd35****");
        org.junit.Assert.assertTrue("'" + getUnitGroupWithUnitsSystemCodeType3 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetUnitGroupWithUnitsSystemCodeType.LENGTH + "'", getUnitGroupWithUnitsSystemCodeType3.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetUnitGroupWithUnitsSystemCodeType.LENGTH));
        org.junit.Assert.assertNotNull(getUnitGroupWithUnits4);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "multipart/form-data; boundary=****bbcf5f9e-6ccf-4b63-91ab-6e645caf02af****" + "'", str8, "multipart/form-data; boundary=****bbcf5f9e-6ccf-4b63-91ab-6e645caf02af****");
        org.junit.Assert.assertTrue("'" + getUnitGroupWithUnitsSystemCodeType9 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetUnitGroupWithUnitsSystemCodeType.LENGTH + "'", getUnitGroupWithUnitsSystemCodeType9.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetUnitGroupWithUnitsSystemCodeType.LENGTH));
        org.junit.Assert.assertNotNull(getUnitGroupWithUnits10);
        org.junit.Assert.assertNotNull(getUnitGroupWithUnits13);
        org.junit.Assert.assertNotNull(getUnitGroupWithUnits15);
    }

    @Test
    public void test24163() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest48.test24163");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedPoint timeAlignedPoint0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedPoint();
        timeAlignedPoint0.Method9 = "multipart/form-data; boundary=****7eff1774-b6b0-471a-961c-156c64359366****";
        timeAlignedPoint0.DisplayValue9 = "";
        java.lang.String str5 = timeAlignedPoint0.getApprovalName4();
        java.lang.Long long6 = timeAlignedPoint0.getGradeCode3();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedPoint timeAlignedPoint8 = timeAlignedPoint0.setQualifiers1("MinInstant");
        java.lang.Double double9 = timeAlignedPoint8.NumericValue8;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedPoint timeAlignedPoint11 = timeAlignedPoint8.setGradeCode4((java.lang.Long) 1L);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedPoint timeAlignedPoint13 = timeAlignedPoint11.setGradeCode4((java.lang.Long) 10L);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(long6);
        org.junit.Assert.assertNotNull(timeAlignedPoint8);
        org.junit.Assert.assertNull(double9);
        org.junit.Assert.assertNotNull(timeAlignedPoint11);
        org.junit.Assert.assertNotNull(timeAlignedPoint13);
    }

    @Test
    public void test24164() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest48.test24164");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeChannelMeasurement dischargeChannelMeasurement0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeChannelMeasurement();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ChannelMaterialType channelMaterialType1 = dischargeChannelMeasurement0.getChannelMaterial();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay2 = null;
        dischargeChannelMeasurement0.Discharge = quantityWithDisplay2;
        dischargeChannelMeasurement0.Comments = "https";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeChannelMeasurement dischargeChannelMeasurement6 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeChannelMeasurement();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ChannelMaterialType channelMaterialType7 = dischargeChannelMeasurement6.getChannelMaterial();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay8 = dischargeChannelMeasurement6.Discharge;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.HorizontalFlowType horizontalFlowType9 = dischargeChannelMeasurement6.getHorizontalFlow();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeChannelMeasurement dischargeChannelMeasurement11 = dischargeChannelMeasurement6.setParty("yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSSSSSZZZZZ");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MeasurementLocationToGageType measurementLocationToGageType12 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MeasurementLocationToGageType.Downstream;
        dischargeChannelMeasurement11.MeasurementLocationToGage = measurementLocationToGageType12;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeChannelMeasurement dischargeChannelMeasurement14 = dischargeChannelMeasurement0.setMeasurementLocationToGage(measurementLocationToGageType12);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Qualifier qualifier15 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Qualifier();
        java.time.Instant instant16 = qualifier15.DateApplied;
        java.lang.String str17 = qualifier15.User;
        java.lang.String str18 = qualifier15.getIdentifier();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest19 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest();
        java.lang.Object obj20 = timeAlignedDataServiceRequest19.getResponseType();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse21 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant22 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse23 = locationDescriptionListServiceResponse21.setNextToken(instant22);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest24 = timeAlignedDataServiceRequest19.setQueryFrom(instant22);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Qualifier qualifier25 = qualifier15.setDateApplied(instant22);
        dischargeChannelMeasurement14.StartTime = instant22;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeChannelMeasurement dischargeChannelMeasurement27 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeChannelMeasurement();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CurrentMeterType currentMeterType28 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CurrentMeterType.ElectromagneticVelocityMeter;
        dischargeChannelMeasurement27.CurrentMeter = currentMeterType28;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeChannelMeasurement dischargeChannelMeasurement30 = dischargeChannelMeasurement14.setCurrentMeter(currentMeterType28);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CurrentMeterType currentMeterType31 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CurrentMeterType.IceVaneMeter;
        dischargeChannelMeasurement30.CurrentMeter = currentMeterType31;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeChannelMeasurement dischargeChannelMeasurement33 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeChannelMeasurement();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ChannelMaterialType channelMaterialType34 = dischargeChannelMeasurement33.getChannelMaterial();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay35 = dischargeChannelMeasurement33.Discharge;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.HorizontalFlowType horizontalFlowType36 = dischargeChannelMeasurement33.getHorizontalFlow();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeChannelMeasurement dischargeChannelMeasurement38 = dischargeChannelMeasurement33.setParty("yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSSSSSZZZZZ");
        java.lang.String str39 = dischargeChannelMeasurement38.getMonitoringMethod();
        dischargeChannelMeasurement38.Channel = "ZZZZZ";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VerticalVelocityDistributionType verticalVelocityDistributionType42 = dischargeChannelMeasurement38.getVerticalVelocityDistribution();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.HorizontalFlowType horizontalFlowType43 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.HorizontalFlowType.Unknown;
        dischargeChannelMeasurement38.HorizontalFlow = horizontalFlowType43;
        dischargeChannelMeasurement30.HorizontalFlow = horizontalFlowType43;
        org.junit.Assert.assertNull(channelMaterialType1);
        org.junit.Assert.assertNull(channelMaterialType7);
        org.junit.Assert.assertNull(quantityWithDisplay8);
        org.junit.Assert.assertNull(horizontalFlowType9);
        org.junit.Assert.assertNotNull(dischargeChannelMeasurement11);
        org.junit.Assert.assertTrue("'" + measurementLocationToGageType12 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MeasurementLocationToGageType.Downstream + "'", measurementLocationToGageType12.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MeasurementLocationToGageType.Downstream));
        org.junit.Assert.assertNotNull(dischargeChannelMeasurement14);
        org.junit.Assert.assertNull(instant16);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNotNull(obj20);
        org.junit.Assert.assertEquals(obj20.toString(), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj20), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj20), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertNotNull(instant22);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse23);
        org.junit.Assert.assertNotNull(timeAlignedDataServiceRequest24);
        org.junit.Assert.assertNotNull(qualifier25);
        org.junit.Assert.assertTrue("'" + currentMeterType28 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CurrentMeterType.ElectromagneticVelocityMeter + "'", currentMeterType28.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CurrentMeterType.ElectromagneticVelocityMeter));
        org.junit.Assert.assertNotNull(dischargeChannelMeasurement30);
        org.junit.Assert.assertTrue("'" + currentMeterType31 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CurrentMeterType.IceVaneMeter + "'", currentMeterType31.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CurrentMeterType.IceVaneMeter));
        org.junit.Assert.assertNull(channelMaterialType34);
        org.junit.Assert.assertNull(quantityWithDisplay35);
        org.junit.Assert.assertNull(horizontalFlowType36);
        org.junit.Assert.assertNotNull(dischargeChannelMeasurement38);
        org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertNull(verticalVelocityDistributionType42);
        org.junit.Assert.assertTrue("'" + horizontalFlowType43 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.HorizontalFlowType.Unknown + "'", horizontalFlowType43.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.HorizontalFlowType.Unknown));
    }

    @Test
    public void test24165() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest48.test24165");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostNullMeasureQualifier postNullMeasureQualifier0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostNullMeasureQualifier();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostNullMeasureQualifier postNullMeasureQualifier2 = postNullMeasureQualifier0.setName("http://MaxDurationhttp/json/reply/Float");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes3 = postNullMeasureQualifier0.getAuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostNullMeasureQualifier postNullMeasureQualifier5 = postNullMeasureQualifier0.setCustomId("multipart/form-data; boundary=****221f1588-b890-43c2-a3c8-0d77cfe54330****");
        java.lang.String str6 = postNullMeasureQualifier0.Description;
        org.junit.Assert.assertNotNull(postNullMeasureQualifier2);
        org.junit.Assert.assertNull(auditAttributes3);
        org.junit.Assert.assertNotNull(postNullMeasureQualifier5);
        org.junit.Assert.assertNull(str6);
    }

    @Test
    public void test24166() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest48.test24166");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeField extendedAttributeField0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeField();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeField extendedAttributeField2 = extendedAttributeField0.setDisplayName("");
        java.lang.Boolean boolean3 = extendedAttributeField2.CanBeEmpty;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest4 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest();
        java.lang.Object obj5 = timeAlignedDataServiceRequest4.getResponseType();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_6 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray9 = new java.lang.String[] { "", "" };
        java.util.ArrayList<java.lang.String> strList10 = new java.util.ArrayList<java.lang.String>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList10, strArray9);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_12 = getObservationsV2_6.setDataClassifications((java.util.List<java.lang.String>) strList10);
        getObservationsV2_12.DepthUnitCustomId = "hi!";
        java.lang.String str15 = getObservationsV2_12.CustomId;
        java.util.List<java.lang.String> strList16 = getObservationsV2_12.getSearch();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_17 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray19 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList20 = new java.util.ArrayList<java.lang.String>();
        boolean boolean21 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList20, strArray19);
        getObservationsV2_17.SpecimenIds = strList20;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags23 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray27 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList28 = new java.util.ArrayList<java.lang.String>();
        boolean boolean29 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList28, strArray27);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags30 = putLocationTags23.setTagUniqueIds(strList28);
        getObservationsV2_17.QualityControlTypes = strList28;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_32 = getObservationsV2_12.setMedia((java.util.List<java.lang.String>) strList28);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_33 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String str34 = getObservationsV2_33.getCustomId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_35 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray37 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList38 = new java.util.ArrayList<java.lang.String>();
        boolean boolean39 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList38, strArray37);
        getObservationsV2_35.SpecimenIds = strList38;
        getObservationsV2_33.ProjectIds = strList38;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_42 = getObservationsV2_12.setObservedPropertyIds((java.util.List<java.lang.String>) strList38);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest43 = timeAlignedDataServiceRequest4.setTimeSeriesOutputUnitIds(strList38);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeField extendedAttributeField44 = extendedAttributeField2.setValueOptions((java.util.List<java.lang.String>) strList38);
        java.lang.String str45 = extendedAttributeField44.UniqueId;
        extendedAttributeField44.ColumnIdentifier = "ZZZZZ";
        org.junit.Assert.assertNotNull(extendedAttributeField2);
        org.junit.Assert.assertNull(boolean3);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(getObservationsV2_12);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNull(strList16);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(putLocationTags30);
        org.junit.Assert.assertNotNull(getObservationsV2_32);
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(getObservationsV2_42);
        org.junit.Assert.assertNotNull(timeAlignedDataServiceRequest43);
        org.junit.Assert.assertNotNull(extendedAttributeField44);
        org.junit.Assert.assertNull(str45);
    }

    @Test
    public void test24167() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest48.test24167");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutObservedProperty putObservedProperty0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutObservedProperty();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity quantity1 = putObservedProperty0.LowerLimit;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutObservedProperty putObservedProperty3 = putObservedProperty0.setDescription("");
        putObservedProperty3.CustomId = "http://MaxDurationhttp/json/reply/ArrayList";
        putObservedProperty3.CasNumber = "'.'SSSSSSS://multipart/form-data; boundary=****e0afd3ef-ab93-4371-a368-4a6f5ef58c71****";
        org.junit.Assert.assertNull(quantity1);
        org.junit.Assert.assertNotNull(putObservedProperty3);
    }

    @Test
    public void test24168() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest48.test24168");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.LocationDatumPeriod locationDatumPeriod0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.LocationDatumPeriod();
        locationDatumPeriod0.AppliedByUser = "multipart/form-data; boundary=****2917d69a-62fa-41ce-b981-4dbe2deab9f5****";
    }

    @Test
    public void test24169() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest48.test24169");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.PostLocationAttachmentResponse postLocationAttachmentResponse0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.PostLocationAttachmentResponse();
        java.lang.String str1 = postLocationAttachmentResponse0.getComments();
        java.lang.String str2 = postLocationAttachmentResponse0.FileName;
        java.lang.String str3 = postLocationAttachmentResponse0.getFileName();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(str3);
    }

    @Test
    public void test24170() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest48.test24170");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutSensor putSensor0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutSensor();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutSensor putSensor2 = putSensor0.setUniqueId("MinDuration");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.SensorBase sensorBase4 = putSensor2.setManufacturer("");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutSensor putSensor6 = putSensor2.setUniqueId("http://MaxDurationhttp/json/reply/Integer");
        putSensor2.SerialNumber = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.SensorBase sensorBase10 = putSensor2.setUnitId("https");
        org.junit.Assert.assertNotNull(putSensor2);
        org.junit.Assert.assertNotNull(sensorBase4);
        org.junit.Assert.assertNotNull(putSensor6);
        org.junit.Assert.assertNotNull(sensorBase10);
    }

    @Test
    public void test24171() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest48.test24171");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutUserRoleBase putUserRoleBase0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutUserRoleBase();
        putUserRoleBase0.RoleUniqueId = "-PT87591240H";
        java.lang.String str3 = putUserRoleBase0.UserUniqueId;
        org.junit.Assert.assertNull(str3);
    }

    @Test
    public void test24172() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest48.test24172");
        // The following exception was thrown during execution in test generation
        try {
            com.aquaticinformatics.aquarius.sdk.samples.SamplesClient samplesClient2 = com.aquaticinformatics.aquarius.sdk.samples.SamplesClient.createConnectedClient("multipart/form-data; boundary=****a6346bd6-b0e7-4290-a612-1b1730df8677****", "****231224c4-98ce-4e30-bd65-1d25287c4abe****");
            org.junit.Assert.fail("Expected exception of type java.lang.RuntimeException; message: java.net.UnknownHostException: multipart");
        } catch (java.lang.RuntimeException e) {
            // Expected exception.
        }
    }

    @Test
    public void test24173() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest48.test24173");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationUserRole putLocationUserRole0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationUserRole();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutUserRoleBase putUserRoleBase2 = putLocationUserRole0.setRoleUniqueId("http://MaxDurationhttp/json/reply/Integer");
        java.lang.String str3 = putLocationUserRole0.getLocationUniqueId();
        java.lang.String str4 = putLocationUserRole0.getUserUniqueId();
        java.lang.String str5 = putLocationUserRole0.getLocationUniqueId();
        org.junit.Assert.assertNotNull(putUserRoleBase2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(str5);
    }

    @Test
    public void test24174() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest48.test24174");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SearchResultCategoricalValue searchResultCategoricalValue0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SearchResultCategoricalValue();
        java.lang.String str1 = searchResultCategoricalValue0.getCursor();
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.CategoricalValue> categoricalValueList2 = searchResultCategoricalValue0.DomainObjects;
        searchResultCategoricalValue0.Cursor = "http";
        searchResultCategoricalValue0.TotalCount = (-1);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(categoricalValueList2);
    }

    @Test
    public void test24175() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest48.test24175");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationExportIIV2 getObservationExportIIV2_0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationExportIIV2();
        java.util.List<java.lang.String> strList1 = getObservationExportIIV2_0.getCollectionMethodIds();
        java.util.List<java.lang.String> strList2 = getObservationExportIIV2_0.AnalyticalGroupIds;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationExportIIV2 getObservationExportIIV2_4 = getObservationExportIIV2_0.setNumericResultValue((java.lang.Double) 0.0d);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitReading fieldVisitReading5 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitReading();
        fieldVisitReading5.FieldVisitIdentifier = "MaxInstant";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitReading fieldVisitReading9 = fieldVisitReading5.setModel("multipart/form-data; boundary=****44f0772e-c3ca-4316-8e2a-61ec8540d661****");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetChartDataV2 getChartDataV2_10 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetChartDataV2();
        java.lang.String str11 = getChartDataV2_10.getActivityCustomId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetChartDataV2 getChartDataV2_13 = getChartDataV2_10.setFilterId("");
        java.util.List<java.lang.String> strList14 = getChartDataV2_10.getIds();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExtendedAttributeDropdownlistitems getExtendedAttributeDropdownlistitems15 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExtendedAttributeDropdownlistitems();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_16 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.util.List<java.lang.String> strList17 = getObservationsV2_16.SamplingContextTagIds;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_18 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray20 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList21 = new java.util.ArrayList<java.lang.String>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList21, strArray20);
        getObservationsV2_18.SpecimenIds = strList21;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags24 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray28 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList29 = new java.util.ArrayList<java.lang.String>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList29, strArray28);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags31 = putLocationTags24.setTagUniqueIds(strList29);
        getObservationsV2_18.QualityControlTypes = strList29;
        getObservationsV2_16.ResultGrades = strList29;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExtendedAttributeDropdownlistitems getExtendedAttributeDropdownlistitems34 = getExtendedAttributeDropdownlistitems15.setSearch((java.util.List<java.lang.String>) strList29);
        getChartDataV2_10.ObservedPropertyIds = strList29;
        getChartDataV2_10.SpecimenName = "MinDuration";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportObservations getExportObservations38 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportObservations();
        java.util.List<java.lang.String> strList39 = getExportObservations38.getLabReportIds();
        java.lang.String str40 = getExportObservations38.DepthUnitCustomId;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetActivityTemplates getActivityTemplates41 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetActivityTemplates();
        java.lang.Object obj42 = getActivityTemplates41.getResponseType();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_43 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray45 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList46 = new java.util.ArrayList<java.lang.String>();
        boolean boolean47 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList46, strArray45);
        getObservationsV2_43.SpecimenIds = strList46;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags49 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray53 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList54 = new java.util.ArrayList<java.lang.String>();
        boolean boolean55 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList54, strArray53);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags56 = putLocationTags49.setTagUniqueIds(strList54);
        getObservationsV2_43.QualityControlTypes = strList54;
        getActivityTemplates41.Type = strList54;
        getExportObservations38.AnalyticalGroupIds = strList54;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetChartDataV2 getChartDataV2_60 = getChartDataV2_10.setAnalysisMethodIds((java.util.List<java.lang.String>) strList54);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitReading fieldVisitReading61 = fieldVisitReading5.setQualifiers(strList54);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationExportIIV2 getObservationExportIIV2_62 = getObservationExportIIV2_0.setLabReportIds((java.util.List<java.lang.String>) strList54);
        java.util.List<java.lang.String> strList63 = getObservationExportIIV2_0.LabResultLabAnalysisMethodIds;
        org.junit.Assert.assertNull(strList1);
        org.junit.Assert.assertNull(strList2);
        org.junit.Assert.assertNotNull(getObservationExportIIV2_4);
        org.junit.Assert.assertNotNull(fieldVisitReading9);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNotNull(getChartDataV2_13);
        org.junit.Assert.assertNull(strList14);
        org.junit.Assert.assertNull(strList17);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(putLocationTags31);
        org.junit.Assert.assertNotNull(getExtendedAttributeDropdownlistitems34);
        org.junit.Assert.assertNull(strList39);
        org.junit.Assert.assertNull(str40);
        org.junit.Assert.assertNotNull(obj42);
        org.junit.Assert.assertEquals(obj42.toString(), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$SearchResultActivityTemplate");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj42), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$SearchResultActivityTemplate");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj42), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$SearchResultActivityTemplate");
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(strArray53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(putLocationTags56);
        org.junit.Assert.assertNotNull(getChartDataV2_60);
        org.junit.Assert.assertNotNull(fieldVisitReading61);
        org.junit.Assert.assertNotNull(getObservationExportIIV2_62);
        org.junit.Assert.assertNull(strList63);
    }

    @Test
    public void test24176() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest48.test24176");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationImportSummary observationImportSummary0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationImportSummary();
        observationImportSummary0.UpdateCount = (-1);
        java.lang.Integer int3 = observationImportSummary0.ExpectedCount;
        java.lang.String str4 = observationImportSummary0.SummaryReportText;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObservation[] importItemObservationArray5 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObservation[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObservation> importItemObservationList6 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObservation>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObservation>) importItemObservationList6, importItemObservationArray5);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationImportSummary observationImportSummary8 = observationImportSummary0.setImportItems((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObservation>) importItemObservationList6);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationImportSummary observationImportSummary10 = observationImportSummary0.setErrorCount((java.lang.Integer) 1);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationImportSummary observationImportSummary11 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationImportSummary();
        observationImportSummary11.UpdateCount = (-1);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationImportSummary observationImportSummary15 = observationImportSummary11.setSuccessCount((java.lang.Integer) 100);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationImportSummary observationImportSummary17 = observationImportSummary15.setSummaryReportText("yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSSSSSZZZZZ");
        observationImportSummary15.SkippedCount = 0;
        observationImportSummary15.UpdateCount = 10;
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObservation> importItemObservationList22 = observationImportSummary15.getErrorImportItems();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationImportSummary observationImportSummary23 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationImportSummary();
        observationImportSummary23.UpdateCount = (-1);
        java.lang.Integer int26 = observationImportSummary23.ExpectedCount;
        java.lang.String str27 = observationImportSummary23.SummaryReportText;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportError[] importErrorArray28 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportError[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportError> importErrorList29 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportError>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportError>) importErrorList29, importErrorArray28);
        observationImportSummary23.ImportJobErrors = importErrorList29;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationImportSummary observationImportSummary32 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationImportSummary();
        observationImportSummary32.UpdateCount = (-1);
        java.lang.Integer int35 = observationImportSummary32.ExpectedCount;
        java.lang.String str36 = observationImportSummary32.SummaryReportText;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObservation[] importItemObservationArray37 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObservation[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObservation> importItemObservationList38 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObservation>();
        boolean boolean39 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObservation>) importItemObservationList38, importItemObservationArray37);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationImportSummary observationImportSummary40 = observationImportSummary32.setImportItems((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObservation>) importItemObservationList38);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationImportSummary observationImportSummary41 = observationImportSummary23.setNonErrorImportItems((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObservation>) importItemObservationList38);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationImportSummary observationImportSummary42 = observationImportSummary15.setNonErrorImportItems((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObservation>) importItemObservationList38);
        observationImportSummary10.ImportItems = importItemObservationList38;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationImportSummary observationImportSummary44 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationImportSummary();
        observationImportSummary44.UpdateCount = (-1);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationImportSummary observationImportSummary48 = observationImportSummary44.setSuccessCount((java.lang.Integer) 100);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationImportSummary observationImportSummary50 = observationImportSummary48.setSummaryReportText("yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSSSSSZZZZZ");
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObservation> importItemObservationList51 = observationImportSummary50.getErrorImportItems();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationImportSummary observationImportSummary52 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationImportSummary();
        observationImportSummary52.UpdateCount = (-1);
        java.lang.Integer int55 = observationImportSummary52.ExpectedCount;
        java.lang.String str56 = observationImportSummary52.SummaryReportText;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportError[] importErrorArray57 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportError[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportError> importErrorList58 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportError>();
        boolean boolean59 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportError>) importErrorList58, importErrorArray57);
        observationImportSummary52.ImportJobErrors = importErrorList58;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationImportSummary observationImportSummary61 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationImportSummary();
        observationImportSummary61.UpdateCount = (-1);
        java.lang.Integer int64 = observationImportSummary61.ExpectedCount;
        java.lang.String str65 = observationImportSummary61.SummaryReportText;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObservation[] importItemObservationArray66 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObservation[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObservation> importItemObservationList67 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObservation>();
        boolean boolean68 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObservation>) importItemObservationList67, importItemObservationArray66);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationImportSummary observationImportSummary69 = observationImportSummary61.setImportItems((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObservation>) importItemObservationList67);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationImportSummary observationImportSummary70 = observationImportSummary52.setNonErrorImportItems((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObservation>) importItemObservationList67);
        java.lang.Integer int71 = observationImportSummary52.ErrorCount;
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObservation> importItemObservationList72 = observationImportSummary52.getNonErrorImportItems();
        observationImportSummary50.NonErrorImportItems = importItemObservationList72;
        observationImportSummary10.NonErrorImportItems = importItemObservationList72;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple importHistoryEventSimple75 = observationImportSummary10.ImportHistoryEventSimple;
        org.junit.Assert.assertNull(int3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNotNull(importItemObservationArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(observationImportSummary8);
        org.junit.Assert.assertNotNull(observationImportSummary10);
        org.junit.Assert.assertNotNull(observationImportSummary15);
        org.junit.Assert.assertNotNull(observationImportSummary17);
        org.junit.Assert.assertNull(importItemObservationList22);
        org.junit.Assert.assertNull(int26);
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertNotNull(importErrorArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNull(int35);
        org.junit.Assert.assertNull(str36);
        org.junit.Assert.assertNotNull(importItemObservationArray37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(observationImportSummary40);
        org.junit.Assert.assertNotNull(observationImportSummary41);
        org.junit.Assert.assertNotNull(observationImportSummary42);
        org.junit.Assert.assertNotNull(observationImportSummary48);
        org.junit.Assert.assertNotNull(observationImportSummary50);
        org.junit.Assert.assertNull(importItemObservationList51);
        org.junit.Assert.assertNull(int55);
        org.junit.Assert.assertNull(str56);
        org.junit.Assert.assertNotNull(importErrorArray57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNull(int64);
        org.junit.Assert.assertNull(str65);
        org.junit.Assert.assertNotNull(importItemObservationArray66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(observationImportSummary69);
        org.junit.Assert.assertNotNull(observationImportSummary70);
        org.junit.Assert.assertNull(int71);
        org.junit.Assert.assertNotNull(importItemObservationList72);
        org.junit.Assert.assertNull(importHistoryEventSimple75);
    }

    @Test
    public void test24177() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest48.test24177");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Filter filter0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Filter();
        java.time.OffsetDateTime offsetDateTime1 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Filter filter2 = filter0.setEndTime(offsetDateTime1);
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty> observedPropertyList3 = filter0.ObservedProperties;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostTaxon postTaxon4 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostTaxon();
        postTaxon4.ItisUrl = "MinInstant";
        postTaxon4.ItisTsn = "MaxDuration";
        postTaxon4.Comment = "MaxInstant";
        java.lang.String str11 = postTaxon4.getItisTsn();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSamplingLocation putSamplingLocation12 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSamplingLocation();
        putSamplingLocation12.Id = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSSSSSZZZZZ";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservedProperty postObservedProperty15 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservedProperty();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLabAnalysisMethod postLabAnalysisMethod16 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLabAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation17 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation();
        observation17.CustomId = "hi!";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.CategoricalResult categoricalResult20 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation21 = observation17.setCategoricalResult(categoricalResult20);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple[] importHistoryEventSimpleArray22 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple> importHistoryEventSimpleList23 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple>) importHistoryEventSimpleList23, importHistoryEventSimpleArray22);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation25 = observation17.setImportHistoryEventSimples((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple>) importHistoryEventSimpleList23);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLabAnalysisMethod postLabAnalysisMethod26 = postLabAnalysisMethod16.setImportHistoryEventSimples((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple>) importHistoryEventSimpleList23);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservedProperty postObservedProperty27 = postObservedProperty15.setImportHistoryEventSimples((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple>) importHistoryEventSimpleList23);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSamplingLocation putSamplingLocation28 = putSamplingLocation12.setImportHistoryEventSimples((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple>) importHistoryEventSimpleList23);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostTaxon postTaxon29 = postTaxon4.setImportHistoryEventSimples((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple>) importHistoryEventSimpleList23);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSchedule putSchedule30 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSchedule();
        java.time.OffsetDateTime offsetDateTime31 = putSchedule30.StartDate;
        java.time.OffsetDateTime offsetDateTime32 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSchedule putSchedule33 = putSchedule30.setEndDate(offsetDateTime32);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes34 = putSchedule33.AuditAttributes;
        java.time.OffsetDateTime offsetDateTime35 = putSchedule33.getEndDate();
        java.time.OffsetDateTime offsetDateTime36 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSchedule putSchedule37 = putSchedule33.setStartDate(offsetDateTime36);
        java.lang.Integer int38 = putSchedule33.SamplingLocationGroupSelectionTypeRandomCount;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.RecurrenceDayMonthlyType recurrenceDayMonthlyType39 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.RecurrenceDayMonthlyType.LAST_DAY_OF_MONTH;
        putSchedule33.RecurrenceDayMonthly = recurrenceDayMonthlyType39;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Unit unit41 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Unit();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes42 = unit41.AuditAttributes;
        unit41.BaseMultiplier = 0.0d;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutAccessGroup putAccessGroup45 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutAccessGroup();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivity samplingPlanPlannedActivity46 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivity();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes47 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivity samplingPlanPlannedActivity48 = samplingPlanPlannedActivity46.setAuditAttributes(auditAttributes47);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes49 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes51 = auditAttributes49.setCreationUserProfileId("'.'SSSSSSS");
        samplingPlanPlannedActivity48.AuditAttributes = auditAttributes49;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes53 = samplingPlanPlannedActivity48.AuditAttributes;
        putAccessGroup45.AuditAttributes = auditAttributes53;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Unit unit55 = unit41.setAuditAttributes(auditAttributes53);
        putSchedule33.AuditAttributes = auditAttributes53;
        postTaxon4.AuditAttributes = auditAttributes53;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Filter filter58 = filter0.setAuditAttributes(auditAttributes53);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Filter filter60 = filter58.setDescription("yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSSSSSZZZZZ");
        java.time.OffsetDateTime offsetDateTime61 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Filter filter62 = filter58.setStartTime(offsetDateTime61);
        java.lang.String str63 = filter62.getDescription();
        org.junit.Assert.assertNotNull(filter2);
        org.junit.Assert.assertNull(observedPropertyList3);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "MaxDuration" + "'", str11, "MaxDuration");
        org.junit.Assert.assertNotNull(observation21);
        org.junit.Assert.assertNotNull(importHistoryEventSimpleArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(observation25);
        org.junit.Assert.assertNotNull(postLabAnalysisMethod26);
        org.junit.Assert.assertNotNull(postObservedProperty27);
        org.junit.Assert.assertNotNull(putSamplingLocation28);
        org.junit.Assert.assertNotNull(postTaxon29);
        org.junit.Assert.assertNull(offsetDateTime31);
        org.junit.Assert.assertNotNull(putSchedule33);
        org.junit.Assert.assertNull(auditAttributes34);
        org.junit.Assert.assertNull(offsetDateTime35);
        org.junit.Assert.assertNotNull(putSchedule37);
        org.junit.Assert.assertNull(int38);
        org.junit.Assert.assertTrue("'" + recurrenceDayMonthlyType39 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.RecurrenceDayMonthlyType.LAST_DAY_OF_MONTH + "'", recurrenceDayMonthlyType39.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.RecurrenceDayMonthlyType.LAST_DAY_OF_MONTH));
        org.junit.Assert.assertNull(auditAttributes42);
        org.junit.Assert.assertNotNull(samplingPlanPlannedActivity48);
        org.junit.Assert.assertNotNull(auditAttributes51);
        org.junit.Assert.assertNotNull(auditAttributes53);
        org.junit.Assert.assertNotNull(unit55);
        org.junit.Assert.assertNotNull(filter58);
        org.junit.Assert.assertNotNull(filter60);
        org.junit.Assert.assertNotNull(filter62);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSSSSSZZZZZ" + "'", str63, "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSSSSSZZZZZ");
    }

    @Test
    public void test24178() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest48.test24178");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.GetRecurringReport getRecurringReport0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.GetRecurringReport();
        getRecurringReport0.UniqueId = "'.'SSSSSSS";
        java.lang.String str3 = getRecurringReport0.getUniqueId();
        java.lang.Object obj4 = getRecurringReport0.getResponseType();
        java.lang.Object obj5 = getRecurringReport0.getResponseType();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.GetRecurringReport getRecurringReport7 = getRecurringReport0.setUniqueId("/AQUARIUS/Acquisition/v2");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.GetRecurringReport getRecurringReport9 = getRecurringReport7.setUniqueId("MaxInstant");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "'.'SSSSSSS" + "'", str3, "'.'SSSSSSS");
        org.junit.Assert.assertNotNull(obj4);
        org.junit.Assert.assertEquals(obj4.toString(), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning$RecurringReport");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj4), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning$RecurringReport");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj4), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning$RecurringReport");
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning$RecurringReport");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning$RecurringReport");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning$RecurringReport");
        org.junit.Assert.assertNotNull(getRecurringReport7);
        org.junit.Assert.assertNotNull(getRecurringReport9);
    }

    @Test
    public void test24179() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest48.test24179");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedFieldResult plannedFieldResult1 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation2 = observation0.setPlannedFieldResult(plannedFieldResult1);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabInstruction labInstruction3 = null;
        observation2.LabInstruction = labInstruction3;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationStatistics observationStatistics5 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation6 = observation2.setStatistics(observationStatistics5);
        java.time.OffsetDateTime offsetDateTime7 = observation6.getResultTime();
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple> importHistoryEventSimpleList8 = observation6.ImportHistoryEventSimples;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty observedProperty9 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation10 = observation6.setObservedProperty(observedProperty9);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationStatistics observationStatistics11 = observation6.Statistics;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity postActivity12 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttribute[] extendedAttributeArray13 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttribute[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttribute> extendedAttributeList14 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttribute>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttribute>) extendedAttributeList14, extendedAttributeArray13);
        postActivity12.ExtendedAttributes = extendedAttributeList14;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation17 = observation6.setExtendedAttributes((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttribute>) extendedAttributeList14);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.QualityControlType qualityControlType18 = observation6.QualityControlType;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.NumericResult numericResult19 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.NumericResult();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultDetectionCondition resultDetectionCondition20 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultDetectionCondition();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes21 = resultDetectionCondition20.getAuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultDetectionCondition resultDetectionCondition23 = resultDetectionCondition20.setId("/AQUARIUS");
        java.lang.String str24 = resultDetectionCondition20.Name;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultDetectionCondition resultDetectionCondition26 = resultDetectionCondition20.setDescription("POST");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.NumericResult numericResult27 = numericResult19.setDetectionCondition(resultDetectionCondition26);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.NullMeasureQualifier nullMeasureQualifier28 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.NumericResult numericResult29 = numericResult27.setNullMeasureQualifier(nullMeasureQualifier28);
        observation6.NumericResult = numericResult29;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.FieldVisit fieldVisit31 = observation6.FieldVisit;
        org.junit.Assert.assertNotNull(observation2);
        org.junit.Assert.assertNotNull(observation6);
        org.junit.Assert.assertNull(offsetDateTime7);
        org.junit.Assert.assertNull(importHistoryEventSimpleList8);
        org.junit.Assert.assertNotNull(observation10);
        org.junit.Assert.assertNull(observationStatistics11);
        org.junit.Assert.assertNotNull(extendedAttributeArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(observation17);
        org.junit.Assert.assertNull(qualityControlType18);
        org.junit.Assert.assertNull(auditAttributes21);
        org.junit.Assert.assertNotNull(resultDetectionCondition23);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNotNull(resultDetectionCondition26);
        org.junit.Assert.assertNotNull(numericResult27);
        org.junit.Assert.assertNotNull(numericResult29);
        org.junit.Assert.assertNull(fieldVisit31);
    }

    @Test
    public void test24180() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest48.test24180");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostRole postRole0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostRole();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RoleBase roleBase2 = postRole0.setName("/AQUARIUS/Acquisition/v2://9999-12-31T23:59:59.999Z");
        java.lang.String str3 = postRole0.Name;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostRole postRole4 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostRole();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RoleApprovalTransition roleApprovalTransition5 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RoleApprovalTransition();
        java.lang.Long long6 = roleApprovalTransition5.getToApprovalLevel();
        java.lang.Long long7 = roleApprovalTransition5.ToApprovalLevel;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RoleApprovalTransition roleApprovalTransition8 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RoleApprovalTransition();
        java.lang.Long long9 = roleApprovalTransition8.getToApprovalLevel();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RoleApprovalTransition roleApprovalTransition10 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RoleApprovalTransition();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RoleApprovalTransition roleApprovalTransition12 = roleApprovalTransition10.setToApprovalLevel((java.lang.Long) (-1L));
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RoleApprovalTransition roleApprovalTransition13 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RoleApprovalTransition();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RoleApprovalTransition roleApprovalTransition15 = roleApprovalTransition13.setToApprovalLevel((java.lang.Long) (-1L));
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RoleApprovalTransition roleApprovalTransition17 = roleApprovalTransition13.setToApprovalLevel((java.lang.Long) 0L);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RoleApprovalTransition roleApprovalTransition18 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RoleApprovalTransition();
        java.lang.Long long19 = roleApprovalTransition18.getToApprovalLevel();
        java.lang.Long long20 = roleApprovalTransition18.ToApprovalLevel;
        java.lang.Long long21 = roleApprovalTransition18.getToApprovalLevel();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RoleApprovalTransition roleApprovalTransition22 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RoleApprovalTransition();
        java.lang.Long long23 = roleApprovalTransition22.getToApprovalLevel();
        java.lang.Long long24 = roleApprovalTransition22.ToApprovalLevel;
        java.lang.Long long25 = roleApprovalTransition22.getToApprovalLevel();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RoleApprovalTransition[] roleApprovalTransitionArray26 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RoleApprovalTransition[] { roleApprovalTransition5, roleApprovalTransition8, roleApprovalTransition12, roleApprovalTransition13, roleApprovalTransition18, roleApprovalTransition22 };
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RoleApprovalTransition> roleApprovalTransitionList27 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RoleApprovalTransition>();
        boolean boolean28 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RoleApprovalTransition>) roleApprovalTransitionList27, roleApprovalTransitionArray26);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RoleBase roleBase29 = postRole4.setRoleApprovalTransitions(roleApprovalTransitionList27);
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RoleApprovalTransition> roleApprovalTransitionList30 = postRole4.RoleApprovalTransitions;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RoleBase roleBase31 = postRole0.setRoleApprovalTransitions(roleApprovalTransitionList30);
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RoleApprovalTransition> roleApprovalTransitionList32 = postRole0.RoleApprovalTransitions;
        java.lang.Boolean boolean33 = postRole0.CanEditData;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RoleBase roleBase35 = postRole0.setCanEditLocationDetails((java.lang.Boolean) true);
        org.junit.Assert.assertNotNull(roleBase2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "/AQUARIUS/Acquisition/v2://9999-12-31T23:59:59.999Z" + "'", str3, "/AQUARIUS/Acquisition/v2://9999-12-31T23:59:59.999Z");
        org.junit.Assert.assertNull(long6);
        org.junit.Assert.assertNull(long7);
        org.junit.Assert.assertNull(long9);
        org.junit.Assert.assertNotNull(roleApprovalTransition12);
        org.junit.Assert.assertNotNull(roleApprovalTransition15);
        org.junit.Assert.assertNotNull(roleApprovalTransition17);
        org.junit.Assert.assertNull(long19);
        org.junit.Assert.assertNull(long20);
        org.junit.Assert.assertNull(long21);
        org.junit.Assert.assertNull(long23);
        org.junit.Assert.assertNull(long24);
        org.junit.Assert.assertNull(long25);
        org.junit.Assert.assertNotNull(roleApprovalTransitionArray26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(roleBase29);
        org.junit.Assert.assertNotNull(roleApprovalTransitionList30);
        org.junit.Assert.assertNotNull(roleBase31);
        org.junit.Assert.assertNotNull(roleApprovalTransitionList32);
        org.junit.Assert.assertNull(boolean33);
        org.junit.Assert.assertNotNull(roleBase35);
    }

    @Test
    public void test24181() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest48.test24181");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeChannelMeasurement dischargeChannelMeasurement0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeChannelMeasurement();
        dischargeChannelMeasurement0.MonitoringMethod = "/AQUARIUS/Acquisition/v2";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeChannelMeasurement dischargeChannelMeasurement3 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeChannelMeasurement();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ChannelMaterialType channelMaterialType4 = dischargeChannelMeasurement3.getChannelMaterial();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay5 = dischargeChannelMeasurement3.Discharge;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.HorizontalFlowType horizontalFlowType6 = dischargeChannelMeasurement3.getHorizontalFlow();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeChannelMeasurement dischargeChannelMeasurement8 = dischargeChannelMeasurement3.setParty("yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSSSSSZZZZZ");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VelocityVariationType velocityVariationType9 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VelocityVariationType.Steady;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeChannelMeasurement dischargeChannelMeasurement10 = dischargeChannelMeasurement8.setVelocityVariation(velocityVariationType9);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeChannelMeasurement dischargeChannelMeasurement11 = dischargeChannelMeasurement0.setVelocityVariation(velocityVariationType9);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CrossSectionSurveyActivity crossSectionSurveyActivity12 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CrossSectionSurveyActivity();
        java.time.Instant instant13 = crossSectionSurveyActivity12.StartTime;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity pointVelocityDischargeActivity14 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity();
        java.lang.String str15 = pointVelocityDischargeActivity14.SoftwareVersion;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity pointVelocityDischargeActivity17 = pointVelocityDischargeActivity14.setIsValid((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity pointVelocityDischargeActivity19 = pointVelocityDischargeActivity14.setSoftwareVersion("");
        java.lang.String str20 = pointVelocityDischargeActivity19.getManufacturer();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.StartPointType startPointType21 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.StartPointType.Unspecified;
        pointVelocityDischargeActivity19.StartPoint = startPointType21;
        crossSectionSurveyActivity12.StartingPoint = startPointType21;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CrossSectionSurveyActivity crossSectionSurveyActivity24 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CrossSectionSurveyActivity();
        java.time.Instant instant25 = crossSectionSurveyActivity24.StartTime;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity pointVelocityDischargeActivity26 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity();
        java.lang.String str27 = pointVelocityDischargeActivity26.SoftwareVersion;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity pointVelocityDischargeActivity29 = pointVelocityDischargeActivity26.setIsValid((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity pointVelocityDischargeActivity31 = pointVelocityDischargeActivity26.setSoftwareVersion("");
        java.lang.String str32 = pointVelocityDischargeActivity31.getManufacturer();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.StartPointType startPointType33 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.StartPointType.Unspecified;
        pointVelocityDischargeActivity31.StartPoint = startPointType33;
        crossSectionSurveyActivity24.StartingPoint = startPointType33;
        crossSectionSurveyActivity12.StartingPoint = startPointType33;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DatumConvertedQuantityWithDisplay datumConvertedQuantityWithDisplay37 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DatumConvertedQuantityWithDisplay();
        crossSectionSurveyActivity12.Stage = datumConvertedQuantityWithDisplay37;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeChannelMeasurement dischargeChannelMeasurement39 = dischargeChannelMeasurement11.setDistanceToGage((com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay) datumConvertedQuantityWithDisplay37);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeChannelMeasurement dischargeChannelMeasurement40 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeChannelMeasurement();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DownchainProcessorListByRatingModelServiceRequest downchainProcessorListByRatingModelServiceRequest41 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DownchainProcessorListByRatingModelServiceRequest();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DownchainProcessorListByRatingModelServiceRequest downchainProcessorListByRatingModelServiceRequest42 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DownchainProcessorListByRatingModelServiceRequest();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeTransactionListServiceRequest metadataChangeTransactionListServiceRequest43 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeTransactionListServiceRequest();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostRecurringReport postRecurringReport44 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostRecurringReport();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary45 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        dischargeSummary45.Reviewer = "";
        java.time.Instant instant48 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        dischargeSummary45.MeasurementTime = instant48;
        postRecurringReport44.NextGenerationDate = instant48;
        java.time.Instant instant51 = postRecurringReport44.getNextGenerationDate();
        java.lang.String str52 = com.aquaticinformatics.aquarius.sdk.samples.serializers.InstantSerializer.format(instant51);
        metadataChangeTransactionListServiceRequest43.QueryFrom = instant51;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DownchainProcessorListByRatingModelServiceRequest downchainProcessorListByRatingModelServiceRequest54 = downchainProcessorListByRatingModelServiceRequest42.setQueryTo(instant51);
        downchainProcessorListByRatingModelServiceRequest41.QueryFrom = instant51;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeChannelMeasurement dischargeChannelMeasurement56 = dischargeChannelMeasurement40.setStartTime(instant51);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeChannelMeasurement dischargeChannelMeasurement57 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeChannelMeasurement();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ChannelMaterialType channelMaterialType58 = dischargeChannelMeasurement57.getChannelMaterial();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ChannelEvennessType channelEvennessType59 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ChannelEvennessType.Unspecified;
        dischargeChannelMeasurement57.ChannelEvenness = channelEvennessType59;
        dischargeChannelMeasurement56.ChannelEvenness = channelEvennessType59;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeChannelMeasurement dischargeChannelMeasurement62 = dischargeChannelMeasurement39.setChannelEvenness(channelEvennessType59);
        org.junit.Assert.assertNull(channelMaterialType4);
        org.junit.Assert.assertNull(quantityWithDisplay5);
        org.junit.Assert.assertNull(horizontalFlowType6);
        org.junit.Assert.assertNotNull(dischargeChannelMeasurement8);
        org.junit.Assert.assertTrue("'" + velocityVariationType9 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VelocityVariationType.Steady + "'", velocityVariationType9.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VelocityVariationType.Steady));
        org.junit.Assert.assertNotNull(dischargeChannelMeasurement10);
        org.junit.Assert.assertNotNull(dischargeChannelMeasurement11);
        org.junit.Assert.assertNull(instant13);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNotNull(pointVelocityDischargeActivity17);
        org.junit.Assert.assertNotNull(pointVelocityDischargeActivity19);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertTrue("'" + startPointType21 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.StartPointType.Unspecified + "'", startPointType21.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.StartPointType.Unspecified));
        org.junit.Assert.assertNull(instant25);
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertNotNull(pointVelocityDischargeActivity29);
        org.junit.Assert.assertNotNull(pointVelocityDischargeActivity31);
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertTrue("'" + startPointType33 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.StartPointType.Unspecified + "'", startPointType33.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.StartPointType.Unspecified));
        org.junit.Assert.assertNotNull(dischargeChannelMeasurement39);
        org.junit.Assert.assertNotNull(instant48);
        org.junit.Assert.assertNotNull(instant51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "9999-12-31T23:59:59.999Z" + "'", str52, "9999-12-31T23:59:59.999Z");
        org.junit.Assert.assertNotNull(downchainProcessorListByRatingModelServiceRequest54);
        org.junit.Assert.assertNotNull(dischargeChannelMeasurement56);
        org.junit.Assert.assertNull(channelMaterialType58);
        org.junit.Assert.assertTrue("'" + channelEvennessType59 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ChannelEvennessType.Unspecified + "'", channelEvennessType59.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ChannelEvennessType.Unspecified));
        org.junit.Assert.assertNotNull(dischargeChannelMeasurement62);
    }

    @Test
    public void test24182() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest48.test24182");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutFilter putFilter0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutFilter();
        java.time.OffsetDateTime offsetDateTime1 = putFilter0.StartTime;
        putFilter0.Description = "multipart/form-data; boundary=****6b8051d4-caf2-4095-9f11-faa36b95fc28****";
        java.lang.String str4 = putFilter0.getCustomId();
        java.lang.String str5 = putFilter0.getId();
        org.junit.Assert.assertNull(offsetDateTime1);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(str5);
    }

    @Test
    public void test24183() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest48.test24183");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivityTemplate postActivityTemplate0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivityTemplate();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity quantity1 = postActivityTemplate0.Depth;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivityTemplate postActivityTemplate3 = postActivityTemplate0.setId("/AQUARIUS");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivityTemplate postActivityTemplate5 = postActivityTemplate3.setCustomId("/AQUARIUS");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivityTemplate postActivityTemplate7 = postActivityTemplate3.setId("MaxInstant");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultGrade resultGrade8 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultGrade();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultGrade resultGrade10 = resultGrade8.setId("/AQUARIUS/Provisioning/v1");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultGrade resultGrade12 = resultGrade8.setCustomId("9999-12-31T23:59:59.999Z");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSchedule putSchedule13 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSchedule();
        java.lang.Integer int14 = putSchedule13.getSamplingLocationGroupSelectionTypeRandomCount();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.RecurrenceType recurrenceType15 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.RecurrenceType.BI_WEEKLY;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSchedule putSchedule16 = putSchedule13.setRecurrenceType(recurrenceType15);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutDetectioncondition putDetectioncondition17 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutDetectioncondition();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes18 = putDetectioncondition17.getAuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutDetectioncondition putDetectioncondition20 = putDetectioncondition17.setCustomId("http");
        putDetectioncondition20.CustomId = "POST";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity postActivity23 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity();
        postActivity23.LoggerFileName = "hi!";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity plannedActivity26 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity postActivity27 = postActivity23.setPlannedActivity(plannedActivity26);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ActivityType activityType28 = postActivity23.Type;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFieldVisitActivityWithTemplate postFieldVisitActivityWithTemplate29 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFieldVisitActivityWithTemplate();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate30 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate();
        specimenTemplate30.CustomId = "hi!";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate33 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate34 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate();
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabInstructionTemplate> labInstructionTemplateList35 = specimenTemplate34.getLabInstructionTemplates();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate36 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate38 = specimenTemplate36.setCustomId("hi!");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate39 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate40 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate();
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabInstructionTemplate> labInstructionTemplateList41 = specimenTemplate40.LabInstructionTemplates;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate[] specimenTemplateArray42 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate[] { specimenTemplate30, specimenTemplate33, specimenTemplate34, specimenTemplate38, specimenTemplate39, specimenTemplate40 };
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate> specimenTemplateList43 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate>();
        boolean boolean44 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate>) specimenTemplateList43, specimenTemplateArray42);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFieldVisitActivityWithTemplate postFieldVisitActivityWithTemplate45 = postFieldVisitActivityWithTemplate29.setSpecimenTemplates((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate>) specimenTemplateList43);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.CollectionMethod collectionMethod46 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.CollectionMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFieldVisitActivityWithTemplate postFieldVisitActivityWithTemplate47 = postFieldVisitActivityWithTemplate45.setCollectionMethod(collectionMethod46);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity postActivity48 = postActivity23.setCollectionMethod(collectionMethod46);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Medium medium49 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Medium();
        postActivity23.Medium = medium49;
        medium49.CustomId = "-PT87591240H";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroup analyticalGroup53 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroup();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupType analyticalGroupType54 = analyticalGroup53.getType();
        analyticalGroup53.Name = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSSSSSZZZZZ";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroup analyticalGroup57 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroup();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem analyticalGroupItem58 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod59 = analyticalGroupItem58.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem analyticalGroupItem60 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod61 = analyticalGroupItem60.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod62 = analyticalGroupItem60.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem analyticalGroupItem63 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod64 = analyticalGroupItem63.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod65 = analyticalGroupItem63.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod66 = null;
        analyticalGroupItem63.AnalysisMethod = analysisMethod66;
        java.lang.String str68 = analyticalGroupItem63.getHoldingTime();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem analyticalGroupItem69 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod70 = analyticalGroupItem69.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod71 = analyticalGroupItem69.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem analyticalGroupItem72 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod73 = analyticalGroupItem72.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem analyticalGroupItem74 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod75 = analyticalGroupItem74.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod76 = analyticalGroupItem74.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod77 = null;
        analyticalGroupItem74.AnalysisMethod = analysisMethod77;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem[] analyticalGroupItemArray79 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem[] { analyticalGroupItem58, analyticalGroupItem60, analyticalGroupItem63, analyticalGroupItem69, analyticalGroupItem72, analyticalGroupItem74 };
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem> analyticalGroupItemList80 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem>();
        boolean boolean81 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem>) analyticalGroupItemList80, analyticalGroupItemArray79);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroup analyticalGroup82 = analyticalGroup57.setAnalyticalGroupItems((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem>) analyticalGroupItemList80);
        analyticalGroup53.AnalyticalGroupItems = analyticalGroupItemList80;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes84 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes();
        analyticalGroup53.AuditAttributes = auditAttributes84;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Medium medium86 = medium49.setAuditAttributes(auditAttributes84);
        putDetectioncondition20.AuditAttributes = auditAttributes84;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSchedule putSchedule88 = putSchedule13.setAuditAttributes(auditAttributes84);
        resultGrade12.AuditAttributes = auditAttributes84;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivityTemplate postActivityTemplate90 = postActivityTemplate7.setAuditAttributes(auditAttributes84);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity quantity91 = postActivityTemplate90.Depth;
        java.lang.Object obj92 = postActivityTemplate90.getResponseType();
        java.lang.String str93 = postActivityTemplate90.Comment;
        org.junit.Assert.assertNull(quantity1);
        org.junit.Assert.assertNotNull(postActivityTemplate3);
        org.junit.Assert.assertNotNull(postActivityTemplate5);
        org.junit.Assert.assertNotNull(postActivityTemplate7);
        org.junit.Assert.assertNotNull(resultGrade10);
        org.junit.Assert.assertNotNull(resultGrade12);
        org.junit.Assert.assertNull(int14);
        org.junit.Assert.assertTrue("'" + recurrenceType15 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.RecurrenceType.BI_WEEKLY + "'", recurrenceType15.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.RecurrenceType.BI_WEEKLY));
        org.junit.Assert.assertNotNull(putSchedule16);
        org.junit.Assert.assertNull(auditAttributes18);
        org.junit.Assert.assertNotNull(putDetectioncondition20);
        org.junit.Assert.assertNotNull(postActivity27);
        org.junit.Assert.assertNull(activityType28);
        org.junit.Assert.assertNull(labInstructionTemplateList35);
        org.junit.Assert.assertNotNull(specimenTemplate38);
        org.junit.Assert.assertNull(labInstructionTemplateList41);
        org.junit.Assert.assertNotNull(specimenTemplateArray42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(postFieldVisitActivityWithTemplate45);
        org.junit.Assert.assertNotNull(postFieldVisitActivityWithTemplate47);
        org.junit.Assert.assertNotNull(postActivity48);
        org.junit.Assert.assertNull(analyticalGroupType54);
        org.junit.Assert.assertNull(analysisMethod59);
        org.junit.Assert.assertNull(analysisMethod61);
        org.junit.Assert.assertNull(analysisMethod62);
        org.junit.Assert.assertNull(analysisMethod64);
        org.junit.Assert.assertNull(analysisMethod65);
        org.junit.Assert.assertNull(str68);
        org.junit.Assert.assertNull(analysisMethod70);
        org.junit.Assert.assertNull(analysisMethod71);
        org.junit.Assert.assertNull(analysisMethod73);
        org.junit.Assert.assertNull(analysisMethod75);
        org.junit.Assert.assertNull(analysisMethod76);
        org.junit.Assert.assertNotNull(analyticalGroupItemArray79);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
        org.junit.Assert.assertNotNull(analyticalGroup82);
        org.junit.Assert.assertNotNull(medium86);
        org.junit.Assert.assertNotNull(putSchedule88);
        org.junit.Assert.assertNotNull(postActivityTemplate90);
        org.junit.Assert.assertNull(quantity91);
        org.junit.Assert.assertNotNull(obj92);
        org.junit.Assert.assertEquals(obj92.toString(), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$ActivityTemplate");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj92), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$ActivityTemplate");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj92), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$ActivityTemplate");
        org.junit.Assert.assertNull(str93);
    }

    @Test
    public void test24184() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest48.test24184");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLabReport postLabReport0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLabReport();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFieldVisitActivityWithTemplate postFieldVisitActivityWithTemplate1 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFieldVisitActivityWithTemplate();
        java.lang.String str2 = postFieldVisitActivityWithTemplate1.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFieldVisitActivityWithTemplate postFieldVisitActivityWithTemplate4 = postFieldVisitActivityWithTemplate1.setCustomId("'.'SSSSSSS");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedFieldResult plannedFieldResult5 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedFieldResult();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes6 = plannedFieldResult5.AuditAttributes;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails7 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails9 = labResultDetails7.setAnalysisComment("/AQUARIUS/Acquisition/v2");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes10 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails11 = labResultDetails9.setAuditAttributes(auditAttributes10);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedFieldResult plannedFieldResult12 = plannedFieldResult5.setAuditAttributes(auditAttributes10);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroup analyticalGroup13 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroup();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupType analyticalGroupType14 = analyticalGroup13.getType();
        analyticalGroup13.Name = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSSSSSZZZZZ";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroup analyticalGroup17 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroup();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem analyticalGroupItem18 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod19 = analyticalGroupItem18.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem analyticalGroupItem20 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod21 = analyticalGroupItem20.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod22 = analyticalGroupItem20.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem analyticalGroupItem23 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod24 = analyticalGroupItem23.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod25 = analyticalGroupItem23.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod26 = null;
        analyticalGroupItem23.AnalysisMethod = analysisMethod26;
        java.lang.String str28 = analyticalGroupItem23.getHoldingTime();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem analyticalGroupItem29 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod30 = analyticalGroupItem29.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod31 = analyticalGroupItem29.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem analyticalGroupItem32 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod33 = analyticalGroupItem32.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem analyticalGroupItem34 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod35 = analyticalGroupItem34.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod36 = analyticalGroupItem34.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod37 = null;
        analyticalGroupItem34.AnalysisMethod = analysisMethod37;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem[] analyticalGroupItemArray39 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem[] { analyticalGroupItem18, analyticalGroupItem20, analyticalGroupItem23, analyticalGroupItem29, analyticalGroupItem32, analyticalGroupItem34 };
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem> analyticalGroupItemList40 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem>();
        boolean boolean41 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem>) analyticalGroupItemList40, analyticalGroupItemArray39);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroup analyticalGroup42 = analyticalGroup17.setAnalyticalGroupItems((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem>) analyticalGroupItemList40);
        analyticalGroup13.AnalyticalGroupItems = analyticalGroupItemList40;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes44 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes();
        analyticalGroup13.AuditAttributes = auditAttributes44;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedFieldResult plannedFieldResult46 = plannedFieldResult12.setAuditAttributes(auditAttributes44);
        postFieldVisitActivityWithTemplate4.AuditAttributes = auditAttributes44;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLabReport postLabReport48 = postLabReport0.setAuditAttributes(auditAttributes44);
        java.time.OffsetDateTime offsetDateTime49 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLabReport postLabReport50 = postLabReport0.setDateReceived(offsetDateTime49);
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple> importHistoryEventSimpleList51 = postLabReport50.getImportHistoryEventSimples();
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment> domainObjectAttachmentList52 = postLabReport50.getAttachments();
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple> importHistoryEventSimpleList53 = postLabReport50.ImportHistoryEventSimples;
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNotNull(postFieldVisitActivityWithTemplate4);
        org.junit.Assert.assertNull(auditAttributes6);
        org.junit.Assert.assertNotNull(labResultDetails9);
        org.junit.Assert.assertNotNull(labResultDetails11);
        org.junit.Assert.assertNotNull(plannedFieldResult12);
        org.junit.Assert.assertNull(analyticalGroupType14);
        org.junit.Assert.assertNull(analysisMethod19);
        org.junit.Assert.assertNull(analysisMethod21);
        org.junit.Assert.assertNull(analysisMethod22);
        org.junit.Assert.assertNull(analysisMethod24);
        org.junit.Assert.assertNull(analysisMethod25);
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertNull(analysisMethod30);
        org.junit.Assert.assertNull(analysisMethod31);
        org.junit.Assert.assertNull(analysisMethod33);
        org.junit.Assert.assertNull(analysisMethod35);
        org.junit.Assert.assertNull(analysisMethod36);
        org.junit.Assert.assertNotNull(analyticalGroupItemArray39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(analyticalGroup42);
        org.junit.Assert.assertNotNull(plannedFieldResult46);
        org.junit.Assert.assertNotNull(postLabReport48);
        org.junit.Assert.assertNotNull(postLabReport50);
        org.junit.Assert.assertNull(importHistoryEventSimpleList51);
        org.junit.Assert.assertNull(domainObjectAttachmentList52);
        org.junit.Assert.assertNull(importHistoryEventSimpleList53);
    }

    @Test
    public void test24185() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest48.test24185");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricConfiguration metricConfiguration0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricConfiguration();
        java.lang.String str1 = metricConfiguration0.getId();
        metricConfiguration0.CustomId = "/AQUARIUS/Acquisition/v2";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty observedProperty4 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricConfiguration metricConfiguration5 = metricConfiguration0.setObservedProperty(observedProperty4);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricRange metricRange6 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricRange();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricRange[] metricRangeArray7 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricRange[] { metricRange6 };
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricRange> metricRangeList8 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricRange>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricRange>) metricRangeList8, metricRangeArray7);
        metricConfiguration5.MetricRanges = metricRangeList8;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricConfiguration metricConfiguration12 = metricConfiguration5.setUseScoreRanges((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Unit unit13 = metricConfiguration12.getUnit();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(metricConfiguration5);
        org.junit.Assert.assertNotNull(metricRangeArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(metricConfiguration12);
        org.junit.Assert.assertNull(unit13);
    }

    @Test
    public void test24186() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest48.test24186");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLabReport postLabReport0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLabReport();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFieldVisitActivityWithTemplate postFieldVisitActivityWithTemplate1 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFieldVisitActivityWithTemplate();
        java.lang.String str2 = postFieldVisitActivityWithTemplate1.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFieldVisitActivityWithTemplate postFieldVisitActivityWithTemplate4 = postFieldVisitActivityWithTemplate1.setCustomId("'.'SSSSSSS");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedFieldResult plannedFieldResult5 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedFieldResult();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes6 = plannedFieldResult5.AuditAttributes;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails7 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails9 = labResultDetails7.setAnalysisComment("/AQUARIUS/Acquisition/v2");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes10 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails11 = labResultDetails9.setAuditAttributes(auditAttributes10);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedFieldResult plannedFieldResult12 = plannedFieldResult5.setAuditAttributes(auditAttributes10);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroup analyticalGroup13 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroup();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupType analyticalGroupType14 = analyticalGroup13.getType();
        analyticalGroup13.Name = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSSSSSZZZZZ";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroup analyticalGroup17 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroup();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem analyticalGroupItem18 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod19 = analyticalGroupItem18.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem analyticalGroupItem20 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod21 = analyticalGroupItem20.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod22 = analyticalGroupItem20.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem analyticalGroupItem23 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod24 = analyticalGroupItem23.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod25 = analyticalGroupItem23.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod26 = null;
        analyticalGroupItem23.AnalysisMethod = analysisMethod26;
        java.lang.String str28 = analyticalGroupItem23.getHoldingTime();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem analyticalGroupItem29 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod30 = analyticalGroupItem29.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod31 = analyticalGroupItem29.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem analyticalGroupItem32 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod33 = analyticalGroupItem32.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem analyticalGroupItem34 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod35 = analyticalGroupItem34.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod36 = analyticalGroupItem34.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod37 = null;
        analyticalGroupItem34.AnalysisMethod = analysisMethod37;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem[] analyticalGroupItemArray39 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem[] { analyticalGroupItem18, analyticalGroupItem20, analyticalGroupItem23, analyticalGroupItem29, analyticalGroupItem32, analyticalGroupItem34 };
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem> analyticalGroupItemList40 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem>();
        boolean boolean41 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem>) analyticalGroupItemList40, analyticalGroupItemArray39);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroup analyticalGroup42 = analyticalGroup17.setAnalyticalGroupItems((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem>) analyticalGroupItemList40);
        analyticalGroup13.AnalyticalGroupItems = analyticalGroupItemList40;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes44 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes();
        analyticalGroup13.AuditAttributes = auditAttributes44;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedFieldResult plannedFieldResult46 = plannedFieldResult12.setAuditAttributes(auditAttributes44);
        postFieldVisitActivityWithTemplate4.AuditAttributes = auditAttributes44;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLabReport postLabReport48 = postLabReport0.setAuditAttributes(auditAttributes44);
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple> importHistoryEventSimpleList49 = postLabReport0.getImportHistoryEventSimples();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLabReport postLabReport51 = postLabReport0.setId("yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSSSSSZZZZZ");
        java.lang.String str52 = postLabReport0.getCaseNarrative();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails53 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails55 = labResultDetails53.setAnalysisComment("/AQUARIUS/Acquisition/v2");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes56 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails57 = labResultDetails55.setAuditAttributes(auditAttributes56);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Laboratory laboratory58 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Laboratory();
        laboratory58.Id = "MaxInstant";
        java.lang.String str61 = laboratory58.PhoneNumber;
        java.lang.String str62 = laboratory58.getPointOfContact();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails63 = labResultDetails55.setLaboratory(laboratory58);
        postLabReport0.Laboratory = laboratory58;
        java.lang.String str65 = laboratory58.Address;
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNotNull(postFieldVisitActivityWithTemplate4);
        org.junit.Assert.assertNull(auditAttributes6);
        org.junit.Assert.assertNotNull(labResultDetails9);
        org.junit.Assert.assertNotNull(labResultDetails11);
        org.junit.Assert.assertNotNull(plannedFieldResult12);
        org.junit.Assert.assertNull(analyticalGroupType14);
        org.junit.Assert.assertNull(analysisMethod19);
        org.junit.Assert.assertNull(analysisMethod21);
        org.junit.Assert.assertNull(analysisMethod22);
        org.junit.Assert.assertNull(analysisMethod24);
        org.junit.Assert.assertNull(analysisMethod25);
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertNull(analysisMethod30);
        org.junit.Assert.assertNull(analysisMethod31);
        org.junit.Assert.assertNull(analysisMethod33);
        org.junit.Assert.assertNull(analysisMethod35);
        org.junit.Assert.assertNull(analysisMethod36);
        org.junit.Assert.assertNotNull(analyticalGroupItemArray39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(analyticalGroup42);
        org.junit.Assert.assertNotNull(plannedFieldResult46);
        org.junit.Assert.assertNotNull(postLabReport48);
        org.junit.Assert.assertNull(importHistoryEventSimpleList49);
        org.junit.Assert.assertNotNull(postLabReport51);
        org.junit.Assert.assertNull(str52);
        org.junit.Assert.assertNotNull(labResultDetails55);
        org.junit.Assert.assertNotNull(labResultDetails57);
        org.junit.Assert.assertNull(str61);
        org.junit.Assert.assertNull(str62);
        org.junit.Assert.assertNotNull(labResultDetails63);
        org.junit.Assert.assertNull(str65);
    }

    @Test
    public void test24187() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest48.test24187");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ShippingContainer shippingContainer0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ShippingContainer();
        java.lang.String str1 = shippingContainer0.getTrackingId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity postActivity2 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity();
        postActivity2.LoggerFileName = "hi!";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity postActivity6 = postActivity2.setCustomId("");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes7 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity postActivity8 = postActivity6.setAuditAttributes(auditAttributes7);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ShippingContainer shippingContainer9 = shippingContainer0.setAuditAttributes(auditAttributes7);
        java.lang.String str10 = shippingContainer9.getCustomId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ShippingContainer shippingContainer12 = shippingContainer9.setTrackingId("MaxDuration");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes13 = shippingContainer9.getAuditAttributes();
        java.time.OffsetDateTime offsetDateTime14 = auditAttributes13.CreationTime;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(postActivity6);
        org.junit.Assert.assertNotNull(postActivity8);
        org.junit.Assert.assertNotNull(shippingContainer9);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNotNull(shippingContainer12);
        org.junit.Assert.assertNotNull(auditAttributes13);
        org.junit.Assert.assertNull(offsetDateTime14);
    }

    @Test
    public void test24188() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest48.test24188");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetActivities getActivities0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetActivities();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse1 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary2 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary4 = dischargeSummary2.setPublish((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse5 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant6 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse7 = locationDescriptionListServiceResponse5.setNextToken(instant6);
        dischargeSummary2.MeasurementTime = instant6;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse9 = locationDescriptionListServiceResponse1.setNextToken(instant6);
        java.time.Instant instant10 = locationDescriptionListServiceResponse1.getNextToken();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetActivities getActivities11 = getActivities0.setToStartTime(instant10);
        java.util.List<java.lang.String> strList12 = getActivities11.ActivityTypes;
        getActivities11.Cursor = "multipart/form-data; boundary=****bbcf5f9e-6ccf-4b63-91ab-6e645caf02af****";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetActivities getActivities16 = getActivities11.setFieldVisitId("/AQUARIUS/Acquisition/v2");
        java.lang.String str17 = getActivities16.Sort;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Processor processor18 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Processor();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostTag postTag19 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostTag();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_20 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray23 = new java.lang.String[] { "", "" };
        java.util.ArrayList<java.lang.String> strList24 = new java.util.ArrayList<java.lang.String>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList24, strArray23);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_26 = getObservationsV2_20.setDataClassifications((java.util.List<java.lang.String>) strList24);
        postTag19.PickListValues = strList24;
        java.util.ArrayList<java.lang.String> strList28 = postTag19.PickListValues;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Processor processor29 = processor18.setInputTimeSeriesUniqueIds(strList28);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Processor processor31 = processor29.setDescription("/AQUARIUS/Acquisition/v2");
        java.util.ArrayList<java.lang.String> strList32 = processor31.InputTimeSeriesUniqueIds;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetActivities getActivities33 = getActivities16.setActivityTemplateId((java.util.List<java.lang.String>) strList32);
        getActivities33.Sort = "hi!";
        java.util.List<java.lang.String> strList36 = getActivities33.getIds();
        org.junit.Assert.assertNotNull(dischargeSummary4);
        org.junit.Assert.assertNotNull(instant6);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse7);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse9);
        org.junit.Assert.assertNotNull(instant10);
        org.junit.Assert.assertNotNull(getActivities11);
        org.junit.Assert.assertNull(strList12);
        org.junit.Assert.assertNotNull(getActivities16);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(getObservationsV2_26);
        org.junit.Assert.assertNotNull(strList28);
        org.junit.Assert.assertNotNull(processor29);
        org.junit.Assert.assertNotNull(processor31);
        org.junit.Assert.assertNotNull(strList32);
        org.junit.Assert.assertNotNull(getActivities33);
        org.junit.Assert.assertNull(strList36);
    }

    @Test
    public void test24189() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest48.test24189");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PublicKey publicKey0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PublicKey();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PublicKey publicKey2 = publicKey0.setKeySize((java.lang.Integer) 10);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PublicKey publicKey4 = publicKey0.setXml("/AQUARIUS/Provisioning/v1");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PublicKey publicKey6 = publicKey0.setKeySize((java.lang.Integer) 10);
        publicKey0.Xml = "multipart/form-data; boundary=****895246ac-50fd-4284-9cd4-5cdd869d7100****";
        org.junit.Assert.assertNotNull(publicKey2);
        org.junit.Assert.assertNotNull(publicKey4);
        org.junit.Assert.assertNotNull(publicKey6);
    }

    @Test
    public void test24190() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest48.test24190");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AccessGroup accessGroup0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AccessGroup();
        java.lang.String str1 = accessGroup0.Name;
        java.lang.String str2 = accessGroup0.getDescription();
        java.lang.String str3 = accessGroup0.getId();
        java.lang.String str4 = accessGroup0.getName();
        java.lang.String str5 = accessGroup0.getName();
        java.lang.String str6 = accessGroup0.Description;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSamplingLocation putSamplingLocation7 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSamplingLocation();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSamplingLocation putSamplingLocation9 = putSamplingLocation7.setCustomId("https");
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttribute> extendedAttributeList10 = putSamplingLocation7.ExtendedAttributes;
        java.lang.String str11 = putSamplingLocation7.Description;
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple> standardSimpleList12 = putSamplingLocation7.Standards;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSamplingLocation putSamplingLocation14 = putSamplingLocation7.setId("multipart/form-data; boundary=****bbcf5f9e-6ccf-4b63-91ab-6e645caf02af****");
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment> domainObjectAttachmentList15 = putSamplingLocation14.getAttachments();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostSamplingLocation postSamplingLocation16 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostSamplingLocation();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostSamplingLocation postSamplingLocation18 = postSamplingLocation16.setCustomId("hi!");
        java.lang.String str19 = postSamplingLocation18.getName();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostSamplingLocation postSamplingLocation20 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostSamplingLocation();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostSamplingLocation postSamplingLocation22 = postSamplingLocation20.setCustomId("hi!");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Address address23 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostSamplingLocation postSamplingLocation24 = postSamplingLocation20.setAddress(address23);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity quantity25 = postSamplingLocation24.getElevation();
        postSamplingLocation24.Longitude = "POST";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes28 = postSamplingLocation24.getAuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostAccessGroup postAccessGroup29 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostAccessGroup();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationGroup[] samplingLocationGroupArray30 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationGroup[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationGroup> samplingLocationGroupList31 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationGroup>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationGroup>) samplingLocationGroupList31, samplingLocationGroupArray30);
        postAccessGroup29.SamplingLocationGroups = samplingLocationGroupList31;
        postSamplingLocation24.SamplingLocationGroups = samplingLocationGroupList31;
        postSamplingLocation18.SamplingLocationGroups = samplingLocationGroupList31;
        putSamplingLocation14.SamplingLocationGroups = samplingLocationGroupList31;
        accessGroup0.SamplingLocationGroups = samplingLocationGroupList31;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AccessGroup accessGroup39 = accessGroup0.setDescription("multipart/form-data; boundary=****3dee2050-7d6c-400f-bd51-383a1324f5dd****");
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNotNull(putSamplingLocation9);
        org.junit.Assert.assertNull(extendedAttributeList10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNull(standardSimpleList12);
        org.junit.Assert.assertNotNull(putSamplingLocation14);
        org.junit.Assert.assertNull(domainObjectAttachmentList15);
        org.junit.Assert.assertNotNull(postSamplingLocation18);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertNotNull(postSamplingLocation22);
        org.junit.Assert.assertNotNull(postSamplingLocation24);
        org.junit.Assert.assertNull(quantity25);
        org.junit.Assert.assertNull(auditAttributes28);
        org.junit.Assert.assertNotNull(samplingLocationGroupArray30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(accessGroup39);
    }

    @Test
    public void test24191() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest48.test24191");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray3 = new java.lang.String[] { "", "" };
        java.util.ArrayList<java.lang.String> strList4 = new java.util.ArrayList<java.lang.String>();
        boolean boolean5 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList4, strArray3);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_6 = getObservationsV2_0.setDataClassifications((java.util.List<java.lang.String>) strList4);
        getObservationsV2_6.DepthUnitCustomId = "hi!";
        java.lang.String str9 = getObservationsV2_6.DepthUnitId;
        java.util.List<java.lang.String> strList10 = getObservationsV2_6.LabResultLaboratoryIds;
        getObservationsV2_6.MaxNumericResultValue = (-1.0d);
        java.util.List<java.lang.String> strList13 = getObservationsV2_6.getResultStatuses();
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(getObservationsV2_6);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNull(strList10);
        org.junit.Assert.assertNull(strList13);
    }

    @Test
    public void test24192() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest48.test24192");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutFieldVisit putFieldVisit0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutFieldVisit();
        putFieldVisit0.Notes = "MinDuration";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ProjectSimple projectSimple3 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutFieldVisit putFieldVisit4 = putFieldVisit0.setProject(projectSimple3);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Schedule schedule5 = putFieldVisit0.getSchedule();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlan samplingPlan6 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlan();
        samplingPlan6.SamplingLocationGroupSelectionTypeRandomCount = 0;
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivity> samplingPlanPlannedActivityList9 = samplingPlan6.PlannedActivities;
        java.lang.String str10 = samplingPlan6.CustomId;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutFieldVisit putFieldVisit11 = putFieldVisit0.setSamplingPlan(samplingPlan6);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ProjectSimple projectSimple12 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutFieldVisit putFieldVisit13 = putFieldVisit11.setProject(projectSimple12);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutFieldVisit putFieldVisit14 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutFieldVisit();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity[] plannedActivityArray15 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity> plannedActivityList16 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity>) plannedActivityList16, plannedActivityArray15);
        putFieldVisit14.PlannedActivities = plannedActivityList16;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment19 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment();
        java.lang.String str20 = domainObjectAttachment19.getId();
        java.lang.String str21 = domainObjectAttachment19.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Attachment attachment22 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment23 = domainObjectAttachment19.setAttachment(attachment22);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment24 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment();
        java.lang.String str25 = domainObjectAttachment24.getId();
        java.lang.String str26 = domainObjectAttachment24.getId();
        domainObjectAttachment24.Id = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment30 = domainObjectAttachment24.setId("hi!");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment31 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment();
        java.lang.String str32 = domainObjectAttachment31.getId();
        java.lang.String str33 = domainObjectAttachment31.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Attachment attachment34 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment35 = domainObjectAttachment31.setAttachment(attachment34);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment36 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment();
        java.lang.String str37 = domainObjectAttachment36.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment38 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment();
        java.lang.String str39 = domainObjectAttachment38.getId();
        java.lang.String str40 = domainObjectAttachment38.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Attachment attachment41 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment42 = domainObjectAttachment38.setAttachment(attachment41);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment43 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment();
        java.lang.String str44 = domainObjectAttachment43.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment[] domainObjectAttachmentArray45 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment[] { domainObjectAttachment19, domainObjectAttachment24, domainObjectAttachment31, domainObjectAttachment36, domainObjectAttachment38, domainObjectAttachment43 };
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment> domainObjectAttachmentList46 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment>();
        boolean boolean47 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment>) domainObjectAttachmentList46, domainObjectAttachmentArray45);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutFieldVisit putFieldVisit48 = putFieldVisit14.setAttachments((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment>) domainObjectAttachmentList46);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlan samplingPlan49 = putFieldVisit14.getSamplingPlan();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.FieldTripSimple fieldTripSimple50 = putFieldVisit14.getFieldTrip();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Schedule schedule51 = putFieldVisit14.Schedule;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocation samplingLocation52 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocation();
        java.lang.String str53 = samplingLocation52.Description;
        java.lang.String str54 = samplingLocation52.VerticalCollectionMethod;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocation samplingLocation56 = samplingLocation52.setVerticalCollectionMethod("hi!");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutFieldVisit putFieldVisit57 = putFieldVisit14.setSamplingLocation(samplingLocation52);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Address address58 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocation samplingLocation59 = samplingLocation52.setAddress(address58);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutFieldVisit putFieldVisit60 = putFieldVisit11.setSamplingLocation(samplingLocation52);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Schedule schedule61 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutFieldVisit putFieldVisit62 = putFieldVisit11.setSchedule(schedule61);
        org.junit.Assert.assertNotNull(putFieldVisit4);
        org.junit.Assert.assertNull(schedule5);
        org.junit.Assert.assertNull(samplingPlanPlannedActivityList9);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNotNull(putFieldVisit11);
        org.junit.Assert.assertNotNull(putFieldVisit13);
        org.junit.Assert.assertNotNull(plannedActivityArray15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNotNull(domainObjectAttachment23);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertNotNull(domainObjectAttachment30);
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertNotNull(domainObjectAttachment35);
        org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertNull(str40);
        org.junit.Assert.assertNotNull(domainObjectAttachment42);
        org.junit.Assert.assertNull(str44);
        org.junit.Assert.assertNotNull(domainObjectAttachmentArray45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(putFieldVisit48);
        org.junit.Assert.assertNull(samplingPlan49);
        org.junit.Assert.assertNull(fieldTripSimple50);
        org.junit.Assert.assertNull(schedule51);
        org.junit.Assert.assertNull(str53);
        org.junit.Assert.assertNull(str54);
        org.junit.Assert.assertNotNull(samplingLocation56);
        org.junit.Assert.assertNotNull(putFieldVisit57);
        org.junit.Assert.assertNotNull(samplingLocation59);
        org.junit.Assert.assertNotNull(putFieldVisit60);
        org.junit.Assert.assertNotNull(putFieldVisit62);
    }

    @Test
    public void test24193() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest48.test24193");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitReading fieldVisitReading0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitReading();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitReading fieldVisitReading2 = fieldVisitReading0.setUseLocationDatumAsReference((java.lang.Boolean) true);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitReading fieldVisitReading4 = fieldVisitReading2.setParameter("0001-01-01T00:00:00.000Z");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitReadingType fieldVisitReadingType5 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitReadingType.RoutineBefore;
        fieldVisitReading2.ReadingType = fieldVisitReadingType5;
        java.util.ArrayList<java.lang.String> strList7 = fieldVisitReading2.getQualifiers();
        java.lang.Integer int8 = fieldVisitReading2.getGradeCode();
        java.lang.String str9 = fieldVisitReading2.getControlCondition();
        java.lang.String str10 = fieldVisitReading2.FieldVisitIdentifier;
        java.lang.Integer int11 = fieldVisitReading2.GradeCode;
        java.lang.String str12 = fieldVisitReading2.getReferencePointUniqueId();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Uncertainty uncertainty13 = fieldVisitReading2.Uncertainty;
        org.junit.Assert.assertNotNull(fieldVisitReading2);
        org.junit.Assert.assertNotNull(fieldVisitReading4);
        org.junit.Assert.assertTrue("'" + fieldVisitReadingType5 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitReadingType.RoutineBefore + "'", fieldVisitReadingType5.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitReadingType.RoutineBefore));
        org.junit.Assert.assertNull(strList7);
        org.junit.Assert.assertNull(int8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNull(int11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNull(uncertainty13);
    }

    @Test
    public void test24194() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest48.test24194");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeTransaction metadataChangeTransaction0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeTransaction();
        java.util.List<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.GapToleranceOperation> gapToleranceOperationList1 = metadataChangeTransaction0.GapToleranceOperations;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.NoteOperation noteOperation2 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.NoteOperation();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeOperationType metadataChangeOperationType3 = noteOperation2.OperationType;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.NoteOperation noteOperation4 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.NoteOperation();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeOperationType metadataChangeOperationType5 = noteOperation4.OperationType;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.NoteOperation[] noteOperationArray6 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.NoteOperation[] { noteOperation2, noteOperation4 };
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.NoteOperation> noteOperationList7 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.NoteOperation>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.NoteOperation>) noteOperationList7, noteOperationArray6);
        metadataChangeTransaction0.NoteOperations = noteOperationList7;
        java.util.List<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MethodOperation> methodOperationList10 = metadataChangeTransaction0.getMethodOperations();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeContentType metadataChangeContentType11 = metadataChangeTransaction0.ContentType;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeTransaction metadataChangeTransaction13 = metadataChangeTransaction0.setAppliedByUser("MinInstant");
        org.junit.Assert.assertNull(gapToleranceOperationList1);
        org.junit.Assert.assertNull(metadataChangeOperationType3);
        org.junit.Assert.assertNull(metadataChangeOperationType5);
        org.junit.Assert.assertNotNull(noteOperationArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNull(methodOperationList10);
        org.junit.Assert.assertNull(metadataChangeContentType11);
        org.junit.Assert.assertNotNull(metadataChangeTransaction13);
    }

    @Test
    public void test24195() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest48.test24195");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutTimeSeries putTimeSeries0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutTimeSeries();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutTimeSeries putTimeSeries2 = putTimeSeries0.setDescription("hi!");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutTimeSeries putTimeSeries4 = putTimeSeries0.setDescription("");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutTimeSeries putTimeSeries6 = putTimeSeries0.setTimeSeriesUniqueId("yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSSSSSZZZZZ");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutTimeSeries putTimeSeries8 = putTimeSeries6.setPublish((java.lang.Boolean) false);
        org.junit.Assert.assertNotNull(putTimeSeries2);
        org.junit.Assert.assertNotNull(putTimeSeries4);
        org.junit.Assert.assertNotNull(putTimeSeries6);
        org.junit.Assert.assertNotNull(putTimeSeries8);
    }

    @Test
    public void test24196() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest48.test24196");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutExtendedAttribute putExtendedAttribute0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutExtendedAttribute();
        java.lang.String str1 = putExtendedAttribute0.Description;
        java.lang.Boolean boolean2 = putExtendedAttribute0.getMandatory();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricConfiguration metricConfiguration3 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricConfiguration();
        java.lang.String str4 = metricConfiguration3.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservedProperty postObservedProperty5 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservedProperty();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservedProperty postObservedProperty7 = postObservedProperty5.setName("/AQUARIUS/Acquisition/v2://9999-12-31T23:59:59.999Z");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisType analysisType8 = postObservedProperty5.getAnalysisType();
        postObservedProperty5.CustomId = "MaxInstant";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity quantity11 = postObservedProperty5.getLowerLimit();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLabAnalysisMethod postLabAnalysisMethod12 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLabAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes13 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLabAnalysisMethod postLabAnalysisMethod14 = postLabAnalysisMethod12.setAuditAttributes(auditAttributes13);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty[] observedPropertyArray15 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty> observedPropertyList16 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty>) observedPropertyList16, observedPropertyArray15);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLabAnalysisMethod postLabAnalysisMethod18 = postLabAnalysisMethod14.setObservedProperties((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty>) observedPropertyList16);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroup analyticalGroup19 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroup();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupType analyticalGroupType20 = analyticalGroup19.getType();
        analyticalGroup19.Name = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSSSSSZZZZZ";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroup analyticalGroup23 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroup();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem analyticalGroupItem24 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod25 = analyticalGroupItem24.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem analyticalGroupItem26 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod27 = analyticalGroupItem26.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod28 = analyticalGroupItem26.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem analyticalGroupItem29 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod30 = analyticalGroupItem29.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod31 = analyticalGroupItem29.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod32 = null;
        analyticalGroupItem29.AnalysisMethod = analysisMethod32;
        java.lang.String str34 = analyticalGroupItem29.getHoldingTime();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem analyticalGroupItem35 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod36 = analyticalGroupItem35.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod37 = analyticalGroupItem35.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem analyticalGroupItem38 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod39 = analyticalGroupItem38.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem analyticalGroupItem40 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod41 = analyticalGroupItem40.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod42 = analyticalGroupItem40.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod43 = null;
        analyticalGroupItem40.AnalysisMethod = analysisMethod43;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem[] analyticalGroupItemArray45 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem[] { analyticalGroupItem24, analyticalGroupItem26, analyticalGroupItem29, analyticalGroupItem35, analyticalGroupItem38, analyticalGroupItem40 };
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem> analyticalGroupItemList46 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem>();
        boolean boolean47 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem>) analyticalGroupItemList46, analyticalGroupItemArray45);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroup analyticalGroup48 = analyticalGroup23.setAnalyticalGroupItems((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem>) analyticalGroupItemList46);
        analyticalGroup19.AnalyticalGroupItems = analyticalGroupItemList46;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes50 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes();
        analyticalGroup19.AuditAttributes = auditAttributes50;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLabAnalysisMethod postLabAnalysisMethod52 = postLabAnalysisMethod18.setAuditAttributes(auditAttributes50);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservedProperty postObservedProperty53 = postObservedProperty5.setAuditAttributes(auditAttributes50);
        metricConfiguration3.AuditAttributes = auditAttributes50;
        putExtendedAttribute0.AuditAttributes = auditAttributes50;
        putExtendedAttribute0.CustomId = "http://MaxDurationhttp/json/reply/Integer";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DataType dataType58 = putExtendedAttribute0.getDataType();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(boolean2);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNotNull(postObservedProperty7);
        org.junit.Assert.assertNull(analysisType8);
        org.junit.Assert.assertNull(quantity11);
        org.junit.Assert.assertNotNull(postLabAnalysisMethod14);
        org.junit.Assert.assertNotNull(observedPropertyArray15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(postLabAnalysisMethod18);
        org.junit.Assert.assertNull(analyticalGroupType20);
        org.junit.Assert.assertNull(analysisMethod25);
        org.junit.Assert.assertNull(analysisMethod27);
        org.junit.Assert.assertNull(analysisMethod28);
        org.junit.Assert.assertNull(analysisMethod30);
        org.junit.Assert.assertNull(analysisMethod31);
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertNull(analysisMethod36);
        org.junit.Assert.assertNull(analysisMethod37);
        org.junit.Assert.assertNull(analysisMethod39);
        org.junit.Assert.assertNull(analysisMethod41);
        org.junit.Assert.assertNull(analysisMethod42);
        org.junit.Assert.assertNotNull(analyticalGroupItemArray45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(analyticalGroup48);
        org.junit.Assert.assertNotNull(postLabAnalysisMethod52);
        org.junit.Assert.assertNotNull(postObservedProperty53);
        org.junit.Assert.assertNull(dataType58);
    }

    @Test
    public void test24197() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest48.test24197");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ActivityWithDetails activityWithDetails0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ActivityWithDetails();
        activityWithDetails0.LoggerFileName = "'.'SSSSSSS";
        java.time.OffsetDateTime offsetDateTime3 = activityWithDetails0.getEndTime();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocation samplingLocation4 = activityWithDetails0.getSamplingLocation();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocation samplingLocation5 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocation();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricConfiguration metricConfiguration6 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricConfiguration();
        java.lang.String str7 = metricConfiguration6.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty observedProperty8 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty();
        observedProperty8.CasNumber = "MinDuration";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricConfiguration metricConfiguration11 = metricConfiguration6.setObservedProperty(observedProperty8);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultType resultType12 = observedProperty8.ResultType;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservedProperty postObservedProperty13 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservedProperty();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UnitGroup unitGroup14 = postObservedProperty13.UnitGroup;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity quantity15 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Unit unit16 = null;
        quantity15.Unit = unit16;
        postObservedProperty13.LowerLimit = quantity15;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity quantity19 = postObservedProperty13.LowerLimit;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Unit unit20 = quantity19.Unit;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty observedProperty21 = observedProperty8.setUpperLimit(quantity19);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocation samplingLocation22 = samplingLocation5.setElevation(quantity19);
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment> domainObjectAttachmentList23 = samplingLocation22.getAttachments();
        java.lang.String str24 = samplingLocation22.getHorizontalCollectionMethod();
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple> importHistoryEventSimpleList25 = samplingLocation22.ImportHistoryEventSimples;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity quantity26 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Unit unit27 = null;
        quantity26.Unit = unit27;
        samplingLocation22.Elevation = quantity26;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ActivityWithDetails activityWithDetails30 = activityWithDetails0.setSamplingLocation(samplingLocation22);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ActivityWithDetails activityWithDetails32 = activityWithDetails0.setSourceActivityId("'.'SSSSSSS");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.IndexConfiguration indexConfiguration33 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.IndexConfiguration();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Unit unit34 = indexConfiguration33.Unit;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes35 = indexConfiguration33.AuditAttributes;
        activityWithDetails0.IndexConfiguration = indexConfiguration33;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes37 = activityWithDetails0.AuditAttributes;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ActivityWithDetailsType activityWithDetailsType38 = activityWithDetails0.getType();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ActivityWithDetails activityWithDetails40 = activityWithDetails0.setCustomId("multipart/form-data; boundary=****44f0772e-c3ca-4316-8e2a-61ec8540d661****");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ActivityWithDetails activityWithDetails42 = activityWithDetails0.setSourceActivityId("2021.4.62.0");
        org.junit.Assert.assertNull(offsetDateTime3);
        org.junit.Assert.assertNull(samplingLocation4);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(metricConfiguration11);
        org.junit.Assert.assertNull(resultType12);
        org.junit.Assert.assertNull(unitGroup14);
        org.junit.Assert.assertNotNull(quantity19);
        org.junit.Assert.assertNull(unit20);
        org.junit.Assert.assertNotNull(observedProperty21);
        org.junit.Assert.assertNotNull(samplingLocation22);
        org.junit.Assert.assertNull(domainObjectAttachmentList23);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNull(importHistoryEventSimpleList25);
        org.junit.Assert.assertNotNull(activityWithDetails30);
        org.junit.Assert.assertNotNull(activityWithDetails32);
        org.junit.Assert.assertNull(unit34);
        org.junit.Assert.assertNull(auditAttributes35);
        org.junit.Assert.assertNull(auditAttributes37);
        org.junit.Assert.assertNull(activityWithDetailsType38);
        org.junit.Assert.assertNotNull(activityWithDetails40);
        org.junit.Assert.assertNotNull(activityWithDetails42);
    }

    @Test
    public void test24198() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest48.test24198");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutFieldTrip putFieldTrip0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutFieldTrip();
        java.time.OffsetDateTime offsetDateTime1 = putFieldTrip0.StartTime;
        java.lang.String str2 = putFieldTrip0.getCustomId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutFieldTrip putFieldTrip4 = putFieldTrip0.setParticipants("http://MaxDurationhttp");
        putFieldTrip0.Participants = "-PT87591240H";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutFieldTrip putFieldTrip8 = putFieldTrip0.setCustomId("multipart/form-data; boundary=****44f0772e-c3ca-4316-8e2a-61ec8540d661****");
        java.lang.String str9 = putFieldTrip0.getNotes();
        java.time.OffsetDateTime offsetDateTime10 = putFieldTrip0.EndTime;
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment> domainObjectAttachmentList11 = putFieldTrip0.Attachments;
        org.junit.Assert.assertNull(offsetDateTime1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNotNull(putFieldTrip4);
        org.junit.Assert.assertNotNull(putFieldTrip8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNull(offsetDateTime10);
        org.junit.Assert.assertNull(domainObjectAttachmentList11);
    }

    @Test
    public void test24199() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest48.test24199");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SearchResultAnalysisMethod searchResultAnalysisMethod0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SearchResultAnalysisMethod();
        java.lang.String str1 = searchResultAnalysisMethod0.Cursor;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SearchResultAnalysisMethod searchResultAnalysisMethod3 = searchResultAnalysisMethod0.setTotalCount((java.lang.Integer) (-1));
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod[] analysisMethodArray4 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod> analysisMethodList5 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod>();
        boolean boolean6 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod>) analysisMethodList5, analysisMethodArray4);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SearchResultAnalysisMethod searchResultAnalysisMethod7 = searchResultAnalysisMethod3.setDomainObjects((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod>) analysisMethodList5);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SearchResultAnalysisMethod searchResultAnalysisMethod9 = searchResultAnalysisMethod7.setCursor("multipart/form-data; boundary=****3dee2050-7d6c-400f-bd51-383a1324f5dd****");
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(searchResultAnalysisMethod3);
        org.junit.Assert.assertNotNull(analysisMethodArray4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(searchResultAnalysisMethod7);
        org.junit.Assert.assertNotNull(searchResultAnalysisMethod9);
    }

    @Test
    public void test24200() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest48.test24200");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Reading reading0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Reading();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay1 = reading0.getValue();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Reading reading3 = reading0.setParameterId("hi!");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Reading reading5 = reading3.setMonitoringMethod("'.'SSSSSSS");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay6 = reading3.getUncertainty();
        java.lang.Boolean boolean7 = reading3.UseLocationDatumAsReference;
        java.lang.String str8 = reading3.getNodeDetails();
        reading3.Publish = false;
        org.junit.Assert.assertNull(doubleWithDisplay1);
        org.junit.Assert.assertNotNull(reading3);
        org.junit.Assert.assertNotNull(reading5);
        org.junit.Assert.assertNull(doubleWithDisplay6);
        org.junit.Assert.assertNull(boolean7);
        org.junit.Assert.assertNull(str8);
    }

    @Test
    public void test24201() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest48.test24201");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportSpecimens getExportSpecimens0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportSpecimens();
        java.util.List<java.lang.String> strList1 = getExportSpecimens0.getProjectIds();
        java.util.List<java.lang.String> strList2 = getExportSpecimens0.FieldVisitId;
        java.util.List<java.lang.String> strList3 = getExportSpecimens0.ActivityTypes;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetSpecimens getSpecimens4 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetSpecimens();
        java.util.List<java.lang.String> strList5 = getSpecimens4.getActivityIds();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetSpecimens getSpecimens7 = getSpecimens4.setSort("MinDuration");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetChartDataV2 getChartDataV2_8 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetChartDataV2();
        java.lang.String str9 = getChartDataV2_8.getActivityCustomId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetChartDataV2 getChartDataV2_11 = getChartDataV2_8.setFilterId("");
        java.util.List<java.lang.String> strList12 = getChartDataV2_8.ResultGrades;
        getChartDataV2_8.MinNumericResultValue = 100.0d;
        java.lang.Double double15 = getChartDataV2_8.MaxNumericResultValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostTag postTag16 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostTag();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_17 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray20 = new java.lang.String[] { "", "" };
        java.util.ArrayList<java.lang.String> strList21 = new java.util.ArrayList<java.lang.String>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList21, strArray20);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_23 = getObservationsV2_17.setDataClassifications((java.util.List<java.lang.String>) strList21);
        postTag16.PickListValues = strList21;
        getChartDataV2_8.SamplingContextTagIds = strList21;
        getSpecimens4.ActivityTypes = strList21;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportSpecimens getExportSpecimens27 = getExportSpecimens0.setActivityIds((java.util.List<java.lang.String>) strList21);
        java.util.List<java.lang.String> strList28 = getExportSpecimens27.FieldVisitId;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportSpecimens getExportSpecimens30 = getExportSpecimens27.setCursor("http://MaxDurationhttp/json/reply/ArrayList");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.OpenIdConnectRelyingPartyConfiguration openIdConnectRelyingPartyConfiguration31 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.OpenIdConnectRelyingPartyConfiguration();
        java.lang.String str32 = openIdConnectRelyingPartyConfiguration31.getClientIdentifier();
        openIdConnectRelyingPartyConfiguration31.ClientIdentifier = "MaxDuration";
        java.lang.String str35 = openIdConnectRelyingPartyConfiguration31.IssuerIdentifier;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationType putLocationType36 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationType();
        java.lang.Object obj37 = putLocationType36.getResponseType();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ReportListServiceRequest reportListServiceRequest38 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ReportListServiceRequest();
        reportListServiceRequest38.ReportTitle = "MinDuration";
        java.lang.String str41 = reportListServiceRequest38.getLocationUniqueId();
        java.time.Instant instant42 = null;
        reportListServiceRequest38.CreatedFrom = instant42;
        java.lang.String[] strArray56 = new java.lang.String[] { "https", "", "MinDuration", "/AQUARIUS/Acquisition/v2", "hi!", "", "2021.4.62.0", "MaxInstant", "http", "MinDuration", "2021.4.62.0", "/AQUARIUS" };
        java.util.ArrayList<java.lang.String> strList57 = new java.util.ArrayList<java.lang.String>();
        boolean boolean58 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList57, strArray56);
        reportListServiceRequest38.TagValues = strList57;
        putLocationType36.ExtendedAttributeDefinitionIds = strList57;
        openIdConnectRelyingPartyConfiguration31.Scopes = strList57;
        getExportSpecimens27.Search = strList57;
        org.junit.Assert.assertNull(strList1);
        org.junit.Assert.assertNull(strList2);
        org.junit.Assert.assertNull(strList3);
        org.junit.Assert.assertNull(strList5);
        org.junit.Assert.assertNotNull(getSpecimens7);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(getChartDataV2_11);
        org.junit.Assert.assertNull(strList12);
        org.junit.Assert.assertNull(double15);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(getObservationsV2_23);
        org.junit.Assert.assertNotNull(getExportSpecimens27);
        org.junit.Assert.assertNull(strList28);
        org.junit.Assert.assertNotNull(getExportSpecimens30);
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertNotNull(obj37);
        org.junit.Assert.assertEquals(obj37.toString(), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning$LocationType");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj37), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning$LocationType");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj37), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning$LocationType");
        org.junit.Assert.assertNull(str41);
        org.junit.Assert.assertNotNull(strArray56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
    }

    @Test
    public void test24202() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest48.test24202");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Attachment attachment0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Attachment();
        attachment0.ContentType = "/AQUARIUS/Provisioning/v1";
        java.time.OffsetDateTime offsetDateTime3 = attachment0.DateTaken;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Attachment attachment5 = attachment0.setComment("");
        attachment5.Id = "MinDuration";
        attachment5.ContentType = "multipart/form-data; boundary=****c82cca4e-7755-4a00-8acf-9ac791c56995****";
        java.time.OffsetDateTime offsetDateTime10 = attachment5.DateTaken;
        org.junit.Assert.assertNull(offsetDateTime3);
        org.junit.Assert.assertNotNull(attachment5);
        org.junit.Assert.assertNull(offsetDateTime10);
    }

    @Test
    public void test24203() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest48.test24203");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VelocityObservation velocityObservation0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VelocityObservation();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DeploymentMethodType deploymentMethodType1 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DeploymentMethodType.Unknown;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VelocityObservation velocityObservation2 = velocityObservation0.setDeploymentMethod(deploymentMethodType1);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DeploymentMethodType deploymentMethodType3 = velocityObservation0.DeploymentMethod;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Vertical vertical4 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Vertical();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay5 = vertical4.SoundedDepth;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay6 = null;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Vertical vertical7 = vertical4.setSegmentDischarge(quantityWithDisplay6);
        java.lang.Boolean boolean8 = vertical4.getIsDischargeEstimated();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Vertical vertical10 = vertical4.setIsDischargeEstimated((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay11 = vertical10.SegmentDischarge;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Vertical vertical12 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Vertical();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FlowDirectionType flowDirectionType13 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FlowDirectionType.Reversed;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Vertical vertical14 = vertical12.setFlowDirection(flowDirectionType13);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VelocityObservation velocityObservation15 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VelocityObservation();
        vertical12.VelocityObservation = velocityObservation15;
        java.util.List<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VelocityDepthObservation> velocityDepthObservationList17 = velocityObservation15.getObservations();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Vertical vertical18 = vertical10.setVelocityObservation(velocityObservation15);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VelocityObservation velocityObservation19 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VelocityObservation();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DeploymentMethodType deploymentMethodType20 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DeploymentMethodType.Unknown;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VelocityObservation velocityObservation21 = velocityObservation19.setDeploymentMethod(deploymentMethodType20);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VelocityDepthObservation[] velocityDepthObservationArray22 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VelocityDepthObservation[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VelocityDepthObservation> velocityDepthObservationList23 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VelocityDepthObservation>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VelocityDepthObservation>) velocityDepthObservationList23, velocityDepthObservationArray22);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VelocityObservation velocityObservation25 = velocityObservation21.setObservations((java.util.List<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VelocityDepthObservation>) velocityDepthObservationList23);
        java.util.List<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VelocityDepthObservation> velocityDepthObservationList26 = velocityObservation25.getObservations();
        velocityObservation15.Observations = velocityDepthObservationList26;
        velocityObservation0.Observations = velocityDepthObservationList26;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VelocityObservation velocityObservation29 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VelocityObservation();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DeploymentMethodType deploymentMethodType30 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DeploymentMethodType.Unknown;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VelocityObservation velocityObservation31 = velocityObservation29.setDeploymentMethod(deploymentMethodType30);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VelocityObservation velocityObservation32 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VelocityObservation();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DeploymentMethodType deploymentMethodType33 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DeploymentMethodType.Unknown;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VelocityObservation velocityObservation34 = velocityObservation32.setDeploymentMethod(deploymentMethodType33);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VelocityDepthObservation[] velocityDepthObservationArray35 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VelocityDepthObservation[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VelocityDepthObservation> velocityDepthObservationList36 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VelocityDepthObservation>();
        boolean boolean37 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VelocityDepthObservation>) velocityDepthObservationList36, velocityDepthObservationArray35);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VelocityObservation velocityObservation38 = velocityObservation34.setObservations((java.util.List<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VelocityDepthObservation>) velocityDepthObservationList36);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VelocityObservation velocityObservation39 = velocityObservation29.setObservations((java.util.List<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VelocityDepthObservation>) velocityDepthObservationList36);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VelocityObservation velocityObservation40 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VelocityObservation();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DeploymentMethodType deploymentMethodType41 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DeploymentMethodType.Unknown;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VelocityObservation velocityObservation42 = velocityObservation40.setDeploymentMethod(deploymentMethodType41);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VelocityObservation velocityObservation43 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VelocityObservation();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DeploymentMethodType deploymentMethodType44 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DeploymentMethodType.Unknown;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VelocityObservation velocityObservation45 = velocityObservation43.setDeploymentMethod(deploymentMethodType44);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VelocityDepthObservation[] velocityDepthObservationArray46 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VelocityDepthObservation[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VelocityDepthObservation> velocityDepthObservationList47 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VelocityDepthObservation>();
        boolean boolean48 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VelocityDepthObservation>) velocityDepthObservationList47, velocityDepthObservationArray46);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VelocityObservation velocityObservation49 = velocityObservation45.setObservations((java.util.List<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VelocityDepthObservation>) velocityDepthObservationList47);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VelocityObservation velocityObservation50 = velocityObservation40.setObservations((java.util.List<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VelocityDepthObservation>) velocityDepthObservationList47);
        java.util.List<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VelocityDepthObservation> velocityDepthObservationList51 = velocityObservation50.Observations;
        velocityObservation39.Observations = velocityDepthObservationList51;
        velocityObservation0.Observations = velocityDepthObservationList51;
        org.junit.Assert.assertTrue("'" + deploymentMethodType1 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DeploymentMethodType.Unknown + "'", deploymentMethodType1.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DeploymentMethodType.Unknown));
        org.junit.Assert.assertNotNull(velocityObservation2);
        org.junit.Assert.assertTrue("'" + deploymentMethodType3 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DeploymentMethodType.Unknown + "'", deploymentMethodType3.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DeploymentMethodType.Unknown));
        org.junit.Assert.assertNull(quantityWithDisplay5);
        org.junit.Assert.assertNotNull(vertical7);
        org.junit.Assert.assertNull(boolean8);
        org.junit.Assert.assertNotNull(vertical10);
        org.junit.Assert.assertNull(quantityWithDisplay11);
        org.junit.Assert.assertTrue("'" + flowDirectionType13 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FlowDirectionType.Reversed + "'", flowDirectionType13.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FlowDirectionType.Reversed));
        org.junit.Assert.assertNotNull(vertical14);
        org.junit.Assert.assertNull(velocityDepthObservationList17);
        org.junit.Assert.assertNotNull(vertical18);
        org.junit.Assert.assertTrue("'" + deploymentMethodType20 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DeploymentMethodType.Unknown + "'", deploymentMethodType20.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DeploymentMethodType.Unknown));
        org.junit.Assert.assertNotNull(velocityObservation21);
        org.junit.Assert.assertNotNull(velocityDepthObservationArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(velocityObservation25);
        org.junit.Assert.assertNotNull(velocityDepthObservationList26);
        org.junit.Assert.assertTrue("'" + deploymentMethodType30 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DeploymentMethodType.Unknown + "'", deploymentMethodType30.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DeploymentMethodType.Unknown));
        org.junit.Assert.assertNotNull(velocityObservation31);
        org.junit.Assert.assertTrue("'" + deploymentMethodType33 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DeploymentMethodType.Unknown + "'", deploymentMethodType33.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DeploymentMethodType.Unknown));
        org.junit.Assert.assertNotNull(velocityObservation34);
        org.junit.Assert.assertNotNull(velocityDepthObservationArray35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(velocityObservation38);
        org.junit.Assert.assertNotNull(velocityObservation39);
        org.junit.Assert.assertTrue("'" + deploymentMethodType41 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DeploymentMethodType.Unknown + "'", deploymentMethodType41.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DeploymentMethodType.Unknown));
        org.junit.Assert.assertNotNull(velocityObservation42);
        org.junit.Assert.assertTrue("'" + deploymentMethodType44 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DeploymentMethodType.Unknown + "'", deploymentMethodType44.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DeploymentMethodType.Unknown));
        org.junit.Assert.assertNotNull(velocityObservation45);
        org.junit.Assert.assertNotNull(velocityDepthObservationArray46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(velocityObservation49);
        org.junit.Assert.assertNotNull(velocityObservation50);
        org.junit.Assert.assertNotNull(velocityDepthObservationList51);
    }

    @Test
    public void test24204() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest48.test24204");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationNote locationNote0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationNote();
        java.time.Instant instant1 = locationNote0.CreateTimeUtc;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeTransactionListServiceRequest metadataChangeTransactionListServiceRequest2 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeTransactionListServiceRequest();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostRecurringReport postRecurringReport3 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostRecurringReport();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary4 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        dischargeSummary4.Reviewer = "";
        java.time.Instant instant7 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        dischargeSummary4.MeasurementTime = instant7;
        postRecurringReport3.NextGenerationDate = instant7;
        java.time.Instant instant10 = postRecurringReport3.getNextGenerationDate();
        java.lang.String str11 = com.aquaticinformatics.aquarius.sdk.samples.serializers.InstantSerializer.format(instant10);
        metadataChangeTransactionListServiceRequest2.QueryFrom = instant10;
        java.time.Instant instant13 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MinValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeTransactionListServiceRequest metadataChangeTransactionListServiceRequest14 = metadataChangeTransactionListServiceRequest2.setQueryFrom(instant13);
        java.time.Instant instant15 = null;
        metadataChangeTransactionListServiceRequest14.QueryFrom = instant15;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TrendLineAnalysisServiceRequest trendLineAnalysisServiceRequest17 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TrendLineAnalysisServiceRequest();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TrendLineAnalysisType trendLineAnalysisType18 = null;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TrendLineAnalysisServiceRequest trendLineAnalysisServiceRequest19 = trendLineAnalysisServiceRequest17.setType(trendLineAnalysisType18);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TrendLineAnalysisType trendLineAnalysisType20 = trendLineAnalysisServiceRequest19.Type;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.StatisticalDateTimeOffset statisticalDateTimeOffset21 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.StatisticalDateTimeOffset();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostRecurringReport postRecurringReport22 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostRecurringReport();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary23 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        dischargeSummary23.Reviewer = "";
        java.time.Instant instant26 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        dischargeSummary23.MeasurementTime = instant26;
        postRecurringReport22.NextGenerationDate = instant26;
        java.time.Instant instant29 = postRecurringReport22.getNextGenerationDate();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.StatisticalDateTimeOffset statisticalDateTimeOffset30 = statisticalDateTimeOffset21.setDateTimeOffset(instant29);
        trendLineAnalysisServiceRequest19.QueryTo = instant29;
        metadataChangeTransactionListServiceRequest14.QueryFrom = instant29;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationNote locationNote33 = locationNote0.setCreateTimeUtc(instant29);
        java.lang.String str34 = locationNote33.getLastModifiedByUser();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Attachment attachment35 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Attachment();
        java.lang.String str36 = attachment35.getUrl();
        java.lang.String str37 = attachment35.FileName;
        java.lang.String str38 = attachment35.getFileName();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Attachment attachment39 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Attachment();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.AttachmentCategory attachmentCategory40 = attachment39.AttachmentCategory;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Attachment attachment42 = attachment39.setFileName("");
        attachment39.UploadedByUser = "/AQUARIUS/Acquisition/v2://9999-12-31T23:59:59.999Z";
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TagMetadata> tagMetadataList45 = attachment39.Tags;
        java.lang.String str46 = attachment39.Url;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportSpecimens getExportSpecimens47 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportSpecimens();
        java.util.List<java.lang.String> strList48 = getExportSpecimens47.getActivityTypes();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Qualifier qualifier49 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Qualifier();
        java.time.Instant instant50 = qualifier49.DateApplied;
        java.lang.String str51 = qualifier49.User;
        java.lang.String str52 = qualifier49.getIdentifier();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest53 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest();
        java.lang.Object obj54 = timeAlignedDataServiceRequest53.getResponseType();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse55 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant56 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse57 = locationDescriptionListServiceResponse55.setNextToken(instant56);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest58 = timeAlignedDataServiceRequest53.setQueryFrom(instant56);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Qualifier qualifier59 = qualifier49.setDateApplied(instant56);
        getExportSpecimens47.Before = instant56;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationRemark locationRemark61 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationRemark();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationRemark locationRemark63 = locationRemark61.setDescription("MaxInstant");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitDataServiceResponse fieldVisitDataServiceResponse64 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitDataServiceResponse();
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CrossSectionSurveyActivity> crossSectionSurveyActivityList65 = fieldVisitDataServiceResponse64.CrossSectionSurveyActivity;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitDataServiceResponse fieldVisitDataServiceResponse67 = fieldVisitDataServiceResponse64.setIdentifier("");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary68 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        dischargeSummary68.Reviewer = "";
        java.time.Instant instant71 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        dischargeSummary68.MeasurementTime = instant71;
        fieldVisitDataServiceResponse64.ResponseTime = instant71;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationRemark locationRemark74 = locationRemark61.setCreateTime(instant71);
        getExportSpecimens47.EndModificationTime = instant71;
        attachment39.DateUploaded = instant71;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Attachment attachment77 = attachment35.setDateLastAccessed(instant71);
        java.time.Instant instant78 = attachment35.getDateLastAccessed();
        locationNote33.CreateTimeUtc = instant78;
        java.time.Instant instant80 = locationNote33.getToTimeUtc();
        org.junit.Assert.assertNull(instant1);
        org.junit.Assert.assertNotNull(instant7);
        org.junit.Assert.assertNotNull(instant10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "9999-12-31T23:59:59.999Z" + "'", str11, "9999-12-31T23:59:59.999Z");
        org.junit.Assert.assertNotNull(instant13);
        org.junit.Assert.assertNotNull(metadataChangeTransactionListServiceRequest14);
        org.junit.Assert.assertNotNull(trendLineAnalysisServiceRequest19);
        org.junit.Assert.assertNull(trendLineAnalysisType20);
        org.junit.Assert.assertNotNull(instant26);
        org.junit.Assert.assertNotNull(instant29);
        org.junit.Assert.assertNotNull(statisticalDateTimeOffset30);
        org.junit.Assert.assertNotNull(locationNote33);
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertNull(str36);
        org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertNull(str38);
        org.junit.Assert.assertNull(attachmentCategory40);
        org.junit.Assert.assertNotNull(attachment42);
        org.junit.Assert.assertNull(tagMetadataList45);
        org.junit.Assert.assertNull(str46);
        org.junit.Assert.assertNull(strList48);
        org.junit.Assert.assertNull(instant50);
        org.junit.Assert.assertNull(str51);
        org.junit.Assert.assertNull(str52);
        org.junit.Assert.assertNotNull(obj54);
        org.junit.Assert.assertEquals(obj54.toString(), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj54), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj54), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertNotNull(instant56);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse57);
        org.junit.Assert.assertNotNull(timeAlignedDataServiceRequest58);
        org.junit.Assert.assertNotNull(qualifier59);
        org.junit.Assert.assertNotNull(locationRemark63);
        org.junit.Assert.assertNull(crossSectionSurveyActivityList65);
        org.junit.Assert.assertNotNull(fieldVisitDataServiceResponse67);
        org.junit.Assert.assertNotNull(instant71);
        org.junit.Assert.assertNotNull(locationRemark74);
        org.junit.Assert.assertNotNull(attachment77);
        org.junit.Assert.assertNotNull(instant78);
        org.junit.Assert.assertNull(instant80);
    }

    @Test
    public void test24205() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest48.test24205");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocation putLocation0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocation();
        java.lang.String str1 = putLocation0.LocationUniqueId;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocation putLocation3 = putLocation0.setLocationUniqueId("multipart/form-data; boundary=****59879c02-0839-4b96-bc41-a13ebb706be4****");
        java.lang.Object obj4 = putLocation0.getResponseType();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(putLocation3);
        org.junit.Assert.assertNotNull(obj4);
        org.junit.Assert.assertEquals(obj4.toString(), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning$Location");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj4), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning$Location");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj4), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning$Location");
    }

    @Test
    public void test24206() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest48.test24206");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.OpenWaterData openWaterData0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.OpenWaterData();
        java.lang.Double double1 = openWaterData0.SurfaceCoefficient;
        java.lang.String str2 = openWaterData0.getSuspensionWeight();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay3 = openWaterData0.DistanceToMeter;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitReading fieldVisitReading4 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitReading();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitReading fieldVisitReading6 = fieldVisitReading4.setUseLocationDatumAsReference((java.lang.Boolean) true);
        fieldVisitReading6.Manufacturer = "https";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitReading fieldVisitReading10 = fieldVisitReading6.setSerialNumber("2021.4.62.0");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitReading fieldVisitReading11 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitReading();
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DatumConvertedQuantityWithDisplay> datumConvertedQuantityWithDisplayList12 = fieldVisitReading11.DatumConvertedValues;
        fieldVisitReading11.SerialNumber = "9999-12-31T23:59:59.9999999Z";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VolumetricDischargeReading volumetricDischargeReading15 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VolumetricDischargeReading();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay16 = volumetricDischargeReading15.StartingVolume;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CalibrationCheck calibrationCheck17 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CalibrationCheck();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CalibrationCheck calibrationCheck19 = calibrationCheck17.setUnit("hi!");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay20 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay22 = doubleWithDisplay20.setNumeric((java.lang.Double) 10.0d);
        java.lang.String str23 = doubleWithDisplay22.getDisplay();
        calibrationCheck19.Difference = doubleWithDisplay22;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity pointVelocityDischargeActivity25 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity pointVelocityDischargeActivity27 = pointVelocityDischargeActivity25.setIsValid((java.lang.Boolean) false);
        pointVelocityDischargeActivity25.Manufacturer = "2021.4.62.0";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity pointVelocityDischargeActivity31 = pointVelocityDischargeActivity25.setSuspensionWeight("");
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Vertical> verticalList32 = pointVelocityDischargeActivity31.getVerticals();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DatumConvertedQuantityWithDisplay datumConvertedQuantityWithDisplay33 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DatumConvertedQuantityWithDisplay();
        pointVelocityDischargeActivity31.DistanceToMeter = datumConvertedQuantityWithDisplay33;
        calibrationCheck19.Standard = datumConvertedQuantityWithDisplay33;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VolumetricDischargeReading volumetricDischargeReading36 = volumetricDischargeReading15.setEndingVolume((com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay) datumConvertedQuantityWithDisplay33);
        fieldVisitReading11.AdjustmentAmount = datumConvertedQuantityWithDisplay33;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitReading fieldVisitReading38 = fieldVisitReading6.setAdjustmentAmount((com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay) datumConvertedQuantityWithDisplay33);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.OpenWaterData openWaterData39 = openWaterData0.setDistanceToMeter((com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay) datumConvertedQuantityWithDisplay33);
        openWaterData39.DryLineAngle = 10.0d;
        org.junit.Assert.assertNull(double1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(quantityWithDisplay3);
        org.junit.Assert.assertNotNull(fieldVisitReading6);
        org.junit.Assert.assertNotNull(fieldVisitReading10);
        org.junit.Assert.assertNull(datumConvertedQuantityWithDisplayList12);
        org.junit.Assert.assertNull(doubleWithDisplay16);
        org.junit.Assert.assertNotNull(calibrationCheck19);
        org.junit.Assert.assertNotNull(doubleWithDisplay22);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertNotNull(pointVelocityDischargeActivity27);
        org.junit.Assert.assertNotNull(pointVelocityDischargeActivity31);
        org.junit.Assert.assertNull(verticalList32);
        org.junit.Assert.assertNotNull(volumetricDischargeReading36);
        org.junit.Assert.assertNotNull(fieldVisitReading38);
        org.junit.Assert.assertNotNull(openWaterData39);
    }

    @Test
    public void test24207() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest48.test24207");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutQualifierGroup putQualifierGroup0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutQualifierGroup();
        putQualifierGroup0.Identifier = "";
        java.lang.String str3 = putQualifierGroup0.Identifier;
        putQualifierGroup0.UniqueId = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ";
        java.lang.Object obj6 = putQualifierGroup0.getResponseType();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(obj6);
        org.junit.Assert.assertEquals(obj6.toString(), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning$QualifierGroupResponse");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj6), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning$QualifierGroupResponse");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj6), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning$QualifierGroupResponse");
    }

    @Test
    public void test24208() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest48.test24208");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutFieldVisit putFieldVisit0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutFieldVisit();
        putFieldVisit0.Notes = "MinDuration";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ProjectSimple projectSimple3 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutFieldVisit putFieldVisit4 = putFieldVisit0.setProject(projectSimple3);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Schedule schedule5 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Schedule();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Schedule schedule7 = schedule5.setCustomId("");
        java.time.OffsetDateTime offsetDateTime8 = schedule5.getLastGenerationDate();
        putFieldVisit0.Schedule = schedule5;
        java.time.OffsetDateTime offsetDateTime10 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Schedule schedule11 = schedule5.setStartDate(offsetDateTime10);
        java.time.OffsetDateTime offsetDateTime12 = null;
        schedule5.StartDate = offsetDateTime12;
        org.junit.Assert.assertNotNull(putFieldVisit4);
        org.junit.Assert.assertNotNull(schedule7);
        org.junit.Assert.assertNull(offsetDateTime8);
        org.junit.Assert.assertNotNull(schedule11);
    }

    @Test
    public void test24209() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest48.test24209");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostRole postRole0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostRole();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RoleBase roleBase2 = postRole0.setName("/AQUARIUS/Acquisition/v2://9999-12-31T23:59:59.999Z");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostRole postRole3 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostRole();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RoleApprovalTransition roleApprovalTransition4 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RoleApprovalTransition();
        java.lang.Long long5 = roleApprovalTransition4.getToApprovalLevel();
        java.lang.Long long6 = roleApprovalTransition4.ToApprovalLevel;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RoleApprovalTransition roleApprovalTransition7 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RoleApprovalTransition();
        java.lang.Long long8 = roleApprovalTransition7.getToApprovalLevel();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RoleApprovalTransition roleApprovalTransition9 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RoleApprovalTransition();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RoleApprovalTransition roleApprovalTransition11 = roleApprovalTransition9.setToApprovalLevel((java.lang.Long) (-1L));
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RoleApprovalTransition roleApprovalTransition12 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RoleApprovalTransition();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RoleApprovalTransition roleApprovalTransition14 = roleApprovalTransition12.setToApprovalLevel((java.lang.Long) (-1L));
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RoleApprovalTransition roleApprovalTransition16 = roleApprovalTransition12.setToApprovalLevel((java.lang.Long) 0L);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RoleApprovalTransition roleApprovalTransition17 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RoleApprovalTransition();
        java.lang.Long long18 = roleApprovalTransition17.getToApprovalLevel();
        java.lang.Long long19 = roleApprovalTransition17.ToApprovalLevel;
        java.lang.Long long20 = roleApprovalTransition17.getToApprovalLevel();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RoleApprovalTransition roleApprovalTransition21 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RoleApprovalTransition();
        java.lang.Long long22 = roleApprovalTransition21.getToApprovalLevel();
        java.lang.Long long23 = roleApprovalTransition21.ToApprovalLevel;
        java.lang.Long long24 = roleApprovalTransition21.getToApprovalLevel();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RoleApprovalTransition[] roleApprovalTransitionArray25 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RoleApprovalTransition[] { roleApprovalTransition4, roleApprovalTransition7, roleApprovalTransition11, roleApprovalTransition12, roleApprovalTransition17, roleApprovalTransition21 };
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RoleApprovalTransition> roleApprovalTransitionList26 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RoleApprovalTransition>();
        boolean boolean27 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RoleApprovalTransition>) roleApprovalTransitionList26, roleApprovalTransitionArray25);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RoleBase roleBase28 = postRole3.setRoleApprovalTransitions(roleApprovalTransitionList26);
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RoleApprovalTransition> roleApprovalTransitionList29 = postRole3.RoleApprovalTransitions;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RoleBase roleBase30 = roleBase2.setRoleApprovalTransitions(roleApprovalTransitionList29);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RoleBase roleBase32 = roleBase2.setCanEditLocationDetails((java.lang.Boolean) true);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RoleBase roleBase34 = roleBase32.setCanAssignUserRoles((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RoleBase roleBase36 = roleBase32.setCanRemoveFieldVisits((java.lang.Boolean) false);
        org.junit.Assert.assertNotNull(roleBase2);
        org.junit.Assert.assertNull(long5);
        org.junit.Assert.assertNull(long6);
        org.junit.Assert.assertNull(long8);
        org.junit.Assert.assertNotNull(roleApprovalTransition11);
        org.junit.Assert.assertNotNull(roleApprovalTransition14);
        org.junit.Assert.assertNotNull(roleApprovalTransition16);
        org.junit.Assert.assertNull(long18);
        org.junit.Assert.assertNull(long19);
        org.junit.Assert.assertNull(long20);
        org.junit.Assert.assertNull(long22);
        org.junit.Assert.assertNull(long23);
        org.junit.Assert.assertNull(long24);
        org.junit.Assert.assertNotNull(roleApprovalTransitionArray25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(roleBase28);
        org.junit.Assert.assertNotNull(roleApprovalTransitionList29);
        org.junit.Assert.assertNotNull(roleBase30);
        org.junit.Assert.assertNotNull(roleBase32);
        org.junit.Assert.assertNotNull(roleBase34);
        org.junit.Assert.assertNotNull(roleBase36);
    }

    @Test
    public void test24210() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest48.test24210");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ShippingContainer shippingContainer0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ShippingContainer();
        java.lang.String str1 = shippingContainer0.getTrackingId();
        java.lang.String str2 = shippingContainer0.getTrackingId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes3 = shippingContainer0.getAuditAttributes();
        shippingContainer0.TrackingId = "multipart/form-data; boundary=****3dee2050-7d6c-400f-bd51-383a1324f5dd****";
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(auditAttributes3);
    }

    @Test
    public void test24211() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest48.test24211");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutNameTagBase putNameTagBase0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutNameTagBase();
        putNameTagBase0.UniqueId = "MinDuration";
        putNameTagBase0.Name = "multipart/form-data; boundary=****d9f5d551-383a-4365-87fd-ae7094da6f3b****";
        java.lang.String str5 = putNameTagBase0.Name;
        java.lang.String str6 = putNameTagBase0.UniqueId;
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "multipart/form-data; boundary=****d9f5d551-383a-4365-87fd-ae7094da6f3b****" + "'", str5, "multipart/form-data; boundary=****d9f5d551-383a-4365-87fd-ae7094da6f3b****");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "MinDuration" + "'", str6, "MinDuration");
    }

    @Test
    public void test24212() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest48.test24212");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutExtendedAttribute putExtendedAttribute0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutExtendedAttribute();
        putExtendedAttribute0.Key = "/AQUARIUS/Acquisition/v2://9999-12-31T23:59:59.999Z";
        java.lang.String str3 = putExtendedAttribute0.UniqueId;
        putExtendedAttribute0.UniqueId = "multipart/form-data; boundary=****2917d69a-62fa-41ce-b981-4dbe2deab9f5****";
        putExtendedAttribute0.UniqueId = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ";
        putExtendedAttribute0.UniqueId = "yyyy'-'MM'-'dd'T'HH':'mm':'ss";
        java.lang.String str10 = putExtendedAttribute0.UniqueId;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.TagValueType tagValueType11 = putExtendedAttribute0.ValueType;
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeApplicability> extendedAttributeApplicabilityList12 = putExtendedAttribute0.Applicability;
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "yyyy'-'MM'-'dd'T'HH':'mm':'ss" + "'", str10, "yyyy'-'MM'-'dd'T'HH':'mm':'ss");
        org.junit.Assert.assertNull(tagValueType11);
        org.junit.Assert.assertNull(extendedAttributeApplicabilityList12);
    }

    @Test
    public void test24213() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest48.test24213");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFieldTrip postFieldTrip0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFieldTrip();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFieldTrip postFieldTrip2 = postFieldTrip0.setId("yyyy'-'MM'-'dd'T'HH':'mm':'ss");
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment> domainObjectAttachmentList3 = postFieldTrip0.Attachments;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes4 = postFieldTrip0.getAuditAttributes();
        java.time.OffsetDateTime offsetDateTime5 = null;
        postFieldTrip0.EndTime = offsetDateTime5;
        java.time.OffsetDateTime offsetDateTime7 = postFieldTrip0.getEndTime();
        postFieldTrip0.Id = "multipart/form-data; boundary=****bbcf5f9e-6ccf-4b63-91ab-6e645caf02af****";
        java.lang.String str10 = postFieldTrip0.getId();
        org.junit.Assert.assertNotNull(postFieldTrip2);
        org.junit.Assert.assertNull(domainObjectAttachmentList3);
        org.junit.Assert.assertNull(auditAttributes4);
        org.junit.Assert.assertNull(offsetDateTime7);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "multipart/form-data; boundary=****bbcf5f9e-6ccf-4b63-91ab-6e645caf02af****" + "'", str10, "multipart/form-data; boundary=****bbcf5f9e-6ccf-4b63-91ab-6e645caf02af****");
    }

    @Test
    public void test24214() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest48.test24214");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.AdcpDischargeActivity adcpDischargeActivity0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.AdcpDischargeActivity();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.AdcpDischargeActivity adcpDischargeActivity2 = adcpDischargeActivity0.setSoftwareVersion("yyyy'-'MM'-'dd'T'HH':'mm':'ss");
        java.lang.Integer int3 = adcpDischargeActivity0.NumberOfTransects;
        java.lang.String str4 = adcpDischargeActivity0.getTopEstimateMethod();
        java.lang.String str5 = adcpDischargeActivity0.getModel();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeChannelMeasurement dischargeChannelMeasurement6 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeChannelMeasurement();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ChannelMaterialType channelMaterialType7 = dischargeChannelMeasurement6.getChannelMaterial();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay8 = dischargeChannelMeasurement6.Discharge;
        java.lang.String str9 = dischargeChannelMeasurement6.MonitoringMethod;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay10 = null;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeChannelMeasurement dischargeChannelMeasurement11 = dischargeChannelMeasurement6.setDischarge(quantityWithDisplay10);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ChannelEvennessType channelEvennessType12 = dischargeChannelMeasurement6.getChannelEvenness();
        adcpDischargeActivity0.DischargeChannelMeasurement = dischargeChannelMeasurement6;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.AdcpDischargeActivity adcpDischargeActivity15 = adcpDischargeActivity0.setNumberOfTransects((java.lang.Integer) 4);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay16 = adcpDischargeActivity15.getArea();
        org.junit.Assert.assertNotNull(adcpDischargeActivity2);
        org.junit.Assert.assertNull(int3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(channelMaterialType7);
        org.junit.Assert.assertNull(quantityWithDisplay8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(dischargeChannelMeasurement11);
        org.junit.Assert.assertNull(channelEvennessType12);
        org.junit.Assert.assertNotNull(adcpDischargeActivity15);
        org.junit.Assert.assertNull(quantityWithDisplay16);
    }

    @Test
    public void test24215() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest48.test24215");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedTimeSeriesInfo timeAlignedTimeSeriesInfo0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedTimeSeriesInfo();
        java.lang.String str1 = timeAlignedTimeSeriesInfo0.getLocationIdentifier();
        java.lang.String str2 = timeAlignedTimeSeriesInfo0.getLabel();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedTimeSeriesInfo timeAlignedTimeSeriesInfo4 = timeAlignedTimeSeriesInfo0.setIdentifier("multipart/form-data; boundary=****2e497db8-6b91-47d6-99bc-df65af225bf8****");
        timeAlignedTimeSeriesInfo4.InterpolationType = "http://MaxDurationhttp/json/reply/String";
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNotNull(timeAlignedTimeSeriesInfo4);
    }

    @Test
    public void test24216() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest48.test24216");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedFieldResult plannedFieldResult1 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation2 = observation0.setPlannedFieldResult(plannedFieldResult1);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabInstruction labInstruction3 = null;
        observation2.LabInstruction = labInstruction3;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationStatistics observationStatistics5 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation6 = observation2.setStatistics(observationStatistics5);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.CollectionMethod collectionMethod7 = observation6.getCollectionMethod();
        java.time.OffsetDateTime offsetDateTime8 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation9 = observation6.setObservedTime(offsetDateTime8);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation10 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation();
        observation10.CustomId = "hi!";
        java.lang.String str13 = observation10.CustomId;
        observation10.CustomId = "/AQUARIUS/Acquisition/v2";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutActivityTemplate putActivityTemplate16 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutActivityTemplate();
        java.lang.String str17 = putActivityTemplate16.getId();
        java.lang.String str18 = putActivityTemplate16.Id;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes19 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes21 = auditAttributes19.setCreationUserProfileId("'.'SSSSSSS");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutActivityTemplate putActivityTemplate22 = putActivityTemplate16.setAuditAttributes(auditAttributes21);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MediumType mediumType23 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MediumType.WATER;
        putActivityTemplate22.Medium = mediumType23;
        java.lang.String str25 = putActivityTemplate22.getComment();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.CollectionMethod collectionMethod26 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.CollectionMethod();
        collectionMethod26.Id = "yyyy'-'MM'-'dd'T'HH':'mm':'ss";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutActivityTemplate putActivityTemplate29 = putActivityTemplate22.setCollectionMethod(collectionMethod26);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation30 = observation10.setCollectionMethod(collectionMethod26);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservationV2 postObservationV2_31 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservationV2();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabInstruction labInstruction32 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservationV2 postObservationV2_33 = postObservationV2_31.setLabInstruction(labInstruction32);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation34 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedFieldResult plannedFieldResult35 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation36 = observation34.setPlannedFieldResult(plannedFieldResult35);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabInstruction labInstruction37 = null;
        observation36.LabInstruction = labInstruction37;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationStatistics observationStatistics39 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation40 = observation36.setStatistics(observationStatistics39);
        java.time.OffsetDateTime offsetDateTime41 = observation40.getResultTime();
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple> importHistoryEventSimpleList42 = observation40.ImportHistoryEventSimples;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty observedProperty43 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation44 = observation40.setObservedProperty(observedProperty43);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.RuleValidationDetails[] ruleValidationDetailsArray45 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.RuleValidationDetails[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.RuleValidationDetails> ruleValidationDetailsList46 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.RuleValidationDetails>();
        boolean boolean47 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.RuleValidationDetails>) ruleValidationDetailsList46, ruleValidationDetailsArray45);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation48 = observation40.setValidationWarnings((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.RuleValidationDetails>) ruleValidationDetailsList46);
        postObservationV2_31.ValidationWarnings = ruleValidationDetailsList46;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation50 = observation30.setValidationWarnings((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.RuleValidationDetails>) ruleValidationDetailsList46);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation51 = observation6.setValidationWarnings((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.RuleValidationDetails>) ruleValidationDetailsList46);
        org.junit.Assert.assertNotNull(observation2);
        org.junit.Assert.assertNotNull(observation6);
        org.junit.Assert.assertNull(collectionMethod7);
        org.junit.Assert.assertNotNull(observation9);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "hi!" + "'", str13, "hi!");
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNotNull(auditAttributes21);
        org.junit.Assert.assertNotNull(putActivityTemplate22);
        org.junit.Assert.assertTrue("'" + mediumType23 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MediumType.WATER + "'", mediumType23.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MediumType.WATER));
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertNotNull(putActivityTemplate29);
        org.junit.Assert.assertNotNull(observation30);
        org.junit.Assert.assertNotNull(postObservationV2_33);
        org.junit.Assert.assertNotNull(observation36);
        org.junit.Assert.assertNotNull(observation40);
        org.junit.Assert.assertNull(offsetDateTime41);
        org.junit.Assert.assertNull(importHistoryEventSimpleList42);
        org.junit.Assert.assertNotNull(observation44);
        org.junit.Assert.assertNotNull(ruleValidationDetailsArray45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(observation48);
        org.junit.Assert.assertNotNull(observation50);
        org.junit.Assert.assertNotNull(observation51);
    }

    @Test
    public void test24217() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest48.test24217");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray3 = new java.lang.String[] { "", "" };
        java.util.ArrayList<java.lang.String> strList4 = new java.util.ArrayList<java.lang.String>();
        boolean boolean5 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList4, strArray3);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_6 = getObservationsV2_0.setDataClassifications((java.util.List<java.lang.String>) strList4);
        getObservationsV2_6.DepthUnitCustomId = "hi!";
        java.lang.String str9 = getObservationsV2_6.CustomId;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_10 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray12 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList13 = new java.util.ArrayList<java.lang.String>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList13, strArray12);
        getObservationsV2_10.SpecimenIds = strList13;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags16 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray20 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList21 = new java.util.ArrayList<java.lang.String>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList21, strArray20);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags23 = putLocationTags16.setTagUniqueIds(strList21);
        getObservationsV2_10.QualityControlTypes = strList21;
        java.util.List<java.lang.String> strList25 = getObservationsV2_10.getAnalyticalGroupIds();
        java.util.List<java.lang.String> strList26 = getObservationsV2_10.DataClassifications;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.FieldResultType fieldResultType27 = getObservationsV2_10.FieldResultType;
        java.time.Instant instant28 = getObservationsV2_10.getEndObservedTime();
        java.lang.String str29 = getObservationsV2_10.DepthUnitCustomId;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags30 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray34 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList35 = new java.util.ArrayList<java.lang.String>();
        boolean boolean36 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList35, strArray34);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags37 = putLocationTags30.setTagUniqueIds(strList35);
        java.util.ArrayList<java.lang.String> strList38 = putLocationTags37.TagUniqueIds;
        getObservationsV2_10.ProjectIds = strList38;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_40 = getObservationsV2_6.setQualityControlTypes((java.util.List<java.lang.String>) strList38);
        java.lang.Double double41 = getObservationsV2_6.NumericResultValue;
        java.time.Instant instant42 = getObservationsV2_6.StartObservedTime;
        java.time.Instant instant43 = getObservationsV2_6.StartObservedTime;
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(getObservationsV2_6);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(putLocationTags23);
        org.junit.Assert.assertNull(strList25);
        org.junit.Assert.assertNull(strList26);
        org.junit.Assert.assertNull(fieldResultType27);
        org.junit.Assert.assertNull(instant28);
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertNotNull(strArray34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(putLocationTags37);
        org.junit.Assert.assertNotNull(strList38);
        org.junit.Assert.assertNotNull(getObservationsV2_40);
        org.junit.Assert.assertNull(double41);
        org.junit.Assert.assertNull(instant42);
        org.junit.Assert.assertNull(instant43);
    }

    @Test
    public void test24218() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest48.test24218");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutStandard putStandard0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutStandard();
        putStandard0.Active = true;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostDetectioncondition postDetectioncondition3 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostDetectioncondition();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate4 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate6 = specimenTemplate4.setCustomId("hi!");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PreservativeType preservativeType7 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PreservativeType.SODIUM_AZIDE;
        specimenTemplate6.Preservative = preservativeType7;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails9 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails11 = labResultDetails9.setAnalysisComment("/AQUARIUS/Acquisition/v2");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes12 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails13 = labResultDetails11.setAuditAttributes(auditAttributes12);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate14 = specimenTemplate6.setAuditAttributes(auditAttributes12);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostDetectioncondition postDetectioncondition15 = postDetectioncondition3.setAuditAttributes(auditAttributes12);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutStandard putStandard16 = putStandard0.setAuditAttributes(auditAttributes12);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutStandard putStandard18 = putStandard16.setDescription("ZZZZZ");
        java.lang.String str19 = putStandard16.getDescription();
        java.lang.String str20 = putStandard16.getId();
        java.lang.Object obj21 = putStandard16.getResponseType();
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationStandard> observationStandardList22 = putStandard16.ObservationStandards;
        java.lang.String str23 = putStandard16.getId();
        org.junit.Assert.assertNotNull(specimenTemplate6);
        org.junit.Assert.assertTrue("'" + preservativeType7 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PreservativeType.SODIUM_AZIDE + "'", preservativeType7.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PreservativeType.SODIUM_AZIDE));
        org.junit.Assert.assertNotNull(labResultDetails11);
        org.junit.Assert.assertNotNull(labResultDetails13);
        org.junit.Assert.assertNotNull(specimenTemplate14);
        org.junit.Assert.assertNotNull(postDetectioncondition15);
        org.junit.Assert.assertNotNull(putStandard16);
        org.junit.Assert.assertNotNull(putStandard18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "ZZZZZ" + "'", str19, "ZZZZZ");
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNotNull(obj21);
        org.junit.Assert.assertEquals(obj21.toString(), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$StandardDefinition");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj21), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$StandardDefinition");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj21), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$StandardDefinition");
        org.junit.Assert.assertNull(observationStandardList22);
        org.junit.Assert.assertNull(str23);
    }

    @Test
    public void test24219() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest48.test24219");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CalibrationCheck calibrationCheck0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CalibrationCheck();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CalibrationCheckType calibrationCheckType1 = calibrationCheck0.getCalibrationCheckType();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay2 = calibrationCheck0.Value;
        java.lang.String str3 = calibrationCheck0.getModel();
        java.time.Instant instant4 = calibrationCheck0.getTime();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.StandardDetails standardDetails5 = null;
        calibrationCheck0.StandardDetails = standardDetails5;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CalibrationCheck calibrationCheck8 = calibrationCheck0.setSensorUniqueId("/AQUARIUS/Provisioning/v1");
        calibrationCheck0.Model = "ZZZZZ";
        calibrationCheck0.ParameterId = "multipart/form-data; boundary=****44f0772e-c3ca-4316-8e2a-61ec8540d661****";
        org.junit.Assert.assertNull(calibrationCheckType1);
        org.junit.Assert.assertNull(doubleWithDisplay2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(instant4);
        org.junit.Assert.assertNotNull(calibrationCheck8);
    }

    @Test
    public void test24220() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest48.test24220");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardDefinition standardDefinition0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardDefinition();
        standardDefinition0.Active = false;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardDefinition standardDefinition4 = standardDefinition0.setCustomId("2021.4.62.0");
        standardDefinition4.Description = "ZZZZZ";
        standardDefinition4.Description = "MinInstant";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes9 = standardDefinition4.AuditAttributes;
        org.junit.Assert.assertNotNull(standardDefinition4);
        org.junit.Assert.assertNull(auditAttributes9);
    }

    @Test
    public void test24221() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest48.test24221");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSpecimen putSpecimen0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSpecimen();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSpecimen putSpecimen2 = putSpecimen0.setNumberOfRequestedObservations((java.lang.Integer) 4);
        java.lang.String str3 = putSpecimen0.getDescription();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate4 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSpecimen putSpecimen5 = putSpecimen0.setTemplateCreatedFrom(specimenTemplate4);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Activity activity6 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Activity();
        activity6.LoggerFileName = "http://MaxDurationhttp/json/reply/Integer";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity postActivity9 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity();
        postActivity9.LoggerFileName = "hi!";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity plannedActivity12 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity postActivity13 = postActivity9.setPlannedActivity(plannedActivity12);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ActivityType activityType14 = postActivity9.Type;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFieldVisitActivityWithTemplate postFieldVisitActivityWithTemplate15 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFieldVisitActivityWithTemplate();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate16 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate();
        specimenTemplate16.CustomId = "hi!";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate19 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate20 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate();
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabInstructionTemplate> labInstructionTemplateList21 = specimenTemplate20.getLabInstructionTemplates();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate22 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate24 = specimenTemplate22.setCustomId("hi!");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate25 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate26 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate();
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabInstructionTemplate> labInstructionTemplateList27 = specimenTemplate26.LabInstructionTemplates;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate[] specimenTemplateArray28 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate[] { specimenTemplate16, specimenTemplate19, specimenTemplate20, specimenTemplate24, specimenTemplate25, specimenTemplate26 };
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate> specimenTemplateList29 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate>) specimenTemplateList29, specimenTemplateArray28);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFieldVisitActivityWithTemplate postFieldVisitActivityWithTemplate31 = postFieldVisitActivityWithTemplate15.setSpecimenTemplates((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate>) specimenTemplateList29);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.CollectionMethod collectionMethod32 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.CollectionMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFieldVisitActivityWithTemplate postFieldVisitActivityWithTemplate33 = postFieldVisitActivityWithTemplate31.setCollectionMethod(collectionMethod32);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity postActivity34 = postActivity9.setCollectionMethod(collectionMethod32);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Medium medium35 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Medium();
        postActivity9.Medium = medium35;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Activity activity37 = activity6.setMedium(medium35);
        putSpecimen5.Activity = activity6;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes39 = putSpecimen5.AuditAttributes;
        java.lang.String str40 = putSpecimen5.FiltrationComment;
        java.lang.Boolean boolean41 = putSpecimen5.Filtered;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSpecimen putSpecimen43 = putSpecimen5.setName("https");
        org.junit.Assert.assertNotNull(putSpecimen2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(putSpecimen5);
        org.junit.Assert.assertNotNull(postActivity13);
        org.junit.Assert.assertNull(activityType14);
        org.junit.Assert.assertNull(labInstructionTemplateList21);
        org.junit.Assert.assertNotNull(specimenTemplate24);
        org.junit.Assert.assertNull(labInstructionTemplateList27);
        org.junit.Assert.assertNotNull(specimenTemplateArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(postFieldVisitActivityWithTemplate31);
        org.junit.Assert.assertNotNull(postFieldVisitActivityWithTemplate33);
        org.junit.Assert.assertNotNull(postActivity34);
        org.junit.Assert.assertNotNull(activity37);
        org.junit.Assert.assertNull(auditAttributes39);
        org.junit.Assert.assertNull(str40);
        org.junit.Assert.assertNull(boolean41);
        org.junit.Assert.assertNotNull(putSpecimen43);
    }

    @Test
    public void test24222() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest48.test24222");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutObservationV2 putObservationV2_0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutObservationV2();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty observedProperty1 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutObservationV2 putObservationV2_2 = putObservationV2_0.setObservedProperty(observedProperty1);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Activity activity3 = putObservationV2_2.Activity;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DataClassificationType dataClassificationType4 = putObservationV2_2.getDataClassification();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.CategoricalResult categoricalResult5 = putObservationV2_2.CategoricalResult;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Specimen specimen6 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutObservationV2 putObservationV2_7 = putObservationV2_2.setSpecimen(specimen6);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity postActivity8 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity();
        postActivity8.SourceActivityId = "2021.4.62.0";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity plannedActivity11 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity postActivity12 = postActivity8.setPlannedActivity(plannedActivity11);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity postActivity14 = postActivity8.setLoggerFileName("https");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation15 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedFieldResult plannedFieldResult16 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation17 = observation15.setPlannedFieldResult(plannedFieldResult16);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabInstruction labInstruction18 = null;
        observation17.LabInstruction = labInstruction18;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationStatistics observationStatistics20 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation21 = observation17.setStatistics(observationStatistics20);
        java.time.OffsetDateTime offsetDateTime22 = observation21.getResultTime();
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple> importHistoryEventSimpleList23 = observation21.ImportHistoryEventSimples;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty observedProperty24 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation25 = observation21.setObservedProperty(observedProperty24);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.RuleValidationDetails[] ruleValidationDetailsArray26 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.RuleValidationDetails[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.RuleValidationDetails> ruleValidationDetailsList27 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.RuleValidationDetails>();
        boolean boolean28 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.RuleValidationDetails>) ruleValidationDetailsList27, ruleValidationDetailsArray26);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation29 = observation21.setValidationWarnings((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.RuleValidationDetails>) ruleValidationDetailsList27);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity postActivity30 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttribute[] extendedAttributeArray31 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttribute[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttribute> extendedAttributeList32 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttribute>();
        boolean boolean33 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttribute>) extendedAttributeList32, extendedAttributeArray31);
        postActivity30.ExtendedAttributes = extendedAttributeList32;
        observation29.ExtendedAttributes = extendedAttributeList32;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity postActivity36 = postActivity8.setExtendedAttributes((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttribute>) extendedAttributeList32);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutObservationV2 putObservationV2_37 = putObservationV2_2.setExtendedAttributes((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttribute>) extendedAttributeList32);
        java.lang.String str38 = putObservationV2_37.CustomId;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.CollectionMethod collectionMethod39 = putObservationV2_37.CollectionMethod;
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttribute> extendedAttributeList40 = putObservationV2_37.getExtendedAttributes();
        org.junit.Assert.assertNotNull(putObservationV2_2);
        org.junit.Assert.assertNull(activity3);
        org.junit.Assert.assertNull(dataClassificationType4);
        org.junit.Assert.assertNull(categoricalResult5);
        org.junit.Assert.assertNotNull(putObservationV2_7);
        org.junit.Assert.assertNotNull(postActivity12);
        org.junit.Assert.assertNotNull(postActivity14);
        org.junit.Assert.assertNotNull(observation17);
        org.junit.Assert.assertNotNull(observation21);
        org.junit.Assert.assertNull(offsetDateTime22);
        org.junit.Assert.assertNull(importHistoryEventSimpleList23);
        org.junit.Assert.assertNotNull(observation25);
        org.junit.Assert.assertNotNull(ruleValidationDetailsArray26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(observation29);
        org.junit.Assert.assertNotNull(extendedAttributeArray31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(postActivity36);
        org.junit.Assert.assertNotNull(putObservationV2_37);
        org.junit.Assert.assertNull(str38);
        org.junit.Assert.assertNull(collectionMethod39);
        org.junit.Assert.assertNotNull(extendedAttributeList40);
    }

    @Test
    public void test24223() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest48.test24223");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay1 = dischargeSummary0.getMeanGageHeight();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay2 = dischargeSummary0.Discharge;
        java.lang.Integer int3 = dischargeSummary0.GradeCode;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Adjustment adjustment4 = dischargeSummary0.getAdjustment();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeUncertainty dischargeUncertainty5 = dischargeSummary0.getDischargeUncertainty();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay6 = dischargeSummary0.getDischarge();
        org.junit.Assert.assertNull(quantityWithDisplay1);
        org.junit.Assert.assertNull(quantityWithDisplay2);
        org.junit.Assert.assertNull(int3);
        org.junit.Assert.assertNull(adjustment4);
        org.junit.Assert.assertNull(dischargeUncertainty5);
        org.junit.Assert.assertNull(quantityWithDisplay6);
    }

    @Test
    public void test24224() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest48.test24224");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation();
        observation0.CustomId = "hi!";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.CategoricalResult categoricalResult3 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation4 = observation0.setCategoricalResult(categoricalResult3);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple[] importHistoryEventSimpleArray5 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple> importHistoryEventSimpleList6 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple>) importHistoryEventSimpleList6, importHistoryEventSimpleArray5);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation8 = observation0.setImportHistoryEventSimples((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple>) importHistoryEventSimpleList6);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Taxon taxon9 = observation0.RelatedTaxon;
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.RuleValidationDetails> ruleValidationDetailsList10 = observation0.ValidationWarnings;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttribute[] extendedAttributeArray11 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttribute[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttribute> extendedAttributeList12 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttribute>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttribute>) extendedAttributeList12, extendedAttributeArray11);
        observation0.ExtendedAttributes = extendedAttributeList12;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation15 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedFieldResult plannedFieldResult16 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation17 = observation15.setPlannedFieldResult(plannedFieldResult16);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabInstruction labInstruction18 = null;
        observation17.LabInstruction = labInstruction18;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationStatistics observationStatistics20 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation21 = observation17.setStatistics(observationStatistics20);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Taxon taxon22 = null;
        observation17.RelatedTaxon = taxon22;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultStatus resultStatus24 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation25 = observation17.setResultStatus(resultStatus24);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.QualityControlType qualityControlType26 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.QualityControlType.OTHER_QC;
        observation25.QualityControlType = qualityControlType26;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation28 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedFieldResult plannedFieldResult29 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation30 = observation28.setPlannedFieldResult(plannedFieldResult29);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabInstruction labInstruction31 = null;
        observation30.LabInstruction = labInstruction31;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationStatistics observationStatistics33 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation34 = observation30.setStatistics(observationStatistics33);
        java.time.OffsetDateTime offsetDateTime35 = observation34.getResultTime();
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple> importHistoryEventSimpleList36 = observation34.ImportHistoryEventSimples;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty observedProperty37 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation38 = observation34.setObservedProperty(observedProperty37);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultGrade resultGrade39 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation40 = observation34.setResultGrade(resultGrade39);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation41 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedFieldResult plannedFieldResult42 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation43 = observation41.setPlannedFieldResult(plannedFieldResult42);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabInstruction labInstruction44 = null;
        observation43.LabInstruction = labInstruction44;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationStatistics observationStatistics46 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation47 = observation43.setStatistics(observationStatistics46);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Taxon taxon48 = null;
        observation43.RelatedTaxon = taxon48;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultStatus resultStatus50 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation51 = observation43.setResultStatus(resultStatus50);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.QualityControlType qualityControlType52 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.QualityControlType.OTHER_QC;
        observation51.QualityControlType = qualityControlType52;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation54 = observation40.setQualityControlType(qualityControlType52);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation55 = observation25.setQualityControlType(qualityControlType52);
        observation0.QualityControlType = qualityControlType52;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationStatistics observationStatistics57 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationStatistics();
        observationStatistics57.ObservedPropertyId = "/AQUARIUS/Provisioning/v1";
        java.lang.Double double60 = observationStatistics57.Max;
        java.lang.String str61 = observationStatistics57.SamplingLocationId;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationStatistics observationStatistics63 = observationStatistics57.setSamplingLocationId("multipart/form-data; boundary=****f642a130-eb6d-4fb6-a1a4-7c7216ab119b****");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation64 = observation0.setStatistics(observationStatistics63);
        java.time.OffsetDateTime offsetDateTime65 = observation64.ObservedTime;
        org.junit.Assert.assertNotNull(observation4);
        org.junit.Assert.assertNotNull(importHistoryEventSimpleArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(observation8);
        org.junit.Assert.assertNull(taxon9);
        org.junit.Assert.assertNull(ruleValidationDetailsList10);
        org.junit.Assert.assertNotNull(extendedAttributeArray11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(observation17);
        org.junit.Assert.assertNotNull(observation21);
        org.junit.Assert.assertNotNull(observation25);
        org.junit.Assert.assertTrue("'" + qualityControlType26 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.QualityControlType.OTHER_QC + "'", qualityControlType26.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.QualityControlType.OTHER_QC));
        org.junit.Assert.assertNotNull(observation30);
        org.junit.Assert.assertNotNull(observation34);
        org.junit.Assert.assertNull(offsetDateTime35);
        org.junit.Assert.assertNull(importHistoryEventSimpleList36);
        org.junit.Assert.assertNotNull(observation38);
        org.junit.Assert.assertNotNull(observation40);
        org.junit.Assert.assertNotNull(observation43);
        org.junit.Assert.assertNotNull(observation47);
        org.junit.Assert.assertNotNull(observation51);
        org.junit.Assert.assertTrue("'" + qualityControlType52 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.QualityControlType.OTHER_QC + "'", qualityControlType52.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.QualityControlType.OTHER_QC));
        org.junit.Assert.assertNotNull(observation54);
        org.junit.Assert.assertNotNull(observation55);
        org.junit.Assert.assertNull(double60);
        org.junit.Assert.assertNull(str61);
        org.junit.Assert.assertNotNull(observationStatistics63);
        org.junit.Assert.assertNotNull(observation64);
        org.junit.Assert.assertNull(offsetDateTime65);
    }

    @Test
    public void test24225() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest48.test24225");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostStatisticalDerivedTimeSeries postStatisticalDerivedTimeSeries0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostStatisticalDerivedTimeSeries();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostStatisticalDerivedTimeSeries postStatisticalDerivedTimeSeries2 = postStatisticalDerivedTimeSeries0.setComment("'.'SSSSSSS");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostStatisticalDerivedTimeSeries postStatisticalDerivedTimeSeries4 = postStatisticalDerivedTimeSeries0.setLabel("'.'SSSSSSS");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostStatisticalDerivedTimeSeries postStatisticalDerivedTimeSeries6 = postStatisticalDerivedTimeSeries0.setParameter("/AQUARIUS/Provisioning/v1");
        java.lang.Integer int7 = postStatisticalDerivedTimeSeries0.PartialCoverageGrade;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostStatisticalDerivedTimeSeries postStatisticalDerivedTimeSeries9 = postStatisticalDerivedTimeSeries0.setUtcOffset("MaxInstant");
        java.lang.String str10 = postStatisticalDerivedTimeSeries0.getUnit();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostStatisticalDerivedTimeSeries postStatisticalDerivedTimeSeries12 = postStatisticalDerivedTimeSeries0.setPublish((java.lang.Boolean) true);
        java.lang.String str13 = postStatisticalDerivedTimeSeries0.getSubLocationIdentifier();
        java.lang.Integer int14 = postStatisticalDerivedTimeSeries0.getPartialCoverageGrade();
        java.lang.String str15 = postStatisticalDerivedTimeSeries0.LocationUniqueId;
        java.lang.String str16 = postStatisticalDerivedTimeSeries0.Description;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostStatisticalDerivedTimeSeries postStatisticalDerivedTimeSeries18 = postStatisticalDerivedTimeSeries0.setComment("http:///AQUARIUS/Acquisition/v2multipart/form-data; boundary=****44f0772e-c3ca-4316-8e2a-61ec8540d661****/v1/observedproperties/{id}/categoricalvalues");
        java.util.List<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeValue> extendedAttributeValueList19 = postStatisticalDerivedTimeSeries0.ExtendedAttributeValues;
        org.junit.Assert.assertNotNull(postStatisticalDerivedTimeSeries2);
        org.junit.Assert.assertNotNull(postStatisticalDerivedTimeSeries4);
        org.junit.Assert.assertNotNull(postStatisticalDerivedTimeSeries6);
        org.junit.Assert.assertNull(int7);
        org.junit.Assert.assertNotNull(postStatisticalDerivedTimeSeries9);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNotNull(postStatisticalDerivedTimeSeries12);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNull(int14);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNotNull(postStatisticalDerivedTimeSeries18);
        org.junit.Assert.assertNull(extendedAttributeValueList19);
    }

    @Test
    public void test24226() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest48.test24226");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportObservations getExportObservations0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportObservations();
        java.util.List<java.lang.String> strList1 = getExportObservations0.getLabReportIds();
        java.lang.String str2 = getExportObservations0.DepthUnitCustomId;
        java.util.List<java.lang.String> strList3 = getExportObservations0.getSearch();
        java.util.List<java.lang.String> strList4 = getExportObservations0.LabResultLaboratoryIds;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeTransactionListServiceRequest metadataChangeTransactionListServiceRequest5 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeTransactionListServiceRequest();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostRecurringReport postRecurringReport6 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostRecurringReport();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary7 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        dischargeSummary7.Reviewer = "";
        java.time.Instant instant10 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        dischargeSummary7.MeasurementTime = instant10;
        postRecurringReport6.NextGenerationDate = instant10;
        java.time.Instant instant13 = postRecurringReport6.getNextGenerationDate();
        java.lang.String str14 = com.aquaticinformatics.aquarius.sdk.samples.serializers.InstantSerializer.format(instant13);
        metadataChangeTransactionListServiceRequest5.QueryFrom = instant13;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportObservations getExportObservations16 = getExportObservations0.setEndObservedTime(instant13);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationRemark locationRemark17 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationRemark();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationRemark locationRemark19 = locationRemark17.setDescription("MaxInstant");
        java.lang.String str20 = locationRemark19.getTypeName();
        java.time.Instant instant21 = locationRemark19.CreateTime;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetChartDataV2 getChartDataV2_22 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetChartDataV2();
        java.lang.String str23 = getChartDataV2_22.getActivityCustomId();
        java.util.List<java.lang.String> strList24 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetChartDataV2 getChartDataV2_25 = getChartDataV2_22.setSearch(strList24);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_26 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray29 = new java.lang.String[] { "", "" };
        java.util.ArrayList<java.lang.String> strList30 = new java.util.ArrayList<java.lang.String>();
        boolean boolean31 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList30, strArray29);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_32 = getObservationsV2_26.setDataClassifications((java.util.List<java.lang.String>) strList30);
        java.util.List<java.lang.String> strList33 = getObservationsV2_26.ResultGrades;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary34 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        dischargeSummary34.Reviewer = "";
        java.time.Instant instant37 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        dischargeSummary34.MeasurementTime = instant37;
        getObservationsV2_26.StartResultTime = instant37;
        java.lang.String[] strArray49 = new java.lang.String[] { "https", "/AQUARIUS/Provisioning/v1", "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ", "2021.4.62.0", "hi!", "2021.4.62.0", "2021.4.62.0", "/AQUARIUS/Acquisition/v2", "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ" };
        java.util.ArrayList<java.lang.String> strList50 = new java.util.ArrayList<java.lang.String>();
        boolean boolean51 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList50, strArray49);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_52 = getObservationsV2_26.setAnalyticalGroupIds((java.util.List<java.lang.String>) strList50);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescription locationDescription53 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescription();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescription locationDescription55 = locationDescription53.setIdentifier("");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ControlConditionActivity controlConditionActivity56 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ControlConditionActivity();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ControlCleanedType controlCleanedType57 = null;
        controlConditionActivity56.ControlCleaned = controlCleanedType57;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse59 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant60 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse61 = locationDescriptionListServiceResponse59.setNextToken(instant60);
        controlConditionActivity56.DateCleaned = instant60;
        locationDescription55.LastModified = instant60;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_64 = getObservationsV2_52.setStartResultTime(instant60);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetChartDataV2 getChartDataV2_65 = getChartDataV2_22.setEndObservedTime(instant60);
        locationRemark19.CreateTime = instant60;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportObservations getExportObservations67 = getExportObservations0.setEndModificationTime(instant60);
        java.time.Instant instant68 = getExportObservations67.getStartModificationTime();
        java.util.List<java.lang.String> strList69 = getExportObservations67.Search;
        java.util.List<java.lang.String> strList70 = getExportObservations67.CollectionMethodIds;
        org.junit.Assert.assertNull(strList1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(strList3);
        org.junit.Assert.assertNull(strList4);
        org.junit.Assert.assertNotNull(instant10);
        org.junit.Assert.assertNotNull(instant13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "9999-12-31T23:59:59.999Z" + "'", str14, "9999-12-31T23:59:59.999Z");
        org.junit.Assert.assertNotNull(getExportObservations16);
        org.junit.Assert.assertNotNull(locationRemark19);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNull(instant21);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertNotNull(getChartDataV2_25);
        org.junit.Assert.assertNotNull(strArray29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(getObservationsV2_32);
        org.junit.Assert.assertNull(strList33);
        org.junit.Assert.assertNotNull(instant37);
        org.junit.Assert.assertNotNull(strArray49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNotNull(getObservationsV2_52);
        org.junit.Assert.assertNotNull(locationDescription55);
        org.junit.Assert.assertNotNull(instant60);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse61);
        org.junit.Assert.assertNotNull(getObservationsV2_64);
        org.junit.Assert.assertNotNull(getChartDataV2_65);
        org.junit.Assert.assertNotNull(getExportObservations67);
        org.junit.Assert.assertNull(instant68);
        org.junit.Assert.assertNull(strList69);
        org.junit.Assert.assertNull(strList70);
    }

    @Test
    public void test24227() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest48.test24227");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisit fieldVisit0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisit();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.GageHeightAtZeroFlowActivity gageHeightAtZeroFlowActivity1 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.GageHeightAtZeroFlowActivity();
        java.time.Instant instant2 = null;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.GageHeightAtZeroFlowActivity gageHeightAtZeroFlowActivity3 = gageHeightAtZeroFlowActivity1.setApplicableSince(instant2);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.GageHeightAtZeroFlowActivity gageHeightAtZeroFlowActivity5 = gageHeightAtZeroFlowActivity3.setIsObserved((java.lang.Boolean) true);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisit fieldVisit6 = fieldVisit0.setGageHeightAtZeroFlowActivity(gageHeightAtZeroFlowActivity5);
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeActivity> dischargeActivityList7 = null;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisit fieldVisit8 = fieldVisit0.setDischargeActivities(dischargeActivityList7);
        fieldVisit0.LocationIdentifier = "/AQUARIUS/Acquisition/v2";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitDataServiceResponse fieldVisitDataServiceResponse11 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitDataServiceResponse();
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeActivity> dischargeActivityList12 = fieldVisitDataServiceResponse11.DischargeActivities;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ControlConditionActivity controlConditionActivity13 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ControlConditionActivity();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ControlCleanedType controlCleanedType14 = null;
        controlConditionActivity13.ControlCleaned = controlCleanedType14;
        java.lang.String str16 = controlConditionActivity13.FlowOverControl;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitDataServiceResponse fieldVisitDataServiceResponse17 = fieldVisitDataServiceResponse11.setControlConditionActivity(controlConditionActivity13);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ControlConditionActivity controlConditionActivity18 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ControlConditionActivity();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ControlCleanedType controlCleanedType19 = null;
        controlConditionActivity18.ControlCleaned = controlCleanedType19;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay21 = null;
        controlConditionActivity18.DistanceToGage = quantityWithDisplay21;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ControlConditionActivity controlConditionActivity24 = controlConditionActivity18.setParty("POST");
        fieldVisitDataServiceResponse11.ControlConditionActivity = controlConditionActivity18;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisit fieldVisit26 = fieldVisit0.setControlConditionActivity(controlConditionActivity18);
        java.lang.String str27 = controlConditionActivity18.getParty();
        org.junit.Assert.assertNotNull(gageHeightAtZeroFlowActivity3);
        org.junit.Assert.assertNotNull(gageHeightAtZeroFlowActivity5);
        org.junit.Assert.assertNotNull(fieldVisit6);
        org.junit.Assert.assertNotNull(fieldVisit8);
        org.junit.Assert.assertNull(dischargeActivityList12);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNotNull(fieldVisitDataServiceResponse17);
        org.junit.Assert.assertNotNull(controlConditionActivity24);
        org.junit.Assert.assertNotNull(fieldVisit26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "POST" + "'", str27, "POST");
    }

    @Test
    public void test24228() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest48.test24228");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostLocation postLocation0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostLocation();
        java.lang.Double double1 = postLocation0.getLatitude();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.LocationBase locationBase3 = postLocation0.setLocationPath("https");
        java.lang.String str4 = locationBase3.getLocationType();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.LocationBase locationBase6 = locationBase3.setLongitude((java.lang.Double) 0.0d);
        java.lang.Double double7 = locationBase6.getElevation();
        org.junit.Assert.assertNull(double1);
        org.junit.Assert.assertNotNull(locationBase3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNotNull(locationBase6);
        org.junit.Assert.assertNull(double7);
    }

    @Test
    public void test24229() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest48.test24229");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationExportIIV2 getObservationExportIIV2_0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationExportIIV2();
        java.util.List<java.lang.String> strList1 = getObservationExportIIV2_0.getCollectionMethodIds();
        java.util.List<java.lang.String> strList2 = getObservationExportIIV2_0.AnalyticalGroupIds;
        getObservationExportIIV2_0.DetectionCondition = "multipart/form-data; boundary=****bbcf5f9e-6ccf-4b63-91ab-6e645caf02af****";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_5 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray8 = new java.lang.String[] { "", "" };
        java.util.ArrayList<java.lang.String> strList9 = new java.util.ArrayList<java.lang.String>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList9, strArray8);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_11 = getObservationsV2_5.setDataClassifications((java.util.List<java.lang.String>) strList9);
        getObservationsV2_11.DepthUnitCustomId = "hi!";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse14 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant15 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse16 = locationDescriptionListServiceResponse14.setNextToken(instant15);
        getObservationsV2_11.EndObservedTime = instant15;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationExportIIV2 getObservationExportIIV2_18 = getObservationExportIIV2_0.setEndModificationTime(instant15);
        getObservationExportIIV2_0.FieldVisitId = "multipart/form-data; boundary=****59879c02-0839-4b96-bc41-a13ebb706be4****";
        getObservationExportIIV2_0.DepthUnitCustomId = "http://MaxDurationhttp/json/reply/Float://multipart/form-data; boundary=****231224c4-98ce-4e30-bd65-1d25287c4abe****";
        org.junit.Assert.assertNull(strList1);
        org.junit.Assert.assertNull(strList2);
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(getObservationsV2_11);
        org.junit.Assert.assertNotNull(instant15);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse16);
        org.junit.Assert.assertNotNull(getObservationExportIIV2_18);
    }

    @Test
    public void test24230() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest48.test24230");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Unit unit0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Unit();
        java.lang.String str1 = unit0.Id;
        java.lang.Double double2 = unit0.getBaseMultiplier();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservedProperty postObservedProperty3 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservedProperty();
        java.lang.Object obj4 = postObservedProperty3.getResponseType();
        java.lang.String str5 = postObservedProperty3.getName();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutActivity putActivity6 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutActivity();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity quantity7 = null;
        putActivity6.Depth = quantity7;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutActivity putActivity9 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutActivity();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity plannedActivity10 = putActivity9.PlannedActivity;
        java.time.OffsetDateTime offsetDateTime11 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutActivity putActivity12 = putActivity9.setEndTime(offsetDateTime11);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocation samplingLocation13 = null;
        putActivity12.SamplingLocation = samplingLocation13;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservedProperty postObservedProperty15 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservedProperty();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UnitGroup unitGroup16 = postObservedProperty15.UnitGroup;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity quantity17 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Unit unit18 = null;
        quantity17.Unit = unit18;
        postObservedProperty15.LowerLimit = quantity17;
        putActivity12.Depth = quantity17;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutActivity putActivity22 = putActivity6.setDepth(quantity17);
        postObservedProperty3.UpperLimit = quantity17;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Unit unit24 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Unit();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes25 = unit24.AuditAttributes;
        unit24.BaseMultiplier = 0.0d;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutAccessGroup putAccessGroup28 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutAccessGroup();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivity samplingPlanPlannedActivity29 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivity();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes30 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivity samplingPlanPlannedActivity31 = samplingPlanPlannedActivity29.setAuditAttributes(auditAttributes30);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes32 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes34 = auditAttributes32.setCreationUserProfileId("'.'SSSSSSS");
        samplingPlanPlannedActivity31.AuditAttributes = auditAttributes32;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes36 = samplingPlanPlannedActivity31.AuditAttributes;
        putAccessGroup28.AuditAttributes = auditAttributes36;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Unit unit38 = unit24.setAuditAttributes(auditAttributes36);
        quantity17.Unit = unit24;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutUnit putUnit40 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutUnit();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutUnit putUnit42 = putUnit40.setName("MinInstant");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UnitGroup unitGroup43 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UnitGroup();
        unitGroup43.CustomId = "https";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UnitGroupSystemCodeType unitGroupSystemCodeType46 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UnitGroup unitGroup47 = unitGroup43.setSystemCode(unitGroupSystemCodeType46);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutUnit putUnit48 = putUnit42.setUnitGroup(unitGroup47);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UnitGroupSystemCodeType unitGroupSystemCodeType49 = null;
        unitGroup47.SystemCode = unitGroupSystemCodeType49;
        unit24.UnitGroup = unitGroup47;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UnitGroupSystemCodeType unitGroupSystemCodeType52 = unitGroup47.getSystemCode();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Unit unit53 = unit0.setUnitGroup(unitGroup47);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Unit unit55 = unit53.setId("yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ");
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(double2);
        org.junit.Assert.assertNotNull(obj4);
        org.junit.Assert.assertEquals(obj4.toString(), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$ObservedProperty");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj4), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$ObservedProperty");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj4), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$ObservedProperty");
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(plannedActivity10);
        org.junit.Assert.assertNotNull(putActivity12);
        org.junit.Assert.assertNull(unitGroup16);
        org.junit.Assert.assertNotNull(putActivity22);
        org.junit.Assert.assertNull(auditAttributes25);
        org.junit.Assert.assertNotNull(samplingPlanPlannedActivity31);
        org.junit.Assert.assertNotNull(auditAttributes34);
        org.junit.Assert.assertNotNull(auditAttributes36);
        org.junit.Assert.assertNotNull(unit38);
        org.junit.Assert.assertNotNull(putUnit42);
        org.junit.Assert.assertNotNull(unitGroup47);
        org.junit.Assert.assertNotNull(putUnit48);
        org.junit.Assert.assertNull(unitGroupSystemCodeType52);
        org.junit.Assert.assertNotNull(unit53);
        org.junit.Assert.assertNotNull(unit55);
    }

    @Test
    public void test24231() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest48.test24231");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ActivityWithDetails activityWithDetails0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ActivityWithDetails();
        activityWithDetails0.LoggerFileName = "'.'SSSSSSS";
        java.time.OffsetDateTime offsetDateTime3 = activityWithDetails0.getEndTime();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.IndexConfiguration indexConfiguration4 = activityWithDetails0.getIndexConfiguration();
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationMinimal> observationMinimalList5 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ActivityWithDetails activityWithDetails6 = activityWithDetails0.setObservations(observationMinimalList5);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Activity activity7 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Activity();
        java.time.OffsetDateTime offsetDateTime8 = activity7.getStartTime();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Activity activity10 = activity7.setLoggerFileName("'.'SSSSSSS");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocation samplingLocation11 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocation();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricConfiguration metricConfiguration12 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricConfiguration();
        java.lang.String str13 = metricConfiguration12.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty observedProperty14 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty();
        observedProperty14.CasNumber = "MinDuration";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricConfiguration metricConfiguration17 = metricConfiguration12.setObservedProperty(observedProperty14);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultType resultType18 = observedProperty14.ResultType;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservedProperty postObservedProperty19 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservedProperty();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UnitGroup unitGroup20 = postObservedProperty19.UnitGroup;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity quantity21 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Unit unit22 = null;
        quantity21.Unit = unit22;
        postObservedProperty19.LowerLimit = quantity21;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity quantity25 = postObservedProperty19.LowerLimit;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Unit unit26 = quantity25.Unit;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty observedProperty27 = observedProperty14.setUpperLimit(quantity25);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocation samplingLocation28 = samplingLocation11.setElevation(quantity25);
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment> domainObjectAttachmentList29 = samplingLocation28.getAttachments();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutFieldVisit putFieldVisit30 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutFieldVisit();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity[] plannedActivityArray31 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity> plannedActivityList32 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity>();
        boolean boolean33 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity>) plannedActivityList32, plannedActivityArray31);
        putFieldVisit30.PlannedActivities = plannedActivityList32;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment35 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment();
        java.lang.String str36 = domainObjectAttachment35.getId();
        java.lang.String str37 = domainObjectAttachment35.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Attachment attachment38 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment39 = domainObjectAttachment35.setAttachment(attachment38);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment40 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment();
        java.lang.String str41 = domainObjectAttachment40.getId();
        java.lang.String str42 = domainObjectAttachment40.getId();
        domainObjectAttachment40.Id = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment46 = domainObjectAttachment40.setId("hi!");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment47 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment();
        java.lang.String str48 = domainObjectAttachment47.getId();
        java.lang.String str49 = domainObjectAttachment47.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Attachment attachment50 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment51 = domainObjectAttachment47.setAttachment(attachment50);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment52 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment();
        java.lang.String str53 = domainObjectAttachment52.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment54 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment();
        java.lang.String str55 = domainObjectAttachment54.getId();
        java.lang.String str56 = domainObjectAttachment54.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Attachment attachment57 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment58 = domainObjectAttachment54.setAttachment(attachment57);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment59 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment();
        java.lang.String str60 = domainObjectAttachment59.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment[] domainObjectAttachmentArray61 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment[] { domainObjectAttachment35, domainObjectAttachment40, domainObjectAttachment47, domainObjectAttachment52, domainObjectAttachment54, domainObjectAttachment59 };
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment> domainObjectAttachmentList62 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment>();
        boolean boolean63 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment>) domainObjectAttachmentList62, domainObjectAttachmentArray61);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutFieldVisit putFieldVisit64 = putFieldVisit30.setAttachments((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment>) domainObjectAttachmentList62);
        samplingLocation28.Attachments = domainObjectAttachmentList62;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Address address66 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocation samplingLocation67 = samplingLocation28.setAddress(address66);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocation samplingLocation69 = samplingLocation67.setHorizontalCollectionMethod("https");
        activity10.SamplingLocation = samplingLocation67;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ActivityWithDetails activityWithDetails71 = activityWithDetails6.setSamplingLocation(samplingLocation67);
        java.lang.String str72 = activityWithDetails6.getId();
        org.junit.Assert.assertNull(offsetDateTime3);
        org.junit.Assert.assertNull(indexConfiguration4);
        org.junit.Assert.assertNotNull(activityWithDetails6);
        org.junit.Assert.assertNull(offsetDateTime8);
        org.junit.Assert.assertNotNull(activity10);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNotNull(metricConfiguration17);
        org.junit.Assert.assertNull(resultType18);
        org.junit.Assert.assertNull(unitGroup20);
        org.junit.Assert.assertNotNull(quantity25);
        org.junit.Assert.assertNull(unit26);
        org.junit.Assert.assertNotNull(observedProperty27);
        org.junit.Assert.assertNotNull(samplingLocation28);
        org.junit.Assert.assertNull(domainObjectAttachmentList29);
        org.junit.Assert.assertNotNull(plannedActivityArray31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNull(str36);
        org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertNotNull(domainObjectAttachment39);
        org.junit.Assert.assertNull(str41);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertNotNull(domainObjectAttachment46);
        org.junit.Assert.assertNull(str48);
        org.junit.Assert.assertNull(str49);
        org.junit.Assert.assertNotNull(domainObjectAttachment51);
        org.junit.Assert.assertNull(str53);
        org.junit.Assert.assertNull(str55);
        org.junit.Assert.assertNull(str56);
        org.junit.Assert.assertNotNull(domainObjectAttachment58);
        org.junit.Assert.assertNull(str60);
        org.junit.Assert.assertNotNull(domainObjectAttachmentArray61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNotNull(putFieldVisit64);
        org.junit.Assert.assertNotNull(samplingLocation67);
        org.junit.Assert.assertNotNull(samplingLocation69);
        org.junit.Assert.assertNotNull(activityWithDetails71);
        org.junit.Assert.assertNull(str72);
    }

    @Test
    public void test24232() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest48.test24232");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Attachment attachment0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Attachment();
        java.lang.String str1 = attachment0.getUrl();
        java.lang.String str2 = attachment0.FileName;
        java.lang.String str3 = attachment0.getFileName();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.AttachmentType attachmentType4 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.AttachmentType.Swami;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Attachment attachment5 = attachment0.setAttachmentType(attachmentType4);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.AttachmentCategory attachmentCategory6 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.AttachmentCategory.LevelSurvey;
        attachment5.AttachmentCategory = attachmentCategory6;
        java.lang.String str8 = attachment5.getUploadedByUser();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Attachment attachment10 = attachment5.setGpsLatitude((java.lang.Double) 10.0d);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertTrue("'" + attachmentType4 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.AttachmentType.Swami + "'", attachmentType4.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.AttachmentType.Swami));
        org.junit.Assert.assertNotNull(attachment5);
        org.junit.Assert.assertTrue("'" + attachmentCategory6 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.AttachmentCategory.LevelSurvey + "'", attachmentCategory6.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.AttachmentCategory.LevelSurvey));
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(attachment10);
    }

    @Test
    public void test24233() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest48.test24233");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.GetFieldVisitReadingsByLocationServiceRequest getFieldVisitReadingsByLocationServiceRequest0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.GetFieldVisitReadingsByLocationServiceRequest();
        java.lang.Boolean boolean1 = getFieldVisitReadingsByLocationServiceRequest0.ApplyRounding;
        getFieldVisitReadingsByLocationServiceRequest0.ApplyDatumConversion = true;
        java.lang.Boolean boolean4 = getFieldVisitReadingsByLocationServiceRequest0.isPublish();
        java.lang.String str5 = getFieldVisitReadingsByLocationServiceRequest0.LocationUniqueId;
        java.lang.String str6 = getFieldVisitReadingsByLocationServiceRequest0.LocationUniqueId;
        java.lang.Boolean boolean7 = getFieldVisitReadingsByLocationServiceRequest0.isApplyDatumConversion();
        org.junit.Assert.assertNull(boolean1);
        org.junit.Assert.assertNull(boolean4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertEquals("'" + boolean7 + "' != '" + true + "'", boolean7, true);
    }

    @Test
    public void test24234() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest48.test24234");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationReferenceStandard locationReferenceStandard0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationReferenceStandard();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationReferenceStandard locationReferenceStandard2 = locationReferenceStandard0.setComments("yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ");
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ReferenceStandardOffset> referenceStandardOffsetList3 = null;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationReferenceStandard locationReferenceStandard4 = locationReferenceStandard2.setReferenceStandardOffsets(referenceStandardOffsetList3);
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ReferenceStandardOffset> referenceStandardOffsetList5 = locationReferenceStandard2.ReferenceStandardOffsets;
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ReferenceStandardOffset> referenceStandardOffsetList6 = locationReferenceStandard2.ReferenceStandardOffsets;
        org.junit.Assert.assertNotNull(locationReferenceStandard2);
        org.junit.Assert.assertNotNull(locationReferenceStandard4);
        org.junit.Assert.assertNull(referenceStandardOffsetList5);
        org.junit.Assert.assertNull(referenceStandardOffsetList6);
    }

    @Test
    public void test24235() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest48.test24235");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutTimeSeries putTimeSeries0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutTimeSeries();
        java.lang.String str1 = putTimeSeries0.Description;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutTimeSeries putTimeSeries3 = putTimeSeries0.setComment("yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSSSSSZZZZZ");
        java.lang.String str4 = putTimeSeries0.SubLocationIdentifier;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutTimeSeries putTimeSeries6 = putTimeSeries0.setDescription("/AQUARIUS/Acquisition/v2");
        java.lang.String str7 = putTimeSeries0.getTimeSeriesUniqueId();
        java.lang.String str8 = putTimeSeries0.getComment();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(putTimeSeries3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNotNull(putTimeSeries6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSSSSSZZZZZ" + "'", str8, "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSSSSSZZZZZ");
    }

    @Test
    public void test24236() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest48.test24236");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisit fieldVisit0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisit();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DatumConversionResult datumConversionResult1 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DatumConversionResult();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DatumConversionResult datumConversionResult3 = datumConversionResult1.setFailureReason("MinInstant");
        fieldVisit0.DatumConversionResult = datumConversionResult3;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.GageHeightAtZeroFlowActivity gageHeightAtZeroFlowActivity5 = fieldVisit0.GageHeightAtZeroFlowActivity;
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CrossSectionSurveyActivity> crossSectionSurveyActivityList6 = fieldVisit0.getCrossSectionSurveyActivity();
        java.lang.String str7 = fieldVisit0.Remarks;
        org.junit.Assert.assertNotNull(datumConversionResult3);
        org.junit.Assert.assertNull(gageHeightAtZeroFlowActivity5);
        org.junit.Assert.assertNull(crossSectionSurveyActivityList6);
        org.junit.Assert.assertNull(str7);
    }

    @Test
    public void test24237() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest48.test24237");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutUnitGroupWithUnit putUnitGroupWithUnit0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutUnitGroupWithUnit();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutUnitGroupWithUnit putUnitGroupWithUnit2 = putUnitGroupWithUnit0.setId("yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutUnitGroupWithUnit putUnitGroupWithUnit3 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutUnitGroupWithUnit();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutUnitGroupWithUnit putUnitGroupWithUnit5 = putUnitGroupWithUnit3.setId("yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UnitGroupSystemCodeType unitGroupSystemCodeType6 = putUnitGroupWithUnit3.SystemCode;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutUnitGroupWithUnit putUnitGroupWithUnit8 = putUnitGroupWithUnit3.setCustomId("/AQUARIUS/Acquisition/v2");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UnitGroupSystemCodeType unitGroupSystemCodeType9 = putUnitGroupWithUnit3.getSystemCode();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UnitGroupSystemCodeType unitGroupSystemCodeType10 = null;
        putUnitGroupWithUnit3.SystemCode = unitGroupSystemCodeType10;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UnitGroupSystemCodeType unitGroupSystemCodeType12 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UnitGroupSystemCodeType.LENGTH;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutUnitGroupWithUnit putUnitGroupWithUnit13 = putUnitGroupWithUnit3.setSystemCode(unitGroupSystemCodeType12);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservedProperty postObservedProperty14 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservedProperty();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservedProperty postObservedProperty16 = postObservedProperty14.setCustomId("hi!");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UnitGroup unitGroup17 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UnitGroup();
        postObservedProperty16.UnitGroup = unitGroup17;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutUnitGroup putUnitGroup19 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutUnitGroup();
        java.lang.String str20 = putUnitGroup19.getCustomId();
        putUnitGroup19.SupportsConversion = false;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutUnitGroupWithUnit putUnitGroupWithUnit23 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutUnitGroupWithUnit();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutUnitGroupWithUnit putUnitGroupWithUnit25 = putUnitGroupWithUnit23.setId("yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UnitGroupSystemCodeType unitGroupSystemCodeType26 = putUnitGroupWithUnit23.SystemCode;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutUnitGroupWithUnit putUnitGroupWithUnit28 = putUnitGroupWithUnit23.setCustomId("/AQUARIUS/Acquisition/v2");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UnitGroupSystemCodeType unitGroupSystemCodeType29 = putUnitGroupWithUnit23.getSystemCode();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UnitGroupSystemCodeType unitGroupSystemCodeType30 = null;
        putUnitGroupWithUnit23.SystemCode = unitGroupSystemCodeType30;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UnitGroupSystemCodeType unitGroupSystemCodeType32 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UnitGroupSystemCodeType.LENGTH;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutUnitGroupWithUnit putUnitGroupWithUnit33 = putUnitGroupWithUnit23.setSystemCode(unitGroupSystemCodeType32);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutUnitGroup putUnitGroup34 = putUnitGroup19.setSystemCode(unitGroupSystemCodeType32);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UnitGroup unitGroup35 = unitGroup17.setSystemCode(unitGroupSystemCodeType32);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutUnitGroupWithUnit putUnitGroupWithUnit36 = putUnitGroupWithUnit3.setSystemCode(unitGroupSystemCodeType32);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutUnitGroupWithUnit putUnitGroupWithUnit37 = putUnitGroupWithUnit2.setSystemCode(unitGroupSystemCodeType32);
        java.lang.Boolean boolean38 = putUnitGroupWithUnit2.getSupportsConversion();
        org.junit.Assert.assertNotNull(putUnitGroupWithUnit2);
        org.junit.Assert.assertNotNull(putUnitGroupWithUnit5);
        org.junit.Assert.assertNull(unitGroupSystemCodeType6);
        org.junit.Assert.assertNotNull(putUnitGroupWithUnit8);
        org.junit.Assert.assertNull(unitGroupSystemCodeType9);
        org.junit.Assert.assertTrue("'" + unitGroupSystemCodeType12 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UnitGroupSystemCodeType.LENGTH + "'", unitGroupSystemCodeType12.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UnitGroupSystemCodeType.LENGTH));
        org.junit.Assert.assertNotNull(putUnitGroupWithUnit13);
        org.junit.Assert.assertNotNull(postObservedProperty16);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNotNull(putUnitGroupWithUnit25);
        org.junit.Assert.assertNull(unitGroupSystemCodeType26);
        org.junit.Assert.assertNotNull(putUnitGroupWithUnit28);
        org.junit.Assert.assertNull(unitGroupSystemCodeType29);
        org.junit.Assert.assertTrue("'" + unitGroupSystemCodeType32 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UnitGroupSystemCodeType.LENGTH + "'", unitGroupSystemCodeType32.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UnitGroupSystemCodeType.LENGTH));
        org.junit.Assert.assertNotNull(putUnitGroupWithUnit33);
        org.junit.Assert.assertNotNull(putUnitGroup34);
        org.junit.Assert.assertNotNull(unitGroup35);
        org.junit.Assert.assertNotNull(putUnitGroupWithUnit36);
        org.junit.Assert.assertNotNull(putUnitGroupWithUnit37);
        org.junit.Assert.assertNull(boolean38);
    }

    @Test
    public void test24238() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest48.test24238");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutObservationV2 putObservationV2_0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutObservationV2();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLaboratory postLaboratory1 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLaboratory();
        java.lang.String str2 = postLaboratory1.Address;
        java.lang.String str3 = postLaboratory1.Name;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivity samplingPlanPlannedActivity4 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivity();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes5 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivity samplingPlanPlannedActivity6 = samplingPlanPlannedActivity4.setAuditAttributes(auditAttributes5);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes7 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes9 = auditAttributes7.setCreationUserProfileId("'.'SSSSSSS");
        samplingPlanPlannedActivity6.AuditAttributes = auditAttributes7;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes11 = samplingPlanPlannedActivity6.AuditAttributes;
        postLaboratory1.AuditAttributes = auditAttributes11;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLaboratory postLaboratory14 = postLaboratory1.setName("yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.TaxonomicResult taxonomicResult15 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.TaxonomicResult();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Taxon taxon16 = taxonomicResult15.Taxon;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes17 = taxonomicResult15.AuditAttributes;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutTag putTag18 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutTag();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlan samplingPlan19 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlan();
        samplingPlan19.SamplingLocationGroupSelectionTypeRandomCount = 0;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationGroupSelectionType samplingLocationGroupSelectionType22 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationGroupSelectionType.ALL;
        samplingPlan19.SamplingLocationGroupSelectionType = samplingLocationGroupSelectionType22;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationGroup samplingLocationGroup24 = samplingPlan19.getSamplingLocationGroup();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes25 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlan samplingPlan26 = samplingPlan19.setAuditAttributes(auditAttributes25);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutTag putTag27 = putTag18.setAuditAttributes(auditAttributes25);
        taxonomicResult15.AuditAttributes = auditAttributes25;
        postLaboratory14.AuditAttributes = auditAttributes25;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutObservationV2 putObservationV2_30 = putObservationV2_0.setAuditAttributes(auditAttributes25);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabInstruction labInstruction31 = putObservationV2_30.LabInstruction;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.NumericResult numericResult32 = putObservationV2_30.getNumericResult();
        java.time.OffsetDateTime offsetDateTime33 = putObservationV2_30.ResultTime;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Activity activity34 = putObservationV2_30.Activity;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationMinimal observationMinimal35 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationMinimal();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenNestedInActivity specimenNestedInActivity36 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationMinimal observationMinimal37 = observationMinimal35.setSpecimen(specimenNestedInActivity36);
        java.time.OffsetDateTime offsetDateTime38 = null;
        observationMinimal37.ObservedTime = offsetDateTime38;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenNestedInActivity specimenNestedInActivity40 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationMinimal observationMinimal41 = observationMinimal37.setSpecimen(specimenNestedInActivity40);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation42 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedFieldResult plannedFieldResult43 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation44 = observation42.setPlannedFieldResult(plannedFieldResult43);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabInstruction labInstruction45 = null;
        observation44.LabInstruction = labInstruction45;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationStatistics observationStatistics47 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation48 = observation44.setStatistics(observationStatistics47);
        java.time.OffsetDateTime offsetDateTime49 = observation48.getResultTime();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultGrade resultGrade50 = observation48.ResultGrade;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.NullMeasureQualifier nullMeasureQualifier51 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation52 = observation48.setNullMeasureQualifier(nullMeasureQualifier51);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservedProperty postObservedProperty53 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservedProperty();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UnitGroup unitGroup54 = postObservedProperty53.UnitGroup;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity quantity55 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Unit unit56 = null;
        quantity55.Unit = unit56;
        postObservedProperty53.LowerLimit = quantity55;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity quantity59 = postObservedProperty53.LowerLimit;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Unit unit60 = quantity59.Unit;
        observation52.Depth = quantity59;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationNestedInSpecimen observationNestedInSpecimen62 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationNestedInSpecimen();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultStatus resultStatus63 = observationNestedInSpecimen62.ResultStatus;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabInstruction labInstruction64 = observationNestedInSpecimen62.getLabInstruction();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabInstruction labInstruction65 = null;
        observationNestedInSpecimen62.LabInstruction = labInstruction65;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty observedProperty67 = observationNestedInSpecimen62.getObservedProperty();
        java.lang.String str68 = observationNestedInSpecimen62.Id;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.TaxonomicResult taxonomicResult69 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.TaxonomicResult();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Taxon taxon70 = taxonomicResult69.Taxon;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes71 = taxonomicResult69.AuditAttributes;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutTag putTag72 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutTag();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlan samplingPlan73 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlan();
        samplingPlan73.SamplingLocationGroupSelectionTypeRandomCount = 0;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationGroupSelectionType samplingLocationGroupSelectionType76 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationGroupSelectionType.ALL;
        samplingPlan73.SamplingLocationGroupSelectionType = samplingLocationGroupSelectionType76;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationGroup samplingLocationGroup78 = samplingPlan73.getSamplingLocationGroup();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes79 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlan samplingPlan80 = samplingPlan73.setAuditAttributes(auditAttributes79);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutTag putTag81 = putTag72.setAuditAttributes(auditAttributes79);
        taxonomicResult69.AuditAttributes = auditAttributes79;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationNestedInSpecimen observationNestedInSpecimen83 = observationNestedInSpecimen62.setTaxonomicResult(taxonomicResult69);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation84 = observation52.setTaxonomicResult(taxonomicResult69);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationMinimal observationMinimal85 = observationMinimal41.setTaxonomicResult(taxonomicResult69);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutObservationV2 putObservationV2_86 = putObservationV2_30.setTaxonomicResult(taxonomicResult69);
        java.lang.String str87 = putObservationV2_86.Id;
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(samplingPlanPlannedActivity6);
        org.junit.Assert.assertNotNull(auditAttributes9);
        org.junit.Assert.assertNotNull(auditAttributes11);
        org.junit.Assert.assertNotNull(postLaboratory14);
        org.junit.Assert.assertNull(taxon16);
        org.junit.Assert.assertNull(auditAttributes17);
        org.junit.Assert.assertTrue("'" + samplingLocationGroupSelectionType22 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationGroupSelectionType.ALL + "'", samplingLocationGroupSelectionType22.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationGroupSelectionType.ALL));
        org.junit.Assert.assertNull(samplingLocationGroup24);
        org.junit.Assert.assertNotNull(samplingPlan26);
        org.junit.Assert.assertNotNull(putTag27);
        org.junit.Assert.assertNotNull(putObservationV2_30);
        org.junit.Assert.assertNull(labInstruction31);
        org.junit.Assert.assertNull(numericResult32);
        org.junit.Assert.assertNull(offsetDateTime33);
        org.junit.Assert.assertNull(activity34);
        org.junit.Assert.assertNotNull(observationMinimal37);
        org.junit.Assert.assertNotNull(observationMinimal41);
        org.junit.Assert.assertNotNull(observation44);
        org.junit.Assert.assertNotNull(observation48);
        org.junit.Assert.assertNull(offsetDateTime49);
        org.junit.Assert.assertNull(resultGrade50);
        org.junit.Assert.assertNotNull(observation52);
        org.junit.Assert.assertNull(unitGroup54);
        org.junit.Assert.assertNotNull(quantity59);
        org.junit.Assert.assertNull(unit60);
        org.junit.Assert.assertNull(resultStatus63);
        org.junit.Assert.assertNull(labInstruction64);
        org.junit.Assert.assertNull(observedProperty67);
        org.junit.Assert.assertNull(str68);
        org.junit.Assert.assertNull(taxon70);
        org.junit.Assert.assertNull(auditAttributes71);
        org.junit.Assert.assertTrue("'" + samplingLocationGroupSelectionType76 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationGroupSelectionType.ALL + "'", samplingLocationGroupSelectionType76.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationGroupSelectionType.ALL));
        org.junit.Assert.assertNull(samplingLocationGroup78);
        org.junit.Assert.assertNotNull(samplingPlan80);
        org.junit.Assert.assertNotNull(putTag81);
        org.junit.Assert.assertNotNull(observationNestedInSpecimen83);
        org.junit.Assert.assertNotNull(observation84);
        org.junit.Assert.assertNotNull(observationMinimal85);
        org.junit.Assert.assertNotNull(putObservationV2_86);
        org.junit.Assert.assertNull(str87);
    }

    @Test
    public void test24239() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest48.test24239");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutObservedProperty putObservedProperty0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutObservedProperty();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity quantity1 = putObservedProperty0.LowerLimit;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutObservedProperty putObservedProperty3 = putObservedProperty0.setDescription("");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisType analysisType4 = putObservedProperty0.AnalysisType;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisType analysisType5 = putObservedProperty0.getAnalysisType();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutObservedProperty putObservedProperty7 = putObservedProperty0.setDescription("yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity quantity8 = putObservedProperty7.getUpperLimit();
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple> importHistoryEventSimpleList9 = putObservedProperty7.ImportHistoryEventSimples;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity quantity10 = null;
        putObservedProperty7.LowerLimit = quantity10;
        org.junit.Assert.assertNull(quantity1);
        org.junit.Assert.assertNotNull(putObservedProperty3);
        org.junit.Assert.assertNull(analysisType4);
        org.junit.Assert.assertNull(analysisType5);
        org.junit.Assert.assertNotNull(putObservedProperty7);
        org.junit.Assert.assertNull(quantity8);
        org.junit.Assert.assertNull(importHistoryEventSimpleList9);
    }

    @Test
    public void test24240() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest48.test24240");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutFieldVisit putFieldVisit0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutFieldVisit();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity[] plannedActivityArray1 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity> plannedActivityList2 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity>) plannedActivityList2, plannedActivityArray1);
        putFieldVisit0.PlannedActivities = plannedActivityList2;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment5 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment();
        java.lang.String str6 = domainObjectAttachment5.getId();
        java.lang.String str7 = domainObjectAttachment5.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Attachment attachment8 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment9 = domainObjectAttachment5.setAttachment(attachment8);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment10 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment();
        java.lang.String str11 = domainObjectAttachment10.getId();
        java.lang.String str12 = domainObjectAttachment10.getId();
        domainObjectAttachment10.Id = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment16 = domainObjectAttachment10.setId("hi!");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment17 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment();
        java.lang.String str18 = domainObjectAttachment17.getId();
        java.lang.String str19 = domainObjectAttachment17.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Attachment attachment20 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment21 = domainObjectAttachment17.setAttachment(attachment20);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment22 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment();
        java.lang.String str23 = domainObjectAttachment22.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment24 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment();
        java.lang.String str25 = domainObjectAttachment24.getId();
        java.lang.String str26 = domainObjectAttachment24.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Attachment attachment27 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment28 = domainObjectAttachment24.setAttachment(attachment27);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment29 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment();
        java.lang.String str30 = domainObjectAttachment29.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment[] domainObjectAttachmentArray31 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment[] { domainObjectAttachment5, domainObjectAttachment10, domainObjectAttachment17, domainObjectAttachment22, domainObjectAttachment24, domainObjectAttachment29 };
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment> domainObjectAttachmentList32 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment>();
        boolean boolean33 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment>) domainObjectAttachmentList32, domainObjectAttachmentArray31);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutFieldVisit putFieldVisit34 = putFieldVisit0.setAttachments((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment>) domainObjectAttachmentList32);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes35 = putFieldVisit0.getAuditAttributes();
        org.junit.Assert.assertNotNull(plannedActivityArray1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(domainObjectAttachment9);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(domainObjectAttachment16);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertNotNull(domainObjectAttachment21);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertNotNull(domainObjectAttachment28);
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertNotNull(domainObjectAttachmentArray31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(putFieldVisit34);
        org.junit.Assert.assertNull(auditAttributes35);
    }

    @Test
    public void test24241() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest48.test24241");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutSensor putSensor0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutSensor();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutSensor putSensor2 = putSensor0.setUniqueId("MinDuration");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.SensorBase sensorBase4 = putSensor2.setManufacturer("");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutSensor putSensor6 = putSensor2.setUniqueId("http://MaxDurationhttp/json/reply/Integer");
        putSensor2.SerialNumber = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ";
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ApplyTagRequest> applyTagRequestList9 = putSensor2.Tags;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.SensorBase sensorBase11 = putSensor2.setMethodCode("yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ");
        org.junit.Assert.assertNotNull(putSensor2);
        org.junit.Assert.assertNotNull(sensorBase4);
        org.junit.Assert.assertNotNull(putSensor6);
        org.junit.Assert.assertNull(applyTagRequestList9);
        org.junit.Assert.assertNotNull(sensorBase11);
    }

    @Test
    public void test24242() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest48.test24242");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitDataServiceRequest fieldVisitDataServiceRequest0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitDataServiceRequest();
        java.lang.String str1 = fieldVisitDataServiceRequest0.getFieldVisitIdentifier();
        java.lang.String str2 = fieldVisitDataServiceRequest0.ConvertToStandardReferenceDatum;
        java.lang.String str3 = fieldVisitDataServiceRequest0.FieldVisitIdentifier;
        fieldVisitDataServiceRequest0.IncludeCrossSectionSurveyProfile = false;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitDataServiceRequest fieldVisitDataServiceRequest7 = fieldVisitDataServiceRequest0.setIncludeInvalidActivities((java.lang.Boolean) false);
        fieldVisitDataServiceRequest7.ApplyRounding = true;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(fieldVisitDataServiceRequest7);
    }

    @Test
    public void test24243() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest48.test24243");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TrendLineAnalysis trendLineAnalysis0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TrendLineAnalysis();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay1 = trendLineAnalysis0.getSlope();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesPoint timeSeriesPoint2 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesPoint();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.StatisticalDateTimeOffset statisticalDateTimeOffset3 = timeSeriesPoint2.getTimestamp();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.StatisticalDateTimeOffset statisticalDateTimeOffset4 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.StatisticalDateTimeOffset();
        java.time.Instant instant5 = statisticalDateTimeOffset4.getDateTimeOffset();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesPoint timeSeriesPoint6 = timeSeriesPoint2.setTimestamp(statisticalDateTimeOffset4);
        trendLineAnalysis0.StartPoint = timeSeriesPoint2;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.GroundWaterMeasurement groundWaterMeasurement8 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.GroundWaterMeasurement();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity pointVelocityDischargeActivity9 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity();
        java.lang.String str10 = pointVelocityDischargeActivity9.SoftwareVersion;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity pointVelocityDischargeActivity12 = pointVelocityDischargeActivity9.setIsValid((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay13 = pointVelocityDischargeActivity12.getVelocityAverage();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary14 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary16 = dischargeSummary14.setPublish((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay17 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay();
        dischargeSummary16.DifferenceDuringVisit = doubleWithDisplay17;
        java.lang.String str19 = doubleWithDisplay17.getDisplay();
        pointVelocityDischargeActivity12.MeanObservationDurationInSeconds = doubleWithDisplay17;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.GroundWaterMeasurement groundWaterMeasurement21 = groundWaterMeasurement8.setHold(doubleWithDisplay17);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VolumetricDischargeReading volumetricDischargeReading22 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VolumetricDischargeReading();
        java.lang.String str23 = volumetricDischargeReading22.getName();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary24 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay25 = dischargeSummary24.getMeanGageHeight();
        java.lang.String str26 = dischargeSummary24.getGageHeightComments();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary28 = dischargeSummary24.setPublish((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay29 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay31 = doubleWithDisplay29.setNumeric((java.lang.Double) 10.0d);
        dischargeSummary24.DurationInHours = doubleWithDisplay31;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VolumetricDischargeReading volumetricDischargeReading33 = volumetricDischargeReading22.setDischarge(doubleWithDisplay31);
        groundWaterMeasurement21.TapeCorrection = doubleWithDisplay31;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TrendLineAnalysis trendLineAnalysis35 = trendLineAnalysis0.setSlopeStandardError(doubleWithDisplay31);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay36 = trendLineAnalysis35.SlopeStandardError;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesPoint timeSeriesPoint37 = trendLineAnalysis35.getStartPoint();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay38 = trendLineAnalysis35.ActualPercentageChange;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay39 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay41 = doubleWithDisplay39.setNumeric((java.lang.Double) 10.0d);
        trendLineAnalysis35.StandardDeviation = doubleWithDisplay41;
        org.junit.Assert.assertNull(doubleWithDisplay1);
        org.junit.Assert.assertNull(statisticalDateTimeOffset3);
        org.junit.Assert.assertNull(instant5);
        org.junit.Assert.assertNotNull(timeSeriesPoint6);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNotNull(pointVelocityDischargeActivity12);
        org.junit.Assert.assertNull(quantityWithDisplay13);
        org.junit.Assert.assertNotNull(dischargeSummary16);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertNotNull(groundWaterMeasurement21);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertNull(quantityWithDisplay25);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertNotNull(dischargeSummary28);
        org.junit.Assert.assertNotNull(doubleWithDisplay31);
        org.junit.Assert.assertNotNull(volumetricDischargeReading33);
        org.junit.Assert.assertNotNull(trendLineAnalysis35);
        org.junit.Assert.assertNotNull(doubleWithDisplay36);
        org.junit.Assert.assertNotNull(timeSeriesPoint37);
        org.junit.Assert.assertNull(doubleWithDisplay38);
        org.junit.Assert.assertNotNull(doubleWithDisplay41);
    }

    @Test
    public void test24244() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest48.test24244");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedPropertyImportSummary observedPropertyImportSummary0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedPropertyImportSummary();
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObservedProperty> importItemObservedPropertyList1 = observedPropertyImportSummary0.ImportItems;
        org.junit.Assert.assertNull(importItemObservedPropertyList1);
    }

    @Test
    public void test24245() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest48.test24245");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Report report0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Report();
        java.lang.String str1 = report0.Description;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Report report3 = report0.setTitle("ZZZZZ");
        java.lang.String str4 = report3.getTitle();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Report report6 = report3.setUserName("MaxDuration");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Report report8 = report6.setLocationUniqueId("multipart/form-data; boundary=****26835278-3e68-484a-a157-468aab2e69a2****");
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(report3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "ZZZZZ" + "'", str4, "ZZZZZ");
        org.junit.Assert.assertNotNull(report6);
        org.junit.Assert.assertNotNull(report8);
    }

    @Test
    public void test24246() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest48.test24246");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutTaxon putTaxon0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutTaxon();
        putTaxon0.ParentId = "http://MaxDurationhttp/json/reply/ArrayList";
        java.lang.String str3 = putTaxon0.Comment;
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple> importHistoryEventSimpleList4 = putTaxon0.getImportHistoryEventSimples();
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple> importHistoryEventSimpleList5 = putTaxon0.ImportHistoryEventSimples;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutTaxon putTaxon7 = putTaxon0.setSource("yyyy'-'MM'-'dd'T'HH':'mm':'ss");
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(importHistoryEventSimpleList4);
        org.junit.Assert.assertNull(importHistoryEventSimpleList5);
        org.junit.Assert.assertNotNull(putTaxon7);
    }

    @Test
    public void test24247() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest48.test24247");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutFieldVisit putFieldVisit0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutFieldVisit();
        java.time.OffsetDateTime offsetDateTime1 = putFieldVisit0.getEndTime();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.FieldTripSimple fieldTripSimple2 = putFieldVisit0.getFieldTrip();
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity> plannedActivityList3 = putFieldVisit0.getPlannedActivities();
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedFieldResult> plannedFieldResultList4 = putFieldVisit0.PlannedFieldResults;
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttribute> extendedAttributeList5 = null;
        putFieldVisit0.ExtendedAttributes = extendedAttributeList5;
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity> plannedActivityList7 = putFieldVisit0.PlannedActivities;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutFieldVisit putFieldVisit8 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutFieldVisit();
        putFieldVisit8.Notes = "MinDuration";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutFieldVisit putFieldVisit11 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutFieldVisit();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity[] plannedActivityArray12 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity> plannedActivityList13 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity>) plannedActivityList13, plannedActivityArray12);
        putFieldVisit11.PlannedActivities = plannedActivityList13;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutFieldVisit putFieldVisit16 = putFieldVisit8.setPlannedActivities((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity>) plannedActivityList13);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ProjectSimple projectSimple17 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ProjectSimple();
        java.lang.String str18 = projectSimple17.Name;
        java.lang.String str19 = projectSimple17.getCustomId();
        projectSimple17.CustomId = "hi!:///AQUARIUS/Provisioning/v1";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ProjectSimple projectSimple23 = projectSimple17.setId("MinDuration");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutFieldVisit putFieldVisit24 = putFieldVisit8.setProject(projectSimple17);
        putFieldVisit0.Project = projectSimple17;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ProjectSimple projectSimple27 = projectSimple17.setId("/AQUARIUS/Provisioning/v1");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ProjectSimple projectSimple29 = projectSimple17.setCustomId("0001-01-01T00:00:00.000Z");
        org.junit.Assert.assertNull(offsetDateTime1);
        org.junit.Assert.assertNull(fieldTripSimple2);
        org.junit.Assert.assertNull(plannedActivityList3);
        org.junit.Assert.assertNull(plannedFieldResultList4);
        org.junit.Assert.assertNull(plannedActivityList7);
        org.junit.Assert.assertNotNull(plannedActivityArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(putFieldVisit16);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertNotNull(projectSimple23);
        org.junit.Assert.assertNotNull(putFieldVisit24);
        org.junit.Assert.assertNotNull(projectSimple27);
        org.junit.Assert.assertNotNull(projectSimple29);
    }

    @Test
    public void test24248() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest48.test24248");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportSummaryObservation importSummaryObservation0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportSummaryObservation();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportSummaryObservation importSummaryObservation2 = importSummaryObservation0.setSummaryReportText("multipart/form-data; boundary=****bbcf5f9e-6ccf-4b63-91ab-6e645caf02af****");
        importSummaryObservation0.NewCount = 10;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple importHistoryEventSimple5 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple();
        java.lang.String str6 = importHistoryEventSimple5.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportType importType7 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportType.OBSERVATION_LABREPORT;
        importHistoryEventSimple5.ImportType = importType7;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UserProfile userProfile9 = importHistoryEventSimple5.getImportedBy();
        java.lang.String str10 = importHistoryEventSimple5.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportSummaryObservation importSummaryObservation11 = importSummaryObservation0.setImportHistoryEventSimple(importHistoryEventSimple5);
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObservation> importItemObservationList12 = importSummaryObservation11.getNonErrorImportItems();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple importHistoryEventSimple13 = importSummaryObservation11.ImportHistoryEventSimple;
        java.lang.String str14 = importHistoryEventSimple13.getTimeZoneOffset();
        org.junit.Assert.assertNotNull(importSummaryObservation2);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + importType7 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportType.OBSERVATION_LABREPORT + "'", importType7.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportType.OBSERVATION_LABREPORT));
        org.junit.Assert.assertNull(userProfile9);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNotNull(importSummaryObservation11);
        org.junit.Assert.assertNull(importItemObservationList12);
        org.junit.Assert.assertNotNull(importHistoryEventSimple13);
        org.junit.Assert.assertNull(str14);
    }

    @Test
    public void test24249() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest48.test24249");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MonitoringMethod monitoringMethod0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MonitoringMethod();
        monitoringMethod0.Parameter = "/AQUARIUS/Acquisition/v2";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MonitoringMethod monitoringMethod4 = monitoringMethod0.setDescription("");
        java.lang.String str5 = monitoringMethod0.Description;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MonitoringMethod monitoringMethod7 = monitoringMethod0.setDescription("http");
        java.lang.String str8 = monitoringMethod7.Description;
        org.junit.Assert.assertNotNull(monitoringMethod4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(monitoringMethod7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "http" + "'", str8, "http");
    }

    @Test
    public void test24250() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest48.test24250");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SearchResultAccessGroup searchResultAccessGroup0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SearchResultAccessGroup();
        searchResultAccessGroup0.Cursor = "/AQUARIUS/Provisioning/v1";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AccessGroup[] accessGroupArray3 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AccessGroup[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AccessGroup> accessGroupList4 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AccessGroup>();
        boolean boolean5 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AccessGroup>) accessGroupList4, accessGroupArray3);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SearchResultAccessGroup searchResultAccessGroup6 = searchResultAccessGroup0.setDomainObjects((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AccessGroup>) accessGroupList4);
        searchResultAccessGroup0.Cursor = "MinDuration";
        java.lang.Integer int9 = searchResultAccessGroup0.getTotalCount();
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AccessGroup> accessGroupList10 = searchResultAccessGroup0.DomainObjects;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SearchResultAccessGroup searchResultAccessGroup11 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SearchResultAccessGroup();
        searchResultAccessGroup11.Cursor = "/AQUARIUS/Provisioning/v1";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AccessGroup[] accessGroupArray14 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AccessGroup[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AccessGroup> accessGroupList15 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AccessGroup>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AccessGroup>) accessGroupList15, accessGroupArray14);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SearchResultAccessGroup searchResultAccessGroup17 = searchResultAccessGroup11.setDomainObjects((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AccessGroup>) accessGroupList15);
        searchResultAccessGroup11.Cursor = "MinDuration";
        java.lang.Integer int20 = searchResultAccessGroup11.getTotalCount();
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AccessGroup> accessGroupList21 = searchResultAccessGroup11.DomainObjects;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SearchResultAccessGroup searchResultAccessGroup22 = searchResultAccessGroup0.setDomainObjects(accessGroupList21);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SearchResultAccessGroup searchResultAccessGroup24 = searchResultAccessGroup22.setCursor("multipart/form-data; boundary=****bbcf5f9e-6ccf-4b63-91ab-6e645caf02af****");
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AccessGroup> accessGroupList25 = searchResultAccessGroup22.DomainObjects;
        org.junit.Assert.assertNotNull(accessGroupArray3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(searchResultAccessGroup6);
        org.junit.Assert.assertNull(int9);
        org.junit.Assert.assertNotNull(accessGroupList10);
        org.junit.Assert.assertNotNull(accessGroupArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(searchResultAccessGroup17);
        org.junit.Assert.assertNull(int20);
        org.junit.Assert.assertNotNull(accessGroupList21);
        org.junit.Assert.assertNotNull(searchResultAccessGroup22);
        org.junit.Assert.assertNotNull(searchResultAccessGroup24);
        org.junit.Assert.assertNotNull(accessGroupList25);
    }

    @Test
    public void test24251() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest48.test24251");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray4 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList5 = new java.util.ArrayList<java.lang.String>();
        boolean boolean6 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList5, strArray4);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags7 = putLocationTags0.setTagUniqueIds(strList5);
        java.util.ArrayList<java.lang.String> strList8 = putLocationTags7.TagUniqueIds;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags10 = putLocationTags7.setLocationUniqueId("https");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags11 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String str12 = putLocationTags11.LocationUniqueId;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ApplyTagRequest applyTagRequest13 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ApplyTagRequest();
        applyTagRequest13.Value = "'.'SSSSSSS";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ApplyTagRequest applyTagRequest16 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ApplyTagRequest();
        java.lang.String str17 = applyTagRequest16.Value;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ApplyTagRequest applyTagRequest18 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ApplyTagRequest();
        java.lang.String str19 = applyTagRequest18.Value;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ApplyTagRequest applyTagRequest20 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ApplyTagRequest();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ApplyTagRequest[] applyTagRequestArray21 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ApplyTagRequest[] { applyTagRequest13, applyTagRequest16, applyTagRequest18, applyTagRequest20 };
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ApplyTagRequest> applyTagRequestList22 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ApplyTagRequest>();
        boolean boolean23 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ApplyTagRequest>) applyTagRequestList22, applyTagRequestArray21);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags24 = putLocationTags11.setTags(applyTagRequestList22);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags25 = putLocationTags7.setTags(applyTagRequestList22);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags27 = putLocationTags25.setLocationUniqueId("'.'SSSSSSS");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags28 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray32 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList33 = new java.util.ArrayList<java.lang.String>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList33, strArray32);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags35 = putLocationTags28.setTagUniqueIds(strList33);
        java.util.ArrayList<java.lang.String> strList36 = putLocationTags35.TagUniqueIds;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags38 = putLocationTags35.setLocationUniqueId("https");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags39 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String str40 = putLocationTags39.LocationUniqueId;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ApplyTagRequest applyTagRequest41 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ApplyTagRequest();
        applyTagRequest41.Value = "'.'SSSSSSS";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ApplyTagRequest applyTagRequest44 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ApplyTagRequest();
        java.lang.String str45 = applyTagRequest44.Value;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ApplyTagRequest applyTagRequest46 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ApplyTagRequest();
        java.lang.String str47 = applyTagRequest46.Value;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ApplyTagRequest applyTagRequest48 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ApplyTagRequest();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ApplyTagRequest[] applyTagRequestArray49 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ApplyTagRequest[] { applyTagRequest41, applyTagRequest44, applyTagRequest46, applyTagRequest48 };
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ApplyTagRequest> applyTagRequestList50 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ApplyTagRequest>();
        boolean boolean51 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ApplyTagRequest>) applyTagRequestList50, applyTagRequestArray49);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags52 = putLocationTags39.setTags(applyTagRequestList50);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags53 = putLocationTags35.setTags(applyTagRequestList50);
        putLocationTags25.Tags = applyTagRequestList50;
        java.util.ArrayList<java.lang.String> strList55 = putLocationTags25.TagUniqueIds;
        org.junit.Assert.assertNotNull(strArray4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(putLocationTags7);
        org.junit.Assert.assertNotNull(strList8);
        org.junit.Assert.assertNotNull(putLocationTags10);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertNotNull(applyTagRequestArray21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(putLocationTags24);
        org.junit.Assert.assertNotNull(putLocationTags25);
        org.junit.Assert.assertNotNull(putLocationTags27);
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(putLocationTags35);
        org.junit.Assert.assertNotNull(strList36);
        org.junit.Assert.assertNotNull(putLocationTags38);
        org.junit.Assert.assertNull(str40);
        org.junit.Assert.assertNull(str45);
        org.junit.Assert.assertNull(str47);
        org.junit.Assert.assertNotNull(applyTagRequestArray49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNotNull(putLocationTags52);
        org.junit.Assert.assertNotNull(putLocationTags53);
        org.junit.Assert.assertNotNull(strList55);
    }

    @Test
    public void test24252() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest48.test24252");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostRole postRole0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostRole();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RoleBase roleBase2 = postRole0.setName("/AQUARIUS/Acquisition/v2://9999-12-31T23:59:59.999Z");
        java.lang.Boolean boolean3 = roleBase2.CanAssignUserRoles;
        java.lang.Boolean boolean4 = roleBase2.isCanRemoveFieldVisits();
        java.lang.Boolean boolean5 = roleBase2.isCanAddAppendConfigurations();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RoleBase roleBase7 = roleBase2.setCanAddOrRemoveLocations((java.lang.Boolean) true);
        roleBase2.CanAddOrRemoveLocations = true;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RoleBase roleBase11 = roleBase2.setCanEditData((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostRole postRole12 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostRole();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RoleBase roleBase14 = postRole12.setName("/AQUARIUS/Acquisition/v2://9999-12-31T23:59:59.999Z");
        java.lang.String str15 = postRole12.Name;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostRole postRole16 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostRole();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RoleApprovalTransition roleApprovalTransition17 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RoleApprovalTransition();
        java.lang.Long long18 = roleApprovalTransition17.getToApprovalLevel();
        java.lang.Long long19 = roleApprovalTransition17.ToApprovalLevel;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RoleApprovalTransition roleApprovalTransition20 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RoleApprovalTransition();
        java.lang.Long long21 = roleApprovalTransition20.getToApprovalLevel();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RoleApprovalTransition roleApprovalTransition22 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RoleApprovalTransition();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RoleApprovalTransition roleApprovalTransition24 = roleApprovalTransition22.setToApprovalLevel((java.lang.Long) (-1L));
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RoleApprovalTransition roleApprovalTransition25 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RoleApprovalTransition();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RoleApprovalTransition roleApprovalTransition27 = roleApprovalTransition25.setToApprovalLevel((java.lang.Long) (-1L));
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RoleApprovalTransition roleApprovalTransition29 = roleApprovalTransition25.setToApprovalLevel((java.lang.Long) 0L);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RoleApprovalTransition roleApprovalTransition30 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RoleApprovalTransition();
        java.lang.Long long31 = roleApprovalTransition30.getToApprovalLevel();
        java.lang.Long long32 = roleApprovalTransition30.ToApprovalLevel;
        java.lang.Long long33 = roleApprovalTransition30.getToApprovalLevel();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RoleApprovalTransition roleApprovalTransition34 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RoleApprovalTransition();
        java.lang.Long long35 = roleApprovalTransition34.getToApprovalLevel();
        java.lang.Long long36 = roleApprovalTransition34.ToApprovalLevel;
        java.lang.Long long37 = roleApprovalTransition34.getToApprovalLevel();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RoleApprovalTransition[] roleApprovalTransitionArray38 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RoleApprovalTransition[] { roleApprovalTransition17, roleApprovalTransition20, roleApprovalTransition24, roleApprovalTransition25, roleApprovalTransition30, roleApprovalTransition34 };
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RoleApprovalTransition> roleApprovalTransitionList39 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RoleApprovalTransition>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RoleApprovalTransition>) roleApprovalTransitionList39, roleApprovalTransitionArray38);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RoleBase roleBase41 = postRole16.setRoleApprovalTransitions(roleApprovalTransitionList39);
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RoleApprovalTransition> roleApprovalTransitionList42 = postRole16.RoleApprovalTransitions;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RoleBase roleBase43 = postRole12.setRoleApprovalTransitions(roleApprovalTransitionList42);
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RoleApprovalTransition> roleApprovalTransitionList44 = postRole12.RoleApprovalTransitions;
        java.lang.Boolean boolean45 = postRole12.CanEditData;
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RoleApprovalTransition> roleApprovalTransitionList46 = postRole12.getRoleApprovalTransitions();
        roleBase2.RoleApprovalTransitions = roleApprovalTransitionList46;
        org.junit.Assert.assertNotNull(roleBase2);
        org.junit.Assert.assertNull(boolean3);
        org.junit.Assert.assertNull(boolean4);
        org.junit.Assert.assertNull(boolean5);
        org.junit.Assert.assertNotNull(roleBase7);
        org.junit.Assert.assertNotNull(roleBase11);
        org.junit.Assert.assertNotNull(roleBase14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "/AQUARIUS/Acquisition/v2://9999-12-31T23:59:59.999Z" + "'", str15, "/AQUARIUS/Acquisition/v2://9999-12-31T23:59:59.999Z");
        org.junit.Assert.assertNull(long18);
        org.junit.Assert.assertNull(long19);
        org.junit.Assert.assertNull(long21);
        org.junit.Assert.assertNotNull(roleApprovalTransition24);
        org.junit.Assert.assertNotNull(roleApprovalTransition27);
        org.junit.Assert.assertNotNull(roleApprovalTransition29);
        org.junit.Assert.assertNull(long31);
        org.junit.Assert.assertNull(long32);
        org.junit.Assert.assertNull(long33);
        org.junit.Assert.assertNull(long35);
        org.junit.Assert.assertNull(long36);
        org.junit.Assert.assertNull(long37);
        org.junit.Assert.assertNotNull(roleApprovalTransitionArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(roleBase41);
        org.junit.Assert.assertNotNull(roleApprovalTransitionList42);
        org.junit.Assert.assertNotNull(roleBase43);
        org.junit.Assert.assertNotNull(roleApprovalTransitionList44);
        org.junit.Assert.assertNull(boolean45);
        org.junit.Assert.assertNotNull(roleApprovalTransitionList46);
    }

    @Test
    public void test24253() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest48.test24253");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeField extendedAttributeField0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeField();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeField extendedAttributeField2 = extendedAttributeField0.setDisplayName("");
        java.lang.Boolean boolean3 = extendedAttributeField2.CanBeEmpty;
        java.lang.String str4 = extendedAttributeField2.DisplayName;
        org.junit.Assert.assertNotNull(extendedAttributeField2);
        org.junit.Assert.assertNull(boolean3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
    }

    @Test
    public void test24254() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest48.test24254");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.EngineeredStructureDischargeActivity engineeredStructureDischargeActivity0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.EngineeredStructureDischargeActivity();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeChannelMeasurement dischargeChannelMeasurement1 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeChannelMeasurement();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ChannelMaterialType channelMaterialType2 = dischargeChannelMeasurement1.getChannelMaterial();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay3 = dischargeChannelMeasurement1.Discharge;
        java.time.Instant instant4 = dischargeChannelMeasurement1.EndTime;
        dischargeChannelMeasurement1.Channel = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSSSSSZZZZZ";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.EngineeredStructureDischargeActivity engineeredStructureDischargeActivity7 = engineeredStructureDischargeActivity0.setDischargeChannelMeasurement(dischargeChannelMeasurement1);
        java.lang.String str8 = engineeredStructureDischargeActivity7.EquationForSelectedStructure;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay9 = engineeredStructureDischargeActivity7.MeanHead;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeChannelMeasurement dischargeChannelMeasurement10 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeChannelMeasurement();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ChannelMaterialType channelMaterialType11 = dischargeChannelMeasurement10.getChannelMaterial();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay12 = null;
        dischargeChannelMeasurement10.Discharge = quantityWithDisplay12;
        dischargeChannelMeasurement10.Comments = "https";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeChannelMeasurement dischargeChannelMeasurement16 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeChannelMeasurement();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ChannelMaterialType channelMaterialType17 = dischargeChannelMeasurement16.getChannelMaterial();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay18 = dischargeChannelMeasurement16.Discharge;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.HorizontalFlowType horizontalFlowType19 = dischargeChannelMeasurement16.getHorizontalFlow();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeChannelMeasurement dischargeChannelMeasurement21 = dischargeChannelMeasurement16.setParty("yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSSSSSZZZZZ");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MeasurementLocationToGageType measurementLocationToGageType22 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MeasurementLocationToGageType.Downstream;
        dischargeChannelMeasurement21.MeasurementLocationToGage = measurementLocationToGageType22;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeChannelMeasurement dischargeChannelMeasurement24 = dischargeChannelMeasurement10.setMeasurementLocationToGage(measurementLocationToGageType22);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DeploymentMethodType deploymentMethodType25 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DeploymentMethodType.Wading;
        dischargeChannelMeasurement10.DeploymentMethod = deploymentMethodType25;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.EngineeredStructureDischargeActivity engineeredStructureDischargeActivity27 = engineeredStructureDischargeActivity7.setDischargeChannelMeasurement(dischargeChannelMeasurement10);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CrossSectionPoint crossSectionPoint28 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CrossSectionPoint();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay29 = null;
        crossSectionPoint28.Distance = quantityWithDisplay29;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay31 = crossSectionPoint28.Depth;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CrossSectionPoint crossSectionPoint32 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CrossSectionPoint();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay33 = null;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CrossSectionPoint crossSectionPoint34 = crossSectionPoint32.setDistance(quantityWithDisplay33);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary35 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay36 = dischargeSummary35.getMeanGageHeight();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay37 = dischargeSummary35.Discharge;
        java.lang.Integer int38 = dischargeSummary35.getGradeCode();
        java.lang.String str39 = dischargeSummary35.MeasurementId;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DatumConvertedQuantityWithDisplay datumConvertedQuantityWithDisplay40 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DatumConvertedQuantityWithDisplay();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary41 = dischargeSummary35.setAlternateRatingDischarge((com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay) datumConvertedQuantityWithDisplay40);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CrossSectionPoint crossSectionPoint42 = crossSectionPoint32.setElevation((com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay) datumConvertedQuantityWithDisplay40);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CrossSectionPoint crossSectionPoint43 = crossSectionPoint28.setDepth((com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay) datumConvertedQuantityWithDisplay40);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay44 = crossSectionPoint28.Depth;
        java.lang.Double double45 = quantityWithDisplay44.Numeric;
        engineeredStructureDischargeActivity27.MeanHead = quantityWithDisplay44;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity pointVelocityDischargeActivity47 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity pointVelocityDischargeActivity49 = pointVelocityDischargeActivity47.setIsValid((java.lang.Boolean) false);
        pointVelocityDischargeActivity47.Manufacturer = "2021.4.62.0";
        java.lang.Boolean boolean52 = pointVelocityDischargeActivity47.HorizontalCoefficientUsed;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeChannelMeasurement dischargeChannelMeasurement53 = pointVelocityDischargeActivity47.DischargeChannelMeasurement;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.EngineeredStructureDischargeActivity engineeredStructureDischargeActivity54 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.EngineeredStructureDischargeActivity();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeChannelMeasurement dischargeChannelMeasurement55 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeChannelMeasurement();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ChannelMaterialType channelMaterialType56 = dischargeChannelMeasurement55.getChannelMaterial();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay57 = dischargeChannelMeasurement55.Discharge;
        java.time.Instant instant58 = dischargeChannelMeasurement55.EndTime;
        dischargeChannelMeasurement55.Channel = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSSSSSZZZZZ";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.EngineeredStructureDischargeActivity engineeredStructureDischargeActivity61 = engineeredStructureDischargeActivity54.setDischargeChannelMeasurement(dischargeChannelMeasurement55);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity pointVelocityDischargeActivity62 = pointVelocityDischargeActivity47.setDischargeChannelMeasurement(dischargeChannelMeasurement55);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay63 = dischargeChannelMeasurement55.getDistanceToGage();
        engineeredStructureDischargeActivity27.DischargeChannelMeasurement = dischargeChannelMeasurement55;
        org.junit.Assert.assertNull(channelMaterialType2);
        org.junit.Assert.assertNull(quantityWithDisplay3);
        org.junit.Assert.assertNull(instant4);
        org.junit.Assert.assertNotNull(engineeredStructureDischargeActivity7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNull(quantityWithDisplay9);
        org.junit.Assert.assertNull(channelMaterialType11);
        org.junit.Assert.assertNull(channelMaterialType17);
        org.junit.Assert.assertNull(quantityWithDisplay18);
        org.junit.Assert.assertNull(horizontalFlowType19);
        org.junit.Assert.assertNotNull(dischargeChannelMeasurement21);
        org.junit.Assert.assertTrue("'" + measurementLocationToGageType22 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MeasurementLocationToGageType.Downstream + "'", measurementLocationToGageType22.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MeasurementLocationToGageType.Downstream));
        org.junit.Assert.assertNotNull(dischargeChannelMeasurement24);
        org.junit.Assert.assertTrue("'" + deploymentMethodType25 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DeploymentMethodType.Wading + "'", deploymentMethodType25.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DeploymentMethodType.Wading));
        org.junit.Assert.assertNotNull(engineeredStructureDischargeActivity27);
        org.junit.Assert.assertNull(quantityWithDisplay31);
        org.junit.Assert.assertNotNull(crossSectionPoint34);
        org.junit.Assert.assertNull(quantityWithDisplay36);
        org.junit.Assert.assertNull(quantityWithDisplay37);
        org.junit.Assert.assertNull(int38);
        org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertNotNull(dischargeSummary41);
        org.junit.Assert.assertNotNull(crossSectionPoint42);
        org.junit.Assert.assertNotNull(crossSectionPoint43);
        org.junit.Assert.assertNotNull(quantityWithDisplay44);
        org.junit.Assert.assertNull(double45);
        org.junit.Assert.assertNotNull(pointVelocityDischargeActivity49);
        org.junit.Assert.assertNull(boolean52);
        org.junit.Assert.assertNull(dischargeChannelMeasurement53);
        org.junit.Assert.assertNull(channelMaterialType56);
        org.junit.Assert.assertNull(quantityWithDisplay57);
        org.junit.Assert.assertNull(instant58);
        org.junit.Assert.assertNotNull(engineeredStructureDischargeActivity61);
        org.junit.Assert.assertNotNull(pointVelocityDischargeActivity62);
        org.junit.Assert.assertNull(quantityWithDisplay63);
    }

    @Test
    public void test24255() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest48.test24255");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.FieldVisitSimple fieldVisitSimple0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.FieldVisitSimple();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationSimple samplingLocationSimple1 = fieldVisitSimple0.getSamplingLocation();
        java.time.OffsetDateTime offsetDateTime2 = fieldVisitSimple0.StartTime;
        java.time.OffsetDateTime offsetDateTime3 = null;
        fieldVisitSimple0.StartTime = offsetDateTime3;
        java.lang.String str5 = fieldVisitSimple0.Notes;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.FieldVisitSimple fieldVisitSimple7 = fieldVisitSimple0.setNotes("https");
        java.time.OffsetDateTime offsetDateTime8 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.FieldVisitSimple fieldVisitSimple9 = fieldVisitSimple7.setStartTime(offsetDateTime8);
        fieldVisitSimple7.Notes = "/api";
        org.junit.Assert.assertNull(samplingLocationSimple1);
        org.junit.Assert.assertNull(offsetDateTime2);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(fieldVisitSimple7);
        org.junit.Assert.assertNotNull(fieldVisitSimple9);
    }

    @Test
    public void test24256() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest48.test24256");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RoundServiceSpecRequest roundServiceSpecRequest0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RoundServiceSpecRequest();
        java.lang.String str1 = roundServiceSpecRequest0.RoundingSpec;
        java.lang.String str2 = roundServiceSpecRequest0.ValueForNaN;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RoundServiceSpecRequest roundServiceSpecRequest3 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RoundServiceSpecRequest();
        java.lang.String str4 = roundServiceSpecRequest3.RoundingSpec;
        java.lang.String str5 = roundServiceSpecRequest3.ValueForNaN;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingModelInputValuesServiceResponse ratingModelInputValuesServiceResponse6 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingModelInputValuesServiceResponse();
        java.lang.Double[] doubleArray8 = new java.lang.Double[] { 0.0d };
        java.util.ArrayList<java.lang.Double> doubleList9 = new java.util.ArrayList<java.lang.Double>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<java.lang.Double>) doubleList9, doubleArray8);
        ratingModelInputValuesServiceResponse6.InputValues = doubleList9;
        java.util.ArrayList<java.lang.Double> doubleList12 = ratingModelInputValuesServiceResponse6.InputValues;
        java.util.ArrayList<java.lang.Double> doubleList13 = ratingModelInputValuesServiceResponse6.InputValues;
        java.util.ArrayList<java.lang.Double> doubleList14 = ratingModelInputValuesServiceResponse6.getInputValues();
        roundServiceSpecRequest3.Data = doubleList14;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingModelOutputValuesServiceRequest ratingModelOutputValuesServiceRequest16 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingModelOutputValuesServiceRequest();
        ratingModelOutputValuesServiceRequest16.ApplyShifts = true;
        java.time.Instant instant19 = ratingModelOutputValuesServiceRequest16.getEffectiveTime();
        java.lang.String str20 = ratingModelOutputValuesServiceRequest16.getRatingModelIdentifier();
        java.time.Instant instant21 = ratingModelOutputValuesServiceRequest16.EffectiveTime;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingModelOutputValuesServiceRequest ratingModelOutputValuesServiceRequest22 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingModelOutputValuesServiceRequest();
        ratingModelOutputValuesServiceRequest22.ApplyShifts = true;
        java.time.Instant instant25 = ratingModelOutputValuesServiceRequest22.getEffectiveTime();
        java.lang.String str26 = ratingModelOutputValuesServiceRequest22.getRatingModelIdentifier();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingModelOutputValuesServiceRequest ratingModelOutputValuesServiceRequest28 = ratingModelOutputValuesServiceRequest22.setApplyShifts((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingModelOutputValuesServiceRequest ratingModelOutputValuesServiceRequest30 = ratingModelOutputValuesServiceRequest28.setRatingModelIdentifier("yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingModelOutputValuesServiceResponse ratingModelOutputValuesServiceResponse31 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingModelOutputValuesServiceResponse();
        java.lang.Double[] doubleArray35 = new java.lang.Double[] { 1.0d, 100.0d, (-1.0d) };
        java.util.ArrayList<java.lang.Double> doubleList36 = new java.util.ArrayList<java.lang.Double>();
        boolean boolean37 = java.util.Collections.addAll((java.util.Collection<java.lang.Double>) doubleList36, doubleArray35);
        ratingModelOutputValuesServiceResponse31.OutputValues = doubleList36;
        ratingModelOutputValuesServiceRequest30.InputValues = doubleList36;
        ratingModelOutputValuesServiceRequest16.InputValues = doubleList36;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RoundServiceSpecRequest roundServiceSpecRequest41 = roundServiceSpecRequest3.setData(doubleList36);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RoundServiceSpecRequest roundServiceSpecRequest42 = roundServiceSpecRequest0.setData(doubleList36);
        java.lang.String str43 = roundServiceSpecRequest0.RoundingSpec;
        java.lang.String str44 = roundServiceSpecRequest0.getRoundingSpec();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingModelInputValuesServiceRequest ratingModelInputValuesServiceRequest45 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingModelInputValuesServiceRequest();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingModelOutputValuesServiceResponse ratingModelOutputValuesServiceResponse46 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingModelOutputValuesServiceResponse();
        java.lang.Double[] doubleArray50 = new java.lang.Double[] { 1.0d, 100.0d, (-1.0d) };
        java.util.ArrayList<java.lang.Double> doubleList51 = new java.util.ArrayList<java.lang.Double>();
        boolean boolean52 = java.util.Collections.addAll((java.util.Collection<java.lang.Double>) doubleList51, doubleArray50);
        ratingModelOutputValuesServiceResponse46.OutputValues = doubleList51;
        ratingModelInputValuesServiceRequest45.OutputValues = doubleList51;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetSamplingLocations getSamplingLocations55 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetSamplingLocations();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ReportListServiceRequest reportListServiceRequest56 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ReportListServiceRequest();
        reportListServiceRequest56.ReportTitle = "MinDuration";
        reportListServiceRequest56.LocationUniqueId = "/AQUARIUS";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportSpecimens getExportSpecimens61 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportSpecimens();
        java.util.List<java.lang.String> strList62 = getExportSpecimens61.getActivityTypes();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Qualifier qualifier63 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Qualifier();
        java.time.Instant instant64 = qualifier63.DateApplied;
        java.lang.String str65 = qualifier63.User;
        java.lang.String str66 = qualifier63.getIdentifier();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest67 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest();
        java.lang.Object obj68 = timeAlignedDataServiceRequest67.getResponseType();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse69 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant70 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse71 = locationDescriptionListServiceResponse69.setNextToken(instant70);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest72 = timeAlignedDataServiceRequest67.setQueryFrom(instant70);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Qualifier qualifier73 = qualifier63.setDateApplied(instant70);
        getExportSpecimens61.Before = instant70;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationRemark locationRemark75 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationRemark();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationRemark locationRemark77 = locationRemark75.setDescription("MaxInstant");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitDataServiceResponse fieldVisitDataServiceResponse78 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitDataServiceResponse();
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CrossSectionSurveyActivity> crossSectionSurveyActivityList79 = fieldVisitDataServiceResponse78.CrossSectionSurveyActivity;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitDataServiceResponse fieldVisitDataServiceResponse81 = fieldVisitDataServiceResponse78.setIdentifier("");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary82 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        dischargeSummary82.Reviewer = "";
        java.time.Instant instant85 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        dischargeSummary82.MeasurementTime = instant85;
        fieldVisitDataServiceResponse78.ResponseTime = instant85;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationRemark locationRemark88 = locationRemark75.setCreateTime(instant85);
        getExportSpecimens61.EndModificationTime = instant85;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ReportListServiceRequest reportListServiceRequest90 = reportListServiceRequest56.setCreatedFrom(instant85);
        getSamplingLocations55.StartModificationTime = instant85;
        ratingModelInputValuesServiceRequest45.EffectiveTime = instant85;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingModelInputValuesServiceRequest ratingModelInputValuesServiceRequest94 = ratingModelInputValuesServiceRequest45.setRatingModelIdentifier("/AQUARIUS/Publish/v2");
        java.util.ArrayList<java.lang.Double> doubleList95 = ratingModelInputValuesServiceRequest94.getOutputValues();
        roundServiceSpecRequest0.Data = doubleList95;
        roundServiceSpecRequest0.RoundingSpec = "'.'SSSSSSS://multipart/form-data; boundary=****e0afd3ef-ab93-4371-a368-4a6f5ef58c71****";
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(doubleList12);
        org.junit.Assert.assertNotNull(doubleList13);
        org.junit.Assert.assertNotNull(doubleList14);
        org.junit.Assert.assertNull(instant19);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNull(instant21);
        org.junit.Assert.assertNull(instant25);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertNotNull(ratingModelOutputValuesServiceRequest28);
        org.junit.Assert.assertNotNull(ratingModelOutputValuesServiceRequest30);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(roundServiceSpecRequest41);
        org.junit.Assert.assertNotNull(roundServiceSpecRequest42);
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertNull(str44);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNull(strList62);
        org.junit.Assert.assertNull(instant64);
        org.junit.Assert.assertNull(str65);
        org.junit.Assert.assertNull(str66);
        org.junit.Assert.assertNotNull(obj68);
        org.junit.Assert.assertEquals(obj68.toString(), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj68), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj68), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertNotNull(instant70);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse71);
        org.junit.Assert.assertNotNull(timeAlignedDataServiceRequest72);
        org.junit.Assert.assertNotNull(qualifier73);
        org.junit.Assert.assertNotNull(locationRemark77);
        org.junit.Assert.assertNull(crossSectionSurveyActivityList79);
        org.junit.Assert.assertNotNull(fieldVisitDataServiceResponse81);
        org.junit.Assert.assertNotNull(instant85);
        org.junit.Assert.assertNotNull(locationRemark88);
        org.junit.Assert.assertNotNull(reportListServiceRequest90);
        org.junit.Assert.assertNotNull(ratingModelInputValuesServiceRequest94);
        org.junit.Assert.assertNotNull(doubleList95);
    }

    @Test
    public void test24257() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest48.test24257");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.PostLocationAttachmentResponse postLocationAttachmentResponse0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.PostLocationAttachmentResponse();
        java.lang.String str1 = postLocationAttachmentResponse0.getComments();
        java.lang.String str2 = postLocationAttachmentResponse0.Comments;
        java.lang.String str3 = postLocationAttachmentResponse0.LocationUniqueId;
        postLocationAttachmentResponse0.Url = "MaxInstant";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.PostLocationAttachmentResponse postLocationAttachmentResponse7 = postLocationAttachmentResponse0.setFileName("hi!:///AQUARIUS/Provisioning/v1");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.PostLocationAttachmentResponse postLocationAttachmentResponse8 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.PostLocationAttachmentResponse();
        java.lang.String str9 = postLocationAttachmentResponse8.getComments();
        java.lang.String str10 = postLocationAttachmentResponse8.Comments;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.PostLocationAttachmentResponse postLocationAttachmentResponse12 = postLocationAttachmentResponse8.setComments("");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.AppliedTag appliedTag13 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.AppliedTag();
        appliedTag13.Key = "9999-12-31T23:59:59.999Z";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.AppliedTag appliedTag17 = appliedTag13.setKey("http");
        java.lang.String str18 = appliedTag17.UniqueId;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.AppliedTag appliedTag19 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.AppliedTag();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.AppliedTag appliedTag21 = appliedTag19.setValue("'.'SSSSSSS");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.AppliedTag appliedTag23 = appliedTag19.setValue("/AQUARIUS/Acquisition/v2://9999-12-31T23:59:59.999Z");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.AppliedTag appliedTag25 = appliedTag19.setValue("");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.AppliedTag[] appliedTagArray26 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.AppliedTag[] { appliedTag17, appliedTag19 };
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.AppliedTag> appliedTagList27 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.AppliedTag>();
        boolean boolean28 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.AppliedTag>) appliedTagList27, appliedTagArray26);
        postLocationAttachmentResponse8.Tags = appliedTagList27;
        postLocationAttachmentResponse7.Tags = appliedTagList27;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(postLocationAttachmentResponse7);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNotNull(postLocationAttachmentResponse12);
        org.junit.Assert.assertNotNull(appliedTag17);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNotNull(appliedTag21);
        org.junit.Assert.assertNotNull(appliedTag23);
        org.junit.Assert.assertNotNull(appliedTag25);
        org.junit.Assert.assertNotNull(appliedTagArray26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
    }

    @Test
    public void test24258() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest48.test24258");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.User user0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.User();
        java.util.List<java.lang.String> strList1 = user0.getRoles();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.User user3 = user0.setEmail("hi!");
        java.lang.String str4 = user0.Email;
        java.util.List<java.lang.String> strList5 = user0.getAccessGroups();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.User user7 = user0.setCustomId("multipart/form-data; boundary=****59879c02-0839-4b96-bc41-a13ebb706be4****");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostUser postUser8 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostUser();
        java.lang.String str9 = postUser8.Id;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostUser postUser11 = postUser8.setCustomId("'.'SSSSSSS");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutUserV2 putUserV2_12 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutUserV2();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UserType userType13 = putUserV2_12.UserType;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetActivities getActivities14 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetActivities();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse15 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary16 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary18 = dischargeSummary16.setPublish((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse19 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant20 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse21 = locationDescriptionListServiceResponse19.setNextToken(instant20);
        dischargeSummary16.MeasurementTime = instant20;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse23 = locationDescriptionListServiceResponse15.setNextToken(instant20);
        java.time.Instant instant24 = locationDescriptionListServiceResponse15.getNextToken();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetActivities getActivities25 = getActivities14.setToStartTime(instant24);
        java.lang.String str26 = getActivities25.getSort();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_27 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.util.List<java.lang.String> strList28 = getObservationsV2_27.SamplingContextTagIds;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_29 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray31 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList32 = new java.util.ArrayList<java.lang.String>();
        boolean boolean33 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList32, strArray31);
        getObservationsV2_29.SpecimenIds = strList32;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags35 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray39 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList40 = new java.util.ArrayList<java.lang.String>();
        boolean boolean41 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList40, strArray39);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags42 = putLocationTags35.setTagUniqueIds(strList40);
        getObservationsV2_29.QualityControlTypes = strList40;
        getObservationsV2_27.ResultGrades = strList40;
        getActivities25.Media = strList40;
        putUserV2_12.AccessGroups = strList40;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UserProfile userProfile47 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutUserV2 putUserV2_48 = putUserV2_12.setUserProfile(userProfile47);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UserType userType49 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UserType.INTERNAL;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutUserV2 putUserV2_50 = putUserV2_12.setUserType(userType49);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostUser postUser51 = postUser11.setUserType(userType49);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UserType userType52 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UserType.SYSTEM;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostUser postUser53 = postUser51.setUserType(userType52);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.User user54 = user7.setUserType(userType52);
        org.junit.Assert.assertNull(strList1);
        org.junit.Assert.assertNotNull(user3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!");
        org.junit.Assert.assertNull(strList5);
        org.junit.Assert.assertNotNull(user7);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(postUser11);
        org.junit.Assert.assertNull(userType13);
        org.junit.Assert.assertNotNull(dischargeSummary18);
        org.junit.Assert.assertNotNull(instant20);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse21);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse23);
        org.junit.Assert.assertNotNull(instant24);
        org.junit.Assert.assertNotNull(getActivities25);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertNull(strList28);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(putLocationTags42);
        org.junit.Assert.assertNotNull(putUserV2_48);
        org.junit.Assert.assertTrue("'" + userType49 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UserType.INTERNAL + "'", userType49.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UserType.INTERNAL));
        org.junit.Assert.assertNotNull(putUserV2_50);
        org.junit.Assert.assertNotNull(postUser51);
        org.junit.Assert.assertTrue("'" + userType52 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UserType.SYSTEM + "'", userType52.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UserType.SYSTEM));
        org.junit.Assert.assertNotNull(postUser53);
        org.junit.Assert.assertNotNull(user54);
    }

    @Test
    public void test24259() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest48.test24259");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary2 = dischargeSummary0.setPublish((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse3 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant4 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse5 = locationDescriptionListServiceResponse3.setNextToken(instant4);
        dischargeSummary0.MeasurementTime = instant4;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary7 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        dischargeSummary7.Reviewer = "";
        java.time.Instant instant10 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        dischargeSummary7.MeasurementTime = instant10;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.BaseFlowType baseFlowType12 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.BaseFlowType.BaseFlow;
        dischargeSummary7.BaseFlow = baseFlowType12;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeUncertainty dischargeUncertainty14 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeUncertainty();
        dischargeSummary7.DischargeUncertainty = dischargeUncertainty14;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QualitativeUncertaintyType qualitativeUncertaintyType16 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QualitativeUncertaintyType.Fair;
        dischargeUncertainty14.QualitativeUncertainty = qualitativeUncertaintyType16;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.UncertaintyType uncertaintyType18 = dischargeUncertainty14.ActiveUncertaintyType;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary19 = dischargeSummary0.setDischargeUncertainty(dischargeUncertainty14);
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.GageHeightReading> gageHeightReadingList20 = dischargeSummary0.getGageHeightReadings();
        dischargeSummary0.MeanGageHeightWasDatumConverted = false;
        org.junit.Assert.assertNotNull(dischargeSummary2);
        org.junit.Assert.assertNotNull(instant4);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse5);
        org.junit.Assert.assertNotNull(instant10);
        org.junit.Assert.assertTrue("'" + baseFlowType12 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.BaseFlowType.BaseFlow + "'", baseFlowType12.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.BaseFlowType.BaseFlow));
        org.junit.Assert.assertTrue("'" + qualitativeUncertaintyType16 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QualitativeUncertaintyType.Fair + "'", qualitativeUncertaintyType16.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QualitativeUncertaintyType.Fair));
        org.junit.Assert.assertNull(uncertaintyType18);
        org.junit.Assert.assertNotNull(dischargeSummary19);
        org.junit.Assert.assertNull(gageHeightReadingList20);
    }

    @Test
    public void test24260() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest48.test24260");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetAnalysisMethod getAnalysisMethod0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetAnalysisMethod();
        java.lang.Object obj1 = getAnalysisMethod0.getResponseType();
        java.lang.String str2 = getAnalysisMethod0.getId();
        java.lang.Object obj3 = getAnalysisMethod0.getResponseType();
        java.lang.String str4 = getAnalysisMethod0.Id;
        org.junit.Assert.assertNotNull(obj1);
        org.junit.Assert.assertEquals(obj1.toString(), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$AnalysisMethod");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj1), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$AnalysisMethod");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj1), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$AnalysisMethod");
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNotNull(obj3);
        org.junit.Assert.assertEquals(obj3.toString(), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$AnalysisMethod");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj3), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$AnalysisMethod");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj3), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$AnalysisMethod");
        org.junit.Assert.assertNull(str4);
    }

    @Test
    public void test24261() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest48.test24261");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostCollectionMethod postCollectionMethod0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostCollectionMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity postActivity1 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity();
        postActivity1.LoggerFileName = "hi!";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity postActivity5 = postActivity1.setCustomId("");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes6 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity postActivity7 = postActivity5.setAuditAttributes(auditAttributes6);
        postCollectionMethod0.AuditAttributes = auditAttributes6;
        java.lang.String str9 = postCollectionMethod0.CustomId;
        java.lang.String str10 = postCollectionMethod0.getIdentifierOrganization();
        org.junit.Assert.assertNotNull(postActivity5);
        org.junit.Assert.assertNotNull(postActivity7);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNull(str10);
    }

    @Test
    public void test24262() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest48.test24262");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutCredentialsUser putCredentialsUser0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutCredentialsUser();
        java.lang.String str1 = putCredentialsUser0.Password;
        putCredentialsUser0.CanLaunchRatingDevelopmentToolbox = true;
        org.junit.Assert.assertNull(str1);
    }

    @Test
    public void test24263() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest48.test24263");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedPoint timeAlignedPoint0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedPoint();
        timeAlignedPoint0.Method9 = "multipart/form-data; boundary=****7eff1774-b6b0-471a-961c-156c64359366****";
        timeAlignedPoint0.DisplayValue9 = "";
        java.lang.String str5 = timeAlignedPoint0.getApprovalName4();
        java.lang.Long long6 = timeAlignedPoint0.getGradeCode3();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedPoint timeAlignedPoint8 = timeAlignedPoint0.setMethod10("hi!:///AQUARIUS/Provisioning/v1");
        timeAlignedPoint8.DisplayValue8 = "https";
        java.lang.String str11 = timeAlignedPoint8.Method7;
        timeAlignedPoint8.Method8 = "multipart/form-data; boundary=****3dee2050-7d6c-400f-bd51-383a1324f5dd****";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedPoint timeAlignedPoint15 = timeAlignedPoint8.setQualifiers1("'.'SSSSSSS://multipart/form-data; boundary=****e0afd3ef-ab93-4371-a368-4a6f5ef58c71****");
        java.lang.String str16 = timeAlignedPoint15.getApprovalName8();
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(long6);
        org.junit.Assert.assertNotNull(timeAlignedPoint8);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNotNull(timeAlignedPoint15);
        org.junit.Assert.assertNull(str16);
    }

    @Test
    public void test24264() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest48.test24264");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSpecimen putSpecimen0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSpecimen();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Activity activity1 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Activity();
        putSpecimen0.Activity = activity1;
        java.lang.String str3 = activity1.Id;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ActivityType activityType4 = activity1.getType();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Device device5 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Device();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Device device7 = device5.setType("/AQUARIUS/Acquisition/v2");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Device device9 = device7.setType("/AQUARIUS/Acquisition/v2://9999-12-31T23:59:59.999Z");
        java.lang.String str10 = device7.getType();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Activity activity11 = activity1.setDevice(device7);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Activity activity13 = activity11.setCustomId("ZZZZZ");
        java.time.OffsetDateTime offsetDateTime14 = activity11.EndTime;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSpecimen putSpecimen15 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSpecimen();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSpecimen putSpecimen17 = putSpecimen15.setNumberOfRequestedObservations((java.lang.Integer) 4);
        java.lang.String str18 = putSpecimen15.getDescription();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate19 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSpecimen putSpecimen20 = putSpecimen15.setTemplateCreatedFrom(specimenTemplate19);
        putSpecimen15.Filtered = false;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity postActivity23 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity();
        postActivity23.LoggerFileName = "hi!";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity postActivity27 = postActivity23.setCustomId("");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutActivity putActivity28 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutActivity();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity plannedActivity29 = null;
        putActivity28.PlannedActivity = plannedActivity29;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity postActivity31 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity();
        postActivity31.LoggerFileName = "hi!";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity plannedActivity34 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity postActivity35 = postActivity31.setPlannedActivity(plannedActivity34);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag samplingContextTag36 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag();
        java.lang.String str37 = samplingContextTag36.getDescription();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes38 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag samplingContextTag39 = samplingContextTag36.setAuditAttributes(auditAttributes38);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag samplingContextTag41 = samplingContextTag39.setId("yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag samplingContextTag42 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag();
        java.lang.String str43 = samplingContextTag42.getDescription();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag samplingContextTag44 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag();
        java.lang.String str45 = samplingContextTag44.getDescription();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes46 = null;
        samplingContextTag44.AuditAttributes = auditAttributes46;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag samplingContextTag48 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag();
        java.lang.String str49 = samplingContextTag48.getDescription();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes50 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag samplingContextTag51 = samplingContextTag48.setAuditAttributes(auditAttributes50);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag[] samplingContextTagArray52 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag[] { samplingContextTag41, samplingContextTag42, samplingContextTag44, samplingContextTag51 };
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag> samplingContextTagList53 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag>();
        boolean boolean54 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag>) samplingContextTagList53, samplingContextTagArray52);
        postActivity31.SamplingContextTags = samplingContextTagList53;
        putActivity28.SamplingContextTags = samplingContextTagList53;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity postActivity57 = postActivity27.setSamplingContextTags((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag>) samplingContextTagList53);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity postActivity58 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttribute[] extendedAttributeArray59 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttribute[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttribute> extendedAttributeList60 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttribute>();
        boolean boolean61 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttribute>) extendedAttributeList60, extendedAttributeArray59);
        postActivity58.ExtendedAttributes = extendedAttributeList60;
        postActivity57.ExtendedAttributes = extendedAttributeList60;
        putSpecimen15.ExtendedAttributes = extendedAttributeList60;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Activity activity65 = activity11.setExtendedAttributes((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttribute>) extendedAttributeList60);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Activity activity67 = activity65.setLoggerFileName("multipart/form-data; boundary=****ebf59e0e-2d1f-43bc-996f-3c628a80f696****");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.CollectionMethod collectionMethod68 = activity65.CollectionMethod;
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(activityType4);
        org.junit.Assert.assertNotNull(device7);
        org.junit.Assert.assertNotNull(device9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "/AQUARIUS/Acquisition/v2://9999-12-31T23:59:59.999Z" + "'", str10, "/AQUARIUS/Acquisition/v2://9999-12-31T23:59:59.999Z");
        org.junit.Assert.assertNotNull(activity11);
        org.junit.Assert.assertNotNull(activity13);
        org.junit.Assert.assertNull(offsetDateTime14);
        org.junit.Assert.assertNotNull(putSpecimen17);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNotNull(putSpecimen20);
        org.junit.Assert.assertNotNull(postActivity27);
        org.junit.Assert.assertNotNull(postActivity35);
        org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertNotNull(samplingContextTag39);
        org.junit.Assert.assertNotNull(samplingContextTag41);
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertNull(str45);
        org.junit.Assert.assertNull(str49);
        org.junit.Assert.assertNotNull(samplingContextTag51);
        org.junit.Assert.assertNotNull(samplingContextTagArray52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(postActivity57);
        org.junit.Assert.assertNotNull(extendedAttributeArray59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(activity65);
        org.junit.Assert.assertNotNull(activity67);
        org.junit.Assert.assertNull(collectionMethod68);
    }

    @Test
    public void test24265() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest48.test24265");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDataServiceResponse locationDataServiceResponse0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDataServiceResponse();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDescription timeSeriesDescription1 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDescription();
        java.time.Instant instant2 = timeSeriesDescription1.getCorrectedStartTime();
        java.lang.String str3 = timeSeriesDescription1.getComputationIdentifier();
        timeSeriesDescription1.TimeSeriesType = "-PT87591240H";
        java.lang.String str6 = timeSeriesDescription1.getIdentifier();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_7 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray10 = new java.lang.String[] { "", "" };
        java.util.ArrayList<java.lang.String> strList11 = new java.util.ArrayList<java.lang.String>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList11, strArray10);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_13 = getObservationsV2_7.setDataClassifications((java.util.List<java.lang.String>) strList11);
        java.util.List<java.lang.String> strList14 = getObservationsV2_7.ResultGrades;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary15 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        dischargeSummary15.Reviewer = "";
        java.time.Instant instant18 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        dischargeSummary15.MeasurementTime = instant18;
        getObservationsV2_7.StartResultTime = instant18;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDescription timeSeriesDescription21 = timeSeriesDescription1.setCorrectedStartTime(instant18);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetActivities getActivities22 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetActivities();
        getActivities22.Limit = 10;
        java.util.List<java.lang.String> strList25 = getActivities22.ActivityTemplateId;
        java.lang.String str26 = getActivities22.Sort;
        java.util.List<java.lang.String> strList27 = getActivities22.CollectionMethodIds;
        java.lang.String str28 = getActivities22.getCustomId();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitDescriptionListServiceResponse fieldVisitDescriptionListServiceResponse29 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitDescriptionListServiceResponse();
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitDescription> fieldVisitDescriptionList30 = fieldVisitDescriptionListServiceResponse29.getDeletedFieldVisitDescriptions();
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitDescription> fieldVisitDescriptionList31 = fieldVisitDescriptionListServiceResponse29.DeletedFieldVisitDescriptions;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary32 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        dischargeSummary32.Reviewer = "";
        java.time.Instant instant35 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        dischargeSummary32.MeasurementTime = instant35;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.BaseFlowType baseFlowType37 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.BaseFlowType.BaseFlow;
        dischargeSummary32.BaseFlow = baseFlowType37;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.BaseFlowType baseFlowType39 = dischargeSummary32.BaseFlow;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingModelDescriptionListServiceResponse ratingModelDescriptionListServiceResponse40 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingModelDescriptionListServiceResponse();
        java.util.List<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingModelDescription> ratingModelDescriptionList41 = ratingModelDescriptionListServiceResponse40.RatingModelDescriptions;
        java.time.Instant instant42 = ratingModelDescriptionListServiceResponse40.getNextToken();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CalibrationCheck calibrationCheck43 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CalibrationCheck();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CalibrationCheckType calibrationCheckType44 = calibrationCheck43.getCalibrationCheckType();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay45 = calibrationCheck43.Value;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse46 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary47 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary49 = dischargeSummary47.setPublish((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse50 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant51 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse52 = locationDescriptionListServiceResponse50.setNextToken(instant51);
        dischargeSummary47.MeasurementTime = instant51;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse54 = locationDescriptionListServiceResponse46.setNextToken(instant51);
        java.time.Instant instant55 = locationDescriptionListServiceResponse46.getNextToken();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CalibrationCheck calibrationCheck56 = calibrationCheck43.setTime(instant55);
        java.time.Instant instant57 = calibrationCheck56.Time;
        ratingModelDescriptionListServiceResponse40.NextToken = instant57;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary59 = dischargeSummary32.setMeasurementEndTime(instant57);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PublishServiceResponse publishServiceResponse60 = fieldVisitDescriptionListServiceResponse29.setResponseTime(instant57);
        getActivities22.FromStartTime = instant57;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDescription timeSeriesDescription62 = timeSeriesDescription21.setRawStartTime(instant57);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDescription timeSeriesDescription64 = timeSeriesDescription21.setParameterId("http://MaxDurationhttp/json/reply/ArrayList");
        java.time.Instant instant65 = timeSeriesDescription21.RawEndTime;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDescription timeSeriesDescription66 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDescription();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest67 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest();
        java.lang.Object obj68 = timeAlignedDataServiceRequest67.getResponseType();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse69 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant70 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse71 = locationDescriptionListServiceResponse69.setNextToken(instant70);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest72 = timeAlignedDataServiceRequest67.setQueryFrom(instant70);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDescription timeSeriesDescription73 = timeSeriesDescription66.setRawStartTime(instant70);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDescription timeSeriesDescription75 = timeSeriesDescription73.setSubLocationIdentifier("");
        java.time.Instant instant76 = timeSeriesDescription73.LastModified;
        java.lang.Boolean boolean77 = timeSeriesDescription73.isPublish();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ExtendedAttribute[] extendedAttributeArray78 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ExtendedAttribute[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ExtendedAttribute> extendedAttributeList79 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ExtendedAttribute>();
        boolean boolean80 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ExtendedAttribute>) extendedAttributeList79, extendedAttributeArray78);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDescription timeSeriesDescription81 = timeSeriesDescription73.setExtendedAttributes((java.util.List<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ExtendedAttribute>) extendedAttributeList79);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDescription timeSeriesDescription82 = timeSeriesDescription21.setExtendedAttributes((java.util.List<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ExtendedAttribute>) extendedAttributeList79);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDataServiceResponse locationDataServiceResponse83 = locationDataServiceResponse0.setExtendedAttributes(extendedAttributeList79);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDataServiceResponse locationDataServiceResponse85 = locationDataServiceResponse83.setIsExternalLocation((java.lang.Boolean) false);
        java.lang.Double double86 = locationDataServiceResponse83.getSrid();
        org.junit.Assert.assertNull(instant2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(getObservationsV2_13);
        org.junit.Assert.assertNull(strList14);
        org.junit.Assert.assertNotNull(instant18);
        org.junit.Assert.assertNotNull(timeSeriesDescription21);
        org.junit.Assert.assertNull(strList25);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertNull(strList27);
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertNull(fieldVisitDescriptionList30);
        org.junit.Assert.assertNull(fieldVisitDescriptionList31);
        org.junit.Assert.assertNotNull(instant35);
        org.junit.Assert.assertTrue("'" + baseFlowType37 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.BaseFlowType.BaseFlow + "'", baseFlowType37.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.BaseFlowType.BaseFlow));
        org.junit.Assert.assertTrue("'" + baseFlowType39 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.BaseFlowType.BaseFlow + "'", baseFlowType39.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.BaseFlowType.BaseFlow));
        org.junit.Assert.assertNull(ratingModelDescriptionList41);
        org.junit.Assert.assertNull(instant42);
        org.junit.Assert.assertNull(calibrationCheckType44);
        org.junit.Assert.assertNull(doubleWithDisplay45);
        org.junit.Assert.assertNotNull(dischargeSummary49);
        org.junit.Assert.assertNotNull(instant51);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse52);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse54);
        org.junit.Assert.assertNotNull(instant55);
        org.junit.Assert.assertNotNull(calibrationCheck56);
        org.junit.Assert.assertNotNull(instant57);
        org.junit.Assert.assertNotNull(dischargeSummary59);
        org.junit.Assert.assertNotNull(publishServiceResponse60);
        org.junit.Assert.assertNotNull(timeSeriesDescription62);
        org.junit.Assert.assertNotNull(timeSeriesDescription64);
        org.junit.Assert.assertNull(instant65);
        org.junit.Assert.assertNotNull(obj68);
        org.junit.Assert.assertEquals(obj68.toString(), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj68), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj68), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertNotNull(instant70);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse71);
        org.junit.Assert.assertNotNull(timeAlignedDataServiceRequest72);
        org.junit.Assert.assertNotNull(timeSeriesDescription73);
        org.junit.Assert.assertNotNull(timeSeriesDescription75);
        org.junit.Assert.assertNull(instant76);
        org.junit.Assert.assertNull(boolean77);
        org.junit.Assert.assertNotNull(extendedAttributeArray78);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(timeSeriesDescription81);
        org.junit.Assert.assertNotNull(timeSeriesDescription82);
        org.junit.Assert.assertNotNull(locationDataServiceResponse83);
        org.junit.Assert.assertNotNull(locationDataServiceResponse85);
        org.junit.Assert.assertNull(double86);
    }

    @Test
    public void test24266() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest48.test24266");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFieldVisitActivityFromPlannedActivity postFieldVisitActivityFromPlannedActivity0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFieldVisitActivityFromPlannedActivity();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.CollectionMethod collectionMethod1 = postFieldVisitActivityFromPlannedActivity0.getCollectionMethod();
        java.lang.String str2 = postFieldVisitActivityFromPlannedActivity0.getId();
        java.lang.String str3 = postFieldVisitActivityFromPlannedActivity0.Instruction;
        org.junit.Assert.assertNull(collectionMethod1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(str3);
    }

    @Test
    public void test24267() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest48.test24267");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObservation importItemObservation0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObservation();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation1 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation();
        observation1.CustomId = "hi!";
        java.lang.String str4 = observation1.CustomId;
        java.lang.String str5 = observation1.getComment();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty observedProperty6 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation7 = observation1.setObservedProperty(observedProperty6);
        java.lang.String str8 = observation7.Comment;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Medium medium9 = observation7.getMedium();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.TaxonomicResult taxonomicResult10 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation11 = observation7.setTaxonomicResult(taxonomicResult10);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObservation importItemObservation12 = importItemObservation0.setExistingItem(observation11);
        java.lang.Object obj13 = importItemObservation0.getErrors();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation14 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation();
        observation14.CustomId = "hi!";
        java.lang.String str17 = observation14.CustomId;
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.RuleValidationDetails> ruleValidationDetailsList18 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation19 = observation14.setValidationWarnings(ruleValidationDetailsList18);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.CollectionMethod collectionMethod20 = observation19.CollectionMethod;
        importItemObservation0.ExistingItem = observation19;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemStatusType importItemStatusType22 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObservation importItemObservation23 = importItemObservation0.setStatus(importItemStatusType22);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation24 = importItemObservation0.ExistingItem;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation25 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedFieldResult plannedFieldResult26 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation27 = observation25.setPlannedFieldResult(plannedFieldResult26);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabInstruction labInstruction28 = null;
        observation27.LabInstruction = labInstruction28;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationStatistics observationStatistics30 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation31 = observation27.setStatistics(observationStatistics30);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Taxon taxon32 = null;
        observation27.RelatedTaxon = taxon32;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricConfiguration metricConfiguration34 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricConfiguration();
        java.lang.String str35 = metricConfiguration34.getId();
        metricConfiguration34.CustomId = "/AQUARIUS/Acquisition/v2";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty observedProperty38 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricConfiguration metricConfiguration39 = metricConfiguration34.setObservedProperty(observedProperty38);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AggregationType aggregationType40 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AggregationType.SUM;
        metricConfiguration34.AggregationType = aggregationType40;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricConfiguration metricConfiguration42 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricConfiguration();
        java.lang.String str43 = metricConfiguration42.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty observedProperty44 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty();
        observedProperty44.CasNumber = "MinDuration";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricConfiguration metricConfiguration47 = metricConfiguration42.setObservedProperty(observedProperty44);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultType resultType48 = observedProperty44.ResultType;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservedProperty postObservedProperty49 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservedProperty();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UnitGroup unitGroup50 = postObservedProperty49.UnitGroup;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity quantity51 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Unit unit52 = null;
        quantity51.Unit = unit52;
        postObservedProperty49.LowerLimit = quantity51;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity quantity55 = postObservedProperty49.LowerLimit;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Unit unit56 = quantity55.Unit;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty observedProperty57 = observedProperty44.setUpperLimit(quantity55);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLabAnalysisMethod postLabAnalysisMethod58 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLabAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation59 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation();
        observation59.CustomId = "hi!";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.CategoricalResult categoricalResult62 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation63 = observation59.setCategoricalResult(categoricalResult62);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple[] importHistoryEventSimpleArray64 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple> importHistoryEventSimpleList65 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple>();
        boolean boolean66 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple>) importHistoryEventSimpleList65, importHistoryEventSimpleArray64);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation67 = observation59.setImportHistoryEventSimples((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple>) importHistoryEventSimpleList65);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLabAnalysisMethod postLabAnalysisMethod68 = postLabAnalysisMethod58.setImportHistoryEventSimples((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple>) importHistoryEventSimpleList65);
        observedProperty57.ImportHistoryEventSimples = importHistoryEventSimpleList65;
        metricConfiguration34.ObservedProperty = observedProperty57;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLabAnalysisMethod postLabAnalysisMethod71 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLabAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation72 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation();
        observation72.CustomId = "hi!";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.CategoricalResult categoricalResult75 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation76 = observation72.setCategoricalResult(categoricalResult75);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple[] importHistoryEventSimpleArray77 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple> importHistoryEventSimpleList78 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple>();
        boolean boolean79 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple>) importHistoryEventSimpleList78, importHistoryEventSimpleArray77);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation80 = observation72.setImportHistoryEventSimples((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple>) importHistoryEventSimpleList78);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLabAnalysisMethod postLabAnalysisMethod81 = postLabAnalysisMethod71.setImportHistoryEventSimples((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple>) importHistoryEventSimpleList78);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty observedProperty82 = observedProperty57.setImportHistoryEventSimples((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple>) importHistoryEventSimpleList78);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation83 = observation27.setObservedProperty(observedProperty57);
        observation27.Comment = "http:///AQUARIUS/Acquisition/v2multipart/form-data; boundary=****44f0772e-c3ca-4316-8e2a-61ec8540d661****/v1/observedproperties/{id}/categoricalvalues";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails86 = observation27.getLabResultDetails();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.CollectionMethod collectionMethod87 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.CollectionMethod();
        collectionMethod87.Id = "yyyy'-'MM'-'dd'T'HH':'mm':'ss";
        observation27.CollectionMethod = collectionMethod87;
        importItemObservation0.Item = observation27;
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!");
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(observation7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNull(medium9);
        org.junit.Assert.assertNotNull(observation11);
        org.junit.Assert.assertNotNull(importItemObservation12);
        org.junit.Assert.assertNull(obj13);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "hi!" + "'", str17, "hi!");
        org.junit.Assert.assertNotNull(observation19);
        org.junit.Assert.assertNull(collectionMethod20);
        org.junit.Assert.assertNotNull(importItemObservation23);
        org.junit.Assert.assertNotNull(observation24);
        org.junit.Assert.assertNotNull(observation27);
        org.junit.Assert.assertNotNull(observation31);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertNotNull(metricConfiguration39);
        org.junit.Assert.assertTrue("'" + aggregationType40 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AggregationType.SUM + "'", aggregationType40.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AggregationType.SUM));
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertNotNull(metricConfiguration47);
        org.junit.Assert.assertNull(resultType48);
        org.junit.Assert.assertNull(unitGroup50);
        org.junit.Assert.assertNotNull(quantity55);
        org.junit.Assert.assertNull(unit56);
        org.junit.Assert.assertNotNull(observedProperty57);
        org.junit.Assert.assertNotNull(observation63);
        org.junit.Assert.assertNotNull(importHistoryEventSimpleArray64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(observation67);
        org.junit.Assert.assertNotNull(postLabAnalysisMethod68);
        org.junit.Assert.assertNotNull(observation76);
        org.junit.Assert.assertNotNull(importHistoryEventSimpleArray77);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(observation80);
        org.junit.Assert.assertNotNull(postLabAnalysisMethod81);
        org.junit.Assert.assertNotNull(observedProperty82);
        org.junit.Assert.assertNotNull(observation83);
        org.junit.Assert.assertNull(labResultDetails86);
    }

    @Test
    public void test24268() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest48.test24268");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeField extendedAttributeField0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeField();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeField extendedAttributeField2 = extendedAttributeField0.setDisplayName("");
        java.lang.Boolean boolean3 = extendedAttributeField2.CanBeEmpty;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest4 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest();
        java.lang.Object obj5 = timeAlignedDataServiceRequest4.getResponseType();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_6 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray9 = new java.lang.String[] { "", "" };
        java.util.ArrayList<java.lang.String> strList10 = new java.util.ArrayList<java.lang.String>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList10, strArray9);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_12 = getObservationsV2_6.setDataClassifications((java.util.List<java.lang.String>) strList10);
        getObservationsV2_12.DepthUnitCustomId = "hi!";
        java.lang.String str15 = getObservationsV2_12.CustomId;
        java.util.List<java.lang.String> strList16 = getObservationsV2_12.getSearch();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_17 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray19 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList20 = new java.util.ArrayList<java.lang.String>();
        boolean boolean21 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList20, strArray19);
        getObservationsV2_17.SpecimenIds = strList20;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags23 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray27 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList28 = new java.util.ArrayList<java.lang.String>();
        boolean boolean29 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList28, strArray27);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags30 = putLocationTags23.setTagUniqueIds(strList28);
        getObservationsV2_17.QualityControlTypes = strList28;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_32 = getObservationsV2_12.setMedia((java.util.List<java.lang.String>) strList28);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_33 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String str34 = getObservationsV2_33.getCustomId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_35 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray37 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList38 = new java.util.ArrayList<java.lang.String>();
        boolean boolean39 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList38, strArray37);
        getObservationsV2_35.SpecimenIds = strList38;
        getObservationsV2_33.ProjectIds = strList38;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_42 = getObservationsV2_12.setObservedPropertyIds((java.util.List<java.lang.String>) strList38);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest43 = timeAlignedDataServiceRequest4.setTimeSeriesOutputUnitIds(strList38);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeField extendedAttributeField44 = extendedAttributeField2.setValueOptions((java.util.List<java.lang.String>) strList38);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeField extendedAttributeField46 = extendedAttributeField44.setColumnIdentifier("yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeField extendedAttributeField48 = extendedAttributeField46.setUniqueId("yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSSSSSZZZZZ");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeField extendedAttributeField50 = extendedAttributeField48.setCanBeEmpty((java.lang.Boolean) false);
        extendedAttributeField50.DisplayName = "multipart/form-data; boundary=****5b5bcc49-98d5-445c-ae15-d7e16405ad8c****";
        org.junit.Assert.assertNotNull(extendedAttributeField2);
        org.junit.Assert.assertNull(boolean3);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(getObservationsV2_12);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNull(strList16);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(putLocationTags30);
        org.junit.Assert.assertNotNull(getObservationsV2_32);
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(getObservationsV2_42);
        org.junit.Assert.assertNotNull(timeAlignedDataServiceRequest43);
        org.junit.Assert.assertNotNull(extendedAttributeField44);
        org.junit.Assert.assertNotNull(extendedAttributeField46);
        org.junit.Assert.assertNotNull(extendedAttributeField48);
        org.junit.Assert.assertNotNull(extendedAttributeField50);
    }

    @Test
    public void test24269() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest48.test24269");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostSchedule postSchedule0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostSchedule();
        postSchedule0.Id = "0001-01-01T00:00:00.000Z";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Schedule schedule3 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Schedule();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Schedule schedule5 = schedule3.setCustomId("");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SchedulePlannedActivity[] schedulePlannedActivityArray6 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SchedulePlannedActivity[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SchedulePlannedActivity> schedulePlannedActivityList7 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SchedulePlannedActivity>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SchedulePlannedActivity>) schedulePlannedActivityList7, schedulePlannedActivityArray6);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Schedule schedule9 = schedule5.setSchedulePlannedActivities((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SchedulePlannedActivity>) schedulePlannedActivityList7);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostSchedule postSchedule10 = postSchedule0.setSchedulePlannedActivities((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SchedulePlannedActivity>) schedulePlannedActivityList7);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.RecurrenceDayMonthlyType recurrenceDayMonthlyType11 = postSchedule0.RecurrenceDayMonthly;
        java.time.OffsetDateTime offsetDateTime12 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostSchedule postSchedule13 = postSchedule0.setEndDate(offsetDateTime12);
        java.lang.Object obj14 = postSchedule0.getResponseType();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.RecurrenceDayMonthlyType recurrenceDayMonthlyType15 = postSchedule0.RecurrenceDayMonthly;
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SchedulePlannedActivity> schedulePlannedActivityList16 = postSchedule0.getSchedulePlannedActivities();
        java.time.OffsetDateTime offsetDateTime17 = postSchedule0.LastGenerationDate;
        org.junit.Assert.assertNotNull(schedule5);
        org.junit.Assert.assertNotNull(schedulePlannedActivityArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(schedule9);
        org.junit.Assert.assertNotNull(postSchedule10);
        org.junit.Assert.assertNull(recurrenceDayMonthlyType11);
        org.junit.Assert.assertNotNull(postSchedule13);
        org.junit.Assert.assertNotNull(obj14);
        org.junit.Assert.assertEquals(obj14.toString(), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$Schedule");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj14), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$Schedule");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj14), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$Schedule");
        org.junit.Assert.assertNull(recurrenceDayMonthlyType15);
        org.junit.Assert.assertNotNull(schedulePlannedActivityList16);
        org.junit.Assert.assertNull(offsetDateTime17);
    }

    @Test
    public void test24270() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest48.test24270");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.GageHeightAtZeroFlowCalculatedDetails gageHeightAtZeroFlowCalculatedDetails0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.GageHeightAtZeroFlowCalculatedDetails();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay1 = gageHeightAtZeroFlowCalculatedDetails0.Stage;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.AdcpDischargeActivity adcpDischargeActivity2 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.AdcpDischargeActivity();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.AdcpDischargeActivity adcpDischargeActivity4 = adcpDischargeActivity2.setSoftwareVersion("yyyy'-'MM'-'dd'T'HH':'mm':'ss");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay5 = adcpDischargeActivity4.getDischargeCoefficientVariation();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Vertical vertical6 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Vertical();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay7 = null;
        vertical6.EffectiveDepth = quantityWithDisplay7;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Vertical vertical10 = vertical6.setPercentageOfTotalDischarge((java.lang.Double) (-1.0d));
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary11 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary13 = dischargeSummary11.setPublish((java.lang.Boolean) false);
        java.lang.String str14 = dischargeSummary13.Reviewer;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary15 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        dischargeSummary15.Reviewer = "";
        dischargeSummary15.Publish = true;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MeasurementGradeType measurementGradeType20 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MeasurementGradeType.Good;
        dischargeSummary15.MeasurementGrade = measurementGradeType20;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary22 = dischargeSummary13.setMeasurementGrade(measurementGradeType20);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity pointVelocityDischargeActivity23 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity pointVelocityDischargeActivity25 = pointVelocityDischargeActivity23.setIsValid((java.lang.Boolean) false);
        pointVelocityDischargeActivity23.Manufacturer = "2021.4.62.0";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity pointVelocityDischargeActivity29 = pointVelocityDischargeActivity23.setSuspensionWeight("");
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Vertical> verticalList30 = pointVelocityDischargeActivity29.getVerticals();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DatumConvertedQuantityWithDisplay datumConvertedQuantityWithDisplay31 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DatumConvertedQuantityWithDisplay();
        pointVelocityDischargeActivity29.DistanceToMeter = datumConvertedQuantityWithDisplay31;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary33 = dischargeSummary13.setDischarge((com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay) datumConvertedQuantityWithDisplay31);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Vertical vertical34 = vertical10.setEffectiveDepth((com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay) datumConvertedQuantityWithDisplay31);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.AdcpDischargeActivity adcpDischargeActivity35 = adcpDischargeActivity4.setTopEstimateExponent((com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay) datumConvertedQuantityWithDisplay31);
        gageHeightAtZeroFlowCalculatedDetails0.DepthCertainty = datumConvertedQuantityWithDisplay31;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay37 = gageHeightAtZeroFlowCalculatedDetails0.Depth;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CalibrationCheck calibrationCheck38 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CalibrationCheck();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CalibrationCheckType calibrationCheckType39 = calibrationCheck38.getCalibrationCheckType();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay40 = calibrationCheck38.Value;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse41 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary42 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary44 = dischargeSummary42.setPublish((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse45 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant46 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse47 = locationDescriptionListServiceResponse45.setNextToken(instant46);
        dischargeSummary42.MeasurementTime = instant46;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse49 = locationDescriptionListServiceResponse41.setNextToken(instant46);
        java.time.Instant instant50 = locationDescriptionListServiceResponse41.getNextToken();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CalibrationCheck calibrationCheck51 = calibrationCheck38.setTime(instant50);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Reading reading52 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Reading();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary53 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary55 = dischargeSummary53.setPublish((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay56 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay();
        dischargeSummary55.DifferenceDuringVisit = doubleWithDisplay56;
        reading52.Value = doubleWithDisplay56;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CalibrationCheck calibrationCheck59 = calibrationCheck51.setValue(doubleWithDisplay56);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CalibrationCheck calibrationCheck61 = calibrationCheck51.setSubLocationIdentifier("-PT87591240H");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay62 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay();
        calibrationCheck51.Difference = doubleWithDisplay62;
        gageHeightAtZeroFlowCalculatedDetails0.Stage = doubleWithDisplay62;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CrossSectionPoint crossSectionPoint65 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CrossSectionPoint();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay66 = null;
        crossSectionPoint65.Distance = quantityWithDisplay66;
        crossSectionPoint65.PointOrder = 1;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay70 = null;
        crossSectionPoint65.Depth = quantityWithDisplay70;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay72 = crossSectionPoint65.Depth;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay73 = crossSectionPoint65.Depth;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CrossSectionPoint crossSectionPoint74 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CrossSectionPoint();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay75 = null;
        crossSectionPoint74.Distance = quantityWithDisplay75;
        crossSectionPoint74.PointOrder = 1;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay79 = crossSectionPoint74.getElevation();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CrossSectionPoint crossSectionPoint81 = crossSectionPoint74.setComments("hi!");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay82 = null;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CrossSectionPoint crossSectionPoint83 = crossSectionPoint81.setElevation(quantityWithDisplay82);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay84 = null;
        crossSectionPoint83.Depth = quantityWithDisplay84;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DatumConvertedQuantityWithDisplay datumConvertedQuantityWithDisplay86 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DatumConvertedQuantityWithDisplay();
        crossSectionPoint83.Depth = datumConvertedQuantityWithDisplay86;
        java.lang.String str88 = datumConvertedQuantityWithDisplay86.TargetDatum;
        crossSectionPoint65.Distance = datumConvertedQuantityWithDisplay86;
        gageHeightAtZeroFlowCalculatedDetails0.Stage = datumConvertedQuantityWithDisplay86;
        org.junit.Assert.assertNull(doubleWithDisplay1);
        org.junit.Assert.assertNotNull(adcpDischargeActivity4);
        org.junit.Assert.assertNull(doubleWithDisplay5);
        org.junit.Assert.assertNotNull(vertical10);
        org.junit.Assert.assertNotNull(dischargeSummary13);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertTrue("'" + measurementGradeType20 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MeasurementGradeType.Good + "'", measurementGradeType20.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MeasurementGradeType.Good));
        org.junit.Assert.assertNotNull(dischargeSummary22);
        org.junit.Assert.assertNotNull(pointVelocityDischargeActivity25);
        org.junit.Assert.assertNotNull(pointVelocityDischargeActivity29);
        org.junit.Assert.assertNull(verticalList30);
        org.junit.Assert.assertNotNull(dischargeSummary33);
        org.junit.Assert.assertNotNull(vertical34);
        org.junit.Assert.assertNotNull(adcpDischargeActivity35);
        org.junit.Assert.assertNull(doubleWithDisplay37);
        org.junit.Assert.assertNull(calibrationCheckType39);
        org.junit.Assert.assertNull(doubleWithDisplay40);
        org.junit.Assert.assertNotNull(dischargeSummary44);
        org.junit.Assert.assertNotNull(instant46);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse47);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse49);
        org.junit.Assert.assertNotNull(instant50);
        org.junit.Assert.assertNotNull(calibrationCheck51);
        org.junit.Assert.assertNotNull(dischargeSummary55);
        org.junit.Assert.assertNotNull(calibrationCheck59);
        org.junit.Assert.assertNotNull(calibrationCheck61);
        org.junit.Assert.assertNull(quantityWithDisplay72);
        org.junit.Assert.assertNull(quantityWithDisplay73);
        org.junit.Assert.assertNull(quantityWithDisplay79);
        org.junit.Assert.assertNotNull(crossSectionPoint81);
        org.junit.Assert.assertNotNull(crossSectionPoint83);
        org.junit.Assert.assertNull(str88);
    }

    @Test
    public void test24271() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest48.test24271");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.AdcpDischargeActivity adcpDischargeActivity0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.AdcpDischargeActivity();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.AdcpDischargeActivity adcpDischargeActivity2 = adcpDischargeActivity0.setSoftwareVersion("yyyy'-'MM'-'dd'T'HH':'mm':'ss");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay3 = adcpDischargeActivity2.TopEstimateExponent;
        java.lang.String str4 = adcpDischargeActivity2.Model;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay5 = adcpDischargeActivity2.DischargeCoefficientVariation;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay6 = adcpDischargeActivity2.BottomEstimateExponent;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.AdcpDischargeActivity adcpDischargeActivity7 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.AdcpDischargeActivity();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay8 = null;
        adcpDischargeActivity7.TransducerDepth = quantityWithDisplay8;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay10 = null;
        adcpDischargeActivity7.TransducerDepth = quantityWithDisplay10;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.AdcpDischargeActivity adcpDischargeActivity13 = adcpDischargeActivity7.setNumberOfTransects((java.lang.Integer) 4);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.AdcpDischargeActivity adcpDischargeActivity15 = adcpDischargeActivity13.setNodeDetails("0001-01-01T00:00:00.000Z");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary16 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Adjustment adjustment17 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Adjustment();
        java.lang.Double double18 = adjustment17.getAdjustmentAmount();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.AdjustmentType adjustmentType19 = adjustment17.getAdjustmentType();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.AdjustmentType adjustmentType20 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.AdjustmentType.Amount;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Adjustment adjustment21 = adjustment17.setAdjustmentType(adjustmentType20);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary22 = dischargeSummary16.setAdjustment(adjustment21);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay23 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay25 = doubleWithDisplay23.setNumeric((java.lang.Double) 10.0d);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary26 = dischargeSummary22.setDurationInHours(doubleWithDisplay25);
        adcpDischargeActivity13.PercentOfDischargeMeasured = doubleWithDisplay25;
        adcpDischargeActivity2.MagneticVariation = doubleWithDisplay25;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeChannelMeasurement dischargeChannelMeasurement29 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeChannelMeasurement();
        dischargeChannelMeasurement29.MonitoringMethod = "/AQUARIUS/Acquisition/v2";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DeploymentMethodType deploymentMethodType32 = dischargeChannelMeasurement29.getDeploymentMethod();
        java.time.Instant instant33 = dischargeChannelMeasurement29.EndTime;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.AdcpDischargeActivity adcpDischargeActivity34 = adcpDischargeActivity2.setDischargeChannelMeasurement(dischargeChannelMeasurement29);
        java.lang.String str35 = dischargeChannelMeasurement29.getMonitoringMethod();
        org.junit.Assert.assertNotNull(adcpDischargeActivity2);
        org.junit.Assert.assertNull(doubleWithDisplay3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(doubleWithDisplay5);
        org.junit.Assert.assertNull(doubleWithDisplay6);
        org.junit.Assert.assertNotNull(adcpDischargeActivity13);
        org.junit.Assert.assertNotNull(adcpDischargeActivity15);
        org.junit.Assert.assertNull(double18);
        org.junit.Assert.assertNull(adjustmentType19);
        org.junit.Assert.assertTrue("'" + adjustmentType20 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.AdjustmentType.Amount + "'", adjustmentType20.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.AdjustmentType.Amount));
        org.junit.Assert.assertNotNull(adjustment21);
        org.junit.Assert.assertNotNull(dischargeSummary22);
        org.junit.Assert.assertNotNull(doubleWithDisplay25);
        org.junit.Assert.assertNotNull(dischargeSummary26);
        org.junit.Assert.assertNull(deploymentMethodType32);
        org.junit.Assert.assertNull(instant33);
        org.junit.Assert.assertNotNull(adcpDischargeActivity34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "/AQUARIUS/Acquisition/v2" + "'", str35, "/AQUARIUS/Acquisition/v2");
    }

    @Test
    public void test24272() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest48.test24272");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.GetAuthTokenServiceRequest getAuthTokenServiceRequest0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.GetAuthTokenServiceRequest();
        java.lang.String str1 = getAuthTokenServiceRequest0.getUsername();
        getAuthTokenServiceRequest0.Locale = "9999-12-31T23:59:59.999Z";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.GetAuthTokenServiceRequest getAuthTokenServiceRequest5 = getAuthTokenServiceRequest0.setUsername("https");
        java.lang.String str6 = getAuthTokenServiceRequest5.Username;
        java.lang.String str7 = getAuthTokenServiceRequest5.Locale;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(getAuthTokenServiceRequest5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "https" + "'", str6, "https");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "9999-12-31T23:59:59.999Z" + "'", str7, "9999-12-31T23:59:59.999Z");
    }

    @Test
    public void test24273() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest48.test24273");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedPropertyImportSummary observedPropertyImportSummary0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedPropertyImportSummary();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedPropertyImportSummary observedPropertyImportSummary1 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedPropertyImportSummary();
        observedPropertyImportSummary1.ErrorCount = 10;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedPropertyImportSummary observedPropertyImportSummary5 = observedPropertyImportSummary1.setSummaryReportText("");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObservedProperty[] importItemObservedPropertyArray6 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObservedProperty[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObservedProperty> importItemObservedPropertyList7 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObservedProperty>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObservedProperty>) importItemObservedPropertyList7, importItemObservedPropertyArray6);
        observedPropertyImportSummary1.ErrorImportItems = importItemObservedPropertyList7;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedPropertyImportSummary observedPropertyImportSummary11 = observedPropertyImportSummary1.setSuccessCount((java.lang.Integer) 10);
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObservedProperty> importItemObservedPropertyList12 = observedPropertyImportSummary11.getErrorImportItems();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedPropertyImportSummary observedPropertyImportSummary13 = observedPropertyImportSummary0.setErrorImportItems(importItemObservedPropertyList12);
        java.lang.Integer int14 = observedPropertyImportSummary13.SkippedCount;
        observedPropertyImportSummary13.InvalidRowsCsvUrl = "-PT87591240H";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedPropertyImportSummary observedPropertyImportSummary17 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedPropertyImportSummary();
        observedPropertyImportSummary17.ErrorCount = 10;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedPropertyImportSummary observedPropertyImportSummary21 = observedPropertyImportSummary17.setSummaryReportText("");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObservedProperty[] importItemObservedPropertyArray22 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObservedProperty[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObservedProperty> importItemObservedPropertyList23 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObservedProperty>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObservedProperty>) importItemObservedPropertyList23, importItemObservedPropertyArray22);
        observedPropertyImportSummary17.ErrorImportItems = importItemObservedPropertyList23;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedPropertyImportSummary observedPropertyImportSummary26 = observedPropertyImportSummary13.setNonErrorImportItems((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObservedProperty>) importItemObservedPropertyList23);
        org.junit.Assert.assertNotNull(observedPropertyImportSummary5);
        org.junit.Assert.assertNotNull(importItemObservedPropertyArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(observedPropertyImportSummary11);
        org.junit.Assert.assertNotNull(importItemObservedPropertyList12);
        org.junit.Assert.assertNotNull(observedPropertyImportSummary13);
        org.junit.Assert.assertNull(int14);
        org.junit.Assert.assertNotNull(observedPropertyImportSummary21);
        org.junit.Assert.assertNotNull(importItemObservedPropertyArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(observedPropertyImportSummary26);
    }

    @Test
    public void test24274() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest48.test24274");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportSamplingLocations getExportSamplingLocations0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportSamplingLocations();
        java.time.Instant instant1 = getExportSamplingLocations0.getStartModificationTime();
        java.time.Instant instant2 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportSamplingLocations getExportSamplingLocations3 = getExportSamplingLocations0.setEndModificationTime(instant2);
        java.lang.String str4 = getExportSamplingLocations3.Sort;
        org.junit.Assert.assertNull(instant1);
        org.junit.Assert.assertNotNull(getExportSamplingLocations3);
        org.junit.Assert.assertNull(str4);
    }

    @Test
    public void test24275() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest48.test24275");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDatumPeriod locationDatumPeriod0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDatumPeriod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetActivities getActivities1 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetActivities();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse2 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary3 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary5 = dischargeSummary3.setPublish((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse6 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant7 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse8 = locationDescriptionListServiceResponse6.setNextToken(instant7);
        dischargeSummary3.MeasurementTime = instant7;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse10 = locationDescriptionListServiceResponse2.setNextToken(instant7);
        java.time.Instant instant11 = locationDescriptionListServiceResponse2.getNextToken();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetActivities getActivities12 = getActivities1.setToStartTime(instant11);
        java.lang.String str13 = getActivities12.getSort();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetActivities getActivities15 = getActivities12.setLimit((java.lang.Integer) 1);
        getActivities15.Cursor = "";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_18 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray21 = new java.lang.String[] { "", "" };
        java.util.ArrayList<java.lang.String> strList22 = new java.util.ArrayList<java.lang.String>();
        boolean boolean23 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList22, strArray21);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_24 = getObservationsV2_18.setDataClassifications((java.util.List<java.lang.String>) strList22);
        java.util.List<java.lang.String> strList25 = getObservationsV2_18.ResultGrades;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary26 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        dischargeSummary26.Reviewer = "";
        java.time.Instant instant29 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        dischargeSummary26.MeasurementTime = instant29;
        getObservationsV2_18.StartResultTime = instant29;
        java.lang.String[] strArray41 = new java.lang.String[] { "https", "/AQUARIUS/Provisioning/v1", "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ", "2021.4.62.0", "hi!", "2021.4.62.0", "2021.4.62.0", "/AQUARIUS/Acquisition/v2", "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ" };
        java.util.ArrayList<java.lang.String> strList42 = new java.util.ArrayList<java.lang.String>();
        boolean boolean43 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList42, strArray41);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_44 = getObservationsV2_18.setAnalyticalGroupIds((java.util.List<java.lang.String>) strList42);
        getActivities15.ActivityTypes = strList42;
        java.lang.String str46 = getActivities15.Sort;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Qualifier qualifier47 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Qualifier();
        java.time.Instant instant48 = qualifier47.DateApplied;
        java.lang.String str49 = qualifier47.User;
        java.lang.String str50 = qualifier47.getIdentifier();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest51 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest();
        java.lang.Object obj52 = timeAlignedDataServiceRequest51.getResponseType();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse53 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant54 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse55 = locationDescriptionListServiceResponse53.setNextToken(instant54);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest56 = timeAlignedDataServiceRequest51.setQueryFrom(instant54);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Qualifier qualifier57 = qualifier47.setDateApplied(instant54);
        java.time.Instant instant58 = qualifier57.getDateApplied();
        getActivities15.ToStartTime = instant58;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDatumPeriod locationDatumPeriod60 = locationDatumPeriod0.setAppliedTimeUtc(instant58);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeRange timeRange61 = locationDatumPeriod0.TimeRange;
        java.lang.String str62 = locationDatumPeriod0.getComments();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ReferencePointPeriod referencePointPeriod63 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ReferencePointPeriod();
        java.lang.Boolean boolean64 = referencePointPeriod63.IsMeasuredAgainstLocalAssumedDatum;
        referencePointPeriod63.Unit = "/AQUARIUS/Acquisition/v2";
        java.lang.String str67 = referencePointPeriod63.Method;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ReferencePointPeriod referencePointPeriod69 = referencePointPeriod63.setMethod("yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MeasurementDirection measurementDirection70 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MeasurementDirection.FromBottomToTop;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ReferencePointPeriod referencePointPeriod71 = referencePointPeriod63.setMeasurementDirection(measurementDirection70);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDatumPeriod locationDatumPeriod72 = locationDatumPeriod0.setMeasurementDirection(measurementDirection70);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.InterpolationTypeOperation interpolationTypeOperation73 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.InterpolationTypeOperation();
        java.time.Instant instant74 = interpolationTypeOperation73.DateAppliedUtc;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeOperationType metadataChangeOperationType75 = interpolationTypeOperation73.OperationType;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.InterpolationTypeOperation interpolationTypeOperation76 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.InterpolationTypeOperation();
        java.time.Instant instant77 = interpolationTypeOperation76.DateAppliedUtc;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeOperationType metadataChangeOperationType78 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeOperationType.Creation;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.InterpolationTypeOperation interpolationTypeOperation79 = interpolationTypeOperation76.setOperationType(metadataChangeOperationType78);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.InterpolationTypeOperation interpolationTypeOperation80 = interpolationTypeOperation73.setOperationType(metadataChangeOperationType78);
        locationDatumPeriod72.TimeRange = interpolationTypeOperation80;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.InterpolationTypeOperation interpolationTypeOperation83 = interpolationTypeOperation80.setUser("multipart/form-data; boundary=****6b8051d4-caf2-4095-9f11-faa36b95fc28****");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeOperationType metadataChangeOperationType84 = interpolationTypeOperation80.OperationType;
        org.junit.Assert.assertNotNull(dischargeSummary5);
        org.junit.Assert.assertNotNull(instant7);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse8);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse10);
        org.junit.Assert.assertNotNull(instant11);
        org.junit.Assert.assertNotNull(getActivities12);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNotNull(getActivities15);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(getObservationsV2_24);
        org.junit.Assert.assertNull(strList25);
        org.junit.Assert.assertNotNull(instant29);
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(getObservationsV2_44);
        org.junit.Assert.assertNull(str46);
        org.junit.Assert.assertNull(instant48);
        org.junit.Assert.assertNull(str49);
        org.junit.Assert.assertNull(str50);
        org.junit.Assert.assertNotNull(obj52);
        org.junit.Assert.assertEquals(obj52.toString(), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj52), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj52), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertNotNull(instant54);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse55);
        org.junit.Assert.assertNotNull(timeAlignedDataServiceRequest56);
        org.junit.Assert.assertNotNull(qualifier57);
        org.junit.Assert.assertNotNull(instant58);
        org.junit.Assert.assertNotNull(locationDatumPeriod60);
        org.junit.Assert.assertNull(timeRange61);
        org.junit.Assert.assertNull(str62);
        org.junit.Assert.assertNull(boolean64);
        org.junit.Assert.assertNull(str67);
        org.junit.Assert.assertNotNull(referencePointPeriod69);
        org.junit.Assert.assertTrue("'" + measurementDirection70 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MeasurementDirection.FromBottomToTop + "'", measurementDirection70.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MeasurementDirection.FromBottomToTop));
        org.junit.Assert.assertNotNull(referencePointPeriod71);
        org.junit.Assert.assertNotNull(locationDatumPeriod72);
        org.junit.Assert.assertNull(instant74);
        org.junit.Assert.assertNull(metadataChangeOperationType75);
        org.junit.Assert.assertNull(instant77);
        org.junit.Assert.assertTrue("'" + metadataChangeOperationType78 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeOperationType.Creation + "'", metadataChangeOperationType78.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeOperationType.Creation));
        org.junit.Assert.assertNotNull(interpolationTypeOperation79);
        org.junit.Assert.assertNotNull(interpolationTypeOperation80);
        org.junit.Assert.assertNotNull(interpolationTypeOperation83);
        org.junit.Assert.assertTrue("'" + metadataChangeOperationType84 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeOperationType.Creation + "'", metadataChangeOperationType84.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeOperationType.Creation));
    }

    @Test
    public void test24276() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest48.test24276");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpreadsheetTemplate spreadsheetTemplate0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpreadsheetTemplate();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpreadsheetTemplateType spreadsheetTemplateType1 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpreadsheetTemplate spreadsheetTemplate2 = spreadsheetTemplate0.setType(spreadsheetTemplateType1);
        spreadsheetTemplate0.CustomId = "****231224c4-98ce-4e30-bd65-1d25287c4abe****";
        java.lang.String str5 = spreadsheetTemplate0.getId();
        org.junit.Assert.assertNotNull(spreadsheetTemplate2);
        org.junit.Assert.assertNull(str5);
    }

    @Test
    public void test24277() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest48.test24277");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutUnit putUnit0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutUnit();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutUnit putUnit2 = putUnit0.setName("MinInstant");
        java.lang.Double double3 = putUnit0.getBaseMultiplier();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutUnit putUnit5 = putUnit0.setName("MaxDuration");
        java.lang.String str6 = putUnit5.getId();
        putUnit5.BaseMultiplier = (-1.0d);
        org.junit.Assert.assertNotNull(putUnit2);
        org.junit.Assert.assertNull(double3);
        org.junit.Assert.assertNotNull(putUnit5);
        org.junit.Assert.assertNull(str6);
    }

    @Test
    public void test24278() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest48.test24278");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Calibration calibration0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Calibration();
        java.lang.Double double1 = calibration0.getRangeStart();
        java.lang.Double double2 = calibration0.RangeStart;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Calibration calibration4 = calibration0.setRangeEnd((java.lang.Double) 10.0d);
        java.lang.String str5 = calibration4.getInterceptUnit();
        org.junit.Assert.assertNull(double1);
        org.junit.Assert.assertNull(double2);
        org.junit.Assert.assertNotNull(calibration4);
        org.junit.Assert.assertNull(str5);
    }

    @Test
    public void test24279() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest48.test24279");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedPoint timeAlignedPoint0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedPoint();
        timeAlignedPoint0.Method9 = "multipart/form-data; boundary=****7eff1774-b6b0-471a-961c-156c64359366****";
        timeAlignedPoint0.DisplayValue9 = "";
        java.lang.String str5 = timeAlignedPoint0.getApprovalName4();
        java.lang.Long long6 = timeAlignedPoint0.getGradeCode3();
        java.lang.String str7 = timeAlignedPoint0.ApprovalName5;
        java.lang.Long long8 = timeAlignedPoint0.ApprovalLevel9;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedPoint timeAlignedPoint10 = timeAlignedPoint0.setQualifiers4("multipart/form-data; boundary=****2d077bad-cd27-4736-8ba0-2a8d8a85733d****");
        java.lang.String str11 = timeAlignedPoint10.getDisplayValue8();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedPoint timeAlignedPoint13 = timeAlignedPoint10.setDisplayValue9("/AQUARIUS");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedPoint timeAlignedPoint15 = timeAlignedPoint13.setApprovalLevel3((java.lang.Long) 0L);
        timeAlignedPoint15.NumericValue8 = 100.0d;
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(long6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(long8);
        org.junit.Assert.assertNotNull(timeAlignedPoint10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNotNull(timeAlignedPoint13);
        org.junit.Assert.assertNotNull(timeAlignedPoint15);
    }

    @Test
    public void test24280() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest48.test24280");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostUnit postUnit0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostUnit();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.UnitBase unitBase2 = postUnit0.setSymbol("9999-12-31T23:59:59.999Z");
        java.lang.String str3 = postUnit0.getSymbol();
        java.lang.Double double4 = postUnit0.getBaseMultiplier();
        java.lang.String str5 = postUnit0.getSymbol();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostUnit postUnit7 = postUnit0.setGroupIdentifier("hi!:///AQUARIUS/Provisioning/v1");
        java.lang.String str8 = postUnit7.getUnitIdentifier();
        java.lang.String str9 = postUnit7.SingularName;
        java.lang.Object obj10 = postUnit7.getResponseType();
        org.junit.Assert.assertNotNull(unitBase2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "9999-12-31T23:59:59.999Z" + "'", str3, "9999-12-31T23:59:59.999Z");
        org.junit.Assert.assertNull(double4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "9999-12-31T23:59:59.999Z" + "'", str5, "9999-12-31T23:59:59.999Z");
        org.junit.Assert.assertNotNull(postUnit7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(obj10);
        org.junit.Assert.assertEquals(obj10.toString(), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning$Unit");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj10), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning$Unit");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj10), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning$Unit");
    }

    @Test
    public void test24281() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest48.test24281");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisit fieldVisit0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisit();
        java.time.Instant instant1 = fieldVisit0.StartTime;
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeActivity> dischargeActivityList2 = fieldVisit0.getDischargeActivities();
        java.lang.String str3 = fieldVisit0.getRemarks();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.InspectionActivity inspectionActivity4 = fieldVisit0.InspectionActivity;
        org.junit.Assert.assertNull(instant1);
        org.junit.Assert.assertNull(dischargeActivityList2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(inspectionActivity4);
    }

    @Test
    public void test24282() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest48.test24282");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Location location0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Location();
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.AppliedTag> appliedTagList1 = location0.Tags;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Location location3 = location0.setUniqueId("MaxInstant");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Location location5 = location3.setUtcOffset("9999-12-31T23:59:59.999Z");
        java.lang.String str6 = location5.getIdentifier();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ActiveMeterCalibration activeMeterCalibration7 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ActiveMeterCalibration();
        java.time.Instant instant8 = activeMeterCalibration7.FirstUsedDate;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ActiveMeterCalibrationEquation activeMeterCalibrationEquation9 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ActiveMeterCalibrationEquation();
        java.lang.Double double10 = activeMeterCalibrationEquation9.getSlope();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ActiveMeterCalibrationEquation activeMeterCalibrationEquation11 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ActiveMeterCalibrationEquation();
        java.lang.Double double12 = activeMeterCalibrationEquation11.getSlope();
        java.lang.String str13 = activeMeterCalibrationEquation11.getInterceptUnit();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ActiveMeterCalibrationEquation activeMeterCalibrationEquation14 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ActiveMeterCalibrationEquation();
        java.lang.Double double15 = activeMeterCalibrationEquation14.getSlope();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ActiveMeterCalibrationEquation[] activeMeterCalibrationEquationArray16 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ActiveMeterCalibrationEquation[] { activeMeterCalibrationEquation9, activeMeterCalibrationEquation11, activeMeterCalibrationEquation14 };
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ActiveMeterCalibrationEquation> activeMeterCalibrationEquationList17 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ActiveMeterCalibrationEquation>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ActiveMeterCalibrationEquation>) activeMeterCalibrationEquationList17, activeMeterCalibrationEquationArray16);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ActiveMeterCalibration activeMeterCalibration19 = activeMeterCalibration7.setEquations(activeMeterCalibrationEquationList17);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDataCorrectedServiceRequest timeSeriesDataCorrectedServiceRequest20 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDataCorrectedServiceRequest();
        timeSeriesDataCorrectedServiceRequest20.GetParts = "http";
        java.lang.Boolean boolean23 = timeSeriesDataCorrectedServiceRequest20.isIncludeGapMarkers();
        java.time.Instant instant24 = timeSeriesDataCorrectedServiceRequest20.getQueryTo();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingModelEffectiveShiftsServiceRequest ratingModelEffectiveShiftsServiceRequest25 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingModelEffectiveShiftsServiceRequest();
        java.lang.String str26 = ratingModelEffectiveShiftsServiceRequest25.getTimeSeriesUniqueId();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ReferencePointPeriod referencePointPeriod27 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ReferencePointPeriod();
        java.lang.String str28 = referencePointPeriod27.AppliedByUser;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ReferencePointPeriodBase referencePointPeriodBase30 = referencePointPeriod27.setIsMeasuredAgainstLocalAssumedDatum((java.lang.Boolean) true);
        referencePointPeriod27.Uncertainty = 10.0d;
        java.time.Instant instant33 = com.aquaticinformatics.aquarius.sdk.samples.serializers.InstantDeserializer.MinValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ReferencePointPeriodBase referencePointPeriodBase34 = referencePointPeriod27.setValidFrom(instant33);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingModelEffectiveShiftsServiceRequest ratingModelEffectiveShiftsServiceRequest35 = ratingModelEffectiveShiftsServiceRequest25.setQueryFrom(instant33);
        timeSeriesDataCorrectedServiceRequest20.QueryTo = instant33;
        activeMeterCalibration19.FirstUsedDate = instant33;
        java.time.Instant instant38 = activeMeterCalibration19.getFirstUsedDate();
        location5.LastModified = instant38;
        java.lang.String str40 = location5.LocationType;
        java.lang.Boolean boolean41 = location5.isPublish();
        location5.UniqueId = "POST";
        org.junit.Assert.assertNull(appliedTagList1);
        org.junit.Assert.assertNotNull(location3);
        org.junit.Assert.assertNotNull(location5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(instant8);
        org.junit.Assert.assertNull(double10);
        org.junit.Assert.assertNull(double12);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNull(double15);
        org.junit.Assert.assertNotNull(activeMeterCalibrationEquationArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(activeMeterCalibration19);
        org.junit.Assert.assertNull(boolean23);
        org.junit.Assert.assertNull(instant24);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertNotNull(referencePointPeriodBase30);
        org.junit.Assert.assertNotNull(instant33);
        org.junit.Assert.assertNotNull(referencePointPeriodBase34);
        org.junit.Assert.assertNotNull(ratingModelEffectiveShiftsServiceRequest35);
        org.junit.Assert.assertNotNull(instant38);
        org.junit.Assert.assertNull(str40);
        org.junit.Assert.assertNull(boolean41);
    }

    @Test
    public void test24283() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest48.test24283");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitReading fieldVisitReading0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitReading();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitReading fieldVisitReading2 = fieldVisitReading0.setUseLocationDatumAsReference((java.lang.Boolean) true);
        java.lang.String str3 = fieldVisitReading0.MonitoringMethod;
        java.lang.Boolean boolean4 = fieldVisitReading0.UseLocationDatumAsReference;
        fieldVisitReading0.ParameterId = "multipart/form-data; boundary=****59879c02-0839-4b96-bc41-a13ebb706be4****";
        fieldVisitReading0.Publish = false;
        java.time.Instant instant9 = fieldVisitReading0.getTime();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitReading fieldVisitReading11 = fieldVisitReading0.setModel("/AQUARIUS/Publish/v2");
        fieldVisitReading11.UseLocationDatumAsReference = true;
        org.junit.Assert.assertNotNull(fieldVisitReading2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertEquals("'" + boolean4 + "' != '" + true + "'", boolean4, true);
        org.junit.Assert.assertNull(instant9);
        org.junit.Assert.assertNotNull(fieldVisitReading11);
    }

    @Test
    public void test24284() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest48.test24284");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutProject putProject0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutProject();
        java.lang.String str1 = putProject0.ScopeStatement;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes2 = null;
        putProject0.AuditAttributes = auditAttributes2;
        java.time.OffsetDateTime offsetDateTime4 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutProject putProject5 = putProject0.setStartTime(offsetDateTime4);
        putProject5.ApprovalAgency = "-PT87591240H";
        java.lang.Boolean boolean8 = putProject5.getApproved();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ProjectType projectType9 = putProject5.getType();
        java.lang.String str10 = putProject5.CustomId;
        java.time.OffsetDateTime offsetDateTime11 = null;
        putProject5.StartTime = offsetDateTime11;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(putProject5);
        org.junit.Assert.assertNull(boolean8);
        org.junit.Assert.assertNull(projectType9);
        org.junit.Assert.assertNull(str10);
    }

    @Test
    public void test24285() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest48.test24285");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Role role0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Role();
        java.lang.Boolean boolean1 = role0.CanAssignUserRoles;
        java.lang.Boolean boolean2 = role0.CanAddData;
        role0.UniqueId = "multipart/form-data; boundary=****2917d69a-62fa-41ce-b981-4dbe2deab9f5****";
        java.lang.Boolean boolean5 = role0.CanEditLocationDetails;
        org.junit.Assert.assertNull(boolean1);
        org.junit.Assert.assertNull(boolean2);
        org.junit.Assert.assertNull(boolean5);
    }

    @Test
    public void test24286() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest48.test24286");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObject importItemObject0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObject();
        java.util.List<java.lang.String> strList1 = importItemObject0.getWarningMessages();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportChangeItem[] importChangeItemArray2 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportChangeItem[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportChangeItem> importChangeItemList3 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportChangeItem>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportChangeItem>) importChangeItemList3, importChangeItemArray2);
        importItemObject0.ItemComparison = importChangeItemList3;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags6 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray10 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList11 = new java.util.ArrayList<java.lang.String>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList11, strArray10);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags13 = putLocationTags6.setTagUniqueIds(strList11);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObject importItemObject14 = importItemObject0.setExistingItem((java.lang.Object) putLocationTags6);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.OpenIdConnectUser openIdConnectUser15 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.OpenIdConnectUser();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.OpenIdConnectUser openIdConnectUser17 = openIdConnectUser15.setIdentifier("");
        java.lang.Boolean boolean18 = openIdConnectUser17.CanConfigureSystem;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObject importItemObject19 = importItemObject0.setErrors((java.lang.Object) openIdConnectUser17);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.FieldVisitStatistics fieldVisitStatistics20 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.FieldVisitStatistics();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.FieldVisitStatistics fieldVisitStatistics22 = fieldVisitStatistics20.setVerticalProfileCount((java.lang.Integer) 10);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.FieldVisitStatistics fieldVisitStatistics24 = fieldVisitStatistics20.setQcSampleCount((java.lang.Integer) 0);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.FieldVisitStatistics fieldVisitStatistics26 = fieldVisitStatistics20.setFieldResultCount((java.lang.Integer) 1);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObject importItemObject27 = importItemObject19.setExistingItem((java.lang.Object) 1);
        java.lang.Object obj28 = importItemObject27.getExistingItem();
        org.junit.Assert.assertNull(strList1);
        org.junit.Assert.assertNotNull(importChangeItemArray2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(putLocationTags13);
        org.junit.Assert.assertNotNull(importItemObject14);
        org.junit.Assert.assertNotNull(openIdConnectUser17);
        org.junit.Assert.assertNull(boolean18);
        org.junit.Assert.assertNotNull(importItemObject19);
        org.junit.Assert.assertNotNull(fieldVisitStatistics22);
        org.junit.Assert.assertNotNull(fieldVisitStatistics24);
        org.junit.Assert.assertNotNull(fieldVisitStatistics26);
        org.junit.Assert.assertNotNull(importItemObject27);
        org.junit.Assert.assertEquals("'" + obj28 + "' != '" + 1 + "'", obj28, 1);
    }

    @Test
    public void test24287() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest48.test24287");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Project project0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Project();
        java.lang.String str1 = project0.getId();
        java.lang.String str2 = project0.Name;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Project project4 = project0.setApproved((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Project project6 = project4.setId("multipart/form-data; boundary=****e48381b1-dcc5-4af7-8a12-f30d1690cec2****");
        java.lang.Boolean boolean7 = project6.Approved;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNotNull(project4);
        org.junit.Assert.assertNotNull(project6);
        org.junit.Assert.assertEquals("'" + boolean7 + "' != '" + false + "'", boolean7, false);
    }

    @Test
    public void test24288() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest48.test24288");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Qualifier qualifier0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Qualifier();
        java.time.Instant instant1 = qualifier0.DateApplied;
        java.lang.String str2 = qualifier0.User;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Qualifier qualifier4 = qualifier0.setUser("/AQUARIUS/Acquisition/v2://9999-12-31T23:59:59.999Z");
        java.time.Instant instant5 = qualifier4.DateApplied;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Qualifier qualifier7 = qualifier4.setIdentifier("multipart/form-data; boundary=****895246ac-50fd-4284-9cd4-5cdd869d7100****");
        org.junit.Assert.assertNull(instant1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNotNull(qualifier4);
        org.junit.Assert.assertNull(instant5);
        org.junit.Assert.assertNotNull(qualifier7);
    }

    @Test
    public void test24289() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest48.test24289");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesThresholdPeriod timeSeriesThresholdPeriod0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesThresholdPeriod();
        java.time.Instant instant1 = timeSeriesThresholdPeriod0.StartTime;
        java.time.Instant instant2 = timeSeriesThresholdPeriod0.StartTime;
        java.time.Instant instant3 = timeSeriesThresholdPeriod0.getStartTime();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutRecurringReport putRecurringReport4 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutRecurringReport();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.LocationDatumPeriod locationDatumPeriod5 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.LocationDatumPeriod();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.LocationDatumPeriodBase locationDatumPeriodBase7 = locationDatumPeriod5.setComment("'.'SSSSSSS");
        java.lang.Double double8 = locationDatumPeriodBase7.Elevation;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Qualifier qualifier9 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Qualifier();
        java.time.Instant instant10 = qualifier9.DateApplied;
        java.lang.String str11 = qualifier9.User;
        java.lang.String str12 = qualifier9.getIdentifier();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest13 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest();
        java.lang.Object obj14 = timeAlignedDataServiceRequest13.getResponseType();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse15 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant16 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse17 = locationDescriptionListServiceResponse15.setNextToken(instant16);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest18 = timeAlignedDataServiceRequest13.setQueryFrom(instant16);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Qualifier qualifier19 = qualifier9.setDateApplied(instant16);
        java.time.Instant instant20 = qualifier19.getDateApplied();
        locationDatumPeriodBase7.ValidFrom = instant20;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RecurringReportBase recurringReportBase22 = putRecurringReport4.setNextGenerationDate(instant20);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesThresholdPeriod timeSeriesThresholdPeriod23 = timeSeriesThresholdPeriod0.setStartTime(instant20);
        java.lang.Double double24 = timeSeriesThresholdPeriod0.getReferenceValue();
        java.lang.Double double25 = timeSeriesThresholdPeriod0.getSecondaryReferenceValue();
        org.junit.Assert.assertNull(instant1);
        org.junit.Assert.assertNull(instant2);
        org.junit.Assert.assertNull(instant3);
        org.junit.Assert.assertNotNull(locationDatumPeriodBase7);
        org.junit.Assert.assertNull(double8);
        org.junit.Assert.assertNull(instant10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(obj14);
        org.junit.Assert.assertEquals(obj14.toString(), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj14), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj14), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertNotNull(instant16);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse17);
        org.junit.Assert.assertNotNull(timeAlignedDataServiceRequest18);
        org.junit.Assert.assertNotNull(qualifier19);
        org.junit.Assert.assertNotNull(instant20);
        org.junit.Assert.assertNotNull(recurringReportBase22);
        org.junit.Assert.assertNotNull(timeSeriesThresholdPeriod23);
        org.junit.Assert.assertNull(double24);
        org.junit.Assert.assertNull(double25);
    }

    @Test
    public void test24290() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest48.test24290");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingCurve ratingCurve0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingCurve();
        java.lang.String str1 = ratingCurve0.Equation;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ParameterWithUnit parameterWithUnit2 = ratingCurve0.getInputParameter();
        java.lang.String str3 = ratingCurve0.getRemarks();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ExpandedRatingCurve expandedRatingCurve4 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ExpandedRatingCurve();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingCurveType ratingCurveType5 = expandedRatingCurve4.Type;
        expandedRatingCurve4.IsBlended = false;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ExpandedRatingCurve expandedRatingCurve9 = expandedRatingCurve4.setIsBlended((java.lang.Boolean) true);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PeriodOfApplicability[] periodOfApplicabilityArray10 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PeriodOfApplicability[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PeriodOfApplicability> periodOfApplicabilityList11 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PeriodOfApplicability>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PeriodOfApplicability>) periodOfApplicabilityList11, periodOfApplicabilityArray10);
        expandedRatingCurve4.PeriodsOfApplicability = periodOfApplicabilityList11;
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PeriodOfApplicability> periodOfApplicabilityList14 = expandedRatingCurve4.PeriodsOfApplicability;
        ratingCurve0.PeriodsOfApplicability = periodOfApplicabilityList14;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingCurve ratingCurve16 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingCurve();
        java.lang.String str17 = ratingCurve16.getRemarks();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingCurveType ratingCurveType18 = null;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingCurve ratingCurve19 = ratingCurve16.setType(ratingCurveType18);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingCurve ratingCurve20 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingCurve();
        java.lang.String str21 = ratingCurve20.Equation;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ExpandedRatingCurve expandedRatingCurve22 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ExpandedRatingCurve();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingCurveType ratingCurveType23 = expandedRatingCurve22.Type;
        expandedRatingCurve22.IsBlended = false;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ParameterWithUnit parameterWithUnit26 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ParameterWithUnit();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ExpandedRatingCurve expandedRatingCurve27 = expandedRatingCurve22.setOutputParameter(parameterWithUnit26);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingCurve ratingCurve28 = ratingCurve20.setInputParameter(parameterWithUnit26);
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.OffsetPoint> offsetPointList29 = ratingCurve20.getOffsets();
        ratingCurve20.Id = "https";
        java.lang.String str32 = ratingCurve20.getId();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ExpandedRatingCurve expandedRatingCurve33 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ExpandedRatingCurve();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ParameterWithUnit parameterWithUnit34 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ParameterWithUnit();
        expandedRatingCurve33.OutputParameter = parameterWithUnit34;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingPoint[] ratingPointArray36 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingPoint[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingPoint> ratingPointList37 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingPoint>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingPoint>) ratingPointList37, ratingPointArray36);
        expandedRatingCurve33.BaseRatingTable = ratingPointList37;
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PeriodOfApplicability> periodOfApplicabilityList40 = expandedRatingCurve33.getPeriodsOfApplicability();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ExpandedRatingCurve expandedRatingCurve41 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ExpandedRatingCurve();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingCurveType ratingCurveType42 = expandedRatingCurve41.Type;
        expandedRatingCurve41.IsBlended = false;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ParameterWithUnit parameterWithUnit45 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ParameterWithUnit();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ExpandedRatingCurve expandedRatingCurve46 = expandedRatingCurve41.setOutputParameter(parameterWithUnit45);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ParameterWithUnit parameterWithUnit47 = expandedRatingCurve46.getOutputParameter();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ExpandedRatingCurve expandedRatingCurve48 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ExpandedRatingCurve();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingCurveType ratingCurveType49 = expandedRatingCurve48.Type;
        expandedRatingCurve48.IsBlended = false;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ParameterWithUnit parameterWithUnit52 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ParameterWithUnit();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ExpandedRatingCurve expandedRatingCurve53 = expandedRatingCurve48.setOutputParameter(parameterWithUnit52);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ParameterWithUnit parameterWithUnit54 = expandedRatingCurve53.getOutputParameter();
        expandedRatingCurve46.OutputParameter = parameterWithUnit54;
        parameterWithUnit54.ParameterUnit = "/AQUARIUS/Provisioning/v1";
        expandedRatingCurve33.InputParameter = parameterWithUnit54;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingCurve ratingCurve59 = ratingCurve20.setOutputParameter(parameterWithUnit54);
        ratingCurve16.InputParameter = parameterWithUnit54;
        parameterWithUnit54.ParameterUnit = "multipart/form-data; boundary=****1eab67e1-84c8-4b82-aa06-d6c7526551f8****";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingCurve ratingCurve63 = ratingCurve0.setOutputParameter(parameterWithUnit54);
        java.lang.String str64 = ratingCurve0.getEquation();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(parameterWithUnit2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(ratingCurveType5);
        org.junit.Assert.assertNotNull(expandedRatingCurve9);
        org.junit.Assert.assertNotNull(periodOfApplicabilityArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(periodOfApplicabilityList14);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertNotNull(ratingCurve19);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNull(ratingCurveType23);
        org.junit.Assert.assertNotNull(expandedRatingCurve27);
        org.junit.Assert.assertNotNull(ratingCurve28);
        org.junit.Assert.assertNull(offsetPointList29);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "https" + "'", str32, "https");
        org.junit.Assert.assertNotNull(ratingPointArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNull(periodOfApplicabilityList40);
        org.junit.Assert.assertNull(ratingCurveType42);
        org.junit.Assert.assertNotNull(expandedRatingCurve46);
        org.junit.Assert.assertNotNull(parameterWithUnit47);
        org.junit.Assert.assertNull(ratingCurveType49);
        org.junit.Assert.assertNotNull(expandedRatingCurve53);
        org.junit.Assert.assertNotNull(parameterWithUnit54);
        org.junit.Assert.assertNotNull(ratingCurve59);
        org.junit.Assert.assertNotNull(ratingCurve63);
        org.junit.Assert.assertNull(str64);
    }

    @Test
    public void test24291() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest48.test24291");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails2 = labResultDetails0.setAnalysisComment("/AQUARIUS/Acquisition/v2");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails4 = labResultDetails0.setPreparationMethod("https");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes5 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails6 = labResultDetails0.setAuditAttributes(auditAttributes5);
        java.lang.String str7 = labResultDetails6.getAnalysisComment();
        labResultDetails6.PreparationMethod = "";
        labResultDetails6.QualityFlag = "https";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails13 = labResultDetails6.setDilutionFactor("/AQUARIUS/Acquisition/v2");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails15 = labResultDetails13.setDilutionFactor("yyyy'-'MM'-'dd'T'HH':'mm':'ss");
        labResultDetails15.AnalysisComment = "0001-01-01T00:00:00.0000000Z";
        org.junit.Assert.assertNotNull(labResultDetails2);
        org.junit.Assert.assertNotNull(labResultDetails4);
        org.junit.Assert.assertNotNull(labResultDetails6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "/AQUARIUS/Acquisition/v2" + "'", str7, "/AQUARIUS/Acquisition/v2");
        org.junit.Assert.assertNotNull(labResultDetails13);
        org.junit.Assert.assertNotNull(labResultDetails15);
    }

    @Test
    public void test24292() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest48.test24292");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.LocationType locationType0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.LocationType();
        java.util.List<java.lang.String> strList1 = locationType0.getExtendedAttributeDefinitionIds();
        java.util.List<java.lang.String> strList2 = locationType0.ExtendedAttributeDefinitionIds;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetLabReports getLabReports3 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetLabReports();
        getLabReports3.Limit = 1;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_6 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.util.List<java.lang.String> strList7 = getObservationsV2_6.SamplingContextTagIds;
        java.time.Instant instant8 = getObservationsV2_6.getEndModificationTime();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_9 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray12 = new java.lang.String[] { "", "" };
        java.util.ArrayList<java.lang.String> strList13 = new java.util.ArrayList<java.lang.String>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList13, strArray12);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_15 = getObservationsV2_9.setDataClassifications((java.util.List<java.lang.String>) strList13);
        getObservationsV2_6.ResultStatuses = strList13;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetLabReports getLabReports17 = getLabReports3.setSearch((java.util.List<java.lang.String>) strList13);
        java.util.List<java.lang.String> strList18 = getLabReports3.LaboratoryIds;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DeleteFieldVisits deleteFieldVisits19 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DeleteFieldVisits();
        java.lang.String str20 = deleteFieldVisits19.getSort();
        java.util.List<java.lang.String> strList21 = deleteFieldVisits19.Ids;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_22 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray25 = new java.lang.String[] { "", "" };
        java.util.ArrayList<java.lang.String> strList26 = new java.util.ArrayList<java.lang.String>();
        boolean boolean27 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList26, strArray25);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_28 = getObservationsV2_22.setDataClassifications((java.util.List<java.lang.String>) strList26);
        java.util.List<java.lang.String> strList29 = getObservationsV2_22.ResultGrades;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary30 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        dischargeSummary30.Reviewer = "";
        java.time.Instant instant33 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        dischargeSummary30.MeasurementTime = instant33;
        getObservationsV2_22.StartResultTime = instant33;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest36 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ControlConditionActivity controlConditionActivity37 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ControlConditionActivity();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ControlCleanedType controlCleanedType38 = null;
        controlConditionActivity37.ControlCleaned = controlCleanedType38;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse40 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant41 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse42 = locationDescriptionListServiceResponse40.setNextToken(instant41);
        controlConditionActivity37.DateCleaned = instant41;
        timeAlignedDataServiceRequest36.QueryFrom = instant41;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_45 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray47 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList48 = new java.util.ArrayList<java.lang.String>();
        boolean boolean49 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList48, strArray47);
        getObservationsV2_45.SpecimenIds = strList48;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags51 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray55 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList56 = new java.util.ArrayList<java.lang.String>();
        boolean boolean57 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList56, strArray55);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags58 = putLocationTags51.setTagUniqueIds(strList56);
        getObservationsV2_45.ActivityIds = strList56;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest60 = timeAlignedDataServiceRequest36.setTimeSeriesOutputUnitIds(strList56);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_61 = getObservationsV2_22.setCollectionMethodIds((java.util.List<java.lang.String>) strList56);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DeleteFieldVisits deleteFieldVisits62 = deleteFieldVisits19.setSamplingPlanIds((java.util.List<java.lang.String>) strList56);
        getLabReports3.LaboratoryIds = strList56;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.LocationType locationType64 = locationType0.setExtendedAttributeDefinitionIds((java.util.List<java.lang.String>) strList56);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.LocationType locationType66 = locationType0.setTypeName("/api");
        org.junit.Assert.assertNull(strList1);
        org.junit.Assert.assertNull(strList2);
        org.junit.Assert.assertNull(strList7);
        org.junit.Assert.assertNull(instant8);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(getObservationsV2_15);
        org.junit.Assert.assertNotNull(getLabReports17);
        org.junit.Assert.assertNull(strList18);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNull(strList21);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(getObservationsV2_28);
        org.junit.Assert.assertNull(strList29);
        org.junit.Assert.assertNotNull(instant33);
        org.junit.Assert.assertNotNull(instant41);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse42);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(strArray55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertNotNull(putLocationTags58);
        org.junit.Assert.assertNotNull(timeAlignedDataServiceRequest60);
        org.junit.Assert.assertNotNull(getObservationsV2_61);
        org.junit.Assert.assertNotNull(deleteFieldVisits62);
        org.junit.Assert.assertNotNull(locationType64);
        org.junit.Assert.assertNotNull(locationType66);
    }

    @Test
    public void test24293() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest48.test24293");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutUser putUser0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutUser();
        java.util.List<java.lang.String> strList1 = null;
        putUser0.AccessGroups = strList1;
        java.lang.String str3 = putUser0.CustomId;
        java.lang.String str4 = putUser0.Id;
        java.lang.String str5 = putUser0.getCustomId();
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(str5);
    }

    @Test
    public void test24294() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest48.test24294");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ChartDataPoint chartDataPoint0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ChartDataPoint();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ChartDataPoint chartDataPoint2 = chartDataPoint0.setMdlValueUnitCustomId("MaxInstant");
        java.lang.Double double3 = chartDataPoint2.Value;
        java.lang.String str4 = chartDataPoint2.getNumericResultUnitCustomId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ChartDataPoint chartDataPoint6 = chartDataPoint2.setValue((java.lang.Double) 10.0d);
        java.time.OffsetDateTime offsetDateTime7 = chartDataPoint6.getObservedTime();
        chartDataPoint6.MdlValue = 1.0d;
        java.time.OffsetDateTime offsetDateTime10 = chartDataPoint6.ObservedTime;
        org.junit.Assert.assertNotNull(chartDataPoint2);
        org.junit.Assert.assertNull(double3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNotNull(chartDataPoint6);
        org.junit.Assert.assertNull(offsetDateTime7);
        org.junit.Assert.assertNull(offsetDateTime10);
    }

    @Test
    public void test24295() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest48.test24295");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitDataByLocationServiceRequest fieldVisitDataByLocationServiceRequest0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitDataByLocationServiceRequest();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitDataByLocationServiceRequest fieldVisitDataByLocationServiceRequest2 = fieldVisitDataByLocationServiceRequest0.setIncludeNodeDetails((java.lang.Boolean) true);
        java.lang.Boolean boolean3 = fieldVisitDataByLocationServiceRequest0.isApplyRounding();
        java.lang.Boolean boolean4 = fieldVisitDataByLocationServiceRequest0.isIncludeCrossSectionSurveyProfile();
        java.lang.String str5 = fieldVisitDataByLocationServiceRequest0.ConvertToStandardReferenceDatum;
        java.lang.Boolean boolean6 = fieldVisitDataByLocationServiceRequest0.isConvertToLocalAssumedDatum();
        java.lang.String str7 = fieldVisitDataByLocationServiceRequest0.ConvertToStandardReferenceDatum;
        java.lang.Boolean boolean8 = fieldVisitDataByLocationServiceRequest0.isIncludeInvalidActivities();
        org.junit.Assert.assertNotNull(fieldVisitDataByLocationServiceRequest2);
        org.junit.Assert.assertNull(boolean3);
        org.junit.Assert.assertNull(boolean4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(boolean6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(boolean8);
    }

    @Test
    public void test24296() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest48.test24296");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutAttachment putAttachment0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutAttachment();
        java.lang.String str1 = putAttachment0.ContentType;
        putAttachment0.FileName = "/AQUARIUS/Acquisition/v2://9999-12-31T23:59:59.999Z";
        java.lang.String str4 = putAttachment0.getResolution();
        java.time.OffsetDateTime offsetDateTime5 = null;
        putAttachment0.DateTaken = offsetDateTime5;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str4);
    }

    @Test
    public void test24297() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest48.test24297");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutTimeSeries putTimeSeries0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutTimeSeries();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutTimeSeries putTimeSeries2 = putTimeSeries0.setDescription("hi!");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutTimeSeries putTimeSeries4 = putTimeSeries0.setComment("https");
        java.lang.String str5 = putTimeSeries4.Description;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutTimeSeries putTimeSeries7 = putTimeSeries4.setTimeSeriesUniqueId("MaxDuration");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutTimeSeries putTimeSeries9 = putTimeSeries4.setSubLocationIdentifier("http://MaxDurationhttp/json/reply/Float://multipart/form-data; boundary=****231224c4-98ce-4e30-bd65-1d25287c4abe****");
        java.lang.String str10 = putTimeSeries9.Description;
        org.junit.Assert.assertNotNull(putTimeSeries2);
        org.junit.Assert.assertNotNull(putTimeSeries4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "hi!" + "'", str5, "hi!");
        org.junit.Assert.assertNotNull(putTimeSeries7);
        org.junit.Assert.assertNotNull(putTimeSeries9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "hi!" + "'", str10, "hi!");
    }

    @Test
    public void test24298() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest48.test24298");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultDetectionCondition resultDetectionCondition0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultDetectionCondition();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes1 = resultDetectionCondition0.getAuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes2 = resultDetectionCondition0.getAuditAttributes();
        resultDetectionCondition0.Description = "hi!:///AQUARIUS/Provisioning/v1";
        java.lang.String str5 = resultDetectionCondition0.getCustomId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes6 = resultDetectionCondition0.getAuditAttributes();
        java.lang.String str7 = resultDetectionCondition0.getName();
        org.junit.Assert.assertNull(auditAttributes1);
        org.junit.Assert.assertNull(auditAttributes2);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(auditAttributes6);
        org.junit.Assert.assertNull(str7);
    }

    @Test
    public void test24299() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest48.test24299");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ExpandedStageTableServiceResponse expandedStageTableServiceResponse0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ExpandedStageTableServiceResponse();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Correction[] correctionArray1 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Correction[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Correction> correctionList2 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Correction>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Correction>) correctionList2, correctionArray1);
        expandedStageTableServiceResponse0.Corrections = correctionList2;
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.StagePoint> stagePointList5 = expandedStageTableServiceResponse0.getExpandedStageTable();
        org.junit.Assert.assertNotNull(correctionArray1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(stagePointList5);
    }

    @Test
    public void test24300() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest48.test24300");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CalibrationCheck calibrationCheck0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CalibrationCheck();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CalibrationCheckType calibrationCheckType1 = calibrationCheck0.getCalibrationCheckType();
        calibrationCheck0.SensorUniqueId = "MinDuration";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay4 = calibrationCheck0.getDifference();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CalibrationCheck calibrationCheck6 = calibrationCheck0.setIsValid((java.lang.Boolean) true);
        java.lang.Boolean boolean7 = calibrationCheck6.isPublish();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay8 = calibrationCheck6.getPercentDifference();
        org.junit.Assert.assertNull(calibrationCheckType1);
        org.junit.Assert.assertNull(doubleWithDisplay4);
        org.junit.Assert.assertNotNull(calibrationCheck6);
        org.junit.Assert.assertNull(boolean7);
        org.junit.Assert.assertNull(doubleWithDisplay8);
    }

    @Test
    public void test24301() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest48.test24301");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedFieldResult plannedFieldResult1 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation2 = observation0.setPlannedFieldResult(plannedFieldResult1);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabInstruction labInstruction3 = null;
        observation2.LabInstruction = labInstruction3;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationStatistics observationStatistics5 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation6 = observation2.setStatistics(observationStatistics5);
        java.time.OffsetDateTime offsetDateTime7 = observation6.getResultTime();
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple> importHistoryEventSimpleList8 = observation6.ImportHistoryEventSimples;
        java.lang.String str9 = observation6.getMediumSubdivision();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DataClassificationType dataClassificationType10 = observation6.getDataClassification();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostTaxon postTaxon11 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostTaxon();
        postTaxon11.ItisUrl = "MinInstant";
        postTaxon11.ItisTsn = "MaxDuration";
        postTaxon11.Comment = "MaxInstant";
        java.lang.String str18 = postTaxon11.getItisTsn();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostTaxon postTaxon20 = postTaxon11.setSource("multipart/form-data; boundary=****59879c02-0839-4b96-bc41-a13ebb706be4****");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabReport labReport21 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabReport();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Laboratory laboratory22 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Laboratory();
        laboratory22.Id = "MaxInstant";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Laboratory laboratory26 = laboratory22.setName("hi!:///AQUARIUS/Provisioning/v1");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabReport labReport27 = labReport21.setLaboratory(laboratory26);
        java.lang.String str28 = labReport27.getQcSummary();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabReport labReport30 = labReport27.setCustomId("http");
        java.time.OffsetDateTime offsetDateTime31 = null;
        labReport30.DateReceived = offsetDateTime31;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabReport labReport34 = labReport30.setCustomId("MinInstant");
        java.time.OffsetDateTime offsetDateTime35 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabReport labReport36 = labReport34.setDateReceived(offsetDateTime35);
        java.lang.String str37 = labReport36.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLabAnalysisMethod postLabAnalysisMethod38 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLabAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes39 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLabAnalysisMethod postLabAnalysisMethod40 = postLabAnalysisMethod38.setAuditAttributes(auditAttributes39);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty[] observedPropertyArray41 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty> observedPropertyList42 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty>();
        boolean boolean43 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty>) observedPropertyList42, observedPropertyArray41);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLabAnalysisMethod postLabAnalysisMethod44 = postLabAnalysisMethod40.setObservedProperties((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty>) observedPropertyList42);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes45 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLabAnalysisMethod postLabAnalysisMethod46 = postLabAnalysisMethod40.setAuditAttributes(auditAttributes45);
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty> observedPropertyList47 = postLabAnalysisMethod46.getObservedProperties();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLabAnalysisMethod postLabAnalysisMethod49 = postLabAnalysisMethod46.setContext("/AQUARIUS/Acquisition/v2");
        java.lang.String str50 = postLabAnalysisMethod46.getMethodId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservedProperty postObservedProperty51 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservedProperty();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisType analysisType52 = postObservedProperty51.getAnalysisType();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty observedProperty53 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation54 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation();
        observation54.CustomId = "hi!";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.CategoricalResult categoricalResult57 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation58 = observation54.setCategoricalResult(categoricalResult57);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple[] importHistoryEventSimpleArray59 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple> importHistoryEventSimpleList60 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple>();
        boolean boolean61 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple>) importHistoryEventSimpleList60, importHistoryEventSimpleArray59);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation62 = observation54.setImportHistoryEventSimples((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple>) importHistoryEventSimpleList60);
        observedProperty53.ImportHistoryEventSimples = importHistoryEventSimpleList60;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservedProperty postObservedProperty64 = postObservedProperty51.setImportHistoryEventSimples((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple>) importHistoryEventSimpleList60);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLabAnalysisMethod postLabAnalysisMethod65 = postLabAnalysisMethod46.setImportHistoryEventSimples((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple>) importHistoryEventSimpleList60);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabReport labReport66 = labReport36.setImportHistoryEventSimples((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple>) importHistoryEventSimpleList60);
        postTaxon20.ImportHistoryEventSimples = importHistoryEventSimpleList60;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation68 = observation6.setImportHistoryEventSimples((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple>) importHistoryEventSimpleList60);
        org.junit.Assert.assertNotNull(observation2);
        org.junit.Assert.assertNotNull(observation6);
        org.junit.Assert.assertNull(offsetDateTime7);
        org.junit.Assert.assertNull(importHistoryEventSimpleList8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNull(dataClassificationType10);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "MaxDuration" + "'", str18, "MaxDuration");
        org.junit.Assert.assertNotNull(postTaxon20);
        org.junit.Assert.assertNotNull(laboratory26);
        org.junit.Assert.assertNotNull(labReport27);
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertNotNull(labReport30);
        org.junit.Assert.assertNotNull(labReport34);
        org.junit.Assert.assertNotNull(labReport36);
        org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertNotNull(postLabAnalysisMethod40);
        org.junit.Assert.assertNotNull(observedPropertyArray41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(postLabAnalysisMethod44);
        org.junit.Assert.assertNotNull(postLabAnalysisMethod46);
        org.junit.Assert.assertNotNull(observedPropertyList47);
        org.junit.Assert.assertNotNull(postLabAnalysisMethod49);
        org.junit.Assert.assertNull(str50);
        org.junit.Assert.assertNull(analysisType52);
        org.junit.Assert.assertNotNull(observation58);
        org.junit.Assert.assertNotNull(importHistoryEventSimpleArray59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(observation62);
        org.junit.Assert.assertNotNull(postObservedProperty64);
        org.junit.Assert.assertNotNull(postLabAnalysisMethod65);
        org.junit.Assert.assertNotNull(labReport66);
        org.junit.Assert.assertNotNull(observation68);
    }

    @Test
    public void test24302() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest48.test24302");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TrendLineAnalysisServiceRequest trendLineAnalysisServiceRequest0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TrendLineAnalysisServiceRequest();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TrendLineAnalysisType trendLineAnalysisType1 = null;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TrendLineAnalysisServiceRequest trendLineAnalysisServiceRequest2 = trendLineAnalysisServiceRequest0.setType(trendLineAnalysisType1);
        java.time.Instant instant3 = trendLineAnalysisServiceRequest2.QueryFrom;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDataServiceResponse timeSeriesDataServiceResponse4 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDataServiceResponse();
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.InterpolationType> interpolationTypeList5 = timeSeriesDataServiceResponse4.getInterpolationTypes();
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.GapTolerance> gapToleranceList6 = null;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDataServiceResponse timeSeriesDataServiceResponse7 = timeSeriesDataServiceResponse4.setGapTolerances(gapToleranceList6);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Approval approval8 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Approval();
        java.lang.String str9 = approval8.User;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Approval approval10 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Approval();
        java.lang.String str11 = approval10.User;
        approval10.LevelDescription = "MinDuration";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Approval approval15 = approval10.setApprovalLevel((java.lang.Integer) (-1));
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Approval approval16 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Approval();
        java.lang.String str17 = approval16.User;
        java.lang.String str18 = approval16.Comment;
        java.lang.String str19 = approval16.Comment;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Approval approval20 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Approval();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Approval approval21 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Approval();
        java.lang.String str22 = approval21.User;
        approval21.LevelDescription = "MinDuration";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Approval approval26 = approval21.setApprovalLevel((java.lang.Integer) 4);
        java.lang.String str27 = approval21.User;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ApprovalsTransaction approvalsTransaction28 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ApprovalsTransaction();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Approval approval29 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Approval();
        java.lang.String str30 = approval29.User;
        approval29.LevelDescription = "MinDuration";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Approval[] approvalArray33 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Approval[] { approval8, approval10, approval16, approval20, approval21, approvalsTransaction28, approval29 };
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Approval> approvalList34 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Approval>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Approval>) approvalList34, approvalArray33);
        timeSeriesDataServiceResponse4.Approvals = approvalList34;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesPoint timeSeriesPoint37 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesPoint();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.StatisticalDateTimeOffset statisticalDateTimeOffset38 = timeSeriesPoint37.getTimestamp();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Reading reading39 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Reading();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay40 = reading39.getValue();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Reading reading42 = reading39.setParameterId("hi!");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Reading reading44 = reading42.setModel("MaxInstant");
        reading44.Comments = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ";
        java.time.Instant instant47 = reading44.Time;
        java.lang.String str48 = reading44.getUnit();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay49 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay();
        reading44.Value = doubleWithDisplay49;
        timeSeriesPoint37.Value = doubleWithDisplay49;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesPoint timeSeriesPoint52 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesPoint();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.StatisticalDateTimeOffset statisticalDateTimeOffset53 = timeSeriesPoint52.getTimestamp();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Reading reading54 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Reading();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay55 = reading54.getValue();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Reading reading57 = reading54.setParameterId("hi!");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Reading reading59 = reading57.setModel("MaxInstant");
        reading59.Comments = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ";
        java.time.Instant instant62 = reading59.Time;
        java.lang.String str63 = reading59.getUnit();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay64 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay();
        reading59.Value = doubleWithDisplay64;
        timeSeriesPoint52.Value = doubleWithDisplay64;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesPoint timeSeriesPoint67 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesPoint();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.StatisticalDateTimeOffset statisticalDateTimeOffset68 = null;
        timeSeriesPoint67.Timestamp = statisticalDateTimeOffset68;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.StatisticalDateTimeOffset statisticalDateTimeOffset70 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.StatisticalDateTimeOffset();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesPoint timeSeriesPoint71 = timeSeriesPoint67.setTimestamp(statisticalDateTimeOffset70);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesPoint timeSeriesPoint72 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesPoint();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.StatisticalDateTimeOffset statisticalDateTimeOffset73 = null;
        timeSeriesPoint72.Timestamp = statisticalDateTimeOffset73;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.StatisticalDateTimeOffset statisticalDateTimeOffset75 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.StatisticalDateTimeOffset();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesPoint timeSeriesPoint76 = timeSeriesPoint72.setTimestamp(statisticalDateTimeOffset75);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesPoint timeSeriesPoint77 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesPoint();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.StatisticalDateTimeOffset statisticalDateTimeOffset78 = null;
        timeSeriesPoint77.Timestamp = statisticalDateTimeOffset78;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.StatisticalDateTimeOffset statisticalDateTimeOffset80 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.StatisticalDateTimeOffset();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesPoint timeSeriesPoint81 = timeSeriesPoint77.setTimestamp(statisticalDateTimeOffset80);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesPoint[] timeSeriesPointArray82 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesPoint[] { timeSeriesPoint37, timeSeriesPoint52, timeSeriesPoint71, timeSeriesPoint76, timeSeriesPoint81 };
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesPoint> timeSeriesPointList83 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesPoint>();
        boolean boolean84 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesPoint>) timeSeriesPointList83, timeSeriesPointArray82);
        timeSeriesDataServiceResponse4.Points = timeSeriesPointList83;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TrendLineAnalysisServiceRequest trendLineAnalysisServiceRequest86 = trendLineAnalysisServiceRequest2.setPoints(timeSeriesPointList83);
        java.time.Instant instant87 = trendLineAnalysisServiceRequest86.QueryFrom;
        java.time.Instant instant88 = trendLineAnalysisServiceRequest86.getQueryFrom();
        org.junit.Assert.assertNotNull(trendLineAnalysisServiceRequest2);
        org.junit.Assert.assertNull(instant3);
        org.junit.Assert.assertNull(interpolationTypeList5);
        org.junit.Assert.assertNotNull(timeSeriesDataServiceResponse7);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNotNull(approval15);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertNotNull(approval26);
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertNotNull(approvalArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNull(statisticalDateTimeOffset38);
        org.junit.Assert.assertNull(doubleWithDisplay40);
        org.junit.Assert.assertNotNull(reading42);
        org.junit.Assert.assertNotNull(reading44);
        org.junit.Assert.assertNull(instant47);
        org.junit.Assert.assertNull(str48);
        org.junit.Assert.assertNull(statisticalDateTimeOffset53);
        org.junit.Assert.assertNull(doubleWithDisplay55);
        org.junit.Assert.assertNotNull(reading57);
        org.junit.Assert.assertNotNull(reading59);
        org.junit.Assert.assertNull(instant62);
        org.junit.Assert.assertNull(str63);
        org.junit.Assert.assertNotNull(timeSeriesPoint71);
        org.junit.Assert.assertNotNull(timeSeriesPoint76);
        org.junit.Assert.assertNotNull(timeSeriesPoint81);
        org.junit.Assert.assertNotNull(timeSeriesPointArray82);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + true + "'", boolean84 == true);
        org.junit.Assert.assertNotNull(trendLineAnalysisServiceRequest86);
        org.junit.Assert.assertNull(instant87);
        org.junit.Assert.assertNull(instant88);
    }

    @Test
    public void test24303() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest48.test24303");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSpecimen putSpecimen0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSpecimen();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSpecimen putSpecimen2 = putSpecimen0.setNumberOfRequestedObservations((java.lang.Integer) 4);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Activity activity3 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Activity();
        java.time.OffsetDateTime offsetDateTime4 = activity3.getStartTime();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Activity activity6 = activity3.setLoggerFileName("'.'SSSSSSS");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocation samplingLocation7 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocation();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricConfiguration metricConfiguration8 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricConfiguration();
        java.lang.String str9 = metricConfiguration8.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty observedProperty10 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty();
        observedProperty10.CasNumber = "MinDuration";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricConfiguration metricConfiguration13 = metricConfiguration8.setObservedProperty(observedProperty10);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultType resultType14 = observedProperty10.ResultType;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservedProperty postObservedProperty15 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservedProperty();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UnitGroup unitGroup16 = postObservedProperty15.UnitGroup;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity quantity17 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Unit unit18 = null;
        quantity17.Unit = unit18;
        postObservedProperty15.LowerLimit = quantity17;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity quantity21 = postObservedProperty15.LowerLimit;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Unit unit22 = quantity21.Unit;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty observedProperty23 = observedProperty10.setUpperLimit(quantity21);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocation samplingLocation24 = samplingLocation7.setElevation(quantity21);
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment> domainObjectAttachmentList25 = samplingLocation24.getAttachments();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutFieldVisit putFieldVisit26 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutFieldVisit();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity[] plannedActivityArray27 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity> plannedActivityList28 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity>();
        boolean boolean29 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity>) plannedActivityList28, plannedActivityArray27);
        putFieldVisit26.PlannedActivities = plannedActivityList28;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment31 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment();
        java.lang.String str32 = domainObjectAttachment31.getId();
        java.lang.String str33 = domainObjectAttachment31.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Attachment attachment34 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment35 = domainObjectAttachment31.setAttachment(attachment34);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment36 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment();
        java.lang.String str37 = domainObjectAttachment36.getId();
        java.lang.String str38 = domainObjectAttachment36.getId();
        domainObjectAttachment36.Id = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment42 = domainObjectAttachment36.setId("hi!");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment43 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment();
        java.lang.String str44 = domainObjectAttachment43.getId();
        java.lang.String str45 = domainObjectAttachment43.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Attachment attachment46 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment47 = domainObjectAttachment43.setAttachment(attachment46);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment48 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment();
        java.lang.String str49 = domainObjectAttachment48.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment50 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment();
        java.lang.String str51 = domainObjectAttachment50.getId();
        java.lang.String str52 = domainObjectAttachment50.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Attachment attachment53 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment54 = domainObjectAttachment50.setAttachment(attachment53);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment55 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment();
        java.lang.String str56 = domainObjectAttachment55.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment[] domainObjectAttachmentArray57 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment[] { domainObjectAttachment31, domainObjectAttachment36, domainObjectAttachment43, domainObjectAttachment48, domainObjectAttachment50, domainObjectAttachment55 };
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment> domainObjectAttachmentList58 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment>();
        boolean boolean59 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment>) domainObjectAttachmentList58, domainObjectAttachmentArray57);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutFieldVisit putFieldVisit60 = putFieldVisit26.setAttachments((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment>) domainObjectAttachmentList58);
        samplingLocation24.Attachments = domainObjectAttachmentList58;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Address address62 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocation samplingLocation63 = samplingLocation24.setAddress(address62);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocation samplingLocation65 = samplingLocation63.setHorizontalCollectionMethod("https");
        activity6.SamplingLocation = samplingLocation63;
        java.time.OffsetDateTime offsetDateTime67 = null;
        activity6.EndTime = offsetDateTime67;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSpecimen putSpecimen69 = putSpecimen0.setActivity(activity6);
        putSpecimen69.Id = "multipart/form-data; boundary=****ee0ec537-fde4-45ee-9c35-68c37cf65c1c****";
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttribute> extendedAttributeList72 = putSpecimen69.ExtendedAttributes;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSpecimen putSpecimen74 = putSpecimen69.setNumberOfRequestedObservations((java.lang.Integer) 5);
        org.junit.Assert.assertNotNull(putSpecimen2);
        org.junit.Assert.assertNull(offsetDateTime4);
        org.junit.Assert.assertNotNull(activity6);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(metricConfiguration13);
        org.junit.Assert.assertNull(resultType14);
        org.junit.Assert.assertNull(unitGroup16);
        org.junit.Assert.assertNotNull(quantity21);
        org.junit.Assert.assertNull(unit22);
        org.junit.Assert.assertNotNull(observedProperty23);
        org.junit.Assert.assertNotNull(samplingLocation24);
        org.junit.Assert.assertNull(domainObjectAttachmentList25);
        org.junit.Assert.assertNotNull(plannedActivityArray27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertNotNull(domainObjectAttachment35);
        org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertNull(str38);
        org.junit.Assert.assertNotNull(domainObjectAttachment42);
        org.junit.Assert.assertNull(str44);
        org.junit.Assert.assertNull(str45);
        org.junit.Assert.assertNotNull(domainObjectAttachment47);
        org.junit.Assert.assertNull(str49);
        org.junit.Assert.assertNull(str51);
        org.junit.Assert.assertNull(str52);
        org.junit.Assert.assertNotNull(domainObjectAttachment54);
        org.junit.Assert.assertNull(str56);
        org.junit.Assert.assertNotNull(domainObjectAttachmentArray57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(putFieldVisit60);
        org.junit.Assert.assertNotNull(samplingLocation63);
        org.junit.Assert.assertNotNull(samplingLocation65);
        org.junit.Assert.assertNotNull(putSpecimen69);
        org.junit.Assert.assertNull(extendedAttributeList72);
        org.junit.Assert.assertNotNull(putSpecimen74);
    }

    @Test
    public void test24304() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest48.test24304");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObservation importItemObservation0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObservation();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest1 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest();
        java.lang.Object obj2 = timeAlignedDataServiceRequest1.getResponseType();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse3 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant4 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse5 = locationDescriptionListServiceResponse3.setNextToken(instant4);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest6 = timeAlignedDataServiceRequest1.setQueryFrom(instant4);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags7 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray11 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList12 = new java.util.ArrayList<java.lang.String>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList12, strArray11);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags14 = putLocationTags7.setTagUniqueIds(strList12);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest15 = timeAlignedDataServiceRequest1.setTimeSeriesOutputUnitIds(strList12);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObservation importItemObservation16 = importItemObservation0.setFields((java.util.List<java.lang.String>) strList12);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemStatusType importItemStatusType17 = importItemObservation0.Status;
        java.util.List<java.lang.String> strList18 = importItemObservation0.getFields();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItem importItem19 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_20 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray22 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList23 = new java.util.ArrayList<java.lang.String>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList23, strArray22);
        getObservationsV2_20.SpecimenIds = strList23;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags26 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray30 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList31 = new java.util.ArrayList<java.lang.String>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList31, strArray30);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags33 = putLocationTags26.setTagUniqueIds(strList31);
        getObservationsV2_20.QualityControlTypes = strList31;
        java.util.List<java.lang.String> strList35 = getObservationsV2_20.getLabReportIds();
        importItem19.Errors = getObservationsV2_20;
        java.lang.Object obj37 = importItem19.getExistingItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemSamplingLocation importItemSamplingLocation38 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemSamplingLocation();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemSamplingLocation importItemSamplingLocation40 = importItemSamplingLocation38.setInput("yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItem importItem41 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_42 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray44 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList45 = new java.util.ArrayList<java.lang.String>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList45, strArray44);
        getObservationsV2_42.SpecimenIds = strList45;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags48 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray52 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList53 = new java.util.ArrayList<java.lang.String>();
        boolean boolean54 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList53, strArray52);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags55 = putLocationTags48.setTagUniqueIds(strList53);
        getObservationsV2_42.QualityControlTypes = strList53;
        java.util.List<java.lang.String> strList57 = getObservationsV2_42.getLabReportIds();
        importItem41.Errors = getObservationsV2_42;
        java.lang.Object obj59 = importItem41.getExistingItem();
        importItem41.Input = "hi!";
        java.lang.Object obj62 = importItem41.getItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemStatusType importItemStatusType63 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemStatusType.SKIPPED;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItem importItem64 = importItem41.setStatus(importItemStatusType63);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemSamplingLocation importItemSamplingLocation65 = importItemSamplingLocation40.setStatus(importItemStatusType63);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemStatusType importItemStatusType66 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemStatusType.ERROR;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemSamplingLocation importItemSamplingLocation67 = importItemSamplingLocation40.setStatus(importItemStatusType66);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemStatusType importItemStatusType68 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemStatusType.NEW;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemSamplingLocation importItemSamplingLocation69 = importItemSamplingLocation40.setStatus(importItemStatusType68);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItem importItem70 = importItem19.setStatus(importItemStatusType68);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObservation importItemObservation71 = importItemObservation0.setStatus(importItemStatusType68);
        importItemObservation0.RowId = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSSSSSZZZZZ";
        java.lang.String str74 = importItemObservation0.RowId;
        java.lang.Object obj75 = importItemObservation0.Errors;
        org.junit.Assert.assertNotNull(obj2);
        org.junit.Assert.assertEquals(obj2.toString(), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj2), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj2), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertNotNull(instant4);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse5);
        org.junit.Assert.assertNotNull(timeAlignedDataServiceRequest6);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(putLocationTags14);
        org.junit.Assert.assertNotNull(timeAlignedDataServiceRequest15);
        org.junit.Assert.assertNotNull(importItemObservation16);
        org.junit.Assert.assertNull(importItemStatusType17);
        org.junit.Assert.assertNotNull(strList18);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(putLocationTags33);
        org.junit.Assert.assertNull(strList35);
        org.junit.Assert.assertNull(obj37);
        org.junit.Assert.assertNotNull(importItemSamplingLocation40);
        org.junit.Assert.assertNotNull(strArray44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(strArray52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(putLocationTags55);
        org.junit.Assert.assertNull(strList57);
        org.junit.Assert.assertNull(obj59);
        org.junit.Assert.assertNull(obj62);
        org.junit.Assert.assertTrue("'" + importItemStatusType63 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemStatusType.SKIPPED + "'", importItemStatusType63.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemStatusType.SKIPPED));
        org.junit.Assert.assertNotNull(importItem64);
        org.junit.Assert.assertNotNull(importItemSamplingLocation65);
        org.junit.Assert.assertTrue("'" + importItemStatusType66 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemStatusType.ERROR + "'", importItemStatusType66.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemStatusType.ERROR));
        org.junit.Assert.assertNotNull(importItemSamplingLocation67);
        org.junit.Assert.assertTrue("'" + importItemStatusType68 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemStatusType.NEW + "'", importItemStatusType68.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemStatusType.NEW));
        org.junit.Assert.assertNotNull(importItemSamplingLocation69);
        org.junit.Assert.assertNotNull(importItem70);
        org.junit.Assert.assertNotNull(importItemObservation71);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSSSSSZZZZZ" + "'", str74, "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSSSSSZZZZZ");
        org.junit.Assert.assertNull(obj75);
    }

    @Test
    public void test24305() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest48.test24305");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedPoint timeAlignedPoint0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedPoint();
        timeAlignedPoint0.Method9 = "multipart/form-data; boundary=****7eff1774-b6b0-471a-961c-156c64359366****";
        timeAlignedPoint0.DisplayValue9 = "";
        java.lang.String str5 = timeAlignedPoint0.getApprovalName4();
        java.lang.Long long6 = timeAlignedPoint0.getApprovalLevel7();
        java.lang.String str7 = timeAlignedPoint0.Method7;
        java.lang.String str8 = timeAlignedPoint0.Qualifiers9;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedPoint timeAlignedPoint10 = timeAlignedPoint0.setGradeName10("");
        java.lang.String str11 = timeAlignedPoint10.getApprovalName9();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedPoint timeAlignedPoint13 = timeAlignedPoint10.setApprovalName2("****ee0ec537-fde4-45ee-9c35-68c37cf65c1c****");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedPoint timeAlignedPoint15 = timeAlignedPoint10.setGradeCode9((java.lang.Long) 100L);
        java.lang.String str16 = timeAlignedPoint15.GradeName2;
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(long6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(timeAlignedPoint10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNotNull(timeAlignedPoint13);
        org.junit.Assert.assertNotNull(timeAlignedPoint15);
        org.junit.Assert.assertNull(str16);
    }

    @Test
    public void test24306() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest48.test24306");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationImportResultV2 getObservationImportResultV2_0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationImportResultV2();
        getObservationImportResultV2_0.Id = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationImportResultV2 getObservationImportResultV2_4 = getObservationImportResultV2_0.setId("'.'SSSSSSS://multipart/form-data; boundary=****e0afd3ef-ab93-4371-a368-4a6f5ef58c71****");
        org.junit.Assert.assertNotNull(getObservationImportResultV2_4);
    }

    @Test
    public void test24307() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest48.test24307");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFieldVisitActivityFromPlannedActivity postFieldVisitActivityFromPlannedActivity0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFieldVisitActivityFromPlannedActivity();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ActivityTemplate activityTemplate1 = postFieldVisitActivityFromPlannedActivity0.ActivityTemplate;
        postFieldVisitActivityFromPlannedActivity0.Id = "ZZZZZ";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutActivityTemplate putActivityTemplate4 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutActivityTemplate();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MediumType mediumType5 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MediumType.WATER;
        putActivityTemplate4.Medium = mediumType5;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFieldVisitActivityFromPlannedActivity postFieldVisitActivityFromPlannedActivity7 = postFieldVisitActivityFromPlannedActivity0.setMedium(mediumType5);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLabReport postLabReport8 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLabReport();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFieldVisitActivityWithTemplate postFieldVisitActivityWithTemplate9 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFieldVisitActivityWithTemplate();
        java.lang.String str10 = postFieldVisitActivityWithTemplate9.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFieldVisitActivityWithTemplate postFieldVisitActivityWithTemplate12 = postFieldVisitActivityWithTemplate9.setCustomId("'.'SSSSSSS");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedFieldResult plannedFieldResult13 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedFieldResult();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes14 = plannedFieldResult13.AuditAttributes;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails15 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails17 = labResultDetails15.setAnalysisComment("/AQUARIUS/Acquisition/v2");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes18 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails19 = labResultDetails17.setAuditAttributes(auditAttributes18);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedFieldResult plannedFieldResult20 = plannedFieldResult13.setAuditAttributes(auditAttributes18);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroup analyticalGroup21 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroup();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupType analyticalGroupType22 = analyticalGroup21.getType();
        analyticalGroup21.Name = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSSSSSZZZZZ";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroup analyticalGroup25 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroup();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem analyticalGroupItem26 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod27 = analyticalGroupItem26.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem analyticalGroupItem28 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod29 = analyticalGroupItem28.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod30 = analyticalGroupItem28.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem analyticalGroupItem31 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod32 = analyticalGroupItem31.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod33 = analyticalGroupItem31.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod34 = null;
        analyticalGroupItem31.AnalysisMethod = analysisMethod34;
        java.lang.String str36 = analyticalGroupItem31.getHoldingTime();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem analyticalGroupItem37 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod38 = analyticalGroupItem37.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod39 = analyticalGroupItem37.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem analyticalGroupItem40 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod41 = analyticalGroupItem40.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem analyticalGroupItem42 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod43 = analyticalGroupItem42.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod44 = analyticalGroupItem42.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod45 = null;
        analyticalGroupItem42.AnalysisMethod = analysisMethod45;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem[] analyticalGroupItemArray47 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem[] { analyticalGroupItem26, analyticalGroupItem28, analyticalGroupItem31, analyticalGroupItem37, analyticalGroupItem40, analyticalGroupItem42 };
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem> analyticalGroupItemList48 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem>();
        boolean boolean49 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem>) analyticalGroupItemList48, analyticalGroupItemArray47);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroup analyticalGroup50 = analyticalGroup25.setAnalyticalGroupItems((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem>) analyticalGroupItemList48);
        analyticalGroup21.AnalyticalGroupItems = analyticalGroupItemList48;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes52 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes();
        analyticalGroup21.AuditAttributes = auditAttributes52;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedFieldResult plannedFieldResult54 = plannedFieldResult20.setAuditAttributes(auditAttributes52);
        postFieldVisitActivityWithTemplate12.AuditAttributes = auditAttributes52;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLabReport postLabReport56 = postLabReport8.setAuditAttributes(auditAttributes52);
        java.time.OffsetDateTime offsetDateTime57 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLabReport postLabReport58 = postLabReport8.setDateReceived(offsetDateTime57);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LocationGroupType locationGroupType59 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LocationGroupType();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes60 = locationGroupType59.getAuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LocationGroupType locationGroupType62 = locationGroupType59.setCustomId("yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes63 = locationGroupType59.getAuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutActivityTemplate putActivityTemplate64 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutActivityTemplate();
        java.lang.String str65 = putActivityTemplate64.getId();
        java.lang.String str66 = putActivityTemplate64.Id;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes67 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes69 = auditAttributes67.setCreationUserProfileId("'.'SSSSSSS");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutActivityTemplate putActivityTemplate70 = putActivityTemplate64.setAuditAttributes(auditAttributes69);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LocationGroupType locationGroupType71 = locationGroupType59.setAuditAttributes(auditAttributes69);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLabReport postLabReport72 = postLabReport58.setAuditAttributes(auditAttributes69);
        java.time.OffsetDateTime offsetDateTime73 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLabReport postLabReport74 = postLabReport72.setDateReceived(offsetDateTime73);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes75 = postLabReport74.getAuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes76 = postLabReport74.AuditAttributes;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFieldVisitActivityFromPlannedActivity postFieldVisitActivityFromPlannedActivity77 = postFieldVisitActivityFromPlannedActivity0.setAuditAttributes(auditAttributes76);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFieldVisitActivityFromPlannedActivity postFieldVisitActivityFromPlannedActivity79 = postFieldVisitActivityFromPlannedActivity77.setInstruction("MaxInstant");
        org.junit.Assert.assertNull(activityTemplate1);
        org.junit.Assert.assertTrue("'" + mediumType5 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MediumType.WATER + "'", mediumType5.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MediumType.WATER));
        org.junit.Assert.assertNotNull(postFieldVisitActivityFromPlannedActivity7);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNotNull(postFieldVisitActivityWithTemplate12);
        org.junit.Assert.assertNull(auditAttributes14);
        org.junit.Assert.assertNotNull(labResultDetails17);
        org.junit.Assert.assertNotNull(labResultDetails19);
        org.junit.Assert.assertNotNull(plannedFieldResult20);
        org.junit.Assert.assertNull(analyticalGroupType22);
        org.junit.Assert.assertNull(analysisMethod27);
        org.junit.Assert.assertNull(analysisMethod29);
        org.junit.Assert.assertNull(analysisMethod30);
        org.junit.Assert.assertNull(analysisMethod32);
        org.junit.Assert.assertNull(analysisMethod33);
        org.junit.Assert.assertNull(str36);
        org.junit.Assert.assertNull(analysisMethod38);
        org.junit.Assert.assertNull(analysisMethod39);
        org.junit.Assert.assertNull(analysisMethod41);
        org.junit.Assert.assertNull(analysisMethod43);
        org.junit.Assert.assertNull(analysisMethod44);
        org.junit.Assert.assertNotNull(analyticalGroupItemArray47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(analyticalGroup50);
        org.junit.Assert.assertNotNull(plannedFieldResult54);
        org.junit.Assert.assertNotNull(postLabReport56);
        org.junit.Assert.assertNotNull(postLabReport58);
        org.junit.Assert.assertNull(auditAttributes60);
        org.junit.Assert.assertNotNull(locationGroupType62);
        org.junit.Assert.assertNull(auditAttributes63);
        org.junit.Assert.assertNull(str65);
        org.junit.Assert.assertNull(str66);
        org.junit.Assert.assertNotNull(auditAttributes69);
        org.junit.Assert.assertNotNull(putActivityTemplate70);
        org.junit.Assert.assertNotNull(locationGroupType71);
        org.junit.Assert.assertNotNull(postLabReport72);
        org.junit.Assert.assertNotNull(postLabReport74);
        org.junit.Assert.assertNotNull(auditAttributes75);
        org.junit.Assert.assertNotNull(auditAttributes76);
        org.junit.Assert.assertNotNull(postFieldVisitActivityFromPlannedActivity77);
        org.junit.Assert.assertNotNull(postFieldVisitActivityFromPlannedActivity79);
    }

    @Test
    public void test24308() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest48.test24308");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostSamplingLocation postSamplingLocation0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostSamplingLocation();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple standardSimple1 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple();
        com.aquaticinformatics.aquarius.sdk.samples.Interval interval2 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple standardSimple3 = standardSimple1.setApplicabilityRange(interval2);
        java.lang.String str4 = standardSimple1.getCustomId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple standardSimple5 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple();
        com.aquaticinformatics.aquarius.sdk.samples.Interval interval6 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple standardSimple7 = standardSimple5.setApplicabilityRange(interval6);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple standardSimple9 = standardSimple5.setActive((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple standardSimple10 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple standardSimple11 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple();
        com.aquaticinformatics.aquarius.sdk.samples.Interval interval12 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple standardSimple13 = standardSimple11.setApplicabilityRange(interval12);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple standardSimple15 = standardSimple11.setActive((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple standardSimple16 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple();
        com.aquaticinformatics.aquarius.sdk.samples.Interval interval17 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple standardSimple18 = standardSimple16.setApplicabilityRange(interval17);
        java.lang.String str19 = standardSimple18.CustomId;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple standardSimple20 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple standardSimple21 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple standardSimple22 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple();
        com.aquaticinformatics.aquarius.sdk.samples.Interval interval23 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple standardSimple24 = standardSimple22.setApplicabilityRange(interval23);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple standardSimple25 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple();
        com.aquaticinformatics.aquarius.sdk.samples.Interval interval26 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple standardSimple27 = standardSimple25.setApplicabilityRange(interval26);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple[] standardSimpleArray28 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple[] { standardSimple1, standardSimple5, standardSimple10, standardSimple11, standardSimple18, standardSimple20, standardSimple21, standardSimple24, standardSimple25 };
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple> standardSimpleList29 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple>) standardSimpleList29, standardSimpleArray28);
        postSamplingLocation0.Standards = standardSimpleList29;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostSamplingLocation postSamplingLocation33 = postSamplingLocation0.setVerticalDatum("MinInstant");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostSamplingLocation postSamplingLocation35 = postSamplingLocation33.setVerticalCollectionMethod("hi!:///AQUARIUS/Provisioning/v1");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LocationType locationType36 = postSamplingLocation35.getType();
        org.junit.Assert.assertNotNull(standardSimple3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNotNull(standardSimple7);
        org.junit.Assert.assertNotNull(standardSimple9);
        org.junit.Assert.assertNotNull(standardSimple13);
        org.junit.Assert.assertNotNull(standardSimple15);
        org.junit.Assert.assertNotNull(standardSimple18);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertNotNull(standardSimple24);
        org.junit.Assert.assertNotNull(standardSimple27);
        org.junit.Assert.assertNotNull(standardSimpleArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(postSamplingLocation33);
        org.junit.Assert.assertNotNull(postSamplingLocation35);
        org.junit.Assert.assertNull(locationType36);
    }

    @Test
    public void test24309() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest48.test24309");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ReferencePointPeriod referencePointPeriod0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ReferencePointPeriod();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ReferencePointPeriod referencePointPeriod2 = referencePointPeriod0.setStandardIdentifier("9999-12-31T23:59:59.999Z");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MeasurementDirection measurementDirection3 = referencePointPeriod2.MeasurementDirection;
        referencePointPeriod2.IsMeasuredAgainstLocalAssumedDatum = true;
        java.lang.String str6 = referencePointPeriod2.Comment;
        java.lang.String str7 = referencePointPeriod2.getUnit();
        java.lang.String str8 = referencePointPeriod2.Unit;
        org.junit.Assert.assertNotNull(referencePointPeriod2);
        org.junit.Assert.assertNull(measurementDirection3);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(str8);
    }

    @Test
    public void test24310() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest48.test24310");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.TimeSeriesPoint timeSeriesPoint0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.TimeSeriesPoint();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.PointType pointType1 = timeSeriesPoint0.Type;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.PointType pointType2 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.PointType.Gap;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.TimeSeriesPoint timeSeriesPoint3 = timeSeriesPoint0.setType(pointType2);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.TimeSeriesPoint timeSeriesPoint4 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.TimeSeriesPoint();
        java.util.ArrayList<java.lang.String> strList5 = timeSeriesPoint4.getQualifiers();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.PointType pointType6 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.PointType.Gap;
        timeSeriesPoint4.Type = pointType6;
        timeSeriesPoint0.Type = pointType6;
        java.util.ArrayList<java.lang.String> strList9 = timeSeriesPoint0.getQualifiers();
        java.lang.Double double10 = timeSeriesPoint0.getValue();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.PointType pointType11 = timeSeriesPoint0.Type;
        org.junit.Assert.assertNull(pointType1);
        org.junit.Assert.assertTrue("'" + pointType2 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.PointType.Gap + "'", pointType2.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.PointType.Gap));
        org.junit.Assert.assertNotNull(timeSeriesPoint3);
        org.junit.Assert.assertNull(strList5);
        org.junit.Assert.assertTrue("'" + pointType6 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.PointType.Gap + "'", pointType6.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.PointType.Gap));
        org.junit.Assert.assertNull(strList9);
        org.junit.Assert.assertNull(double10);
        org.junit.Assert.assertTrue("'" + pointType11 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.PointType.Gap + "'", pointType11.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.PointType.Gap));
    }

    @Test
    public void test24311() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest48.test24311");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Processor processor0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Processor();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostTag postTag1 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostTag();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_2 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray5 = new java.lang.String[] { "", "" };
        java.util.ArrayList<java.lang.String> strList6 = new java.util.ArrayList<java.lang.String>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList6, strArray5);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_8 = getObservationsV2_2.setDataClassifications((java.util.List<java.lang.String>) strList6);
        postTag1.PickListValues = strList6;
        java.util.ArrayList<java.lang.String> strList10 = postTag1.PickListValues;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Processor processor11 = processor0.setInputTimeSeriesUniqueIds(strList10);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Processor processor13 = processor11.setOutputTimeSeriesUniqueId("2021.4.62.0");
        java.lang.String str14 = processor13.getOutputTimeSeriesUniqueId();
        java.lang.String str15 = processor13.InputRatingModelIdentifier;
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(getObservationsV2_8);
        org.junit.Assert.assertNotNull(strList10);
        org.junit.Assert.assertNotNull(processor11);
        org.junit.Assert.assertNotNull(processor13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "2021.4.62.0" + "'", str14, "2021.4.62.0");
        org.junit.Assert.assertNull(str15);
    }

    @Test
    public void test24312() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest48.test24312");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.LocationDatumResponse locationDatumResponse0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.LocationDatumResponse();
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.LocationDatumPeriod> locationDatumPeriodList1 = locationDatumResponse0.Results;
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.LocationDatumPeriod> locationDatumPeriodList2 = locationDatumResponse0.Results;
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.LocationDatumPeriod> locationDatumPeriodList3 = locationDatumResponse0.getResults();
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.LocationDatumPeriod> locationDatumPeriodList4 = locationDatumResponse0.Results;
        org.junit.Assert.assertNull(locationDatumPeriodList1);
        org.junit.Assert.assertNull(locationDatumPeriodList2);
        org.junit.Assert.assertNull(locationDatumPeriodList3);
        org.junit.Assert.assertNull(locationDatumPeriodList4);
    }

    @Test
    public void test24313() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest48.test24313");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingCurve ratingCurve0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingCurve();
        java.lang.String str1 = ratingCurve0.Equation;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ExpandedRatingCurve expandedRatingCurve2 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ExpandedRatingCurve();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingCurveType ratingCurveType3 = expandedRatingCurve2.Type;
        expandedRatingCurve2.IsBlended = false;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ParameterWithUnit parameterWithUnit6 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ParameterWithUnit();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ExpandedRatingCurve expandedRatingCurve7 = expandedRatingCurve2.setOutputParameter(parameterWithUnit6);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingCurve ratingCurve8 = ratingCurve0.setInputParameter(parameterWithUnit6);
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.OffsetPoint> offsetPointList9 = ratingCurve0.getOffsets();
        ratingCurve0.Id = "https";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ExpandedRatingCurve expandedRatingCurve12 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ExpandedRatingCurve();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingCurveType ratingCurveType13 = expandedRatingCurve12.Type;
        expandedRatingCurve12.IsBlended = false;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ParameterWithUnit parameterWithUnit16 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ParameterWithUnit();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ExpandedRatingCurve expandedRatingCurve17 = expandedRatingCurve12.setOutputParameter(parameterWithUnit16);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ParameterWithUnit parameterWithUnit18 = expandedRatingCurve17.getOutputParameter();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ExpandedRatingCurve expandedRatingCurve20 = expandedRatingCurve17.setId("multipart/form-data; boundary=****44f0772e-c3ca-4316-8e2a-61ec8540d661****");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ParameterWithUnit parameterWithUnit21 = expandedRatingCurve20.getOutputParameter();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ExpandedRatingCurve expandedRatingCurve22 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ExpandedRatingCurve();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ParameterWithUnit parameterWithUnit23 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ParameterWithUnit();
        expandedRatingCurve22.OutputParameter = parameterWithUnit23;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ExpandedRatingCurve expandedRatingCurve25 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ExpandedRatingCurve();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingCurveType ratingCurveType26 = expandedRatingCurve25.Type;
        expandedRatingCurve25.IsBlended = false;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ExpandedRatingCurve expandedRatingCurve30 = expandedRatingCurve25.setIsBlended((java.lang.Boolean) true);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PeriodOfApplicability[] periodOfApplicabilityArray31 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PeriodOfApplicability[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PeriodOfApplicability> periodOfApplicabilityList32 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PeriodOfApplicability>();
        boolean boolean33 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PeriodOfApplicability>) periodOfApplicabilityList32, periodOfApplicabilityArray31);
        expandedRatingCurve25.PeriodsOfApplicability = periodOfApplicabilityList32;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ExpandedRatingCurve expandedRatingCurve35 = expandedRatingCurve22.setPeriodsOfApplicability(periodOfApplicabilityList32);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ExpandedRatingCurve expandedRatingCurve36 = expandedRatingCurve20.setPeriodsOfApplicability(periodOfApplicabilityList32);
        ratingCurve0.PeriodsOfApplicability = periodOfApplicabilityList32;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingCurve ratingCurve38 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingCurve();
        java.lang.String str39 = ratingCurve38.Equation;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ParameterWithUnit parameterWithUnit40 = ratingCurve38.getInputParameter();
        java.lang.String str41 = ratingCurve38.getRemarks();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ExpandedRatingCurve expandedRatingCurve42 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ExpandedRatingCurve();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingCurveType ratingCurveType43 = expandedRatingCurve42.Type;
        expandedRatingCurve42.IsBlended = false;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ExpandedRatingCurve expandedRatingCurve47 = expandedRatingCurve42.setIsBlended((java.lang.Boolean) true);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PeriodOfApplicability[] periodOfApplicabilityArray48 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PeriodOfApplicability[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PeriodOfApplicability> periodOfApplicabilityList49 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PeriodOfApplicability>();
        boolean boolean50 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PeriodOfApplicability>) periodOfApplicabilityList49, periodOfApplicabilityArray48);
        expandedRatingCurve42.PeriodsOfApplicability = periodOfApplicabilityList49;
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PeriodOfApplicability> periodOfApplicabilityList52 = expandedRatingCurve42.PeriodsOfApplicability;
        ratingCurve38.PeriodsOfApplicability = periodOfApplicabilityList52;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingCurve ratingCurve54 = ratingCurve0.setPeriodsOfApplicability(periodOfApplicabilityList52);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(ratingCurveType3);
        org.junit.Assert.assertNotNull(expandedRatingCurve7);
        org.junit.Assert.assertNotNull(ratingCurve8);
        org.junit.Assert.assertNull(offsetPointList9);
        org.junit.Assert.assertNull(ratingCurveType13);
        org.junit.Assert.assertNotNull(expandedRatingCurve17);
        org.junit.Assert.assertNotNull(parameterWithUnit18);
        org.junit.Assert.assertNotNull(expandedRatingCurve20);
        org.junit.Assert.assertNotNull(parameterWithUnit21);
        org.junit.Assert.assertNull(ratingCurveType26);
        org.junit.Assert.assertNotNull(expandedRatingCurve30);
        org.junit.Assert.assertNotNull(periodOfApplicabilityArray31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(expandedRatingCurve35);
        org.junit.Assert.assertNotNull(expandedRatingCurve36);
        org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertNull(parameterWithUnit40);
        org.junit.Assert.assertNull(str41);
        org.junit.Assert.assertNull(ratingCurveType43);
        org.junit.Assert.assertNotNull(expandedRatingCurve47);
        org.junit.Assert.assertNotNull(periodOfApplicabilityArray48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(periodOfApplicabilityList52);
        org.junit.Assert.assertNotNull(ratingCurve54);
    }

    @Test
    public void test24314() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest48.test24314");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenWithObservations specimenWithObservations0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenWithObservations();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Activity activity1 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Activity();
        java.time.OffsetDateTime offsetDateTime2 = activity1.getStartTime();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Activity activity4 = activity1.setLoggerFileName("'.'SSSSSSS");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocation samplingLocation5 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocation();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricConfiguration metricConfiguration6 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricConfiguration();
        java.lang.String str7 = metricConfiguration6.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty observedProperty8 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty();
        observedProperty8.CasNumber = "MinDuration";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricConfiguration metricConfiguration11 = metricConfiguration6.setObservedProperty(observedProperty8);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultType resultType12 = observedProperty8.ResultType;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservedProperty postObservedProperty13 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservedProperty();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UnitGroup unitGroup14 = postObservedProperty13.UnitGroup;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity quantity15 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Unit unit16 = null;
        quantity15.Unit = unit16;
        postObservedProperty13.LowerLimit = quantity15;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity quantity19 = postObservedProperty13.LowerLimit;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Unit unit20 = quantity19.Unit;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty observedProperty21 = observedProperty8.setUpperLimit(quantity19);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocation samplingLocation22 = samplingLocation5.setElevation(quantity19);
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment> domainObjectAttachmentList23 = samplingLocation22.getAttachments();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutFieldVisit putFieldVisit24 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutFieldVisit();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity[] plannedActivityArray25 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity> plannedActivityList26 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity>();
        boolean boolean27 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity>) plannedActivityList26, plannedActivityArray25);
        putFieldVisit24.PlannedActivities = plannedActivityList26;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment29 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment();
        java.lang.String str30 = domainObjectAttachment29.getId();
        java.lang.String str31 = domainObjectAttachment29.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Attachment attachment32 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment33 = domainObjectAttachment29.setAttachment(attachment32);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment34 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment();
        java.lang.String str35 = domainObjectAttachment34.getId();
        java.lang.String str36 = domainObjectAttachment34.getId();
        domainObjectAttachment34.Id = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment40 = domainObjectAttachment34.setId("hi!");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment41 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment();
        java.lang.String str42 = domainObjectAttachment41.getId();
        java.lang.String str43 = domainObjectAttachment41.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Attachment attachment44 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment45 = domainObjectAttachment41.setAttachment(attachment44);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment46 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment();
        java.lang.String str47 = domainObjectAttachment46.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment48 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment();
        java.lang.String str49 = domainObjectAttachment48.getId();
        java.lang.String str50 = domainObjectAttachment48.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Attachment attachment51 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment52 = domainObjectAttachment48.setAttachment(attachment51);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment53 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment();
        java.lang.String str54 = domainObjectAttachment53.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment[] domainObjectAttachmentArray55 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment[] { domainObjectAttachment29, domainObjectAttachment34, domainObjectAttachment41, domainObjectAttachment46, domainObjectAttachment48, domainObjectAttachment53 };
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment> domainObjectAttachmentList56 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment>();
        boolean boolean57 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment>) domainObjectAttachmentList56, domainObjectAttachmentArray55);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutFieldVisit putFieldVisit58 = putFieldVisit24.setAttachments((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment>) domainObjectAttachmentList56);
        samplingLocation22.Attachments = domainObjectAttachmentList56;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Address address60 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocation samplingLocation61 = samplingLocation22.setAddress(address60);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocation samplingLocation63 = samplingLocation61.setHorizontalCollectionMethod("https");
        activity4.SamplingLocation = samplingLocation61;
        activity4.LoggerFileName = "";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenWithObservations specimenWithObservations67 = specimenWithObservations0.setActivity(activity4);
        java.lang.Integer int68 = specimenWithObservations0.getNumberOfReceivedObservations();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenViewStatusType specimenViewStatusType69 = specimenWithObservations0.getStatus();
        org.junit.Assert.assertNull(offsetDateTime2);
        org.junit.Assert.assertNotNull(activity4);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(metricConfiguration11);
        org.junit.Assert.assertNull(resultType12);
        org.junit.Assert.assertNull(unitGroup14);
        org.junit.Assert.assertNotNull(quantity19);
        org.junit.Assert.assertNull(unit20);
        org.junit.Assert.assertNotNull(observedProperty21);
        org.junit.Assert.assertNotNull(samplingLocation22);
        org.junit.Assert.assertNull(domainObjectAttachmentList23);
        org.junit.Assert.assertNotNull(plannedActivityArray25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertNotNull(domainObjectAttachment33);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertNull(str36);
        org.junit.Assert.assertNotNull(domainObjectAttachment40);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertNotNull(domainObjectAttachment45);
        org.junit.Assert.assertNull(str47);
        org.junit.Assert.assertNull(str49);
        org.junit.Assert.assertNull(str50);
        org.junit.Assert.assertNotNull(domainObjectAttachment52);
        org.junit.Assert.assertNull(str54);
        org.junit.Assert.assertNotNull(domainObjectAttachmentArray55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertNotNull(putFieldVisit58);
        org.junit.Assert.assertNotNull(samplingLocation61);
        org.junit.Assert.assertNotNull(samplingLocation63);
        org.junit.Assert.assertNotNull(specimenWithObservations67);
        org.junit.Assert.assertNull(int68);
        org.junit.Assert.assertNull(specimenViewStatusType69);
    }

    @Test
    public void test24315() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest48.test24315");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutObservationV2 putObservationV2_0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutObservationV2();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty observedProperty1 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutObservationV2 putObservationV2_2 = putObservationV2_0.setObservedProperty(observedProperty1);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Activity activity3 = putObservationV2_2.Activity;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.NullMeasureQualifier nullMeasureQualifier4 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutObservationV2 putObservationV2_5 = putObservationV2_2.setNullMeasureQualifier(nullMeasureQualifier4);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutObservationV2 putObservationV2_6 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutObservationV2();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty observedProperty7 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutObservationV2 putObservationV2_8 = putObservationV2_6.setObservedProperty(observedProperty7);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.NumericResult numericResult9 = putObservationV2_6.getNumericResult();
        java.lang.String str10 = putObservationV2_6.MediumSubdivision;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation11 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedFieldResult plannedFieldResult12 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation13 = observation11.setPlannedFieldResult(plannedFieldResult12);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabInstruction labInstruction14 = null;
        observation13.LabInstruction = labInstruction14;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.CollectionMethod collectionMethod16 = observation13.CollectionMethod;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.NullMeasureQualifier nullMeasureQualifier17 = null;
        observation13.NullMeasureQualifier = nullMeasureQualifier17;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DataClassificationType dataClassificationType19 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DataClassificationType.SURROGATE_RESULT;
        observation13.DataClassification = dataClassificationType19;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutObservationV2 putObservationV2_21 = putObservationV2_6.setDataClassification(dataClassificationType19);
        putObservationV2_2.DataClassification = dataClassificationType19;
        putObservationV2_2.CustomId = "hi!:///AQUARIUS/Provisioning/v1";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty observedProperty25 = putObservationV2_2.ObservedProperty;
        org.junit.Assert.assertNotNull(putObservationV2_2);
        org.junit.Assert.assertNull(activity3);
        org.junit.Assert.assertNotNull(putObservationV2_5);
        org.junit.Assert.assertNotNull(putObservationV2_8);
        org.junit.Assert.assertNull(numericResult9);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNotNull(observation13);
        org.junit.Assert.assertNull(collectionMethod16);
        org.junit.Assert.assertTrue("'" + dataClassificationType19 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DataClassificationType.SURROGATE_RESULT + "'", dataClassificationType19.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DataClassificationType.SURROGATE_RESULT));
        org.junit.Assert.assertNotNull(putObservationV2_21);
        org.junit.Assert.assertNull(observedProperty25);
    }

    @Test
    public void test24316() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest48.test24316");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitDescriptionListServiceResponse fieldVisitDescriptionListServiceResponse0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitDescriptionListServiceResponse();
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitDescription> fieldVisitDescriptionList1 = fieldVisitDescriptionListServiceResponse0.getDeletedFieldVisitDescriptions();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitDescriptionListServiceResponse fieldVisitDescriptionListServiceResponse2 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitDescriptionListServiceResponse();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesThresholdPeriod timeSeriesThresholdPeriod3 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesThresholdPeriod();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesThresholdPeriod timeSeriesThresholdPeriod5 = timeSeriesThresholdPeriod3.setReferenceValue((java.lang.Double) 0.0d);
        java.time.Instant instant6 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MinValue;
        timeSeriesThresholdPeriod3.AppliedTime = instant6;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeTransactionListServiceRequest metadataChangeTransactionListServiceRequest8 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeTransactionListServiceRequest();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostRecurringReport postRecurringReport9 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostRecurringReport();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary10 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        dischargeSummary10.Reviewer = "";
        java.time.Instant instant13 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        dischargeSummary10.MeasurementTime = instant13;
        postRecurringReport9.NextGenerationDate = instant13;
        java.time.Instant instant16 = postRecurringReport9.getNextGenerationDate();
        java.lang.String str17 = com.aquaticinformatics.aquarius.sdk.samples.serializers.InstantSerializer.format(instant16);
        metadataChangeTransactionListServiceRequest8.QueryFrom = instant16;
        timeSeriesThresholdPeriod3.AppliedTime = instant16;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitDescriptionListServiceResponse fieldVisitDescriptionListServiceResponse20 = fieldVisitDescriptionListServiceResponse2.setNextToken(instant16);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitDescription[] fieldVisitDescriptionArray21 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitDescription[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitDescription> fieldVisitDescriptionList22 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitDescription>();
        boolean boolean23 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitDescription>) fieldVisitDescriptionList22, fieldVisitDescriptionArray21);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitDescriptionListServiceResponse fieldVisitDescriptionListServiceResponse24 = fieldVisitDescriptionListServiceResponse20.setDeletedFieldVisitDescriptions(fieldVisitDescriptionList22);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitDescriptionListServiceResponse fieldVisitDescriptionListServiceResponse25 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitDescriptionListServiceResponse();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesThresholdPeriod timeSeriesThresholdPeriod26 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesThresholdPeriod();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesThresholdPeriod timeSeriesThresholdPeriod28 = timeSeriesThresholdPeriod26.setReferenceValue((java.lang.Double) 0.0d);
        java.time.Instant instant29 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MinValue;
        timeSeriesThresholdPeriod26.AppliedTime = instant29;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeTransactionListServiceRequest metadataChangeTransactionListServiceRequest31 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeTransactionListServiceRequest();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostRecurringReport postRecurringReport32 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostRecurringReport();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary33 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        dischargeSummary33.Reviewer = "";
        java.time.Instant instant36 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        dischargeSummary33.MeasurementTime = instant36;
        postRecurringReport32.NextGenerationDate = instant36;
        java.time.Instant instant39 = postRecurringReport32.getNextGenerationDate();
        java.lang.String str40 = com.aquaticinformatics.aquarius.sdk.samples.serializers.InstantSerializer.format(instant39);
        metadataChangeTransactionListServiceRequest31.QueryFrom = instant39;
        timeSeriesThresholdPeriod26.AppliedTime = instant39;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitDescriptionListServiceResponse fieldVisitDescriptionListServiceResponse43 = fieldVisitDescriptionListServiceResponse25.setNextToken(instant39);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitDescription[] fieldVisitDescriptionArray44 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitDescription[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitDescription> fieldVisitDescriptionList45 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitDescription>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitDescription>) fieldVisitDescriptionList45, fieldVisitDescriptionArray44);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitDescriptionListServiceResponse fieldVisitDescriptionListServiceResponse47 = fieldVisitDescriptionListServiceResponse43.setDeletedFieldVisitDescriptions(fieldVisitDescriptionList45);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitDescriptionListServiceResponse fieldVisitDescriptionListServiceResponse48 = fieldVisitDescriptionListServiceResponse20.setFieldVisitDescriptions(fieldVisitDescriptionList45);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitDescriptionListServiceResponse fieldVisitDescriptionListServiceResponse49 = fieldVisitDescriptionListServiceResponse0.setFieldVisitDescriptions(fieldVisitDescriptionList45);
        java.time.Instant instant50 = fieldVisitDescriptionListServiceResponse0.getNextToken();
        org.junit.Assert.assertNull(fieldVisitDescriptionList1);
        org.junit.Assert.assertNotNull(timeSeriesThresholdPeriod5);
        org.junit.Assert.assertNotNull(instant6);
        org.junit.Assert.assertNotNull(instant13);
        org.junit.Assert.assertNotNull(instant16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "9999-12-31T23:59:59.999Z" + "'", str17, "9999-12-31T23:59:59.999Z");
        org.junit.Assert.assertNotNull(fieldVisitDescriptionListServiceResponse20);
        org.junit.Assert.assertNotNull(fieldVisitDescriptionArray21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(fieldVisitDescriptionListServiceResponse24);
        org.junit.Assert.assertNotNull(timeSeriesThresholdPeriod28);
        org.junit.Assert.assertNotNull(instant29);
        org.junit.Assert.assertNotNull(instant36);
        org.junit.Assert.assertNotNull(instant39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "9999-12-31T23:59:59.999Z" + "'", str40, "9999-12-31T23:59:59.999Z");
        org.junit.Assert.assertNotNull(fieldVisitDescriptionListServiceResponse43);
        org.junit.Assert.assertNotNull(fieldVisitDescriptionArray44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(fieldVisitDescriptionListServiceResponse47);
        org.junit.Assert.assertNotNull(fieldVisitDescriptionListServiceResponse48);
        org.junit.Assert.assertNotNull(fieldVisitDescriptionListServiceResponse49);
        org.junit.Assert.assertNull(instant50);
    }

    @Test
    public void test24317() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest48.test24317");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostTaxon postTaxon0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostTaxon();
        postTaxon0.ItisUrl = "MinInstant";
        java.lang.String str3 = postTaxon0.getCommonName();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostTaxon postTaxon5 = postTaxon0.setScientificName("http");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostTaxon postTaxon7 = postTaxon5.setItisComment("9999-12-31T23:59:59.999Z");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutTaxon putTaxon8 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutTaxon();
        putTaxon8.ParentId = "http://MaxDurationhttp/json/reply/ArrayList";
        java.lang.String str11 = putTaxon8.ScientificName;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttributeDefinition extendedAttributeDefinition12 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttributeDefinition();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate13 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate15 = specimenTemplate13.setCustomId("hi!");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PreservativeType preservativeType16 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PreservativeType.SODIUM_AZIDE;
        specimenTemplate15.Preservative = preservativeType16;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails18 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails20 = labResultDetails18.setAnalysisComment("/AQUARIUS/Acquisition/v2");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes21 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails22 = labResultDetails20.setAuditAttributes(auditAttributes21);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate23 = specimenTemplate15.setAuditAttributes(auditAttributes21);
        extendedAttributeDefinition12.AuditAttributes = auditAttributes21;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutTaxon putTaxon25 = putTaxon8.setAuditAttributes(auditAttributes21);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutTaxon putTaxon26 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutTaxon();
        putTaxon26.ParentId = "http://MaxDurationhttp/json/reply/ArrayList";
        java.lang.String str29 = putTaxon26.getComment();
        putTaxon26.ParentId = "";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservedProperty postObservedProperty32 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservedProperty();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisType analysisType33 = postObservedProperty32.getAnalysisType();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty observedProperty34 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation35 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation();
        observation35.CustomId = "hi!";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.CategoricalResult categoricalResult38 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation39 = observation35.setCategoricalResult(categoricalResult38);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple[] importHistoryEventSimpleArray40 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple> importHistoryEventSimpleList41 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple>();
        boolean boolean42 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple>) importHistoryEventSimpleList41, importHistoryEventSimpleArray40);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation43 = observation35.setImportHistoryEventSimples((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple>) importHistoryEventSimpleList41);
        observedProperty34.ImportHistoryEventSimples = importHistoryEventSimpleList41;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservedProperty postObservedProperty45 = postObservedProperty32.setImportHistoryEventSimples((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple>) importHistoryEventSimpleList41);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutTaxon putTaxon46 = putTaxon26.setImportHistoryEventSimples((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple>) importHistoryEventSimpleList41);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutTaxon putTaxon47 = putTaxon25.setImportHistoryEventSimples((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple>) importHistoryEventSimpleList41);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostTaxon postTaxon48 = postTaxon5.setImportHistoryEventSimples((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple>) importHistoryEventSimpleList41);
        java.lang.String str49 = postTaxon5.getCommonName();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostTaxon postTaxon51 = postTaxon5.setItisComment("multipart/form-data; boundary=****1165d1f3-8b30-4f2e-8d0b-ffebab458859****");
        postTaxon51.ParentId = "multipart/form-data; boundary=****ee0ec537-fde4-45ee-9c35-68c37cf65c1c****";
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(postTaxon5);
        org.junit.Assert.assertNotNull(postTaxon7);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNotNull(specimenTemplate15);
        org.junit.Assert.assertTrue("'" + preservativeType16 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PreservativeType.SODIUM_AZIDE + "'", preservativeType16.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PreservativeType.SODIUM_AZIDE));
        org.junit.Assert.assertNotNull(labResultDetails20);
        org.junit.Assert.assertNotNull(labResultDetails22);
        org.junit.Assert.assertNotNull(specimenTemplate23);
        org.junit.Assert.assertNotNull(putTaxon25);
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertNull(analysisType33);
        org.junit.Assert.assertNotNull(observation39);
        org.junit.Assert.assertNotNull(importHistoryEventSimpleArray40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(observation43);
        org.junit.Assert.assertNotNull(postObservedProperty45);
        org.junit.Assert.assertNotNull(putTaxon46);
        org.junit.Assert.assertNotNull(putTaxon47);
        org.junit.Assert.assertNotNull(postTaxon48);
        org.junit.Assert.assertNull(str49);
        org.junit.Assert.assertNotNull(postTaxon51);
    }

    @Test
    public void test24318() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest48.test24318");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutReportPlugin putReportPlugin0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutReportPlugin();
        putReportPlugin0.UniqueId = "hi!";
        java.lang.Boolean boolean3 = putReportPlugin0.getIsEnabled();
        java.lang.Boolean boolean4 = putReportPlugin0.IsEnabled;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutReportPlugin putReportPlugin6 = putReportPlugin0.setUniqueId("");
        java.lang.Boolean boolean7 = putReportPlugin0.getIsEnabled();
        java.lang.Boolean boolean8 = putReportPlugin0.IsEnabled;
        org.junit.Assert.assertNull(boolean3);
        org.junit.Assert.assertNull(boolean4);
        org.junit.Assert.assertNotNull(putReportPlugin6);
        org.junit.Assert.assertNull(boolean7);
        org.junit.Assert.assertNull(boolean8);
    }

    @Test
    public void test24319() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest48.test24319");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetGroupedObservationsV2 getGroupedObservationsV2_0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetGroupedObservationsV2();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TagDefinition tagDefinition1 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TagDefinition();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TagValueType tagValueType2 = null;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TagDefinition tagDefinition3 = tagDefinition1.setValueType(tagValueType2);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TagDefinition tagDefinition5 = tagDefinition1.setAppliesToAttachments((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TagDefinition tagDefinition7 = tagDefinition5.setKey("yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TagDefinition tagDefinition9 = tagDefinition5.setAppliesToReports((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest10 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest();
        java.lang.Object obj11 = timeAlignedDataServiceRequest10.getResponseType();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse12 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant13 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse14 = locationDescriptionListServiceResponse12.setNextToken(instant13);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest15 = timeAlignedDataServiceRequest10.setQueryFrom(instant13);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags16 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray20 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList21 = new java.util.ArrayList<java.lang.String>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList21, strArray20);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags23 = putLocationTags16.setTagUniqueIds(strList21);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest24 = timeAlignedDataServiceRequest10.setTimeSeriesOutputUnitIds(strList21);
        tagDefinition9.PickListValues = strList21;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetGroupedObservationsV2 getGroupedObservationsV2_26 = getGroupedObservationsV2_0.setLabResultLabAnalysisMethodIds((java.util.List<java.lang.String>) strList21);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutOpenIdConnectRelyingPartyConfiguration putOpenIdConnectRelyingPartyConfiguration27 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutOpenIdConnectRelyingPartyConfiguration();
        java.util.List<java.lang.String> strList28 = putOpenIdConnectRelyingPartyConfiguration27.getScopes();
        java.lang.String str29 = putOpenIdConnectRelyingPartyConfiguration27.getOptionalIssuerDiscoveryUri();
        java.lang.String str30 = putOpenIdConnectRelyingPartyConfiguration27.getOptionalIssuerDiscoveryUri();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostTag postTag31 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostTag();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_32 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray35 = new java.lang.String[] { "", "" };
        java.util.ArrayList<java.lang.String> strList36 = new java.util.ArrayList<java.lang.String>();
        boolean boolean37 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList36, strArray35);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_38 = getObservationsV2_32.setDataClassifications((java.util.List<java.lang.String>) strList36);
        postTag31.PickListValues = strList36;
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.TagApplicability> tagApplicabilityList40 = postTag31.Applicability;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.TagRequestBase tagRequestBase42 = postTag31.setKey("");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.TagValueType tagValueType43 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.TagValueType.PickList;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.TagRequestBase tagRequestBase44 = tagRequestBase42.setValueType(tagValueType43);
        java.lang.String str45 = tagRequestBase44.Key;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_46 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList49 = new java.util.ArrayList<java.lang.String>();
        boolean boolean50 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList49, strArray48);
        getObservationsV2_46.SpecimenIds = strList49;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags52 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray56 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList57 = new java.util.ArrayList<java.lang.String>();
        boolean boolean58 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList57, strArray56);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags59 = putLocationTags52.setTagUniqueIds(strList57);
        getObservationsV2_46.ActivityIds = strList57;
        tagRequestBase44.PickListValues = strList57;
        putOpenIdConnectRelyingPartyConfiguration27.HostedDomains = strList57;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetGroupedObservationsV2 getGroupedObservationsV2_63 = getGroupedObservationsV2_26.setSearch((java.util.List<java.lang.String>) strList57);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.FieldResultType fieldResultType64 = getGroupedObservationsV2_26.FieldResultType;
        java.lang.String str65 = getGroupedObservationsV2_26.getSort();
        java.util.List<java.lang.String> strList66 = getGroupedObservationsV2_26.AnalyticalGroupIds;
        java.util.List<java.lang.String> strList67 = getGroupedObservationsV2_26.AnalyticalGroupIds;
        org.junit.Assert.assertNotNull(tagDefinition3);
        org.junit.Assert.assertNotNull(tagDefinition5);
        org.junit.Assert.assertNotNull(tagDefinition7);
        org.junit.Assert.assertNotNull(tagDefinition9);
        org.junit.Assert.assertNotNull(obj11);
        org.junit.Assert.assertEquals(obj11.toString(), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj11), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj11), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertNotNull(instant13);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse14);
        org.junit.Assert.assertNotNull(timeAlignedDataServiceRequest15);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(putLocationTags23);
        org.junit.Assert.assertNotNull(timeAlignedDataServiceRequest24);
        org.junit.Assert.assertNotNull(getGroupedObservationsV2_26);
        org.junit.Assert.assertNull(strList28);
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(getObservationsV2_38);
        org.junit.Assert.assertNull(tagApplicabilityList40);
        org.junit.Assert.assertNotNull(tagRequestBase42);
        org.junit.Assert.assertTrue("'" + tagValueType43 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.TagValueType.PickList + "'", tagValueType43.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.TagValueType.PickList));
        org.junit.Assert.assertNotNull(tagRequestBase44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(strArray56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(putLocationTags59);
        org.junit.Assert.assertNotNull(getGroupedObservationsV2_63);
        org.junit.Assert.assertNull(fieldResultType64);
        org.junit.Assert.assertNull(str65);
        org.junit.Assert.assertNull(strList66);
        org.junit.Assert.assertNull(strList67);
    }

    @Test
    public void test24320() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest48.test24320");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemTaxon importItemTaxon0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemTaxon();
        java.util.List<java.lang.String> strList1 = importItemTaxon0.getWarningMessages();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Taxon taxon2 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemTaxon importItemTaxon3 = importItemTaxon0.setItem(taxon2);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostCalculatedDerivedTimeSeries postCalculatedDerivedTimeSeries4 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostCalculatedDerivedTimeSeries();
        java.lang.String str5 = postCalculatedDerivedTimeSeries4.LocationUniqueId;
        java.util.List<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeValue> extendedAttributeValueList6 = postCalculatedDerivedTimeSeries4.getExtendedAttributeValues();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemTaxon importItemTaxon7 = importItemTaxon3.setErrors((java.lang.Object) postCalculatedDerivedTimeSeries4);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObject importItemObject8 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObject();
        java.util.List<java.lang.String> strList9 = importItemObject8.getWarningMessages();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportChangeItem[] importChangeItemArray10 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportChangeItem[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportChangeItem> importChangeItemList11 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportChangeItem>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportChangeItem>) importChangeItemList11, importChangeItemArray10);
        importItemObject8.ItemComparison = importChangeItemList11;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags14 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray18 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList19 = new java.util.ArrayList<java.lang.String>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList19, strArray18);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags21 = putLocationTags14.setTagUniqueIds(strList19);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObject importItemObject22 = importItemObject8.setExistingItem((java.lang.Object) putLocationTags14);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.OpenIdConnectUser openIdConnectUser23 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.OpenIdConnectUser();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.OpenIdConnectUser openIdConnectUser25 = openIdConnectUser23.setIdentifier("");
        java.lang.Boolean boolean26 = openIdConnectUser25.CanConfigureSystem;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObject importItemObject27 = importItemObject8.setErrors((java.lang.Object) openIdConnectUser25);
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportChangeItem> importChangeItemList28 = importItemObject27.ItemComparison;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemTaxon importItemTaxon29 = importItemTaxon7.setItemComparison(importChangeItemList28);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemTaxon importItemTaxon30 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemTaxon();
        java.util.List<java.lang.String> strList31 = importItemTaxon30.getWarningMessages();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Taxon taxon32 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemTaxon importItemTaxon33 = importItemTaxon30.setItem(taxon32);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostCalculatedDerivedTimeSeries postCalculatedDerivedTimeSeries34 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostCalculatedDerivedTimeSeries();
        java.lang.String str35 = postCalculatedDerivedTimeSeries34.LocationUniqueId;
        java.util.List<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeValue> extendedAttributeValueList36 = postCalculatedDerivedTimeSeries34.getExtendedAttributeValues();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemTaxon importItemTaxon37 = importItemTaxon33.setErrors((java.lang.Object) postCalculatedDerivedTimeSeries34);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Taxon taxon38 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Taxon();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemTaxon importItemTaxon39 = importItemTaxon33.setExistingItem(taxon38);
        importItemTaxon7.Item = taxon38;
        taxon38.ItisTsn = "yyyy'-'MM'-'dd'T'HH':'mm':'ss";
        taxon38.ItisTsn = "MaxDuration";
        java.lang.String str45 = taxon38.ItisTsn;
        org.junit.Assert.assertNull(strList1);
        org.junit.Assert.assertNotNull(importItemTaxon3);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(extendedAttributeValueList6);
        org.junit.Assert.assertNotNull(importItemTaxon7);
        org.junit.Assert.assertNull(strList9);
        org.junit.Assert.assertNotNull(importChangeItemArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(putLocationTags21);
        org.junit.Assert.assertNotNull(importItemObject22);
        org.junit.Assert.assertNotNull(openIdConnectUser25);
        org.junit.Assert.assertNull(boolean26);
        org.junit.Assert.assertNotNull(importItemObject27);
        org.junit.Assert.assertNotNull(importChangeItemList28);
        org.junit.Assert.assertNotNull(importItemTaxon29);
        org.junit.Assert.assertNull(strList31);
        org.junit.Assert.assertNotNull(importItemTaxon33);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertNull(extendedAttributeValueList36);
        org.junit.Assert.assertNotNull(importItemTaxon37);
        org.junit.Assert.assertNotNull(importItemTaxon39);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "MaxDuration" + "'", str45, "MaxDuration");
    }

    @Test
    public void test24321() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest48.test24321");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutFilter putFilter0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutFilter();
        java.time.OffsetDateTime offsetDateTime1 = putFilter0.StartTime;
        putFilter0.Description = "multipart/form-data; boundary=****6b8051d4-caf2-4095-9f11-faa36b95fc28****";
        java.lang.String str4 = putFilter0.getCustomId();
        putFilter0.Description = "0001-01-01T00:00:00.0000000Z";
        org.junit.Assert.assertNull(offsetDateTime1);
        org.junit.Assert.assertNull(str4);
    }

    @Test
    public void test24322() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest48.test24322");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.IndexConfiguration indexConfiguration0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.IndexConfiguration();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Unit unit1 = indexConfiguration0.Unit;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes2 = indexConfiguration0.AuditAttributes;
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.IndexRange> indexRangeList3 = indexConfiguration0.getIndexRanges();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.IndexConfiguration indexConfiguration5 = indexConfiguration0.setIssuingOrganization("MaxInstant");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Unit unit6 = indexConfiguration0.getUnit();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty observedProperty7 = indexConfiguration0.ObservedProperty;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.IndexConfiguration indexConfiguration8 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.IndexConfiguration();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Unit unit9 = indexConfiguration8.Unit;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes10 = indexConfiguration8.AuditAttributes;
        java.lang.String str11 = indexConfiguration8.Description;
        java.lang.Boolean boolean12 = indexConfiguration8.getUseScoreRanges();
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.IndexRange> indexRangeList13 = indexConfiguration8.getIndexRanges();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty observedProperty14 = indexConfiguration8.ObservedProperty;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostUnitGroup postUnitGroup15 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostUnitGroup();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes16 = null;
        postUnitGroup15.AuditAttributes = auditAttributes16;
        postUnitGroup15.Id = "/AQUARIUS/Acquisition/v2://9999-12-31T23:59:59.999Z";
        java.lang.String str20 = postUnitGroup15.Id;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutAnalyticalGroup putAnalyticalGroup21 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutAnalyticalGroup();
        java.lang.Object obj22 = putAnalyticalGroup21.getResponseType();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroup analyticalGroup23 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroup();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem analyticalGroupItem24 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod25 = analyticalGroupItem24.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem analyticalGroupItem26 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod27 = analyticalGroupItem26.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod28 = analyticalGroupItem26.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem analyticalGroupItem29 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod30 = analyticalGroupItem29.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod31 = analyticalGroupItem29.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod32 = null;
        analyticalGroupItem29.AnalysisMethod = analysisMethod32;
        java.lang.String str34 = analyticalGroupItem29.getHoldingTime();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem analyticalGroupItem35 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod36 = analyticalGroupItem35.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod37 = analyticalGroupItem35.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem analyticalGroupItem38 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod39 = analyticalGroupItem38.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem analyticalGroupItem40 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod41 = analyticalGroupItem40.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod42 = analyticalGroupItem40.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod43 = null;
        analyticalGroupItem40.AnalysisMethod = analysisMethod43;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem[] analyticalGroupItemArray45 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem[] { analyticalGroupItem24, analyticalGroupItem26, analyticalGroupItem29, analyticalGroupItem35, analyticalGroupItem38, analyticalGroupItem40 };
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem> analyticalGroupItemList46 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem>();
        boolean boolean47 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem>) analyticalGroupItemList46, analyticalGroupItemArray45);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroup analyticalGroup48 = analyticalGroup23.setAnalyticalGroupItems((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem>) analyticalGroupItemList46);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutAnalyticalGroup putAnalyticalGroup49 = putAnalyticalGroup21.setAnalyticalGroupItems((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem>) analyticalGroupItemList46);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutUnitGroupWithUnit putUnitGroupWithUnit50 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutUnitGroupWithUnit();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutUnitGroupWithUnit putUnitGroupWithUnit52 = putUnitGroupWithUnit50.setId("yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UnitGroupSystemCodeType unitGroupSystemCodeType53 = putUnitGroupWithUnit50.SystemCode;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutAccessGroup putAccessGroup54 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutAccessGroup();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivity samplingPlanPlannedActivity55 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivity();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes56 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivity samplingPlanPlannedActivity57 = samplingPlanPlannedActivity55.setAuditAttributes(auditAttributes56);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes58 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes60 = auditAttributes58.setCreationUserProfileId("'.'SSSSSSS");
        samplingPlanPlannedActivity57.AuditAttributes = auditAttributes58;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes62 = samplingPlanPlannedActivity57.AuditAttributes;
        putAccessGroup54.AuditAttributes = auditAttributes62;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutUnitGroupWithUnit putUnitGroupWithUnit64 = putUnitGroupWithUnit50.setAuditAttributes(auditAttributes62);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutAnalyticalGroup putAnalyticalGroup65 = putAnalyticalGroup21.setAuditAttributes(auditAttributes62);
        postUnitGroup15.AuditAttributes = auditAttributes62;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.IndexConfiguration indexConfiguration67 = indexConfiguration8.setAuditAttributes(auditAttributes62);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricConfiguration metricConfiguration68 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricConfiguration();
        java.lang.String str69 = metricConfiguration68.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty observedProperty70 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty();
        observedProperty70.CasNumber = "MinDuration";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricConfiguration metricConfiguration73 = metricConfiguration68.setObservedProperty(observedProperty70);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricConfiguration metricConfiguration74 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricConfiguration();
        java.lang.String str75 = metricConfiguration74.getId();
        metricConfiguration74.CustomId = "/AQUARIUS/Acquisition/v2";
        java.lang.Boolean boolean78 = metricConfiguration74.getUseScoreRanges();
        java.lang.String str79 = metricConfiguration74.Description;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Unit unit80 = metricConfiguration74.getUnit();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Unit unit81 = metricConfiguration74.Unit;
        metricConfiguration74.CustomId = "'.'SSSSSSS";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty observedProperty84 = metricConfiguration74.getObservedProperty();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricConfiguration[] metricConfigurationArray85 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricConfiguration[] { metricConfiguration68, metricConfiguration74 };
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricConfiguration> metricConfigurationList86 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricConfiguration>();
        boolean boolean87 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricConfiguration>) metricConfigurationList86, metricConfigurationArray85);
        indexConfiguration8.MetricConfigurations = metricConfigurationList86;
        indexConfiguration0.MetricConfigurations = metricConfigurationList86;
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.IndexRange> indexRangeList90 = indexConfiguration0.IndexRanges;
        org.junit.Assert.assertNull(unit1);
        org.junit.Assert.assertNull(auditAttributes2);
        org.junit.Assert.assertNull(indexRangeList3);
        org.junit.Assert.assertNotNull(indexConfiguration5);
        org.junit.Assert.assertNull(unit6);
        org.junit.Assert.assertNull(observedProperty7);
        org.junit.Assert.assertNull(unit9);
        org.junit.Assert.assertNull(auditAttributes10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNull(boolean12);
        org.junit.Assert.assertNull(indexRangeList13);
        org.junit.Assert.assertNull(observedProperty14);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "/AQUARIUS/Acquisition/v2://9999-12-31T23:59:59.999Z" + "'", str20, "/AQUARIUS/Acquisition/v2://9999-12-31T23:59:59.999Z");
        org.junit.Assert.assertNotNull(obj22);
        org.junit.Assert.assertEquals(obj22.toString(), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$AnalyticalGroup");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj22), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$AnalyticalGroup");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj22), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$AnalyticalGroup");
        org.junit.Assert.assertNull(analysisMethod25);
        org.junit.Assert.assertNull(analysisMethod27);
        org.junit.Assert.assertNull(analysisMethod28);
        org.junit.Assert.assertNull(analysisMethod30);
        org.junit.Assert.assertNull(analysisMethod31);
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertNull(analysisMethod36);
        org.junit.Assert.assertNull(analysisMethod37);
        org.junit.Assert.assertNull(analysisMethod39);
        org.junit.Assert.assertNull(analysisMethod41);
        org.junit.Assert.assertNull(analysisMethod42);
        org.junit.Assert.assertNotNull(analyticalGroupItemArray45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(analyticalGroup48);
        org.junit.Assert.assertNotNull(putAnalyticalGroup49);
        org.junit.Assert.assertNotNull(putUnitGroupWithUnit52);
        org.junit.Assert.assertNull(unitGroupSystemCodeType53);
        org.junit.Assert.assertNotNull(samplingPlanPlannedActivity57);
        org.junit.Assert.assertNotNull(auditAttributes60);
        org.junit.Assert.assertNotNull(auditAttributes62);
        org.junit.Assert.assertNotNull(putUnitGroupWithUnit64);
        org.junit.Assert.assertNotNull(putAnalyticalGroup65);
        org.junit.Assert.assertNotNull(indexConfiguration67);
        org.junit.Assert.assertNull(str69);
        org.junit.Assert.assertNotNull(metricConfiguration73);
        org.junit.Assert.assertNull(str75);
        org.junit.Assert.assertNull(boolean78);
        org.junit.Assert.assertNull(str79);
        org.junit.Assert.assertNull(unit80);
        org.junit.Assert.assertNull(unit81);
        org.junit.Assert.assertNull(observedProperty84);
        org.junit.Assert.assertNotNull(metricConfigurationArray85);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + true + "'", boolean87 == true);
        org.junit.Assert.assertNull(indexRangeList90);
    }

    @Test
    public void test24323() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest48.test24323");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingCurveListServiceResponse ratingCurveListServiceResponse0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingCurveListServiceResponse();
        java.util.List<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingCurve> ratingCurveList1 = ratingCurveListServiceResponse0.getRatingCurves();
        java.util.List<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Approval> approvalList2 = ratingCurveListServiceResponse0.getApprovals();
        java.util.List<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Approval> approvalList3 = ratingCurveListServiceResponse0.Approvals;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingCurve ratingCurve4 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingCurve();
        java.lang.String str5 = ratingCurve4.Equation;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ExpandedRatingCurve expandedRatingCurve6 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ExpandedRatingCurve();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingCurveType ratingCurveType7 = expandedRatingCurve6.Type;
        expandedRatingCurve6.IsBlended = false;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ParameterWithUnit parameterWithUnit10 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ParameterWithUnit();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ExpandedRatingCurve expandedRatingCurve11 = expandedRatingCurve6.setOutputParameter(parameterWithUnit10);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingCurve ratingCurve12 = ratingCurve4.setInputParameter(parameterWithUnit10);
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.OffsetPoint> offsetPointList13 = ratingCurve4.getOffsets();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ExpandedRatingCurve expandedRatingCurve14 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ExpandedRatingCurve();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingCurveType ratingCurveType15 = expandedRatingCurve14.Type;
        expandedRatingCurve14.IsBlended = false;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ExpandedRatingCurve expandedRatingCurve19 = expandedRatingCurve14.setIsBlended((java.lang.Boolean) true);
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingShift> ratingShiftList20 = expandedRatingCurve19.getShifts();
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingShift> ratingShiftList21 = expandedRatingCurve19.getShifts();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ExpandedRatingCurve expandedRatingCurve22 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ExpandedRatingCurve();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingCurveType ratingCurveType23 = expandedRatingCurve22.Type;
        expandedRatingCurve22.IsBlended = false;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ParameterWithUnit parameterWithUnit26 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ParameterWithUnit();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ExpandedRatingCurve expandedRatingCurve27 = expandedRatingCurve22.setOutputParameter(parameterWithUnit26);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ParameterWithUnit parameterWithUnit28 = expandedRatingCurve27.getOutputParameter();
        expandedRatingCurve19.OutputParameter = parameterWithUnit28;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ParameterWithUnit parameterWithUnit31 = parameterWithUnit28.setParameterName("hi!");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingCurve ratingCurve32 = ratingCurve4.setOutputParameter(parameterWithUnit31);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingCurve[] ratingCurveArray33 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingCurve[] { ratingCurve4 };
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingCurve> ratingCurveList34 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingCurve>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingCurve>) ratingCurveList34, ratingCurveArray33);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingCurveListServiceResponse ratingCurveListServiceResponse36 = ratingCurveListServiceResponse0.setRatingCurves((java.util.List<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingCurve>) ratingCurveList34);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDataServiceResponse timeSeriesDataServiceResponse37 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDataServiceResponse();
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.InterpolationType> interpolationTypeList38 = timeSeriesDataServiceResponse37.InterpolationTypes;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Note note39 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Note();
        java.time.Instant instant40 = note39.StartTime;
        note39.NoteText = "'.'SSSSSSS";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Note[] noteArray43 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Note[] { note39 };
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Note> noteList44 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Note>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Note>) noteList44, noteArray43);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDataServiceResponse timeSeriesDataServiceResponse46 = timeSeriesDataServiceResponse37.setNotes(noteList44);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDataServiceResponse timeSeriesDataServiceResponse47 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDataServiceResponse();
        java.lang.String str48 = timeSeriesDataServiceResponse47.getLabel();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Approval approval49 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Approval();
        java.lang.String str50 = approval49.User;
        java.lang.String str51 = approval49.Comment;
        java.lang.String str52 = approval49.Comment;
        approval49.User = "/AQUARIUS/Acquisition/v2://9999-12-31T23:59:59.999Z";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Approval approval55 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Approval();
        java.lang.String str56 = approval55.User;
        approval55.LevelDescription = "MinDuration";
        approval55.ApprovalLevel = 10;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Approval approval61 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Approval();
        java.lang.String str62 = approval61.User;
        approval61.LevelDescription = "MinDuration";
        java.time.Instant instant65 = approval61.getDateAppliedUtc();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Approval approval66 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Approval();
        java.lang.String str67 = approval66.User;
        approval66.LevelDescription = "MinDuration";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Approval approval71 = approval66.setApprovalLevel((java.lang.Integer) (-1));
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Approval approval72 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Approval();
        java.lang.String str73 = approval72.User;
        approval72.LevelDescription = "MinDuration";
        java.lang.String str76 = approval72.Comment;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Approval approval77 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Approval();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Approval approval78 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Approval();
        java.lang.String str79 = approval78.User;
        java.lang.String str80 = approval78.Comment;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Approval approval81 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Approval();
        java.lang.String str82 = approval81.User;
        java.lang.String str83 = approval81.Comment;
        java.lang.String str84 = approval81.Comment;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Approval approval86 = approval81.setComment("-PT87591240H");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Approval[] approvalArray87 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Approval[] { approval49, approval55, approval61, approval71, approval72, approval77, approval78, approval86 };
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Approval> approvalList88 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Approval>();
        boolean boolean89 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Approval>) approvalList88, approvalArray87);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDataServiceResponse timeSeriesDataServiceResponse90 = timeSeriesDataServiceResponse47.setApprovals(approvalList88);
        timeSeriesDataServiceResponse37.Approvals = approvalList88;
        ratingCurveListServiceResponse0.Approvals = approvalList88;
        java.util.List<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Approval> approvalList93 = ratingCurveListServiceResponse0.Approvals;
        org.junit.Assert.assertNull(ratingCurveList1);
        org.junit.Assert.assertNull(approvalList2);
        org.junit.Assert.assertNull(approvalList3);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(ratingCurveType7);
        org.junit.Assert.assertNotNull(expandedRatingCurve11);
        org.junit.Assert.assertNotNull(ratingCurve12);
        org.junit.Assert.assertNull(offsetPointList13);
        org.junit.Assert.assertNull(ratingCurveType15);
        org.junit.Assert.assertNotNull(expandedRatingCurve19);
        org.junit.Assert.assertNull(ratingShiftList20);
        org.junit.Assert.assertNull(ratingShiftList21);
        org.junit.Assert.assertNull(ratingCurveType23);
        org.junit.Assert.assertNotNull(expandedRatingCurve27);
        org.junit.Assert.assertNotNull(parameterWithUnit28);
        org.junit.Assert.assertNotNull(parameterWithUnit31);
        org.junit.Assert.assertNotNull(ratingCurve32);
        org.junit.Assert.assertNotNull(ratingCurveArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(ratingCurveListServiceResponse36);
        org.junit.Assert.assertNull(interpolationTypeList38);
        org.junit.Assert.assertNull(instant40);
        org.junit.Assert.assertNotNull(noteArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(timeSeriesDataServiceResponse46);
        org.junit.Assert.assertNull(str48);
        org.junit.Assert.assertNull(str50);
        org.junit.Assert.assertNull(str51);
        org.junit.Assert.assertNull(str52);
        org.junit.Assert.assertNull(str56);
        org.junit.Assert.assertNull(str62);
        org.junit.Assert.assertNull(instant65);
        org.junit.Assert.assertNull(str67);
        org.junit.Assert.assertNotNull(approval71);
        org.junit.Assert.assertNull(str73);
        org.junit.Assert.assertNull(str76);
        org.junit.Assert.assertNull(str79);
        org.junit.Assert.assertNull(str80);
        org.junit.Assert.assertNull(str82);
        org.junit.Assert.assertNull(str83);
        org.junit.Assert.assertNull(str84);
        org.junit.Assert.assertNotNull(approval86);
        org.junit.Assert.assertNotNull(approvalArray87);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + true + "'", boolean89 == true);
        org.junit.Assert.assertNotNull(timeSeriesDataServiceResponse90);
        org.junit.Assert.assertNotNull(approvalList93);
    }

    @Test
    public void test24324() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest48.test24324");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Reading reading0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Reading();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay1 = reading0.getValue();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Reading reading3 = reading0.setParameterId("hi!");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Reading reading5 = reading3.setMonitoringMethod("'.'SSSSSSS");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay6 = reading3.getUncertainty();
        reading3.SensorUniqueId = "multipart/form-data; boundary=****1eab67e1-84c8-4b82-aa06-d6c7526551f8****";
        reading3.SensorUniqueId = "multipart/form-data; boundary=****44f0772e-c3ca-4316-8e2a-61ec8540d661****";
        org.junit.Assert.assertNull(doubleWithDisplay1);
        org.junit.Assert.assertNotNull(reading3);
        org.junit.Assert.assertNotNull(reading5);
        org.junit.Assert.assertNull(doubleWithDisplay6);
    }

    @Test
    public void test24325() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest48.test24325");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.GetFieldVisitReadingsByLocationServiceRequest getFieldVisitReadingsByLocationServiceRequest0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.GetFieldVisitReadingsByLocationServiceRequest();
        java.lang.Boolean boolean1 = getFieldVisitReadingsByLocationServiceRequest0.ApplyRounding;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.GetFieldVisitReadingsByLocationServiceRequest getFieldVisitReadingsByLocationServiceRequest3 = getFieldVisitReadingsByLocationServiceRequest0.setApplyDatumConversion((java.lang.Boolean) false);
        java.util.ArrayList<java.lang.String> strList4 = getFieldVisitReadingsByLocationServiceRequest3.Parameters;
        java.lang.String str5 = getFieldVisitReadingsByLocationServiceRequest3.getLocationUniqueId();
        java.lang.Boolean boolean6 = getFieldVisitReadingsByLocationServiceRequest3.isApplyRounding();
        org.junit.Assert.assertNull(boolean1);
        org.junit.Assert.assertNotNull(getFieldVisitReadingsByLocationServiceRequest3);
        org.junit.Assert.assertNull(strList4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(boolean6);
    }

    @Test
    public void test24326() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest48.test24326");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostDatumConvertedTimeSeries postDatumConvertedTimeSeries0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostDatumConvertedTimeSeries();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostDatumConvertedTimeSeries postDatumConvertedTimeSeries2 = postDatumConvertedTimeSeries0.setDescription("yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ");
        postDatumConvertedTimeSeries0.ComputationPeriodIdentifier = "'.'SSSSSSS";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostDatumConvertedTimeSeries postDatumConvertedTimeSeries6 = postDatumConvertedTimeSeries0.setComputationPeriodIdentifier("multipart/form-data; boundary=****44f0772e-c3ca-4316-8e2a-61ec8540d661****");
        java.lang.String str7 = postDatumConvertedTimeSeries0.getSubLocationIdentifier();
        org.junit.Assert.assertNotNull(postDatumConvertedTimeSeries2);
        org.junit.Assert.assertNotNull(postDatumConvertedTimeSeries6);
        org.junit.Assert.assertNull(str7);
    }

    @Test
    public void test24327() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest48.test24327");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostConfigurableDropDownListItem postConfigurableDropDownListItem0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostConfigurableDropDownListItem();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ConfigurableDropDownListItemBase configurableDropDownListItemBase2 = postConfigurableDropDownListItem0.setDisplayName("MaxInstant");
        java.lang.String str3 = postConfigurableDropDownListItem0.DropDownListId;
        java.lang.Object obj4 = postConfigurableDropDownListItem0.getResponseType();
        postConfigurableDropDownListItem0.Id = "multipart/form-data; boundary=****ebf59e0e-2d1f-43bc-996f-3c628a80f696****";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ConfigurableDropDownListItemBase configurableDropDownListItemBase8 = postConfigurableDropDownListItem0.setDropDownListId("multipart/form-data; boundary=****221f1588-b890-43c2-a3c8-0d77cfe54330****");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ConfigurableDropDownListItemBase configurableDropDownListItemBase10 = configurableDropDownListItemBase8.setDropDownListId("http://MaxDurationhttp");
        java.lang.String str11 = configurableDropDownListItemBase8.getDisplayName();
        org.junit.Assert.assertNotNull(configurableDropDownListItemBase2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(obj4);
        org.junit.Assert.assertEquals(obj4.toString(), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning$ConfigurableDropDownListItem");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj4), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning$ConfigurableDropDownListItem");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj4), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning$ConfigurableDropDownListItem");
        org.junit.Assert.assertNotNull(configurableDropDownListItemBase8);
        org.junit.Assert.assertNotNull(configurableDropDownListItemBase10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "MaxInstant" + "'", str11, "MaxInstant");
    }

    @Test
    public void test24328() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest48.test24328");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutObservedProperty putObservedProperty0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutObservedProperty();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity quantity1 = putObservedProperty0.LowerLimit;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutObservedProperty putObservedProperty3 = putObservedProperty0.setDescription("");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisType analysisType4 = putObservedProperty0.AnalysisType;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisType analysisType5 = putObservedProperty0.getAnalysisType();
        java.lang.String str6 = putObservedProperty0.Id;
        java.lang.String str7 = putObservedProperty0.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultType resultType8 = null;
        putObservedProperty0.ResultType = resultType8;
        org.junit.Assert.assertNull(quantity1);
        org.junit.Assert.assertNotNull(putObservedProperty3);
        org.junit.Assert.assertNull(analysisType4);
        org.junit.Assert.assertNull(analysisType5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(str7);
    }

    @Test
    public void test24329() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest48.test24329");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationNestedInSpecimen observationNestedInSpecimen0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationNestedInSpecimen();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultStatus resultStatus1 = observationNestedInSpecimen0.ResultStatus;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabInstruction labInstruction2 = observationNestedInSpecimen0.getLabInstruction();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DataClassificationType dataClassificationType3 = observationNestedInSpecimen0.DataClassification;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.NumericResult numericResult4 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationNestedInSpecimen observationNestedInSpecimen5 = observationNestedInSpecimen0.setNumericResult(numericResult4);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.CategoricalResult categoricalResult6 = observationNestedInSpecimen5.CategoricalResult;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.NumericResult numericResult7 = observationNestedInSpecimen5.getNumericResult();
        org.junit.Assert.assertNull(resultStatus1);
        org.junit.Assert.assertNull(labInstruction2);
        org.junit.Assert.assertNull(dataClassificationType3);
        org.junit.Assert.assertNotNull(observationNestedInSpecimen5);
        org.junit.Assert.assertNull(categoricalResult6);
        org.junit.Assert.assertNull(numericResult7);
    }

    @Test
    public void test24330() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest48.test24330");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetDetectionconditionHistory getDetectionconditionHistory0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetDetectionconditionHistory();
        java.lang.String str1 = getDetectionconditionHistory0.Id;
        getDetectionconditionHistory0.Id = "hi!";
        getDetectionconditionHistory0.Id = "multipart/form-data; boundary=****ebf59e0e-2d1f-43bc-996f-3c628a80f696****";
        org.junit.Assert.assertNull(str1);
    }

    @Test
    public void test24331() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest48.test24331");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostCalculatedDerivedTimeSeries postCalculatedDerivedTimeSeries0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostCalculatedDerivedTimeSeries();
        java.util.ArrayList<java.lang.String> strList1 = postCalculatedDerivedTimeSeries0.TimeSeriesUniqueIds;
        java.lang.Object obj2 = postCalculatedDerivedTimeSeries0.getResponseType();
        java.lang.String str3 = postCalculatedDerivedTimeSeries0.Comment;
        java.lang.String str4 = postCalculatedDerivedTimeSeries0.Method;
        org.junit.Assert.assertNull(strList1);
        org.junit.Assert.assertNotNull(obj2);
        org.junit.Assert.assertEquals(obj2.toString(), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning$TimeSeries");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj2), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning$TimeSeries");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj2), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning$TimeSeries");
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(str4);
    }

    @Test
    public void test24332() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest48.test24332");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.PostTimeSeriesAppend postTimeSeriesAppend0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.PostTimeSeriesAppend();
        java.lang.Object obj1 = postTimeSeriesAppend0.getResponseType();
        postTimeSeriesAppend0.UniqueId = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ";
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.TimeSeriesPoint> timeSeriesPointList4 = postTimeSeriesAppend0.getPoints();
        org.junit.Assert.assertNotNull(obj1);
        org.junit.Assert.assertEquals(obj1.toString(), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition$AppendResponse");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj1), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition$AppendResponse");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj1), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition$AppendResponse");
        org.junit.Assert.assertNull(timeSeriesPointList4);
    }

    @Test
    public void test24333() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest48.test24333");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MonitoringMethodListServiceResponse monitoringMethodListServiceResponse0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MonitoringMethodListServiceResponse();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MonitoringMethod[] monitoringMethodArray1 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MonitoringMethod[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MonitoringMethod> monitoringMethodList2 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MonitoringMethod>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MonitoringMethod>) monitoringMethodList2, monitoringMethodArray1);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MonitoringMethodListServiceResponse monitoringMethodListServiceResponse4 = monitoringMethodListServiceResponse0.setMonitoringMethods(monitoringMethodList2);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MonitoringMethodListServiceResponse monitoringMethodListServiceResponse6 = monitoringMethodListServiceResponse4.setSummary("MaxInstant");
        java.lang.String str7 = monitoringMethodListServiceResponse6.getSummary();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MonitoringMethodListServiceResponse monitoringMethodListServiceResponse9 = monitoringMethodListServiceResponse6.setResponseVersion((java.lang.Integer) 4);
        java.time.Instant instant10 = monitoringMethodListServiceResponse6.getResponseTime();
        org.junit.Assert.assertNotNull(monitoringMethodArray1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(monitoringMethodListServiceResponse4);
        org.junit.Assert.assertNotNull(monitoringMethodListServiceResponse6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "MaxInstant" + "'", str7, "MaxInstant");
        org.junit.Assert.assertNotNull(monitoringMethodListServiceResponse9);
        org.junit.Assert.assertNull(instant10);
    }

    @Test
    public void test24334() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest48.test24334");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportSummaryObservation importSummaryObservation0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportSummaryObservation();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportSummaryObservation importSummaryObservation2 = importSummaryObservation0.setSummaryReportText("multipart/form-data; boundary=****bbcf5f9e-6ccf-4b63-91ab-6e645caf02af****");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportSummaryObservation importSummaryObservation4 = importSummaryObservation2.setSuccessCount((java.lang.Integer) 2);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportSummaryObservation importSummaryObservation6 = importSummaryObservation2.setExpectedCount((java.lang.Integer) 2);
        java.lang.Integer int7 = importSummaryObservation6.getNewCount();
        java.lang.Integer int8 = importSummaryObservation6.UpdateCount;
        org.junit.Assert.assertNotNull(importSummaryObservation2);
        org.junit.Assert.assertNotNull(importSummaryObservation4);
        org.junit.Assert.assertNotNull(importSummaryObservation6);
        org.junit.Assert.assertNull(int7);
        org.junit.Assert.assertNull(int8);
    }

    @Test
    public void test24335() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest48.test24335");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObservation importItemObservation0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObservation();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest1 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest();
        java.lang.Object obj2 = timeAlignedDataServiceRequest1.getResponseType();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse3 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant4 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse5 = locationDescriptionListServiceResponse3.setNextToken(instant4);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest6 = timeAlignedDataServiceRequest1.setQueryFrom(instant4);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags7 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray11 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList12 = new java.util.ArrayList<java.lang.String>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList12, strArray11);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags14 = putLocationTags7.setTagUniqueIds(strList12);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest15 = timeAlignedDataServiceRequest1.setTimeSeriesOutputUnitIds(strList12);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObservation importItemObservation16 = importItemObservation0.setFields((java.util.List<java.lang.String>) strList12);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemStatusType importItemStatusType17 = importItemObservation0.Status;
        java.util.List<java.lang.String> strList18 = importItemObservation0.getFields();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemStatusType importItemStatusType19 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemStatusType.EXPECTED;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObservation importItemObservation20 = importItemObservation0.setStatus(importItemStatusType19);
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportChangeItem> importChangeItemList21 = importItemObservation20.ItemComparison;
        org.junit.Assert.assertNotNull(obj2);
        org.junit.Assert.assertEquals(obj2.toString(), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj2), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj2), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertNotNull(instant4);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse5);
        org.junit.Assert.assertNotNull(timeAlignedDataServiceRequest6);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(putLocationTags14);
        org.junit.Assert.assertNotNull(timeAlignedDataServiceRequest15);
        org.junit.Assert.assertNotNull(importItemObservation16);
        org.junit.Assert.assertNull(importItemStatusType17);
        org.junit.Assert.assertNotNull(strList18);
        org.junit.Assert.assertTrue("'" + importItemStatusType19 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemStatusType.EXPECTED + "'", importItemStatusType19.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemStatusType.EXPECTED));
        org.junit.Assert.assertNotNull(importItemObservation20);
        org.junit.Assert.assertNull(importChangeItemList21);
    }

    @Test
    public void test24336() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest48.test24336");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Schedule schedule0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Schedule();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Schedule schedule2 = schedule0.setCustomId("");
        java.time.OffsetDateTime offsetDateTime3 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Schedule schedule4 = schedule0.setStartDate(offsetDateTime3);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.RecurrenceType recurrenceType5 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.RecurrenceType.MONTHLY;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Schedule schedule6 = schedule4.setRecurrenceType(recurrenceType5);
        java.lang.String str7 = schedule6.Id;
        java.time.OffsetDateTime offsetDateTime8 = schedule6.StartDate;
        org.junit.Assert.assertNotNull(schedule2);
        org.junit.Assert.assertNotNull(schedule4);
        org.junit.Assert.assertTrue("'" + recurrenceType5 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.RecurrenceType.MONTHLY + "'", recurrenceType5.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.RecurrenceType.MONTHLY));
        org.junit.Assert.assertNotNull(schedule6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(offsetDateTime8);
    }

    @Test
    public void test24337() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest48.test24337");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutObservationV2 putObservationV2_0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutObservationV2();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty observedProperty1 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutObservationV2 putObservationV2_2 = putObservationV2_0.setObservedProperty(observedProperty1);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Activity activity3 = putObservationV2_2.Activity;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DataClassificationType dataClassificationType4 = putObservationV2_2.getDataClassification();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.CategoricalResult categoricalResult5 = putObservationV2_2.CategoricalResult;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Specimen specimen6 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutObservationV2 putObservationV2_7 = putObservationV2_2.setSpecimen(specimen6);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity postActivity8 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity();
        postActivity8.SourceActivityId = "2021.4.62.0";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity plannedActivity11 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity postActivity12 = postActivity8.setPlannedActivity(plannedActivity11);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity postActivity14 = postActivity8.setLoggerFileName("https");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation15 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedFieldResult plannedFieldResult16 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation17 = observation15.setPlannedFieldResult(plannedFieldResult16);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabInstruction labInstruction18 = null;
        observation17.LabInstruction = labInstruction18;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationStatistics observationStatistics20 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation21 = observation17.setStatistics(observationStatistics20);
        java.time.OffsetDateTime offsetDateTime22 = observation21.getResultTime();
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple> importHistoryEventSimpleList23 = observation21.ImportHistoryEventSimples;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty observedProperty24 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation25 = observation21.setObservedProperty(observedProperty24);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.RuleValidationDetails[] ruleValidationDetailsArray26 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.RuleValidationDetails[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.RuleValidationDetails> ruleValidationDetailsList27 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.RuleValidationDetails>();
        boolean boolean28 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.RuleValidationDetails>) ruleValidationDetailsList27, ruleValidationDetailsArray26);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation29 = observation21.setValidationWarnings((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.RuleValidationDetails>) ruleValidationDetailsList27);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity postActivity30 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttribute[] extendedAttributeArray31 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttribute[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttribute> extendedAttributeList32 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttribute>();
        boolean boolean33 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttribute>) extendedAttributeList32, extendedAttributeArray31);
        postActivity30.ExtendedAttributes = extendedAttributeList32;
        observation29.ExtendedAttributes = extendedAttributeList32;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity postActivity36 = postActivity8.setExtendedAttributes((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttribute>) extendedAttributeList32);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutObservationV2 putObservationV2_37 = putObservationV2_2.setExtendedAttributes((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttribute>) extendedAttributeList32);
        java.lang.String str38 = putObservationV2_37.CustomId;
        java.lang.String str39 = putObservationV2_37.getComment();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutActivity putActivity40 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutActivity();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity quantity41 = null;
        putActivity40.Depth = quantity41;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutActivity putActivity43 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutActivity();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity plannedActivity44 = putActivity43.PlannedActivity;
        java.time.OffsetDateTime offsetDateTime45 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutActivity putActivity46 = putActivity43.setEndTime(offsetDateTime45);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocation samplingLocation47 = null;
        putActivity46.SamplingLocation = samplingLocation47;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservedProperty postObservedProperty49 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservedProperty();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UnitGroup unitGroup50 = postObservedProperty49.UnitGroup;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity quantity51 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Unit unit52 = null;
        quantity51.Unit = unit52;
        postObservedProperty49.LowerLimit = quantity51;
        putActivity46.Depth = quantity51;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutActivity putActivity56 = putActivity40.setDepth(quantity51);
        putObservationV2_37.Depth = quantity51;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Medium medium58 = putObservationV2_37.Medium;
        java.lang.String str59 = putObservationV2_37.Comment;
        org.junit.Assert.assertNotNull(putObservationV2_2);
        org.junit.Assert.assertNull(activity3);
        org.junit.Assert.assertNull(dataClassificationType4);
        org.junit.Assert.assertNull(categoricalResult5);
        org.junit.Assert.assertNotNull(putObservationV2_7);
        org.junit.Assert.assertNotNull(postActivity12);
        org.junit.Assert.assertNotNull(postActivity14);
        org.junit.Assert.assertNotNull(observation17);
        org.junit.Assert.assertNotNull(observation21);
        org.junit.Assert.assertNull(offsetDateTime22);
        org.junit.Assert.assertNull(importHistoryEventSimpleList23);
        org.junit.Assert.assertNotNull(observation25);
        org.junit.Assert.assertNotNull(ruleValidationDetailsArray26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(observation29);
        org.junit.Assert.assertNotNull(extendedAttributeArray31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(postActivity36);
        org.junit.Assert.assertNotNull(putObservationV2_37);
        org.junit.Assert.assertNull(str38);
        org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertNull(plannedActivity44);
        org.junit.Assert.assertNotNull(putActivity46);
        org.junit.Assert.assertNull(unitGroup50);
        org.junit.Assert.assertNotNull(putActivity56);
        org.junit.Assert.assertNull(medium58);
        org.junit.Assert.assertNull(str59);
    }

    @Test
    public void test24338() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest48.test24338");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutTaxon putTaxon0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutTaxon();
        putTaxon0.ParentId = "http://MaxDurationhttp/json/reply/ArrayList";
        java.lang.String str3 = putTaxon0.getComment();
        putTaxon0.Comment = "http";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutTaxon putTaxon7 = putTaxon0.setScientificName("/AQUARIUS");
        java.lang.String str8 = putTaxon0.getSource();
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(putTaxon7);
        org.junit.Assert.assertNull(str8);
    }

    @Test
    public void test24339() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest48.test24339");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitDataByLocationServiceRequest fieldVisitDataByLocationServiceRequest0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitDataByLocationServiceRequest();
        java.lang.Boolean boolean1 = fieldVisitDataByLocationServiceRequest0.isIncludeCrossSectionSurveyProfile();
        java.lang.Boolean boolean2 = fieldVisitDataByLocationServiceRequest0.ApplyRounding;
        java.lang.Boolean boolean3 = fieldVisitDataByLocationServiceRequest0.IncludeCrossSectionSurveyProfile;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitDataByLocationServiceRequest fieldVisitDataByLocationServiceRequest5 = fieldVisitDataByLocationServiceRequest0.setIncludeCrossSectionSurveyProfile((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitDataByLocationServiceRequest fieldVisitDataByLocationServiceRequest6 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitDataByLocationServiceRequest();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ActivityType activityType7 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ActivityType.CrossSectionSurvey;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ActivityType activityType8 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ActivityType.DischargeOtherMethod;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ActivityType activityType9 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ActivityType.Attachment;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ActivityType activityType10 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ActivityType.DischargeEngineeredStructure;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ActivityType activityType11 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ActivityType.CrossSectionSurvey;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ActivityType activityType12 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ActivityType.GageHeightAtZeroFlow;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ActivityType activityType13 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ActivityType.CalibrationCheck;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ActivityType[] activityTypeArray14 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ActivityType[] { activityType7, activityType8, activityType9, activityType10, activityType11, activityType12, activityType13 };
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ActivityType> activityTypeList15 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ActivityType>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ActivityType>) activityTypeList15, activityTypeArray14);
        fieldVisitDataByLocationServiceRequest6.Activities = activityTypeList15;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitDataByLocationServiceRequest fieldVisitDataByLocationServiceRequest18 = fieldVisitDataByLocationServiceRequest0.setActivities(activityTypeList15);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObservedProperty importItemObservedProperty19 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObservedProperty();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitDataByLocationServiceRequest fieldVisitDataByLocationServiceRequest20 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitDataByLocationServiceRequest();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitDataByLocationServiceRequest fieldVisitDataByLocationServiceRequest22 = fieldVisitDataByLocationServiceRequest20.setIncludeNodeDetails((java.lang.Boolean) true);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObservedProperty importItemObservedProperty23 = importItemObservedProperty19.setErrors((java.lang.Object) true);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty observedProperty24 = importItemObservedProperty19.getExistingItem();
        java.lang.String str25 = importItemObservedProperty19.getRowId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObservedProperty importItemObservedProperty27 = importItemObservedProperty19.setRowId("multipart/form-data; boundary=****6b8051d4-caf2-4095-9f11-faa36b95fc28****");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationExportIIV2 getObservationExportIIV2_28 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationExportIIV2();
        java.util.List<java.lang.String> strList29 = getObservationExportIIV2_28.getCollectionMethodIds();
        java.lang.String str30 = getObservationExportIIV2_28.getDepthUnitCustomId();
        java.util.List<java.lang.String> strList31 = getObservationExportIIV2_28.getAnalyticalGroupIds();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetSpecimens getSpecimens32 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetSpecimens();
        java.util.List<java.lang.String> strList33 = getSpecimens32.getActivityIds();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutUserV2 putUserV2_34 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutUserV2();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UserType userType35 = putUserV2_34.UserType;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetActivities getActivities36 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetActivities();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse37 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary38 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary40 = dischargeSummary38.setPublish((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse41 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant42 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse43 = locationDescriptionListServiceResponse41.setNextToken(instant42);
        dischargeSummary38.MeasurementTime = instant42;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse45 = locationDescriptionListServiceResponse37.setNextToken(instant42);
        java.time.Instant instant46 = locationDescriptionListServiceResponse37.getNextToken();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetActivities getActivities47 = getActivities36.setToStartTime(instant46);
        java.lang.String str48 = getActivities47.getSort();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_49 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.util.List<java.lang.String> strList50 = getObservationsV2_49.SamplingContextTagIds;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_51 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray53 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList54 = new java.util.ArrayList<java.lang.String>();
        boolean boolean55 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList54, strArray53);
        getObservationsV2_51.SpecimenIds = strList54;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags57 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray61 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList62 = new java.util.ArrayList<java.lang.String>();
        boolean boolean63 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList62, strArray61);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags64 = putLocationTags57.setTagUniqueIds(strList62);
        getObservationsV2_51.QualityControlTypes = strList62;
        getObservationsV2_49.ResultGrades = strList62;
        getActivities47.Media = strList62;
        putUserV2_34.AccessGroups = strList62;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetSpecimens getSpecimens69 = getSpecimens32.setAnalyticalGroupIds((java.util.List<java.lang.String>) strList62);
        getObservationExportIIV2_28.ObservedPropertyIds = strList62;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObservedProperty importItemObservedProperty71 = importItemObservedProperty27.setErrors((java.lang.Object) strList62);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitDataByLocationServiceRequest fieldVisitDataByLocationServiceRequest72 = fieldVisitDataByLocationServiceRequest18.setParameters(strList62);
        org.junit.Assert.assertNull(boolean1);
        org.junit.Assert.assertNull(boolean2);
        org.junit.Assert.assertNull(boolean3);
        org.junit.Assert.assertNotNull(fieldVisitDataByLocationServiceRequest5);
        org.junit.Assert.assertTrue("'" + activityType7 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ActivityType.CrossSectionSurvey + "'", activityType7.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ActivityType.CrossSectionSurvey));
        org.junit.Assert.assertTrue("'" + activityType8 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ActivityType.DischargeOtherMethod + "'", activityType8.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ActivityType.DischargeOtherMethod));
        org.junit.Assert.assertTrue("'" + activityType9 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ActivityType.Attachment + "'", activityType9.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ActivityType.Attachment));
        org.junit.Assert.assertTrue("'" + activityType10 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ActivityType.DischargeEngineeredStructure + "'", activityType10.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ActivityType.DischargeEngineeredStructure));
        org.junit.Assert.assertTrue("'" + activityType11 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ActivityType.CrossSectionSurvey + "'", activityType11.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ActivityType.CrossSectionSurvey));
        org.junit.Assert.assertTrue("'" + activityType12 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ActivityType.GageHeightAtZeroFlow + "'", activityType12.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ActivityType.GageHeightAtZeroFlow));
        org.junit.Assert.assertTrue("'" + activityType13 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ActivityType.CalibrationCheck + "'", activityType13.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ActivityType.CalibrationCheck));
        org.junit.Assert.assertNotNull(activityTypeArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(fieldVisitDataByLocationServiceRequest18);
        org.junit.Assert.assertNotNull(fieldVisitDataByLocationServiceRequest22);
        org.junit.Assert.assertNotNull(importItemObservedProperty23);
        org.junit.Assert.assertNull(observedProperty24);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertNotNull(importItemObservedProperty27);
        org.junit.Assert.assertNull(strList29);
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertNull(strList31);
        org.junit.Assert.assertNull(strList33);
        org.junit.Assert.assertNull(userType35);
        org.junit.Assert.assertNotNull(dischargeSummary40);
        org.junit.Assert.assertNotNull(instant42);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse43);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse45);
        org.junit.Assert.assertNotNull(instant46);
        org.junit.Assert.assertNotNull(getActivities47);
        org.junit.Assert.assertNull(str48);
        org.junit.Assert.assertNull(strList50);
        org.junit.Assert.assertNotNull(strArray53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(strArray61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNotNull(putLocationTags64);
        org.junit.Assert.assertNotNull(getSpecimens69);
        org.junit.Assert.assertNotNull(importItemObservedProperty71);
        org.junit.Assert.assertNotNull(fieldVisitDataByLocationServiceRequest72);
    }

    @Test
    public void test24340() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest48.test24340");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest();
        java.lang.Object obj1 = timeAlignedDataServiceRequest0.getResponseType();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse2 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant3 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse4 = locationDescriptionListServiceResponse2.setNextToken(instant3);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest5 = timeAlignedDataServiceRequest0.setQueryFrom(instant3);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags6 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray10 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList11 = new java.util.ArrayList<java.lang.String>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList11, strArray10);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags13 = putLocationTags6.setTagUniqueIds(strList11);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest14 = timeAlignedDataServiceRequest0.setTimeSeriesOutputUnitIds(strList11);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest16 = timeAlignedDataServiceRequest14.setApplyRounding((java.lang.Boolean) false);
        java.util.ArrayList<java.lang.String> strList17 = null;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest18 = timeAlignedDataServiceRequest16.setTimeSeriesUniqueIds(strList17);
        java.lang.Double double19 = timeAlignedDataServiceRequest18.UtcOffset;
        org.junit.Assert.assertNotNull(obj1);
        org.junit.Assert.assertEquals(obj1.toString(), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj1), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj1), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertNotNull(instant3);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse4);
        org.junit.Assert.assertNotNull(timeAlignedDataServiceRequest5);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(putLocationTags13);
        org.junit.Assert.assertNotNull(timeAlignedDataServiceRequest14);
        org.junit.Assert.assertNotNull(timeAlignedDataServiceRequest16);
        org.junit.Assert.assertNotNull(timeAlignedDataServiceRequest18);
        org.junit.Assert.assertNull(double19);
    }

    @Test
    public void test24341() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest48.test24341");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Adjustment adjustment1 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Adjustment();
        java.lang.Double double2 = adjustment1.getAdjustmentAmount();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.AdjustmentType adjustmentType3 = adjustment1.getAdjustmentType();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.AdjustmentType adjustmentType4 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.AdjustmentType.Amount;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Adjustment adjustment5 = adjustment1.setAdjustmentType(adjustmentType4);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary6 = dischargeSummary0.setAdjustment(adjustment5);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay7 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay9 = doubleWithDisplay7.setNumeric((java.lang.Double) 10.0d);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary10 = dischargeSummary6.setDurationInHours(doubleWithDisplay9);
        java.time.Instant instant11 = dischargeSummary6.getMeasurementTime();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay12 = dischargeSummary6.Discharge;
        org.junit.Assert.assertNull(double2);
        org.junit.Assert.assertNull(adjustmentType3);
        org.junit.Assert.assertTrue("'" + adjustmentType4 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.AdjustmentType.Amount + "'", adjustmentType4.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.AdjustmentType.Amount));
        org.junit.Assert.assertNotNull(adjustment5);
        org.junit.Assert.assertNotNull(dischargeSummary6);
        org.junit.Assert.assertNotNull(doubleWithDisplay9);
        org.junit.Assert.assertNotNull(dischargeSummary10);
        org.junit.Assert.assertNull(instant11);
        org.junit.Assert.assertNull(quantityWithDisplay12);
    }

    @Test
    public void test24342() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest48.test24342");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails();
        java.lang.String str1 = labResultDetails0.DilutionFactor;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Laboratory laboratory2 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails3 = labResultDetails0.setLaboratory(laboratory2);
        java.time.OffsetDateTime offsetDateTime4 = null;
        labResultDetails0.DatePrepared = offsetDateTime4;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabReport labReport6 = null;
        labResultDetails0.LabReport = labReport6;
        java.lang.String str8 = labResultDetails0.getAnalysisComment();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Laboratory laboratory9 = labResultDetails0.getLaboratory();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(labResultDetails3);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNull(laboratory9);
    }

    @Test
    public void test24343() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest48.test24343");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary2 = dischargeSummary0.setPublish((java.lang.Boolean) false);
        java.lang.Boolean boolean3 = dischargeSummary0.isMeanGageHeightWasDatumConverted();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay4 = dischargeSummary0.Discharge;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay5 = dischargeSummary0.getMeanGageHeight();
        org.junit.Assert.assertNotNull(dischargeSummary2);
        org.junit.Assert.assertNull(boolean3);
        org.junit.Assert.assertNull(quantityWithDisplay4);
        org.junit.Assert.assertNull(quantityWithDisplay5);
    }

    @Test
    public void test24344() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest48.test24344");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutObservedProperty putObservedProperty0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutObservedProperty();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity quantity1 = putObservedProperty0.LowerLimit;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutObservedProperty putObservedProperty3 = putObservedProperty0.setDescription("");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisType analysisType4 = putObservedProperty0.AnalysisType;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisType analysisType5 = putObservedProperty0.getAnalysisType();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservedProperty postObservedProperty6 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservedProperty();
        java.lang.Object obj7 = postObservedProperty6.getResponseType();
        java.lang.String str8 = postObservedProperty6.getName();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutActivity putActivity9 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutActivity();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity quantity10 = null;
        putActivity9.Depth = quantity10;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutActivity putActivity12 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutActivity();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity plannedActivity13 = putActivity12.PlannedActivity;
        java.time.OffsetDateTime offsetDateTime14 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutActivity putActivity15 = putActivity12.setEndTime(offsetDateTime14);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocation samplingLocation16 = null;
        putActivity15.SamplingLocation = samplingLocation16;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservedProperty postObservedProperty18 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservedProperty();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UnitGroup unitGroup19 = postObservedProperty18.UnitGroup;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity quantity20 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Unit unit21 = null;
        quantity20.Unit = unit21;
        postObservedProperty18.LowerLimit = quantity20;
        putActivity15.Depth = quantity20;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutActivity putActivity25 = putActivity9.setDepth(quantity20);
        postObservedProperty6.UpperLimit = quantity20;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Unit unit27 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Unit();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes28 = unit27.AuditAttributes;
        unit27.BaseMultiplier = 0.0d;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutAccessGroup putAccessGroup31 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutAccessGroup();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivity samplingPlanPlannedActivity32 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivity();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes33 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivity samplingPlanPlannedActivity34 = samplingPlanPlannedActivity32.setAuditAttributes(auditAttributes33);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes35 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes37 = auditAttributes35.setCreationUserProfileId("'.'SSSSSSS");
        samplingPlanPlannedActivity34.AuditAttributes = auditAttributes35;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes39 = samplingPlanPlannedActivity34.AuditAttributes;
        putAccessGroup31.AuditAttributes = auditAttributes39;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Unit unit41 = unit27.setAuditAttributes(auditAttributes39);
        quantity20.Unit = unit27;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutUnit putUnit43 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutUnit();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutUnit putUnit45 = putUnit43.setName("MinInstant");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UnitGroup unitGroup46 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UnitGroup();
        unitGroup46.CustomId = "https";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UnitGroupSystemCodeType unitGroupSystemCodeType49 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UnitGroup unitGroup50 = unitGroup46.setSystemCode(unitGroupSystemCodeType49);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutUnit putUnit51 = putUnit45.setUnitGroup(unitGroup50);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UnitGroupSystemCodeType unitGroupSystemCodeType52 = null;
        unitGroup50.SystemCode = unitGroupSystemCodeType52;
        unit27.UnitGroup = unitGroup50;
        unitGroup50.CustomId = "0001-01-01T00:00:00.000Z";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutObservedProperty putObservedProperty57 = putObservedProperty0.setUnitGroup(unitGroup50);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservedProperty postObservedProperty58 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservedProperty();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservedProperty postObservedProperty60 = postObservedProperty58.setCustomId("hi!");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes61 = postObservedProperty58.AuditAttributes;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservedProperty postObservedProperty63 = postObservedProperty58.setName("2021.4.62.0");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultType resultType64 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultType.CATEGORICAL_FIXED_VALUES;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservedProperty postObservedProperty65 = postObservedProperty63.setResultType(resultType64);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultType resultType66 = postObservedProperty65.ResultType;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutObservedProperty putObservedProperty67 = putObservedProperty0.setResultType(resultType66);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultType resultType68 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutObservedProperty putObservedProperty69 = putObservedProperty67.setResultType(resultType68);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisType analysisType70 = putObservedProperty69.getAnalysisType();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Unit unit71 = putObservedProperty69.DefaultUnit;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity quantity72 = putObservedProperty69.UpperLimit;
        java.lang.String str73 = putObservedProperty69.Id;
        org.junit.Assert.assertNull(quantity1);
        org.junit.Assert.assertNotNull(putObservedProperty3);
        org.junit.Assert.assertNull(analysisType4);
        org.junit.Assert.assertNull(analysisType5);
        org.junit.Assert.assertNotNull(obj7);
        org.junit.Assert.assertEquals(obj7.toString(), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$ObservedProperty");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj7), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$ObservedProperty");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj7), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$ObservedProperty");
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNull(plannedActivity13);
        org.junit.Assert.assertNotNull(putActivity15);
        org.junit.Assert.assertNull(unitGroup19);
        org.junit.Assert.assertNotNull(putActivity25);
        org.junit.Assert.assertNull(auditAttributes28);
        org.junit.Assert.assertNotNull(samplingPlanPlannedActivity34);
        org.junit.Assert.assertNotNull(auditAttributes37);
        org.junit.Assert.assertNotNull(auditAttributes39);
        org.junit.Assert.assertNotNull(unit41);
        org.junit.Assert.assertNotNull(putUnit45);
        org.junit.Assert.assertNotNull(unitGroup50);
        org.junit.Assert.assertNotNull(putUnit51);
        org.junit.Assert.assertNotNull(putObservedProperty57);
        org.junit.Assert.assertNotNull(postObservedProperty60);
        org.junit.Assert.assertNull(auditAttributes61);
        org.junit.Assert.assertNotNull(postObservedProperty63);
        org.junit.Assert.assertTrue("'" + resultType64 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultType.CATEGORICAL_FIXED_VALUES + "'", resultType64.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultType.CATEGORICAL_FIXED_VALUES));
        org.junit.Assert.assertNotNull(postObservedProperty65);
        org.junit.Assert.assertTrue("'" + resultType66 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultType.CATEGORICAL_FIXED_VALUES + "'", resultType66.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultType.CATEGORICAL_FIXED_VALUES));
        org.junit.Assert.assertNotNull(putObservedProperty67);
        org.junit.Assert.assertNotNull(putObservedProperty69);
        org.junit.Assert.assertNull(analysisType70);
        org.junit.Assert.assertNull(unit71);
        org.junit.Assert.assertNull(quantity72);
        org.junit.Assert.assertNull(str73);
    }

    @Test
    public void test24345() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest48.test24345");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutOpenIdConnectRelyingPartyConfiguration putOpenIdConnectRelyingPartyConfiguration0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutOpenIdConnectRelyingPartyConfiguration();
        java.util.List<java.lang.String> strList1 = putOpenIdConnectRelyingPartyConfiguration0.getScopes();
        java.lang.String str2 = putOpenIdConnectRelyingPartyConfiguration0.getOptionalIssuerDiscoveryUri();
        putOpenIdConnectRelyingPartyConfiguration0.IdentifierClaim = "9999-12-31T23:59:59.999Z";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.OpenIdConnectRelyingPartyConfigurationBase openIdConnectRelyingPartyConfigurationBase6 = putOpenIdConnectRelyingPartyConfiguration0.setRedirectUri("/AQUARIUS/Acquisition/v2://9999-12-31T23:59:59.999Z");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.OpenIdConnectRelyingPartyConfigurationBase openIdConnectRelyingPartyConfigurationBase8 = putOpenIdConnectRelyingPartyConfiguration0.setIdentifierClaim("https");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.OpenIdConnectRelyingPartyConfigurationBase openIdConnectRelyingPartyConfigurationBase10 = putOpenIdConnectRelyingPartyConfiguration0.setDisplayName("MaxInstant");
        java.lang.String str11 = openIdConnectRelyingPartyConfigurationBase10.OptionalIssuerDiscoveryUri;
        org.junit.Assert.assertNull(strList1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNotNull(openIdConnectRelyingPartyConfigurationBase6);
        org.junit.Assert.assertNotNull(openIdConnectRelyingPartyConfigurationBase8);
        org.junit.Assert.assertNotNull(openIdConnectRelyingPartyConfigurationBase10);
        org.junit.Assert.assertNull(str11);
    }

    @Test
    public void test24346() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest48.test24346");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostStatisticalDerivedTimeSeries postStatisticalDerivedTimeSeries0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostStatisticalDerivedTimeSeries();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostStatisticalDerivedTimeSeries postStatisticalDerivedTimeSeries2 = postStatisticalDerivedTimeSeries0.setComment("'.'SSSSSSS");
        java.lang.String str3 = postStatisticalDerivedTimeSeries0.getParameter();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostStatisticalDerivedTimeSeries postStatisticalDerivedTimeSeries5 = postStatisticalDerivedTimeSeries0.setComputationPeriodIdentifier("/AQUARIUS/Provisioning/v1");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.NewValueLocationType newValueLocationType6 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.NewValueLocationType.Unknown;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostStatisticalDerivedTimeSeries postStatisticalDerivedTimeSeries7 = postStatisticalDerivedTimeSeries0.setNewValueLocation(newValueLocationType6);
        postStatisticalDerivedTimeSeries7.Label = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ";
        java.lang.Double double10 = postStatisticalDerivedTimeSeries7.getCoverageMinimumPercentage();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.NewValueLocationType newValueLocationType11 = postStatisticalDerivedTimeSeries7.NewValueLocation;
        java.lang.String str12 = postStatisticalDerivedTimeSeries7.Comment;
        org.junit.Assert.assertNotNull(postStatisticalDerivedTimeSeries2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(postStatisticalDerivedTimeSeries5);
        org.junit.Assert.assertTrue("'" + newValueLocationType6 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.NewValueLocationType.Unknown + "'", newValueLocationType6.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.NewValueLocationType.Unknown));
        org.junit.Assert.assertNotNull(postStatisticalDerivedTimeSeries7);
        org.junit.Assert.assertNull(double10);
        org.junit.Assert.assertTrue("'" + newValueLocationType11 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.NewValueLocationType.Unknown + "'", newValueLocationType11.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.NewValueLocationType.Unknown));
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "'.'SSSSSSS" + "'", str12, "'.'SSSSSSS");
    }

    @Test
    public void test24347() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest48.test24347");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.EffectiveShift effectiveShift0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.EffectiveShift();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse1 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary2 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary4 = dischargeSummary2.setPublish((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse5 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant6 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse7 = locationDescriptionListServiceResponse5.setNextToken(instant6);
        dischargeSummary2.MeasurementTime = instant6;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse9 = locationDescriptionListServiceResponse1.setNextToken(instant6);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.EffectiveShift effectiveShift10 = effectiveShift0.setTimestamp(instant6);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary11 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay12 = dischargeSummary11.getMeanGageHeight();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay13 = dischargeSummary11.Discharge;
        java.lang.Integer int14 = dischargeSummary11.getGradeCode();
        java.lang.String str15 = dischargeSummary11.getQualityAssuranceComments();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Attachment attachment16 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Attachment();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse17 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary18 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary20 = dischargeSummary18.setPublish((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse21 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant22 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse23 = locationDescriptionListServiceResponse21.setNextToken(instant22);
        dischargeSummary18.MeasurementTime = instant22;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse25 = locationDescriptionListServiceResponse17.setNextToken(instant22);
        java.time.Instant instant26 = locationDescriptionListServiceResponse17.getNextToken();
        attachment16.DateLastAccessed = instant26;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary28 = dischargeSummary11.setMeasurementStartTime(instant26);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.EffectiveShift effectiveShift29 = effectiveShift0.setTimestamp(instant26);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.EffectiveShift effectiveShift31 = effectiveShift29.setValue((java.lang.Double) (-1.0d));
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.EffectiveShift effectiveShift33 = effectiveShift29.setValue((java.lang.Double) 10.0d);
        effectiveShift33.Value = 0.0d;
        org.junit.Assert.assertNotNull(dischargeSummary4);
        org.junit.Assert.assertNotNull(instant6);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse7);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse9);
        org.junit.Assert.assertNotNull(effectiveShift10);
        org.junit.Assert.assertNull(quantityWithDisplay12);
        org.junit.Assert.assertNull(quantityWithDisplay13);
        org.junit.Assert.assertNull(int14);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNotNull(dischargeSummary20);
        org.junit.Assert.assertNotNull(instant22);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse23);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse25);
        org.junit.Assert.assertNotNull(instant26);
        org.junit.Assert.assertNotNull(dischargeSummary28);
        org.junit.Assert.assertNotNull(effectiveShift29);
        org.junit.Assert.assertNotNull(effectiveShift31);
        org.junit.Assert.assertNotNull(effectiveShift33);
    }

    @Test
    public void test24348() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest48.test24348");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetActivity getActivity0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetActivity();
        java.lang.Boolean boolean1 = getActivity0.getDetail();
        org.junit.Assert.assertNull(boolean1);
    }

    @Test
    public void test24349() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest48.test24349");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportObservations getExportObservations0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportObservations();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportObservations getExportObservations2 = getExportObservations0.setFieldVisitId("multipart/form-data; boundary=****44f0772e-c3ca-4316-8e2a-61ec8540d661****");
        java.util.List<java.lang.String> strList3 = getExportObservations0.getSpecimenIds();
        java.util.List<java.lang.String> strList4 = getExportObservations0.getMedia();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportObservations getExportObservations6 = getExportObservations0.setFilterId("multipart/form-data; boundary=****59879c02-0839-4b96-bc41-a13ebb706be4****");
        getExportObservations0.SpecimenName = "multipart/form-data; boundary=****871ccc7e-c9d9-467b-8c95-d6f9599f0e81****";
        org.junit.Assert.assertNotNull(getExportObservations2);
        org.junit.Assert.assertNull(strList3);
        org.junit.Assert.assertNull(strList4);
        org.junit.Assert.assertNotNull(getExportObservations6);
    }

    @Test
    public void test24350() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest48.test24350");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ReferencePoint referencePoint0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ReferencePoint();
        java.lang.String str1 = referencePoint0.Name;
        java.lang.String str2 = referencePoint0.getUniqueId();
        referencePoint0.UniqueId = "/AQUARIUS";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ReferencePoint referencePoint6 = referencePoint0.setLatitude((java.lang.Double) (-1.0d));
        java.lang.String str7 = referencePoint0.Description;
        java.time.Instant instant8 = referencePoint0.getDecommissionedDate();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNotNull(referencePoint6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(instant8);
    }

    @Test
    public void test24351() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest48.test24351");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationImportSummary observationImportSummary0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationImportSummary();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple importHistoryEventSimple1 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple();
        java.time.OffsetDateTime offsetDateTime2 = importHistoryEventSimple1.ImportTime;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple importHistoryEventSimple4 = importHistoryEventSimple1.setId("http");
        java.lang.String str5 = importHistoryEventSimple1.getTimeZoneOffset();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationImportSummary observationImportSummary6 = observationImportSummary0.setImportHistoryEventSimple(importHistoryEventSimple1);
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObservation> importItemObservationList7 = observationImportSummary0.getErrorImportItems();
        org.junit.Assert.assertNull(offsetDateTime2);
        org.junit.Assert.assertNotNull(importHistoryEventSimple4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(observationImportSummary6);
        org.junit.Assert.assertNull(importItemObservationList7);
    }

    @Test
    public void test24352() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest48.test24352");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Attachment attachment0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Attachment();
        attachment0.ContentType = "/AQUARIUS/Provisioning/v1";
        java.time.OffsetDateTime offsetDateTime3 = attachment0.DateTaken;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Attachment attachment5 = attachment0.setComment("");
        attachment5.Id = "MinDuration";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributesFull auditAttributesFull8 = attachment5.AuditAttributes;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Attachment attachment10 = attachment5.setComment("http://MaxDurationhttp/json/reply/Float://multipart/form-data; boundary=****231224c4-98ce-4e30-bd65-1d25287c4abe****");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Attachment attachment12 = attachment5.setId("multipart/form-data; boundary=****221f1588-b890-43c2-a3c8-0d77cfe54330****");
        org.junit.Assert.assertNull(offsetDateTime3);
        org.junit.Assert.assertNotNull(attachment5);
        org.junit.Assert.assertNull(auditAttributesFull8);
        org.junit.Assert.assertNotNull(attachment10);
        org.junit.Assert.assertNotNull(attachment12);
    }

    @Test
    public void test24353() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest48.test24353");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AttachmentRepresentation attachmentRepresentation0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AttachmentRepresentation();
        java.lang.String str1 = attachmentRepresentation0.getLongitude();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AttachmentRepresentation attachmentRepresentation3 = attachmentRepresentation0.setContentType("yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSSSSSZZZZZ");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AttachmentRepresentation attachmentRepresentation5 = attachmentRepresentation3.setLongitude("hi!");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AttachmentRepresentation attachmentRepresentation7 = attachmentRepresentation3.setSuccess((java.lang.Boolean) true);
        attachmentRepresentation7.Longitude = "";
        java.lang.String str10 = attachmentRepresentation7.getResolution();
        attachmentRepresentation7.Success = true;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(attachmentRepresentation3);
        org.junit.Assert.assertNotNull(attachmentRepresentation5);
        org.junit.Assert.assertNotNull(attachmentRepresentation7);
        org.junit.Assert.assertNull(str10);
    }

    @Test
    public void test24354() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest48.test24354");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesThreshold timeSeriesThreshold0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesThreshold();
        timeSeriesThreshold0.DisplayColor = "";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesThreshold timeSeriesThreshold4 = timeSeriesThreshold0.setDisplayColor("/AQUARIUS/Provisioning/v1");
        java.lang.String str5 = timeSeriesThreshold4.DisplayColor;
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesThresholdPeriod> timeSeriesThresholdPeriodList6 = timeSeriesThreshold4.Periods;
        java.lang.Integer int7 = timeSeriesThreshold4.getSeverity();
        timeSeriesThreshold4.Severity = 2;
        timeSeriesThreshold4.ReferenceCode = "'.'SSSSSSS";
        org.junit.Assert.assertNotNull(timeSeriesThreshold4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "/AQUARIUS/Provisioning/v1" + "'", str5, "/AQUARIUS/Provisioning/v1");
        org.junit.Assert.assertNull(timeSeriesThresholdPeriodList6);
        org.junit.Assert.assertNull(int7);
    }

    @Test
    public void test24355() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest48.test24355");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostAnalysisMethod postAnalysisMethod0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostAnalysisMethod();
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple> importHistoryEventSimpleList1 = postAnalysisMethod0.ImportHistoryEventSimples;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostAnalysisMethod postAnalysisMethod3 = postAnalysisMethod0.setDescription("https");
        postAnalysisMethod0.Id = "2021.4.62.0";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes6 = postAnalysisMethod0.getAuditAttributes();
        org.junit.Assert.assertNull(importHistoryEventSimpleList1);
        org.junit.Assert.assertNotNull(postAnalysisMethod3);
        org.junit.Assert.assertNull(auditAttributes6);
    }

    @Test
    public void test24356() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest48.test24356");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Vertical vertical0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Vertical();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay1 = vertical0.SegmentArea;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay2 = null;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Vertical vertical3 = vertical0.setMeanVelocity(quantityWithDisplay2);
        java.lang.Boolean boolean4 = vertical3.getIsDischargeEstimated();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay5 = null;
        vertical3.EffectiveDepth = quantityWithDisplay5;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay7 = vertical3.getSegmentVelocity();
        org.junit.Assert.assertNull(quantityWithDisplay1);
        org.junit.Assert.assertNotNull(vertical3);
        org.junit.Assert.assertNull(boolean4);
        org.junit.Assert.assertNull(quantityWithDisplay7);
    }

    @Test
    public void test24357() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest48.test24357");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSchedule putSchedule0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSchedule();
        java.time.OffsetDateTime offsetDateTime1 = putSchedule0.StartDate;
        java.time.OffsetDateTime offsetDateTime2 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSchedule putSchedule3 = putSchedule0.setEndDate(offsetDateTime2);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationGroup samplingLocationGroup4 = putSchedule3.getSamplingLocationGroup();
        java.time.OffsetDateTime offsetDateTime5 = null;
        putSchedule3.EndDate = offsetDateTime5;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSchedule putSchedule8 = putSchedule3.setSamplingLocationGroupSelectionTypeRandomCount((java.lang.Integer) 100);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSchedule putSchedule9 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSchedule();
        java.time.OffsetDateTime offsetDateTime10 = putSchedule9.StartDate;
        java.time.OffsetDateTime offsetDateTime11 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSchedule putSchedule12 = putSchedule9.setEndDate(offsetDateTime11);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationGroup samplingLocationGroup13 = putSchedule12.getSamplingLocationGroup();
        java.time.OffsetDateTime offsetDateTime14 = null;
        putSchedule12.EndDate = offsetDateTime14;
        java.time.OffsetDateTime offsetDateTime16 = putSchedule12.getLastGenerationDate();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.RecurrenceDayMonthlyType recurrenceDayMonthlyType17 = putSchedule12.getRecurrenceDayMonthly();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSchedule putSchedule18 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSchedule();
        java.time.OffsetDateTime offsetDateTime19 = putSchedule18.StartDate;
        java.time.OffsetDateTime offsetDateTime20 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSchedule putSchedule21 = putSchedule18.setEndDate(offsetDateTime20);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes22 = putSchedule21.AuditAttributes;
        java.time.OffsetDateTime offsetDateTime23 = null;
        putSchedule21.LastGenerationDate = offsetDateTime23;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSchedule putSchedule25 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSchedule();
        java.lang.Integer int26 = putSchedule25.getSamplingLocationGroupSelectionTypeRandomCount();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.RecurrenceType recurrenceType27 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.RecurrenceType.BI_WEEKLY;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSchedule putSchedule28 = putSchedule25.setRecurrenceType(recurrenceType27);
        putSchedule21.RecurrenceType = recurrenceType27;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSchedule putSchedule30 = putSchedule12.setRecurrenceType(recurrenceType27);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSchedule putSchedule31 = putSchedule3.setRecurrenceType(recurrenceType27);
        putSchedule31.Id = "multipart/form-data; boundary=****231224c4-98ce-4e30-bd65-1d25287c4abe****";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.RecurrenceDayWeeklyType recurrenceDayWeeklyType34 = putSchedule31.getRecurrenceDayWeekly();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes35 = putSchedule31.AuditAttributes;
        java.lang.Object obj36 = putSchedule31.getResponseType();
        org.junit.Assert.assertNull(offsetDateTime1);
        org.junit.Assert.assertNotNull(putSchedule3);
        org.junit.Assert.assertNull(samplingLocationGroup4);
        org.junit.Assert.assertNotNull(putSchedule8);
        org.junit.Assert.assertNull(offsetDateTime10);
        org.junit.Assert.assertNotNull(putSchedule12);
        org.junit.Assert.assertNull(samplingLocationGroup13);
        org.junit.Assert.assertNull(offsetDateTime16);
        org.junit.Assert.assertNull(recurrenceDayMonthlyType17);
        org.junit.Assert.assertNull(offsetDateTime19);
        org.junit.Assert.assertNotNull(putSchedule21);
        org.junit.Assert.assertNull(auditAttributes22);
        org.junit.Assert.assertNull(int26);
        org.junit.Assert.assertTrue("'" + recurrenceType27 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.RecurrenceType.BI_WEEKLY + "'", recurrenceType27.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.RecurrenceType.BI_WEEKLY));
        org.junit.Assert.assertNotNull(putSchedule28);
        org.junit.Assert.assertNotNull(putSchedule30);
        org.junit.Assert.assertNotNull(putSchedule31);
        org.junit.Assert.assertNull(recurrenceDayWeeklyType34);
        org.junit.Assert.assertNull(auditAttributes35);
        org.junit.Assert.assertNotNull(obj36);
        org.junit.Assert.assertEquals(obj36.toString(), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$Schedule");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj36), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$Schedule");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj36), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$Schedule");
    }

    @Test
    public void test24358() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest48.test24358");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingCurve ratingCurve0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingCurve();
        java.lang.String str1 = ratingCurve0.Equation;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ExpandedRatingCurve expandedRatingCurve2 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ExpandedRatingCurve();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingCurveType ratingCurveType3 = expandedRatingCurve2.Type;
        expandedRatingCurve2.IsBlended = false;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ParameterWithUnit parameterWithUnit6 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ParameterWithUnit();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ExpandedRatingCurve expandedRatingCurve7 = expandedRatingCurve2.setOutputParameter(parameterWithUnit6);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingCurve ratingCurve8 = ratingCurve0.setInputParameter(parameterWithUnit6);
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PeriodOfApplicability> periodOfApplicabilityList9 = ratingCurve0.getPeriodsOfApplicability();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingCurve ratingCurve11 = ratingCurve0.setId("http");
        java.lang.String str12 = ratingCurve0.Id;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(ratingCurveType3);
        org.junit.Assert.assertNotNull(expandedRatingCurve7);
        org.junit.Assert.assertNotNull(ratingCurve8);
        org.junit.Assert.assertNull(periodOfApplicabilityList9);
        org.junit.Assert.assertNotNull(ratingCurve11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "http" + "'", str12, "http");
    }

    @Test
    public void test24359() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest48.test24359");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricConfiguration metricConfiguration0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricConfiguration();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes1 = metricConfiguration0.AuditAttributes;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Taxon[] taxonArray2 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Taxon[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Taxon> taxonList3 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Taxon>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Taxon>) taxonList3, taxonArray2);
        metricConfiguration0.Taxons = taxonList3;
        metricConfiguration0.Description = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSSSSSZZZZZ";
        metricConfiguration0.CustomId = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSSSSSZZZZZ";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricConfiguration metricConfiguration10 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricConfiguration();
        java.lang.String str11 = metricConfiguration10.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty observedProperty12 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty();
        observedProperty12.CasNumber = "MinDuration";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricConfiguration metricConfiguration15 = metricConfiguration10.setObservedProperty(observedProperty12);
        java.lang.String str16 = metricConfiguration15.getDescription();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricConfiguration metricConfiguration17 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricConfiguration();
        java.lang.String str18 = metricConfiguration17.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty observedProperty19 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty();
        observedProperty19.CasNumber = "MinDuration";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricConfiguration metricConfiguration22 = metricConfiguration17.setObservedProperty(observedProperty19);
        metricConfiguration17.IncludeChildren = true;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes25 = metricConfiguration17.AuditAttributes;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricConfiguration metricConfiguration26 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricConfiguration();
        java.lang.String str27 = metricConfiguration26.getId();
        metricConfiguration26.CustomId = "/AQUARIUS/Acquisition/v2";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty observedProperty30 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricConfiguration metricConfiguration31 = metricConfiguration26.setObservedProperty(observedProperty30);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AggregationType aggregationType32 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AggregationType.SUM;
        metricConfiguration26.AggregationType = aggregationType32;
        metricConfiguration17.AggregationType = aggregationType32;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricConfiguration metricConfiguration35 = metricConfiguration15.setAggregationType(aggregationType32);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricConfiguration metricConfiguration36 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricConfiguration();
        java.lang.String str37 = metricConfiguration36.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty observedProperty38 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty();
        observedProperty38.CasNumber = "MinDuration";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricConfiguration metricConfiguration41 = metricConfiguration36.setObservedProperty(observedProperty38);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AggregationType aggregationType42 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AggregationType.SUM;
        metricConfiguration36.AggregationType = aggregationType42;
        metricConfiguration15.AggregationType = aggregationType42;
        metricConfiguration0.AggregationType = aggregationType42;
        org.junit.Assert.assertNull(auditAttributes1);
        org.junit.Assert.assertNotNull(taxonArray2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNotNull(metricConfiguration15);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNotNull(metricConfiguration22);
        org.junit.Assert.assertNull(auditAttributes25);
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertNotNull(metricConfiguration31);
        org.junit.Assert.assertTrue("'" + aggregationType32 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AggregationType.SUM + "'", aggregationType32.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AggregationType.SUM));
        org.junit.Assert.assertNotNull(metricConfiguration35);
        org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertNotNull(metricConfiguration41);
        org.junit.Assert.assertTrue("'" + aggregationType42 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AggregationType.SUM + "'", aggregationType42.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AggregationType.SUM));
    }

    @Test
    public void test24360() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest48.test24360");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutOpenIdConnectRelyingPartyConfiguration putOpenIdConnectRelyingPartyConfiguration0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutOpenIdConnectRelyingPartyConfiguration();
        java.util.List<java.lang.String> strList1 = putOpenIdConnectRelyingPartyConfiguration0.getScopes();
        java.lang.String str2 = putOpenIdConnectRelyingPartyConfiguration0.RedirectUri;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.OpenIdConnectRelyingPartyConfigurationBase openIdConnectRelyingPartyConfigurationBase4 = putOpenIdConnectRelyingPartyConfiguration0.setDisplayName("https");
        putOpenIdConnectRelyingPartyConfiguration0.OptionalIssuerDiscoveryUri = "/AQUARIUS/Provisioning/v1";
        putOpenIdConnectRelyingPartyConfiguration0.ClientSecret = "multipart/form-data; boundary=****59879c02-0839-4b96-bc41-a13ebb706be4****";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.SensorsAndGaugesServiceRequest sensorsAndGaugesServiceRequest9 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.SensorsAndGaugesServiceRequest();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescription locationDescription10 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescription();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescription locationDescription12 = locationDescription10.setIdentifier("");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescription locationDescription14 = locationDescription12.setUniqueId("'.'SSSSSSS");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Reading reading15 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Reading();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay16 = reading15.getValue();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Reading reading18 = reading15.setParameterId("hi!");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Reading reading20 = reading18.setModel("MaxInstant");
        java.lang.Integer int21 = reading20.getGradeCode();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutBulkEditResultGradesV2 putBulkEditResultGradesV2_22 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutBulkEditResultGradesV2();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeField extendedAttributeField23 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeField();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeField extendedAttributeField25 = extendedAttributeField23.setDisplayName("");
        java.lang.Boolean boolean26 = extendedAttributeField25.CanBeEmpty;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest27 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest();
        java.lang.Object obj28 = timeAlignedDataServiceRequest27.getResponseType();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_29 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray32 = new java.lang.String[] { "", "" };
        java.util.ArrayList<java.lang.String> strList33 = new java.util.ArrayList<java.lang.String>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList33, strArray32);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_35 = getObservationsV2_29.setDataClassifications((java.util.List<java.lang.String>) strList33);
        getObservationsV2_35.DepthUnitCustomId = "hi!";
        java.lang.String str38 = getObservationsV2_35.CustomId;
        java.util.List<java.lang.String> strList39 = getObservationsV2_35.getSearch();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_40 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray42 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList43 = new java.util.ArrayList<java.lang.String>();
        boolean boolean44 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList43, strArray42);
        getObservationsV2_40.SpecimenIds = strList43;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags46 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray50 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList51 = new java.util.ArrayList<java.lang.String>();
        boolean boolean52 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList51, strArray50);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags53 = putLocationTags46.setTagUniqueIds(strList51);
        getObservationsV2_40.QualityControlTypes = strList51;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_55 = getObservationsV2_35.setMedia((java.util.List<java.lang.String>) strList51);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_56 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String str57 = getObservationsV2_56.getCustomId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_58 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray60 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList61 = new java.util.ArrayList<java.lang.String>();
        boolean boolean62 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList61, strArray60);
        getObservationsV2_58.SpecimenIds = strList61;
        getObservationsV2_56.ProjectIds = strList61;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_65 = getObservationsV2_35.setObservedPropertyIds((java.util.List<java.lang.String>) strList61);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest66 = timeAlignedDataServiceRequest27.setTimeSeriesOutputUnitIds(strList61);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeField extendedAttributeField67 = extendedAttributeField25.setValueOptions((java.util.List<java.lang.String>) strList61);
        putBulkEditResultGradesV2_22.AnalysisMethodSimpleIds = strList61;
        reading20.ReadingQualifiers = strList61;
        locationDescription14.SecondaryFolders = strList61;
        sensorsAndGaugesServiceRequest9.TagKeys = strList61;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.SensorsAndGaugesServiceRequest sensorsAndGaugesServiceRequest73 = sensorsAndGaugesServiceRequest9.setLocationIdentifier("multipart/form-data; boundary=****f2ce0d54-dac7-4cd0-b74f-1024089261f9****");
        java.util.ArrayList<java.lang.String> strList74 = sensorsAndGaugesServiceRequest9.TagKeys;
        java.util.ArrayList<java.lang.String> strList75 = sensorsAndGaugesServiceRequest9.getTagValues();
        java.util.ArrayList<java.lang.String> strList76 = sensorsAndGaugesServiceRequest9.getTagKeys();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.OpenIdConnectRelyingPartyConfigurationBase openIdConnectRelyingPartyConfigurationBase77 = putOpenIdConnectRelyingPartyConfiguration0.setScopes((java.util.List<java.lang.String>) strList76);
        org.junit.Assert.assertNull(strList1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNotNull(openIdConnectRelyingPartyConfigurationBase4);
        org.junit.Assert.assertNotNull(locationDescription12);
        org.junit.Assert.assertNotNull(locationDescription14);
        org.junit.Assert.assertNull(doubleWithDisplay16);
        org.junit.Assert.assertNotNull(reading18);
        org.junit.Assert.assertNotNull(reading20);
        org.junit.Assert.assertNull(int21);
        org.junit.Assert.assertNotNull(extendedAttributeField25);
        org.junit.Assert.assertNull(boolean26);
        org.junit.Assert.assertNotNull(obj28);
        org.junit.Assert.assertEquals(obj28.toString(), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj28), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj28), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(getObservationsV2_35);
        org.junit.Assert.assertNull(str38);
        org.junit.Assert.assertNull(strList39);
        org.junit.Assert.assertNotNull(strArray42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(strArray50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(putLocationTags53);
        org.junit.Assert.assertNotNull(getObservationsV2_55);
        org.junit.Assert.assertNull(str57);
        org.junit.Assert.assertNotNull(strArray60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertNotNull(getObservationsV2_65);
        org.junit.Assert.assertNotNull(timeAlignedDataServiceRequest66);
        org.junit.Assert.assertNotNull(extendedAttributeField67);
        org.junit.Assert.assertNotNull(sensorsAndGaugesServiceRequest73);
        org.junit.Assert.assertNotNull(strList74);
        org.junit.Assert.assertNull(strList75);
        org.junit.Assert.assertNotNull(strList76);
        org.junit.Assert.assertNotNull(openIdConnectRelyingPartyConfigurationBase77);
    }

    @Test
    public void test24361() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest48.test24361");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocation samplingLocation0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocation();
        java.lang.String str1 = samplingLocation0.Description;
        java.lang.String str2 = samplingLocation0.VerticalCollectionMethod;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocation samplingLocation3 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocation();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricConfiguration metricConfiguration4 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricConfiguration();
        java.lang.String str5 = metricConfiguration4.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty observedProperty6 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty();
        observedProperty6.CasNumber = "MinDuration";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricConfiguration metricConfiguration9 = metricConfiguration4.setObservedProperty(observedProperty6);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultType resultType10 = observedProperty6.ResultType;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservedProperty postObservedProperty11 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservedProperty();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UnitGroup unitGroup12 = postObservedProperty11.UnitGroup;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity quantity13 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Unit unit14 = null;
        quantity13.Unit = unit14;
        postObservedProperty11.LowerLimit = quantity13;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity quantity17 = postObservedProperty11.LowerLimit;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Unit unit18 = quantity17.Unit;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty observedProperty19 = observedProperty6.setUpperLimit(quantity17);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocation samplingLocation20 = samplingLocation3.setElevation(quantity17);
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment> domainObjectAttachmentList21 = samplingLocation20.getAttachments();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity postActivity22 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttribute[] extendedAttributeArray23 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttribute[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttribute> extendedAttributeList24 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttribute>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttribute>) extendedAttributeList24, extendedAttributeArray23);
        postActivity22.ExtendedAttributes = extendedAttributeList24;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocation samplingLocation27 = samplingLocation20.setExtendedAttributes((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttribute>) extendedAttributeList24);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocation samplingLocation28 = samplingLocation0.setExtendedAttributes((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttribute>) extendedAttributeList24);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Address address29 = samplingLocation28.getAddress();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(metricConfiguration9);
        org.junit.Assert.assertNull(resultType10);
        org.junit.Assert.assertNull(unitGroup12);
        org.junit.Assert.assertNotNull(quantity17);
        org.junit.Assert.assertNull(unit18);
        org.junit.Assert.assertNotNull(observedProperty19);
        org.junit.Assert.assertNotNull(samplingLocation20);
        org.junit.Assert.assertNull(domainObjectAttachmentList21);
        org.junit.Assert.assertNotNull(extendedAttributeArray23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(samplingLocation27);
        org.junit.Assert.assertNotNull(samplingLocation28);
        org.junit.Assert.assertNull(address29);
    }

    @Test
    public void test24362() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest48.test24362");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SearchResultObservation searchResultObservation0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SearchResultObservation();
        java.lang.Integer int1 = searchResultObservation0.getTotalCount();
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation> observationList2 = searchResultObservation0.getDomainObjects();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SearchResultObservation searchResultObservation4 = searchResultObservation0.setCursor("POST");
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation> observationList5 = searchResultObservation0.getDomainObjects();
        org.junit.Assert.assertNull(int1);
        org.junit.Assert.assertNull(observationList2);
        org.junit.Assert.assertNotNull(searchResultObservation4);
        org.junit.Assert.assertNull(observationList5);
    }

    @Test
    public void test24363() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest48.test24363");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLabAnalysisMethod postLabAnalysisMethod0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLabAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes1 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLabAnalysisMethod postLabAnalysisMethod2 = postLabAnalysisMethod0.setAuditAttributes(auditAttributes1);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty[] observedPropertyArray3 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty> observedPropertyList4 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty>();
        boolean boolean5 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty>) observedPropertyList4, observedPropertyArray3);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLabAnalysisMethod postLabAnalysisMethod6 = postLabAnalysisMethod2.setObservedProperties((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty>) observedPropertyList4);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes7 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLabAnalysisMethod postLabAnalysisMethod8 = postLabAnalysisMethod2.setAuditAttributes(auditAttributes7);
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty> observedPropertyList9 = postLabAnalysisMethod8.getObservedProperties();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLabAnalysisMethod postLabAnalysisMethod11 = postLabAnalysisMethod8.setMethodId("/AQUARIUS");
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty> observedPropertyList12 = postLabAnalysisMethod8.getObservedProperties();
        org.junit.Assert.assertNotNull(postLabAnalysisMethod2);
        org.junit.Assert.assertNotNull(observedPropertyArray3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(postLabAnalysisMethod6);
        org.junit.Assert.assertNotNull(postLabAnalysisMethod8);
        org.junit.Assert.assertNotNull(observedPropertyList9);
        org.junit.Assert.assertNotNull(postLabAnalysisMethod11);
        org.junit.Assert.assertNotNull(observedPropertyList12);
    }

    @Test
    public void test24364() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest48.test24364");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DeleteSpreadsheetTemplate deleteSpreadsheetTemplate0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DeleteSpreadsheetTemplate();
        java.lang.String str1 = deleteSpreadsheetTemplate0.Id;
        deleteSpreadsheetTemplate0.Id = "multipart/form-data; boundary=****44f0772e-c3ca-4316-8e2a-61ec8540d661****";
        deleteSpreadsheetTemplate0.Id = "multipart/form-data; boundary=****231224c4-98ce-4e30-bd65-1d25287c4abe****";
        java.lang.String str6 = deleteSpreadsheetTemplate0.getId();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "multipart/form-data; boundary=****231224c4-98ce-4e30-bd65-1d25287c4abe****" + "'", str6, "multipart/form-data; boundary=****231224c4-98ce-4e30-bd65-1d25287c4abe****");
    }

    @Test
    public void test24365() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest48.test24365");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutFieldVisit putFieldVisit0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutFieldVisit();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity[] plannedActivityArray1 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity> plannedActivityList2 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity>) plannedActivityList2, plannedActivityArray1);
        putFieldVisit0.PlannedActivities = plannedActivityList2;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment5 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment();
        java.lang.String str6 = domainObjectAttachment5.getId();
        java.lang.String str7 = domainObjectAttachment5.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Attachment attachment8 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment9 = domainObjectAttachment5.setAttachment(attachment8);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment10 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment();
        java.lang.String str11 = domainObjectAttachment10.getId();
        java.lang.String str12 = domainObjectAttachment10.getId();
        domainObjectAttachment10.Id = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment16 = domainObjectAttachment10.setId("hi!");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment17 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment();
        java.lang.String str18 = domainObjectAttachment17.getId();
        java.lang.String str19 = domainObjectAttachment17.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Attachment attachment20 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment21 = domainObjectAttachment17.setAttachment(attachment20);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment22 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment();
        java.lang.String str23 = domainObjectAttachment22.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment24 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment();
        java.lang.String str25 = domainObjectAttachment24.getId();
        java.lang.String str26 = domainObjectAttachment24.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Attachment attachment27 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment28 = domainObjectAttachment24.setAttachment(attachment27);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment29 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment();
        java.lang.String str30 = domainObjectAttachment29.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment[] domainObjectAttachmentArray31 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment[] { domainObjectAttachment5, domainObjectAttachment10, domainObjectAttachment17, domainObjectAttachment22, domainObjectAttachment24, domainObjectAttachment29 };
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment> domainObjectAttachmentList32 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment>();
        boolean boolean33 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment>) domainObjectAttachmentList32, domainObjectAttachmentArray31);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutFieldVisit putFieldVisit34 = putFieldVisit0.setAttachments((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment>) domainObjectAttachmentList32);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlanningStatusType planningStatusType35 = putFieldVisit34.PlanningStatus;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutFieldVisit putFieldVisit37 = putFieldVisit34.setId("-PT87591240H");
        java.lang.String str38 = putFieldVisit37.getId();
        org.junit.Assert.assertNotNull(plannedActivityArray1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(domainObjectAttachment9);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(domainObjectAttachment16);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertNotNull(domainObjectAttachment21);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertNotNull(domainObjectAttachment28);
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertNotNull(domainObjectAttachmentArray31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(putFieldVisit34);
        org.junit.Assert.assertNull(planningStatusType35);
        org.junit.Assert.assertNotNull(putFieldVisit37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "-PT87591240H" + "'", str38, "-PT87591240H");
    }

    @Test
    public void test24366() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest48.test24366");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSpecimen putSpecimen0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSpecimen();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSpecimen putSpecimen2 = putSpecimen0.setNumberOfRequestedObservations((java.lang.Integer) 4);
        java.lang.Object obj3 = putSpecimen2.getResponseType();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttributeDefinition extendedAttributeDefinition4 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttributeDefinition();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate5 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate7 = specimenTemplate5.setCustomId("hi!");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PreservativeType preservativeType8 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PreservativeType.SODIUM_AZIDE;
        specimenTemplate7.Preservative = preservativeType8;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails10 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails12 = labResultDetails10.setAnalysisComment("/AQUARIUS/Acquisition/v2");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes13 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails14 = labResultDetails12.setAuditAttributes(auditAttributes13);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate15 = specimenTemplate7.setAuditAttributes(auditAttributes13);
        extendedAttributeDefinition4.AuditAttributes = auditAttributes13;
        java.lang.String str17 = extendedAttributeDefinition4.CustomId;
        extendedAttributeDefinition4.Id = "multipart/form-data; boundary=****bbcf5f9e-6ccf-4b63-91ab-6e645caf02af****";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes20 = extendedAttributeDefinition4.getAuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSpecimen putSpecimen21 = putSpecimen2.setAuditAttributes(auditAttributes20);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroup analyticalGroup22 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroup();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem analyticalGroupItem23 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod24 = analyticalGroupItem23.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem analyticalGroupItem25 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod26 = analyticalGroupItem25.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod27 = analyticalGroupItem25.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem analyticalGroupItem28 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod29 = analyticalGroupItem28.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod30 = analyticalGroupItem28.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod31 = null;
        analyticalGroupItem28.AnalysisMethod = analysisMethod31;
        java.lang.String str33 = analyticalGroupItem28.getHoldingTime();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem analyticalGroupItem34 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod35 = analyticalGroupItem34.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod36 = analyticalGroupItem34.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem analyticalGroupItem37 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod38 = analyticalGroupItem37.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem analyticalGroupItem39 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod40 = analyticalGroupItem39.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod41 = analyticalGroupItem39.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod42 = null;
        analyticalGroupItem39.AnalysisMethod = analysisMethod42;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem[] analyticalGroupItemArray44 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem[] { analyticalGroupItem23, analyticalGroupItem25, analyticalGroupItem28, analyticalGroupItem34, analyticalGroupItem37, analyticalGroupItem39 };
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem> analyticalGroupItemList45 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem>) analyticalGroupItemList45, analyticalGroupItemArray44);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroup analyticalGroup47 = analyticalGroup22.setAnalyticalGroupItems((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem>) analyticalGroupItemList45);
        analyticalGroup47.Description = "/AQUARIUS/Provisioning/v1";
        analyticalGroup47.NumberOfObservedPropertiesInGroupItems = 1;
        java.lang.Integer int52 = analyticalGroup47.getNumberOfAnalysisMethodsInGroupItems();
        putSpecimen21.AnalyticalGroup = analyticalGroup47;
        org.junit.Assert.assertNotNull(putSpecimen2);
        org.junit.Assert.assertNotNull(obj3);
        org.junit.Assert.assertEquals(obj3.toString(), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$SpecimenWithObservations");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj3), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$SpecimenWithObservations");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj3), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$SpecimenWithObservations");
        org.junit.Assert.assertNotNull(specimenTemplate7);
        org.junit.Assert.assertTrue("'" + preservativeType8 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PreservativeType.SODIUM_AZIDE + "'", preservativeType8.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PreservativeType.SODIUM_AZIDE));
        org.junit.Assert.assertNotNull(labResultDetails12);
        org.junit.Assert.assertNotNull(labResultDetails14);
        org.junit.Assert.assertNotNull(specimenTemplate15);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertNotNull(auditAttributes20);
        org.junit.Assert.assertNotNull(putSpecimen21);
        org.junit.Assert.assertNull(analysisMethod24);
        org.junit.Assert.assertNull(analysisMethod26);
        org.junit.Assert.assertNull(analysisMethod27);
        org.junit.Assert.assertNull(analysisMethod29);
        org.junit.Assert.assertNull(analysisMethod30);
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertNull(analysisMethod35);
        org.junit.Assert.assertNull(analysisMethod36);
        org.junit.Assert.assertNull(analysisMethod38);
        org.junit.Assert.assertNull(analysisMethod40);
        org.junit.Assert.assertNull(analysisMethod41);
        org.junit.Assert.assertNotNull(analyticalGroupItemArray44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(analyticalGroup47);
        org.junit.Assert.assertNull(int52);
    }

    @Test
    public void test24367() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest48.test24367");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DeleteSamplingLocationGroup deleteSamplingLocationGroup0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DeleteSamplingLocationGroup();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DeleteSamplingLocationGroup deleteSamplingLocationGroup2 = deleteSamplingLocationGroup0.setId("-PT87591240H");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DeleteSamplingLocationGroup deleteSamplingLocationGroup4 = deleteSamplingLocationGroup0.setId("MaxInstant");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DeleteSamplingLocationGroup deleteSamplingLocationGroup6 = deleteSamplingLocationGroup0.setId("MaxDuration");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DeleteSamplingLocationGroup deleteSamplingLocationGroup8 = deleteSamplingLocationGroup6.setId("9999-12-31T23:59:59.9999999Z");
        java.lang.String str9 = deleteSamplingLocationGroup6.Id;
        java.lang.String str10 = deleteSamplingLocationGroup6.Id;
        java.lang.String str11 = deleteSamplingLocationGroup6.Id;
        org.junit.Assert.assertNotNull(deleteSamplingLocationGroup2);
        org.junit.Assert.assertNotNull(deleteSamplingLocationGroup4);
        org.junit.Assert.assertNotNull(deleteSamplingLocationGroup6);
        org.junit.Assert.assertNotNull(deleteSamplingLocationGroup8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "9999-12-31T23:59:59.9999999Z" + "'", str9, "9999-12-31T23:59:59.9999999Z");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "9999-12-31T23:59:59.9999999Z" + "'", str10, "9999-12-31T23:59:59.9999999Z");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "9999-12-31T23:59:59.9999999Z" + "'", str11, "9999-12-31T23:59:59.9999999Z");
    }

    @Test
    public void test24368() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest48.test24368");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Schedule schedule0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Schedule();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Schedule schedule2 = schedule0.setCustomId("");
        java.time.OffsetDateTime offsetDateTime3 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Schedule schedule4 = schedule0.setStartDate(offsetDateTime3);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.RecurrenceType recurrenceType5 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.RecurrenceType.MONTHLY;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Schedule schedule6 = schedule4.setRecurrenceType(recurrenceType5);
        java.lang.String str7 = schedule6.Id;
        java.lang.String str8 = schedule6.getCustomId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Schedule schedule10 = schedule6.setCustomId("http://MaxDurationhttp");
        org.junit.Assert.assertNotNull(schedule2);
        org.junit.Assert.assertNotNull(schedule4);
        org.junit.Assert.assertTrue("'" + recurrenceType5 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.RecurrenceType.MONTHLY + "'", recurrenceType5.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.RecurrenceType.MONTHLY));
        org.junit.Assert.assertNotNull(schedule6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(schedule10);
    }

    @Test
    public void test24369() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest48.test24369");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostImportLabReportData postImportLabReportData0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostImportLabReportData();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostImportLabReportData postImportLabReportData2 = postImportLabReportData0.setFileType("2021.4.62.0");
        java.lang.String str3 = postImportLabReportData2.getTimeZoneOffset();
        java.lang.Boolean boolean4 = postImportLabReportData2.CreateMissingObjects;
        org.junit.Assert.assertNotNull(postImportLabReportData2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(boolean4);
    }

    @Test
    public void test24370() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest48.test24370");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SearchResultMedium searchResultMedium0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SearchResultMedium();
        searchResultMedium0.Cursor = "";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SearchResultMedium searchResultMedium4 = searchResultMedium0.setTotalCount((java.lang.Integer) 4);
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Medium> mediumList5 = searchResultMedium4.getDomainObjects();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SearchResultMedium searchResultMedium7 = searchResultMedium4.setTotalCount((java.lang.Integer) 10);
        org.junit.Assert.assertNotNull(searchResultMedium4);
        org.junit.Assert.assertNull(mediumList5);
        org.junit.Assert.assertNotNull(searchResultMedium7);
    }

    @Test
    public void test24371() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest48.test24371");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostReflectedTimeSeries postReflectedTimeSeries0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostReflectedTimeSeries();
        postReflectedTimeSeries0.Parameter = "0001-01-01T00:00:00.000Z";
        java.lang.String str3 = postReflectedTimeSeries0.Description;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.InterpolationType interpolationType4 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.InterpolationType.PrecedingTotals;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostReflectedTimeSeries postReflectedTimeSeries5 = postReflectedTimeSeries0.setInterpolationType(interpolationType4);
        java.lang.String str6 = postReflectedTimeSeries0.getUnit();
        java.lang.String str7 = postReflectedTimeSeries0.getSubLocationIdentifier();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostReflectedTimeSeries postReflectedTimeSeries9 = postReflectedTimeSeries0.setLocationUniqueId("****ee0ec537-fde4-45ee-9c35-68c37cf65c1c****");
        java.time.Duration duration10 = postReflectedTimeSeries0.GapTolerance;
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertTrue("'" + interpolationType4 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.InterpolationType.PrecedingTotals + "'", interpolationType4.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.InterpolationType.PrecedingTotals));
        org.junit.Assert.assertNotNull(postReflectedTimeSeries5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(postReflectedTimeSeries9);
        org.junit.Assert.assertNull(duration10);
    }

    @Test
    public void test24372() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest48.test24372");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DeleteShippingContainer deleteShippingContainer0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DeleteShippingContainer();
        java.lang.String str1 = deleteShippingContainer0.getId();
        deleteShippingContainer0.Id = "MinInstant";
        java.lang.String str4 = deleteShippingContainer0.getId();
        java.lang.String str5 = deleteShippingContainer0.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DeleteShippingContainer deleteShippingContainer7 = deleteShippingContainer0.setId("/AQUARIUS/Acquisition/v2://9999-12-31T23:59:59.999Z");
        java.lang.String str8 = deleteShippingContainer7.getId();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "MinInstant" + "'", str4, "MinInstant");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "MinInstant" + "'", str5, "MinInstant");
        org.junit.Assert.assertNotNull(deleteShippingContainer7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "/AQUARIUS/Acquisition/v2://9999-12-31T23:59:59.999Z" + "'", str8, "/AQUARIUS/Acquisition/v2://9999-12-31T23:59:59.999Z");
    }

    @Test
    public void test24373() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest48.test24373");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity postActivity0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity();
        postActivity0.LoggerFileName = "hi!";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity plannedActivity3 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity postActivity4 = postActivity0.setPlannedActivity(plannedActivity3);
        java.time.OffsetDateTime offsetDateTime5 = null;
        postActivity4.StartTime = offsetDateTime5;
        org.junit.Assert.assertNotNull(postActivity4);
    }

    @Test
    public void test24374() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest48.test24374");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportSamplingLocations getExportSamplingLocations0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportSamplingLocations();
        java.util.List<java.lang.String> strList1 = getExportSamplingLocations0.getLocationGroupTypeIds();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse2 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant3 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse4 = locationDescriptionListServiceResponse2.setNextToken(instant3);
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescription> locationDescriptionList5 = locationDescriptionListServiceResponse4.LocationDescriptions;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingCurveListServiceRequest ratingCurveListServiceRequest6 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingCurveListServiceRequest();
        java.time.Instant instant7 = ratingCurveListServiceRequest6.QueryTo;
        java.lang.String str8 = ratingCurveListServiceRequest6.getRatingModelIdentifier();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse9 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary10 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary12 = dischargeSummary10.setPublish((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse13 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant14 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse15 = locationDescriptionListServiceResponse13.setNextToken(instant14);
        dischargeSummary10.MeasurementTime = instant14;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse17 = locationDescriptionListServiceResponse9.setNextToken(instant14);
        java.time.Instant instant18 = locationDescriptionListServiceResponse9.getNextToken();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest19 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ControlConditionActivity controlConditionActivity20 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ControlConditionActivity();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ControlCleanedType controlCleanedType21 = null;
        controlConditionActivity20.ControlCleaned = controlCleanedType21;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse23 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant24 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse25 = locationDescriptionListServiceResponse23.setNextToken(instant24);
        controlConditionActivity20.DateCleaned = instant24;
        timeAlignedDataServiceRequest19.QueryFrom = instant24;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse28 = locationDescriptionListServiceResponse9.setNextToken(instant24);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingCurveListServiceRequest ratingCurveListServiceRequest29 = ratingCurveListServiceRequest6.setQueryTo(instant24);
        java.time.Instant instant30 = ratingCurveListServiceRequest29.getQueryTo();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse31 = locationDescriptionListServiceResponse4.setNextToken(instant30);
        getExportSamplingLocations0.StartModificationTime = instant30;
        java.time.Instant instant33 = getExportSamplingLocations0.getStartModificationTime();
        java.lang.String str34 = getExportSamplingLocations0.getCustomId();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DownchainProcessorListByTimeSeriesServiceRequest downchainProcessorListByTimeSeriesServiceRequest35 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DownchainProcessorListByTimeSeriesServiceRequest();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesApprovalsTransactionListServiceRequest timeSeriesApprovalsTransactionListServiceRequest36 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesApprovalsTransactionListServiceRequest();
        java.lang.String str37 = timeSeriesApprovalsTransactionListServiceRequest36.getTimeSeriesUniqueId();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ControlConditionActivity controlConditionActivity38 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ControlConditionActivity();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ControlCleanedType controlCleanedType39 = null;
        controlConditionActivity38.ControlCleaned = controlCleanedType39;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse41 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant42 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse43 = locationDescriptionListServiceResponse41.setNextToken(instant42);
        controlConditionActivity38.DateCleaned = instant42;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesApprovalsTransactionListServiceRequest timeSeriesApprovalsTransactionListServiceRequest45 = timeSeriesApprovalsTransactionListServiceRequest36.setQueryTo(instant42);
        java.time.Instant instant46 = timeSeriesApprovalsTransactionListServiceRequest36.QueryTo;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDescription timeSeriesDescription47 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDescription();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest48 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest();
        java.lang.Object obj49 = timeAlignedDataServiceRequest48.getResponseType();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse50 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant51 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse52 = locationDescriptionListServiceResponse50.setNextToken(instant51);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest53 = timeAlignedDataServiceRequest48.setQueryFrom(instant51);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDescription timeSeriesDescription54 = timeSeriesDescription47.setRawStartTime(instant51);
        timeSeriesApprovalsTransactionListServiceRequest36.QueryTo = instant51;
        downchainProcessorListByTimeSeriesServiceRequest35.QueryFrom = instant51;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportSamplingLocations getExportSamplingLocations57 = getExportSamplingLocations0.setEndModificationTime(instant51);
        java.lang.String str58 = getExportSamplingLocations0.Sort;
        org.junit.Assert.assertNull(strList1);
        org.junit.Assert.assertNotNull(instant3);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse4);
        org.junit.Assert.assertNull(locationDescriptionList5);
        org.junit.Assert.assertNull(instant7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(dischargeSummary12);
        org.junit.Assert.assertNotNull(instant14);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse15);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse17);
        org.junit.Assert.assertNotNull(instant18);
        org.junit.Assert.assertNotNull(instant24);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse25);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse28);
        org.junit.Assert.assertNotNull(ratingCurveListServiceRequest29);
        org.junit.Assert.assertNotNull(instant30);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse31);
        org.junit.Assert.assertNotNull(instant33);
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertNotNull(instant42);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse43);
        org.junit.Assert.assertNotNull(timeSeriesApprovalsTransactionListServiceRequest45);
        org.junit.Assert.assertNotNull(instant46);
        org.junit.Assert.assertNotNull(obj49);
        org.junit.Assert.assertEquals(obj49.toString(), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj49), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj49), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertNotNull(instant51);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse52);
        org.junit.Assert.assertNotNull(timeAlignedDataServiceRequest53);
        org.junit.Assert.assertNotNull(timeSeriesDescription54);
        org.junit.Assert.assertNotNull(getExportSamplingLocations57);
        org.junit.Assert.assertNull(str58);
    }

    @Test
    public void test24375() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest48.test24375");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SearchResultFilter searchResultFilter0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SearchResultFilter();
        java.lang.String str1 = searchResultFilter0.getCursor();
        java.lang.Integer int2 = searchResultFilter0.getTotalCount();
        searchResultFilter0.Cursor = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSSSSSZZZZZ";
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(int2);
    }

    @Test
    public void test24376() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest48.test24376");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSchedule putSchedule0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSchedule();
        java.time.OffsetDateTime offsetDateTime1 = putSchedule0.StartDate;
        java.time.OffsetDateTime offsetDateTime2 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSchedule putSchedule3 = putSchedule0.setEndDate(offsetDateTime2);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationGroup samplingLocationGroup4 = putSchedule3.getSamplingLocationGroup();
        java.time.OffsetDateTime offsetDateTime5 = null;
        putSchedule3.EndDate = offsetDateTime5;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSchedule putSchedule8 = putSchedule3.setSamplingLocationGroupSelectionTypeRandomCount((java.lang.Integer) 100);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSchedule putSchedule9 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSchedule();
        java.time.OffsetDateTime offsetDateTime10 = putSchedule9.StartDate;
        java.time.OffsetDateTime offsetDateTime11 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSchedule putSchedule12 = putSchedule9.setEndDate(offsetDateTime11);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationGroup samplingLocationGroup13 = putSchedule12.getSamplingLocationGroup();
        java.time.OffsetDateTime offsetDateTime14 = null;
        putSchedule12.EndDate = offsetDateTime14;
        java.time.OffsetDateTime offsetDateTime16 = putSchedule12.getLastGenerationDate();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.RecurrenceDayMonthlyType recurrenceDayMonthlyType17 = putSchedule12.getRecurrenceDayMonthly();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSchedule putSchedule18 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSchedule();
        java.time.OffsetDateTime offsetDateTime19 = putSchedule18.StartDate;
        java.time.OffsetDateTime offsetDateTime20 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSchedule putSchedule21 = putSchedule18.setEndDate(offsetDateTime20);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes22 = putSchedule21.AuditAttributes;
        java.time.OffsetDateTime offsetDateTime23 = null;
        putSchedule21.LastGenerationDate = offsetDateTime23;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSchedule putSchedule25 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSchedule();
        java.lang.Integer int26 = putSchedule25.getSamplingLocationGroupSelectionTypeRandomCount();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.RecurrenceType recurrenceType27 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.RecurrenceType.BI_WEEKLY;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSchedule putSchedule28 = putSchedule25.setRecurrenceType(recurrenceType27);
        putSchedule21.RecurrenceType = recurrenceType27;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSchedule putSchedule30 = putSchedule12.setRecurrenceType(recurrenceType27);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSchedule putSchedule31 = putSchedule3.setRecurrenceType(recurrenceType27);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutAccessGroup putAccessGroup32 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutAccessGroup();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivity samplingPlanPlannedActivity33 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivity();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes34 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivity samplingPlanPlannedActivity35 = samplingPlanPlannedActivity33.setAuditAttributes(auditAttributes34);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes36 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes38 = auditAttributes36.setCreationUserProfileId("'.'SSSSSSS");
        samplingPlanPlannedActivity35.AuditAttributes = auditAttributes36;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes40 = samplingPlanPlannedActivity35.AuditAttributes;
        putAccessGroup32.AuditAttributes = auditAttributes40;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutAccessGroup putAccessGroup43 = putAccessGroup32.setName("MaxInstant");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFieldVisitActivityWithTemplate postFieldVisitActivityWithTemplate44 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFieldVisitActivityWithTemplate();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes45 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFieldVisitActivityWithTemplate postFieldVisitActivityWithTemplate46 = postFieldVisitActivityWithTemplate44.setAuditAttributes(auditAttributes45);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MediumType mediumType47 = null;
        postFieldVisitActivityWithTemplate46.Medium = mediumType47;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity postActivity49 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity();
        postActivity49.LoggerFileName = "hi!";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity postActivity53 = postActivity49.setCustomId("");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes54 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity postActivity55 = postActivity53.setAuditAttributes(auditAttributes54);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFieldVisitActivityWithTemplate postFieldVisitActivityWithTemplate56 = postFieldVisitActivityWithTemplate46.setAuditAttributes(auditAttributes54);
        putAccessGroup32.AuditAttributes = auditAttributes54;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSchedule putSchedule58 = putSchedule31.setAuditAttributes(auditAttributes54);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservedProperty postObservedProperty59 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservedProperty();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UnitGroup unitGroup60 = postObservedProperty59.UnitGroup;
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple> importHistoryEventSimpleList61 = postObservedProperty59.ImportHistoryEventSimples;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisType analysisType62 = postObservedProperty59.AnalysisType;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UnitGroup unitGroup63 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservedProperty postObservedProperty64 = postObservedProperty59.setUnitGroup(unitGroup63);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultType resultType65 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultType.TAXON;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservedProperty postObservedProperty66 = postObservedProperty59.setResultType(resultType65);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes67 = null;
        postObservedProperty66.AuditAttributes = auditAttributes67;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostSamplingLocationGroup postSamplingLocationGroup69 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostSamplingLocationGroup();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes70 = postSamplingLocationGroup69.getAuditAttributes();
        postSamplingLocationGroup69.Id = "POST";
        postSamplingLocationGroup69.Id = "hi!";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutAccessGroup putAccessGroup75 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutAccessGroup();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivity samplingPlanPlannedActivity76 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivity();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes77 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivity samplingPlanPlannedActivity78 = samplingPlanPlannedActivity76.setAuditAttributes(auditAttributes77);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes79 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes81 = auditAttributes79.setCreationUserProfileId("'.'SSSSSSS");
        samplingPlanPlannedActivity78.AuditAttributes = auditAttributes79;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes83 = samplingPlanPlannedActivity78.AuditAttributes;
        putAccessGroup75.AuditAttributes = auditAttributes83;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostSamplingLocationGroup postSamplingLocationGroup85 = postSamplingLocationGroup69.setAuditAttributes(auditAttributes83);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservedProperty postObservedProperty86 = postObservedProperty66.setAuditAttributes(auditAttributes83);
        putSchedule58.AuditAttributes = auditAttributes83;
        java.lang.String str88 = putSchedule58.CustomId;
        putSchedule58.SamplingLocationGroupSelectionTypeRandomCount = 5;
        org.junit.Assert.assertNull(offsetDateTime1);
        org.junit.Assert.assertNotNull(putSchedule3);
        org.junit.Assert.assertNull(samplingLocationGroup4);
        org.junit.Assert.assertNotNull(putSchedule8);
        org.junit.Assert.assertNull(offsetDateTime10);
        org.junit.Assert.assertNotNull(putSchedule12);
        org.junit.Assert.assertNull(samplingLocationGroup13);
        org.junit.Assert.assertNull(offsetDateTime16);
        org.junit.Assert.assertNull(recurrenceDayMonthlyType17);
        org.junit.Assert.assertNull(offsetDateTime19);
        org.junit.Assert.assertNotNull(putSchedule21);
        org.junit.Assert.assertNull(auditAttributes22);
        org.junit.Assert.assertNull(int26);
        org.junit.Assert.assertTrue("'" + recurrenceType27 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.RecurrenceType.BI_WEEKLY + "'", recurrenceType27.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.RecurrenceType.BI_WEEKLY));
        org.junit.Assert.assertNotNull(putSchedule28);
        org.junit.Assert.assertNotNull(putSchedule30);
        org.junit.Assert.assertNotNull(putSchedule31);
        org.junit.Assert.assertNotNull(samplingPlanPlannedActivity35);
        org.junit.Assert.assertNotNull(auditAttributes38);
        org.junit.Assert.assertNotNull(auditAttributes40);
        org.junit.Assert.assertNotNull(putAccessGroup43);
        org.junit.Assert.assertNotNull(postFieldVisitActivityWithTemplate46);
        org.junit.Assert.assertNotNull(postActivity53);
        org.junit.Assert.assertNotNull(postActivity55);
        org.junit.Assert.assertNotNull(postFieldVisitActivityWithTemplate56);
        org.junit.Assert.assertNotNull(putSchedule58);
        org.junit.Assert.assertNull(unitGroup60);
        org.junit.Assert.assertNull(importHistoryEventSimpleList61);
        org.junit.Assert.assertNull(analysisType62);
        org.junit.Assert.assertNotNull(postObservedProperty64);
        org.junit.Assert.assertTrue("'" + resultType65 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultType.TAXON + "'", resultType65.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultType.TAXON));
        org.junit.Assert.assertNotNull(postObservedProperty66);
        org.junit.Assert.assertNull(auditAttributes70);
        org.junit.Assert.assertNotNull(samplingPlanPlannedActivity78);
        org.junit.Assert.assertNotNull(auditAttributes81);
        org.junit.Assert.assertNotNull(auditAttributes83);
        org.junit.Assert.assertNotNull(postSamplingLocationGroup85);
        org.junit.Assert.assertNotNull(postObservedProperty86);
        org.junit.Assert.assertNull(str88);
    }

    @Test
    public void test24377() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest48.test24377");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportObservations getExportObservations0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportObservations();
        java.util.List<java.lang.String> strList1 = getExportObservations0.getLabReportIds();
        java.lang.String str2 = getExportObservations0.DepthUnitCustomId;
        java.util.List<java.lang.String> strList3 = getExportObservations0.getSearch();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetChartDataV2 getChartDataV2_4 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetChartDataV2();
        java.lang.String str5 = getChartDataV2_4.getActivityCustomId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetChartDataV2 getChartDataV2_7 = getChartDataV2_4.setFilterId("");
        java.util.List<java.lang.String> strList8 = getChartDataV2_4.getIds();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExtendedAttributeDropdownlistitems getExtendedAttributeDropdownlistitems9 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExtendedAttributeDropdownlistitems();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_10 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.util.List<java.lang.String> strList11 = getObservationsV2_10.SamplingContextTagIds;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_12 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray14 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList15 = new java.util.ArrayList<java.lang.String>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList15, strArray14);
        getObservationsV2_12.SpecimenIds = strList15;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags18 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray22 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList23 = new java.util.ArrayList<java.lang.String>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList23, strArray22);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags25 = putLocationTags18.setTagUniqueIds(strList23);
        getObservationsV2_12.QualityControlTypes = strList23;
        getObservationsV2_10.ResultGrades = strList23;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExtendedAttributeDropdownlistitems getExtendedAttributeDropdownlistitems28 = getExtendedAttributeDropdownlistitems9.setSearch((java.util.List<java.lang.String>) strList23);
        getChartDataV2_4.ObservedPropertyIds = strList23;
        getChartDataV2_4.SpecimenName = "MinDuration";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportObservations getExportObservations32 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportObservations();
        java.util.List<java.lang.String> strList33 = getExportObservations32.getLabReportIds();
        java.lang.String str34 = getExportObservations32.DepthUnitCustomId;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetActivityTemplates getActivityTemplates35 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetActivityTemplates();
        java.lang.Object obj36 = getActivityTemplates35.getResponseType();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_37 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray39 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList40 = new java.util.ArrayList<java.lang.String>();
        boolean boolean41 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList40, strArray39);
        getObservationsV2_37.SpecimenIds = strList40;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags43 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray47 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList48 = new java.util.ArrayList<java.lang.String>();
        boolean boolean49 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList48, strArray47);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags50 = putLocationTags43.setTagUniqueIds(strList48);
        getObservationsV2_37.QualityControlTypes = strList48;
        getActivityTemplates35.Type = strList48;
        getExportObservations32.AnalyticalGroupIds = strList48;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetChartDataV2 getChartDataV2_54 = getChartDataV2_4.setAnalysisMethodIds((java.util.List<java.lang.String>) strList48);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportObservations getExportObservations55 = getExportObservations0.setAnalyticalGroupIds((java.util.List<java.lang.String>) strList48);
        java.util.List<java.lang.String> strList56 = getExportObservations0.ObservedPropertyIds;
        java.util.List<java.lang.String> strList57 = getExportObservations0.ProjectIds;
        java.util.List<java.lang.String> strList58 = getExportObservations0.getSearch();
        java.lang.String str59 = getExportObservations0.getSpecimenName();
        org.junit.Assert.assertNull(strList1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(strList3);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(getChartDataV2_7);
        org.junit.Assert.assertNull(strList8);
        org.junit.Assert.assertNull(strList11);
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(putLocationTags25);
        org.junit.Assert.assertNotNull(getExtendedAttributeDropdownlistitems28);
        org.junit.Assert.assertNull(strList33);
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertNotNull(obj36);
        org.junit.Assert.assertEquals(obj36.toString(), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$SearchResultActivityTemplate");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj36), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$SearchResultActivityTemplate");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj36), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$SearchResultActivityTemplate");
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(putLocationTags50);
        org.junit.Assert.assertNotNull(getChartDataV2_54);
        org.junit.Assert.assertNotNull(getExportObservations55);
        org.junit.Assert.assertNull(strList56);
        org.junit.Assert.assertNull(strList57);
        org.junit.Assert.assertNull(strList58);
        org.junit.Assert.assertNull(str59);
    }

    @Test
    public void test24378() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest48.test24378");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.TimeSeries timeSeries0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.TimeSeries();
        java.lang.String str1 = timeSeries0.ComputationIdentifier;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeTransactionListServiceRequest metadataChangeTransactionListServiceRequest2 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeTransactionListServiceRequest();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostRecurringReport postRecurringReport3 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostRecurringReport();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary4 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        dischargeSummary4.Reviewer = "";
        java.time.Instant instant7 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        dischargeSummary4.MeasurementTime = instant7;
        postRecurringReport3.NextGenerationDate = instant7;
        java.time.Instant instant10 = postRecurringReport3.getNextGenerationDate();
        java.lang.String str11 = com.aquaticinformatics.aquarius.sdk.samples.serializers.InstantSerializer.format(instant10);
        metadataChangeTransactionListServiceRequest2.QueryFrom = instant10;
        java.time.Instant instant13 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MinValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeTransactionListServiceRequest metadataChangeTransactionListServiceRequest14 = metadataChangeTransactionListServiceRequest2.setQueryFrom(instant13);
        timeSeries0.LastModifiedTime = instant13;
        timeSeries0.Publish = false;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.StatisticalDateTimeOffset statisticalDateTimeOffset18 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.StatisticalDateTimeOffset();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostRecurringReport postRecurringReport19 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostRecurringReport();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary20 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        dischargeSummary20.Reviewer = "";
        java.time.Instant instant23 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        dischargeSummary20.MeasurementTime = instant23;
        postRecurringReport19.NextGenerationDate = instant23;
        java.time.Instant instant26 = postRecurringReport19.getNextGenerationDate();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.StatisticalDateTimeOffset statisticalDateTimeOffset27 = statisticalDateTimeOffset18.setDateTimeOffset(instant26);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDescription timeSeriesDescription28 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDescription();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest29 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest();
        java.lang.Object obj30 = timeAlignedDataServiceRequest29.getResponseType();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse31 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant32 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse33 = locationDescriptionListServiceResponse31.setNextToken(instant32);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest34 = timeAlignedDataServiceRequest29.setQueryFrom(instant32);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDescription timeSeriesDescription35 = timeSeriesDescription28.setRawStartTime(instant32);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.StatisticalDateTimeOffset statisticalDateTimeOffset36 = statisticalDateTimeOffset18.setDateTimeOffset(instant32);
        timeSeries0.LastModifiedTime = instant32;
        timeSeries0.ComputationIdentifier = "https";
        java.lang.Boolean boolean40 = timeSeries0.isPublish();
        java.lang.String str41 = timeSeries0.SubLocationIdentifier;
        timeSeries0.UtcOffset = "multipart/form-data; boundary=****bbcf5f9e-6ccf-4b63-91ab-6e645caf02af****";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.TimeSeries timeSeries45 = timeSeries0.setComment("/AQUARIUS");
        timeSeries45.Label = "'.'SSSSSSS://multipart/form-data; boundary=****e0afd3ef-ab93-4371-a368-4a6f5ef58c71****";
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(instant7);
        org.junit.Assert.assertNotNull(instant10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "9999-12-31T23:59:59.999Z" + "'", str11, "9999-12-31T23:59:59.999Z");
        org.junit.Assert.assertNotNull(instant13);
        org.junit.Assert.assertNotNull(metadataChangeTransactionListServiceRequest14);
        org.junit.Assert.assertNotNull(instant23);
        org.junit.Assert.assertNotNull(instant26);
        org.junit.Assert.assertNotNull(statisticalDateTimeOffset27);
        org.junit.Assert.assertNotNull(obj30);
        org.junit.Assert.assertEquals(obj30.toString(), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj30), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj30), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertNotNull(instant32);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse33);
        org.junit.Assert.assertNotNull(timeAlignedDataServiceRequest34);
        org.junit.Assert.assertNotNull(timeSeriesDescription35);
        org.junit.Assert.assertNotNull(statisticalDateTimeOffset36);
        org.junit.Assert.assertEquals("'" + boolean40 + "' != '" + false + "'", boolean40, false);
        org.junit.Assert.assertNull(str41);
        org.junit.Assert.assertNotNull(timeSeries45);
    }

    @Test
    public void test24379() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest48.test24379");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Reading reading0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Reading();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay1 = reading0.getValue();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ReadingType readingType2 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ReadingType.RoutineBefore;
        reading0.ReadingType = readingType2;
        java.time.Instant instant4 = reading0.Time;
        java.util.ArrayList<java.lang.String> strList5 = reading0.ReadingQualifiers;
        java.lang.String str6 = reading0.SensorUniqueId;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Reading reading8 = reading0.setManufacturer("/AQUARIUS");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Reading reading10 = reading0.setModel("MaxInstant");
        reading0.MonitoringMethod = "multipart/form-data; boundary=****e0afd3ef-ab93-4371-a368-4a6f5ef58c71****";
        org.junit.Assert.assertNull(doubleWithDisplay1);
        org.junit.Assert.assertTrue("'" + readingType2 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ReadingType.RoutineBefore + "'", readingType2.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ReadingType.RoutineBefore));
        org.junit.Assert.assertNull(instant4);
        org.junit.Assert.assertNull(strList5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNotNull(reading8);
        org.junit.Assert.assertNotNull(reading10);
    }

    @Test
    public void test24380() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest48.test24380");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutObservationV2 putObservationV2_0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutObservationV2();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty observedProperty1 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutObservationV2 putObservationV2_2 = putObservationV2_0.setObservedProperty(observedProperty1);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.NumericResult numericResult3 = putObservationV2_0.getNumericResult();
        java.lang.String str4 = putObservationV2_0.MediumSubdivision;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation5 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedFieldResult plannedFieldResult6 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation7 = observation5.setPlannedFieldResult(plannedFieldResult6);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabInstruction labInstruction8 = null;
        observation7.LabInstruction = labInstruction8;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.CollectionMethod collectionMethod10 = observation7.CollectionMethod;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.NullMeasureQualifier nullMeasureQualifier11 = null;
        observation7.NullMeasureQualifier = nullMeasureQualifier11;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DataClassificationType dataClassificationType13 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DataClassificationType.SURROGATE_RESULT;
        observation7.DataClassification = dataClassificationType13;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutObservationV2 putObservationV2_15 = putObservationV2_0.setDataClassification(dataClassificationType13);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabInstruction labInstruction16 = putObservationV2_0.LabInstruction;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemTaxon importItemTaxon17 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemTaxon();
        java.util.List<java.lang.String> strList18 = importItemTaxon17.getWarningMessages();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Taxon taxon19 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemTaxon importItemTaxon20 = importItemTaxon17.setItem(taxon19);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostCalculatedDerivedTimeSeries postCalculatedDerivedTimeSeries21 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostCalculatedDerivedTimeSeries();
        java.lang.String str22 = postCalculatedDerivedTimeSeries21.LocationUniqueId;
        java.util.List<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeValue> extendedAttributeValueList23 = postCalculatedDerivedTimeSeries21.getExtendedAttributeValues();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemTaxon importItemTaxon24 = importItemTaxon20.setErrors((java.lang.Object) postCalculatedDerivedTimeSeries21);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObject importItemObject25 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObject();
        java.util.List<java.lang.String> strList26 = importItemObject25.getWarningMessages();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportChangeItem[] importChangeItemArray27 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportChangeItem[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportChangeItem> importChangeItemList28 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportChangeItem>();
        boolean boolean29 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportChangeItem>) importChangeItemList28, importChangeItemArray27);
        importItemObject25.ItemComparison = importChangeItemList28;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags31 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray35 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList36 = new java.util.ArrayList<java.lang.String>();
        boolean boolean37 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList36, strArray35);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags38 = putLocationTags31.setTagUniqueIds(strList36);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObject importItemObject39 = importItemObject25.setExistingItem((java.lang.Object) putLocationTags31);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.OpenIdConnectUser openIdConnectUser40 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.OpenIdConnectUser();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.OpenIdConnectUser openIdConnectUser42 = openIdConnectUser40.setIdentifier("");
        java.lang.Boolean boolean43 = openIdConnectUser42.CanConfigureSystem;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObject importItemObject44 = importItemObject25.setErrors((java.lang.Object) openIdConnectUser42);
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportChangeItem> importChangeItemList45 = importItemObject44.ItemComparison;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemTaxon importItemTaxon46 = importItemTaxon24.setItemComparison(importChangeItemList45);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemTaxon importItemTaxon47 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemTaxon();
        java.util.List<java.lang.String> strList48 = importItemTaxon47.getWarningMessages();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Taxon taxon49 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemTaxon importItemTaxon50 = importItemTaxon47.setItem(taxon49);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostCalculatedDerivedTimeSeries postCalculatedDerivedTimeSeries51 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostCalculatedDerivedTimeSeries();
        java.lang.String str52 = postCalculatedDerivedTimeSeries51.LocationUniqueId;
        java.util.List<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeValue> extendedAttributeValueList53 = postCalculatedDerivedTimeSeries51.getExtendedAttributeValues();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemTaxon importItemTaxon54 = importItemTaxon50.setErrors((java.lang.Object) postCalculatedDerivedTimeSeries51);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Taxon taxon55 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Taxon();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemTaxon importItemTaxon56 = importItemTaxon50.setExistingItem(taxon55);
        importItemTaxon24.Item = taxon55;
        taxon55.ItisTsn = "yyyy'-'MM'-'dd'T'HH':'mm':'ss";
        java.lang.String str60 = taxon55.getItisUrl();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Taxon taxon62 = taxon55.setSource("hi!");
        java.lang.String str63 = taxon55.getScientificName();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutObservationV2 putObservationV2_64 = putObservationV2_0.setRelatedTaxon(taxon55);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocation samplingLocation65 = putObservationV2_64.SamplingLocation;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.CategoricalResult categoricalResult66 = putObservationV2_64.getCategoricalResult();
        org.junit.Assert.assertNotNull(putObservationV2_2);
        org.junit.Assert.assertNull(numericResult3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNotNull(observation7);
        org.junit.Assert.assertNull(collectionMethod10);
        org.junit.Assert.assertTrue("'" + dataClassificationType13 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DataClassificationType.SURROGATE_RESULT + "'", dataClassificationType13.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DataClassificationType.SURROGATE_RESULT));
        org.junit.Assert.assertNotNull(putObservationV2_15);
        org.junit.Assert.assertNull(labInstruction16);
        org.junit.Assert.assertNull(strList18);
        org.junit.Assert.assertNotNull(importItemTaxon20);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertNull(extendedAttributeValueList23);
        org.junit.Assert.assertNotNull(importItemTaxon24);
        org.junit.Assert.assertNull(strList26);
        org.junit.Assert.assertNotNull(importChangeItemArray27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(putLocationTags38);
        org.junit.Assert.assertNotNull(importItemObject39);
        org.junit.Assert.assertNotNull(openIdConnectUser42);
        org.junit.Assert.assertNull(boolean43);
        org.junit.Assert.assertNotNull(importItemObject44);
        org.junit.Assert.assertNotNull(importChangeItemList45);
        org.junit.Assert.assertNotNull(importItemTaxon46);
        org.junit.Assert.assertNull(strList48);
        org.junit.Assert.assertNotNull(importItemTaxon50);
        org.junit.Assert.assertNull(str52);
        org.junit.Assert.assertNull(extendedAttributeValueList53);
        org.junit.Assert.assertNotNull(importItemTaxon54);
        org.junit.Assert.assertNotNull(importItemTaxon56);
        org.junit.Assert.assertNull(str60);
        org.junit.Assert.assertNotNull(taxon62);
        org.junit.Assert.assertNull(str63);
        org.junit.Assert.assertNotNull(putObservationV2_64);
        org.junit.Assert.assertNull(samplingLocation65);
        org.junit.Assert.assertNull(categoricalResult66);
    }

    @Test
    public void test24381() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest48.test24381");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemSamplingLocation importItemSamplingLocation0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemSamplingLocation();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemSamplingLocation importItemSamplingLocation2 = importItemSamplingLocation0.setInput("yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItem importItem3 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_4 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray6 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList7 = new java.util.ArrayList<java.lang.String>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList7, strArray6);
        getObservationsV2_4.SpecimenIds = strList7;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags10 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray14 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList15 = new java.util.ArrayList<java.lang.String>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList15, strArray14);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags17 = putLocationTags10.setTagUniqueIds(strList15);
        getObservationsV2_4.QualityControlTypes = strList15;
        java.util.List<java.lang.String> strList19 = getObservationsV2_4.getLabReportIds();
        importItem3.Errors = getObservationsV2_4;
        java.lang.Object obj21 = importItem3.getExistingItem();
        importItem3.Input = "hi!";
        java.lang.Object obj24 = importItem3.getItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemStatusType importItemStatusType25 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemStatusType.SKIPPED;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItem importItem26 = importItem3.setStatus(importItemStatusType25);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemSamplingLocation importItemSamplingLocation27 = importItemSamplingLocation2.setStatus(importItemStatusType25);
        importItemSamplingLocation2.RowId = "multipart/form-data; boundary=****bbcf5f9e-6ccf-4b63-91ab-6e645caf02af****";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.FieldTripBasic fieldTripBasic30 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.FieldTripBasic();
        java.lang.String str31 = fieldTripBasic30.getId();
        importItemSamplingLocation2.Errors = fieldTripBasic30;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostExtendedAttribute postExtendedAttribute33 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostExtendedAttribute();
        java.lang.String str34 = postExtendedAttribute33.CustomId;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DataType dataType35 = postExtendedAttribute33.DataType;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivity samplingPlanPlannedActivity36 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivity();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes37 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivity samplingPlanPlannedActivity38 = samplingPlanPlannedActivity36.setAuditAttributes(auditAttributes37);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes39 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes41 = auditAttributes39.setCreationUserProfileId("'.'SSSSSSS");
        samplingPlanPlannedActivity38.AuditAttributes = auditAttributes39;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes43 = samplingPlanPlannedActivity38.AuditAttributes;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostExtendedAttribute postExtendedAttribute44 = postExtendedAttribute33.setAuditAttributes(auditAttributes43);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.FieldTripBasic fieldTripBasic45 = fieldTripBasic30.setAuditAttributes(auditAttributes43);
        fieldTripBasic30.Notes = "/AQUARIUS/Acquisition/v2";
        fieldTripBasic30.Notes = "hi!";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.FieldTripBasic fieldTripBasic51 = fieldTripBasic30.setId("multipart/form-data; boundary=****e48381b1-dcc5-4af7-8a12-f30d1690cec2****");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutUnit putUnit52 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutUnit();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutUnit putUnit54 = putUnit52.setName("MinInstant");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutUnit putUnit56 = putUnit52.setId("/AQUARIUS");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UnitGroup unitGroup57 = putUnit52.UnitGroup;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutUnit putUnit59 = putUnit52.setCustomId("9999-12-31T23:59:59.9999999Z://2021.4.62.0");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostExtendedAttribute postExtendedAttribute60 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostExtendedAttribute();
        java.lang.String str61 = postExtendedAttribute60.CustomId;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DataType dataType62 = postExtendedAttribute60.DataType;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivity samplingPlanPlannedActivity63 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivity();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes64 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivity samplingPlanPlannedActivity65 = samplingPlanPlannedActivity63.setAuditAttributes(auditAttributes64);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes66 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes68 = auditAttributes66.setCreationUserProfileId("'.'SSSSSSS");
        samplingPlanPlannedActivity65.AuditAttributes = auditAttributes66;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes70 = samplingPlanPlannedActivity65.AuditAttributes;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostExtendedAttribute postExtendedAttribute71 = postExtendedAttribute60.setAuditAttributes(auditAttributes70);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutUnit putUnit72 = putUnit52.setAuditAttributes(auditAttributes70);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.FieldTripBasic fieldTripBasic73 = fieldTripBasic30.setAuditAttributes(auditAttributes70);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.FieldTripBasic fieldTripBasic75 = fieldTripBasic73.setNotes("yyyy'-'MM'-'dd'T'HH':'mm':'ss");
        org.junit.Assert.assertNotNull(importItemSamplingLocation2);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(putLocationTags17);
        org.junit.Assert.assertNull(strList19);
        org.junit.Assert.assertNull(obj21);
        org.junit.Assert.assertNull(obj24);
        org.junit.Assert.assertTrue("'" + importItemStatusType25 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemStatusType.SKIPPED + "'", importItemStatusType25.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemStatusType.SKIPPED));
        org.junit.Assert.assertNotNull(importItem26);
        org.junit.Assert.assertNotNull(importItemSamplingLocation27);
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertNull(dataType35);
        org.junit.Assert.assertNotNull(samplingPlanPlannedActivity38);
        org.junit.Assert.assertNotNull(auditAttributes41);
        org.junit.Assert.assertNotNull(auditAttributes43);
        org.junit.Assert.assertNotNull(postExtendedAttribute44);
        org.junit.Assert.assertNotNull(fieldTripBasic45);
        org.junit.Assert.assertNotNull(fieldTripBasic51);
        org.junit.Assert.assertNotNull(putUnit54);
        org.junit.Assert.assertNotNull(putUnit56);
        org.junit.Assert.assertNull(unitGroup57);
        org.junit.Assert.assertNotNull(putUnit59);
        org.junit.Assert.assertNull(str61);
        org.junit.Assert.assertNull(dataType62);
        org.junit.Assert.assertNotNull(samplingPlanPlannedActivity65);
        org.junit.Assert.assertNotNull(auditAttributes68);
        org.junit.Assert.assertNotNull(auditAttributes70);
        org.junit.Assert.assertNotNull(postExtendedAttribute71);
        org.junit.Assert.assertNotNull(putUnit72);
        org.junit.Assert.assertNotNull(fieldTripBasic73);
        org.junit.Assert.assertNotNull(fieldTripBasic75);
    }

    @Test
    public void test24382() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest48.test24382");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.PostReportResponse postReportResponse0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.PostReportResponse();
        postReportResponse0.ReportUniqueId = "/AQUARIUS/Acquisition/v2://9999-12-31T23:59:59.999Z";
        java.lang.String str3 = postReportResponse0.ReportUniqueId;
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "/AQUARIUS/Acquisition/v2://9999-12-31T23:59:59.999Z" + "'", str3, "/AQUARIUS/Acquisition/v2://9999-12-31T23:59:59.999Z");
    }

    @Test
    public void test24383() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest48.test24383");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetDetectioncondition getDetectioncondition0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetDetectioncondition();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetDetectioncondition getDetectioncondition2 = getDetectioncondition0.setId("/AQUARIUS/Publish/v2");
        java.lang.Object obj3 = getDetectioncondition2.getResponseType();
        org.junit.Assert.assertNotNull(getDetectioncondition2);
        org.junit.Assert.assertNotNull(obj3);
        org.junit.Assert.assertEquals(obj3.toString(), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$ResultDetectionCondition");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj3), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$ResultDetectionCondition");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj3), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$ResultDetectionCondition");
    }

    @Test
    public void test24384() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest48.test24384");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.GetFieldVisitReadingsByLocationServiceRequest getFieldVisitReadingsByLocationServiceRequest0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.GetFieldVisitReadingsByLocationServiceRequest();
        getFieldVisitReadingsByLocationServiceRequest0.ApplyRounding = false;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_3 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray5 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList6 = new java.util.ArrayList<java.lang.String>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList6, strArray5);
        getObservationsV2_3.SpecimenIds = strList6;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags9 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray13 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList14 = new java.util.ArrayList<java.lang.String>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList14, strArray13);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags16 = putLocationTags9.setTagUniqueIds(strList14);
        getObservationsV2_3.QualityControlTypes = strList14;
        java.util.List<java.lang.String> strList18 = getObservationsV2_3.getAnalyticalGroupIds();
        java.util.List<java.lang.String> strList19 = getObservationsV2_3.DataClassifications;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.FieldResultType fieldResultType20 = getObservationsV2_3.FieldResultType;
        java.time.Instant instant21 = getObservationsV2_3.getEndObservedTime();
        java.lang.String str22 = getObservationsV2_3.DepthUnitCustomId;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags23 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray27 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList28 = new java.util.ArrayList<java.lang.String>();
        boolean boolean29 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList28, strArray27);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags30 = putLocationTags23.setTagUniqueIds(strList28);
        java.util.ArrayList<java.lang.String> strList31 = putLocationTags30.TagUniqueIds;
        getObservationsV2_3.ProjectIds = strList31;
        getFieldVisitReadingsByLocationServiceRequest0.Parameters = strList31;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.GetFieldVisitReadingsByLocationServiceRequest getFieldVisitReadingsByLocationServiceRequest35 = getFieldVisitReadingsByLocationServiceRequest0.setLocationUniqueId("multipart/form-data; boundary=****895246ac-50fd-4284-9cd4-5cdd869d7100****");
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(putLocationTags16);
        org.junit.Assert.assertNull(strList18);
        org.junit.Assert.assertNull(strList19);
        org.junit.Assert.assertNull(fieldResultType20);
        org.junit.Assert.assertNull(instant21);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(putLocationTags30);
        org.junit.Assert.assertNotNull(strList31);
        org.junit.Assert.assertNotNull(getFieldVisitReadingsByLocationServiceRequest35);
    }

    @Test
    public void test24385() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest48.test24385");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostStatisticalDerivedTimeSeries postStatisticalDerivedTimeSeries0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostStatisticalDerivedTimeSeries();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostStatisticalDerivedTimeSeries postStatisticalDerivedTimeSeries2 = postStatisticalDerivedTimeSeries0.setComment("'.'SSSSSSS");
        java.lang.String str3 = postStatisticalDerivedTimeSeries0.getParameter();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostStatisticalDerivedTimeSeries postStatisticalDerivedTimeSeries5 = postStatisticalDerivedTimeSeries0.setComputationPeriodIdentifier("/AQUARIUS/Provisioning/v1");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.NewValueLocationType newValueLocationType6 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.NewValueLocationType.Unknown;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostStatisticalDerivedTimeSeries postStatisticalDerivedTimeSeries7 = postStatisticalDerivedTimeSeries0.setNewValueLocation(newValueLocationType6);
        java.lang.Integer int8 = postStatisticalDerivedTimeSeries7.ObservationOffsetInMinutes;
        postStatisticalDerivedTimeSeries7.CoverageMinimumPercentage = (-1.0d);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostStatisticalDerivedTimeSeries postStatisticalDerivedTimeSeries12 = postStatisticalDerivedTimeSeries7.setDescription("/AQUARIUS/Provisioning/v1");
        java.util.List<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeValue> extendedAttributeValueList13 = postStatisticalDerivedTimeSeries12.getExtendedAttributeValues();
        org.junit.Assert.assertNotNull(postStatisticalDerivedTimeSeries2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(postStatisticalDerivedTimeSeries5);
        org.junit.Assert.assertTrue("'" + newValueLocationType6 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.NewValueLocationType.Unknown + "'", newValueLocationType6.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.NewValueLocationType.Unknown));
        org.junit.Assert.assertNotNull(postStatisticalDerivedTimeSeries7);
        org.junit.Assert.assertNull(int8);
        org.junit.Assert.assertNotNull(postStatisticalDerivedTimeSeries12);
        org.junit.Assert.assertNull(extendedAttributeValueList13);
    }

    @Test
    public void test24386() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest48.test24386");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostCredentialsUser postCredentialsUser0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostCredentialsUser();
        java.lang.String str1 = postCredentialsUser0.Password;
        java.lang.String str2 = postCredentialsUser0.Password;
        java.lang.Object obj3 = postCredentialsUser0.getResponseType();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.UserBase userBase5 = postCredentialsUser0.setActive((java.lang.Boolean) true);
        postCredentialsUser0.Password = "-PT87591240H";
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNotNull(obj3);
        org.junit.Assert.assertEquals(obj3.toString(), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning$User");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj3), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning$User");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj3), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning$User");
        org.junit.Assert.assertNotNull(userBase5);
    }

    @Test
    public void test24387() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest48.test24387");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.User user0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.User();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostUser postUser1 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostUser();
        java.lang.String str2 = postUser1.Id;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostUser postUser4 = postUser1.setCustomId("'.'SSSSSSS");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutUserV2 putUserV2_5 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutUserV2();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UserType userType6 = putUserV2_5.UserType;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetActivities getActivities7 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetActivities();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse8 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary9 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary11 = dischargeSummary9.setPublish((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse12 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant13 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse14 = locationDescriptionListServiceResponse12.setNextToken(instant13);
        dischargeSummary9.MeasurementTime = instant13;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse16 = locationDescriptionListServiceResponse8.setNextToken(instant13);
        java.time.Instant instant17 = locationDescriptionListServiceResponse8.getNextToken();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetActivities getActivities18 = getActivities7.setToStartTime(instant17);
        java.lang.String str19 = getActivities18.getSort();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_20 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.util.List<java.lang.String> strList21 = getObservationsV2_20.SamplingContextTagIds;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_22 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray24 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList25 = new java.util.ArrayList<java.lang.String>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList25, strArray24);
        getObservationsV2_22.SpecimenIds = strList25;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags28 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray32 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList33 = new java.util.ArrayList<java.lang.String>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList33, strArray32);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags35 = putLocationTags28.setTagUniqueIds(strList33);
        getObservationsV2_22.QualityControlTypes = strList33;
        getObservationsV2_20.ResultGrades = strList33;
        getActivities18.Media = strList33;
        putUserV2_5.AccessGroups = strList33;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UserProfile userProfile40 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutUserV2 putUserV2_41 = putUserV2_5.setUserProfile(userProfile40);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UserType userType42 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UserType.INTERNAL;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutUserV2 putUserV2_43 = putUserV2_5.setUserType(userType42);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostUser postUser44 = postUser4.setUserType(userType42);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UserType userType45 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UserType.SYSTEM;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostUser postUser46 = postUser44.setUserType(userType45);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.User user47 = user0.setUserType(userType45);
        java.lang.String str48 = user0.getEmail();
        java.util.List<java.lang.String> strList49 = user0.AccessGroups;
        java.lang.String str50 = user0.getId();
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNotNull(postUser4);
        org.junit.Assert.assertNull(userType6);
        org.junit.Assert.assertNotNull(dischargeSummary11);
        org.junit.Assert.assertNotNull(instant13);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse14);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse16);
        org.junit.Assert.assertNotNull(instant17);
        org.junit.Assert.assertNotNull(getActivities18);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertNull(strList21);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(putLocationTags35);
        org.junit.Assert.assertNotNull(putUserV2_41);
        org.junit.Assert.assertTrue("'" + userType42 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UserType.INTERNAL + "'", userType42.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UserType.INTERNAL));
        org.junit.Assert.assertNotNull(putUserV2_43);
        org.junit.Assert.assertNotNull(postUser44);
        org.junit.Assert.assertTrue("'" + userType45 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UserType.SYSTEM + "'", userType45.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UserType.SYSTEM));
        org.junit.Assert.assertNotNull(postUser46);
        org.junit.Assert.assertNotNull(user47);
        org.junit.Assert.assertNull(str48);
        org.junit.Assert.assertNull(strList49);
        org.junit.Assert.assertNull(str50);
    }

    @Test
    public void test24388() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest48.test24388");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutAnalyticalGroup putAnalyticalGroup0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutAnalyticalGroup();
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem> analyticalGroupItemList1 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutAnalyticalGroup putAnalyticalGroup2 = putAnalyticalGroup0.setAnalyticalGroupItems(analyticalGroupItemList1);
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem> analyticalGroupItemList3 = putAnalyticalGroup2.getAnalyticalGroupItems();
        org.junit.Assert.assertNotNull(putAnalyticalGroup2);
        org.junit.Assert.assertNull(analyticalGroupItemList3);
    }

    @Test
    public void test24389() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest48.test24389");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.FixedDropDownListItem fixedDropDownListItem0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.FixedDropDownListItem();
        java.lang.String str1 = fixedDropDownListItem0.getDropDownListDisplayName();
        java.lang.String str2 = fixedDropDownListItem0.DisplayName;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.FixedDropDownListItem fixedDropDownListItem4 = fixedDropDownListItem0.setDropDownListDisplayName("multipart/form-data; boundary=****59879c02-0839-4b96-bc41-a13ebb706be4****");
        java.lang.String str5 = fixedDropDownListItem4.getDropDownListDisplayName();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNotNull(fixedDropDownListItem4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "multipart/form-data; boundary=****59879c02-0839-4b96-bc41-a13ebb706be4****" + "'", str5, "multipart/form-data; boundary=****59879c02-0839-4b96-bc41-a13ebb706be4****");
    }

    @Test
    public void test24390() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest48.test24390");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostSchedule postSchedule0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostSchedule();
        postSchedule0.Id = "0001-01-01T00:00:00.000Z";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Schedule schedule3 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Schedule();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Schedule schedule5 = schedule3.setCustomId("");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SchedulePlannedActivity[] schedulePlannedActivityArray6 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SchedulePlannedActivity[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SchedulePlannedActivity> schedulePlannedActivityList7 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SchedulePlannedActivity>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SchedulePlannedActivity>) schedulePlannedActivityList7, schedulePlannedActivityArray6);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Schedule schedule9 = schedule5.setSchedulePlannedActivities((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SchedulePlannedActivity>) schedulePlannedActivityList7);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostSchedule postSchedule10 = postSchedule0.setSchedulePlannedActivities((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SchedulePlannedActivity>) schedulePlannedActivityList7);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.RecurrenceDayMonthlyType recurrenceDayMonthlyType11 = postSchedule0.RecurrenceDayMonthly;
        java.time.OffsetDateTime offsetDateTime12 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostSchedule postSchedule13 = postSchedule0.setEndDate(offsetDateTime12);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.RecurrenceDayWeeklyType recurrenceDayWeeklyType14 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.RecurrenceDayWeeklyType.FRIDAY;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostSchedule postSchedule15 = postSchedule0.setRecurrenceDayWeekly(recurrenceDayWeeklyType14);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationGroup samplingLocationGroup16 = postSchedule0.SamplingLocationGroup;
        org.junit.Assert.assertNotNull(schedule5);
        org.junit.Assert.assertNotNull(schedulePlannedActivityArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(schedule9);
        org.junit.Assert.assertNotNull(postSchedule10);
        org.junit.Assert.assertNull(recurrenceDayMonthlyType11);
        org.junit.Assert.assertNotNull(postSchedule13);
        org.junit.Assert.assertTrue("'" + recurrenceDayWeeklyType14 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.RecurrenceDayWeeklyType.FRIDAY + "'", recurrenceDayWeeklyType14.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.RecurrenceDayWeeklyType.FRIDAY));
        org.junit.Assert.assertNotNull(postSchedule15);
        org.junit.Assert.assertNull(samplingLocationGroup16);
    }

    @Test
    public void test24391() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest48.test24391");
        com.aquaticinformatics.aquarius.sdk.helpers.MultipartBuilder multipartBuilder0 = new com.aquaticinformatics.aquarius.sdk.helpers.MultipartBuilder();
        byte[] byteArray1 = multipartBuilder0.toByteArray();
        java.lang.String str2 = multipartBuilder0.getContentType();
        byte[] byteArray3 = multipartBuilder0.toByteArray();
        java.lang.String str4 = multipartBuilder0.getContentType();
        java.lang.String str5 = multipartBuilder0.getContentType();
        java.lang.String str6 = multipartBuilder0.getContentType();
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[]");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "multipart/form-data; boundary=****46b5d5e5-73d1-43c8-8704-4a7bbf2d8314****" + "'", str2, "multipart/form-data; boundary=****46b5d5e5-73d1-43c8-8704-4a7bbf2d8314****");
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[]");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "multipart/form-data; boundary=****46b5d5e5-73d1-43c8-8704-4a7bbf2d8314****" + "'", str4, "multipart/form-data; boundary=****46b5d5e5-73d1-43c8-8704-4a7bbf2d8314****");
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "multipart/form-data; boundary=****46b5d5e5-73d1-43c8-8704-4a7bbf2d8314****" + "'", str5, "multipart/form-data; boundary=****46b5d5e5-73d1-43c8-8704-4a7bbf2d8314****");
// flaky:         org.junit.Assert.assertEquals("'" + str6 + "' != '" + "multipart/form-data; boundary=****46b5d5e5-73d1-43c8-8704-4a7bbf2d8314****" + "'", str6, "multipart/form-data; boundary=****46b5d5e5-73d1-43c8-8704-4a7bbf2d8314****");
    }

    @Test
    public void test24392() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest48.test24392");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportError importError0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportError();
        importError0.ErrorMessage = "";
        importError0.ErrorFieldValue = "multipart/form-data; boundary=****bbcf5f9e-6ccf-4b63-91ab-6e645caf02af****";
        java.lang.String str5 = importError0.ErrorCode;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportError importError7 = importError0.setErrorCode("multipart/form-data; boundary=****bbcf5f9e-6ccf-4b63-91ab-6e645caf02af****");
        java.lang.String str8 = importError7.ErrorMessage;
        java.lang.String str9 = importError7.getErrorCode();
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(importError7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "multipart/form-data; boundary=****bbcf5f9e-6ccf-4b63-91ab-6e645caf02af****" + "'", str9, "multipart/form-data; boundary=****bbcf5f9e-6ccf-4b63-91ab-6e645caf02af****");
    }

    @Test
    public void test24393() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest48.test24393");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String str1 = getObservationsV2_0.getCustomId();
        java.util.List<java.lang.String> strList2 = getObservationsV2_0.getActivityTypes();
        java.util.List<java.lang.String> strList3 = getObservationsV2_0.getSamplingLocationIds();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationType putLocationType4 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationType();
        java.lang.String str5 = putLocationType4.Description;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_6 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray9 = new java.lang.String[] { "", "" };
        java.util.ArrayList<java.lang.String> strList10 = new java.util.ArrayList<java.lang.String>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList10, strArray9);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_12 = getObservationsV2_6.setDataClassifications((java.util.List<java.lang.String>) strList10);
        getObservationsV2_12.DepthUnitCustomId = "hi!";
        java.lang.String str15 = getObservationsV2_12.CustomId;
        java.util.List<java.lang.String> strList16 = getObservationsV2_12.getSearch();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_17 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray19 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList20 = new java.util.ArrayList<java.lang.String>();
        boolean boolean21 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList20, strArray19);
        getObservationsV2_17.SpecimenIds = strList20;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags23 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray27 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList28 = new java.util.ArrayList<java.lang.String>();
        boolean boolean29 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList28, strArray27);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags30 = putLocationTags23.setTagUniqueIds(strList28);
        getObservationsV2_17.QualityControlTypes = strList28;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_32 = getObservationsV2_12.setMedia((java.util.List<java.lang.String>) strList28);
        putLocationType4.ExtendedAttributeDefinitionIds = strList28;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_34 = getObservationsV2_0.setProjectIds((java.util.List<java.lang.String>) strList28);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_36 = getObservationsV2_0.setCursor("");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetAnalyticalGroups getAnalyticalGroups37 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetAnalyticalGroups();
        java.util.List<java.lang.String> strList38 = getAnalyticalGroups37.ObservedPropertyIds;
        java.lang.Object obj39 = getAnalyticalGroups37.getResponseType();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetLabAnalysisMethods getLabAnalysisMethods40 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetLabAnalysisMethods();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetChartDataV2 getChartDataV2_41 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetChartDataV2();
        java.lang.String str42 = getChartDataV2_41.getActivityCustomId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetChartDataV2 getChartDataV2_44 = getChartDataV2_41.setFilterId("");
        java.util.List<java.lang.String> strList45 = getChartDataV2_41.getIds();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExtendedAttributeDropdownlistitems getExtendedAttributeDropdownlistitems46 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExtendedAttributeDropdownlistitems();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_47 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.util.List<java.lang.String> strList48 = getObservationsV2_47.SamplingContextTagIds;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_49 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray51 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList52 = new java.util.ArrayList<java.lang.String>();
        boolean boolean53 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList52, strArray51);
        getObservationsV2_49.SpecimenIds = strList52;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags55 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray59 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList60 = new java.util.ArrayList<java.lang.String>();
        boolean boolean61 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList60, strArray59);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags62 = putLocationTags55.setTagUniqueIds(strList60);
        getObservationsV2_49.QualityControlTypes = strList60;
        getObservationsV2_47.ResultGrades = strList60;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExtendedAttributeDropdownlistitems getExtendedAttributeDropdownlistitems65 = getExtendedAttributeDropdownlistitems46.setSearch((java.util.List<java.lang.String>) strList60);
        getChartDataV2_41.ObservedPropertyIds = strList60;
        getChartDataV2_41.SpecimenName = "MinDuration";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportObservations getExportObservations69 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportObservations();
        java.util.List<java.lang.String> strList70 = getExportObservations69.getLabReportIds();
        java.lang.String str71 = getExportObservations69.DepthUnitCustomId;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetActivityTemplates getActivityTemplates72 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetActivityTemplates();
        java.lang.Object obj73 = getActivityTemplates72.getResponseType();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_74 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray76 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList77 = new java.util.ArrayList<java.lang.String>();
        boolean boolean78 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList77, strArray76);
        getObservationsV2_74.SpecimenIds = strList77;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags80 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray84 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList85 = new java.util.ArrayList<java.lang.String>();
        boolean boolean86 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList85, strArray84);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags87 = putLocationTags80.setTagUniqueIds(strList85);
        getObservationsV2_74.QualityControlTypes = strList85;
        getActivityTemplates72.Type = strList85;
        getExportObservations69.AnalyticalGroupIds = strList85;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetChartDataV2 getChartDataV2_91 = getChartDataV2_41.setAnalysisMethodIds((java.util.List<java.lang.String>) strList85);
        getLabAnalysisMethods40.ObservedPropertyIds = strList85;
        getAnalyticalGroups37.AnalyticalGroupTypes = strList85;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_94 = getObservationsV2_0.setLabResultLabAnalysisMethodIds((java.util.List<java.lang.String>) strList85);
        java.lang.Double double95 = getObservationsV2_94.NumericResultValue;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(strList2);
        org.junit.Assert.assertNull(strList3);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(getObservationsV2_12);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNull(strList16);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(putLocationTags30);
        org.junit.Assert.assertNotNull(getObservationsV2_32);
        org.junit.Assert.assertNotNull(getObservationsV2_34);
        org.junit.Assert.assertNotNull(getObservationsV2_36);
        org.junit.Assert.assertNull(strList38);
        org.junit.Assert.assertNotNull(obj39);
        org.junit.Assert.assertEquals(obj39.toString(), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$SearchResultAnalyticalGroup");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj39), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$SearchResultAnalyticalGroup");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj39), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$SearchResultAnalyticalGroup");
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertNotNull(getChartDataV2_44);
        org.junit.Assert.assertNull(strList45);
        org.junit.Assert.assertNull(strList48);
        org.junit.Assert.assertNotNull(strArray51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(strArray59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(putLocationTags62);
        org.junit.Assert.assertNotNull(getExtendedAttributeDropdownlistitems65);
        org.junit.Assert.assertNull(strList70);
        org.junit.Assert.assertNull(str71);
        org.junit.Assert.assertNotNull(obj73);
        org.junit.Assert.assertEquals(obj73.toString(), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$SearchResultActivityTemplate");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj73), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$SearchResultActivityTemplate");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj73), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$SearchResultActivityTemplate");
        org.junit.Assert.assertNotNull(strArray76);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
        org.junit.Assert.assertNotNull(strArray84);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + true + "'", boolean86 == true);
        org.junit.Assert.assertNotNull(putLocationTags87);
        org.junit.Assert.assertNotNull(getChartDataV2_91);
        org.junit.Assert.assertNotNull(getObservationsV2_94);
        org.junit.Assert.assertNull(double95);
    }

    @Test
    public void test24394() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest48.test24394");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Project project0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Project();
        java.lang.String str1 = project0.getName();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ProjectType projectType2 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ProjectType.EVENT_BASED_MONITORING;
        project0.Type = projectType2;
        java.time.OffsetDateTime offsetDateTime4 = project0.getStartTime();
        java.lang.String str5 = project0.getCustomId();
        java.lang.String str6 = project0.ScopeStatement;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + projectType2 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ProjectType.EVENT_BASED_MONITORING + "'", projectType2.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ProjectType.EVENT_BASED_MONITORING));
        org.junit.Assert.assertNull(offsetDateTime4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(str6);
    }

    @Test
    public void test24395() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest48.test24395");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RoleFlattened roleFlattened0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RoleFlattened();
        java.lang.Boolean boolean1 = roleFlattened0.CanRemoveFieldVisits;
        roleFlattened0.Name = "MaxInstant";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationType putLocationType4 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationType();
        java.lang.String str5 = putLocationType4.Description;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_6 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray9 = new java.lang.String[] { "", "" };
        java.util.ArrayList<java.lang.String> strList10 = new java.util.ArrayList<java.lang.String>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList10, strArray9);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_12 = getObservationsV2_6.setDataClassifications((java.util.List<java.lang.String>) strList10);
        getObservationsV2_12.DepthUnitCustomId = "hi!";
        java.lang.String str15 = getObservationsV2_12.CustomId;
        java.util.List<java.lang.String> strList16 = getObservationsV2_12.getSearch();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_17 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray19 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList20 = new java.util.ArrayList<java.lang.String>();
        boolean boolean21 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList20, strArray19);
        getObservationsV2_17.SpecimenIds = strList20;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags23 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray27 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList28 = new java.util.ArrayList<java.lang.String>();
        boolean boolean29 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList28, strArray27);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags30 = putLocationTags23.setTagUniqueIds(strList28);
        getObservationsV2_17.QualityControlTypes = strList28;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_32 = getObservationsV2_12.setMedia((java.util.List<java.lang.String>) strList28);
        putLocationType4.ExtendedAttributeDefinitionIds = strList28;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RoleFlattenedBase roleFlattenedBase34 = roleFlattened0.setRoleApprovalTransitions(strList28);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RoleFlattenedBase roleFlattenedBase36 = roleFlattenedBase34.setCanEditLocationDetails((java.lang.Boolean) true);
        java.lang.Boolean boolean37 = roleFlattenedBase36.CanAddAppendConfigurations;
        roleFlattenedBase36.CanRemoveFieldVisits = true;
        java.lang.Boolean boolean40 = roleFlattenedBase36.CanAddData;
        org.junit.Assert.assertNull(boolean1);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(getObservationsV2_12);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNull(strList16);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(putLocationTags30);
        org.junit.Assert.assertNotNull(getObservationsV2_32);
        org.junit.Assert.assertNotNull(roleFlattenedBase34);
        org.junit.Assert.assertNotNull(roleFlattenedBase36);
        org.junit.Assert.assertNull(boolean37);
        org.junit.Assert.assertNull(boolean40);
    }

    @Test
    public void test24396() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest48.test24396");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostTag postTag0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostTag();
        java.lang.String str1 = postTag0.Description;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostTag postTag3 = postTag0.setName("MaxInstant");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostTag postTag5 = postTag3.setDescription("POST");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes6 = postTag3.getAuditAttributes();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(postTag3);
        org.junit.Assert.assertNotNull(postTag5);
        org.junit.Assert.assertNull(auditAttributes6);
    }

    @Test
    public void test24397() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest48.test24397");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.PostLocationAttachmentResponse postLocationAttachmentResponse0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.PostLocationAttachmentResponse();
        java.lang.String str1 = postLocationAttachmentResponse0.getComments();
        java.lang.String str2 = postLocationAttachmentResponse0.Comments;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.PostLocationAttachmentResponse postLocationAttachmentResponse4 = postLocationAttachmentResponse0.setComments("");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.AppliedTag appliedTag5 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.AppliedTag();
        appliedTag5.Key = "9999-12-31T23:59:59.999Z";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.AppliedTag appliedTag9 = appliedTag5.setKey("http");
        java.lang.String str10 = appliedTag9.UniqueId;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.AppliedTag appliedTag11 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.AppliedTag();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.AppliedTag appliedTag13 = appliedTag11.setValue("'.'SSSSSSS");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.AppliedTag appliedTag15 = appliedTag11.setValue("/AQUARIUS/Acquisition/v2://9999-12-31T23:59:59.999Z");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.AppliedTag appliedTag17 = appliedTag11.setValue("");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.AppliedTag[] appliedTagArray18 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.AppliedTag[] { appliedTag9, appliedTag11 };
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.AppliedTag> appliedTagList19 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.AppliedTag>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.AppliedTag>) appliedTagList19, appliedTagArray18);
        postLocationAttachmentResponse0.Tags = appliedTagList19;
        java.lang.String str22 = postLocationAttachmentResponse0.getUrl();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.PostLocationAttachmentResponse postLocationAttachmentResponse24 = postLocationAttachmentResponse0.setUniqueId("multipart/form-data; boundary=****f642a130-eb6d-4fb6-a1a4-7c7216ab119b****");
        java.lang.String str25 = postLocationAttachmentResponse24.getFileName();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.PostLocationAttachmentResponse postLocationAttachmentResponse27 = postLocationAttachmentResponse24.setUrl("http://MaxDurationhttp/json/reply/Float://multipart/form-data; boundary=****231224c4-98ce-4e30-bd65-1d25287c4abe****");
        java.lang.String str28 = postLocationAttachmentResponse27.FileName;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.AttachmentType attachmentType29 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.AttachmentType.LoggerFile;
        postLocationAttachmentResponse27.AttachmentType = attachmentType29;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNotNull(postLocationAttachmentResponse4);
        org.junit.Assert.assertNotNull(appliedTag9);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNotNull(appliedTag13);
        org.junit.Assert.assertNotNull(appliedTag15);
        org.junit.Assert.assertNotNull(appliedTag17);
        org.junit.Assert.assertNotNull(appliedTagArray18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertNotNull(postLocationAttachmentResponse24);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertNotNull(postLocationAttachmentResponse27);
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertTrue("'" + attachmentType29 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.AttachmentType.LoggerFile + "'", attachmentType29.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.AttachmentType.LoggerFile));
    }

    @Test
    public void test24398() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest48.test24398");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportSummarySpecimen importSummarySpecimen0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportSummarySpecimen();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportSummarySpecimen importSummarySpecimen2 = importSummarySpecimen0.setSummaryReportText("/AQUARIUS/Provisioning/v1");
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportError> importErrorList3 = importSummarySpecimen2.ImportJobErrors;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationImportSummary observationImportSummary4 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationImportSummary();
        observationImportSummary4.UpdateCount = (-1);
        java.lang.Integer int7 = observationImportSummary4.ExpectedCount;
        java.lang.String str8 = observationImportSummary4.SummaryReportText;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportError[] importErrorArray9 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportError[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportError> importErrorList10 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportError>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportError>) importErrorList10, importErrorArray9);
        observationImportSummary4.ImportJobErrors = importErrorList10;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportSummarySpecimen importSummarySpecimen13 = importSummarySpecimen2.setImportJobErrors((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportError>) importErrorList10);
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemSpecimen> importItemSpecimenList14 = importSummarySpecimen2.ImportItems;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple importHistoryEventSimple15 = importSummarySpecimen2.getImportHistoryEventSimple();
        org.junit.Assert.assertNotNull(importSummarySpecimen2);
        org.junit.Assert.assertNull(importErrorList3);
        org.junit.Assert.assertNull(int7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(importErrorArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(importSummarySpecimen13);
        org.junit.Assert.assertNull(importItemSpecimenList14);
        org.junit.Assert.assertNull(importHistoryEventSimple15);
    }

    @Test
    public void test24399() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest48.test24399");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemAnalysisMethod importItemAnalysisMethod0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemAnalysisMethod();
        java.lang.Object obj1 = importItemAnalysisMethod0.Errors;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemAnalysisMethod importItemAnalysisMethod3 = importItemAnalysisMethod0.setRowId("/AQUARIUS/Provisioning/v1");
        java.util.List<java.lang.String> strList4 = importItemAnalysisMethod0.WarningMessages;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetAnalyticalGroups getAnalyticalGroups5 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetAnalyticalGroups();
        java.util.List<java.lang.String> strList6 = getAnalyticalGroups5.getAnalyticalGroupTypes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObservation importItemObservation7 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObservation();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest8 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest();
        java.lang.Object obj9 = timeAlignedDataServiceRequest8.getResponseType();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse10 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant11 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse12 = locationDescriptionListServiceResponse10.setNextToken(instant11);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest13 = timeAlignedDataServiceRequest8.setQueryFrom(instant11);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags14 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray18 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList19 = new java.util.ArrayList<java.lang.String>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList19, strArray18);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags21 = putLocationTags14.setTagUniqueIds(strList19);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest22 = timeAlignedDataServiceRequest8.setTimeSeriesOutputUnitIds(strList19);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObservation importItemObservation23 = importItemObservation7.setFields((java.util.List<java.lang.String>) strList19);
        java.lang.Object obj24 = importItemObservation23.getErrors();
        java.util.List<java.lang.String> strList25 = importItemObservation23.getWarningMessages();
        java.util.List<java.lang.String> strList26 = importItemObservation23.WarningMessages;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags27 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray31 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList32 = new java.util.ArrayList<java.lang.String>();
        boolean boolean33 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList32, strArray31);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags34 = putLocationTags27.setTagUniqueIds(strList32);
        java.lang.Object obj35 = putLocationTags34.getResponseType();
        java.util.ArrayList<java.lang.String> strList36 = putLocationTags34.getTagUniqueIds();
        importItemObservation23.WarningMessages = strList36;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetAnalyticalGroups getAnalyticalGroups38 = getAnalyticalGroups5.setAnalyticalGroupTypes((java.util.List<java.lang.String>) strList36);
        importItemAnalysisMethod0.Fields = strList36;
        org.junit.Assert.assertNull(obj1);
        org.junit.Assert.assertNotNull(importItemAnalysisMethod3);
        org.junit.Assert.assertNull(strList4);
        org.junit.Assert.assertNull(strList6);
        org.junit.Assert.assertNotNull(obj9);
        org.junit.Assert.assertEquals(obj9.toString(), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj9), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj9), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertNotNull(instant11);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse12);
        org.junit.Assert.assertNotNull(timeAlignedDataServiceRequest13);
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(putLocationTags21);
        org.junit.Assert.assertNotNull(timeAlignedDataServiceRequest22);
        org.junit.Assert.assertNotNull(importItemObservation23);
        org.junit.Assert.assertNull(obj24);
        org.junit.Assert.assertNull(strList25);
        org.junit.Assert.assertNull(strList26);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(putLocationTags34);
        org.junit.Assert.assertNotNull(obj35);
        org.junit.Assert.assertEquals(obj35.toString(), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning$Location");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj35), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning$Location");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj35), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning$Location");
        org.junit.Assert.assertNotNull(strList36);
        org.junit.Assert.assertNotNull(getAnalyticalGroups38);
    }

    @Test
    public void test24400() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest48.test24400");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.OpenIdConnectRelyingPartyConfiguration openIdConnectRelyingPartyConfiguration0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.OpenIdConnectRelyingPartyConfiguration();
        openIdConnectRelyingPartyConfiguration0.OptionalIssuerDiscoveryUri = "9999-12-31T23:59:59.999Z";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.OpenIdConnectRelyingPartyConfiguration openIdConnectRelyingPartyConfiguration4 = openIdConnectRelyingPartyConfiguration0.setDisplayName("MaxInstant");
        java.lang.String str5 = openIdConnectRelyingPartyConfiguration0.getIdentifierClaim();
        openIdConnectRelyingPartyConfiguration0.ClientIdentifier = "MinDuration";
        org.junit.Assert.assertNotNull(openIdConnectRelyingPartyConfiguration4);
        org.junit.Assert.assertNull(str5);
    }

    @Test
    public void test24401() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest48.test24401");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.FieldVisitSimple fieldVisitSimple0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.FieldVisitSimple();
        fieldVisitSimple0.Participants = "'.'SSSSSSS";
        java.time.OffsetDateTime offsetDateTime3 = fieldVisitSimple0.EndTime;
        org.junit.Assert.assertNull(offsetDateTime3);
    }

    @Test
    public void test24402() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest48.test24402");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutBulkEditResultGradesV2 putBulkEditResultGradesV2_0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutBulkEditResultGradesV2();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RoleFlattened roleFlattened1 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RoleFlattened();
        java.lang.Boolean boolean2 = roleFlattened1.CanRemoveFieldVisits;
        roleFlattened1.Name = "MaxInstant";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationType putLocationType5 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationType();
        java.lang.String str6 = putLocationType5.Description;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_7 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray10 = new java.lang.String[] { "", "" };
        java.util.ArrayList<java.lang.String> strList11 = new java.util.ArrayList<java.lang.String>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList11, strArray10);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_13 = getObservationsV2_7.setDataClassifications((java.util.List<java.lang.String>) strList11);
        getObservationsV2_13.DepthUnitCustomId = "hi!";
        java.lang.String str16 = getObservationsV2_13.CustomId;
        java.util.List<java.lang.String> strList17 = getObservationsV2_13.getSearch();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_18 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray20 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList21 = new java.util.ArrayList<java.lang.String>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList21, strArray20);
        getObservationsV2_18.SpecimenIds = strList21;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags24 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray28 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList29 = new java.util.ArrayList<java.lang.String>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList29, strArray28);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags31 = putLocationTags24.setTagUniqueIds(strList29);
        getObservationsV2_18.QualityControlTypes = strList29;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_33 = getObservationsV2_13.setMedia((java.util.List<java.lang.String>) strList29);
        putLocationType5.ExtendedAttributeDefinitionIds = strList29;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RoleFlattenedBase roleFlattenedBase35 = roleFlattened1.setRoleApprovalTransitions(strList29);
        putBulkEditResultGradesV2_0.ResultGrades = strList29;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationType putLocationType37 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationType();
        java.lang.String str38 = putLocationType37.Description;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_39 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray42 = new java.lang.String[] { "", "" };
        java.util.ArrayList<java.lang.String> strList43 = new java.util.ArrayList<java.lang.String>();
        boolean boolean44 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList43, strArray42);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_45 = getObservationsV2_39.setDataClassifications((java.util.List<java.lang.String>) strList43);
        getObservationsV2_45.DepthUnitCustomId = "hi!";
        java.lang.String str48 = getObservationsV2_45.CustomId;
        java.util.List<java.lang.String> strList49 = getObservationsV2_45.getSearch();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_50 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray52 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList53 = new java.util.ArrayList<java.lang.String>();
        boolean boolean54 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList53, strArray52);
        getObservationsV2_50.SpecimenIds = strList53;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags56 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray60 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList61 = new java.util.ArrayList<java.lang.String>();
        boolean boolean62 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList61, strArray60);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags63 = putLocationTags56.setTagUniqueIds(strList61);
        getObservationsV2_50.QualityControlTypes = strList61;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_65 = getObservationsV2_45.setMedia((java.util.List<java.lang.String>) strList61);
        putLocationType37.ExtendedAttributeDefinitionIds = strList61;
        putBulkEditResultGradesV2_0.LabResultLaboratoryIds = strList61;
        java.util.List<java.lang.String> strList68 = putBulkEditResultGradesV2_0.LabResultLaboratoryIds;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_69 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.util.List<java.lang.String> strList70 = getObservationsV2_69.SamplingContextTagIds;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_71 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray73 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList74 = new java.util.ArrayList<java.lang.String>();
        boolean boolean75 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList74, strArray73);
        getObservationsV2_71.SpecimenIds = strList74;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags77 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray81 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList82 = new java.util.ArrayList<java.lang.String>();
        boolean boolean83 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList82, strArray81);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags84 = putLocationTags77.setTagUniqueIds(strList82);
        getObservationsV2_71.QualityControlTypes = strList82;
        getObservationsV2_69.ResultGrades = strList82;
        java.lang.Double double87 = getObservationsV2_69.getMinNumericResultValue();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostTag postTag88 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostTag();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_89 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray92 = new java.lang.String[] { "", "" };
        java.util.ArrayList<java.lang.String> strList93 = new java.util.ArrayList<java.lang.String>();
        boolean boolean94 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList93, strArray92);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_95 = getObservationsV2_89.setDataClassifications((java.util.List<java.lang.String>) strList93);
        postTag88.PickListValues = strList93;
        getObservationsV2_69.SpecimenIds = strList93;
        putBulkEditResultGradesV2_0.ResultGrades = strList93;
        java.lang.String str99 = putBulkEditResultGradesV2_0.getCustomId();
        org.junit.Assert.assertNull(boolean2);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(getObservationsV2_13);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNull(strList17);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(putLocationTags31);
        org.junit.Assert.assertNotNull(getObservationsV2_33);
        org.junit.Assert.assertNotNull(roleFlattenedBase35);
        org.junit.Assert.assertNull(str38);
        org.junit.Assert.assertNotNull(strArray42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(getObservationsV2_45);
        org.junit.Assert.assertNull(str48);
        org.junit.Assert.assertNull(strList49);
        org.junit.Assert.assertNotNull(strArray52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(strArray60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertNotNull(putLocationTags63);
        org.junit.Assert.assertNotNull(getObservationsV2_65);
        org.junit.Assert.assertNotNull(strList68);
        org.junit.Assert.assertNull(strList70);
        org.junit.Assert.assertNotNull(strArray73);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertNotNull(strArray81);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + true + "'", boolean83 == true);
        org.junit.Assert.assertNotNull(putLocationTags84);
        org.junit.Assert.assertNull(double87);
        org.junit.Assert.assertNotNull(strArray92);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + true + "'", boolean94 == true);
        org.junit.Assert.assertNotNull(getObservationsV2_95);
        org.junit.Assert.assertNull(str99);
    }

    @Test
    public void test24403() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest48.test24403");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AttachmentRepresentation attachmentRepresentation0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AttachmentRepresentation();
        java.lang.String str1 = attachmentRepresentation0.getLongitude();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AttachmentRepresentation attachmentRepresentation3 = attachmentRepresentation0.setContentType("yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSSSSSZZZZZ");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AttachmentRepresentation attachmentRepresentation5 = attachmentRepresentation3.setLongitude("hi!");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AttachmentRepresentation attachmentRepresentation7 = attachmentRepresentation3.setSuccess((java.lang.Boolean) true);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AttachmentRepresentation attachmentRepresentation9 = attachmentRepresentation3.setComment("/AQUARIUS/Acquisition/v2");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributesFull auditAttributesFull10 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributesFull();
        java.lang.String str11 = auditAttributesFull10.getModificationUserProfileId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UserProfile userProfile12 = auditAttributesFull10.CreationUserProfile;
        attachmentRepresentation9.AuditAttributes = auditAttributesFull10;
        attachmentRepresentation9.FileName = "/AQUARIUS/Acquisition/v2";
        java.lang.String str16 = attachmentRepresentation9.Longitude;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AttachmentRepresentation attachmentRepresentation18 = attachmentRepresentation9.setSuccess((java.lang.Boolean) true);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(attachmentRepresentation3);
        org.junit.Assert.assertNotNull(attachmentRepresentation5);
        org.junit.Assert.assertNotNull(attachmentRepresentation7);
        org.junit.Assert.assertNotNull(attachmentRepresentation9);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNull(userProfile12);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertNotNull(attachmentRepresentation18);
    }

    @Test
    public void test24404() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest48.test24404");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSamplingLocation putSamplingLocation0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSamplingLocation();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSamplingLocation putSamplingLocation2 = putSamplingLocation0.setCustomId("https");
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttribute> extendedAttributeList3 = putSamplingLocation0.ExtendedAttributes;
        java.lang.String str4 = putSamplingLocation0.VerticalCollectionMethod;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSamplingLocation putSamplingLocation6 = putSamplingLocation0.setVerticalDatum("yyyy'-'MM'-'dd'T'HH':'mm':'ss");
        putSamplingLocation6.Latitude = "";
        java.lang.Object obj9 = putSamplingLocation6.getResponseType();
        java.lang.String str10 = putSamplingLocation6.getCustomId();
        org.junit.Assert.assertNotNull(putSamplingLocation2);
        org.junit.Assert.assertNull(extendedAttributeList3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNotNull(putSamplingLocation6);
        org.junit.Assert.assertNotNull(obj9);
        org.junit.Assert.assertEquals(obj9.toString(), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$SamplingLocation");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj9), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$SamplingLocation");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj9), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$SamplingLocation");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "https" + "'", str10, "https");
    }

    @Test
    public void test24405() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest48.test24405");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostSensor postSensor0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostSensor();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.SensorBase sensorBase2 = postSensor0.setName("");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.SensorBase sensorBase4 = sensorBase2.setManufacturer("hi!");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.SensorBase sensorBase6 = sensorBase2.setParameterId("yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.SensorBase sensorBase8 = sensorBase6.setMethodCode("https");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.SensorBase sensorBase10 = sensorBase6.setUnitId("2021.4.62.0");
        java.lang.String str11 = sensorBase10.ParameterId;
        org.junit.Assert.assertNotNull(sensorBase2);
        org.junit.Assert.assertNotNull(sensorBase4);
        org.junit.Assert.assertNotNull(sensorBase6);
        org.junit.Assert.assertNotNull(sensorBase8);
        org.junit.Assert.assertNotNull(sensorBase10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ" + "'", str11, "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ");
    }

    @Test
    public void test24406() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest48.test24406");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray3 = new java.lang.String[] { "", "" };
        java.util.ArrayList<java.lang.String> strList4 = new java.util.ArrayList<java.lang.String>();
        boolean boolean5 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList4, strArray3);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_6 = getObservationsV2_0.setDataClassifications((java.util.List<java.lang.String>) strList4);
        getObservationsV2_6.DepthUnitCustomId = "hi!";
        java.lang.String str9 = getObservationsV2_6.CustomId;
        java.util.List<java.lang.String> strList10 = getObservationsV2_6.getSearch();
        java.util.List<java.lang.String> strList11 = getObservationsV2_6.getAnalysisMethodSimpleIds();
        java.lang.String[] strArray15 = new java.lang.String[] { "hi!", "", "9999-12-31T23:59:59.999Z" };
        java.util.ArrayList<java.lang.String> strList16 = new java.util.ArrayList<java.lang.String>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList16, strArray15);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_18 = getObservationsV2_6.setSamplingContextTagIds((java.util.List<java.lang.String>) strList16);
        java.time.Instant instant19 = getObservationsV2_6.getStartObservedTime();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_21 = getObservationsV2_6.setFilterId("ZZZZZ");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingModelOutputValuesServiceRequest ratingModelOutputValuesServiceRequest22 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingModelOutputValuesServiceRequest();
        ratingModelOutputValuesServiceRequest22.ApplyShifts = true;
        java.time.Instant instant25 = ratingModelOutputValuesServiceRequest22.getEffectiveTime();
        java.util.ArrayList<java.lang.Double> doubleList26 = ratingModelOutputValuesServiceRequest22.getInputValues();
        java.lang.Boolean boolean27 = ratingModelOutputValuesServiceRequest22.isApplyShifts();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CrossSectionSurveyActivity crossSectionSurveyActivity28 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CrossSectionSurveyActivity();
        java.lang.String str29 = crossSectionSurveyActivity28.Channel;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CrossSectionSurveyActivity crossSectionSurveyActivity31 = crossSectionSurveyActivity28.setComments("ZZZZZ");
        java.time.Instant instant32 = crossSectionSurveyActivity31.StartTime;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDataCorrectedServiceRequest timeSeriesDataCorrectedServiceRequest33 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDataCorrectedServiceRequest();
        timeSeriesDataCorrectedServiceRequest33.GetParts = "http";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDescription timeSeriesDescription36 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDescription();
        java.lang.String str37 = timeSeriesDescription36.Parameter;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDescription timeSeriesDescription39 = timeSeriesDescription36.setPublish((java.lang.Boolean) false);
        java.lang.String str40 = timeSeriesDescription39.ComputationIdentifier;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_41 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray44 = new java.lang.String[] { "", "" };
        java.util.ArrayList<java.lang.String> strList45 = new java.util.ArrayList<java.lang.String>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList45, strArray44);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_47 = getObservationsV2_41.setDataClassifications((java.util.List<java.lang.String>) strList45);
        getObservationsV2_47.DepthUnitCustomId = "hi!";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse50 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant51 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse52 = locationDescriptionListServiceResponse50.setNextToken(instant51);
        getObservationsV2_47.EndObservedTime = instant51;
        timeSeriesDescription39.CorrectedEndTime = instant51;
        timeSeriesDataCorrectedServiceRequest33.QueryFrom = instant51;
        crossSectionSurveyActivity31.EndTime = instant51;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingModelOutputValuesServiceRequest ratingModelOutputValuesServiceRequest57 = ratingModelOutputValuesServiceRequest22.setEffectiveTime(instant51);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_58 = getObservationsV2_21.setEndObservedTime(instant51);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(getObservationsV2_6);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNull(strList10);
        org.junit.Assert.assertNull(strList11);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(getObservationsV2_18);
        org.junit.Assert.assertNull(instant19);
        org.junit.Assert.assertNotNull(getObservationsV2_21);
        org.junit.Assert.assertNull(instant25);
        org.junit.Assert.assertNull(doubleList26);
        org.junit.Assert.assertEquals("'" + boolean27 + "' != '" + true + "'", boolean27, true);
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertNotNull(crossSectionSurveyActivity31);
        org.junit.Assert.assertNull(instant32);
        org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertNotNull(timeSeriesDescription39);
        org.junit.Assert.assertNull(str40);
        org.junit.Assert.assertNotNull(strArray44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(getObservationsV2_47);
        org.junit.Assert.assertNotNull(instant51);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse52);
        org.junit.Assert.assertNotNull(ratingModelOutputValuesServiceRequest57);
        org.junit.Assert.assertNotNull(getObservationsV2_58);
    }

    @Test
    public void test24407() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest48.test24407");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemTaxon importItemTaxon0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemTaxon();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemTaxon importItemTaxon2 = importItemTaxon0.setRowId("/AQUARIUS/Provisioning/v1");
        java.lang.String str3 = importItemTaxon2.Input;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemTaxon importItemTaxon5 = importItemTaxon2.setInput("MinDuration");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutBulkEditResultGradesV2 putBulkEditResultGradesV2_6 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutBulkEditResultGradesV2();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RoleFlattened roleFlattened7 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RoleFlattened();
        java.lang.Boolean boolean8 = roleFlattened7.CanRemoveFieldVisits;
        roleFlattened7.Name = "MaxInstant";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationType putLocationType11 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationType();
        java.lang.String str12 = putLocationType11.Description;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_13 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray16 = new java.lang.String[] { "", "" };
        java.util.ArrayList<java.lang.String> strList17 = new java.util.ArrayList<java.lang.String>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList17, strArray16);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_19 = getObservationsV2_13.setDataClassifications((java.util.List<java.lang.String>) strList17);
        getObservationsV2_19.DepthUnitCustomId = "hi!";
        java.lang.String str22 = getObservationsV2_19.CustomId;
        java.util.List<java.lang.String> strList23 = getObservationsV2_19.getSearch();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_24 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray26 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList27 = new java.util.ArrayList<java.lang.String>();
        boolean boolean28 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList27, strArray26);
        getObservationsV2_24.SpecimenIds = strList27;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags30 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray34 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList35 = new java.util.ArrayList<java.lang.String>();
        boolean boolean36 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList35, strArray34);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags37 = putLocationTags30.setTagUniqueIds(strList35);
        getObservationsV2_24.QualityControlTypes = strList35;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_39 = getObservationsV2_19.setMedia((java.util.List<java.lang.String>) strList35);
        putLocationType11.ExtendedAttributeDefinitionIds = strList35;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RoleFlattenedBase roleFlattenedBase41 = roleFlattened7.setRoleApprovalTransitions(strList35);
        putBulkEditResultGradesV2_6.ResultGrades = strList35;
        importItemTaxon5.WarningMessages = strList35;
        java.util.List<java.lang.String> strList44 = importItemTaxon5.getFields();
        org.junit.Assert.assertNotNull(importItemTaxon2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(importItemTaxon5);
        org.junit.Assert.assertNull(boolean8);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(getObservationsV2_19);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertNull(strList23);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(strArray34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(putLocationTags37);
        org.junit.Assert.assertNotNull(getObservationsV2_39);
        org.junit.Assert.assertNotNull(roleFlattenedBase41);
        org.junit.Assert.assertNull(strList44);
    }

    @Test
    public void test24408() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest48.test24408");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetUnitGroupWithUnitHistory getUnitGroupWithUnitHistory0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetUnitGroupWithUnitHistory();
        java.lang.Object obj1 = getUnitGroupWithUnitHistory0.getResponseType();
        java.lang.String str2 = getUnitGroupWithUnitHistory0.getId();
        java.lang.String str3 = getUnitGroupWithUnitHistory0.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetUnitGroupWithUnitHistory getUnitGroupWithUnitHistory5 = getUnitGroupWithUnitHistory0.setId("yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSSSSSZZZZZ");
        java.lang.String str6 = getUnitGroupWithUnitHistory0.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetUnitGroupWithUnitHistory getUnitGroupWithUnitHistory8 = getUnitGroupWithUnitHistory0.setId("multipart/form-data; boundary=****d9f5d551-383a-4365-87fd-ae7094da6f3b****");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetUnitGroupWithUnitHistory getUnitGroupWithUnitHistory10 = getUnitGroupWithUnitHistory8.setId("/AQUARIUS/Provisioning/v1");
        java.lang.Object obj11 = getUnitGroupWithUnitHistory8.getResponseType();
        org.junit.Assert.assertNotNull(obj1);
        org.junit.Assert.assertEquals(obj1.toString(), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$SearchResultAuditHistory");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj1), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$SearchResultAuditHistory");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj1), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$SearchResultAuditHistory");
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(getUnitGroupWithUnitHistory5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSSSSSZZZZZ" + "'", str6, "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSSSSSZZZZZ");
        org.junit.Assert.assertNotNull(getUnitGroupWithUnitHistory8);
        org.junit.Assert.assertNotNull(getUnitGroupWithUnitHistory10);
        org.junit.Assert.assertNotNull(obj11);
        org.junit.Assert.assertEquals(obj11.toString(), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$SearchResultAuditHistory");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj11), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$SearchResultAuditHistory");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj11), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$SearchResultAuditHistory");
    }

    @Test
    public void test24409() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest48.test24409");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivity samplingPlanPlannedActivity0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivity();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ActivityType activityType1 = null;
        samplingPlanPlannedActivity0.ActivityType = activityType1;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ActivityType activityType3 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ActivityType.FIELD_SURVEY;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivity samplingPlanPlannedActivity4 = samplingPlanPlannedActivity0.setActivityType(activityType3);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLaboratory postLaboratory5 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLaboratory();
        java.lang.String str6 = postLaboratory5.Address;
        java.lang.String str7 = postLaboratory5.Name;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivity samplingPlanPlannedActivity8 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivity();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes9 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivity samplingPlanPlannedActivity10 = samplingPlanPlannedActivity8.setAuditAttributes(auditAttributes9);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes11 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes13 = auditAttributes11.setCreationUserProfileId("'.'SSSSSSS");
        samplingPlanPlannedActivity10.AuditAttributes = auditAttributes11;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes15 = samplingPlanPlannedActivity10.AuditAttributes;
        postLaboratory5.AuditAttributes = auditAttributes15;
        samplingPlanPlannedActivity4.AuditAttributes = auditAttributes15;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivity samplingPlanPlannedActivity18 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivity();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ActivityType activityType19 = null;
        samplingPlanPlannedActivity18.ActivityType = activityType19;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ActivityType activityType21 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ActivityType.FIELD_SURVEY;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivity samplingPlanPlannedActivity22 = samplingPlanPlannedActivity18.setActivityType(activityType21);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivity samplingPlanPlannedActivity23 = samplingPlanPlannedActivity4.setActivityType(activityType21);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ActivityTemplate activityTemplate24 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ActivityTemplate();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes25 = null;
        activityTemplate24.AuditAttributes = auditAttributes25;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutActivityTemplate putActivityTemplate27 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutActivityTemplate();
        java.lang.String str28 = putActivityTemplate27.getId();
        java.lang.String str29 = putActivityTemplate27.Id;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes30 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes32 = auditAttributes30.setCreationUserProfileId("'.'SSSSSSS");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutActivityTemplate putActivityTemplate33 = putActivityTemplate27.setAuditAttributes(auditAttributes32);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MediumType mediumType34 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MediumType.WATER;
        putActivityTemplate33.Medium = mediumType34;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ActivityTemplate activityTemplate36 = activityTemplate24.setMedium(mediumType34);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ActivityTemplateType activityTemplateType37 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ActivityTemplateType.INDEX_CALCULATION;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ActivityTemplate activityTemplate38 = activityTemplate24.setType(activityTemplateType37);
        samplingPlanPlannedActivity4.ActivityTemplate = activityTemplate24;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivity samplingPlanPlannedActivity41 = samplingPlanPlannedActivity4.setId("multipart/form-data; boundary=****9fadde69-3f13-40c4-a87c-0f3f51c2dd35****");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivity samplingPlanPlannedActivity42 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivity();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivityRecurrence samplingPlanPlannedActivityRecurrence43 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivityRecurrence();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivity samplingPlanPlannedActivity44 = samplingPlanPlannedActivity42.setRecurrence(samplingPlanPlannedActivityRecurrence43);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ActivityTemplate activityTemplate45 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ActivityTemplate();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes46 = null;
        activityTemplate45.AuditAttributes = auditAttributes46;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.CollectionMethod collectionMethod48 = activityTemplate45.CollectionMethod;
        activityTemplate45.Comment = "MaxInstant";
        samplingPlanPlannedActivity42.ActivityTemplate = activityTemplate45;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivityRecurrence samplingPlanPlannedActivityRecurrence52 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivityRecurrence();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.TemporalExpressionType temporalExpressionType53 = samplingPlanPlannedActivityRecurrence52.getTemporalExpression();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivity samplingPlanPlannedActivity54 = samplingPlanPlannedActivity42.setRecurrence(samplingPlanPlannedActivityRecurrence52);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ActivityType activityType55 = samplingPlanPlannedActivity42.getActivityType();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ActivityType activityType56 = samplingPlanPlannedActivity42.ActivityType;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivityRecurrence samplingPlanPlannedActivityRecurrence57 = samplingPlanPlannedActivity42.Recurrence;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivityRecurrence samplingPlanPlannedActivityRecurrence58 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivityRecurrence();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.TemporalExpressionType temporalExpressionType59 = samplingPlanPlannedActivityRecurrence58.TemporalExpression;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DayOfWeekType dayOfWeekType60 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DayOfWeekType.THURSDAY;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivityRecurrence samplingPlanPlannedActivityRecurrence61 = samplingPlanPlannedActivityRecurrence58.setDayOfWeek(dayOfWeekType60);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivityRecurrence samplingPlanPlannedActivityRecurrence62 = samplingPlanPlannedActivityRecurrence57.setDayOfWeek(dayOfWeekType60);
        samplingPlanPlannedActivity4.Recurrence = samplingPlanPlannedActivityRecurrence62;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.TemporalExpressionType temporalExpressionType64 = samplingPlanPlannedActivityRecurrence62.getTemporalExpression();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DayOfWeekType dayOfWeekType65 = samplingPlanPlannedActivityRecurrence62.DayOfWeek;
        org.junit.Assert.assertTrue("'" + activityType3 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ActivityType.FIELD_SURVEY + "'", activityType3.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ActivityType.FIELD_SURVEY));
        org.junit.Assert.assertNotNull(samplingPlanPlannedActivity4);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(samplingPlanPlannedActivity10);
        org.junit.Assert.assertNotNull(auditAttributes13);
        org.junit.Assert.assertNotNull(auditAttributes15);
        org.junit.Assert.assertTrue("'" + activityType21 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ActivityType.FIELD_SURVEY + "'", activityType21.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ActivityType.FIELD_SURVEY));
        org.junit.Assert.assertNotNull(samplingPlanPlannedActivity22);
        org.junit.Assert.assertNotNull(samplingPlanPlannedActivity23);
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertNotNull(auditAttributes32);
        org.junit.Assert.assertNotNull(putActivityTemplate33);
        org.junit.Assert.assertTrue("'" + mediumType34 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MediumType.WATER + "'", mediumType34.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MediumType.WATER));
        org.junit.Assert.assertNotNull(activityTemplate36);
        org.junit.Assert.assertTrue("'" + activityTemplateType37 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ActivityTemplateType.INDEX_CALCULATION + "'", activityTemplateType37.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ActivityTemplateType.INDEX_CALCULATION));
        org.junit.Assert.assertNotNull(activityTemplate38);
        org.junit.Assert.assertNotNull(samplingPlanPlannedActivity41);
        org.junit.Assert.assertNotNull(samplingPlanPlannedActivity44);
        org.junit.Assert.assertNull(collectionMethod48);
        org.junit.Assert.assertNull(temporalExpressionType53);
        org.junit.Assert.assertNotNull(samplingPlanPlannedActivity54);
        org.junit.Assert.assertNull(activityType55);
        org.junit.Assert.assertNull(activityType56);
        org.junit.Assert.assertNotNull(samplingPlanPlannedActivityRecurrence57);
        org.junit.Assert.assertNull(temporalExpressionType59);
        org.junit.Assert.assertTrue("'" + dayOfWeekType60 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DayOfWeekType.THURSDAY + "'", dayOfWeekType60.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DayOfWeekType.THURSDAY));
        org.junit.Assert.assertNotNull(samplingPlanPlannedActivityRecurrence61);
        org.junit.Assert.assertNotNull(samplingPlanPlannedActivityRecurrence62);
        org.junit.Assert.assertNull(temporalExpressionType64);
        org.junit.Assert.assertTrue("'" + dayOfWeekType65 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DayOfWeekType.THURSDAY + "'", dayOfWeekType65.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DayOfWeekType.THURSDAY));
    }

    @Test
    public void test24410() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest48.test24410");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostUnitGroupWithUnit postUnitGroupWithUnit0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostUnitGroupWithUnit();
        postUnitGroupWithUnit0.Id = "multipart/form-data; boundary=****f2ce0d54-dac7-4cd0-b74f-1024089261f9****";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation3 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedFieldResult plannedFieldResult4 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation5 = observation3.setPlannedFieldResult(plannedFieldResult4);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabInstruction labInstruction6 = null;
        observation5.LabInstruction = labInstruction6;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationStatistics observationStatistics8 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation9 = observation5.setStatistics(observationStatistics8);
        java.time.OffsetDateTime offsetDateTime10 = observation9.getResultTime();
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple> importHistoryEventSimpleList11 = observation9.ImportHistoryEventSimples;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty observedProperty12 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation13 = observation9.setObservedProperty(observedProperty12);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultGrade resultGrade14 = observation13.ResultGrade;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails15 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails17 = labResultDetails15.setAnalysisComment("/AQUARIUS/Acquisition/v2");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes18 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails19 = labResultDetails17.setAuditAttributes(auditAttributes18);
        observation13.AuditAttributes = auditAttributes18;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostUnitGroupWithUnit postUnitGroupWithUnit21 = postUnitGroupWithUnit0.setAuditAttributes(auditAttributes18);
        java.lang.String str22 = postUnitGroupWithUnit0.getCustomId();
        org.junit.Assert.assertNotNull(observation5);
        org.junit.Assert.assertNotNull(observation9);
        org.junit.Assert.assertNull(offsetDateTime10);
        org.junit.Assert.assertNull(importHistoryEventSimpleList11);
        org.junit.Assert.assertNotNull(observation13);
        org.junit.Assert.assertNull(resultGrade14);
        org.junit.Assert.assertNotNull(labResultDetails17);
        org.junit.Assert.assertNotNull(labResultDetails19);
        org.junit.Assert.assertNotNull(postUnitGroupWithUnit21);
        org.junit.Assert.assertNull(str22);
    }

    @Test
    public void test24411() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest48.test24411");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutFieldVisit putFieldVisit0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutFieldVisit();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity[] plannedActivityArray1 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity> plannedActivityList2 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity>) plannedActivityList2, plannedActivityArray1);
        putFieldVisit0.PlannedActivities = plannedActivityList2;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment5 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment();
        java.lang.String str6 = domainObjectAttachment5.getId();
        java.lang.String str7 = domainObjectAttachment5.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Attachment attachment8 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment9 = domainObjectAttachment5.setAttachment(attachment8);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment10 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment();
        java.lang.String str11 = domainObjectAttachment10.getId();
        java.lang.String str12 = domainObjectAttachment10.getId();
        domainObjectAttachment10.Id = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment16 = domainObjectAttachment10.setId("hi!");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment17 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment();
        java.lang.String str18 = domainObjectAttachment17.getId();
        java.lang.String str19 = domainObjectAttachment17.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Attachment attachment20 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment21 = domainObjectAttachment17.setAttachment(attachment20);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment22 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment();
        java.lang.String str23 = domainObjectAttachment22.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment24 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment();
        java.lang.String str25 = domainObjectAttachment24.getId();
        java.lang.String str26 = domainObjectAttachment24.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Attachment attachment27 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment28 = domainObjectAttachment24.setAttachment(attachment27);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment29 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment();
        java.lang.String str30 = domainObjectAttachment29.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment[] domainObjectAttachmentArray31 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment[] { domainObjectAttachment5, domainObjectAttachment10, domainObjectAttachment17, domainObjectAttachment22, domainObjectAttachment24, domainObjectAttachment29 };
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment> domainObjectAttachmentList32 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment>();
        boolean boolean33 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment>) domainObjectAttachmentList32, domainObjectAttachmentArray31);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutFieldVisit putFieldVisit34 = putFieldVisit0.setAttachments((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment>) domainObjectAttachmentList32);
        java.time.OffsetDateTime offsetDateTime35 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutFieldVisit putFieldVisit36 = putFieldVisit0.setEndTime(offsetDateTime35);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Schedule schedule37 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Schedule();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Schedule schedule39 = schedule37.setCustomId("");
        java.time.OffsetDateTime offsetDateTime40 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Schedule schedule41 = schedule37.setStartDate(offsetDateTime40);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.RecurrenceType recurrenceType42 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.RecurrenceType.MONTHLY;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Schedule schedule43 = schedule41.setRecurrenceType(recurrenceType42);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutFieldVisit putFieldVisit44 = putFieldVisit36.setSchedule(schedule41);
        putFieldVisit36.Id = "0001-01-01T00:00:00.000Z";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ProjectSimple projectSimple47 = putFieldVisit36.getProject();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutFieldVisit putFieldVisit48 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutFieldVisit();
        putFieldVisit48.Notes = "MinDuration";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ProjectSimple projectSimple51 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutFieldVisit putFieldVisit52 = putFieldVisit48.setProject(projectSimple51);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Schedule schedule53 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Schedule();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Schedule schedule55 = schedule53.setCustomId("");
        java.time.OffsetDateTime offsetDateTime56 = schedule53.getLastGenerationDate();
        putFieldVisit48.Schedule = schedule53;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocation samplingLocation58 = putFieldVisit48.SamplingLocation;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlan samplingPlan59 = putFieldVisit48.SamplingPlan;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ProjectSimple projectSimple60 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ProjectSimple();
        java.lang.String str61 = projectSimple60.Name;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutFieldVisit putFieldVisit62 = putFieldVisit48.setProject(projectSimple60);
        putFieldVisit36.Project = projectSimple60;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlan samplingPlan64 = putFieldVisit36.SamplingPlan;
        org.junit.Assert.assertNotNull(plannedActivityArray1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(domainObjectAttachment9);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(domainObjectAttachment16);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertNotNull(domainObjectAttachment21);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertNotNull(domainObjectAttachment28);
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertNotNull(domainObjectAttachmentArray31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(putFieldVisit34);
        org.junit.Assert.assertNotNull(putFieldVisit36);
        org.junit.Assert.assertNotNull(schedule39);
        org.junit.Assert.assertNotNull(schedule41);
        org.junit.Assert.assertTrue("'" + recurrenceType42 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.RecurrenceType.MONTHLY + "'", recurrenceType42.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.RecurrenceType.MONTHLY));
        org.junit.Assert.assertNotNull(schedule43);
        org.junit.Assert.assertNotNull(putFieldVisit44);
        org.junit.Assert.assertNull(projectSimple47);
        org.junit.Assert.assertNotNull(putFieldVisit52);
        org.junit.Assert.assertNotNull(schedule55);
        org.junit.Assert.assertNull(offsetDateTime56);
        org.junit.Assert.assertNull(samplingLocation58);
        org.junit.Assert.assertNull(samplingPlan59);
        org.junit.Assert.assertNull(str61);
        org.junit.Assert.assertNotNull(putFieldVisit62);
        org.junit.Assert.assertNull(samplingPlan64);
    }

    @Test
    public void test24412() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest48.test24412");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DeleteUserV2 deleteUserV2_0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DeleteUserV2();
        java.lang.String str1 = deleteUserV2_0.Id;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DeleteUserV2 deleteUserV2_3 = deleteUserV2_0.setId("multipart/form-data; boundary=****26835278-3e68-484a-a157-468aab2e69a2****");
        deleteUserV2_3.Id = "http://MaxDurationhttp/json/reply/Double";
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(deleteUserV2_3);
    }

    @Test
    public void test24413() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest48.test24413");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutActivityTemplate putActivityTemplate0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutActivityTemplate();
        java.lang.String str1 = putActivityTemplate0.getId();
        java.lang.String str2 = putActivityTemplate0.Id;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes3 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes5 = auditAttributes3.setCreationUserProfileId("'.'SSSSSSS");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutActivityTemplate putActivityTemplate6 = putActivityTemplate0.setAuditAttributes(auditAttributes5);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MediumType mediumType7 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MediumType.WATER;
        putActivityTemplate6.Medium = mediumType7;
        java.lang.String str9 = putActivityTemplate6.getComment();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ActivityTemplateType activityTemplateType10 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutActivityTemplate putActivityTemplate11 = putActivityTemplate6.setType(activityTemplateType10);
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate> specimenTemplateList12 = putActivityTemplate6.SpecimenTemplates;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ActivityTemplateType activityTemplateType13 = putActivityTemplate6.Type;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MediumType mediumType14 = putActivityTemplate6.Medium;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNotNull(auditAttributes5);
        org.junit.Assert.assertNotNull(putActivityTemplate6);
        org.junit.Assert.assertTrue("'" + mediumType7 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MediumType.WATER + "'", mediumType7.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MediumType.WATER));
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(putActivityTemplate11);
        org.junit.Assert.assertNull(specimenTemplateList12);
        org.junit.Assert.assertNull(activityTemplateType13);
        org.junit.Assert.assertTrue("'" + mediumType14 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MediumType.WATER + "'", mediumType14.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MediumType.WATER));
    }

    @Test
    public void test24414() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest48.test24414");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitReading fieldVisitReading0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitReading();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitReading fieldVisitReading2 = fieldVisitReading0.setUseLocationDatumAsReference((java.lang.Boolean) true);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitReading fieldVisitReading4 = fieldVisitReading2.setParameter("0001-01-01T00:00:00.000Z");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitReadingType fieldVisitReadingType5 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitReadingType.RoutineBefore;
        fieldVisitReading2.ReadingType = fieldVisitReadingType5;
        java.util.ArrayList<java.lang.String> strList7 = fieldVisitReading2.getQualifiers();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitReading fieldVisitReading9 = fieldVisitReading2.setPublish((java.lang.Boolean) true);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay10 = fieldVisitReading2.AdjustmentAmount;
        java.lang.String str11 = fieldVisitReading2.getSerialNumber();
        org.junit.Assert.assertNotNull(fieldVisitReading2);
        org.junit.Assert.assertNotNull(fieldVisitReading4);
        org.junit.Assert.assertTrue("'" + fieldVisitReadingType5 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitReadingType.RoutineBefore + "'", fieldVisitReadingType5.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitReadingType.RoutineBefore));
        org.junit.Assert.assertNull(strList7);
        org.junit.Assert.assertNotNull(fieldVisitReading9);
        org.junit.Assert.assertNull(quantityWithDisplay10);
        org.junit.Assert.assertNull(str11);
    }

    @Test
    public void test24415() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest48.test24415");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingCurve ratingCurve0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingCurve();
        java.lang.String str1 = ratingCurve0.Equation;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ParameterWithUnit parameterWithUnit2 = ratingCurve0.getInputParameter();
        java.lang.String str3 = ratingCurve0.getId();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingCurve ratingCurve5 = ratingCurve0.setRemarks("****231224c4-98ce-4e30-bd65-1d25287c4abe****");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingCurve ratingCurve7 = ratingCurve0.setEquation("multipart/form-data; boundary=****2e497db8-6b91-47d6-99bc-df65af225bf8****");
        java.lang.String str8 = ratingCurve7.Id;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ExpandedRatingCurve expandedRatingCurve9 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ExpandedRatingCurve();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingCurveType ratingCurveType10 = expandedRatingCurve9.Type;
        expandedRatingCurve9.IsBlended = false;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ParameterWithUnit parameterWithUnit13 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ParameterWithUnit();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ExpandedRatingCurve expandedRatingCurve14 = expandedRatingCurve9.setOutputParameter(parameterWithUnit13);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ParameterWithUnit parameterWithUnit15 = expandedRatingCurve14.getOutputParameter();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ExpandedRatingCurve expandedRatingCurve16 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ExpandedRatingCurve();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingCurveType ratingCurveType17 = expandedRatingCurve16.Type;
        expandedRatingCurve16.IsBlended = false;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ParameterWithUnit parameterWithUnit20 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ParameterWithUnit();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ExpandedRatingCurve expandedRatingCurve21 = expandedRatingCurve16.setOutputParameter(parameterWithUnit20);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ExpandedRatingCurve expandedRatingCurve22 = expandedRatingCurve14.setOutputParameter(parameterWithUnit20);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.OffsetPoint[] offsetPointArray23 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.OffsetPoint[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.OffsetPoint> offsetPointList24 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.OffsetPoint>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.OffsetPoint>) offsetPointList24, offsetPointArray23);
        expandedRatingCurve14.Offsets = offsetPointList24;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ExpandedRatingCurve expandedRatingCurve27 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ExpandedRatingCurve();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ParameterWithUnit parameterWithUnit28 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ParameterWithUnit();
        expandedRatingCurve27.OutputParameter = parameterWithUnit28;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingPoint[] ratingPointArray30 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingPoint[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingPoint> ratingPointList31 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingPoint>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingPoint>) ratingPointList31, ratingPointArray30);
        expandedRatingCurve27.BaseRatingTable = ratingPointList31;
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PeriodOfApplicability> periodOfApplicabilityList34 = expandedRatingCurve27.getPeriodsOfApplicability();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ExpandedRatingCurve expandedRatingCurve35 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ExpandedRatingCurve();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingCurveType ratingCurveType36 = expandedRatingCurve35.Type;
        expandedRatingCurve35.IsBlended = false;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ParameterWithUnit parameterWithUnit39 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ParameterWithUnit();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ExpandedRatingCurve expandedRatingCurve40 = expandedRatingCurve35.setOutputParameter(parameterWithUnit39);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ParameterWithUnit parameterWithUnit41 = expandedRatingCurve40.getOutputParameter();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ExpandedRatingCurve expandedRatingCurve42 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ExpandedRatingCurve();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingCurveType ratingCurveType43 = expandedRatingCurve42.Type;
        expandedRatingCurve42.IsBlended = false;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ParameterWithUnit parameterWithUnit46 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ParameterWithUnit();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ExpandedRatingCurve expandedRatingCurve47 = expandedRatingCurve42.setOutputParameter(parameterWithUnit46);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ParameterWithUnit parameterWithUnit48 = expandedRatingCurve47.getOutputParameter();
        expandedRatingCurve40.OutputParameter = parameterWithUnit48;
        parameterWithUnit48.ParameterUnit = "/AQUARIUS/Provisioning/v1";
        expandedRatingCurve27.InputParameter = parameterWithUnit48;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ExpandedRatingCurve expandedRatingCurve53 = expandedRatingCurve14.setInputParameter(parameterWithUnit48);
        java.lang.String str54 = parameterWithUnit48.ParameterUnit;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingCurve ratingCurve55 = ratingCurve7.setOutputParameter(parameterWithUnit48);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(parameterWithUnit2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(ratingCurve5);
        org.junit.Assert.assertNotNull(ratingCurve7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNull(ratingCurveType10);
        org.junit.Assert.assertNotNull(expandedRatingCurve14);
        org.junit.Assert.assertNotNull(parameterWithUnit15);
        org.junit.Assert.assertNull(ratingCurveType17);
        org.junit.Assert.assertNotNull(expandedRatingCurve21);
        org.junit.Assert.assertNotNull(expandedRatingCurve22);
        org.junit.Assert.assertNotNull(offsetPointArray23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(ratingPointArray30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNull(periodOfApplicabilityList34);
        org.junit.Assert.assertNull(ratingCurveType36);
        org.junit.Assert.assertNotNull(expandedRatingCurve40);
        org.junit.Assert.assertNotNull(parameterWithUnit41);
        org.junit.Assert.assertNull(ratingCurveType43);
        org.junit.Assert.assertNotNull(expandedRatingCurve47);
        org.junit.Assert.assertNotNull(parameterWithUnit48);
        org.junit.Assert.assertNotNull(expandedRatingCurve53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "/AQUARIUS/Provisioning/v1" + "'", str54, "/AQUARIUS/Provisioning/v1");
        org.junit.Assert.assertNotNull(ratingCurve55);
    }

    @Test
    public void test24416() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest48.test24416");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostTag postTag0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostTag();
        java.lang.String str1 = postTag0.Description;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostTag postTag3 = postTag0.setName("MaxInstant");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostTag postTag5 = postTag3.setName("yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ");
        java.lang.String str6 = postTag3.Description;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutUnitGroup putUnitGroup7 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutUnitGroup();
        java.lang.String str8 = putUnitGroup7.getCustomId();
        java.lang.Boolean boolean9 = putUnitGroup7.SupportsConversion;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutUnitGroupWithUnit putUnitGroupWithUnit10 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutUnitGroupWithUnit();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutUnitGroupWithUnit putUnitGroupWithUnit12 = putUnitGroupWithUnit10.setId("yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UnitGroupSystemCodeType unitGroupSystemCodeType13 = putUnitGroupWithUnit10.SystemCode;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutAccessGroup putAccessGroup14 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutAccessGroup();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivity samplingPlanPlannedActivity15 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivity();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes16 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivity samplingPlanPlannedActivity17 = samplingPlanPlannedActivity15.setAuditAttributes(auditAttributes16);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes18 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes20 = auditAttributes18.setCreationUserProfileId("'.'SSSSSSS");
        samplingPlanPlannedActivity17.AuditAttributes = auditAttributes18;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes22 = samplingPlanPlannedActivity17.AuditAttributes;
        putAccessGroup14.AuditAttributes = auditAttributes22;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutUnitGroupWithUnit putUnitGroupWithUnit24 = putUnitGroupWithUnit10.setAuditAttributes(auditAttributes22);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutUnitGroup putUnitGroup25 = putUnitGroup7.setAuditAttributes(auditAttributes22);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLaboratory postLaboratory26 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLaboratory();
        java.lang.String str27 = postLaboratory26.Address;
        java.lang.String str28 = postLaboratory26.Name;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivity samplingPlanPlannedActivity29 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivity();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes30 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivity samplingPlanPlannedActivity31 = samplingPlanPlannedActivity29.setAuditAttributes(auditAttributes30);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes32 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes34 = auditAttributes32.setCreationUserProfileId("'.'SSSSSSS");
        samplingPlanPlannedActivity31.AuditAttributes = auditAttributes32;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes36 = samplingPlanPlannedActivity31.AuditAttributes;
        postLaboratory26.AuditAttributes = auditAttributes36;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLaboratory postLaboratory39 = postLaboratory26.setName("yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes40 = postLaboratory39.AuditAttributes;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutUnitGroup putUnitGroup41 = putUnitGroup7.setAuditAttributes(auditAttributes40);
        postTag3.AuditAttributes = auditAttributes40;
        java.lang.String str43 = postTag3.getDescription();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(postTag3);
        org.junit.Assert.assertNotNull(postTag5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNull(boolean9);
        org.junit.Assert.assertNotNull(putUnitGroupWithUnit12);
        org.junit.Assert.assertNull(unitGroupSystemCodeType13);
        org.junit.Assert.assertNotNull(samplingPlanPlannedActivity17);
        org.junit.Assert.assertNotNull(auditAttributes20);
        org.junit.Assert.assertNotNull(auditAttributes22);
        org.junit.Assert.assertNotNull(putUnitGroupWithUnit24);
        org.junit.Assert.assertNotNull(putUnitGroup25);
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertNotNull(samplingPlanPlannedActivity31);
        org.junit.Assert.assertNotNull(auditAttributes34);
        org.junit.Assert.assertNotNull(auditAttributes36);
        org.junit.Assert.assertNotNull(postLaboratory39);
        org.junit.Assert.assertNotNull(auditAttributes40);
        org.junit.Assert.assertNotNull(putUnitGroup41);
        org.junit.Assert.assertNull(str43);
    }

    @Test
    public void test24417() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest48.test24417");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabReportImportHistoryEvent labReportImportHistoryEvent0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabReportImportHistoryEvent();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEvent importHistoryEvent1 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEvent();
        java.time.OffsetDateTime offsetDateTime2 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEvent importHistoryEvent3 = importHistoryEvent1.setImportTime(offsetDateTime2);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportType importType4 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportType.OBSERVED_PROPERTIES_CSV;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEvent importHistoryEvent5 = importHistoryEvent3.setImportType(importType4);
        importHistoryEvent3.TimeZoneOffset = "2021.4.62.0";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabReportImportHistoryEvent labReportImportHistoryEvent8 = labReportImportHistoryEvent0.setImportHistoryEvent(importHistoryEvent3);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabReport labReport9 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabReport();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Laboratory laboratory10 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Laboratory();
        laboratory10.Id = "MaxInstant";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Laboratory laboratory14 = laboratory10.setName("hi!:///AQUARIUS/Provisioning/v1");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabReport labReport15 = labReport9.setLaboratory(laboratory14);
        java.lang.String str16 = labReport15.getQcSummary();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabReport labReport18 = labReport15.setCustomId("http");
        java.time.OffsetDateTime offsetDateTime19 = null;
        labReport18.DateReceived = offsetDateTime19;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabReport labReport22 = labReport18.setCustomId("MinInstant");
        java.time.OffsetDateTime offsetDateTime23 = null;
        labReport18.DateReceived = offsetDateTime23;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabReportImportHistoryEvent labReportImportHistoryEvent25 = labReportImportHistoryEvent0.setLabReport(labReport18);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEvent importHistoryEvent26 = labReportImportHistoryEvent25.getImportHistoryEvent();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UserProfile userProfile27 = importHistoryEvent26.ImportedBy;
        org.junit.Assert.assertNotNull(importHistoryEvent3);
        org.junit.Assert.assertTrue("'" + importType4 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportType.OBSERVED_PROPERTIES_CSV + "'", importType4.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportType.OBSERVED_PROPERTIES_CSV));
        org.junit.Assert.assertNotNull(importHistoryEvent5);
        org.junit.Assert.assertNotNull(labReportImportHistoryEvent8);
        org.junit.Assert.assertNotNull(laboratory14);
        org.junit.Assert.assertNotNull(labReport15);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNotNull(labReport18);
        org.junit.Assert.assertNotNull(labReport22);
        org.junit.Assert.assertNotNull(labReportImportHistoryEvent25);
        org.junit.Assert.assertNotNull(importHistoryEvent26);
        org.junit.Assert.assertNull(userProfile27);
    }

    @Test
    public void test24418() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest48.test24418");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedPoint timeAlignedPoint0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedPoint();
        timeAlignedPoint0.Method9 = "multipart/form-data; boundary=****7eff1774-b6b0-471a-961c-156c64359366****";
        timeAlignedPoint0.DisplayValue9 = "";
        java.lang.String str5 = timeAlignedPoint0.getApprovalName4();
        java.lang.Long long6 = timeAlignedPoint0.getGradeCode3();
        java.lang.Double double7 = timeAlignedPoint0.NumericValue6;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedPoint timeAlignedPoint9 = timeAlignedPoint0.setDisplayValue6("multipart/form-data; boundary=****ee0ec537-fde4-45ee-9c35-68c37cf65c1c****");
        java.lang.String str10 = timeAlignedPoint0.getDisplayValue7();
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(long6);
        org.junit.Assert.assertNull(double7);
        org.junit.Assert.assertNotNull(timeAlignedPoint9);
        org.junit.Assert.assertNull(str10);
    }

    @Test
    public void test24419() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest48.test24419");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedPoint timeAlignedPoint0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedPoint();
        timeAlignedPoint0.Method9 = "multipart/form-data; boundary=****7eff1774-b6b0-471a-961c-156c64359366****";
        timeAlignedPoint0.DisplayValue9 = "";
        java.lang.String str5 = timeAlignedPoint0.getApprovalName4();
        java.lang.Long long6 = timeAlignedPoint0.getGradeCode3();
        java.lang.String str7 = timeAlignedPoint0.ApprovalName5;
        java.lang.String str8 = timeAlignedPoint0.GradeName8;
        timeAlignedPoint0.ApprovalName4 = "multipart/form-data; boundary=****7eff1774-b6b0-471a-961c-156c64359366****";
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(long6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(str8);
    }

    @Test
    public void test24420() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest48.test24420");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostBaseStandardReferenceDatum postBaseStandardReferenceDatum0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostBaseStandardReferenceDatum();
        java.lang.String str1 = postBaseStandardReferenceDatum0.getMethod();
        java.lang.Double double2 = postBaseStandardReferenceDatum0.getUncertainty();
        postBaseStandardReferenceDatum0.StandardIdentifier = "multipart/form-data; boundary=****1eab67e1-84c8-4b82-aa06-d6c7526551f8****";
        postBaseStandardReferenceDatum0.Comments = "multipart/form-data; boundary=****e0afd3ef-ab93-4371-a368-4a6f5ef58c71****";
        java.lang.Double double7 = postBaseStandardReferenceDatum0.getUncertainty();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(double2);
        org.junit.Assert.assertNull(double7);
    }

    @Test
    public void test24421() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest48.test24421");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay1 = dischargeSummary0.getMeanGageHeight();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay2 = dischargeSummary0.Discharge;
        java.lang.Integer int3 = dischargeSummary0.getGradeCode();
        java.lang.String str4 = dischargeSummary0.MeasurementId;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DatumConvertedQuantityWithDisplay datumConvertedQuantityWithDisplay5 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DatumConvertedQuantityWithDisplay();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary6 = dischargeSummary0.setAlternateRatingDischarge((com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay) datumConvertedQuantityWithDisplay5);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary8 = dischargeSummary6.setQualityAssuranceComments("****231224c4-98ce-4e30-bd65-1d25287c4abe****");
        org.junit.Assert.assertNull(quantityWithDisplay1);
        org.junit.Assert.assertNull(quantityWithDisplay2);
        org.junit.Assert.assertNull(int3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNotNull(dischargeSummary6);
        org.junit.Assert.assertNotNull(dischargeSummary8);
    }

    @Test
    public void test24422() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest48.test24422");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabInstructionTemplate labInstructionTemplate0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabInstructionTemplate();
        java.lang.String str1 = labInstructionTemplate0.HoldingTime;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty observedProperty2 = labInstructionTemplate0.getObservedProperty();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabInstructionTemplate labInstructionTemplate4 = labInstructionTemplate0.setPreparationMethod("/AQUARIUS");
        labInstructionTemplate4.AnalysisComment = "'.'SSSSSSS";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabInstructionTemplate labInstructionTemplate8 = labInstructionTemplate4.setHoldingTime("multipart/form-data; boundary=****2917d69a-62fa-41ce-b981-4dbe2deab9f5****");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabInstructionTemplate labInstructionTemplate10 = labInstructionTemplate4.setId("/AQUARIUS/Acquisition/v2");
        labInstructionTemplate10.PreparationMethod = "hi!:///AQUARIUS/Provisioning/v1";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabInstructionTemplate labInstructionTemplate14 = labInstructionTemplate10.setPreparationMethod("ZZZZZ");
        labInstructionTemplate14.PreparationMethod = "/api";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes17 = labInstructionTemplate14.getAuditAttributes();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(observedProperty2);
        org.junit.Assert.assertNotNull(labInstructionTemplate4);
        org.junit.Assert.assertNotNull(labInstructionTemplate8);
        org.junit.Assert.assertNotNull(labInstructionTemplate10);
        org.junit.Assert.assertNotNull(labInstructionTemplate14);
        org.junit.Assert.assertNull(auditAttributes17);
    }

    @Test
    public void test24423() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest48.test24423");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceRequest locationDescriptionListServiceRequest0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceRequest();
        java.lang.String str1 = locationDescriptionListServiceRequest0.LocationName;
        locationDescriptionListServiceRequest0.Publish = true;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportSpecimens getExportSpecimens4 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportSpecimens();
        java.util.List<java.lang.String> strList5 = getExportSpecimens4.getActivityTypes();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Qualifier qualifier6 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Qualifier();
        java.time.Instant instant7 = qualifier6.DateApplied;
        java.lang.String str8 = qualifier6.User;
        java.lang.String str9 = qualifier6.getIdentifier();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest10 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest();
        java.lang.Object obj11 = timeAlignedDataServiceRequest10.getResponseType();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse12 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant13 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse14 = locationDescriptionListServiceResponse12.setNextToken(instant13);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest15 = timeAlignedDataServiceRequest10.setQueryFrom(instant13);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Qualifier qualifier16 = qualifier6.setDateApplied(instant13);
        getExportSpecimens4.Before = instant13;
        java.util.List<java.lang.String> strList18 = getExportSpecimens4.getLaboratoryIds();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItem importItem19 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_20 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray22 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList23 = new java.util.ArrayList<java.lang.String>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList23, strArray22);
        getObservationsV2_20.SpecimenIds = strList23;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags26 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray30 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList31 = new java.util.ArrayList<java.lang.String>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList31, strArray30);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags33 = putLocationTags26.setTagUniqueIds(strList31);
        getObservationsV2_20.QualityControlTypes = strList31;
        java.util.List<java.lang.String> strList35 = getObservationsV2_20.getLabReportIds();
        importItem19.Errors = getObservationsV2_20;
        java.lang.Object obj37 = importItem19.getExistingItem();
        java.util.List<java.lang.String> strList38 = importItem19.getFields();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItem importItem39 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_40 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray42 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList43 = new java.util.ArrayList<java.lang.String>();
        boolean boolean44 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList43, strArray42);
        getObservationsV2_40.SpecimenIds = strList43;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags46 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray50 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList51 = new java.util.ArrayList<java.lang.String>();
        boolean boolean52 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList51, strArray50);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags53 = putLocationTags46.setTagUniqueIds(strList51);
        getObservationsV2_40.QualityControlTypes = strList51;
        java.util.List<java.lang.String> strList55 = getObservationsV2_40.getLabReportIds();
        importItem39.Errors = getObservationsV2_40;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_57 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.util.List<java.lang.String> strList58 = getObservationsV2_57.SamplingContextTagIds;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_59 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray61 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList62 = new java.util.ArrayList<java.lang.String>();
        boolean boolean63 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList62, strArray61);
        getObservationsV2_59.SpecimenIds = strList62;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags65 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray69 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList70 = new java.util.ArrayList<java.lang.String>();
        boolean boolean71 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList70, strArray69);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags72 = putLocationTags65.setTagUniqueIds(strList70);
        getObservationsV2_59.QualityControlTypes = strList70;
        getObservationsV2_57.ResultGrades = strList70;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItem importItem75 = importItem39.setFields((java.util.List<java.lang.String>) strList70);
        importItem19.Fields = strList70;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportSpecimens getExportSpecimens77 = getExportSpecimens4.setSamplingLocationIds((java.util.List<java.lang.String>) strList70);
        locationDescriptionListServiceRequest0.TagKeys = strList70;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceRequest locationDescriptionListServiceRequest80 = locationDescriptionListServiceRequest0.setLocationIdentifier("MaxDuration");
        java.util.ArrayList<java.lang.String> strList81 = locationDescriptionListServiceRequest80.TagKeys;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(strList5);
        org.junit.Assert.assertNull(instant7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(obj11);
        org.junit.Assert.assertEquals(obj11.toString(), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj11), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj11), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertNotNull(instant13);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse14);
        org.junit.Assert.assertNotNull(timeAlignedDataServiceRequest15);
        org.junit.Assert.assertNotNull(qualifier16);
        org.junit.Assert.assertNull(strList18);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(putLocationTags33);
        org.junit.Assert.assertNull(strList35);
        org.junit.Assert.assertNull(obj37);
        org.junit.Assert.assertNull(strList38);
        org.junit.Assert.assertNotNull(strArray42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(strArray50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(putLocationTags53);
        org.junit.Assert.assertNull(strList55);
        org.junit.Assert.assertNull(strList58);
        org.junit.Assert.assertNotNull(strArray61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNotNull(strArray69);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertNotNull(putLocationTags72);
        org.junit.Assert.assertNotNull(importItem75);
        org.junit.Assert.assertNotNull(getExportSpecimens77);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceRequest80);
        org.junit.Assert.assertNotNull(strList81);
    }

    @Test
    public void test24424() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest48.test24424");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutObservationV2 putObservationV2_0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutObservationV2();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty observedProperty1 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutObservationV2 putObservationV2_2 = putObservationV2_0.setObservedProperty(observedProperty1);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Activity activity3 = putObservationV2_2.Activity;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DataClassificationType dataClassificationType4 = putObservationV2_2.getDataClassification();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.CategoricalResult categoricalResult5 = putObservationV2_2.CategoricalResult;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Specimen specimen6 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutObservationV2 putObservationV2_7 = putObservationV2_2.setSpecimen(specimen6);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity postActivity8 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity();
        postActivity8.SourceActivityId = "2021.4.62.0";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity plannedActivity11 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity postActivity12 = postActivity8.setPlannedActivity(plannedActivity11);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity postActivity14 = postActivity8.setLoggerFileName("https");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation15 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedFieldResult plannedFieldResult16 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation17 = observation15.setPlannedFieldResult(plannedFieldResult16);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabInstruction labInstruction18 = null;
        observation17.LabInstruction = labInstruction18;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationStatistics observationStatistics20 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation21 = observation17.setStatistics(observationStatistics20);
        java.time.OffsetDateTime offsetDateTime22 = observation21.getResultTime();
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple> importHistoryEventSimpleList23 = observation21.ImportHistoryEventSimples;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty observedProperty24 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation25 = observation21.setObservedProperty(observedProperty24);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.RuleValidationDetails[] ruleValidationDetailsArray26 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.RuleValidationDetails[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.RuleValidationDetails> ruleValidationDetailsList27 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.RuleValidationDetails>();
        boolean boolean28 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.RuleValidationDetails>) ruleValidationDetailsList27, ruleValidationDetailsArray26);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation29 = observation21.setValidationWarnings((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.RuleValidationDetails>) ruleValidationDetailsList27);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity postActivity30 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttribute[] extendedAttributeArray31 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttribute[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttribute> extendedAttributeList32 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttribute>();
        boolean boolean33 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttribute>) extendedAttributeList32, extendedAttributeArray31);
        postActivity30.ExtendedAttributes = extendedAttributeList32;
        observation29.ExtendedAttributes = extendedAttributeList32;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity postActivity36 = postActivity8.setExtendedAttributes((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttribute>) extendedAttributeList32);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutObservationV2 putObservationV2_37 = putObservationV2_2.setExtendedAttributes((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttribute>) extendedAttributeList32);
        java.time.OffsetDateTime offsetDateTime38 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutObservationV2 putObservationV2_39 = putObservationV2_2.setObservedTime(offsetDateTime38);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Specimen specimen40 = putObservationV2_2.Specimen;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.CategoricalResult categoricalResult41 = putObservationV2_2.CategoricalResult;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationMinimal observationMinimal42 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationMinimal();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenNestedInActivity specimenNestedInActivity43 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationMinimal observationMinimal44 = observationMinimal42.setSpecimen(specimenNestedInActivity43);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty observedProperty45 = observationMinimal44.ObservedProperty;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.CategoricalResult categoricalResult46 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.CategoricalResult();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.CategoricalValue categoricalValue47 = categoricalResult46.getFixedValue();
        observationMinimal44.CategoricalResult = categoricalResult46;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.NullMeasureQualifier nullMeasureQualifier49 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.NullMeasureQualifier();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes50 = nullMeasureQualifier49.AuditAttributes;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.CategoricalResult categoricalResult51 = categoricalResult46.setNullMeasureQualifier(nullMeasureQualifier49);
        nullMeasureQualifier49.Id = "9999-12-31T23:59:59.9999999Z";
        java.lang.String str54 = nullMeasureQualifier49.getId();
        putObservationV2_2.NullMeasureQualifier = nullMeasureQualifier49;
        org.junit.Assert.assertNotNull(putObservationV2_2);
        org.junit.Assert.assertNull(activity3);
        org.junit.Assert.assertNull(dataClassificationType4);
        org.junit.Assert.assertNull(categoricalResult5);
        org.junit.Assert.assertNotNull(putObservationV2_7);
        org.junit.Assert.assertNotNull(postActivity12);
        org.junit.Assert.assertNotNull(postActivity14);
        org.junit.Assert.assertNotNull(observation17);
        org.junit.Assert.assertNotNull(observation21);
        org.junit.Assert.assertNull(offsetDateTime22);
        org.junit.Assert.assertNull(importHistoryEventSimpleList23);
        org.junit.Assert.assertNotNull(observation25);
        org.junit.Assert.assertNotNull(ruleValidationDetailsArray26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(observation29);
        org.junit.Assert.assertNotNull(extendedAttributeArray31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(postActivity36);
        org.junit.Assert.assertNotNull(putObservationV2_37);
        org.junit.Assert.assertNotNull(putObservationV2_39);
        org.junit.Assert.assertNull(specimen40);
        org.junit.Assert.assertNull(categoricalResult41);
        org.junit.Assert.assertNotNull(observationMinimal44);
        org.junit.Assert.assertNull(observedProperty45);
        org.junit.Assert.assertNull(categoricalValue47);
        org.junit.Assert.assertNull(auditAttributes50);
        org.junit.Assert.assertNotNull(categoricalResult51);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "9999-12-31T23:59:59.9999999Z" + "'", str54, "9999-12-31T23:59:59.9999999Z");
    }

    @Test
    public void test24425() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest48.test24425");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SearchResultSchedule searchResultSchedule0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SearchResultSchedule();
        searchResultSchedule0.Cursor = "multipart/form-data; boundary=****bbcf5f9e-6ccf-4b63-91ab-6e645caf02af****";
        searchResultSchedule0.Cursor = "http://MaxDurationhttp/json/reply/ArrayList";
        searchResultSchedule0.TotalCount = 100;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SearchResultSchedule searchResultSchedule8 = searchResultSchedule0.setCursor("multipart/form-data; boundary=****231224c4-98ce-4e30-bd65-1d25287c4abe****");
        org.junit.Assert.assertNotNull(searchResultSchedule8);
    }

    @Test
    public void test24426() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest48.test24426");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SearchResultTaxonomyLevel searchResultTaxonomyLevel0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SearchResultTaxonomyLevel();
        java.lang.String str1 = searchResultTaxonomyLevel0.getCursor();
        java.lang.Integer int2 = searchResultTaxonomyLevel0.TotalCount;
        java.lang.Integer int3 = searchResultTaxonomyLevel0.TotalCount;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SearchResultTaxonomyLevel searchResultTaxonomyLevel5 = searchResultTaxonomyLevel0.setCursor("multipart/form-data; boundary=****6b8051d4-caf2-4095-9f11-faa36b95fc28****");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SearchResultTaxonomyLevel searchResultTaxonomyLevel7 = searchResultTaxonomyLevel5.setTotalCount((java.lang.Integer) 4);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SearchResultTaxonomyLevel searchResultTaxonomyLevel9 = searchResultTaxonomyLevel7.setCursor("multipart/form-data; boundary=****bbcf5f9e-6ccf-4b63-91ab-6e645caf02af****");
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(int2);
        org.junit.Assert.assertNull(int3);
        org.junit.Assert.assertNotNull(searchResultTaxonomyLevel5);
        org.junit.Assert.assertNotNull(searchResultTaxonomyLevel7);
        org.junit.Assert.assertNotNull(searchResultTaxonomyLevel9);
    }

    @Test
    public void test24427() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest48.test24427");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedPoint timeAlignedPoint0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedPoint();
        timeAlignedPoint0.Method9 = "multipart/form-data; boundary=****7eff1774-b6b0-471a-961c-156c64359366****";
        timeAlignedPoint0.DisplayValue9 = "";
        java.lang.String str5 = timeAlignedPoint0.getApprovalName4();
        java.lang.Long long6 = timeAlignedPoint0.getGradeCode3();
        java.lang.String str7 = timeAlignedPoint0.ApprovalName5;
        java.lang.String str8 = timeAlignedPoint0.getApprovalName6();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedPoint timeAlignedPoint10 = timeAlignedPoint0.setQualifiers6("/AQUARIUS/Provisioning/v1");
        timeAlignedPoint10.NumericValue4 = 10.0d;
        java.lang.String str13 = timeAlignedPoint10.getGradeName2();
        timeAlignedPoint10.GradeCode3 = (-1L);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(long6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(timeAlignedPoint10);
        org.junit.Assert.assertNull(str13);
    }

    @Test
    public void test24428() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest48.test24428");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.PostVisitFileResponse postVisitFileResponse0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.PostVisitFileResponse();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.FieldDataPlugin fieldDataPlugin1 = null;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.PostVisitFileResponse postVisitFileResponse2 = postVisitFileResponse0.setHandledByPlugin(fieldDataPlugin1);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.FieldDataPlugin fieldDataPlugin3 = postVisitFileResponse0.getHandledByPlugin();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitDataByLocationServiceRequest fieldVisitDataByLocationServiceRequest4 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitDataByLocationServiceRequest();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitDataByLocationServiceRequest fieldVisitDataByLocationServiceRequest6 = fieldVisitDataByLocationServiceRequest4.setIncludeNodeDetails((java.lang.Boolean) true);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags7 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray11 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList12 = new java.util.ArrayList<java.lang.String>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList12, strArray11);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags14 = putLocationTags7.setTagUniqueIds(strList12);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitDataByLocationServiceRequest fieldVisitDataByLocationServiceRequest15 = fieldVisitDataByLocationServiceRequest6.setParameters(strList12);
        java.util.ArrayList<java.lang.String> strList16 = fieldVisitDataByLocationServiceRequest15.getParameters();
        postVisitFileResponse0.VisitUris = strList16;
        java.util.ArrayList<java.lang.String> strList18 = null;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.PostVisitFileResponse postVisitFileResponse19 = postVisitFileResponse0.setVisitUris(strList18);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.FieldDataPlugin fieldDataPlugin20 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.FieldDataPlugin();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.PostVisitFileResponse postVisitFileResponse21 = postVisitFileResponse0.setHandledByPlugin(fieldDataPlugin20);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.FieldDataPlugin fieldDataPlugin23 = fieldDataPlugin20.setUniqueId("multipart/form-data; boundary=****f642a130-eb6d-4fb6-a1a4-7c7216ab119b****");
        fieldDataPlugin23.UniqueId = "hi!";
        org.junit.Assert.assertNotNull(postVisitFileResponse2);
        org.junit.Assert.assertNull(fieldDataPlugin3);
        org.junit.Assert.assertNotNull(fieldVisitDataByLocationServiceRequest6);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(putLocationTags14);
        org.junit.Assert.assertNotNull(fieldVisitDataByLocationServiceRequest15);
        org.junit.Assert.assertNotNull(strList16);
        org.junit.Assert.assertNotNull(postVisitFileResponse19);
        org.junit.Assert.assertNotNull(postVisitFileResponse21);
        org.junit.Assert.assertNotNull(fieldDataPlugin23);
    }

    @Test
    public void test24429() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest48.test24429");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostSamplingLocation postSamplingLocation0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostSamplingLocation();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostSamplingLocation postSamplingLocation1 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostSamplingLocation();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple standardSimple2 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple();
        com.aquaticinformatics.aquarius.sdk.samples.Interval interval3 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple standardSimple4 = standardSimple2.setApplicabilityRange(interval3);
        java.lang.String str5 = standardSimple2.getCustomId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple standardSimple6 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple();
        com.aquaticinformatics.aquarius.sdk.samples.Interval interval7 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple standardSimple8 = standardSimple6.setApplicabilityRange(interval7);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple standardSimple10 = standardSimple6.setActive((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple standardSimple11 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple standardSimple12 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple();
        com.aquaticinformatics.aquarius.sdk.samples.Interval interval13 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple standardSimple14 = standardSimple12.setApplicabilityRange(interval13);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple standardSimple16 = standardSimple12.setActive((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple standardSimple17 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple();
        com.aquaticinformatics.aquarius.sdk.samples.Interval interval18 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple standardSimple19 = standardSimple17.setApplicabilityRange(interval18);
        java.lang.String str20 = standardSimple19.CustomId;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple standardSimple21 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple standardSimple22 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple standardSimple23 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple();
        com.aquaticinformatics.aquarius.sdk.samples.Interval interval24 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple standardSimple25 = standardSimple23.setApplicabilityRange(interval24);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple standardSimple26 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple();
        com.aquaticinformatics.aquarius.sdk.samples.Interval interval27 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple standardSimple28 = standardSimple26.setApplicabilityRange(interval27);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple[] standardSimpleArray29 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple[] { standardSimple2, standardSimple6, standardSimple11, standardSimple12, standardSimple19, standardSimple21, standardSimple22, standardSimple25, standardSimple26 };
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple> standardSimpleList30 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple>();
        boolean boolean31 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple>) standardSimpleList30, standardSimpleArray29);
        postSamplingLocation1.Standards = standardSimpleList30;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutFieldVisit putFieldVisit33 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutFieldVisit();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity[] plannedActivityArray34 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity> plannedActivityList35 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity>();
        boolean boolean36 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity>) plannedActivityList35, plannedActivityArray34);
        putFieldVisit33.PlannedActivities = plannedActivityList35;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment38 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment();
        java.lang.String str39 = domainObjectAttachment38.getId();
        java.lang.String str40 = domainObjectAttachment38.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Attachment attachment41 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment42 = domainObjectAttachment38.setAttachment(attachment41);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment43 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment();
        java.lang.String str44 = domainObjectAttachment43.getId();
        java.lang.String str45 = domainObjectAttachment43.getId();
        domainObjectAttachment43.Id = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment49 = domainObjectAttachment43.setId("hi!");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment50 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment();
        java.lang.String str51 = domainObjectAttachment50.getId();
        java.lang.String str52 = domainObjectAttachment50.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Attachment attachment53 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment54 = domainObjectAttachment50.setAttachment(attachment53);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment55 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment();
        java.lang.String str56 = domainObjectAttachment55.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment57 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment();
        java.lang.String str58 = domainObjectAttachment57.getId();
        java.lang.String str59 = domainObjectAttachment57.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Attachment attachment60 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment61 = domainObjectAttachment57.setAttachment(attachment60);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment62 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment();
        java.lang.String str63 = domainObjectAttachment62.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment[] domainObjectAttachmentArray64 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment[] { domainObjectAttachment38, domainObjectAttachment43, domainObjectAttachment50, domainObjectAttachment55, domainObjectAttachment57, domainObjectAttachment62 };
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment> domainObjectAttachmentList65 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment>();
        boolean boolean66 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment>) domainObjectAttachmentList65, domainObjectAttachmentArray64);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutFieldVisit putFieldVisit67 = putFieldVisit33.setAttachments((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment>) domainObjectAttachmentList65);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlan samplingPlan68 = putFieldVisit33.getSamplingPlan();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.FieldTripSimple fieldTripSimple69 = putFieldVisit33.getFieldTrip();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Schedule schedule70 = putFieldVisit33.Schedule;
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment> domainObjectAttachmentList71 = putFieldVisit33.Attachments;
        postSamplingLocation1.Attachments = domainObjectAttachmentList71;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostSamplingLocation postSamplingLocation73 = postSamplingLocation0.setAttachments(domainObjectAttachmentList71);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostSamplingLocation postSamplingLocation75 = postSamplingLocation73.setName("POST");
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple> standardSimpleList76 = postSamplingLocation73.Standards;
        postSamplingLocation73.Latitude = "https";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ShippingContainer shippingContainer79 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ShippingContainer();
        java.lang.String str80 = shippingContainer79.getTrackingId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity postActivity81 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity();
        postActivity81.LoggerFileName = "hi!";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity postActivity85 = postActivity81.setCustomId("");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes86 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity postActivity87 = postActivity85.setAuditAttributes(auditAttributes86);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ShippingContainer shippingContainer88 = shippingContainer79.setAuditAttributes(auditAttributes86);
        postSamplingLocation73.AuditAttributes = auditAttributes86;
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple> importHistoryEventSimpleList90 = postSamplingLocation73.getImportHistoryEventSimples();
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttribute> extendedAttributeList91 = postSamplingLocation73.ExtendedAttributes;
        org.junit.Assert.assertNotNull(standardSimple4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(standardSimple8);
        org.junit.Assert.assertNotNull(standardSimple10);
        org.junit.Assert.assertNotNull(standardSimple14);
        org.junit.Assert.assertNotNull(standardSimple16);
        org.junit.Assert.assertNotNull(standardSimple19);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNotNull(standardSimple25);
        org.junit.Assert.assertNotNull(standardSimple28);
        org.junit.Assert.assertNotNull(standardSimpleArray29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(plannedActivityArray34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertNull(str40);
        org.junit.Assert.assertNotNull(domainObjectAttachment42);
        org.junit.Assert.assertNull(str44);
        org.junit.Assert.assertNull(str45);
        org.junit.Assert.assertNotNull(domainObjectAttachment49);
        org.junit.Assert.assertNull(str51);
        org.junit.Assert.assertNull(str52);
        org.junit.Assert.assertNotNull(domainObjectAttachment54);
        org.junit.Assert.assertNull(str56);
        org.junit.Assert.assertNull(str58);
        org.junit.Assert.assertNull(str59);
        org.junit.Assert.assertNotNull(domainObjectAttachment61);
        org.junit.Assert.assertNull(str63);
        org.junit.Assert.assertNotNull(domainObjectAttachmentArray64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertNotNull(putFieldVisit67);
        org.junit.Assert.assertNull(samplingPlan68);
        org.junit.Assert.assertNull(fieldTripSimple69);
        org.junit.Assert.assertNull(schedule70);
        org.junit.Assert.assertNotNull(domainObjectAttachmentList71);
        org.junit.Assert.assertNotNull(postSamplingLocation73);
        org.junit.Assert.assertNotNull(postSamplingLocation75);
        org.junit.Assert.assertNull(standardSimpleList76);
        org.junit.Assert.assertNull(str80);
        org.junit.Assert.assertNotNull(postActivity85);
        org.junit.Assert.assertNotNull(postActivity87);
        org.junit.Assert.assertNotNull(shippingContainer88);
        org.junit.Assert.assertNull(importHistoryEventSimpleList90);
        org.junit.Assert.assertNull(extendedAttributeList91);
    }

    @Test
    public void test24430() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest48.test24430");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportError importError0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportError();
        importError0.ErrorMessage = "";
        importError0.ErrorFieldValue = "multipart/form-data; boundary=****bbcf5f9e-6ccf-4b63-91ab-6e645caf02af****";
        java.lang.String str5 = importError0.ErrorMessage;
        importError0.ErrorMessage = "0001-01-01T00:00:00.0000000Z";
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
    }

    @Test
    public void test24431() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest48.test24431");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutStandard putStandard0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutStandard();
        com.aquaticinformatics.aquarius.sdk.samples.Interval interval1 = new com.aquaticinformatics.aquarius.sdk.samples.Interval();
        java.time.Instant instant2 = interval1.Start;
        java.time.Instant instant3 = interval1.End;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutStandard putStandard4 = putStandard0.setApplicabilityRange(interval1);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutStandard putStandard6 = putStandard0.setCustomId("MaxInstant");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostStandard postStandard7 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostStandard();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostStandard postStandard9 = postStandard7.setCustomId("/AQUARIUS/Provisioning/v1");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostStandard postStandard11 = postStandard9.setId("/AQUARIUS/Acquisition/v2://9999-12-31T23:59:59.999Z");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostStandard postStandard13 = postStandard11.setDescription("/AQUARIUS/Provisioning/v1");
        postStandard11.Id = "multipart/form-data; boundary=****44f0772e-c3ca-4316-8e2a-61ec8540d661****";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostStandard postStandard16 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostStandard();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostStandard postStandard18 = postStandard16.setCustomId("/AQUARIUS/Provisioning/v1");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostStandard postStandard20 = postStandard18.setId("/AQUARIUS/Acquisition/v2://9999-12-31T23:59:59.999Z");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationStandard[] observationStandardArray21 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationStandard[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationStandard> observationStandardList22 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationStandard>();
        boolean boolean23 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationStandard>) observationStandardList22, observationStandardArray21);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostStandard postStandard24 = postStandard20.setObservationStandards((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationStandard>) observationStandardList22);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostStandard postStandard26 = postStandard20.setActive((java.lang.Boolean) false);
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationStandard> observationStandardList27 = postStandard26.getObservationStandards();
        postStandard11.ObservationStandards = observationStandardList27;
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationStandard> observationStandardList29 = postStandard11.getObservationStandards();
        putStandard0.ObservationStandards = observationStandardList29;
        org.junit.Assert.assertNull(instant2);
        org.junit.Assert.assertNull(instant3);
        org.junit.Assert.assertNotNull(putStandard4);
        org.junit.Assert.assertNotNull(putStandard6);
        org.junit.Assert.assertNotNull(postStandard9);
        org.junit.Assert.assertNotNull(postStandard11);
        org.junit.Assert.assertNotNull(postStandard13);
        org.junit.Assert.assertNotNull(postStandard18);
        org.junit.Assert.assertNotNull(postStandard20);
        org.junit.Assert.assertNotNull(observationStandardArray21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(postStandard24);
        org.junit.Assert.assertNotNull(postStandard26);
        org.junit.Assert.assertNotNull(observationStandardList27);
        org.junit.Assert.assertNotNull(observationStandardList29);
    }

    @Test
    public void test24432() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest48.test24432");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetUnitGroupHistory getUnitGroupHistory0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetUnitGroupHistory();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetUnitGroupHistory getUnitGroupHistory2 = getUnitGroupHistory0.setId("/AQUARIUS");
        java.lang.String str3 = getUnitGroupHistory0.Id;
        org.junit.Assert.assertNotNull(getUnitGroupHistory2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "/AQUARIUS" + "'", str3, "/AQUARIUS");
    }

    @Test
    public void test24433() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest48.test24433");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedPoint timeAlignedPoint0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedPoint();
        timeAlignedPoint0.Method9 = "multipart/form-data; boundary=****7eff1774-b6b0-471a-961c-156c64359366****";
        timeAlignedPoint0.DisplayValue9 = "";
        java.lang.String str5 = timeAlignedPoint0.getApprovalName4();
        java.lang.Long long6 = timeAlignedPoint0.getGradeCode3();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedPoint timeAlignedPoint8 = timeAlignedPoint0.setMethod10("hi!:///AQUARIUS/Provisioning/v1");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedPoint timeAlignedPoint10 = timeAlignedPoint8.setGradeName10("MaxInstant");
        java.lang.String str11 = timeAlignedPoint8.GradeName1;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedPoint timeAlignedPoint13 = timeAlignedPoint8.setApprovalName5("http://MaxDurationhttp/json/reply/String");
        java.lang.String str14 = timeAlignedPoint13.GradeName1;
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(long6);
        org.junit.Assert.assertNotNull(timeAlignedPoint8);
        org.junit.Assert.assertNotNull(timeAlignedPoint10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNotNull(timeAlignedPoint13);
        org.junit.Assert.assertNull(str14);
    }

    @Test
    public void test24434() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest48.test24434");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CorrectionOperation correctionOperation0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CorrectionOperation();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CorrectionType correctionType1 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CorrectionType.AdjustableTrim;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CorrectionOperation correctionOperation2 = correctionOperation0.setType(correctionType1);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeOperationType metadataChangeOperationType3 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeOperationType.Creation;
        correctionOperation0.OperationType = metadataChangeOperationType3;
        java.time.Instant instant5 = null;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CorrectionOperation correctionOperation6 = correctionOperation0.setDateAppliedUtc(instant5);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MethodOperation methodOperation7 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MethodOperation();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeOperationType metadataChangeOperationType8 = methodOperation7.getOperationType();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeOperationType metadataChangeOperationType9 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeOperationType.Creation;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MethodOperation methodOperation10 = methodOperation7.setOperationType(metadataChangeOperationType9);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CorrectionOperation correctionOperation11 = correctionOperation6.setOperationType(metadataChangeOperationType9);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CorrectionOperation correctionOperation12 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CorrectionOperation();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CorrectionType correctionType13 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CorrectionType.AdjustableTrim;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CorrectionOperation correctionOperation14 = correctionOperation12.setType(correctionType13);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeOperationType metadataChangeOperationType15 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeOperationType.Creation;
        correctionOperation12.OperationType = metadataChangeOperationType15;
        java.time.Instant instant17 = null;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CorrectionOperation correctionOperation18 = correctionOperation12.setDateAppliedUtc(instant17);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MethodOperation methodOperation19 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MethodOperation();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeOperationType metadataChangeOperationType20 = methodOperation19.getOperationType();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeOperationType metadataChangeOperationType21 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeOperationType.Creation;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MethodOperation methodOperation22 = methodOperation19.setOperationType(metadataChangeOperationType21);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CorrectionOperation correctionOperation23 = correctionOperation18.setOperationType(metadataChangeOperationType21);
        correctionOperation6.OperationType = metadataChangeOperationType21;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TrendLineAnalysisServiceRequest trendLineAnalysisServiceRequest25 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TrendLineAnalysisServiceRequest();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TrendLineAnalysisType trendLineAnalysisType26 = trendLineAnalysisServiceRequest25.getType();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationRemark locationRemark27 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationRemark();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationRemark locationRemark29 = locationRemark27.setDescription("MaxInstant");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse30 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant31 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse32 = locationDescriptionListServiceResponse30.setNextToken(instant31);
        locationRemark29.FromTime = instant31;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationRemark locationRemark35 = locationRemark29.setRemark("/AQUARIUS/Acquisition/v2");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesThresholdPeriod timeSeriesThresholdPeriod36 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesThresholdPeriod();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesThresholdPeriod timeSeriesThresholdPeriod38 = timeSeriesThresholdPeriod36.setReferenceValue((java.lang.Double) 0.0d);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescription locationDescription39 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescription();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescription locationDescription41 = locationDescription39.setIdentifier("");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ControlConditionActivity controlConditionActivity42 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ControlConditionActivity();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ControlCleanedType controlCleanedType43 = null;
        controlConditionActivity42.ControlCleaned = controlCleanedType43;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse45 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant46 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse47 = locationDescriptionListServiceResponse45.setNextToken(instant46);
        controlConditionActivity42.DateCleaned = instant46;
        locationDescription41.LastModified = instant46;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesThresholdPeriod timeSeriesThresholdPeriod50 = timeSeriesThresholdPeriod38.setAppliedTime(instant46);
        locationRemark35.ToTime = instant46;
        trendLineAnalysisServiceRequest25.QueryFrom = instant46;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CorrectionOperation correctionOperation53 = correctionOperation6.setDateAppliedUtc(instant46);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CorrectionOperation correctionOperation55 = correctionOperation6.setUser("MaxInstant");
        correctionOperation6.StackPosition = 0;
        org.junit.Assert.assertTrue("'" + correctionType1 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CorrectionType.AdjustableTrim + "'", correctionType1.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CorrectionType.AdjustableTrim));
        org.junit.Assert.assertNotNull(correctionOperation2);
        org.junit.Assert.assertTrue("'" + metadataChangeOperationType3 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeOperationType.Creation + "'", metadataChangeOperationType3.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeOperationType.Creation));
        org.junit.Assert.assertNotNull(correctionOperation6);
        org.junit.Assert.assertNull(metadataChangeOperationType8);
        org.junit.Assert.assertTrue("'" + metadataChangeOperationType9 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeOperationType.Creation + "'", metadataChangeOperationType9.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeOperationType.Creation));
        org.junit.Assert.assertNotNull(methodOperation10);
        org.junit.Assert.assertNotNull(correctionOperation11);
        org.junit.Assert.assertTrue("'" + correctionType13 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CorrectionType.AdjustableTrim + "'", correctionType13.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CorrectionType.AdjustableTrim));
        org.junit.Assert.assertNotNull(correctionOperation14);
        org.junit.Assert.assertTrue("'" + metadataChangeOperationType15 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeOperationType.Creation + "'", metadataChangeOperationType15.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeOperationType.Creation));
        org.junit.Assert.assertNotNull(correctionOperation18);
        org.junit.Assert.assertNull(metadataChangeOperationType20);
        org.junit.Assert.assertTrue("'" + metadataChangeOperationType21 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeOperationType.Creation + "'", metadataChangeOperationType21.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeOperationType.Creation));
        org.junit.Assert.assertNotNull(methodOperation22);
        org.junit.Assert.assertNotNull(correctionOperation23);
        org.junit.Assert.assertNull(trendLineAnalysisType26);
        org.junit.Assert.assertNotNull(locationRemark29);
        org.junit.Assert.assertNotNull(instant31);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse32);
        org.junit.Assert.assertNotNull(locationRemark35);
        org.junit.Assert.assertNotNull(timeSeriesThresholdPeriod38);
        org.junit.Assert.assertNotNull(locationDescription41);
        org.junit.Assert.assertNotNull(instant46);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse47);
        org.junit.Assert.assertNotNull(timeSeriesThresholdPeriod50);
        org.junit.Assert.assertNotNull(correctionOperation53);
        org.junit.Assert.assertNotNull(correctionOperation55);
    }

    @Test
    public void test24435() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest48.test24435");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutUserV2 putUserV2_0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutUserV2();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutUserV2 putUserV2_2 = putUserV2_0.setCustomId("2021.4.62.0");
        java.lang.String str3 = putUserV2_0.getCustomId();
        putUserV2_0.Id = "hi!:///AQUARIUS/Provisioning/v1";
        java.util.List<java.lang.String> strList6 = putUserV2_0.Roles;
        putUserV2_0.Email = "";
        org.junit.Assert.assertNotNull(putUserV2_2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "2021.4.62.0" + "'", str3, "2021.4.62.0");
        org.junit.Assert.assertNull(strList6);
    }

    @Test
    public void test24436() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest48.test24436");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity pointVelocityDischargeActivity0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity();
        java.lang.String str1 = pointVelocityDischargeActivity0.SoftwareVersion;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity pointVelocityDischargeActivity3 = pointVelocityDischargeActivity0.setIsValid((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity pointVelocityDischargeActivity5 = pointVelocityDischargeActivity3.setMeterEquation("yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSSSSSZZZZZ");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity pointVelocityDischargeActivity7 = pointVelocityDischargeActivity3.setHorizontalCoefficientUsed((java.lang.Boolean) false);
        pointVelocityDischargeActivity7.VelocityObservationMethod = "****ee0ec537-fde4-45ee-9c35-68c37cf65c1c****";
        pointVelocityDischargeActivity7.IsValid = false;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(pointVelocityDischargeActivity3);
        org.junit.Assert.assertNotNull(pointVelocityDischargeActivity5);
        org.junit.Assert.assertNotNull(pointVelocityDischargeActivity7);
    }

    @Test
    public void test24437() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest48.test24437");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.GetExtendedAttributes getExtendedAttributes0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.GetExtendedAttributes();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.GetExtendedAttributes getExtendedAttributes1 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.GetExtendedAttributes();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeApplicability extendedAttributeApplicability2 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeApplicability.AppliesToLocations;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeApplicability[] extendedAttributeApplicabilityArray3 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeApplicability[] { extendedAttributeApplicability2 };
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeApplicability> extendedAttributeApplicabilityList4 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeApplicability>();
        boolean boolean5 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeApplicability>) extendedAttributeApplicabilityList4, extendedAttributeApplicabilityArray3);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.GetExtendedAttributes getExtendedAttributes6 = getExtendedAttributes1.setApplicability(extendedAttributeApplicabilityList4);
        getExtendedAttributes0.Applicability = extendedAttributeApplicabilityList4;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.GetExtendedAttributes getExtendedAttributes8 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.GetExtendedAttributes();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeApplicability extendedAttributeApplicability9 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeApplicability.AppliesToLocations;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeApplicability[] extendedAttributeApplicabilityArray10 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeApplicability[] { extendedAttributeApplicability9 };
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeApplicability> extendedAttributeApplicabilityList11 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeApplicability>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeApplicability>) extendedAttributeApplicabilityList11, extendedAttributeApplicabilityArray10);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.GetExtendedAttributes getExtendedAttributes13 = getExtendedAttributes8.setApplicability(extendedAttributeApplicabilityList11);
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeApplicability> extendedAttributeApplicabilityList14 = null;
        getExtendedAttributes13.Applicability = extendedAttributeApplicabilityList14;
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeApplicability> extendedAttributeApplicabilityList16 = getExtendedAttributes13.Applicability;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.GetExtendedAttributes getExtendedAttributes17 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.GetExtendedAttributes();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeApplicability extendedAttributeApplicability18 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeApplicability.AppliesToLocations;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeApplicability[] extendedAttributeApplicabilityArray19 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeApplicability[] { extendedAttributeApplicability18 };
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeApplicability> extendedAttributeApplicabilityList20 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeApplicability>();
        boolean boolean21 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeApplicability>) extendedAttributeApplicabilityList20, extendedAttributeApplicabilityArray19);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.GetExtendedAttributes getExtendedAttributes22 = getExtendedAttributes17.setApplicability(extendedAttributeApplicabilityList20);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.GetExtendedAttributes getExtendedAttributes23 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.GetExtendedAttributes();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeApplicability extendedAttributeApplicability24 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeApplicability.AppliesToLocations;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeApplicability[] extendedAttributeApplicabilityArray25 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeApplicability[] { extendedAttributeApplicability24 };
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeApplicability> extendedAttributeApplicabilityList26 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeApplicability>();
        boolean boolean27 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeApplicability>) extendedAttributeApplicabilityList26, extendedAttributeApplicabilityArray25);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.GetExtendedAttributes getExtendedAttributes28 = getExtendedAttributes23.setApplicability(extendedAttributeApplicabilityList26);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.GetExtendedAttributes getExtendedAttributes29 = getExtendedAttributes22.setApplicability(extendedAttributeApplicabilityList26);
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeApplicability> extendedAttributeApplicabilityList30 = getExtendedAttributes22.getApplicability();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.GetExtendedAttributes getExtendedAttributes31 = getExtendedAttributes13.setApplicability(extendedAttributeApplicabilityList30);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.GetExtendedAttributes getExtendedAttributes32 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.GetExtendedAttributes();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeApplicability extendedAttributeApplicability33 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeApplicability.AppliesToLocations;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeApplicability[] extendedAttributeApplicabilityArray34 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeApplicability[] { extendedAttributeApplicability33 };
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeApplicability> extendedAttributeApplicabilityList35 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeApplicability>();
        boolean boolean36 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeApplicability>) extendedAttributeApplicabilityList35, extendedAttributeApplicabilityArray34);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.GetExtendedAttributes getExtendedAttributes37 = getExtendedAttributes32.setApplicability(extendedAttributeApplicabilityList35);
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeApplicability> extendedAttributeApplicabilityList38 = null;
        getExtendedAttributes37.Applicability = extendedAttributeApplicabilityList38;
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeApplicability> extendedAttributeApplicabilityList40 = getExtendedAttributes37.Applicability;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.GetExtendedAttributes getExtendedAttributes41 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.GetExtendedAttributes();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeApplicability extendedAttributeApplicability42 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeApplicability.AppliesToLocations;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeApplicability[] extendedAttributeApplicabilityArray43 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeApplicability[] { extendedAttributeApplicability42 };
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeApplicability> extendedAttributeApplicabilityList44 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeApplicability>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeApplicability>) extendedAttributeApplicabilityList44, extendedAttributeApplicabilityArray43);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.GetExtendedAttributes getExtendedAttributes46 = getExtendedAttributes41.setApplicability(extendedAttributeApplicabilityList44);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.GetExtendedAttributes getExtendedAttributes47 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.GetExtendedAttributes();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeApplicability extendedAttributeApplicability48 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeApplicability.AppliesToLocations;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeApplicability[] extendedAttributeApplicabilityArray49 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeApplicability[] { extendedAttributeApplicability48 };
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeApplicability> extendedAttributeApplicabilityList50 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeApplicability>();
        boolean boolean51 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeApplicability>) extendedAttributeApplicabilityList50, extendedAttributeApplicabilityArray49);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.GetExtendedAttributes getExtendedAttributes52 = getExtendedAttributes47.setApplicability(extendedAttributeApplicabilityList50);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.GetExtendedAttributes getExtendedAttributes53 = getExtendedAttributes46.setApplicability(extendedAttributeApplicabilityList50);
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeApplicability> extendedAttributeApplicabilityList54 = getExtendedAttributes46.getApplicability();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.GetExtendedAttributes getExtendedAttributes55 = getExtendedAttributes37.setApplicability(extendedAttributeApplicabilityList54);
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeApplicability> extendedAttributeApplicabilityList56 = getExtendedAttributes37.getApplicability();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.GetExtendedAttributes getExtendedAttributes57 = getExtendedAttributes13.setApplicability(extendedAttributeApplicabilityList56);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.GetExtendedAttributes getExtendedAttributes58 = getExtendedAttributes0.setApplicability(extendedAttributeApplicabilityList56);
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeApplicability> extendedAttributeApplicabilityList59 = getExtendedAttributes58.getApplicability();
        org.junit.Assert.assertTrue("'" + extendedAttributeApplicability2 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeApplicability.AppliesToLocations + "'", extendedAttributeApplicability2.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeApplicability.AppliesToLocations));
        org.junit.Assert.assertNotNull(extendedAttributeApplicabilityArray3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(getExtendedAttributes6);
        org.junit.Assert.assertTrue("'" + extendedAttributeApplicability9 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeApplicability.AppliesToLocations + "'", extendedAttributeApplicability9.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeApplicability.AppliesToLocations));
        org.junit.Assert.assertNotNull(extendedAttributeApplicabilityArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(getExtendedAttributes13);
        org.junit.Assert.assertNull(extendedAttributeApplicabilityList16);
        org.junit.Assert.assertTrue("'" + extendedAttributeApplicability18 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeApplicability.AppliesToLocations + "'", extendedAttributeApplicability18.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeApplicability.AppliesToLocations));
        org.junit.Assert.assertNotNull(extendedAttributeApplicabilityArray19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(getExtendedAttributes22);
        org.junit.Assert.assertTrue("'" + extendedAttributeApplicability24 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeApplicability.AppliesToLocations + "'", extendedAttributeApplicability24.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeApplicability.AppliesToLocations));
        org.junit.Assert.assertNotNull(extendedAttributeApplicabilityArray25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(getExtendedAttributes28);
        org.junit.Assert.assertNotNull(getExtendedAttributes29);
        org.junit.Assert.assertNotNull(extendedAttributeApplicabilityList30);
        org.junit.Assert.assertNotNull(getExtendedAttributes31);
        org.junit.Assert.assertTrue("'" + extendedAttributeApplicability33 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeApplicability.AppliesToLocations + "'", extendedAttributeApplicability33.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeApplicability.AppliesToLocations));
        org.junit.Assert.assertNotNull(extendedAttributeApplicabilityArray34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(getExtendedAttributes37);
        org.junit.Assert.assertNull(extendedAttributeApplicabilityList40);
        org.junit.Assert.assertTrue("'" + extendedAttributeApplicability42 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeApplicability.AppliesToLocations + "'", extendedAttributeApplicability42.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeApplicability.AppliesToLocations));
        org.junit.Assert.assertNotNull(extendedAttributeApplicabilityArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(getExtendedAttributes46);
        org.junit.Assert.assertTrue("'" + extendedAttributeApplicability48 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeApplicability.AppliesToLocations + "'", extendedAttributeApplicability48.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeApplicability.AppliesToLocations));
        org.junit.Assert.assertNotNull(extendedAttributeApplicabilityArray49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNotNull(getExtendedAttributes52);
        org.junit.Assert.assertNotNull(getExtendedAttributes53);
        org.junit.Assert.assertNotNull(extendedAttributeApplicabilityList54);
        org.junit.Assert.assertNotNull(getExtendedAttributes55);
        org.junit.Assert.assertNotNull(extendedAttributeApplicabilityList56);
        org.junit.Assert.assertNotNull(getExtendedAttributes57);
        org.junit.Assert.assertNotNull(getExtendedAttributes58);
        org.junit.Assert.assertNotNull(extendedAttributeApplicabilityList59);
    }

    @Test
    public void test24438() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest48.test24438");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetFieldVisits getFieldVisits0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetFieldVisits();
        java.lang.Integer int1 = getFieldVisits0.Limit;
        java.util.List<java.lang.String> strList2 = getFieldVisits0.getProjectIds();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetSpecimens getSpecimens3 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetSpecimens();
        java.util.List<java.lang.String> strList4 = getSpecimens3.getActivityIds();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutUserV2 putUserV2_5 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutUserV2();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UserType userType6 = putUserV2_5.UserType;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetActivities getActivities7 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetActivities();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse8 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary9 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary11 = dischargeSummary9.setPublish((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse12 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant13 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse14 = locationDescriptionListServiceResponse12.setNextToken(instant13);
        dischargeSummary9.MeasurementTime = instant13;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse16 = locationDescriptionListServiceResponse8.setNextToken(instant13);
        java.time.Instant instant17 = locationDescriptionListServiceResponse8.getNextToken();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetActivities getActivities18 = getActivities7.setToStartTime(instant17);
        java.lang.String str19 = getActivities18.getSort();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_20 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.util.List<java.lang.String> strList21 = getObservationsV2_20.SamplingContextTagIds;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_22 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray24 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList25 = new java.util.ArrayList<java.lang.String>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList25, strArray24);
        getObservationsV2_22.SpecimenIds = strList25;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags28 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray32 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList33 = new java.util.ArrayList<java.lang.String>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList33, strArray32);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags35 = putLocationTags28.setTagUniqueIds(strList33);
        getObservationsV2_22.QualityControlTypes = strList33;
        getObservationsV2_20.ResultGrades = strList33;
        getActivities18.Media = strList33;
        putUserV2_5.AccessGroups = strList33;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetSpecimens getSpecimens40 = getSpecimens3.setAnalyticalGroupIds((java.util.List<java.lang.String>) strList33);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetFieldVisits getFieldVisits41 = getFieldVisits0.setSearch((java.util.List<java.lang.String>) strList33);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetActivities getActivities42 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetActivities();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse43 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary44 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary46 = dischargeSummary44.setPublish((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse47 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant48 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse49 = locationDescriptionListServiceResponse47.setNextToken(instant48);
        dischargeSummary44.MeasurementTime = instant48;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse51 = locationDescriptionListServiceResponse43.setNextToken(instant48);
        java.time.Instant instant52 = locationDescriptionListServiceResponse43.getNextToken();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetActivities getActivities53 = getActivities42.setToStartTime(instant52);
        java.lang.String str54 = getActivities53.getSort();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetActivities getActivities56 = getActivities53.setLimit((java.lang.Integer) 1);
        getActivities56.Cursor = "";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest59 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_60 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray62 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList63 = new java.util.ArrayList<java.lang.String>();
        boolean boolean64 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList63, strArray62);
        getObservationsV2_60.SpecimenIds = strList63;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags66 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray70 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList71 = new java.util.ArrayList<java.lang.String>();
        boolean boolean72 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList71, strArray70);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags73 = putLocationTags66.setTagUniqueIds(strList71);
        getObservationsV2_60.QualityControlTypes = strList71;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest75 = timeAlignedDataServiceRequest59.setTimeSeriesUniqueIds(strList71);
        getActivities56.CollectionMethodIds = strList71;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetFieldVisits getFieldVisits77 = getFieldVisits0.setPlanningStatuses((java.util.List<java.lang.String>) strList71);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetFieldVisits getFieldVisits79 = getFieldVisits77.setSort("yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSSSSSZZZZZ");
        org.junit.Assert.assertNull(int1);
        org.junit.Assert.assertNull(strList2);
        org.junit.Assert.assertNull(strList4);
        org.junit.Assert.assertNull(userType6);
        org.junit.Assert.assertNotNull(dischargeSummary11);
        org.junit.Assert.assertNotNull(instant13);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse14);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse16);
        org.junit.Assert.assertNotNull(instant17);
        org.junit.Assert.assertNotNull(getActivities18);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertNull(strList21);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(putLocationTags35);
        org.junit.Assert.assertNotNull(getSpecimens40);
        org.junit.Assert.assertNotNull(getFieldVisits41);
        org.junit.Assert.assertNotNull(dischargeSummary46);
        org.junit.Assert.assertNotNull(instant48);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse49);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse51);
        org.junit.Assert.assertNotNull(instant52);
        org.junit.Assert.assertNotNull(getActivities53);
        org.junit.Assert.assertNull(str54);
        org.junit.Assert.assertNotNull(getActivities56);
        org.junit.Assert.assertNotNull(strArray62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertNotNull(strArray70);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertNotNull(putLocationTags73);
        org.junit.Assert.assertNotNull(timeAlignedDataServiceRequest75);
        org.junit.Assert.assertNotNull(getFieldVisits77);
        org.junit.Assert.assertNotNull(getFieldVisits79);
    }

    @Test
    public void test24439() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest48.test24439");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingModelDescription ratingModelDescription0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingModelDescription();
        java.lang.String str1 = ratingModelDescription0.getDescription();
        java.lang.Boolean boolean2 = ratingModelDescription0.isPublish();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(boolean2);
    }

    @Test
    public void test24440() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest48.test24440");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutUserV2 putUserV2_0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutUserV2();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UserType userType1 = putUserV2_0.UserType;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutUserV2 putUserV2_3 = putUserV2_0.setEmail("MaxInstant");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UserProfile userProfile4 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutUserV2 putUserV2_5 = putUserV2_0.setUserProfile(userProfile4);
        java.util.List<java.lang.String> strList6 = putUserV2_0.getRoles();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetFieldVisits getFieldVisits7 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetFieldVisits();
        java.util.List<java.lang.String> strList8 = getFieldVisits7.getSamplingLocationIds();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags9 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray13 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList14 = new java.util.ArrayList<java.lang.String>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList14, strArray13);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags16 = putLocationTags9.setTagUniqueIds(strList14);
        java.util.ArrayList<java.lang.String> strList17 = putLocationTags16.TagUniqueIds;
        getFieldVisits7.ScheduleIds = strList17;
        java.lang.Integer int19 = getFieldVisits7.Limit;
        java.util.List<java.lang.String> strList20 = getFieldVisits7.getFieldTripIds();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_21 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray23 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList24 = new java.util.ArrayList<java.lang.String>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList24, strArray23);
        getObservationsV2_21.SpecimenIds = strList24;
        getFieldVisits7.Search = strList24;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetFieldVisits getFieldVisits29 = getFieldVisits7.setCursor("");
        java.util.List<java.lang.String> strList30 = getFieldVisits7.PlanningStatuses;
        java.time.Instant instant31 = getFieldVisits7.StartStartTime;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetChartDataV2 getChartDataV2_32 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetChartDataV2();
        java.lang.String str33 = getChartDataV2_32.getActivityCustomId();
        java.util.List<java.lang.String> strList34 = getChartDataV2_32.getCollectionMethodIds();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetChartDataV2 getChartDataV2_36 = getChartDataV2_32.setActivityCustomId("ZZZZZ");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetLabAnalysisMethods getLabAnalysisMethods37 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetLabAnalysisMethods();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_38 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.util.List<java.lang.String> strList39 = getObservationsV2_38.SamplingContextTagIds;
        java.time.Instant instant40 = getObservationsV2_38.getEndModificationTime();
        java.util.List<java.lang.String> strList41 = getObservationsV2_38.Media;
        java.util.List<java.lang.String> strList42 = getObservationsV2_38.ActivityTypes;
        java.util.List<java.lang.String> strList43 = getObservationsV2_38.getLabResultLaboratoryIds();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest44 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest();
        java.lang.Object obj45 = timeAlignedDataServiceRequest44.getResponseType();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_46 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray49 = new java.lang.String[] { "", "" };
        java.util.ArrayList<java.lang.String> strList50 = new java.util.ArrayList<java.lang.String>();
        boolean boolean51 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList50, strArray49);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_52 = getObservationsV2_46.setDataClassifications((java.util.List<java.lang.String>) strList50);
        getObservationsV2_52.DepthUnitCustomId = "hi!";
        java.lang.String str55 = getObservationsV2_52.CustomId;
        java.util.List<java.lang.String> strList56 = getObservationsV2_52.getSearch();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_57 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray59 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList60 = new java.util.ArrayList<java.lang.String>();
        boolean boolean61 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList60, strArray59);
        getObservationsV2_57.SpecimenIds = strList60;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags63 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray67 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList68 = new java.util.ArrayList<java.lang.String>();
        boolean boolean69 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList68, strArray67);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags70 = putLocationTags63.setTagUniqueIds(strList68);
        getObservationsV2_57.QualityControlTypes = strList68;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_72 = getObservationsV2_52.setMedia((java.util.List<java.lang.String>) strList68);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_73 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String str74 = getObservationsV2_73.getCustomId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_75 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray77 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList78 = new java.util.ArrayList<java.lang.String>();
        boolean boolean79 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList78, strArray77);
        getObservationsV2_75.SpecimenIds = strList78;
        getObservationsV2_73.ProjectIds = strList78;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_82 = getObservationsV2_52.setObservedPropertyIds((java.util.List<java.lang.String>) strList78);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest83 = timeAlignedDataServiceRequest44.setTimeSeriesOutputUnitIds(strList78);
        getObservationsV2_38.DataClassifications = strList78;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetLabAnalysisMethods getLabAnalysisMethods85 = getLabAnalysisMethods37.setObservedPropertyIds((java.util.List<java.lang.String>) strList78);
        getChartDataV2_36.ResultGrades = strList78;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetFieldVisits getFieldVisits87 = getFieldVisits7.setSamplingPlanIds((java.util.List<java.lang.String>) strList78);
        putUserV2_0.Roles = strList78;
        java.lang.String str89 = putUserV2_0.Id;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutUserV2 putUserV2_91 = putUserV2_0.setEmail("http://MaxDurationhttp");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UserProfile userProfile92 = putUserV2_0.getUserProfile();
        org.junit.Assert.assertNull(userType1);
        org.junit.Assert.assertNotNull(putUserV2_3);
        org.junit.Assert.assertNotNull(putUserV2_5);
        org.junit.Assert.assertNull(strList6);
        org.junit.Assert.assertNull(strList8);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(putLocationTags16);
        org.junit.Assert.assertNotNull(strList17);
        org.junit.Assert.assertNull(int19);
        org.junit.Assert.assertNull(strList20);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(getFieldVisits29);
        org.junit.Assert.assertNull(strList30);
        org.junit.Assert.assertNull(instant31);
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertNull(strList34);
        org.junit.Assert.assertNotNull(getChartDataV2_36);
        org.junit.Assert.assertNull(strList39);
        org.junit.Assert.assertNull(instant40);
        org.junit.Assert.assertNull(strList41);
        org.junit.Assert.assertNull(strList42);
        org.junit.Assert.assertNull(strList43);
        org.junit.Assert.assertNotNull(obj45);
        org.junit.Assert.assertEquals(obj45.toString(), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj45), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj45), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertNotNull(strArray49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNotNull(getObservationsV2_52);
        org.junit.Assert.assertNull(str55);
        org.junit.Assert.assertNull(strList56);
        org.junit.Assert.assertNotNull(strArray59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(strArray67);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertNotNull(putLocationTags70);
        org.junit.Assert.assertNotNull(getObservationsV2_72);
        org.junit.Assert.assertNull(str74);
        org.junit.Assert.assertNotNull(strArray77);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
        org.junit.Assert.assertNotNull(getObservationsV2_82);
        org.junit.Assert.assertNotNull(timeAlignedDataServiceRequest83);
        org.junit.Assert.assertNotNull(getLabAnalysisMethods85);
        org.junit.Assert.assertNotNull(getFieldVisits87);
        org.junit.Assert.assertNull(str89);
        org.junit.Assert.assertNotNull(putUserV2_91);
        org.junit.Assert.assertNull(userProfile92);
    }

    @Test
    public void test24441() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest48.test24441");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutFieldVisit putFieldVisit0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutFieldVisit();
        putFieldVisit0.Notes = "MinDuration";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutFieldVisit putFieldVisit3 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutFieldVisit();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity[] plannedActivityArray4 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity> plannedActivityList5 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity>();
        boolean boolean6 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity>) plannedActivityList5, plannedActivityArray4);
        putFieldVisit3.PlannedActivities = plannedActivityList5;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutFieldVisit putFieldVisit8 = putFieldVisit0.setPlannedActivities((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity>) plannedActivityList5);
        java.time.OffsetDateTime offsetDateTime9 = putFieldVisit8.EndTime;
        java.lang.String str10 = putFieldVisit8.getParticipants();
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity> plannedActivityList11 = putFieldVisit8.getPlannedActivities();
        org.junit.Assert.assertNotNull(plannedActivityArray4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(putFieldVisit8);
        org.junit.Assert.assertNull(offsetDateTime9);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNotNull(plannedActivityList11);
    }

    @Test
    public void test24442() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest48.test24442");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenNestedInActivity specimenNestedInActivity0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenNestedInActivity();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupSimple analyticalGroupSimple1 = specimenNestedInActivity0.AnalyticalGroup;
        java.lang.String str2 = specimenNestedInActivity0.Id;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSpecimen putSpecimen3 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSpecimen();
        putSpecimen3.Name = "-PT87591240H";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate6 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate();
        specimenTemplate6.CustomId = "hi!";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate10 = specimenTemplate6.setId("hi!");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes11 = specimenTemplate10.getAuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSpecimen putSpecimen12 = putSpecimen3.setTemplateCreatedFrom(specimenTemplate10);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSpecimen putSpecimen14 = putSpecimen3.setFiltrationComment("hi!");
        putSpecimen3.Id = "multipart/form-data; boundary=****44f0772e-c3ca-4316-8e2a-61ec8540d661****";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate17 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate19 = specimenTemplate17.setCustomId("hi!");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PreservativeType preservativeType20 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PreservativeType.SODIUM_AZIDE;
        specimenTemplate19.Preservative = preservativeType20;
        specimenTemplate19.Name = "multipart/form-data; boundary=****bbcf5f9e-6ccf-4b63-91ab-6e645caf02af****";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate24 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate26 = specimenTemplate24.setCustomId("hi!");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PreservativeType preservativeType27 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PreservativeType.SODIUM_AZIDE;
        specimenTemplate26.Preservative = preservativeType27;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PreservativeType preservativeType29 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PreservativeType.MERCURIC_CHLORIDE;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate30 = specimenTemplate26.setPreservative(preservativeType29);
        specimenTemplate19.Preservative = preservativeType29;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSpecimen putSpecimen32 = putSpecimen3.setPreservative(preservativeType29);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenNestedInActivity specimenNestedInActivity33 = specimenNestedInActivity0.setPreservative(preservativeType29);
        org.junit.Assert.assertNull(analyticalGroupSimple1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNotNull(specimenTemplate10);
        org.junit.Assert.assertNull(auditAttributes11);
        org.junit.Assert.assertNotNull(putSpecimen12);
        org.junit.Assert.assertNotNull(putSpecimen14);
        org.junit.Assert.assertNotNull(specimenTemplate19);
        org.junit.Assert.assertTrue("'" + preservativeType20 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PreservativeType.SODIUM_AZIDE + "'", preservativeType20.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PreservativeType.SODIUM_AZIDE));
        org.junit.Assert.assertNotNull(specimenTemplate26);
        org.junit.Assert.assertTrue("'" + preservativeType27 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PreservativeType.SODIUM_AZIDE + "'", preservativeType27.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PreservativeType.SODIUM_AZIDE));
        org.junit.Assert.assertTrue("'" + preservativeType29 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PreservativeType.MERCURIC_CHLORIDE + "'", preservativeType29.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PreservativeType.MERCURIC_CHLORIDE));
        org.junit.Assert.assertNotNull(specimenTemplate30);
        org.junit.Assert.assertNotNull(putSpecimen32);
        org.junit.Assert.assertNotNull(specimenNestedInActivity33);
    }

    @Test
    public void test24443() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest48.test24443");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutRecurringReport putRecurringReport0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutRecurringReport();
        java.lang.Object obj1 = putRecurringReport0.getResponseType();
        putRecurringReport0.RecurrencePeriod = "";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutRecurringReport putRecurringReport5 = putRecurringReport0.setUniqueId("0001-01-01T00:00:00.000Z");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingModelEffectiveShiftsByStageValuesServiceResponse ratingModelEffectiveShiftsByStageValuesServiceResponse6 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingModelEffectiveShiftsByStageValuesServiceResponse();
        java.lang.Double[] doubleArray11 = new java.lang.Double[] { 1.0d, 100.0d, (-1.0d), 100.0d };
        java.util.ArrayList<java.lang.Double> doubleList12 = new java.util.ArrayList<java.lang.Double>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<java.lang.Double>) doubleList12, doubleArray11);
        ratingModelEffectiveShiftsByStageValuesServiceResponse6.EffectiveShiftValues = doubleList12;
        java.time.Instant instant15 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MinValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingModelEffectiveShiftsByStageValuesServiceResponse ratingModelEffectiveShiftsByStageValuesServiceResponse16 = ratingModelEffectiveShiftsByStageValuesServiceResponse6.setTimestamp(instant15);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingModelInputValuesServiceResponse ratingModelInputValuesServiceResponse17 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingModelInputValuesServiceResponse();
        java.lang.Double[] doubleArray19 = new java.lang.Double[] { 0.0d };
        java.util.ArrayList<java.lang.Double> doubleList20 = new java.util.ArrayList<java.lang.Double>();
        boolean boolean21 = java.util.Collections.addAll((java.util.Collection<java.lang.Double>) doubleList20, doubleArray19);
        ratingModelInputValuesServiceResponse17.InputValues = doubleList20;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingModelEffectiveShiftsByStageValuesServiceResponse ratingModelEffectiveShiftsByStageValuesServiceResponse23 = ratingModelEffectiveShiftsByStageValuesServiceResponse6.setEffectiveShiftValues(doubleList20);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDescription timeSeriesDescription24 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDescription();
        timeSeriesDescription24.UtcOffset = 100.0d;
        timeSeriesDescription24.Parameter = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse29 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary30 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary32 = dischargeSummary30.setPublish((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse33 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant34 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse35 = locationDescriptionListServiceResponse33.setNextToken(instant34);
        dischargeSummary30.MeasurementTime = instant34;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse37 = locationDescriptionListServiceResponse29.setNextToken(instant34);
        java.time.Instant instant38 = locationDescriptionListServiceResponse29.getNextToken();
        java.time.Instant instant39 = locationDescriptionListServiceResponse29.getNextToken();
        timeSeriesDescription24.RawEndTime = instant39;
        timeSeriesDescription24.Publish = false;
        timeSeriesDescription24.Parameter = "http://MaxDurationhttp/json/reply/ArrayList";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetFieldVisits getFieldVisits45 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetFieldVisits();
        java.util.List<java.lang.String> strList46 = getFieldVisits45.getSamplingLocationIds();
        java.util.List<java.lang.String> strList47 = getFieldVisits45.Ids;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary48 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary50 = dischargeSummary48.setPublish((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse51 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant52 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse53 = locationDescriptionListServiceResponse51.setNextToken(instant52);
        dischargeSummary48.MeasurementTime = instant52;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay55 = dischargeSummary48.getGageHeightAdjustmentAmount();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDescription timeSeriesDescription56 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDescription();
        java.time.Instant instant57 = timeSeriesDescription56.getCorrectedStartTime();
        java.lang.String str58 = timeSeriesDescription56.getComputationIdentifier();
        timeSeriesDescription56.TimeSeriesType = "-PT87591240H";
        java.lang.String str61 = timeSeriesDescription56.getIdentifier();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_62 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray65 = new java.lang.String[] { "", "" };
        java.util.ArrayList<java.lang.String> strList66 = new java.util.ArrayList<java.lang.String>();
        boolean boolean67 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList66, strArray65);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_68 = getObservationsV2_62.setDataClassifications((java.util.List<java.lang.String>) strList66);
        java.util.List<java.lang.String> strList69 = getObservationsV2_62.ResultGrades;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary70 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        dischargeSummary70.Reviewer = "";
        java.time.Instant instant73 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        dischargeSummary70.MeasurementTime = instant73;
        getObservationsV2_62.StartResultTime = instant73;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDescription timeSeriesDescription76 = timeSeriesDescription56.setCorrectedStartTime(instant73);
        dischargeSummary48.MeasurementStartTime = instant73;
        getFieldVisits45.EndStartTime = instant73;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDescription timeSeriesDescription79 = timeSeriesDescription24.setLastModified(instant73);
        ratingModelEffectiveShiftsByStageValuesServiceResponse6.Timestamp = instant73;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RecurringReportBase recurringReportBase81 = putRecurringReport5.setNextGenerationDate(instant73);
        java.time.Instant instant82 = recurringReportBase81.NextGenerationDate;
        org.junit.Assert.assertNotNull(obj1);
        org.junit.Assert.assertEquals(obj1.toString(), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning$RecurringReport");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj1), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning$RecurringReport");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj1), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning$RecurringReport");
        org.junit.Assert.assertNotNull(putRecurringReport5);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(instant15);
        org.junit.Assert.assertNotNull(ratingModelEffectiveShiftsByStageValuesServiceResponse16);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(ratingModelEffectiveShiftsByStageValuesServiceResponse23);
        org.junit.Assert.assertNotNull(dischargeSummary32);
        org.junit.Assert.assertNotNull(instant34);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse35);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse37);
        org.junit.Assert.assertNotNull(instant38);
        org.junit.Assert.assertNotNull(instant39);
        org.junit.Assert.assertNull(strList46);
        org.junit.Assert.assertNull(strList47);
        org.junit.Assert.assertNotNull(dischargeSummary50);
        org.junit.Assert.assertNotNull(instant52);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse53);
        org.junit.Assert.assertNull(quantityWithDisplay55);
        org.junit.Assert.assertNull(instant57);
        org.junit.Assert.assertNull(str58);
        org.junit.Assert.assertNull(str61);
        org.junit.Assert.assertNotNull(strArray65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertNotNull(getObservationsV2_68);
        org.junit.Assert.assertNull(strList69);
        org.junit.Assert.assertNotNull(instant73);
        org.junit.Assert.assertNotNull(timeSeriesDescription76);
        org.junit.Assert.assertNotNull(timeSeriesDescription79);
        org.junit.Assert.assertNotNull(recurringReportBase81);
        org.junit.Assert.assertNotNull(instant82);
    }

    @Test
    public void test24444() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest48.test24444");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutActiveDirectoryUser putActiveDirectoryUser0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutActiveDirectoryUser();
        java.lang.Boolean boolean1 = putActiveDirectoryUser0.CanLaunchRatingDevelopmentToolbox;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutActiveDirectoryUser putActiveDirectoryUser3 = putActiveDirectoryUser0.setUserPrincipalName("'.'SSSSSSS");
        java.lang.String str4 = putActiveDirectoryUser0.UniqueId;
        org.junit.Assert.assertNull(boolean1);
        org.junit.Assert.assertNotNull(putActiveDirectoryUser3);
        org.junit.Assert.assertNull(str4);
    }

    @Test
    public void test24445() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest48.test24445");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.GetDropDownListsByType getDropDownListsByType0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.GetDropDownListsByType();
        java.lang.Object obj1 = getDropDownListsByType0.getResponseType();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.DropDownListType dropDownListType2 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.DropDownListType.Configurable;
        getDropDownListsByType0.Type = dropDownListType2;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.DropDownListType dropDownListType4 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.DropDownListType.Configurable;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.GetDropDownListsByType getDropDownListsByType5 = getDropDownListsByType0.setType(dropDownListType4);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.DropDownListType dropDownListType6 = getDropDownListsByType0.Type;
        java.lang.Object obj7 = getDropDownListsByType0.getResponseType();
        org.junit.Assert.assertNotNull(obj1);
        org.junit.Assert.assertEquals(obj1.toString(), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning$DropDownListResponse");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj1), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning$DropDownListResponse");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj1), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning$DropDownListResponse");
        org.junit.Assert.assertTrue("'" + dropDownListType2 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.DropDownListType.Configurable + "'", dropDownListType2.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.DropDownListType.Configurable));
        org.junit.Assert.assertTrue("'" + dropDownListType4 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.DropDownListType.Configurable + "'", dropDownListType4.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.DropDownListType.Configurable));
        org.junit.Assert.assertNotNull(getDropDownListsByType5);
        org.junit.Assert.assertTrue("'" + dropDownListType6 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.DropDownListType.Configurable + "'", dropDownListType6.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.DropDownListType.Configurable));
        org.junit.Assert.assertNotNull(obj7);
        org.junit.Assert.assertEquals(obj7.toString(), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning$DropDownListResponse");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj7), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning$DropDownListResponse");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj7), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning$DropDownListResponse");
    }

    @Test
    public void test24446() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest48.test24446");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationStandard observationStandard0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationStandard();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation1 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedFieldResult plannedFieldResult2 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation3 = observation1.setPlannedFieldResult(plannedFieldResult2);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabInstruction labInstruction4 = null;
        observation3.LabInstruction = labInstruction4;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationStatistics observationStatistics6 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation7 = observation3.setStatistics(observationStatistics6);
        java.time.OffsetDateTime offsetDateTime8 = observation7.getResultTime();
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple> importHistoryEventSimpleList9 = observation7.ImportHistoryEventSimples;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty observedProperty10 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation11 = observation7.setObservedProperty(observedProperty10);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultGrade resultGrade12 = observation11.ResultGrade;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails13 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails15 = labResultDetails13.setAnalysisComment("/AQUARIUS/Acquisition/v2");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes16 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails17 = labResultDetails15.setAuditAttributes(auditAttributes16);
        observation11.AuditAttributes = auditAttributes16;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricConfiguration metricConfiguration19 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricConfiguration();
        java.lang.String str20 = metricConfiguration19.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty observedProperty21 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty();
        observedProperty21.CasNumber = "MinDuration";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricConfiguration metricConfiguration24 = metricConfiguration19.setObservedProperty(observedProperty21);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultType resultType25 = observedProperty21.ResultType;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservedProperty postObservedProperty26 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservedProperty();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UnitGroup unitGroup27 = postObservedProperty26.UnitGroup;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity quantity28 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Unit unit29 = null;
        quantity28.Unit = unit29;
        postObservedProperty26.LowerLimit = quantity28;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity quantity32 = postObservedProperty26.LowerLimit;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Unit unit33 = quantity32.Unit;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty observedProperty34 = observedProperty21.setUpperLimit(quantity32);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UnitGroup unitGroup35 = observedProperty34.UnitGroup;
        observation11.ObservedProperty = observedProperty34;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty observedProperty38 = observedProperty34.setCustomId("/AQUARIUS");
        observationStandard0.ObservedProperty = observedProperty34;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes40 = observationStandard0.getAuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationStandard observationStandard42 = observationStandard0.setRuleText("multipart/form-data; boundary=****1165d1f3-8b30-4f2e-8d0b-ffebab458859****");
        org.junit.Assert.assertNotNull(observation3);
        org.junit.Assert.assertNotNull(observation7);
        org.junit.Assert.assertNull(offsetDateTime8);
        org.junit.Assert.assertNull(importHistoryEventSimpleList9);
        org.junit.Assert.assertNotNull(observation11);
        org.junit.Assert.assertNull(resultGrade12);
        org.junit.Assert.assertNotNull(labResultDetails15);
        org.junit.Assert.assertNotNull(labResultDetails17);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNotNull(metricConfiguration24);
        org.junit.Assert.assertNull(resultType25);
        org.junit.Assert.assertNull(unitGroup27);
        org.junit.Assert.assertNotNull(quantity32);
        org.junit.Assert.assertNull(unit33);
        org.junit.Assert.assertNotNull(observedProperty34);
        org.junit.Assert.assertNull(unitGroup35);
        org.junit.Assert.assertNotNull(observedProperty38);
        org.junit.Assert.assertNull(auditAttributes40);
        org.junit.Assert.assertNotNull(observationStandard42);
    }

    @Test
    public void test24447() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest48.test24447");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity plannedActivity0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes1 = plannedActivity0.AuditAttributes;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservationV2 postObservationV2_2 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservationV2();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabInstruction labInstruction3 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservationV2 postObservationV2_4 = postObservationV2_2.setLabInstruction(labInstruction3);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedFieldResult plannedFieldResult5 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedFieldResult();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes6 = plannedFieldResult5.AuditAttributes;
        plannedFieldResult5.Id = "'.'SSSSSSS";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservationV2 postObservationV2_9 = postObservationV2_4.setPlannedFieldResult(plannedFieldResult5);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutActivityTemplate putActivityTemplate10 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutActivityTemplate();
        java.lang.String str11 = putActivityTemplate10.getId();
        java.lang.String str12 = putActivityTemplate10.Id;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes13 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes15 = auditAttributes13.setCreationUserProfileId("'.'SSSSSSS");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutActivityTemplate putActivityTemplate16 = putActivityTemplate10.setAuditAttributes(auditAttributes15);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MediumType mediumType17 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MediumType.WATER;
        putActivityTemplate16.Medium = mediumType17;
        java.lang.String str19 = putActivityTemplate16.getComment();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ActivityTemplateType activityTemplateType20 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutActivityTemplate putActivityTemplate21 = putActivityTemplate16.setType(activityTemplateType20);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MediumType mediumType22 = putActivityTemplate21.getMedium();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedFieldResult plannedFieldResult23 = plannedFieldResult5.setMedium(mediumType22);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity plannedActivity24 = plannedActivity0.setMedium(mediumType22);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity plannedActivity26 = plannedActivity0.setInstruction("http://MaxDurationhttp/json/reply/Integer");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivityActivityType plannedActivityActivityType27 = plannedActivity0.getActivityType();
        org.junit.Assert.assertNull(auditAttributes1);
        org.junit.Assert.assertNotNull(postObservationV2_4);
        org.junit.Assert.assertNull(auditAttributes6);
        org.junit.Assert.assertNotNull(postObservationV2_9);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(auditAttributes15);
        org.junit.Assert.assertNotNull(putActivityTemplate16);
        org.junit.Assert.assertTrue("'" + mediumType17 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MediumType.WATER + "'", mediumType17.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MediumType.WATER));
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertNotNull(putActivityTemplate21);
        org.junit.Assert.assertTrue("'" + mediumType22 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MediumType.WATER + "'", mediumType22.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MediumType.WATER));
        org.junit.Assert.assertNotNull(plannedFieldResult23);
        org.junit.Assert.assertNotNull(plannedActivity24);
        org.junit.Assert.assertNotNull(plannedActivity26);
        org.junit.Assert.assertNull(plannedActivityActivityType27);
    }

    @Test
    public void test24448() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest48.test24448");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationNestedInSpecimen observationNestedInSpecimen0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationNestedInSpecimen();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultStatus resultStatus1 = observationNestedInSpecimen0.ResultStatus;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabInstruction labInstruction2 = observationNestedInSpecimen0.getLabInstruction();
        java.time.OffsetDateTime offsetDateTime3 = observationNestedInSpecimen0.ObservedTime;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricConfiguration metricConfiguration4 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricConfiguration();
        java.lang.String str5 = metricConfiguration4.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty observedProperty6 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty();
        observedProperty6.CasNumber = "MinDuration";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricConfiguration metricConfiguration9 = metricConfiguration4.setObservedProperty(observedProperty6);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultType resultType10 = observedProperty6.ResultType;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservedProperty postObservedProperty11 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservedProperty();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UnitGroup unitGroup12 = postObservedProperty11.UnitGroup;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity quantity13 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Unit unit14 = null;
        quantity13.Unit = unit14;
        postObservedProperty11.LowerLimit = quantity13;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity quantity17 = postObservedProperty11.LowerLimit;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Unit unit18 = quantity17.Unit;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty observedProperty19 = observedProperty6.setUpperLimit(quantity17);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UnitGroup unitGroup20 = observedProperty19.UnitGroup;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty observedProperty22 = observedProperty19.setName("https");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationNestedInSpecimen observationNestedInSpecimen23 = observationNestedInSpecimen0.setObservedProperty(observedProperty22);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabInstruction labInstruction24 = observationNestedInSpecimen0.getLabInstruction();
        org.junit.Assert.assertNull(resultStatus1);
        org.junit.Assert.assertNull(labInstruction2);
        org.junit.Assert.assertNull(offsetDateTime3);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(metricConfiguration9);
        org.junit.Assert.assertNull(resultType10);
        org.junit.Assert.assertNull(unitGroup12);
        org.junit.Assert.assertNotNull(quantity17);
        org.junit.Assert.assertNull(unit18);
        org.junit.Assert.assertNotNull(observedProperty19);
        org.junit.Assert.assertNull(unitGroup20);
        org.junit.Assert.assertNotNull(observedProperty22);
        org.junit.Assert.assertNotNull(observationNestedInSpecimen23);
        org.junit.Assert.assertNull(labInstruction24);
    }

    @Test
    public void test24449() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest48.test24449");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetChartDataV2 getChartDataV2_0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetChartDataV2();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetChartDataV2 getChartDataV2_2 = getChartDataV2_0.setDepthValue((java.lang.Double) 10.0d);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostExtendedAttribute postExtendedAttribute3 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostExtendedAttribute();
        java.lang.String str4 = postExtendedAttribute3.getKey();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.EditableExtendedAttribute editableExtendedAttribute6 = postExtendedAttribute3.setVisibleInDatasetList((java.lang.Boolean) true);
        java.lang.String str7 = postExtendedAttribute3.Key;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.EditableExtendedAttribute editableExtendedAttribute9 = postExtendedAttribute3.setVisibleInDatasetList((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItem importItem10 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_11 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray13 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList14 = new java.util.ArrayList<java.lang.String>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList14, strArray13);
        getObservationsV2_11.SpecimenIds = strList14;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags17 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray21 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList22 = new java.util.ArrayList<java.lang.String>();
        boolean boolean23 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList22, strArray21);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags24 = putLocationTags17.setTagUniqueIds(strList22);
        getObservationsV2_11.QualityControlTypes = strList22;
        java.util.List<java.lang.String> strList26 = getObservationsV2_11.getLabReportIds();
        importItem10.Errors = getObservationsV2_11;
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportChangeItem> importChangeItemList28 = importItem10.getItemComparison();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObject importItemObject29 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObject();
        java.util.List<java.lang.String> strList30 = importItemObject29.getWarningMessages();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportChangeItem[] importChangeItemArray31 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportChangeItem[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportChangeItem> importChangeItemList32 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportChangeItem>();
        boolean boolean33 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportChangeItem>) importChangeItemList32, importChangeItemArray31);
        importItemObject29.ItemComparison = importChangeItemList32;
        importItem10.ItemComparison = importChangeItemList32;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Processor processor36 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Processor();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostTag postTag37 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostTag();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_38 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray41 = new java.lang.String[] { "", "" };
        java.util.ArrayList<java.lang.String> strList42 = new java.util.ArrayList<java.lang.String>();
        boolean boolean43 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList42, strArray41);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_44 = getObservationsV2_38.setDataClassifications((java.util.List<java.lang.String>) strList42);
        postTag37.PickListValues = strList42;
        java.util.ArrayList<java.lang.String> strList46 = postTag37.PickListValues;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Processor processor47 = processor36.setInputTimeSeriesUniqueIds(strList46);
        importItem10.Fields = strList46;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.EditableExtendedAttribute editableExtendedAttribute49 = editableExtendedAttribute9.setPickListValues(strList46);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetChartDataV2 getChartDataV2_50 = getChartDataV2_0.setAnalysisMethodIds((java.util.List<java.lang.String>) strList46);
        java.lang.String str51 = getChartDataV2_50.getDepthUnitId();
        org.junit.Assert.assertNotNull(getChartDataV2_2);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNotNull(editableExtendedAttribute6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(editableExtendedAttribute9);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(putLocationTags24);
        org.junit.Assert.assertNull(strList26);
        org.junit.Assert.assertNull(importChangeItemList28);
        org.junit.Assert.assertNull(strList30);
        org.junit.Assert.assertNotNull(importChangeItemArray31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(getObservationsV2_44);
        org.junit.Assert.assertNotNull(strList46);
        org.junit.Assert.assertNotNull(processor47);
        org.junit.Assert.assertNotNull(editableExtendedAttribute49);
        org.junit.Assert.assertNotNull(getChartDataV2_50);
        org.junit.Assert.assertNull(str51);
    }

    @Test
    public void test24450() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest48.test24450");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.PostLocationAttachmentResponse postLocationAttachmentResponse0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.PostLocationAttachmentResponse();
        java.lang.String str1 = postLocationAttachmentResponse0.getComments();
        java.lang.String str2 = postLocationAttachmentResponse0.Comments;
        java.lang.String str3 = postLocationAttachmentResponse0.LocationUniqueId;
        postLocationAttachmentResponse0.Url = "MaxInstant";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.PostLocationAttachmentResponse postLocationAttachmentResponse7 = postLocationAttachmentResponse0.setUniqueId("ZZZZZ");
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.AppliedTag> appliedTagList8 = postLocationAttachmentResponse7.Tags;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.PostLocationAttachmentResponse postLocationAttachmentResponse10 = postLocationAttachmentResponse7.setFileName("multipart/form-data; boundary=****bbcf5f9e-6ccf-4b63-91ab-6e645caf02af****");
        postLocationAttachmentResponse10.FileName = "multipart/form-data; boundary=****1165d1f3-8b30-4f2e-8d0b-ffebab458859****";
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(postLocationAttachmentResponse7);
        org.junit.Assert.assertNull(appliedTagList8);
        org.junit.Assert.assertNotNull(postLocationAttachmentResponse10);
    }

    @Test
    public void test24451() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest48.test24451");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemTaxon importItemTaxon0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemTaxon();
        java.util.List<java.lang.String> strList1 = importItemTaxon0.getWarningMessages();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Taxon taxon2 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemTaxon importItemTaxon3 = importItemTaxon0.setItem(taxon2);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostCalculatedDerivedTimeSeries postCalculatedDerivedTimeSeries4 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostCalculatedDerivedTimeSeries();
        java.lang.String str5 = postCalculatedDerivedTimeSeries4.LocationUniqueId;
        java.util.List<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeValue> extendedAttributeValueList6 = postCalculatedDerivedTimeSeries4.getExtendedAttributeValues();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemTaxon importItemTaxon7 = importItemTaxon3.setErrors((java.lang.Object) postCalculatedDerivedTimeSeries4);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObject importItemObject8 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObject();
        java.util.List<java.lang.String> strList9 = importItemObject8.getWarningMessages();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportChangeItem[] importChangeItemArray10 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportChangeItem[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportChangeItem> importChangeItemList11 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportChangeItem>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportChangeItem>) importChangeItemList11, importChangeItemArray10);
        importItemObject8.ItemComparison = importChangeItemList11;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags14 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray18 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList19 = new java.util.ArrayList<java.lang.String>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList19, strArray18);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags21 = putLocationTags14.setTagUniqueIds(strList19);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObject importItemObject22 = importItemObject8.setExistingItem((java.lang.Object) putLocationTags14);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.OpenIdConnectUser openIdConnectUser23 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.OpenIdConnectUser();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.OpenIdConnectUser openIdConnectUser25 = openIdConnectUser23.setIdentifier("");
        java.lang.Boolean boolean26 = openIdConnectUser25.CanConfigureSystem;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObject importItemObject27 = importItemObject8.setErrors((java.lang.Object) openIdConnectUser25);
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportChangeItem> importChangeItemList28 = importItemObject27.ItemComparison;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemTaxon importItemTaxon29 = importItemTaxon7.setItemComparison(importChangeItemList28);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemTaxon importItemTaxon30 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemTaxon();
        java.util.List<java.lang.String> strList31 = importItemTaxon30.getWarningMessages();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Taxon taxon32 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemTaxon importItemTaxon33 = importItemTaxon30.setItem(taxon32);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostCalculatedDerivedTimeSeries postCalculatedDerivedTimeSeries34 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostCalculatedDerivedTimeSeries();
        java.lang.String str35 = postCalculatedDerivedTimeSeries34.LocationUniqueId;
        java.util.List<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeValue> extendedAttributeValueList36 = postCalculatedDerivedTimeSeries34.getExtendedAttributeValues();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemTaxon importItemTaxon37 = importItemTaxon33.setErrors((java.lang.Object) postCalculatedDerivedTimeSeries34);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Taxon taxon38 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Taxon();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemTaxon importItemTaxon39 = importItemTaxon33.setExistingItem(taxon38);
        importItemTaxon7.Item = taxon38;
        taxon38.ItisTsn = "yyyy'-'MM'-'dd'T'HH':'mm':'ss";
        taxon38.ItisTsn = "MaxDuration";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutUnit putUnit45 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutUnit();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes46 = putUnit45.getAuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutDetectioncondition putDetectioncondition47 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutDetectioncondition();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes48 = putDetectioncondition47.getAuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutDetectioncondition putDetectioncondition50 = putDetectioncondition47.setCustomId("http");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivity samplingPlanPlannedActivity51 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivity();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes52 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivity samplingPlanPlannedActivity53 = samplingPlanPlannedActivity51.setAuditAttributes(auditAttributes52);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes54 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes56 = auditAttributes54.setCreationUserProfileId("'.'SSSSSSS");
        samplingPlanPlannedActivity53.AuditAttributes = auditAttributes54;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes58 = samplingPlanPlannedActivity53.AuditAttributes;
        putDetectioncondition47.AuditAttributes = auditAttributes58;
        putUnit45.AuditAttributes = auditAttributes58;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes62 = auditAttributes58.setCreationUserProfileId("http");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Taxon taxon63 = taxon38.setAuditAttributes(auditAttributes62);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.TaxonomyLevel taxonomyLevel64 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.TaxonomyLevel();
        java.lang.String str65 = taxonomyLevel64.Id;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Taxon taxon66 = taxon63.setTaxonomyLevel(taxonomyLevel64);
        java.lang.String str67 = taxon63.ParentId;
        java.lang.String str68 = taxon63.ParentId;
        org.junit.Assert.assertNull(strList1);
        org.junit.Assert.assertNotNull(importItemTaxon3);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(extendedAttributeValueList6);
        org.junit.Assert.assertNotNull(importItemTaxon7);
        org.junit.Assert.assertNull(strList9);
        org.junit.Assert.assertNotNull(importChangeItemArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(putLocationTags21);
        org.junit.Assert.assertNotNull(importItemObject22);
        org.junit.Assert.assertNotNull(openIdConnectUser25);
        org.junit.Assert.assertNull(boolean26);
        org.junit.Assert.assertNotNull(importItemObject27);
        org.junit.Assert.assertNotNull(importChangeItemList28);
        org.junit.Assert.assertNotNull(importItemTaxon29);
        org.junit.Assert.assertNull(strList31);
        org.junit.Assert.assertNotNull(importItemTaxon33);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertNull(extendedAttributeValueList36);
        org.junit.Assert.assertNotNull(importItemTaxon37);
        org.junit.Assert.assertNotNull(importItemTaxon39);
        org.junit.Assert.assertNull(auditAttributes46);
        org.junit.Assert.assertNull(auditAttributes48);
        org.junit.Assert.assertNotNull(putDetectioncondition50);
        org.junit.Assert.assertNotNull(samplingPlanPlannedActivity53);
        org.junit.Assert.assertNotNull(auditAttributes56);
        org.junit.Assert.assertNotNull(auditAttributes58);
        org.junit.Assert.assertNotNull(auditAttributes62);
        org.junit.Assert.assertNotNull(taxon63);
        org.junit.Assert.assertNull(str65);
        org.junit.Assert.assertNotNull(taxon66);
        org.junit.Assert.assertNull(str67);
        org.junit.Assert.assertNull(str68);
    }

    @Test
    public void test24452() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest48.test24452");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ChartDataPoint chartDataPoint0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ChartDataPoint();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ChartDataPoint chartDataPoint2 = chartDataPoint0.setMdlValueUnitCustomId("MaxInstant");
        java.lang.Double double3 = chartDataPoint2.Value;
        java.lang.String str4 = chartDataPoint2.getNumericResultUnitCustomId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ChartDataPoint chartDataPoint6 = chartDataPoint2.setValue((java.lang.Double) 10.0d);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ChartDataPoint chartDataPoint8 = chartDataPoint6.setValue((java.lang.Double) 0.0d);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ChartDataPoint chartDataPoint10 = chartDataPoint6.setObservationId("http://MaxDurationhttp/json/reply/Float");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ChartDataPoint chartDataPoint12 = chartDataPoint10.setObservationId("multipart/form-data; boundary=****f642a130-eb6d-4fb6-a1a4-7c7216ab119b****");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ChartDataPoint chartDataPoint14 = chartDataPoint10.setMdlValue((java.lang.Double) (-1.0d));
        org.junit.Assert.assertNotNull(chartDataPoint2);
        org.junit.Assert.assertNull(double3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNotNull(chartDataPoint6);
        org.junit.Assert.assertNotNull(chartDataPoint8);
        org.junit.Assert.assertNotNull(chartDataPoint10);
        org.junit.Assert.assertNotNull(chartDataPoint12);
        org.junit.Assert.assertNotNull(chartDataPoint14);
    }

    @Test
    public void test24453() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest48.test24453");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ReferencePointPeriod referencePointPeriod0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ReferencePointPeriod();
        java.lang.Boolean boolean1 = referencePointPeriod0.IsMeasuredAgainstLocalAssumedDatum;
        java.lang.Double double2 = referencePointPeriod0.getElevation();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ReferencePointPeriod referencePointPeriod4 = referencePointPeriod0.setMethod("9999-12-31T23:59:59.999Z");
        java.lang.String str5 = referencePointPeriod4.getAppliedByUser();
        java.lang.String str6 = referencePointPeriod4.Unit;
        java.lang.String str7 = referencePointPeriod4.getUnit();
        org.junit.Assert.assertNull(boolean1);
        org.junit.Assert.assertNull(double2);
        org.junit.Assert.assertNotNull(referencePointPeriod4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(str7);
    }

    @Test
    public void test24454() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest48.test24454");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ReportPlugin reportPlugin0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ReportPlugin();
        reportPlugin0.UniqueId = "http://MaxDurationhttp/json/reply/Integer";
        java.lang.String str3 = reportPlugin0.getVersion();
        reportPlugin0.AssemblyName = "2021.4.62.0";
        java.lang.String str6 = reportPlugin0.getUniqueId();
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "http://MaxDurationhttp/json/reply/Integer" + "'", str6, "http://MaxDurationhttp/json/reply/Integer");
    }

    @Test
    public void test24455() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest48.test24455");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostBaseStandardReferenceDatumOffset postBaseStandardReferenceDatumOffset0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostBaseStandardReferenceDatumOffset();
        postBaseStandardReferenceDatumOffset0.Comments = "https";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostBaseStandardReferenceDatumOffset postBaseStandardReferenceDatumOffset4 = postBaseStandardReferenceDatumOffset0.setMethod("http");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostBaseStandardReferenceDatumOffset postBaseStandardReferenceDatumOffset6 = postBaseStandardReferenceDatumOffset0.setStandardIdentifier("/AQUARIUS/Publish/v2");
        java.lang.String str7 = postBaseStandardReferenceDatumOffset6.getLocationUniqueId();
        java.lang.Double double8 = postBaseStandardReferenceDatumOffset6.getUncertainty();
        org.junit.Assert.assertNotNull(postBaseStandardReferenceDatumOffset4);
        org.junit.Assert.assertNotNull(postBaseStandardReferenceDatumOffset6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(double8);
    }

    @Test
    public void test24456() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest48.test24456");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Vertical vertical0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Vertical();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Vertical vertical2 = vertical0.setPercentageOfTotalDischarge((java.lang.Double) 100.0d);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay3 = vertical2.getSegmentWidth();
        java.lang.Double double4 = vertical2.CosineOfUniqueFlow;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.OpenWaterData openWaterData5 = null;
        vertical2.OpenWaterData = openWaterData5;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Vertical vertical7 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Vertical();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay8 = vertical7.SegmentArea;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay9 = null;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Vertical vertical10 = vertical7.setEffectiveDepth(quantityWithDisplay9);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VelocityObservation velocityObservation11 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VelocityObservation();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DeploymentMethodType deploymentMethodType12 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DeploymentMethodType.Unknown;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VelocityObservation velocityObservation13 = velocityObservation11.setDeploymentMethod(deploymentMethodType12);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Vertical vertical14 = vertical7.setVelocityObservation(velocityObservation13);
        java.util.List<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VelocityDepthObservation> velocityDepthObservationList15 = velocityObservation13.getObservations();
        vertical2.VelocityObservation = velocityObservation13;
        org.junit.Assert.assertNotNull(vertical2);
        org.junit.Assert.assertNull(quantityWithDisplay3);
        org.junit.Assert.assertNull(double4);
        org.junit.Assert.assertNull(quantityWithDisplay8);
        org.junit.Assert.assertNotNull(vertical10);
        org.junit.Assert.assertTrue("'" + deploymentMethodType12 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DeploymentMethodType.Unknown + "'", deploymentMethodType12.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DeploymentMethodType.Unknown));
        org.junit.Assert.assertNotNull(velocityObservation13);
        org.junit.Assert.assertNotNull(vertical14);
        org.junit.Assert.assertNull(velocityDepthObservationList15);
    }

    @Test
    public void test24457() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest48.test24457");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationImportSummary samplingLocationImportSummary0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationImportSummary();
        java.lang.Integer int1 = samplingLocationImportSummary0.NewCount;
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemSamplingLocation> importItemSamplingLocationList2 = samplingLocationImportSummary0.ErrorImportItems;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple importHistoryEventSimple3 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple();
        java.lang.String str4 = importHistoryEventSimple3.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportType importType5 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportType.OBSERVATION_LABREPORT;
        importHistoryEventSimple3.ImportType = importType5;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UserProfile userProfile7 = importHistoryEventSimple3.getImportedBy();
        java.lang.String str8 = importHistoryEventSimple3.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportType importType9 = importHistoryEventSimple3.getImportType();
        samplingLocationImportSummary0.ImportHistoryEventSimple = importHistoryEventSimple3;
        java.lang.String str11 = importHistoryEventSimple3.TimeZoneOffset;
        org.junit.Assert.assertNull(int1);
        org.junit.Assert.assertNull(importItemSamplingLocationList2);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + importType5 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportType.OBSERVATION_LABREPORT + "'", importType5.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportType.OBSERVATION_LABREPORT));
        org.junit.Assert.assertNull(userProfile7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertTrue("'" + importType9 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportType.OBSERVATION_LABREPORT + "'", importType9.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportType.OBSERVATION_LABREPORT));
        org.junit.Assert.assertNull(str11);
    }

    @Test
    public void test24458() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest48.test24458");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitDescriptionListServiceRequest fieldVisitDescriptionListServiceRequest0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitDescriptionListServiceRequest();
        java.time.Instant instant1 = com.aquaticinformatics.aquarius.sdk.samples.serializers.InstantDeserializer.MaxValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitDescriptionListServiceRequest fieldVisitDescriptionListServiceRequest2 = fieldVisitDescriptionListServiceRequest0.setQueryTo(instant1);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitDescriptionListServiceRequest fieldVisitDescriptionListServiceRequest4 = fieldVisitDescriptionListServiceRequest0.setIncludeInvalidFieldVisits((java.lang.Boolean) true);
        java.lang.String str5 = fieldVisitDescriptionListServiceRequest4.getLocationIdentifier();
        java.lang.Boolean boolean6 = fieldVisitDescriptionListServiceRequest4.isIncludeInvalidFieldVisits();
        java.time.Instant instant7 = fieldVisitDescriptionListServiceRequest4.getChangesSinceToken();
        java.time.Instant instant8 = fieldVisitDescriptionListServiceRequest4.QueryFrom;
        java.lang.Object obj9 = fieldVisitDescriptionListServiceRequest4.getResponseType();
        org.junit.Assert.assertNotNull(instant1);
        org.junit.Assert.assertNotNull(fieldVisitDescriptionListServiceRequest2);
        org.junit.Assert.assertNotNull(fieldVisitDescriptionListServiceRequest4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertEquals("'" + boolean6 + "' != '" + true + "'", boolean6, true);
        org.junit.Assert.assertNull(instant7);
        org.junit.Assert.assertNull(instant8);
        org.junit.Assert.assertNotNull(obj9);
        org.junit.Assert.assertEquals(obj9.toString(), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$FieldVisitDescriptionListServiceResponse");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj9), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$FieldVisitDescriptionListServiceResponse");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj9), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$FieldVisitDescriptionListServiceResponse");
    }

    @Test
    public void test24459() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest48.test24459");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitDataServiceResponse fieldVisitDataServiceResponse0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitDataServiceResponse();
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeActivity> dischargeActivityList1 = fieldVisitDataServiceResponse0.DischargeActivities;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ControlConditionActivity controlConditionActivity2 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ControlConditionActivity();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ControlCleanedType controlCleanedType3 = null;
        controlConditionActivity2.ControlCleaned = controlCleanedType3;
        java.lang.String str5 = controlConditionActivity2.FlowOverControl;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitDataServiceResponse fieldVisitDataServiceResponse6 = fieldVisitDataServiceResponse0.setControlConditionActivity(controlConditionActivity2);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ControlConditionActivity controlConditionActivity7 = fieldVisitDataServiceResponse6.ControlConditionActivity;
        org.junit.Assert.assertNull(dischargeActivityList1);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(fieldVisitDataServiceResponse6);
        org.junit.Assert.assertNotNull(controlConditionActivity7);
    }

    @Test
    public void test24460() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest48.test24460");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LocationGroupType locationGroupType0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LocationGroupType();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes1 = locationGroupType0.getAuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes2 = locationGroupType0.getAuditAttributes();
        locationGroupType0.Id = "hi!:///AQUARIUS/Provisioning/v1";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes5 = locationGroupType0.getAuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutLabReport putLabReport6 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutLabReport();
        java.lang.String str7 = putLabReport6.CustomId;
        java.lang.String str8 = putLabReport6.getCustomId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity postActivity9 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity();
        postActivity9.SourceActivityId = "2021.4.62.0";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.CollectionMethod collectionMethod12 = postActivity9.getCollectionMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostAccessGroup postAccessGroup13 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostAccessGroup();
        java.lang.String str14 = postAccessGroup13.Name;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LocationGroupType locationGroupType15 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LocationGroupType();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes16 = locationGroupType15.getAuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LocationGroupType locationGroupType18 = locationGroupType15.setCustomId("yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroup analyticalGroup19 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroup();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupType analyticalGroupType20 = analyticalGroup19.getType();
        analyticalGroup19.Name = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSSSSSZZZZZ";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroup analyticalGroup23 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroup();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem analyticalGroupItem24 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod25 = analyticalGroupItem24.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem analyticalGroupItem26 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod27 = analyticalGroupItem26.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod28 = analyticalGroupItem26.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem analyticalGroupItem29 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod30 = analyticalGroupItem29.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod31 = analyticalGroupItem29.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod32 = null;
        analyticalGroupItem29.AnalysisMethod = analysisMethod32;
        java.lang.String str34 = analyticalGroupItem29.getHoldingTime();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem analyticalGroupItem35 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod36 = analyticalGroupItem35.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod37 = analyticalGroupItem35.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem analyticalGroupItem38 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod39 = analyticalGroupItem38.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem analyticalGroupItem40 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod41 = analyticalGroupItem40.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod42 = analyticalGroupItem40.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod43 = null;
        analyticalGroupItem40.AnalysisMethod = analysisMethod43;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem[] analyticalGroupItemArray45 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem[] { analyticalGroupItem24, analyticalGroupItem26, analyticalGroupItem29, analyticalGroupItem35, analyticalGroupItem38, analyticalGroupItem40 };
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem> analyticalGroupItemList46 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem>();
        boolean boolean47 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem>) analyticalGroupItemList46, analyticalGroupItemArray45);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroup analyticalGroup48 = analyticalGroup23.setAnalyticalGroupItems((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem>) analyticalGroupItemList46);
        analyticalGroup19.AnalyticalGroupItems = analyticalGroupItemList46;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes50 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes();
        analyticalGroup19.AuditAttributes = auditAttributes50;
        locationGroupType18.AuditAttributes = auditAttributes50;
        postAccessGroup13.AuditAttributes = auditAttributes50;
        postActivity9.AuditAttributes = auditAttributes50;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutLabReport putLabReport55 = putLabReport6.setAuditAttributes(auditAttributes50);
        locationGroupType0.AuditAttributes = auditAttributes50;
        org.junit.Assert.assertNull(auditAttributes1);
        org.junit.Assert.assertNull(auditAttributes2);
        org.junit.Assert.assertNull(auditAttributes5);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNull(collectionMethod12);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNull(auditAttributes16);
        org.junit.Assert.assertNotNull(locationGroupType18);
        org.junit.Assert.assertNull(analyticalGroupType20);
        org.junit.Assert.assertNull(analysisMethod25);
        org.junit.Assert.assertNull(analysisMethod27);
        org.junit.Assert.assertNull(analysisMethod28);
        org.junit.Assert.assertNull(analysisMethod30);
        org.junit.Assert.assertNull(analysisMethod31);
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertNull(analysisMethod36);
        org.junit.Assert.assertNull(analysisMethod37);
        org.junit.Assert.assertNull(analysisMethod39);
        org.junit.Assert.assertNull(analysisMethod41);
        org.junit.Assert.assertNull(analysisMethod42);
        org.junit.Assert.assertNotNull(analyticalGroupItemArray45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(analyticalGroup48);
        org.junit.Assert.assertNotNull(putLabReport55);
    }

    @Test
    public void test24461() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest48.test24461");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportSummary importSummary0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportSummary();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple importHistoryEventSimple1 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple();
        java.time.OffsetDateTime offsetDateTime2 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple importHistoryEventSimple3 = importHistoryEventSimple1.setImportTime(offsetDateTime2);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportSummary importSummary4 = importSummary0.setImportHistoryEventSimple(importHistoryEventSimple3);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportSummary importSummary6 = importSummary0.setInvalidRowsCsvUrl("MaxDuration");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportSummary importSummary8 = importSummary0.setSummaryReportText("multipart/form-data; boundary=****ebf59e0e-2d1f-43bc-996f-3c628a80f696****");
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObject> importItemObjectList9 = importSummary0.NonErrorImportItems;
        org.junit.Assert.assertNotNull(importHistoryEventSimple3);
        org.junit.Assert.assertNotNull(importSummary4);
        org.junit.Assert.assertNotNull(importSummary6);
        org.junit.Assert.assertNotNull(importSummary8);
        org.junit.Assert.assertNull(importItemObjectList9);
    }

    @Test
    public void test24462() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest48.test24462");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitDataServiceRequest fieldVisitDataServiceRequest0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitDataServiceRequest();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitDataServiceRequest fieldVisitDataServiceRequest2 = fieldVisitDataServiceRequest0.setIncludeVerticals((java.lang.Boolean) false);
        java.lang.String str3 = fieldVisitDataServiceRequest0.DiscreteMeasurementActivity;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitDataServiceRequest fieldVisitDataServiceRequest5 = fieldVisitDataServiceRequest0.setConvertToStandardReferenceDatum("0001-01-01T00:00:00.000Z");
        java.lang.String str6 = fieldVisitDataServiceRequest5.getFieldVisitIdentifier();
        fieldVisitDataServiceRequest5.IncludeCrossSectionSurveyProfile = true;
        java.lang.String str9 = fieldVisitDataServiceRequest5.ConvertToStandardReferenceDatum;
        java.lang.Boolean boolean10 = fieldVisitDataServiceRequest5.IncludeVerticals;
        java.lang.Boolean boolean11 = fieldVisitDataServiceRequest5.isIncludeVerticals();
        org.junit.Assert.assertNotNull(fieldVisitDataServiceRequest2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(fieldVisitDataServiceRequest5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "0001-01-01T00:00:00.000Z" + "'", str9, "0001-01-01T00:00:00.000Z");
        org.junit.Assert.assertEquals("'" + boolean10 + "' != '" + false + "'", boolean10, false);
        org.junit.Assert.assertEquals("'" + boolean11 + "' != '" + false + "'", boolean11, false);
    }

    @Test
    public void test24463() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest48.test24463");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportSpecimens getExportSpecimens0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportSpecimens();
        java.util.List<java.lang.String> strList1 = getExportSpecimens0.getActivityTypes();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Qualifier qualifier2 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Qualifier();
        java.time.Instant instant3 = qualifier2.DateApplied;
        java.lang.String str4 = qualifier2.User;
        java.lang.String str5 = qualifier2.getIdentifier();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest6 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest();
        java.lang.Object obj7 = timeAlignedDataServiceRequest6.getResponseType();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse8 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant9 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse10 = locationDescriptionListServiceResponse8.setNextToken(instant9);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest11 = timeAlignedDataServiceRequest6.setQueryFrom(instant9);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Qualifier qualifier12 = qualifier2.setDateApplied(instant9);
        getExportSpecimens0.Before = instant9;
        java.time.Instant instant14 = getExportSpecimens0.EndModificationTime;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetSpecimens getSpecimens15 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetSpecimens();
        java.util.List<java.lang.String> strList16 = getSpecimens15.getActivityIds();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutUserV2 putUserV2_17 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutUserV2();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UserType userType18 = putUserV2_17.UserType;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetActivities getActivities19 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetActivities();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse20 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary21 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary23 = dischargeSummary21.setPublish((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse24 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant25 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse26 = locationDescriptionListServiceResponse24.setNextToken(instant25);
        dischargeSummary21.MeasurementTime = instant25;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse28 = locationDescriptionListServiceResponse20.setNextToken(instant25);
        java.time.Instant instant29 = locationDescriptionListServiceResponse20.getNextToken();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetActivities getActivities30 = getActivities19.setToStartTime(instant29);
        java.lang.String str31 = getActivities30.getSort();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_32 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.util.List<java.lang.String> strList33 = getObservationsV2_32.SamplingContextTagIds;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_34 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray36 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList37 = new java.util.ArrayList<java.lang.String>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList37, strArray36);
        getObservationsV2_34.SpecimenIds = strList37;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags40 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray44 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList45 = new java.util.ArrayList<java.lang.String>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList45, strArray44);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags47 = putLocationTags40.setTagUniqueIds(strList45);
        getObservationsV2_34.QualityControlTypes = strList45;
        getObservationsV2_32.ResultGrades = strList45;
        getActivities30.Media = strList45;
        putUserV2_17.AccessGroups = strList45;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetSpecimens getSpecimens52 = getSpecimens15.setAnalyticalGroupIds((java.util.List<java.lang.String>) strList45);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportSpecimens getExportSpecimens53 = getExportSpecimens0.setSamplingLocationIds((java.util.List<java.lang.String>) strList45);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DeleteObservationsV2 deleteObservationsV2_54 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DeleteObservationsV2();
        java.time.Instant instant55 = deleteObservationsV2_54.StartModificationTime;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ReportListServiceRequest reportListServiceRequest56 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ReportListServiceRequest();
        reportListServiceRequest56.ReportTitle = "MinDuration";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ReportListServiceRequest reportListServiceRequest60 = reportListServiceRequest56.setUserUniqueId("hi!:///AQUARIUS/Provisioning/v1");
        java.util.ArrayList<java.lang.String> strList61 = reportListServiceRequest60.getTagKeys();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingModelInputValuesServiceRequest ratingModelInputValuesServiceRequest62 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingModelInputValuesServiceRequest();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingModelOutputValuesServiceResponse ratingModelOutputValuesServiceResponse63 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingModelOutputValuesServiceResponse();
        java.lang.Double[] doubleArray67 = new java.lang.Double[] { 1.0d, 100.0d, (-1.0d) };
        java.util.ArrayList<java.lang.Double> doubleList68 = new java.util.ArrayList<java.lang.Double>();
        boolean boolean69 = java.util.Collections.addAll((java.util.Collection<java.lang.Double>) doubleList68, doubleArray67);
        ratingModelOutputValuesServiceResponse63.OutputValues = doubleList68;
        ratingModelInputValuesServiceRequest62.OutputValues = doubleList68;
        java.time.Instant instant72 = ratingModelInputValuesServiceRequest62.getEffectiveTime();
        java.time.Instant instant73 = ratingModelInputValuesServiceRequest62.getEffectiveTime();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.GapToleranceOperation gapToleranceOperation74 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.GapToleranceOperation();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeOperationType metadataChangeOperationType75 = gapToleranceOperation74.OperationType;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitDataServiceResponse fieldVisitDataServiceResponse76 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitDataServiceResponse();
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CrossSectionSurveyActivity> crossSectionSurveyActivityList77 = fieldVisitDataServiceResponse76.CrossSectionSurveyActivity;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitDataServiceResponse fieldVisitDataServiceResponse79 = fieldVisitDataServiceResponse76.setIdentifier("");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary80 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        dischargeSummary80.Reviewer = "";
        java.time.Instant instant83 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        dischargeSummary80.MeasurementTime = instant83;
        fieldVisitDataServiceResponse76.ResponseTime = instant83;
        gapToleranceOperation74.DateAppliedUtc = instant83;
        ratingModelInputValuesServiceRequest62.EffectiveTime = instant83;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ReportListServiceRequest reportListServiceRequest88 = reportListServiceRequest60.setCreatedFrom(instant83);
        deleteObservationsV2_54.EndObservedTime = instant83;
        getExportSpecimens0.StartModificationTime = instant83;
        java.time.Instant instant91 = getExportSpecimens0.EndModificationTime;
        org.junit.Assert.assertNull(strList1);
        org.junit.Assert.assertNull(instant3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(obj7);
        org.junit.Assert.assertEquals(obj7.toString(), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj7), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj7), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertNotNull(instant9);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse10);
        org.junit.Assert.assertNotNull(timeAlignedDataServiceRequest11);
        org.junit.Assert.assertNotNull(qualifier12);
        org.junit.Assert.assertNull(instant14);
        org.junit.Assert.assertNull(strList16);
        org.junit.Assert.assertNull(userType18);
        org.junit.Assert.assertNotNull(dischargeSummary23);
        org.junit.Assert.assertNotNull(instant25);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse26);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse28);
        org.junit.Assert.assertNotNull(instant29);
        org.junit.Assert.assertNotNull(getActivities30);
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertNull(strList33);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(strArray44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(putLocationTags47);
        org.junit.Assert.assertNotNull(getSpecimens52);
        org.junit.Assert.assertNotNull(getExportSpecimens53);
        org.junit.Assert.assertNull(instant55);
        org.junit.Assert.assertNotNull(reportListServiceRequest60);
        org.junit.Assert.assertNull(strList61);
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertNull(instant72);
        org.junit.Assert.assertNull(instant73);
        org.junit.Assert.assertNull(metadataChangeOperationType75);
        org.junit.Assert.assertNull(crossSectionSurveyActivityList77);
        org.junit.Assert.assertNotNull(fieldVisitDataServiceResponse79);
        org.junit.Assert.assertNotNull(instant83);
        org.junit.Assert.assertNotNull(reportListServiceRequest88);
        org.junit.Assert.assertNull(instant91);
    }

    @Test
    public void test24464() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest48.test24464");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RoleFlattened roleFlattened0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RoleFlattened();
        roleFlattened0.CanAddOrRemoveLocations = false;
        java.lang.Boolean boolean3 = roleFlattened0.CanEditAppendConfigurations;
        java.lang.String str4 = roleFlattened0.getName();
        java.lang.Boolean boolean5 = roleFlattened0.isCanEditData();
        roleFlattened0.CanAddData = true;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RoleFlattenedBase roleFlattenedBase9 = roleFlattened0.setCanEditData((java.lang.Boolean) true);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RoleFlattenedBase roleFlattenedBase11 = roleFlattenedBase9.setCanAssignUserRoles((java.lang.Boolean) false);
        roleFlattenedBase11.CanAddData = true;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RoleFlattenedBase roleFlattenedBase15 = roleFlattenedBase11.setCanAddAppendConfigurations((java.lang.Boolean) false);
        roleFlattenedBase15.CanEditLocationDetails = false;
        org.junit.Assert.assertNull(boolean3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(boolean5);
        org.junit.Assert.assertNotNull(roleFlattenedBase9);
        org.junit.Assert.assertNotNull(roleFlattenedBase11);
        org.junit.Assert.assertNotNull(roleFlattenedBase15);
    }

    @Test
    public void test24465() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest48.test24465");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Filter filter0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Filter();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Filter filter2 = filter0.setId("2021.4.62.0");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Filter filter4 = filter2.setId("POST");
        filter4.Id = "https";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Filter filter8 = filter4.setDescription("9999-12-31T23:59:59.999Z");
        java.time.OffsetDateTime offsetDateTime9 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Filter filter10 = filter4.setStartTime(offsetDateTime9);
        java.lang.String str11 = filter10.Description;
        java.time.OffsetDateTime offsetDateTime12 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Filter filter13 = filter10.setEndTime(offsetDateTime12);
        org.junit.Assert.assertNotNull(filter2);
        org.junit.Assert.assertNotNull(filter4);
        org.junit.Assert.assertNotNull(filter8);
        org.junit.Assert.assertNotNull(filter10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "9999-12-31T23:59:59.999Z" + "'", str11, "9999-12-31T23:59:59.999Z");
        org.junit.Assert.assertNotNull(filter13);
    }

    @Test
    public void test24466() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest48.test24466");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostAnalysisMethod postAnalysisMethod0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostAnalysisMethod();
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple> importHistoryEventSimpleList1 = postAnalysisMethod0.ImportHistoryEventSimples;
        java.lang.String str2 = postAnalysisMethod0.Context;
        java.lang.String str3 = postAnalysisMethod0.getContext();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostAnalysisMethod postAnalysisMethod5 = postAnalysisMethod0.setMethodId("yyyy'-'MM'-'dd'T'HH':'mm':'ss");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostAnalysisMethod postAnalysisMethod7 = postAnalysisMethod0.setName("http");
        org.junit.Assert.assertNull(importHistoryEventSimpleList1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(postAnalysisMethod5);
        org.junit.Assert.assertNotNull(postAnalysisMethod7);
    }

    @Test
    public void test24467() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest48.test24467");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutBulkEditResultGradesV2 putBulkEditResultGradesV2_0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutBulkEditResultGradesV2();
        java.lang.Double double1 = putBulkEditResultGradesV2_0.DepthValue;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_2 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray4 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList5 = new java.util.ArrayList<java.lang.String>();
        boolean boolean6 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList5, strArray4);
        getObservationsV2_2.SpecimenIds = strList5;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags8 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray12 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList13 = new java.util.ArrayList<java.lang.String>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList13, strArray12);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags15 = putLocationTags8.setTagUniqueIds(strList13);
        getObservationsV2_2.QualityControlTypes = strList13;
        java.util.List<java.lang.String> strList17 = getObservationsV2_2.getAnalyticalGroupIds();
        java.util.List<java.lang.String> strList18 = getObservationsV2_2.DataClassifications;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.FieldResultType fieldResultType19 = getObservationsV2_2.FieldResultType;
        java.time.Instant instant20 = getObservationsV2_2.getEndObservedTime();
        java.lang.String str21 = getObservationsV2_2.DepthUnitCustomId;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags22 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray26 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList27 = new java.util.ArrayList<java.lang.String>();
        boolean boolean28 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList27, strArray26);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags29 = putLocationTags22.setTagUniqueIds(strList27);
        java.util.ArrayList<java.lang.String> strList30 = putLocationTags29.TagUniqueIds;
        getObservationsV2_2.ProjectIds = strList30;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutBulkEditResultGradesV2 putBulkEditResultGradesV2_32 = putBulkEditResultGradesV2_0.setSearch((java.util.List<java.lang.String>) strList30);
        java.util.List<java.lang.String> strList33 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutBulkEditResultGradesV2 putBulkEditResultGradesV2_34 = putBulkEditResultGradesV2_32.setLabResultLaboratoryIds(strList33);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItem importItem35 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_36 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray38 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList39 = new java.util.ArrayList<java.lang.String>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList39, strArray38);
        getObservationsV2_36.SpecimenIds = strList39;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags42 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray46 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList47 = new java.util.ArrayList<java.lang.String>();
        boolean boolean48 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList47, strArray46);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags49 = putLocationTags42.setTagUniqueIds(strList47);
        getObservationsV2_36.QualityControlTypes = strList47;
        java.util.List<java.lang.String> strList51 = getObservationsV2_36.getLabReportIds();
        importItem35.Errors = getObservationsV2_36;
        java.lang.Object obj53 = importItem35.getExistingItem();
        importItem35.Input = "hi!";
        java.lang.Object obj56 = importItem35.getItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemStatusType importItemStatusType57 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemStatusType.SKIPPED;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItem importItem58 = importItem35.setStatus(importItemStatusType57);
        importItem58.Input = "/AQUARIUS/Provisioning/v1";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate61 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate();
        specimenTemplate61.CustomId = "hi!";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate65 = specimenTemplate61.setId("hi!");
        java.lang.Boolean boolean66 = specimenTemplate65.getFiltered();
        importItem58.Item = specimenTemplate65;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Processor processor68 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Processor();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostTag postTag69 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostTag();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_70 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray73 = new java.lang.String[] { "", "" };
        java.util.ArrayList<java.lang.String> strList74 = new java.util.ArrayList<java.lang.String>();
        boolean boolean75 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList74, strArray73);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_76 = getObservationsV2_70.setDataClassifications((java.util.List<java.lang.String>) strList74);
        postTag69.PickListValues = strList74;
        java.util.ArrayList<java.lang.String> strList78 = postTag69.PickListValues;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Processor processor79 = processor68.setInputTimeSeriesUniqueIds(strList78);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItem importItem80 = importItem58.setWarningMessages((java.util.List<java.lang.String>) strList78);
        java.util.List<java.lang.String> strList81 = importItem58.getWarningMessages();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutBulkEditResultGradesV2 putBulkEditResultGradesV2_82 = putBulkEditResultGradesV2_32.setSpecimenIds(strList81);
        java.lang.Double double83 = putBulkEditResultGradesV2_32.getNumericResultValue();
        java.time.Instant instant84 = putBulkEditResultGradesV2_32.EndModificationTime;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutBulkEditResultGradesV2 putBulkEditResultGradesV2_86 = putBulkEditResultGradesV2_32.setFieldVisitId("hi!:///AQUARIUS/Provisioning/v1");
        java.util.List<java.lang.String> strList87 = putBulkEditResultGradesV2_86.getSamplingContextTagIds();
        org.junit.Assert.assertNull(double1);
        org.junit.Assert.assertNotNull(strArray4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(putLocationTags15);
        org.junit.Assert.assertNull(strList17);
        org.junit.Assert.assertNull(strList18);
        org.junit.Assert.assertNull(fieldResultType19);
        org.junit.Assert.assertNull(instant20);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(putLocationTags29);
        org.junit.Assert.assertNotNull(strList30);
        org.junit.Assert.assertNotNull(putBulkEditResultGradesV2_32);
        org.junit.Assert.assertNotNull(putBulkEditResultGradesV2_34);
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(putLocationTags49);
        org.junit.Assert.assertNull(strList51);
        org.junit.Assert.assertNull(obj53);
        org.junit.Assert.assertNull(obj56);
        org.junit.Assert.assertTrue("'" + importItemStatusType57 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemStatusType.SKIPPED + "'", importItemStatusType57.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemStatusType.SKIPPED));
        org.junit.Assert.assertNotNull(importItem58);
        org.junit.Assert.assertNotNull(specimenTemplate65);
        org.junit.Assert.assertNull(boolean66);
        org.junit.Assert.assertNotNull(strArray73);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertNotNull(getObservationsV2_76);
        org.junit.Assert.assertNotNull(strList78);
        org.junit.Assert.assertNotNull(processor79);
        org.junit.Assert.assertNotNull(importItem80);
        org.junit.Assert.assertNotNull(strList81);
        org.junit.Assert.assertNotNull(putBulkEditResultGradesV2_82);
        org.junit.Assert.assertNull(double83);
        org.junit.Assert.assertNull(instant84);
        org.junit.Assert.assertNotNull(putBulkEditResultGradesV2_86);
        org.junit.Assert.assertNull(strList87);
    }

    @Test
    public void test24468() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest48.test24468");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttribute extendedAttribute0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttribute();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttribute extendedAttribute2 = extendedAttribute0.setDefaultValue("multipart/form-data; boundary=****231224c4-98ce-4e30-bd65-1d25287c4abe****");
        java.lang.Boolean boolean3 = extendedAttribute2.AppliesToLocationTypes;
        extendedAttribute2.Required = true;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttribute extendedAttribute7 = extendedAttribute2.setKey("multipart/form-data; boundary=****ee0ec537-fde4-45ee-9c35-68c37cf65c1c****");
        java.lang.String str8 = extendedAttribute7.getDefaultValue();
        java.lang.Boolean boolean9 = extendedAttribute7.Required;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostTag postTag10 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostTag();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_11 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray14 = new java.lang.String[] { "", "" };
        java.util.ArrayList<java.lang.String> strList15 = new java.util.ArrayList<java.lang.String>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList15, strArray14);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_17 = getObservationsV2_11.setDataClassifications((java.util.List<java.lang.String>) strList15);
        postTag10.PickListValues = strList15;
        java.util.ArrayList<java.lang.String> strList19 = postTag10.PickListValues;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.TagApplicability tagApplicability20 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.TagApplicability.AppliesToSensorsGauges;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.TagApplicability[] tagApplicabilityArray21 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.TagApplicability[] { tagApplicability20 };
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.TagApplicability> tagApplicabilityList22 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.TagApplicability>();
        boolean boolean23 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.TagApplicability>) tagApplicabilityList22, tagApplicabilityArray21);
        postTag10.Applicability = tagApplicabilityList22;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.TagRequestBase tagRequestBase26 = postTag10.setKey("yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSSSSSZZZZZ");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.TagValueType tagValueType27 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.TagValueType.PickList;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.TagRequestBase tagRequestBase28 = postTag10.setValueType(tagValueType27);
        extendedAttribute7.ValueType = tagValueType27;
        java.util.ArrayList<java.lang.String> strList30 = extendedAttribute7.PickListValues;
        org.junit.Assert.assertNotNull(extendedAttribute2);
        org.junit.Assert.assertNull(boolean3);
        org.junit.Assert.assertNotNull(extendedAttribute7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "multipart/form-data; boundary=****231224c4-98ce-4e30-bd65-1d25287c4abe****" + "'", str8, "multipart/form-data; boundary=****231224c4-98ce-4e30-bd65-1d25287c4abe****");
        org.junit.Assert.assertEquals("'" + boolean9 + "' != '" + true + "'", boolean9, true);
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(getObservationsV2_17);
        org.junit.Assert.assertNotNull(strList19);
        org.junit.Assert.assertTrue("'" + tagApplicability20 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.TagApplicability.AppliesToSensorsGauges + "'", tagApplicability20.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.TagApplicability.AppliesToSensorsGauges));
        org.junit.Assert.assertNotNull(tagApplicabilityArray21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(tagRequestBase26);
        org.junit.Assert.assertTrue("'" + tagValueType27 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.TagValueType.PickList + "'", tagValueType27.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.TagValueType.PickList));
        org.junit.Assert.assertNotNull(tagRequestBase28);
        org.junit.Assert.assertNull(strList30);
    }

    @Test
    public void test24469() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest48.test24469");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.FieldVisitSimple fieldVisitSimple0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.FieldVisitSimple();
        fieldVisitSimple0.Participants = "'.'SSSSSSS";
        fieldVisitSimple0.Id = "9999-12-31T23:59:59.999Z";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlanningStatusType planningStatusType5 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlanningStatusType.PLANNED;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.FieldVisitSimple fieldVisitSimple6 = fieldVisitSimple0.setPlanningStatus(planningStatusType5);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.FieldVisitSimple fieldVisitSimple7 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.FieldVisitSimple();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationSimple samplingLocationSimple8 = fieldVisitSimple7.getSamplingLocation();
        fieldVisitSimple7.Id = "/AQUARIUS/Provisioning/v1";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationSimple samplingLocationSimple11 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationSimple();
        java.lang.String str12 = samplingLocationSimple11.Name;
        fieldVisitSimple7.SamplingLocation = samplingLocationSimple11;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationSimple samplingLocationSimple15 = samplingLocationSimple11.setId("multipart/form-data; boundary=****d9f5d551-383a-4365-87fd-ae7094da6f3b****");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.FieldVisitSimple fieldVisitSimple16 = fieldVisitSimple0.setSamplingLocation(samplingLocationSimple15);
        java.time.OffsetDateTime offsetDateTime17 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.FieldVisitSimple fieldVisitSimple18 = fieldVisitSimple0.setStartTime(offsetDateTime17);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.FieldVisitSimple fieldVisitSimple20 = fieldVisitSimple18.setNotes("multipart/form-data; boundary=****ebf59e0e-2d1f-43bc-996f-3c628a80f696****");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationSimple samplingLocationSimple21 = fieldVisitSimple18.getSamplingLocation();
        org.junit.Assert.assertTrue("'" + planningStatusType5 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlanningStatusType.PLANNED + "'", planningStatusType5.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlanningStatusType.PLANNED));
        org.junit.Assert.assertNotNull(fieldVisitSimple6);
        org.junit.Assert.assertNull(samplingLocationSimple8);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(samplingLocationSimple15);
        org.junit.Assert.assertNotNull(fieldVisitSimple16);
        org.junit.Assert.assertNotNull(fieldVisitSimple18);
        org.junit.Assert.assertNotNull(fieldVisitSimple20);
        org.junit.Assert.assertNotNull(samplingLocationSimple21);
    }

    @Test
    public void test24470() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest48.test24470");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray4 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList5 = new java.util.ArrayList<java.lang.String>();
        boolean boolean6 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList5, strArray4);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags7 = putLocationTags0.setTagUniqueIds(strList5);
        java.util.ArrayList<java.lang.String> strList8 = putLocationTags7.TagUniqueIds;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags10 = putLocationTags7.setLocationUniqueId("https");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags11 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String str12 = putLocationTags11.LocationUniqueId;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ApplyTagRequest applyTagRequest13 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ApplyTagRequest();
        applyTagRequest13.Value = "'.'SSSSSSS";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ApplyTagRequest applyTagRequest16 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ApplyTagRequest();
        java.lang.String str17 = applyTagRequest16.Value;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ApplyTagRequest applyTagRequest18 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ApplyTagRequest();
        java.lang.String str19 = applyTagRequest18.Value;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ApplyTagRequest applyTagRequest20 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ApplyTagRequest();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ApplyTagRequest[] applyTagRequestArray21 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ApplyTagRequest[] { applyTagRequest13, applyTagRequest16, applyTagRequest18, applyTagRequest20 };
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ApplyTagRequest> applyTagRequestList22 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ApplyTagRequest>();
        boolean boolean23 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ApplyTagRequest>) applyTagRequestList22, applyTagRequestArray21);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags24 = putLocationTags11.setTags(applyTagRequestList22);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags25 = putLocationTags7.setTags(applyTagRequestList22);
        java.util.ArrayList<java.lang.String> strList26 = putLocationTags7.getTagUniqueIds();
        putLocationTags7.LocationUniqueId = "http://MaxDurationhttp";
        org.junit.Assert.assertNotNull(strArray4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(putLocationTags7);
        org.junit.Assert.assertNotNull(strList8);
        org.junit.Assert.assertNotNull(putLocationTags10);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertNotNull(applyTagRequestArray21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(putLocationTags24);
        org.junit.Assert.assertNotNull(putLocationTags25);
        org.junit.Assert.assertNotNull(strList26);
    }

    @Test
    public void test24471() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest48.test24471");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostTaxon postTaxon0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostTaxon();
        postTaxon0.ItisUrl = "MinInstant";
        java.lang.String str3 = postTaxon0.getCommonName();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostTaxon postTaxon5 = postTaxon0.setScientificName("http");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostTaxon postTaxon7 = postTaxon5.setItisComment("9999-12-31T23:59:59.999Z");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutTaxon putTaxon8 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutTaxon();
        putTaxon8.ParentId = "http://MaxDurationhttp/json/reply/ArrayList";
        java.lang.String str11 = putTaxon8.ScientificName;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttributeDefinition extendedAttributeDefinition12 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttributeDefinition();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate13 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate15 = specimenTemplate13.setCustomId("hi!");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PreservativeType preservativeType16 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PreservativeType.SODIUM_AZIDE;
        specimenTemplate15.Preservative = preservativeType16;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails18 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails20 = labResultDetails18.setAnalysisComment("/AQUARIUS/Acquisition/v2");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes21 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails22 = labResultDetails20.setAuditAttributes(auditAttributes21);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate23 = specimenTemplate15.setAuditAttributes(auditAttributes21);
        extendedAttributeDefinition12.AuditAttributes = auditAttributes21;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutTaxon putTaxon25 = putTaxon8.setAuditAttributes(auditAttributes21);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutTaxon putTaxon26 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutTaxon();
        putTaxon26.ParentId = "http://MaxDurationhttp/json/reply/ArrayList";
        java.lang.String str29 = putTaxon26.getComment();
        putTaxon26.ParentId = "";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservedProperty postObservedProperty32 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservedProperty();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisType analysisType33 = postObservedProperty32.getAnalysisType();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty observedProperty34 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation35 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation();
        observation35.CustomId = "hi!";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.CategoricalResult categoricalResult38 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation39 = observation35.setCategoricalResult(categoricalResult38);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple[] importHistoryEventSimpleArray40 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple> importHistoryEventSimpleList41 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple>();
        boolean boolean42 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple>) importHistoryEventSimpleList41, importHistoryEventSimpleArray40);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation43 = observation35.setImportHistoryEventSimples((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple>) importHistoryEventSimpleList41);
        observedProperty34.ImportHistoryEventSimples = importHistoryEventSimpleList41;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservedProperty postObservedProperty45 = postObservedProperty32.setImportHistoryEventSimples((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple>) importHistoryEventSimpleList41);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutTaxon putTaxon46 = putTaxon26.setImportHistoryEventSimples((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple>) importHistoryEventSimpleList41);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutTaxon putTaxon47 = putTaxon25.setImportHistoryEventSimples((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple>) importHistoryEventSimpleList41);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostTaxon postTaxon48 = postTaxon5.setImportHistoryEventSimples((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple>) importHistoryEventSimpleList41);
        java.lang.String str49 = postTaxon5.getCommonName();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostTaxon postTaxon51 = postTaxon5.setItisComment("multipart/form-data; boundary=****1165d1f3-8b30-4f2e-8d0b-ffebab458859****");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes52 = postTaxon5.getAuditAttributes();
        java.lang.String str53 = postTaxon5.getSource();
        java.lang.String str54 = postTaxon5.getSource();
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(postTaxon5);
        org.junit.Assert.assertNotNull(postTaxon7);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNotNull(specimenTemplate15);
        org.junit.Assert.assertTrue("'" + preservativeType16 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PreservativeType.SODIUM_AZIDE + "'", preservativeType16.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PreservativeType.SODIUM_AZIDE));
        org.junit.Assert.assertNotNull(labResultDetails20);
        org.junit.Assert.assertNotNull(labResultDetails22);
        org.junit.Assert.assertNotNull(specimenTemplate23);
        org.junit.Assert.assertNotNull(putTaxon25);
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertNull(analysisType33);
        org.junit.Assert.assertNotNull(observation39);
        org.junit.Assert.assertNotNull(importHistoryEventSimpleArray40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(observation43);
        org.junit.Assert.assertNotNull(postObservedProperty45);
        org.junit.Assert.assertNotNull(putTaxon46);
        org.junit.Assert.assertNotNull(putTaxon47);
        org.junit.Assert.assertNotNull(postTaxon48);
        org.junit.Assert.assertNull(str49);
        org.junit.Assert.assertNotNull(postTaxon51);
        org.junit.Assert.assertNull(auditAttributes52);
        org.junit.Assert.assertNull(str53);
        org.junit.Assert.assertNull(str54);
    }

    @Test
    public void test24472() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest48.test24472");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethodSimple analysisMethodSimple0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethodSimple();
        analysisMethodSimple0.Name = "/AQUARIUS/Acquisition/v2://9999-12-31T23:59:59.999Z";
        java.lang.String str3 = analysisMethodSimple0.Id;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethodSimple analysisMethodSimple5 = analysisMethodSimple0.setName("MaxDuration");
        java.lang.String str6 = analysisMethodSimple5.getName();
        java.lang.String str7 = analysisMethodSimple5.getName();
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(analysisMethodSimple5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "MaxDuration" + "'", str6, "MaxDuration");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "MaxDuration" + "'", str7, "MaxDuration");
    }

    @Test
    public void test24473() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest48.test24473");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservedProperty postObservedProperty0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservedProperty();
        java.lang.Object obj1 = postObservedProperty0.getResponseType();
        java.lang.String str2 = postObservedProperty0.Name;
        java.lang.Object obj3 = postObservedProperty0.getResponseType();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ShippingContainer shippingContainer4 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ShippingContainer();
        java.lang.String str5 = shippingContainer4.TrackingId;
        shippingContainer4.TrackingId = "/AQUARIUS/Acquisition/v2";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate8 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate10 = specimenTemplate8.setCustomId("hi!");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PreservativeType preservativeType11 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PreservativeType.SODIUM_AZIDE;
        specimenTemplate10.Preservative = preservativeType11;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails13 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails15 = labResultDetails13.setAnalysisComment("/AQUARIUS/Acquisition/v2");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes16 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails17 = labResultDetails15.setAuditAttributes(auditAttributes16);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate18 = specimenTemplate10.setAuditAttributes(auditAttributes16);
        java.lang.String str19 = specimenTemplate10.Name;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostSamplingLocationGroup postSamplingLocationGroup20 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostSamplingLocationGroup();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes21 = postSamplingLocationGroup20.getAuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LocationGroupType locationGroupType22 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LocationGroupType();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes23 = locationGroupType22.getAuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LocationGroupType locationGroupType25 = locationGroupType22.setCustomId("yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ");
        postSamplingLocationGroup20.LocationGroupType = locationGroupType25;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostSamplingLocationGroup postSamplingLocationGroup28 = postSamplingLocationGroup20.setName("");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutAccessGroup putAccessGroup29 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutAccessGroup();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivity samplingPlanPlannedActivity30 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivity();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes31 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivity samplingPlanPlannedActivity32 = samplingPlanPlannedActivity30.setAuditAttributes(auditAttributes31);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes33 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes35 = auditAttributes33.setCreationUserProfileId("'.'SSSSSSS");
        samplingPlanPlannedActivity32.AuditAttributes = auditAttributes33;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes37 = samplingPlanPlannedActivity32.AuditAttributes;
        putAccessGroup29.AuditAttributes = auditAttributes37;
        postSamplingLocationGroup20.AuditAttributes = auditAttributes37;
        specimenTemplate10.AuditAttributes = auditAttributes37;
        shippingContainer4.AuditAttributes = auditAttributes37;
        postObservedProperty0.AuditAttributes = auditAttributes37;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Unit unit43 = postObservedProperty0.DefaultUnit;
        org.junit.Assert.assertNotNull(obj1);
        org.junit.Assert.assertEquals(obj1.toString(), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$ObservedProperty");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj1), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$ObservedProperty");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj1), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$ObservedProperty");
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNotNull(obj3);
        org.junit.Assert.assertEquals(obj3.toString(), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$ObservedProperty");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj3), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$ObservedProperty");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj3), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$ObservedProperty");
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(specimenTemplate10);
        org.junit.Assert.assertTrue("'" + preservativeType11 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PreservativeType.SODIUM_AZIDE + "'", preservativeType11.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PreservativeType.SODIUM_AZIDE));
        org.junit.Assert.assertNotNull(labResultDetails15);
        org.junit.Assert.assertNotNull(labResultDetails17);
        org.junit.Assert.assertNotNull(specimenTemplate18);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertNull(auditAttributes21);
        org.junit.Assert.assertNull(auditAttributes23);
        org.junit.Assert.assertNotNull(locationGroupType25);
        org.junit.Assert.assertNotNull(postSamplingLocationGroup28);
        org.junit.Assert.assertNotNull(samplingPlanPlannedActivity32);
        org.junit.Assert.assertNotNull(auditAttributes35);
        org.junit.Assert.assertNotNull(auditAttributes37);
        org.junit.Assert.assertNull(unit43);
    }

    @Test
    public void test24474() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest48.test24474");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.IndexConfiguration indexConfiguration0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.IndexConfiguration();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Unit unit1 = indexConfiguration0.Unit;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.IndexRange indexRange2 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.IndexRange();
        java.lang.Integer int3 = indexRange2.getUpperLimitValue();
        java.lang.Integer int4 = indexRange2.LowerLimitValue;
        java.lang.Integer int5 = indexRange2.getLowerLimitValue();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.IndexRange indexRange6 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.IndexRange();
        java.lang.Integer int7 = indexRange6.LowerLimitValue;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.IndexRange indexRange8 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.IndexRange();
        java.lang.Integer int9 = indexRange8.getUpperLimitValue();
        java.lang.String str10 = indexRange8.Id;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.IndexRange indexRange11 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.IndexRange();
        java.lang.Integer int12 = indexRange11.getUpperLimitValue();
        java.lang.Integer int13 = indexRange11.LowerLimitValue;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.IndexRange indexRange15 = indexRange11.setLowerLimitValue((java.lang.Integer) 10);
        indexRange15.Comment = "/AQUARIUS";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.IndexRange indexRange18 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.IndexRange();
        java.lang.Integer int19 = indexRange18.getUpperLimitValue();
        java.lang.Integer int20 = indexRange18.LowerLimitValue;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.IndexRange indexRange21 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.IndexRange();
        java.lang.String str22 = indexRange21.Id;
        indexRange21.UpperLimitValue = 100;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.IndexRange[] indexRangeArray25 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.IndexRange[] { indexRange2, indexRange6, indexRange8, indexRange15, indexRange18, indexRange21 };
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.IndexRange> indexRangeList26 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.IndexRange>();
        boolean boolean27 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.IndexRange>) indexRangeList26, indexRangeArray25);
        indexConfiguration0.IndexRanges = indexRangeList26;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricConfiguration metricConfiguration29 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricConfiguration();
        java.lang.String str30 = metricConfiguration29.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty observedProperty31 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty();
        observedProperty31.CasNumber = "MinDuration";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricConfiguration metricConfiguration34 = metricConfiguration29.setObservedProperty(observedProperty31);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultType resultType35 = observedProperty31.ResultType;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservedProperty postObservedProperty36 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservedProperty();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UnitGroup unitGroup37 = postObservedProperty36.UnitGroup;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity quantity38 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Unit unit39 = null;
        quantity38.Unit = unit39;
        postObservedProperty36.LowerLimit = quantity38;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity quantity42 = postObservedProperty36.LowerLimit;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Unit unit43 = quantity42.Unit;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty observedProperty44 = observedProperty31.setUpperLimit(quantity42);
        java.lang.String str45 = observedProperty44.getCustomId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservedProperty postObservedProperty46 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservedProperty();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLabAnalysisMethod postLabAnalysisMethod47 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLabAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation48 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation();
        observation48.CustomId = "hi!";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.CategoricalResult categoricalResult51 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation52 = observation48.setCategoricalResult(categoricalResult51);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple[] importHistoryEventSimpleArray53 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple> importHistoryEventSimpleList54 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple>();
        boolean boolean55 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple>) importHistoryEventSimpleList54, importHistoryEventSimpleArray53);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation56 = observation48.setImportHistoryEventSimples((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple>) importHistoryEventSimpleList54);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLabAnalysisMethod postLabAnalysisMethod57 = postLabAnalysisMethod47.setImportHistoryEventSimples((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple>) importHistoryEventSimpleList54);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservedProperty postObservedProperty58 = postObservedProperty46.setImportHistoryEventSimples((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple>) importHistoryEventSimpleList54);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisType analysisType59 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisType.PHYSICAL;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservedProperty postObservedProperty60 = postObservedProperty58.setAnalysisType(analysisType59);
        observedProperty44.AnalysisType = analysisType59;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.IndexConfiguration indexConfiguration62 = indexConfiguration0.setObservedProperty(observedProperty44);
        java.lang.String str63 = observedProperty44.getId();
        org.junit.Assert.assertNull(unit1);
        org.junit.Assert.assertNull(int3);
        org.junit.Assert.assertNull(int4);
        org.junit.Assert.assertNull(int5);
        org.junit.Assert.assertNull(int7);
        org.junit.Assert.assertNull(int9);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNull(int12);
        org.junit.Assert.assertNull(int13);
        org.junit.Assert.assertNotNull(indexRange15);
        org.junit.Assert.assertNull(int19);
        org.junit.Assert.assertNull(int20);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertNotNull(indexRangeArray25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertNotNull(metricConfiguration34);
        org.junit.Assert.assertNull(resultType35);
        org.junit.Assert.assertNull(unitGroup37);
        org.junit.Assert.assertNotNull(quantity42);
        org.junit.Assert.assertNull(unit43);
        org.junit.Assert.assertNotNull(observedProperty44);
        org.junit.Assert.assertNull(str45);
        org.junit.Assert.assertNotNull(observation52);
        org.junit.Assert.assertNotNull(importHistoryEventSimpleArray53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(observation56);
        org.junit.Assert.assertNotNull(postLabAnalysisMethod57);
        org.junit.Assert.assertNotNull(postObservedProperty58);
        org.junit.Assert.assertTrue("'" + analysisType59 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisType.PHYSICAL + "'", analysisType59.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisType.PHYSICAL));
        org.junit.Assert.assertNotNull(postObservedProperty60);
        org.junit.Assert.assertNotNull(indexConfiguration62);
        org.junit.Assert.assertNull(str63);
    }

    @Test
    public void test24475() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest48.test24475");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSamplingLocation putSamplingLocation0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSamplingLocation();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSamplingLocation putSamplingLocation2 = putSamplingLocation0.setCustomId("https");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservedProperty postObservedProperty3 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservedProperty();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UnitGroup unitGroup4 = postObservedProperty3.UnitGroup;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity quantity5 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Unit unit6 = null;
        quantity5.Unit = unit6;
        postObservedProperty3.LowerLimit = quantity5;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity quantity9 = postObservedProperty3.LowerLimit;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Unit unit10 = quantity9.Unit;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSamplingLocation putSamplingLocation11 = putSamplingLocation2.setElevation(quantity9);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostSamplingLocation postSamplingLocation12 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostSamplingLocation();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple standardSimple13 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple();
        com.aquaticinformatics.aquarius.sdk.samples.Interval interval14 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple standardSimple15 = standardSimple13.setApplicabilityRange(interval14);
        java.lang.String str16 = standardSimple13.getCustomId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple standardSimple17 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple();
        com.aquaticinformatics.aquarius.sdk.samples.Interval interval18 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple standardSimple19 = standardSimple17.setApplicabilityRange(interval18);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple standardSimple21 = standardSimple17.setActive((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple standardSimple22 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple standardSimple23 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple();
        com.aquaticinformatics.aquarius.sdk.samples.Interval interval24 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple standardSimple25 = standardSimple23.setApplicabilityRange(interval24);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple standardSimple27 = standardSimple23.setActive((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple standardSimple28 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple();
        com.aquaticinformatics.aquarius.sdk.samples.Interval interval29 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple standardSimple30 = standardSimple28.setApplicabilityRange(interval29);
        java.lang.String str31 = standardSimple30.CustomId;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple standardSimple32 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple standardSimple33 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple standardSimple34 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple();
        com.aquaticinformatics.aquarius.sdk.samples.Interval interval35 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple standardSimple36 = standardSimple34.setApplicabilityRange(interval35);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple standardSimple37 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple();
        com.aquaticinformatics.aquarius.sdk.samples.Interval interval38 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple standardSimple39 = standardSimple37.setApplicabilityRange(interval38);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple[] standardSimpleArray40 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple[] { standardSimple13, standardSimple17, standardSimple22, standardSimple23, standardSimple30, standardSimple32, standardSimple33, standardSimple36, standardSimple37 };
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple> standardSimpleList41 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple>();
        boolean boolean42 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple>) standardSimpleList41, standardSimpleArray40);
        postSamplingLocation12.Standards = standardSimpleList41;
        putSamplingLocation2.Standards = standardSimpleList41;
        java.lang.String str45 = putSamplingLocation2.getCustomId();
        putSamplingLocation2.CustomId = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSSSSSZZZZZ";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservedProperty postObservedProperty48 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservedProperty();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UnitGroup unitGroup49 = postObservedProperty48.UnitGroup;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservedProperty postObservedProperty51 = postObservedProperty48.setCasNumber("");
        java.lang.Object obj52 = postObservedProperty48.getResponseType();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservedProperty postObservedProperty53 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservedProperty();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservedProperty postObservedProperty55 = postObservedProperty53.setName("/AQUARIUS/Acquisition/v2://9999-12-31T23:59:59.999Z");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisType analysisType56 = postObservedProperty53.getAnalysisType();
        postObservedProperty53.CustomId = "MaxInstant";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation59 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedFieldResult plannedFieldResult60 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation61 = observation59.setPlannedFieldResult(plannedFieldResult60);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabInstruction labInstruction62 = null;
        observation61.LabInstruction = labInstruction62;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationStatistics observationStatistics64 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation65 = observation61.setStatistics(observationStatistics64);
        java.time.OffsetDateTime offsetDateTime66 = observation65.getResultTime();
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple> importHistoryEventSimpleList67 = observation65.ImportHistoryEventSimples;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty observedProperty68 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation69 = observation65.setObservedProperty(observedProperty68);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultGrade resultGrade70 = observation69.ResultGrade;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.NumericResult numericResult71 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation72 = observation69.setNumericResult(numericResult71);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservedProperty postObservedProperty73 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservedProperty();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UnitGroup unitGroup74 = postObservedProperty73.UnitGroup;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple[] importHistoryEventSimpleArray75 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple> importHistoryEventSimpleList76 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple>();
        boolean boolean77 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple>) importHistoryEventSimpleList76, importHistoryEventSimpleArray75);
        postObservedProperty73.ImportHistoryEventSimples = importHistoryEventSimpleList76;
        observation69.ImportHistoryEventSimples = importHistoryEventSimpleList76;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservedProperty postObservedProperty80 = postObservedProperty53.setImportHistoryEventSimples((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple>) importHistoryEventSimpleList76);
        postObservedProperty48.ImportHistoryEventSimples = importHistoryEventSimpleList76;
        putSamplingLocation2.ImportHistoryEventSimples = importHistoryEventSimpleList76;
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttribute> extendedAttributeList83 = putSamplingLocation2.ExtendedAttributes;
        org.junit.Assert.assertNotNull(putSamplingLocation2);
        org.junit.Assert.assertNull(unitGroup4);
        org.junit.Assert.assertNotNull(quantity9);
        org.junit.Assert.assertNull(unit10);
        org.junit.Assert.assertNotNull(putSamplingLocation11);
        org.junit.Assert.assertNotNull(standardSimple15);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNotNull(standardSimple19);
        org.junit.Assert.assertNotNull(standardSimple21);
        org.junit.Assert.assertNotNull(standardSimple25);
        org.junit.Assert.assertNotNull(standardSimple27);
        org.junit.Assert.assertNotNull(standardSimple30);
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertNotNull(standardSimple36);
        org.junit.Assert.assertNotNull(standardSimple39);
        org.junit.Assert.assertNotNull(standardSimpleArray40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "https" + "'", str45, "https");
        org.junit.Assert.assertNull(unitGroup49);
        org.junit.Assert.assertNotNull(postObservedProperty51);
        org.junit.Assert.assertNotNull(obj52);
        org.junit.Assert.assertEquals(obj52.toString(), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$ObservedProperty");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj52), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$ObservedProperty");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj52), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$ObservedProperty");
        org.junit.Assert.assertNotNull(postObservedProperty55);
        org.junit.Assert.assertNull(analysisType56);
        org.junit.Assert.assertNotNull(observation61);
        org.junit.Assert.assertNotNull(observation65);
        org.junit.Assert.assertNull(offsetDateTime66);
        org.junit.Assert.assertNull(importHistoryEventSimpleList67);
        org.junit.Assert.assertNotNull(observation69);
        org.junit.Assert.assertNull(resultGrade70);
        org.junit.Assert.assertNotNull(observation72);
        org.junit.Assert.assertNull(unitGroup74);
        org.junit.Assert.assertNotNull(importHistoryEventSimpleArray75);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(postObservedProperty80);
        org.junit.Assert.assertNull(extendedAttributeList83);
    }

    @Test
    public void test24476() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest48.test24476");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisit fieldVisit0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisit();
        java.time.Instant instant1 = fieldVisit0.StartTime;
        java.lang.String str2 = fieldVisit0.getParty();
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Attachment> attachmentList3 = fieldVisit0.Attachments;
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Attachment> attachmentList4 = fieldVisit0.Attachments;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DatumConversionResult datumConversionResult5 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DatumConversionResult();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DatumConversionResult datumConversionResult7 = datumConversionResult5.setTargetDatum("http");
        java.lang.String str8 = datumConversionResult5.TargetDatum;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DatumConversionResult datumConversionResult10 = datumConversionResult5.setTargetDatum("https");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisit fieldVisit11 = fieldVisit0.setDatumConversionResult(datumConversionResult10);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LevelSurveyActivity levelSurveyActivity12 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LevelSurveyActivity();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisit fieldVisit13 = fieldVisit0.setLevelSurveyActivity(levelSurveyActivity12);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitDescription fieldVisitDescription15 = fieldVisit13.setParty("multipart/form-data; boundary=****3dee2050-7d6c-400f-bd51-383a1324f5dd****");
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CrossSectionSurveyActivity> crossSectionSurveyActivityList16 = fieldVisit13.getCrossSectionSurveyActivity();
        fieldVisit13.IsValid = true;
        java.lang.String str19 = fieldVisit13.getRemarks();
        java.lang.String str20 = fieldVisit13.Remarks;
        org.junit.Assert.assertNull(instant1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(attachmentList3);
        org.junit.Assert.assertNull(attachmentList4);
        org.junit.Assert.assertNotNull(datumConversionResult7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "http" + "'", str8, "http");
        org.junit.Assert.assertNotNull(datumConversionResult10);
        org.junit.Assert.assertNotNull(fieldVisit11);
        org.junit.Assert.assertNotNull(fieldVisit13);
        org.junit.Assert.assertNotNull(fieldVisitDescription15);
        org.junit.Assert.assertNull(crossSectionSurveyActivityList16);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertNull(str20);
    }

    @Test
    public void test24477() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest48.test24477");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.LocationUserRoles locationUserRoles0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.LocationUserRoles();
        java.lang.String str1 = locationUserRoles0.getLocationUniqueId();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.LocationUserRoles locationUserRoles2 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.LocationUserRoles();
        java.lang.String str3 = locationUserRoles2.getLocationUniqueId();
        java.lang.String str4 = locationUserRoles2.getLocationUniqueId();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.LocationUserRoles locationUserRoles5 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.LocationUserRoles();
        java.lang.String str6 = locationUserRoles5.LocationUniqueId;
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.LocationUserRole> locationUserRoleList7 = locationUserRoles5.getRoles();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.LocationUserRole locationUserRole8 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.LocationUserRole();
        java.lang.String str9 = locationUserRole8.AppliedToLocationFolderName;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.LocationUserRole locationUserRole10 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.LocationUserRole();
        java.lang.String str11 = locationUserRole10.UserUniqueId;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.LocationFolderUserRole locationFolderUserRole13 = locationUserRole10.setUserLoginName("http://MaxDurationhttp/json/reply/Integer");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.LocationUserRole locationUserRole14 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.LocationUserRole();
        java.lang.String str15 = locationUserRole14.UserUniqueId;
        java.lang.String str16 = locationUserRole14.getAppliedToLocationFolderName();
        java.lang.String str17 = locationUserRole14.UserUniqueId;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.LocationUserRole locationUserRole18 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.LocationUserRole();
        java.lang.String str19 = locationUserRole18.UserUniqueId;
        java.lang.String str20 = locationUserRole18.RoleName;
        java.lang.String str21 = locationUserRole18.getAppliedToLocationFolderName();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.LocationUserRole[] locationUserRoleArray22 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.LocationUserRole[] { locationUserRole8, locationUserRole10, locationUserRole14, locationUserRole18 };
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.LocationUserRole> locationUserRoleList23 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.LocationUserRole>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.LocationUserRole>) locationUserRoleList23, locationUserRoleArray22);
        locationUserRoles5.Roles = locationUserRoleList23;
        locationUserRoles2.Roles = locationUserRoleList23;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.LocationUserRoles locationUserRoles27 = locationUserRoles0.setRoles(locationUserRoleList23);
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.LocationUserRole> locationUserRoleList28 = null;
        locationUserRoles0.Roles = locationUserRoleList28;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.LocationUserRoles locationUserRoles31 = locationUserRoles0.setLocationUniqueId("9999-12-31T23:59:59.9999999Z");
        locationUserRoles0.LocationUniqueId = "multipart/form-data; boundary=****231224c4-98ce-4e30-bd65-1d25287c4abe****";
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(locationUserRoleList7);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNotNull(locationFolderUserRole13);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNotNull(locationUserRoleArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(locationUserRoles27);
        org.junit.Assert.assertNotNull(locationUserRoles31);
    }

    @Test
    public void test24478() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest48.test24478");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MethodOperation methodOperation0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MethodOperation();
        java.time.Instant instant1 = methodOperation0.getDateAppliedUtc();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary2 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary4 = dischargeSummary2.setPublish((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse5 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant6 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse7 = locationDescriptionListServiceResponse5.setNextToken(instant6);
        dischargeSummary2.MeasurementTime = instant6;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MethodOperation methodOperation9 = methodOperation0.setDateAppliedUtc(instant6);
        methodOperation0.Comments = "/AQUARIUS";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MethodOperation methodOperation13 = methodOperation0.setComments("multipart/form-data; boundary=****f2ce0d54-dac7-4cd0-b74f-1024089261f9****");
        methodOperation0.MethodCode = "-PT87591240H";
        org.junit.Assert.assertNull(instant1);
        org.junit.Assert.assertNotNull(dischargeSummary4);
        org.junit.Assert.assertNotNull(instant6);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse7);
        org.junit.Assert.assertNotNull(methodOperation9);
        org.junit.Assert.assertNotNull(methodOperation13);
    }

    @Test
    public void test24479() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest48.test24479");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSamplingLocationGroup putSamplingLocationGroup0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSamplingLocationGroup();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LocationGroupType locationGroupType1 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LocationGroupType();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes2 = locationGroupType1.getAuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LocationGroupType locationGroupType4 = locationGroupType1.setCustomId("yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ");
        putSamplingLocationGroup0.LocationGroupType = locationGroupType1;
        java.lang.String str6 = putSamplingLocationGroup0.Id;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LocationGroupType locationGroupType7 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LocationGroupType();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes8 = locationGroupType7.getAuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LocationGroupType locationGroupType10 = locationGroupType7.setCustomId("yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSamplingLocationGroup putSamplingLocationGroup11 = putSamplingLocationGroup0.setLocationGroupType(locationGroupType7);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes12 = putSamplingLocationGroup0.AuditAttributes;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSamplingLocationGroup putSamplingLocationGroup14 = putSamplingLocationGroup0.setName("0001-01-01T00:00:00.000Z");
        putSamplingLocationGroup14.Name = "'.'SSSSSSS";
        org.junit.Assert.assertNull(auditAttributes2);
        org.junit.Assert.assertNotNull(locationGroupType4);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(auditAttributes8);
        org.junit.Assert.assertNotNull(locationGroupType10);
        org.junit.Assert.assertNotNull(putSamplingLocationGroup11);
        org.junit.Assert.assertNull(auditAttributes12);
        org.junit.Assert.assertNotNull(putSamplingLocationGroup14);
    }

    @Test
    public void test24480() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest48.test24480");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.OtherMethodDischargeActivity otherMethodDischargeActivity0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.OtherMethodDischargeActivity();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeChannelMeasurement dischargeChannelMeasurement1 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeChannelMeasurement();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ChannelMaterialType channelMaterialType2 = dischargeChannelMeasurement1.getChannelMaterial();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay3 = dischargeChannelMeasurement1.Discharge;
        java.lang.String str4 = dischargeChannelMeasurement1.MonitoringMethod;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VelocityVariationType velocityVariationType5 = dischargeChannelMeasurement1.VelocityVariation;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.OtherMethodDischargeActivity otherMethodDischargeActivity6 = otherMethodDischargeActivity0.setDischargeChannelMeasurement(dischargeChannelMeasurement1);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeChannelMeasurement dischargeChannelMeasurement7 = otherMethodDischargeActivity6.getDischargeChannelMeasurement();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeChannelMeasurement dischargeChannelMeasurement8 = otherMethodDischargeActivity6.DischargeChannelMeasurement;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeChannelMeasurement dischargeChannelMeasurement9 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeChannelMeasurement();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ChannelMaterialType channelMaterialType10 = dischargeChannelMeasurement9.getChannelMaterial();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay11 = null;
        dischargeChannelMeasurement9.Discharge = quantityWithDisplay11;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DeploymentMethodType deploymentMethodType13 = dischargeChannelMeasurement9.getDeploymentMethod();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ChannelEvennessType channelEvennessType14 = dischargeChannelMeasurement9.ChannelEvenness;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MeasurementLocationToGageType measurementLocationToGageType15 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MeasurementLocationToGageType.Unknown;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeChannelMeasurement dischargeChannelMeasurement16 = dischargeChannelMeasurement9.setMeasurementLocationToGage(measurementLocationToGageType15);
        otherMethodDischargeActivity6.DischargeChannelMeasurement = dischargeChannelMeasurement9;
        org.junit.Assert.assertNull(channelMaterialType2);
        org.junit.Assert.assertNull(quantityWithDisplay3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(velocityVariationType5);
        org.junit.Assert.assertNotNull(otherMethodDischargeActivity6);
        org.junit.Assert.assertNotNull(dischargeChannelMeasurement7);
        org.junit.Assert.assertNotNull(dischargeChannelMeasurement8);
        org.junit.Assert.assertNull(channelMaterialType10);
        org.junit.Assert.assertNull(deploymentMethodType13);
        org.junit.Assert.assertNull(channelEvennessType14);
        org.junit.Assert.assertTrue("'" + measurementLocationToGageType15 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MeasurementLocationToGageType.Unknown + "'", measurementLocationToGageType15.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MeasurementLocationToGageType.Unknown));
        org.junit.Assert.assertNotNull(dischargeChannelMeasurement16);
    }

    @Test
    public void test24481() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest48.test24481");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitReading fieldVisitReading0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitReading();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitReading fieldVisitReading2 = fieldVisitReading0.setUseLocationDatumAsReference((java.lang.Boolean) true);
        java.lang.String str3 = fieldVisitReading2.getFieldVisitIdentifier();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitReading fieldVisitReading5 = fieldVisitReading2.setReferencePointUniqueId("MaxDuration");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitReadingType fieldVisitReadingType6 = fieldVisitReading2.ReadingType;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitReading fieldVisitReading8 = fieldVisitReading2.setComments("ZZZZZ");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitReadingType fieldVisitReadingType9 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitReadingType.CleaningBefore;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitReading fieldVisitReading10 = fieldVisitReading8.setReadingType(fieldVisitReadingType9);
        org.junit.Assert.assertNotNull(fieldVisitReading2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(fieldVisitReading5);
        org.junit.Assert.assertNull(fieldVisitReadingType6);
        org.junit.Assert.assertNotNull(fieldVisitReading8);
        org.junit.Assert.assertTrue("'" + fieldVisitReadingType9 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitReadingType.CleaningBefore + "'", fieldVisitReadingType9.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitReadingType.CleaningBefore));
        org.junit.Assert.assertNotNull(fieldVisitReading10);
    }

    @Test
    public void test24482() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest48.test24482");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeTransactionListServiceRequest metadataChangeTransactionListServiceRequest0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeTransactionListServiceRequest();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostRecurringReport postRecurringReport1 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostRecurringReport();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary2 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        dischargeSummary2.Reviewer = "";
        java.time.Instant instant5 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        dischargeSummary2.MeasurementTime = instant5;
        postRecurringReport1.NextGenerationDate = instant5;
        java.time.Instant instant8 = postRecurringReport1.getNextGenerationDate();
        java.lang.String str9 = com.aquaticinformatics.aquarius.sdk.samples.serializers.InstantSerializer.format(instant8);
        metadataChangeTransactionListServiceRequest0.QueryFrom = instant8;
        java.time.Instant instant11 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MinValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeTransactionListServiceRequest metadataChangeTransactionListServiceRequest12 = metadataChangeTransactionListServiceRequest0.setQueryFrom(instant11);
        java.time.Instant instant13 = null;
        metadataChangeTransactionListServiceRequest12.QueryFrom = instant13;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeTransactionListServiceRequest metadataChangeTransactionListServiceRequest16 = metadataChangeTransactionListServiceRequest12.setTimeSeriesUniqueId("POST");
        org.junit.Assert.assertNotNull(instant5);
        org.junit.Assert.assertNotNull(instant8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "9999-12-31T23:59:59.999Z" + "'", str9, "9999-12-31T23:59:59.999Z");
        org.junit.Assert.assertNotNull(instant11);
        org.junit.Assert.assertNotNull(metadataChangeTransactionListServiceRequest12);
        org.junit.Assert.assertNotNull(metadataChangeTransactionListServiceRequest16);
    }

    @Test
    public void test24483() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest48.test24483");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportSpecimens getExportSpecimens0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportSpecimens();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DeleteFieldVisits deleteFieldVisits1 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DeleteFieldVisits();
        java.util.List<java.lang.String> strList2 = deleteFieldVisits1.ProjectIds;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TrendLineAnalysisServiceRequest trendLineAnalysisServiceRequest3 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TrendLineAnalysisServiceRequest();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TrendLineAnalysisType trendLineAnalysisType4 = null;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TrendLineAnalysisServiceRequest trendLineAnalysisServiceRequest5 = trendLineAnalysisServiceRequest3.setType(trendLineAnalysisType4);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TrendLineAnalysisType trendLineAnalysisType6 = trendLineAnalysisServiceRequest5.Type;
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesPoint> timeSeriesPointList7 = trendLineAnalysisServiceRequest5.getPoints();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest8 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest();
        java.lang.Object obj9 = timeAlignedDataServiceRequest8.getResponseType();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Attachment attachment10 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Attachment();
        java.lang.String str11 = attachment10.getUrl();
        java.lang.String str12 = attachment10.FileName;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutBulkEditResultGradesV2 putBulkEditResultGradesV2_13 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutBulkEditResultGradesV2();
        java.lang.Double double14 = putBulkEditResultGradesV2_13.DepthValue;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_15 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray17 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList18 = new java.util.ArrayList<java.lang.String>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList18, strArray17);
        getObservationsV2_15.SpecimenIds = strList18;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags21 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray25 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList26 = new java.util.ArrayList<java.lang.String>();
        boolean boolean27 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList26, strArray25);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags28 = putLocationTags21.setTagUniqueIds(strList26);
        getObservationsV2_15.QualityControlTypes = strList26;
        java.util.List<java.lang.String> strList30 = getObservationsV2_15.getAnalyticalGroupIds();
        java.util.List<java.lang.String> strList31 = getObservationsV2_15.DataClassifications;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.FieldResultType fieldResultType32 = getObservationsV2_15.FieldResultType;
        java.time.Instant instant33 = getObservationsV2_15.getEndObservedTime();
        java.lang.String str34 = getObservationsV2_15.DepthUnitCustomId;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags35 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray39 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList40 = new java.util.ArrayList<java.lang.String>();
        boolean boolean41 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList40, strArray39);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags42 = putLocationTags35.setTagUniqueIds(strList40);
        java.util.ArrayList<java.lang.String> strList43 = putLocationTags42.TagUniqueIds;
        getObservationsV2_15.ProjectIds = strList43;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutBulkEditResultGradesV2 putBulkEditResultGradesV2_45 = putBulkEditResultGradesV2_13.setSearch((java.util.List<java.lang.String>) strList43);
        java.util.List<java.lang.String> strList46 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutBulkEditResultGradesV2 putBulkEditResultGradesV2_47 = putBulkEditResultGradesV2_45.setLabResultLaboratoryIds(strList46);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CalibrationCheck calibrationCheck48 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CalibrationCheck();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CalibrationCheckType calibrationCheckType49 = calibrationCheck48.getCalibrationCheckType();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay50 = calibrationCheck48.Value;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse51 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary52 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary54 = dischargeSummary52.setPublish((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse55 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant56 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse57 = locationDescriptionListServiceResponse55.setNextToken(instant56);
        dischargeSummary52.MeasurementTime = instant56;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse59 = locationDescriptionListServiceResponse51.setNextToken(instant56);
        java.time.Instant instant60 = locationDescriptionListServiceResponse51.getNextToken();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CalibrationCheck calibrationCheck61 = calibrationCheck48.setTime(instant60);
        putBulkEditResultGradesV2_47.StartResultTime = instant60;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Attachment attachment63 = attachment10.setDateUploaded(instant60);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest64 = timeAlignedDataServiceRequest8.setQueryFrom(instant60);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TrendLineAnalysisServiceRequest trendLineAnalysisServiceRequest65 = trendLineAnalysisServiceRequest5.setQueryFrom(instant60);
        deleteFieldVisits1.StartStartTime = instant60;
        getExportSpecimens0.Before = instant60;
        java.util.List<java.lang.String> strList68 = getExportSpecimens0.LaboratoryIds;
        org.junit.Assert.assertNull(strList2);
        org.junit.Assert.assertNotNull(trendLineAnalysisServiceRequest5);
        org.junit.Assert.assertNull(trendLineAnalysisType6);
        org.junit.Assert.assertNull(timeSeriesPointList7);
        org.junit.Assert.assertNotNull(obj9);
        org.junit.Assert.assertEquals(obj9.toString(), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj9), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj9), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNull(double14);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(putLocationTags28);
        org.junit.Assert.assertNull(strList30);
        org.junit.Assert.assertNull(strList31);
        org.junit.Assert.assertNull(fieldResultType32);
        org.junit.Assert.assertNull(instant33);
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(putLocationTags42);
        org.junit.Assert.assertNotNull(strList43);
        org.junit.Assert.assertNotNull(putBulkEditResultGradesV2_45);
        org.junit.Assert.assertNotNull(putBulkEditResultGradesV2_47);
        org.junit.Assert.assertNull(calibrationCheckType49);
        org.junit.Assert.assertNull(doubleWithDisplay50);
        org.junit.Assert.assertNotNull(dischargeSummary54);
        org.junit.Assert.assertNotNull(instant56);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse57);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse59);
        org.junit.Assert.assertNotNull(instant60);
        org.junit.Assert.assertNotNull(calibrationCheck61);
        org.junit.Assert.assertNotNull(attachment63);
        org.junit.Assert.assertNotNull(timeAlignedDataServiceRequest64);
        org.junit.Assert.assertNotNull(trendLineAnalysisServiceRequest65);
        org.junit.Assert.assertNull(strList68);
    }

    @Test
    public void test24484() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest48.test24484");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutBulkEditResultGradesV2 putBulkEditResultGradesV2_0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutBulkEditResultGradesV2();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_1 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String str2 = getObservationsV2_1.getCustomId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_3 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray5 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList6 = new java.util.ArrayList<java.lang.String>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList6, strArray5);
        getObservationsV2_3.SpecimenIds = strList6;
        getObservationsV2_1.ProjectIds = strList6;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutBulkEditResultGradesV2 putBulkEditResultGradesV2_10 = putBulkEditResultGradesV2_0.setTaxonIds((java.util.List<java.lang.String>) strList6);
        java.util.List<java.lang.String> strList11 = putBulkEditResultGradesV2_0.getResultStatuses();
        java.util.List<java.lang.String> strList12 = putBulkEditResultGradesV2_0.LabResultLabAnalysisMethodIds;
        java.util.List<java.lang.String> strList13 = putBulkEditResultGradesV2_0.getLabResultLaboratoryIds();
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(putBulkEditResultGradesV2_10);
        org.junit.Assert.assertNull(strList11);
        org.junit.Assert.assertNull(strList12);
        org.junit.Assert.assertNull(strList13);
    }

    @Test
    public void test24485() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest48.test24485");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostStatisticalDerivedTimeSeries postStatisticalDerivedTimeSeries0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostStatisticalDerivedTimeSeries();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostStatisticalDerivedTimeSeries postStatisticalDerivedTimeSeries2 = postStatisticalDerivedTimeSeries0.setComment("'.'SSSSSSS");
        java.lang.String str3 = postStatisticalDerivedTimeSeries0.SubLocationIdentifier;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.NewValueLocationType newValueLocationType4 = postStatisticalDerivedTimeSeries0.getNewValueLocation();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostStatisticalDerivedTimeSeries postStatisticalDerivedTimeSeries6 = postStatisticalDerivedTimeSeries0.setMethod("MaxDuration");
        postStatisticalDerivedTimeSeries0.UtcOffset = "MaxInstant";
        java.lang.Double double9 = postStatisticalDerivedTimeSeries0.CoverageMinimumPercentage;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.NewValueLocationType newValueLocationType10 = postStatisticalDerivedTimeSeries0.NewValueLocation;
        java.lang.String str11 = postStatisticalDerivedTimeSeries0.TimeSeriesUniqueId;
        org.junit.Assert.assertNotNull(postStatisticalDerivedTimeSeries2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(newValueLocationType4);
        org.junit.Assert.assertNotNull(postStatisticalDerivedTimeSeries6);
        org.junit.Assert.assertNull(double9);
        org.junit.Assert.assertNull(newValueLocationType10);
        org.junit.Assert.assertNull(str11);
    }

    @Test
    public void test24486() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest48.test24486");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.PostSession postSession0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.PostSession();
        java.lang.String str1 = postSession0.EncryptedPassword;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.PostSession postSession3 = postSession0.setLocale("hi!");
        java.lang.String str4 = postSession3.getUsername();
        java.lang.String str5 = postSession3.EncryptedPassword;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.PostSession postSession7 = postSession3.setEncryptedPassword("****ee0ec537-fde4-45ee-9c35-68c37cf65c1c****");
        postSession7.EncryptedPassword = "multipart/form-data; boundary=****44f0772e-c3ca-4316-8e2a-61ec8540d661****";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.PostSession postSession11 = postSession7.setLocale("");
        postSession7.Username = "0001-01-01T00:00:00.000Z";
        java.lang.String str14 = postSession7.Locale;
        postSession7.EncryptedPassword = "multipart/form-data; boundary=****ee0ec537-fde4-45ee-9c35-68c37cf65c1c****";
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(postSession3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(postSession7);
        org.junit.Assert.assertNotNull(postSession11);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
    }

    @Test
    public void test24487() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest48.test24487");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSamplingLocation putSamplingLocation0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSamplingLocation();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSamplingLocation putSamplingLocation2 = putSamplingLocation0.setCustomId("https");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservedProperty postObservedProperty3 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservedProperty();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UnitGroup unitGroup4 = postObservedProperty3.UnitGroup;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity quantity5 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Unit unit6 = null;
        quantity5.Unit = unit6;
        postObservedProperty3.LowerLimit = quantity5;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity quantity9 = postObservedProperty3.LowerLimit;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Unit unit10 = quantity9.Unit;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSamplingLocation putSamplingLocation11 = putSamplingLocation2.setElevation(quantity9);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation12 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedFieldResult plannedFieldResult13 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation14 = observation12.setPlannedFieldResult(plannedFieldResult13);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabInstruction labInstruction15 = null;
        observation14.LabInstruction = labInstruction15;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationStatistics observationStatistics17 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation18 = observation14.setStatistics(observationStatistics17);
        java.time.OffsetDateTime offsetDateTime19 = observation18.getResultTime();
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple> importHistoryEventSimpleList20 = observation18.ImportHistoryEventSimples;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty observedProperty21 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation22 = observation18.setObservedProperty(observedProperty21);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultGrade resultGrade23 = observation22.ResultGrade;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservedProperty postObservedProperty24 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservedProperty();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UnitGroup unitGroup25 = postObservedProperty24.UnitGroup;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple[] importHistoryEventSimpleArray26 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple> importHistoryEventSimpleList27 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple>();
        boolean boolean28 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple>) importHistoryEventSimpleList27, importHistoryEventSimpleArray26);
        postObservedProperty24.ImportHistoryEventSimples = importHistoryEventSimpleList27;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation30 = observation22.setImportHistoryEventSimples((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple>) importHistoryEventSimpleList27);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSamplingLocation putSamplingLocation31 = putSamplingLocation2.setImportHistoryEventSimples((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple>) importHistoryEventSimpleList27);
        putSamplingLocation2.Longitude = "PT87591240H";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Address address34 = putSamplingLocation2.Address;
        org.junit.Assert.assertNotNull(putSamplingLocation2);
        org.junit.Assert.assertNull(unitGroup4);
        org.junit.Assert.assertNotNull(quantity9);
        org.junit.Assert.assertNull(unit10);
        org.junit.Assert.assertNotNull(putSamplingLocation11);
        org.junit.Assert.assertNotNull(observation14);
        org.junit.Assert.assertNotNull(observation18);
        org.junit.Assert.assertNull(offsetDateTime19);
        org.junit.Assert.assertNull(importHistoryEventSimpleList20);
        org.junit.Assert.assertNotNull(observation22);
        org.junit.Assert.assertNull(resultGrade23);
        org.junit.Assert.assertNull(unitGroup25);
        org.junit.Assert.assertNotNull(importHistoryEventSimpleArray26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(observation30);
        org.junit.Assert.assertNotNull(putSamplingLocation31);
        org.junit.Assert.assertNull(address34);
    }

    @Test
    public void test24488() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest48.test24488");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VelocityDepthObservation velocityDepthObservation0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VelocityDepthObservation();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay1 = velocityDepthObservation0.getDepth();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay2 = velocityDepthObservation0.Velocity;
        java.lang.Double double3 = velocityDepthObservation0.getDepthMultiplier();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VelocityDepthObservation velocityDepthObservation5 = velocityDepthObservation0.setIsVelocityEstimated((java.lang.Boolean) false);
        velocityDepthObservation0.IsVelocityEstimated = true;
        org.junit.Assert.assertNull(quantityWithDisplay1);
        org.junit.Assert.assertNull(quantityWithDisplay2);
        org.junit.Assert.assertNull(double3);
        org.junit.Assert.assertNotNull(velocityDepthObservation5);
    }

    @Test
    public void test24489() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest48.test24489");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Laboratory laboratory0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Laboratory();
        laboratory0.PhoneNumber = "yyyy'-'MM'-'dd'T'HH':'mm':'ss";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Laboratory laboratory4 = laboratory0.setCustomId("/AQUARIUS/Provisioning/v1");
        java.lang.String str5 = laboratory4.getId();
        laboratory4.Address = "http://MaxDurationhttp/json/reply/ArrayList";
        java.lang.String str8 = laboratory4.CustomId;
        laboratory4.EmailAddress = "multipart/form-data; boundary=****bbcf5f9e-6ccf-4b63-91ab-6e645caf02af****";
        laboratory4.PhoneNumber = "9999-12-31T23:59:59.9999999Z";
        java.lang.String str13 = laboratory4.getPointOfContact();
        org.junit.Assert.assertNotNull(laboratory4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "/AQUARIUS/Provisioning/v1" + "'", str8, "/AQUARIUS/Provisioning/v1");
        org.junit.Assert.assertNull(str13);
    }

    @Test
    public void test24490() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest48.test24490");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservationV2 postObservationV2_0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservationV2();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabInstruction labInstruction1 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservationV2 postObservationV2_2 = postObservationV2_0.setLabInstruction(labInstruction1);
        java.lang.String str3 = postObservationV2_2.MediumSubdivision;
        java.lang.String str4 = postObservationV2_2.getComment();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationStatistics observationStatistics5 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationStatistics();
        observationStatistics5.ObservedPropertyId = "/AQUARIUS/Provisioning/v1";
        java.lang.Double double8 = observationStatistics5.Max;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationStatistics observationStatistics10 = observationStatistics5.setMin((java.lang.Double) 0.0d);
        postObservationV2_2.Statistics = observationStatistics10;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.QualityControlType qualityControlType12 = postObservationV2_2.QualityControlType;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservationV2 postObservationV2_13 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservationV2();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabInstruction labInstruction14 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservationV2 postObservationV2_15 = postObservationV2_13.setLabInstruction(labInstruction14);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedFieldResult plannedFieldResult16 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedFieldResult();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes17 = plannedFieldResult16.AuditAttributes;
        plannedFieldResult16.Id = "'.'SSSSSSS";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservationV2 postObservationV2_20 = postObservationV2_15.setPlannedFieldResult(plannedFieldResult16);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservationV2 postObservationV2_21 = postObservationV2_2.setPlannedFieldResult(plannedFieldResult16);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes22 = plannedFieldResult16.AuditAttributes;
        org.junit.Assert.assertNotNull(postObservationV2_2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(double8);
        org.junit.Assert.assertNotNull(observationStatistics10);
        org.junit.Assert.assertNull(qualityControlType12);
        org.junit.Assert.assertNotNull(postObservationV2_15);
        org.junit.Assert.assertNull(auditAttributes17);
        org.junit.Assert.assertNotNull(postObservationV2_20);
        org.junit.Assert.assertNotNull(postObservationV2_21);
        org.junit.Assert.assertNull(auditAttributes22);
    }

    @Test
    public void test24491() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest48.test24491");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.LocationUserRole locationUserRole0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.LocationUserRole();
        java.lang.String str1 = locationUserRole0.UserUniqueId;
        java.lang.String str2 = locationUserRole0.getAppliedToLocationFolderName();
        java.lang.String str3 = locationUserRole0.UserUniqueId;
        java.lang.Boolean boolean4 = locationUserRole0.InheritedFromParentLocationFolder;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.LocationFolderUserRole locationFolderUserRole6 = locationUserRole0.setInheritedFromParentLocationFolder((java.lang.Boolean) true);
        java.lang.String str7 = locationFolderUserRole6.getRoleUniqueId();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(boolean4);
        org.junit.Assert.assertNotNull(locationFolderUserRole6);
        org.junit.Assert.assertNull(str7);
    }

    @Test
    public void test24492() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest48.test24492");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DeleteFieldVisits deleteFieldVisits0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DeleteFieldVisits();
        java.lang.String str1 = deleteFieldVisits0.Sort;
        deleteFieldVisits0.Sort = "9999-12-31T23:59:59.999Z";
        java.time.Instant instant4 = deleteFieldVisits0.EndStartTime;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetLabReports getLabReports5 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetLabReports();
        java.lang.Object obj6 = getLabReports5.getResponseType();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetLabReports getLabReports8 = getLabReports5.setLimit((java.lang.Integer) 0);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetLabReports getLabReports10 = getLabReports5.setCustomId("https");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_11 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray13 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList14 = new java.util.ArrayList<java.lang.String>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList14, strArray13);
        getObservationsV2_11.SpecimenIds = strList14;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags17 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray21 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList22 = new java.util.ArrayList<java.lang.String>();
        boolean boolean23 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList22, strArray21);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags24 = putLocationTags17.setTagUniqueIds(strList22);
        getObservationsV2_11.QualityControlTypes = strList22;
        java.util.List<java.lang.String> strList26 = getObservationsV2_11.getAnalyticalGroupIds();
        java.util.List<java.lang.String> strList27 = getObservationsV2_11.DataClassifications;
        java.util.List<java.lang.String> strList28 = getObservationsV2_11.ObservedPropertyIds;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest29 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest();
        java.lang.Object obj30 = timeAlignedDataServiceRequest29.getResponseType();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_31 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray34 = new java.lang.String[] { "", "" };
        java.util.ArrayList<java.lang.String> strList35 = new java.util.ArrayList<java.lang.String>();
        boolean boolean36 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList35, strArray34);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_37 = getObservationsV2_31.setDataClassifications((java.util.List<java.lang.String>) strList35);
        getObservationsV2_37.DepthUnitCustomId = "hi!";
        java.lang.String str40 = getObservationsV2_37.CustomId;
        java.util.List<java.lang.String> strList41 = getObservationsV2_37.getSearch();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_42 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray44 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList45 = new java.util.ArrayList<java.lang.String>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList45, strArray44);
        getObservationsV2_42.SpecimenIds = strList45;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags48 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray52 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList53 = new java.util.ArrayList<java.lang.String>();
        boolean boolean54 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList53, strArray52);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags55 = putLocationTags48.setTagUniqueIds(strList53);
        getObservationsV2_42.QualityControlTypes = strList53;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_57 = getObservationsV2_37.setMedia((java.util.List<java.lang.String>) strList53);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_58 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String str59 = getObservationsV2_58.getCustomId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_60 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray62 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList63 = new java.util.ArrayList<java.lang.String>();
        boolean boolean64 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList63, strArray62);
        getObservationsV2_60.SpecimenIds = strList63;
        getObservationsV2_58.ProjectIds = strList63;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_67 = getObservationsV2_37.setObservedPropertyIds((java.util.List<java.lang.String>) strList63);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest68 = timeAlignedDataServiceRequest29.setTimeSeriesOutputUnitIds(strList63);
        getObservationsV2_11.LabReportIds = strList63;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetLabReports getLabReports70 = getLabReports5.setLaboratoryIds((java.util.List<java.lang.String>) strList63);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DeleteFieldVisits deleteFieldVisits71 = deleteFieldVisits0.setFieldTripIds((java.util.List<java.lang.String>) strList63);
        java.util.List<java.lang.String> strList72 = deleteFieldVisits71.getIds();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(instant4);
        org.junit.Assert.assertNotNull(obj6);
        org.junit.Assert.assertEquals(obj6.toString(), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$SearchResultLabReport");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj6), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$SearchResultLabReport");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj6), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$SearchResultLabReport");
        org.junit.Assert.assertNotNull(getLabReports8);
        org.junit.Assert.assertNotNull(getLabReports10);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(putLocationTags24);
        org.junit.Assert.assertNull(strList26);
        org.junit.Assert.assertNull(strList27);
        org.junit.Assert.assertNull(strList28);
        org.junit.Assert.assertNotNull(obj30);
        org.junit.Assert.assertEquals(obj30.toString(), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj30), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj30), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertNotNull(strArray34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(getObservationsV2_37);
        org.junit.Assert.assertNull(str40);
        org.junit.Assert.assertNull(strList41);
        org.junit.Assert.assertNotNull(strArray44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(strArray52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(putLocationTags55);
        org.junit.Assert.assertNotNull(getObservationsV2_57);
        org.junit.Assert.assertNull(str59);
        org.junit.Assert.assertNotNull(strArray62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertNotNull(getObservationsV2_67);
        org.junit.Assert.assertNotNull(timeAlignedDataServiceRequest68);
        org.junit.Assert.assertNotNull(getLabReports70);
        org.junit.Assert.assertNotNull(deleteFieldVisits71);
        org.junit.Assert.assertNull(strList72);
    }

    @Test
    public void test24493() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest48.test24493");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSamplingLocation putSamplingLocation0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSamplingLocation();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSamplingLocation putSamplingLocation2 = putSamplingLocation0.setCustomId("https");
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttribute> extendedAttributeList3 = putSamplingLocation0.ExtendedAttributes;
        java.lang.String str4 = putSamplingLocation0.VerticalCollectionMethod;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSamplingLocation putSamplingLocation6 = putSamplingLocation0.setVerticalDatum("yyyy'-'MM'-'dd'T'HH':'mm':'ss");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes7 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSamplingLocation putSamplingLocation8 = putSamplingLocation6.setAuditAttributes(auditAttributes7);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes9 = putSamplingLocation6.getAuditAttributes();
        org.junit.Assert.assertNotNull(putSamplingLocation2);
        org.junit.Assert.assertNull(extendedAttributeList3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNotNull(putSamplingLocation6);
        org.junit.Assert.assertNotNull(putSamplingLocation8);
        org.junit.Assert.assertNotNull(auditAttributes9);
    }

    @Test
    public void test24494() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest48.test24494");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray3 = new java.lang.String[] { "", "" };
        java.util.ArrayList<java.lang.String> strList4 = new java.util.ArrayList<java.lang.String>();
        boolean boolean5 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList4, strArray3);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_6 = getObservationsV2_0.setDataClassifications((java.util.List<java.lang.String>) strList4);
        getObservationsV2_6.DepthUnitCustomId = "hi!";
        java.lang.String str9 = getObservationsV2_6.DepthUnitId;
        java.util.List<java.lang.String> strList10 = getObservationsV2_6.LabResultLaboratoryIds;
        getObservationsV2_6.MaxNumericResultValue = (-1.0d);
        java.lang.Integer int13 = getObservationsV2_6.Limit;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_15 = getObservationsV2_6.setActivityCustomId("multipart/form-data; boundary=****73426a9f-8a73-4fda-95b3-78cea45bbfe9****");
        java.lang.Double double16 = getObservationsV2_15.MinNumericResultValue;
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(getObservationsV2_6);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNull(strList10);
        org.junit.Assert.assertNull(int13);
        org.junit.Assert.assertNotNull(getObservationsV2_15);
        org.junit.Assert.assertNull(double16);
    }

    @Test
    public void test24495() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest48.test24495");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutObservationV2 putObservationV2_0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutObservationV2();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty observedProperty1 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutObservationV2 putObservationV2_2 = putObservationV2_0.setObservedProperty(observedProperty1);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Activity activity3 = putObservationV2_2.Activity;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DataClassificationType dataClassificationType4 = putObservationV2_2.getDataClassification();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.CategoricalResult categoricalResult5 = putObservationV2_2.CategoricalResult;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Specimen specimen6 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutObservationV2 putObservationV2_7 = putObservationV2_2.setSpecimen(specimen6);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity postActivity8 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity();
        postActivity8.SourceActivityId = "2021.4.62.0";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity plannedActivity11 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity postActivity12 = postActivity8.setPlannedActivity(plannedActivity11);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity postActivity14 = postActivity8.setLoggerFileName("https");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation15 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedFieldResult plannedFieldResult16 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation17 = observation15.setPlannedFieldResult(plannedFieldResult16);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabInstruction labInstruction18 = null;
        observation17.LabInstruction = labInstruction18;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationStatistics observationStatistics20 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation21 = observation17.setStatistics(observationStatistics20);
        java.time.OffsetDateTime offsetDateTime22 = observation21.getResultTime();
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple> importHistoryEventSimpleList23 = observation21.ImportHistoryEventSimples;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty observedProperty24 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation25 = observation21.setObservedProperty(observedProperty24);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.RuleValidationDetails[] ruleValidationDetailsArray26 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.RuleValidationDetails[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.RuleValidationDetails> ruleValidationDetailsList27 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.RuleValidationDetails>();
        boolean boolean28 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.RuleValidationDetails>) ruleValidationDetailsList27, ruleValidationDetailsArray26);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation29 = observation21.setValidationWarnings((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.RuleValidationDetails>) ruleValidationDetailsList27);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity postActivity30 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttribute[] extendedAttributeArray31 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttribute[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttribute> extendedAttributeList32 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttribute>();
        boolean boolean33 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttribute>) extendedAttributeList32, extendedAttributeArray31);
        postActivity30.ExtendedAttributes = extendedAttributeList32;
        observation29.ExtendedAttributes = extendedAttributeList32;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity postActivity36 = postActivity8.setExtendedAttributes((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttribute>) extendedAttributeList32);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutObservationV2 putObservationV2_37 = putObservationV2_2.setExtendedAttributes((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttribute>) extendedAttributeList32);
        java.lang.String str38 = putObservationV2_37.CustomId;
        java.lang.String str39 = putObservationV2_37.getComment();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutActivity putActivity40 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutActivity();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity quantity41 = null;
        putActivity40.Depth = quantity41;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutActivity putActivity43 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutActivity();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity plannedActivity44 = putActivity43.PlannedActivity;
        java.time.OffsetDateTime offsetDateTime45 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutActivity putActivity46 = putActivity43.setEndTime(offsetDateTime45);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocation samplingLocation47 = null;
        putActivity46.SamplingLocation = samplingLocation47;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservedProperty postObservedProperty49 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservedProperty();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UnitGroup unitGroup50 = postObservedProperty49.UnitGroup;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity quantity51 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Unit unit52 = null;
        quantity51.Unit = unit52;
        postObservedProperty49.LowerLimit = quantity51;
        putActivity46.Depth = quantity51;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutActivity putActivity56 = putActivity40.setDepth(quantity51);
        putObservationV2_37.Depth = quantity51;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity quantity58 = putObservationV2_37.Depth;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutObservationV2 putObservationV2_60 = putObservationV2_37.setId("/AQUARIUS/Provisioning/v1");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedFieldResult plannedFieldResult61 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedFieldResult();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes62 = plannedFieldResult61.AuditAttributes;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails63 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails65 = labResultDetails63.setAnalysisComment("/AQUARIUS/Acquisition/v2");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes66 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails67 = labResultDetails65.setAuditAttributes(auditAttributes66);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedFieldResult plannedFieldResult68 = plannedFieldResult61.setAuditAttributes(auditAttributes66);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty observedProperty69 = plannedFieldResult68.getObservedProperty();
        plannedFieldResult68.DeviceType = "multipart/form-data; boundary=****44f0772e-c3ca-4316-8e2a-61ec8540d661****";
        java.lang.String str72 = plannedFieldResult68.Comment;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutObservationV2 putObservationV2_73 = putObservationV2_60.setPlannedFieldResult(plannedFieldResult68);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Medium medium74 = putObservationV2_73.Medium;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethodSimple analysisMethodSimple75 = putObservationV2_73.AnalysisMethod;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethodSimple analysisMethodSimple76 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethodSimple();
        analysisMethodSimple76.Name = "/AQUARIUS/Acquisition/v2://9999-12-31T23:59:59.999Z";
        java.lang.String str79 = analysisMethodSimple76.Id;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethodSimple analysisMethodSimple81 = analysisMethodSimple76.setName("MinInstant");
        putObservationV2_73.AnalysisMethod = analysisMethodSimple81;
        org.junit.Assert.assertNotNull(putObservationV2_2);
        org.junit.Assert.assertNull(activity3);
        org.junit.Assert.assertNull(dataClassificationType4);
        org.junit.Assert.assertNull(categoricalResult5);
        org.junit.Assert.assertNotNull(putObservationV2_7);
        org.junit.Assert.assertNotNull(postActivity12);
        org.junit.Assert.assertNotNull(postActivity14);
        org.junit.Assert.assertNotNull(observation17);
        org.junit.Assert.assertNotNull(observation21);
        org.junit.Assert.assertNull(offsetDateTime22);
        org.junit.Assert.assertNull(importHistoryEventSimpleList23);
        org.junit.Assert.assertNotNull(observation25);
        org.junit.Assert.assertNotNull(ruleValidationDetailsArray26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(observation29);
        org.junit.Assert.assertNotNull(extendedAttributeArray31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(postActivity36);
        org.junit.Assert.assertNotNull(putObservationV2_37);
        org.junit.Assert.assertNull(str38);
        org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertNull(plannedActivity44);
        org.junit.Assert.assertNotNull(putActivity46);
        org.junit.Assert.assertNull(unitGroup50);
        org.junit.Assert.assertNotNull(putActivity56);
        org.junit.Assert.assertNotNull(quantity58);
        org.junit.Assert.assertNotNull(putObservationV2_60);
        org.junit.Assert.assertNull(auditAttributes62);
        org.junit.Assert.assertNotNull(labResultDetails65);
        org.junit.Assert.assertNotNull(labResultDetails67);
        org.junit.Assert.assertNotNull(plannedFieldResult68);
        org.junit.Assert.assertNull(observedProperty69);
        org.junit.Assert.assertNull(str72);
        org.junit.Assert.assertNotNull(putObservationV2_73);
        org.junit.Assert.assertNull(medium74);
        org.junit.Assert.assertNull(analysisMethodSimple75);
        org.junit.Assert.assertNull(str79);
        org.junit.Assert.assertNotNull(analysisMethodSimple81);
    }

    @Test
    public void test24496() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest48.test24496");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple standardSimple0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple();
        com.aquaticinformatics.aquarius.sdk.samples.Interval interval1 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple standardSimple2 = standardSimple0.setApplicabilityRange(interval1);
        java.lang.String str3 = standardSimple0.getCustomId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple standardSimple5 = standardSimple0.setActive((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple standardSimple7 = standardSimple5.setName("");
        java.lang.String str8 = standardSimple5.Name;
        java.lang.String str9 = standardSimple5.Id;
        org.junit.Assert.assertNotNull(standardSimple2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(standardSimple5);
        org.junit.Assert.assertNotNull(standardSimple7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNull(str9);
    }

    @Test
    public void test24497() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest48.test24497");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetAnalyticalGroup getAnalyticalGroup0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetAnalyticalGroup();
        java.lang.String str1 = getAnalyticalGroup0.getId();
        java.lang.Object obj2 = getAnalyticalGroup0.getResponseType();
        java.lang.Object obj3 = getAnalyticalGroup0.getResponseType();
        getAnalyticalGroup0.Id = "hi!";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetAnalyticalGroup getAnalyticalGroup7 = getAnalyticalGroup0.setId("multipart/form-data; boundary=****6b8051d4-caf2-4095-9f11-faa36b95fc28****");
        java.lang.String str8 = getAnalyticalGroup0.getId();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(obj2);
        org.junit.Assert.assertEquals(obj2.toString(), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$AnalyticalGroup");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj2), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$AnalyticalGroup");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj2), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$AnalyticalGroup");
        org.junit.Assert.assertNotNull(obj3);
        org.junit.Assert.assertEquals(obj3.toString(), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$AnalyticalGroup");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj3), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$AnalyticalGroup");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj3), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$AnalyticalGroup");
        org.junit.Assert.assertNotNull(getAnalyticalGroup7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "multipart/form-data; boundary=****6b8051d4-caf2-4095-9f11-faa36b95fc28****" + "'", str8, "multipart/form-data; boundary=****6b8051d4-caf2-4095-9f11-faa36b95fc28****");
    }

    @Test
    public void test24498() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest48.test24498");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservationV2 postObservationV2_0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservationV2();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabInstruction labInstruction1 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservationV2 postObservationV2_2 = postObservationV2_0.setLabInstruction(labInstruction1);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.NumericResult numericResult3 = null;
        postObservationV2_0.NumericResult = numericResult3;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultGrade resultGrade5 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultGrade();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultGrade resultGrade7 = resultGrade5.setId("/AQUARIUS/Provisioning/v1");
        resultGrade5.CustomId = "/AQUARIUS/Provisioning/v1";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultGradeSystemCodeType resultGradeSystemCodeType10 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultGrade resultGrade11 = resultGrade5.setSystemCode(resultGradeSystemCodeType10);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultGradeSystemCodeType resultGradeSystemCodeType12 = resultGrade5.SystemCode;
        postObservationV2_0.ResultGrade = resultGrade5;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.QualityControlType qualityControlType14 = postObservationV2_0.QualityControlType;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservationV2 postObservationV2_15 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservationV2();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabInstruction labInstruction16 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservationV2 postObservationV2_17 = postObservationV2_15.setLabInstruction(labInstruction16);
        java.lang.String str18 = postObservationV2_17.MediumSubdivision;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLabAnalysisMethod postLabAnalysisMethod19 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLabAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes20 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLabAnalysisMethod postLabAnalysisMethod21 = postLabAnalysisMethod19.setAuditAttributes(auditAttributes20);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty[] observedPropertyArray22 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty> observedPropertyList23 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty>) observedPropertyList23, observedPropertyArray22);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLabAnalysisMethod postLabAnalysisMethod25 = postLabAnalysisMethod21.setObservedProperties((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty>) observedPropertyList23);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroup analyticalGroup26 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroup();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupType analyticalGroupType27 = analyticalGroup26.getType();
        analyticalGroup26.Name = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSSSSSZZZZZ";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroup analyticalGroup30 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroup();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem analyticalGroupItem31 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod32 = analyticalGroupItem31.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem analyticalGroupItem33 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod34 = analyticalGroupItem33.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod35 = analyticalGroupItem33.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem analyticalGroupItem36 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod37 = analyticalGroupItem36.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod38 = analyticalGroupItem36.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod39 = null;
        analyticalGroupItem36.AnalysisMethod = analysisMethod39;
        java.lang.String str41 = analyticalGroupItem36.getHoldingTime();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem analyticalGroupItem42 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod43 = analyticalGroupItem42.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod44 = analyticalGroupItem42.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem analyticalGroupItem45 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod46 = analyticalGroupItem45.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem analyticalGroupItem47 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod48 = analyticalGroupItem47.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod49 = analyticalGroupItem47.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod50 = null;
        analyticalGroupItem47.AnalysisMethod = analysisMethod50;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem[] analyticalGroupItemArray52 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem[] { analyticalGroupItem31, analyticalGroupItem33, analyticalGroupItem36, analyticalGroupItem42, analyticalGroupItem45, analyticalGroupItem47 };
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem> analyticalGroupItemList53 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem>();
        boolean boolean54 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem>) analyticalGroupItemList53, analyticalGroupItemArray52);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroup analyticalGroup55 = analyticalGroup30.setAnalyticalGroupItems((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem>) analyticalGroupItemList53);
        analyticalGroup26.AnalyticalGroupItems = analyticalGroupItemList53;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes57 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes();
        analyticalGroup26.AuditAttributes = auditAttributes57;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLabAnalysisMethod postLabAnalysisMethod59 = postLabAnalysisMethod25.setAuditAttributes(auditAttributes57);
        java.time.OffsetDateTime offsetDateTime60 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes61 = auditAttributes57.setModificationTime(offsetDateTime60);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservationV2 postObservationV2_62 = postObservationV2_17.setAuditAttributes(auditAttributes61);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabInstruction labInstruction63 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabInstruction();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservationV2 postObservationV2_64 = postObservationV2_17.setLabInstruction(labInstruction63);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod65 = null;
        labInstruction63.AnalysisMethod = analysisMethod65;
        labInstruction63.PreparationMethod = "MaxDuration";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabInstruction labInstruction70 = labInstruction63.setAnalysisComment("/AQUARIUS/Acquisition/v2://9999-12-31T23:59:59.999Z");
        postObservationV2_0.LabInstruction = labInstruction63;
        java.lang.String str72 = labInstruction63.AnalysisComment;
        labInstruction63.AnalysisComment = "multipart/form-data; boundary=****46b5d5e5-73d1-43c8-8704-4a7bbf2d8314****";
        org.junit.Assert.assertNotNull(postObservationV2_2);
        org.junit.Assert.assertNotNull(resultGrade7);
        org.junit.Assert.assertNotNull(resultGrade11);
        org.junit.Assert.assertNull(resultGradeSystemCodeType12);
        org.junit.Assert.assertNull(qualityControlType14);
        org.junit.Assert.assertNotNull(postObservationV2_17);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNotNull(postLabAnalysisMethod21);
        org.junit.Assert.assertNotNull(observedPropertyArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(postLabAnalysisMethod25);
        org.junit.Assert.assertNull(analyticalGroupType27);
        org.junit.Assert.assertNull(analysisMethod32);
        org.junit.Assert.assertNull(analysisMethod34);
        org.junit.Assert.assertNull(analysisMethod35);
        org.junit.Assert.assertNull(analysisMethod37);
        org.junit.Assert.assertNull(analysisMethod38);
        org.junit.Assert.assertNull(str41);
        org.junit.Assert.assertNull(analysisMethod43);
        org.junit.Assert.assertNull(analysisMethod44);
        org.junit.Assert.assertNull(analysisMethod46);
        org.junit.Assert.assertNull(analysisMethod48);
        org.junit.Assert.assertNull(analysisMethod49);
        org.junit.Assert.assertNotNull(analyticalGroupItemArray52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(analyticalGroup55);
        org.junit.Assert.assertNotNull(postLabAnalysisMethod59);
        org.junit.Assert.assertNotNull(auditAttributes61);
        org.junit.Assert.assertNotNull(postObservationV2_62);
        org.junit.Assert.assertNotNull(postObservationV2_64);
        org.junit.Assert.assertNotNull(labInstruction70);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "/AQUARIUS/Acquisition/v2://9999-12-31T23:59:59.999Z" + "'", str72, "/AQUARIUS/Acquisition/v2://9999-12-31T23:59:59.999Z");
    }

    @Test
    public void test24499() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest48.test24499");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutProject putProject0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutProject();
        java.lang.String str1 = putProject0.ScopeStatement;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes2 = null;
        putProject0.AuditAttributes = auditAttributes2;
        java.time.OffsetDateTime offsetDateTime4 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutProject putProject5 = putProject0.setStartTime(offsetDateTime4);
        putProject0.CustomId = "http://MaxDurationhttp/json/reply/Integer";
        java.lang.String str8 = putProject0.getCustomId();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(putProject5);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "http://MaxDurationhttp/json/reply/Integer" + "'", str8, "http://MaxDurationhttp/json/reply/Integer");
    }

    @Test
    public void test24500() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest48.test24500");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostRole postRole0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostRole();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RoleApprovalTransition roleApprovalTransition1 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RoleApprovalTransition();
        java.lang.Long long2 = roleApprovalTransition1.getToApprovalLevel();
        java.lang.Long long3 = roleApprovalTransition1.ToApprovalLevel;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RoleApprovalTransition roleApprovalTransition4 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RoleApprovalTransition();
        java.lang.Long long5 = roleApprovalTransition4.getToApprovalLevel();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RoleApprovalTransition roleApprovalTransition6 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RoleApprovalTransition();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RoleApprovalTransition roleApprovalTransition8 = roleApprovalTransition6.setToApprovalLevel((java.lang.Long) (-1L));
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RoleApprovalTransition roleApprovalTransition9 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RoleApprovalTransition();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RoleApprovalTransition roleApprovalTransition11 = roleApprovalTransition9.setToApprovalLevel((java.lang.Long) (-1L));
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RoleApprovalTransition roleApprovalTransition13 = roleApprovalTransition9.setToApprovalLevel((java.lang.Long) 0L);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RoleApprovalTransition roleApprovalTransition14 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RoleApprovalTransition();
        java.lang.Long long15 = roleApprovalTransition14.getToApprovalLevel();
        java.lang.Long long16 = roleApprovalTransition14.ToApprovalLevel;
        java.lang.Long long17 = roleApprovalTransition14.getToApprovalLevel();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RoleApprovalTransition roleApprovalTransition18 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RoleApprovalTransition();
        java.lang.Long long19 = roleApprovalTransition18.getToApprovalLevel();
        java.lang.Long long20 = roleApprovalTransition18.ToApprovalLevel;
        java.lang.Long long21 = roleApprovalTransition18.getToApprovalLevel();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RoleApprovalTransition[] roleApprovalTransitionArray22 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RoleApprovalTransition[] { roleApprovalTransition1, roleApprovalTransition4, roleApprovalTransition8, roleApprovalTransition9, roleApprovalTransition14, roleApprovalTransition18 };
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RoleApprovalTransition> roleApprovalTransitionList23 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RoleApprovalTransition>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RoleApprovalTransition>) roleApprovalTransitionList23, roleApprovalTransitionArray22);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RoleBase roleBase25 = postRole0.setRoleApprovalTransitions(roleApprovalTransitionList23);
        java.lang.Boolean boolean26 = postRole0.isCanAddAppendConfigurations();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RoleBase roleBase28 = postRole0.setCanEditData((java.lang.Boolean) true);
        java.lang.Boolean boolean29 = roleBase28.isCanAddOrRemoveLocations();
        roleBase28.Name = "multipart/form-data; boundary=****895246ac-50fd-4284-9cd4-5cdd869d7100****";
        java.lang.Boolean boolean32 = roleBase28.isCanEditAppendConfigurations();
        org.junit.Assert.assertNull(long2);
        org.junit.Assert.assertNull(long3);
        org.junit.Assert.assertNull(long5);
        org.junit.Assert.assertNotNull(roleApprovalTransition8);
        org.junit.Assert.assertNotNull(roleApprovalTransition11);
        org.junit.Assert.assertNotNull(roleApprovalTransition13);
        org.junit.Assert.assertNull(long15);
        org.junit.Assert.assertNull(long16);
        org.junit.Assert.assertNull(long17);
        org.junit.Assert.assertNull(long19);
        org.junit.Assert.assertNull(long20);
        org.junit.Assert.assertNull(long21);
        org.junit.Assert.assertNotNull(roleApprovalTransitionArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(roleBase25);
        org.junit.Assert.assertNull(boolean26);
        org.junit.Assert.assertNotNull(roleBase28);
        org.junit.Assert.assertNull(boolean29);
        org.junit.Assert.assertNull(boolean32);
    }
}
