import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest106 {

    public static boolean debug = false;

    @Test
    public void test53001() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest106.test53001");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutUnit putUnit0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutUnit();
        java.lang.String str1 = putUnit0.SingularName;
        putUnit0.UniqueId = "/AQUARIUS/Provisioning/v1";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.UnitBase unitBase5 = putUnit0.setPluralName("multipart/form-data; boundary=****44f0772e-c3ca-4316-8e2a-61ec8540d661****");
        java.lang.String str6 = unitBase5.getSingularName();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(unitBase5);
        org.junit.Assert.assertNull(str6);
    }

    @Test
    public void test53002() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest106.test53002");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenWithObservations specimenWithObservations0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenWithObservations();
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttribute> extendedAttributeList1 = specimenWithObservations0.ExtendedAttributes;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenViewStatusType specimenViewStatusType2 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenViewStatusType.RECEIVED_SOME;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenWithObservations specimenWithObservations3 = specimenWithObservations0.setStatus(specimenViewStatusType2);
        specimenWithObservations0.NumberOfRequestedObservations = 2;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroup analyticalGroup6 = specimenWithObservations0.getAnalyticalGroup();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation7 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedFieldResult plannedFieldResult8 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation9 = observation7.setPlannedFieldResult(plannedFieldResult8);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabInstruction labInstruction10 = null;
        observation9.LabInstruction = labInstruction10;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationStatistics observationStatistics12 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation13 = observation9.setStatistics(observationStatistics12);
        java.time.OffsetDateTime offsetDateTime14 = observation13.getResultTime();
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple> importHistoryEventSimpleList15 = observation13.ImportHistoryEventSimples;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty observedProperty16 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation17 = observation13.setObservedProperty(observedProperty16);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.RuleValidationDetails[] ruleValidationDetailsArray18 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.RuleValidationDetails[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.RuleValidationDetails> ruleValidationDetailsList19 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.RuleValidationDetails>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.RuleValidationDetails>) ruleValidationDetailsList19, ruleValidationDetailsArray18);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation21 = observation13.setValidationWarnings((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.RuleValidationDetails>) ruleValidationDetailsList19);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity postActivity22 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttribute[] extendedAttributeArray23 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttribute[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttribute> extendedAttributeList24 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttribute>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttribute>) extendedAttributeList24, extendedAttributeArray23);
        postActivity22.ExtendedAttributes = extendedAttributeList24;
        observation21.ExtendedAttributes = extendedAttributeList24;
        specimenWithObservations0.ExtendedAttributes = extendedAttributeList24;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutProject putProject29 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutProject();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutProject putProject31 = putProject29.setScopeStatement("yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ");
        putProject31.Approved = true;
        java.lang.String str34 = putProject31.getCustomId();
        java.time.OffsetDateTime offsetDateTime35 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutProject putProject36 = putProject31.setStartTime(offsetDateTime35);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty observedProperty37 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty();
        observedProperty37.CasNumber = "MinDuration";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroup analyticalGroup40 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroup();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes41 = null;
        analyticalGroup40.AuditAttributes = auditAttributes41;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroup analyticalGroup44 = analyticalGroup40.setNumberOfObservedPropertiesInGroupItems((java.lang.Integer) 10);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag samplingContextTag45 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag();
        java.lang.String str46 = samplingContextTag45.getDescription();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes47 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag samplingContextTag48 = samplingContextTag45.setAuditAttributes(auditAttributes47);
        java.lang.String str49 = samplingContextTag45.getName();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethodSimple analysisMethodSimple50 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethodSimple();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutDetectioncondition putDetectioncondition51 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutDetectioncondition();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes52 = putDetectioncondition51.getAuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutDetectioncondition putDetectioncondition54 = putDetectioncondition51.setCustomId("http");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivity samplingPlanPlannedActivity55 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivity();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes56 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivity samplingPlanPlannedActivity57 = samplingPlanPlannedActivity55.setAuditAttributes(auditAttributes56);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes58 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes60 = auditAttributes58.setCreationUserProfileId("'.'SSSSSSS");
        samplingPlanPlannedActivity57.AuditAttributes = auditAttributes58;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes62 = samplingPlanPlannedActivity57.AuditAttributes;
        putDetectioncondition51.AuditAttributes = auditAttributes62;
        analysisMethodSimple50.AuditAttributes = auditAttributes62;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag samplingContextTag65 = samplingContextTag45.setAuditAttributes(auditAttributes62);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroup analyticalGroup66 = analyticalGroup40.setAuditAttributes(auditAttributes62);
        java.lang.String str67 = auditAttributes62.CreationUserProfileId;
        observedProperty37.AuditAttributes = auditAttributes62;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutProject putProject69 = putProject31.setAuditAttributes(auditAttributes62);
        specimenWithObservations0.AuditAttributes = auditAttributes62;
        java.lang.Boolean boolean71 = specimenWithObservations0.Filtered;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenViewStatusType specimenViewStatusType72 = specimenWithObservations0.getStatus();
        java.lang.Boolean boolean73 = specimenWithObservations0.Filtered;
        org.junit.Assert.assertNull(extendedAttributeList1);
        org.junit.Assert.assertTrue("'" + specimenViewStatusType2 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenViewStatusType.RECEIVED_SOME + "'", specimenViewStatusType2.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenViewStatusType.RECEIVED_SOME));
        org.junit.Assert.assertNotNull(specimenWithObservations3);
        org.junit.Assert.assertNull(analyticalGroup6);
        org.junit.Assert.assertNotNull(observation9);
        org.junit.Assert.assertNotNull(observation13);
        org.junit.Assert.assertNull(offsetDateTime14);
        org.junit.Assert.assertNull(importHistoryEventSimpleList15);
        org.junit.Assert.assertNotNull(observation17);
        org.junit.Assert.assertNotNull(ruleValidationDetailsArray18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(observation21);
        org.junit.Assert.assertNotNull(extendedAttributeArray23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(putProject31);
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertNotNull(putProject36);
        org.junit.Assert.assertNotNull(analyticalGroup44);
        org.junit.Assert.assertNull(str46);
        org.junit.Assert.assertNotNull(samplingContextTag48);
        org.junit.Assert.assertNull(str49);
        org.junit.Assert.assertNull(auditAttributes52);
        org.junit.Assert.assertNotNull(putDetectioncondition54);
        org.junit.Assert.assertNotNull(samplingPlanPlannedActivity57);
        org.junit.Assert.assertNotNull(auditAttributes60);
        org.junit.Assert.assertNotNull(auditAttributes62);
        org.junit.Assert.assertNotNull(samplingContextTag65);
        org.junit.Assert.assertNotNull(analyticalGroup66);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "'.'SSSSSSS" + "'", str67, "'.'SSSSSSS");
        org.junit.Assert.assertNotNull(putProject69);
        org.junit.Assert.assertNull(boolean71);
        org.junit.Assert.assertTrue("'" + specimenViewStatusType72 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenViewStatusType.RECEIVED_SOME + "'", specimenViewStatusType72.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenViewStatusType.RECEIVED_SOME));
        org.junit.Assert.assertNull(boolean73);
    }

    @Test
    public void test53003() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest106.test53003");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VolumetricDischargeReading volumetricDischargeReading0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VolumetricDischargeReading();
        java.lang.String str1 = volumetricDischargeReading0.getName();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary2 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay3 = dischargeSummary2.getMeanGageHeight();
        java.lang.String str4 = dischargeSummary2.getGageHeightComments();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary6 = dischargeSummary2.setPublish((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay7 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay9 = doubleWithDisplay7.setNumeric((java.lang.Double) 10.0d);
        dischargeSummary2.DurationInHours = doubleWithDisplay9;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VolumetricDischargeReading volumetricDischargeReading11 = volumetricDischargeReading0.setDischarge(doubleWithDisplay9);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay12 = volumetricDischargeReading0.DurationInSeconds;
        java.lang.Boolean boolean13 = volumetricDischargeReading0.IsUsed;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay14 = volumetricDischargeReading0.VolumeChange;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Reading reading15 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Reading();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary16 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary18 = dischargeSummary16.setPublish((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay19 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay();
        dischargeSummary18.DifferenceDuringVisit = doubleWithDisplay19;
        reading15.Value = doubleWithDisplay19;
        volumetricDischargeReading0.StartingVolume = doubleWithDisplay19;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay23 = volumetricDischargeReading0.DurationInSeconds;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(quantityWithDisplay3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNotNull(dischargeSummary6);
        org.junit.Assert.assertNotNull(doubleWithDisplay9);
        org.junit.Assert.assertNotNull(volumetricDischargeReading11);
        org.junit.Assert.assertNull(doubleWithDisplay12);
        org.junit.Assert.assertNull(boolean13);
        org.junit.Assert.assertNull(doubleWithDisplay14);
        org.junit.Assert.assertNotNull(dischargeSummary18);
        org.junit.Assert.assertNull(doubleWithDisplay23);
    }

    @Test
    public void test53004() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest106.test53004");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostReferencePoint postReferencePoint0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostReferencePoint();
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostReferencePointPeriod> postReferencePointPeriodList1 = postReferencePoint0.getReferencePointPeriods();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostReferencePoint postReferencePoint2 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostReferencePoint();
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostReferencePointPeriod> postReferencePointPeriodList3 = postReferencePoint2.getReferencePointPeriods();
        java.lang.Double double4 = postReferencePoint2.Latitude;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostReferencePoint postReferencePoint5 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostReferencePoint();
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostReferencePointPeriod> postReferencePointPeriodList6 = postReferencePoint5.getReferencePointPeriods();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostReferencePointPeriod postReferencePointPeriod7 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostReferencePointPeriod();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostReferencePointPeriod[] postReferencePointPeriodArray8 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostReferencePointPeriod[] { postReferencePointPeriod7 };
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostReferencePointPeriod> postReferencePointPeriodList9 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostReferencePointPeriod>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostReferencePointPeriod>) postReferencePointPeriodList9, postReferencePointPeriodArray8);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostReferencePoint postReferencePoint11 = postReferencePoint5.setReferencePointPeriods(postReferencePointPeriodList9);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostReferencePoint postReferencePoint12 = postReferencePoint2.setReferencePointPeriods(postReferencePointPeriodList9);
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostReferencePointPeriod> postReferencePointPeriodList13 = postReferencePoint12.ReferencePointPeriods;
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostReferencePointPeriod> postReferencePointPeriodList14 = postReferencePoint12.ReferencePointPeriods;
        postReferencePoint0.ReferencePointPeriods = postReferencePointPeriodList14;
        org.junit.Assert.assertNull(postReferencePointPeriodList1);
        org.junit.Assert.assertNull(postReferencePointPeriodList3);
        org.junit.Assert.assertNull(double4);
        org.junit.Assert.assertNull(postReferencePointPeriodList6);
        org.junit.Assert.assertNotNull(postReferencePointPeriodArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(postReferencePoint11);
        org.junit.Assert.assertNotNull(postReferencePoint12);
        org.junit.Assert.assertNotNull(postReferencePointPeriodList13);
        org.junit.Assert.assertNotNull(postReferencePointPeriodList14);
    }

    @Test
    public void test53005() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest106.test53005");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutLabReport putLabReport0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutLabReport();
        java.lang.String str1 = putLabReport0.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostDetectioncondition postDetectioncondition2 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostDetectioncondition();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes3 = postDetectioncondition2.getAuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostDetectioncondition postDetectioncondition5 = postDetectioncondition2.setId("9999-12-31T23:59:59.999Z");
        postDetectioncondition2.Description = "9999-12-31T23:59:59.999Z";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostDetectioncondition postDetectioncondition9 = postDetectioncondition2.setId("/AQUARIUS/Provisioning/v1");
        postDetectioncondition2.CustomId = "/AQUARIUS/Acquisition/v2";
        java.lang.Object obj12 = postDetectioncondition2.getResponseType();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivity samplingPlanPlannedActivity13 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivity();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes14 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivity samplingPlanPlannedActivity15 = samplingPlanPlannedActivity13.setAuditAttributes(auditAttributes14);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes16 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes18 = auditAttributes16.setCreationUserProfileId("'.'SSSSSSS");
        samplingPlanPlannedActivity15.AuditAttributes = auditAttributes16;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostDetectioncondition postDetectioncondition20 = postDetectioncondition2.setAuditAttributes(auditAttributes16);
        putLabReport0.AuditAttributes = auditAttributes16;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutFieldVisit putFieldVisit22 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutFieldVisit();
        putFieldVisit22.Notes = "MinDuration";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ProjectSimple projectSimple25 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutFieldVisit putFieldVisit26 = putFieldVisit22.setProject(projectSimple25);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Schedule schedule27 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Schedule();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Schedule schedule29 = schedule27.setCustomId("");
        java.time.OffsetDateTime offsetDateTime30 = schedule27.getLastGenerationDate();
        putFieldVisit22.Schedule = schedule27;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocation samplingLocation32 = putFieldVisit22.SamplingLocation;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.FieldTripSimple fieldTripSimple33 = null;
        putFieldVisit22.FieldTrip = fieldTripSimple33;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutFieldVisit putFieldVisit36 = putFieldVisit22.setNotes("yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlan samplingPlan37 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlan();
        samplingPlan37.SamplingLocationGroupSelectionTypeRandomCount = 0;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationGroupSelectionType samplingLocationGroupSelectionType40 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationGroupSelectionType.ALL;
        samplingPlan37.SamplingLocationGroupSelectionType = samplingLocationGroupSelectionType40;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationGroup samplingLocationGroup42 = samplingPlan37.getSamplingLocationGroup();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes43 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlan samplingPlan44 = samplingPlan37.setAuditAttributes(auditAttributes43);
        putFieldVisit22.SamplingPlan = samplingPlan37;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Schedule schedule46 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Schedule();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Schedule schedule48 = schedule46.setCustomId("");
        putFieldVisit22.Schedule = schedule48;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutFieldVisit putFieldVisit50 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutFieldVisit();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity[] plannedActivityArray51 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity> plannedActivityList52 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity>();
        boolean boolean53 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity>) plannedActivityList52, plannedActivityArray51);
        putFieldVisit50.PlannedActivities = plannedActivityList52;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment55 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment();
        java.lang.String str56 = domainObjectAttachment55.getId();
        java.lang.String str57 = domainObjectAttachment55.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Attachment attachment58 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment59 = domainObjectAttachment55.setAttachment(attachment58);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment60 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment();
        java.lang.String str61 = domainObjectAttachment60.getId();
        java.lang.String str62 = domainObjectAttachment60.getId();
        domainObjectAttachment60.Id = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment66 = domainObjectAttachment60.setId("hi!");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment67 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment();
        java.lang.String str68 = domainObjectAttachment67.getId();
        java.lang.String str69 = domainObjectAttachment67.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Attachment attachment70 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment71 = domainObjectAttachment67.setAttachment(attachment70);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment72 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment();
        java.lang.String str73 = domainObjectAttachment72.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment74 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment();
        java.lang.String str75 = domainObjectAttachment74.getId();
        java.lang.String str76 = domainObjectAttachment74.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Attachment attachment77 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment78 = domainObjectAttachment74.setAttachment(attachment77);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment79 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment();
        java.lang.String str80 = domainObjectAttachment79.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment[] domainObjectAttachmentArray81 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment[] { domainObjectAttachment55, domainObjectAttachment60, domainObjectAttachment67, domainObjectAttachment72, domainObjectAttachment74, domainObjectAttachment79 };
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment> domainObjectAttachmentList82 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment>();
        boolean boolean83 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment>) domainObjectAttachmentList82, domainObjectAttachmentArray81);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutFieldVisit putFieldVisit84 = putFieldVisit50.setAttachments((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment>) domainObjectAttachmentList82);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlan samplingPlan85 = putFieldVisit50.getSamplingPlan();
        java.time.OffsetDateTime offsetDateTime86 = null;
        putFieldVisit50.EndTime = offsetDateTime86;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutFieldVisit putFieldVisit89 = putFieldVisit50.setId("9999-12-31T23:59:59.999Z");
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment> domainObjectAttachmentList90 = putFieldVisit89.Attachments;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutFieldVisit putFieldVisit91 = putFieldVisit22.setAttachments(domainObjectAttachmentList90);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutLabReport putLabReport92 = putLabReport0.setAttachments(domainObjectAttachmentList90);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutLabReport putLabReport94 = putLabReport0.setCaseNarrative("multipart/form-data; boundary=****221f1588-b890-43c2-a3c8-0d77cfe54330****");
        java.time.OffsetDateTime offsetDateTime95 = null;
        putLabReport94.DateReceived = offsetDateTime95;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(auditAttributes3);
        org.junit.Assert.assertNotNull(postDetectioncondition5);
        org.junit.Assert.assertNotNull(postDetectioncondition9);
        org.junit.Assert.assertNotNull(obj12);
        org.junit.Assert.assertEquals(obj12.toString(), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$ResultDetectionCondition");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj12), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$ResultDetectionCondition");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj12), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$ResultDetectionCondition");
        org.junit.Assert.assertNotNull(samplingPlanPlannedActivity15);
        org.junit.Assert.assertNotNull(auditAttributes18);
        org.junit.Assert.assertNotNull(postDetectioncondition20);
        org.junit.Assert.assertNotNull(putFieldVisit26);
        org.junit.Assert.assertNotNull(schedule29);
        org.junit.Assert.assertNull(offsetDateTime30);
        org.junit.Assert.assertNull(samplingLocation32);
        org.junit.Assert.assertNotNull(putFieldVisit36);
        org.junit.Assert.assertTrue("'" + samplingLocationGroupSelectionType40 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationGroupSelectionType.ALL + "'", samplingLocationGroupSelectionType40.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationGroupSelectionType.ALL));
        org.junit.Assert.assertNull(samplingLocationGroup42);
        org.junit.Assert.assertNotNull(samplingPlan44);
        org.junit.Assert.assertNotNull(schedule48);
        org.junit.Assert.assertNotNull(plannedActivityArray51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNull(str56);
        org.junit.Assert.assertNull(str57);
        org.junit.Assert.assertNotNull(domainObjectAttachment59);
        org.junit.Assert.assertNull(str61);
        org.junit.Assert.assertNull(str62);
        org.junit.Assert.assertNotNull(domainObjectAttachment66);
        org.junit.Assert.assertNull(str68);
        org.junit.Assert.assertNull(str69);
        org.junit.Assert.assertNotNull(domainObjectAttachment71);
        org.junit.Assert.assertNull(str73);
        org.junit.Assert.assertNull(str75);
        org.junit.Assert.assertNull(str76);
        org.junit.Assert.assertNotNull(domainObjectAttachment78);
        org.junit.Assert.assertNull(str80);
        org.junit.Assert.assertNotNull(domainObjectAttachmentArray81);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + true + "'", boolean83 == true);
        org.junit.Assert.assertNotNull(putFieldVisit84);
        org.junit.Assert.assertNull(samplingPlan85);
        org.junit.Assert.assertNotNull(putFieldVisit89);
        org.junit.Assert.assertNotNull(domainObjectAttachmentList90);
        org.junit.Assert.assertNotNull(putFieldVisit91);
        org.junit.Assert.assertNotNull(putLabReport92);
        org.junit.Assert.assertNotNull(putLabReport94);
    }

    @Test
    public void test53006() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest106.test53006");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExtendedAttributeDropdownlistitems getExtendedAttributeDropdownlistitems0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExtendedAttributeDropdownlistitems();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_1 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.util.List<java.lang.String> strList2 = getObservationsV2_1.SamplingContextTagIds;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_3 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray5 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList6 = new java.util.ArrayList<java.lang.String>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList6, strArray5);
        getObservationsV2_3.SpecimenIds = strList6;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags9 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray13 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList14 = new java.util.ArrayList<java.lang.String>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList14, strArray13);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags16 = putLocationTags9.setTagUniqueIds(strList14);
        getObservationsV2_3.QualityControlTypes = strList14;
        getObservationsV2_1.ResultGrades = strList14;
        getExtendedAttributeDropdownlistitems0.Search = strList14;
        java.lang.Integer int20 = getExtendedAttributeDropdownlistitems0.Limit;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExtendedAttributeDropdownlistitems getExtendedAttributeDropdownlistitems22 = getExtendedAttributeDropdownlistitems0.setId("https");
        java.lang.Object obj23 = getExtendedAttributeDropdownlistitems22.getResponseType();
        org.junit.Assert.assertNull(strList2);
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(putLocationTags16);
        org.junit.Assert.assertNull(int20);
        org.junit.Assert.assertNotNull(getExtendedAttributeDropdownlistitems22);
        org.junit.Assert.assertNotNull(obj23);
        org.junit.Assert.assertEquals(obj23.toString(), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$SearchResultExtendedAttributeListItem");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj23), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$SearchResultExtendedAttributeListItem");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj23), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$SearchResultExtendedAttributeListItem");
    }

    @Test
    public void test53007() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest106.test53007");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.TimeSeries timeSeries0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.TimeSeries();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.TimeSeries timeSeries2 = timeSeries0.setLocationUniqueId("MinInstant");
        timeSeries0.Publish = true;
        java.lang.Boolean boolean5 = timeSeries0.Publish;
        org.junit.Assert.assertNotNull(timeSeries2);
        org.junit.Assert.assertEquals("'" + boolean5 + "' != '" + true + "'", boolean5, true);
    }

    @Test
    public void test53008() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest106.test53008");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Setting setting0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Setting();
        java.time.Instant instant1 = setting0.getLastModifiedTime();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisit fieldVisit2 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisit();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.GageHeightAtZeroFlowActivity gageHeightAtZeroFlowActivity3 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.GageHeightAtZeroFlowActivity();
        java.time.Instant instant4 = null;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.GageHeightAtZeroFlowActivity gageHeightAtZeroFlowActivity5 = gageHeightAtZeroFlowActivity3.setApplicableSince(instant4);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.GageHeightAtZeroFlowActivity gageHeightAtZeroFlowActivity7 = gageHeightAtZeroFlowActivity5.setIsObserved((java.lang.Boolean) true);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisit fieldVisit8 = fieldVisit2.setGageHeightAtZeroFlowActivity(gageHeightAtZeroFlowActivity7);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CompletedWork completedWork9 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CompletedWork();
        java.lang.Boolean boolean10 = completedWork9.isSafetyInspectionPerformed();
        java.lang.Boolean boolean11 = completedWork9.isGroundWaterLevelPerformed();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitDescription fieldVisitDescription12 = fieldVisit8.setCompletedWork(completedWork9);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_13 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.util.List<java.lang.String> strList14 = getObservationsV2_13.ResultGrades;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MonitoringMethodListServiceResponse monitoringMethodListServiceResponse15 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MonitoringMethodListServiceResponse();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CalibrationCheck calibrationCheck16 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CalibrationCheck();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CalibrationCheckType calibrationCheckType17 = calibrationCheck16.getCalibrationCheckType();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay18 = calibrationCheck16.Value;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse19 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary20 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary22 = dischargeSummary20.setPublish((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse23 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant24 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse25 = locationDescriptionListServiceResponse23.setNextToken(instant24);
        dischargeSummary20.MeasurementTime = instant24;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse27 = locationDescriptionListServiceResponse19.setNextToken(instant24);
        java.time.Instant instant28 = locationDescriptionListServiceResponse19.getNextToken();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CalibrationCheck calibrationCheck29 = calibrationCheck16.setTime(instant28);
        monitoringMethodListServiceResponse15.ResponseTime = instant28;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_31 = getObservationsV2_13.setEndResultTime(instant28);
        fieldVisitDescription12.StartTime = instant28;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Setting setting33 = setting0.setLastModifiedTime(instant28);
        java.time.Instant instant34 = setting33.LastModifiedTime;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Setting setting36 = setting33.setGroup("-PT87591240H");
        setting36.Value = "MinInstant";
        org.junit.Assert.assertNull(instant1);
        org.junit.Assert.assertNotNull(gageHeightAtZeroFlowActivity5);
        org.junit.Assert.assertNotNull(gageHeightAtZeroFlowActivity7);
        org.junit.Assert.assertNotNull(fieldVisit8);
        org.junit.Assert.assertNull(boolean10);
        org.junit.Assert.assertNull(boolean11);
        org.junit.Assert.assertNotNull(fieldVisitDescription12);
        org.junit.Assert.assertNull(strList14);
        org.junit.Assert.assertNull(calibrationCheckType17);
        org.junit.Assert.assertNull(doubleWithDisplay18);
        org.junit.Assert.assertNotNull(dischargeSummary22);
        org.junit.Assert.assertNotNull(instant24);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse25);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse27);
        org.junit.Assert.assertNotNull(instant28);
        org.junit.Assert.assertNotNull(calibrationCheck29);
        org.junit.Assert.assertNotNull(getObservationsV2_31);
        org.junit.Assert.assertNotNull(setting33);
        org.junit.Assert.assertNotNull(instant34);
        org.junit.Assert.assertNotNull(setting36);
    }

    @Test
    public void test53009() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest106.test53009");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesUniqueIdListServiceResponse timeSeriesUniqueIdListServiceResponse0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesUniqueIdListServiceResponse();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingModelEffectiveShiftsByStageValuesServiceRequest ratingModelEffectiveShiftsByStageValuesServiceRequest1 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingModelEffectiveShiftsByStageValuesServiceRequest();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.StatisticalDateTimeOffset statisticalDateTimeOffset2 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.StatisticalDateTimeOffset();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostRecurringReport postRecurringReport3 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostRecurringReport();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary4 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        dischargeSummary4.Reviewer = "";
        java.time.Instant instant7 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        dischargeSummary4.MeasurementTime = instant7;
        postRecurringReport3.NextGenerationDate = instant7;
        java.time.Instant instant10 = postRecurringReport3.getNextGenerationDate();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.StatisticalDateTimeOffset statisticalDateTimeOffset11 = statisticalDateTimeOffset2.setDateTimeOffset(instant10);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingModelEffectiveShiftsByStageValuesServiceRequest ratingModelEffectiveShiftsByStageValuesServiceRequest12 = ratingModelEffectiveShiftsByStageValuesServiceRequest1.setMeasurementTime(instant10);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesUniqueIdListServiceResponse timeSeriesUniqueIdListServiceResponse13 = timeSeriesUniqueIdListServiceResponse0.setNextToken(instant10);
        java.lang.Boolean boolean14 = timeSeriesUniqueIdListServiceResponse13.TokenExpired;
        timeSeriesUniqueIdListServiceResponse13.TokenExpired = true;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisit fieldVisit17 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisit();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DatumConversionResult datumConversionResult18 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DatumConversionResult();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DatumConversionResult datumConversionResult20 = datumConversionResult18.setFailureReason("MinInstant");
        fieldVisit17.DatumConversionResult = datumConversionResult20;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.GageHeightAtZeroFlowActivity gageHeightAtZeroFlowActivity22 = fieldVisit17.GageHeightAtZeroFlowActivity;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.GageHeightAtZeroFlowActivity gageHeightAtZeroFlowActivity23 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.GageHeightAtZeroFlowActivity();
        java.time.Instant instant24 = null;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.GageHeightAtZeroFlowActivity gageHeightAtZeroFlowActivity25 = gageHeightAtZeroFlowActivity23.setApplicableSince(instant24);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisit fieldVisit26 = fieldVisit17.setGageHeightAtZeroFlowActivity(gageHeightAtZeroFlowActivity23);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.GageHeightAtZeroFlowActivity gageHeightAtZeroFlowActivity27 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.GageHeightAtZeroFlowActivity();
        java.time.Instant instant28 = null;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.GageHeightAtZeroFlowActivity gageHeightAtZeroFlowActivity29 = gageHeightAtZeroFlowActivity27.setApplicableSince(instant28);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisit fieldVisit30 = fieldVisit17.setGageHeightAtZeroFlowActivity(gageHeightAtZeroFlowActivity27);
        java.time.Instant instant31 = fieldVisit30.StartTime;
        java.lang.Boolean boolean32 = fieldVisit30.IsValid;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutBulkEditResultGradesV2 putBulkEditResultGradesV2_33 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutBulkEditResultGradesV2();
        java.lang.Double double34 = putBulkEditResultGradesV2_33.DepthValue;
        java.util.List<java.lang.String> strList35 = putBulkEditResultGradesV2_33.Media;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary36 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        dischargeSummary36.Reviewer = "";
        java.time.Instant instant39 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        dischargeSummary36.MeasurementTime = instant39;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutBulkEditResultGradesV2 putBulkEditResultGradesV2_41 = putBulkEditResultGradesV2_33.setStartModificationTime(instant39);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutBulkEditResultGradesV2 putBulkEditResultGradesV2_42 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutBulkEditResultGradesV2();
        java.lang.Double double43 = putBulkEditResultGradesV2_42.DepthValue;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_44 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray46 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList47 = new java.util.ArrayList<java.lang.String>();
        boolean boolean48 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList47, strArray46);
        getObservationsV2_44.SpecimenIds = strList47;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags50 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray54 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList55 = new java.util.ArrayList<java.lang.String>();
        boolean boolean56 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList55, strArray54);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags57 = putLocationTags50.setTagUniqueIds(strList55);
        getObservationsV2_44.QualityControlTypes = strList55;
        java.util.List<java.lang.String> strList59 = getObservationsV2_44.getAnalyticalGroupIds();
        java.util.List<java.lang.String> strList60 = getObservationsV2_44.DataClassifications;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.FieldResultType fieldResultType61 = getObservationsV2_44.FieldResultType;
        java.time.Instant instant62 = getObservationsV2_44.getEndObservedTime();
        java.lang.String str63 = getObservationsV2_44.DepthUnitCustomId;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags64 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray68 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList69 = new java.util.ArrayList<java.lang.String>();
        boolean boolean70 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList69, strArray68);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags71 = putLocationTags64.setTagUniqueIds(strList69);
        java.util.ArrayList<java.lang.String> strList72 = putLocationTags71.TagUniqueIds;
        getObservationsV2_44.ProjectIds = strList72;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutBulkEditResultGradesV2 putBulkEditResultGradesV2_74 = putBulkEditResultGradesV2_42.setSearch((java.util.List<java.lang.String>) strList72);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Setting setting75 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Setting();
        java.lang.String str76 = setting75.getKey();
        java.lang.String str77 = setting75.getDescription();
        java.lang.String str78 = setting75.Value;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary79 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary81 = dischargeSummary79.setMeanGageHeightMethod("hi!");
        java.lang.String str82 = dischargeSummary81.MeasurementId;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary84 = dischargeSummary81.setDischargeMethod("yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSSSSSZZZZZ");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest85 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest();
        java.lang.Object obj86 = timeAlignedDataServiceRequest85.getResponseType();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Sensor sensor87 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Sensor();
        java.time.Instant instant88 = sensor87.getLastModifiedUtc();
        java.time.Instant instant89 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Sensor sensor90 = sensor87.setLastModifiedUtc(instant89);
        java.time.Instant instant91 = sensor87.LastModifiedUtc;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest92 = timeAlignedDataServiceRequest85.setQueryTo(instant91);
        dischargeSummary84.MeasurementStartTime = instant91;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Setting setting94 = setting75.setLastModifiedTime(instant91);
        putBulkEditResultGradesV2_42.StartModificationTime = instant91;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutBulkEditResultGradesV2 putBulkEditResultGradesV2_96 = putBulkEditResultGradesV2_41.setEndResultTime(instant91);
        fieldVisit30.StartTime = instant91;
        timeSeriesUniqueIdListServiceResponse13.NextToken = instant91;
        org.junit.Assert.assertNotNull(instant7);
        org.junit.Assert.assertNotNull(instant10);
        org.junit.Assert.assertNotNull(statisticalDateTimeOffset11);
        org.junit.Assert.assertNotNull(ratingModelEffectiveShiftsByStageValuesServiceRequest12);
        org.junit.Assert.assertNotNull(timeSeriesUniqueIdListServiceResponse13);
        org.junit.Assert.assertNull(boolean14);
        org.junit.Assert.assertNotNull(datumConversionResult20);
        org.junit.Assert.assertNull(gageHeightAtZeroFlowActivity22);
        org.junit.Assert.assertNotNull(gageHeightAtZeroFlowActivity25);
        org.junit.Assert.assertNotNull(fieldVisit26);
        org.junit.Assert.assertNotNull(gageHeightAtZeroFlowActivity29);
        org.junit.Assert.assertNotNull(fieldVisit30);
        org.junit.Assert.assertNull(instant31);
        org.junit.Assert.assertNull(boolean32);
        org.junit.Assert.assertNull(double34);
        org.junit.Assert.assertNull(strList35);
        org.junit.Assert.assertNotNull(instant39);
        org.junit.Assert.assertNotNull(putBulkEditResultGradesV2_41);
        org.junit.Assert.assertNull(double43);
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(strArray54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(putLocationTags57);
        org.junit.Assert.assertNull(strList59);
        org.junit.Assert.assertNull(strList60);
        org.junit.Assert.assertNull(fieldResultType61);
        org.junit.Assert.assertNull(instant62);
        org.junit.Assert.assertNull(str63);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertNotNull(putLocationTags71);
        org.junit.Assert.assertNotNull(strList72);
        org.junit.Assert.assertNotNull(putBulkEditResultGradesV2_74);
        org.junit.Assert.assertNull(str76);
        org.junit.Assert.assertNull(str77);
        org.junit.Assert.assertNull(str78);
        org.junit.Assert.assertNotNull(dischargeSummary81);
        org.junit.Assert.assertNull(str82);
        org.junit.Assert.assertNotNull(dischargeSummary84);
        org.junit.Assert.assertNotNull(obj86);
        org.junit.Assert.assertEquals(obj86.toString(), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj86), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj86), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertNull(instant88);
        org.junit.Assert.assertNotNull(instant89);
        org.junit.Assert.assertNotNull(sensor90);
        org.junit.Assert.assertNotNull(instant91);
        org.junit.Assert.assertNotNull(timeAlignedDataServiceRequest92);
        org.junit.Assert.assertNotNull(setting94);
        org.junit.Assert.assertNotNull(putBulkEditResultGradesV2_96);
    }

    @Test
    public void test53010() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest106.test53010");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.CodeTable codeTable0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.CodeTable();
        java.lang.Boolean boolean1 = codeTable0.getIsSystem();
        org.junit.Assert.assertNull(boolean1);
    }

    @Test
    public void test53011() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest106.test53011");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray3 = new java.lang.String[] { "", "" };
        java.util.ArrayList<java.lang.String> strList4 = new java.util.ArrayList<java.lang.String>();
        boolean boolean5 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList4, strArray3);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_6 = getObservationsV2_0.setDataClassifications((java.util.List<java.lang.String>) strList4);
        java.util.List<java.lang.String> strList7 = getObservationsV2_0.ResultGrades;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary8 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        dischargeSummary8.Reviewer = "";
        java.time.Instant instant11 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        dischargeSummary8.MeasurementTime = instant11;
        getObservationsV2_0.StartResultTime = instant11;
        java.lang.String[] strArray23 = new java.lang.String[] { "https", "/AQUARIUS/Provisioning/v1", "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ", "2021.4.62.0", "hi!", "2021.4.62.0", "2021.4.62.0", "/AQUARIUS/Acquisition/v2", "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ" };
        java.util.ArrayList<java.lang.String> strList24 = new java.util.ArrayList<java.lang.String>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList24, strArray23);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_26 = getObservationsV2_0.setAnalyticalGroupIds((java.util.List<java.lang.String>) strList24);
        java.util.List<java.lang.String> strList27 = getObservationsV2_26.ProjectIds;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetChartDataV2 getChartDataV2_28 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetChartDataV2();
        java.lang.String str29 = getChartDataV2_28.getActivityCustomId();
        java.util.List<java.lang.String> strList30 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetChartDataV2 getChartDataV2_31 = getChartDataV2_28.setSearch(strList30);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_32 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray35 = new java.lang.String[] { "", "" };
        java.util.ArrayList<java.lang.String> strList36 = new java.util.ArrayList<java.lang.String>();
        boolean boolean37 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList36, strArray35);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_38 = getObservationsV2_32.setDataClassifications((java.util.List<java.lang.String>) strList36);
        java.util.List<java.lang.String> strList39 = getObservationsV2_32.ResultGrades;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary40 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        dischargeSummary40.Reviewer = "";
        java.time.Instant instant43 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        dischargeSummary40.MeasurementTime = instant43;
        getObservationsV2_32.StartResultTime = instant43;
        java.lang.String[] strArray55 = new java.lang.String[] { "https", "/AQUARIUS/Provisioning/v1", "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ", "2021.4.62.0", "hi!", "2021.4.62.0", "2021.4.62.0", "/AQUARIUS/Acquisition/v2", "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ" };
        java.util.ArrayList<java.lang.String> strList56 = new java.util.ArrayList<java.lang.String>();
        boolean boolean57 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList56, strArray55);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_58 = getObservationsV2_32.setAnalyticalGroupIds((java.util.List<java.lang.String>) strList56);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescription locationDescription59 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescription();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescription locationDescription61 = locationDescription59.setIdentifier("");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ControlConditionActivity controlConditionActivity62 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ControlConditionActivity();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ControlCleanedType controlCleanedType63 = null;
        controlConditionActivity62.ControlCleaned = controlCleanedType63;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse65 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant66 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse67 = locationDescriptionListServiceResponse65.setNextToken(instant66);
        controlConditionActivity62.DateCleaned = instant66;
        locationDescription61.LastModified = instant66;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_70 = getObservationsV2_58.setStartResultTime(instant66);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetChartDataV2 getChartDataV2_71 = getChartDataV2_28.setEndObservedTime(instant66);
        java.util.List<java.lang.String> strList72 = getChartDataV2_71.getCollectionMethodIds();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.FieldResultType fieldResultType73 = getChartDataV2_71.FieldResultType;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.FieldResultType fieldResultType74 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.FieldResultType.ANALYSIS;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetChartDataV2 getChartDataV2_75 = getChartDataV2_71.setFieldResultType(fieldResultType74);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_76 = getObservationsV2_26.setFieldResultType(fieldResultType74);
        getObservationsV2_76.FilterId = "multipart/form-data; boundary=****930a219d-85cf-428e-8cad-9442e08cea99****";
        java.util.List<java.lang.String> strList79 = getObservationsV2_76.getSamplingLocationGroupIds();
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(getObservationsV2_6);
        org.junit.Assert.assertNull(strList7);
        org.junit.Assert.assertNotNull(instant11);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(getObservationsV2_26);
        org.junit.Assert.assertNull(strList27);
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertNotNull(getChartDataV2_31);
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(getObservationsV2_38);
        org.junit.Assert.assertNull(strList39);
        org.junit.Assert.assertNotNull(instant43);
        org.junit.Assert.assertNotNull(strArray55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertNotNull(getObservationsV2_58);
        org.junit.Assert.assertNotNull(locationDescription61);
        org.junit.Assert.assertNotNull(instant66);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse67);
        org.junit.Assert.assertNotNull(getObservationsV2_70);
        org.junit.Assert.assertNotNull(getChartDataV2_71);
        org.junit.Assert.assertNull(strList72);
        org.junit.Assert.assertNull(fieldResultType73);
        org.junit.Assert.assertTrue("'" + fieldResultType74 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.FieldResultType.ANALYSIS + "'", fieldResultType74.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.FieldResultType.ANALYSIS));
        org.junit.Assert.assertNotNull(getChartDataV2_75);
        org.junit.Assert.assertNotNull(getObservationsV2_76);
        org.junit.Assert.assertNull(strList79);
    }

    @Test
    public void test53012() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest106.test53012");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ChartData chartData0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ChartData();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty observedProperty1 = chartData0.getObservedProperty();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UnitGroupWithUnits unitGroupWithUnits2 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ChartData chartData3 = chartData0.setDepthUnitGroupWithUnits(unitGroupWithUnits2);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UnitGroupWithUnits unitGroupWithUnits4 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UnitGroupWithUnits();
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Unit> unitList5 = unitGroupWithUnits4.Units;
        chartData0.DepthUnitGroupWithUnits = unitGroupWithUnits4;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UnitGroupWithUnits unitGroupWithUnits7 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UnitGroupWithUnits();
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Unit> unitList8 = unitGroupWithUnits7.Units;
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Unit> unitList9 = unitGroupWithUnits7.getUnits();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UnitGroupWithUnits unitGroupWithUnits11 = unitGroupWithUnits7.setCustomId("/AQUARIUS/Acquisition/v2://9999-12-31T23:59:59.999Z");
        java.lang.String str12 = unitGroupWithUnits7.getId();
        chartData0.UnitGroupWithUnits = unitGroupWithUnits7;
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ChartDataPoint> chartDataPointList14 = chartData0.getDataPoints();
        org.junit.Assert.assertNull(observedProperty1);
        org.junit.Assert.assertNotNull(chartData3);
        org.junit.Assert.assertNull(unitList5);
        org.junit.Assert.assertNull(unitList8);
        org.junit.Assert.assertNull(unitList9);
        org.junit.Assert.assertNotNull(unitGroupWithUnits11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNull(chartDataPointList14);
    }

    @Test
    public void test53013() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest106.test53013");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MultiChartData multiChartData0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MultiChartData();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ChartData chartData1 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ChartData();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty observedProperty2 = chartData1.getObservedProperty();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UnitGroupWithUnits unitGroupWithUnits3 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ChartData chartData4 = chartData1.setDepthUnitGroupWithUnits(unitGroupWithUnits3);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ChartData chartData5 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ChartData();
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ChartDataPoint> chartDataPointList6 = chartData5.getDataPoints();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ChartData chartData7 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ChartData();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocation samplingLocation8 = chartData7.SamplingLocation;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UnitGroupWithUnits unitGroupWithUnits9 = null;
        chartData7.UnitGroupWithUnits = unitGroupWithUnits9;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UnitGroupWithUnits unitGroupWithUnits11 = chartData7.DepthUnitGroupWithUnits;
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ChartDataPoint> chartDataPointList12 = chartData7.getDataPoints();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ChartData chartData13 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ChartData();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty observedProperty14 = chartData13.getObservedProperty();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UnitGroupWithUnits unitGroupWithUnits15 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ChartData chartData16 = chartData13.setDepthUnitGroupWithUnits(unitGroupWithUnits15);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ChartData chartData17 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ChartData();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocation samplingLocation18 = chartData17.SamplingLocation;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ChartData chartData19 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ChartData();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty observedProperty20 = chartData19.getObservedProperty();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ChartDataPoint[] chartDataPointArray21 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ChartDataPoint[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ChartDataPoint> chartDataPointList22 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ChartDataPoint>();
        boolean boolean23 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ChartDataPoint>) chartDataPointList22, chartDataPointArray21);
        chartData19.DataPoints = chartDataPointList22;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ChartData chartData25 = chartData17.setDataPoints((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ChartDataPoint>) chartDataPointList22);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty observedProperty26 = chartData17.getObservedProperty();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocation samplingLocation27 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ChartData chartData28 = chartData17.setSamplingLocation(samplingLocation27);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UnitGroupWithUnits unitGroupWithUnits29 = null;
        chartData17.UnitGroupWithUnits = unitGroupWithUnits29;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ChartData[] chartDataArray31 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ChartData[] { chartData1, chartData5, chartData7, chartData16, chartData17 };
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ChartData> chartDataList32 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ChartData>();
        boolean boolean33 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ChartData>) chartDataList32, chartDataArray31);
        multiChartData0.Charts = chartDataList32;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MultiChartData multiChartData35 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MultiChartData();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ChartData chartData36 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ChartData();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty observedProperty37 = chartData36.getObservedProperty();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UnitGroupWithUnits unitGroupWithUnits38 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ChartData chartData39 = chartData36.setDepthUnitGroupWithUnits(unitGroupWithUnits38);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ChartData chartData40 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ChartData();
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ChartDataPoint> chartDataPointList41 = chartData40.getDataPoints();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ChartData chartData42 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ChartData();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocation samplingLocation43 = chartData42.SamplingLocation;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UnitGroupWithUnits unitGroupWithUnits44 = null;
        chartData42.UnitGroupWithUnits = unitGroupWithUnits44;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UnitGroupWithUnits unitGroupWithUnits46 = chartData42.DepthUnitGroupWithUnits;
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ChartDataPoint> chartDataPointList47 = chartData42.getDataPoints();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ChartData chartData48 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ChartData();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty observedProperty49 = chartData48.getObservedProperty();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UnitGroupWithUnits unitGroupWithUnits50 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ChartData chartData51 = chartData48.setDepthUnitGroupWithUnits(unitGroupWithUnits50);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ChartData chartData52 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ChartData();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocation samplingLocation53 = chartData52.SamplingLocation;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ChartData chartData54 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ChartData();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty observedProperty55 = chartData54.getObservedProperty();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ChartDataPoint[] chartDataPointArray56 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ChartDataPoint[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ChartDataPoint> chartDataPointList57 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ChartDataPoint>();
        boolean boolean58 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ChartDataPoint>) chartDataPointList57, chartDataPointArray56);
        chartData54.DataPoints = chartDataPointList57;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ChartData chartData60 = chartData52.setDataPoints((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ChartDataPoint>) chartDataPointList57);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty observedProperty61 = chartData52.getObservedProperty();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocation samplingLocation62 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ChartData chartData63 = chartData52.setSamplingLocation(samplingLocation62);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UnitGroupWithUnits unitGroupWithUnits64 = null;
        chartData52.UnitGroupWithUnits = unitGroupWithUnits64;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ChartData[] chartDataArray66 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ChartData[] { chartData36, chartData40, chartData42, chartData51, chartData52 };
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ChartData> chartDataList67 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ChartData>();
        boolean boolean68 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ChartData>) chartDataList67, chartDataArray66);
        multiChartData35.Charts = chartDataList67;
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ChartData> chartDataList70 = multiChartData35.Charts;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MultiChartData multiChartData71 = multiChartData0.setCharts(chartDataList70);
        org.junit.Assert.assertNull(observedProperty2);
        org.junit.Assert.assertNotNull(chartData4);
        org.junit.Assert.assertNull(chartDataPointList6);
        org.junit.Assert.assertNull(samplingLocation8);
        org.junit.Assert.assertNull(unitGroupWithUnits11);
        org.junit.Assert.assertNull(chartDataPointList12);
        org.junit.Assert.assertNull(observedProperty14);
        org.junit.Assert.assertNotNull(chartData16);
        org.junit.Assert.assertNull(samplingLocation18);
        org.junit.Assert.assertNull(observedProperty20);
        org.junit.Assert.assertNotNull(chartDataPointArray21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(chartData25);
        org.junit.Assert.assertNull(observedProperty26);
        org.junit.Assert.assertNotNull(chartData28);
        org.junit.Assert.assertNotNull(chartDataArray31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNull(observedProperty37);
        org.junit.Assert.assertNotNull(chartData39);
        org.junit.Assert.assertNull(chartDataPointList41);
        org.junit.Assert.assertNull(samplingLocation43);
        org.junit.Assert.assertNull(unitGroupWithUnits46);
        org.junit.Assert.assertNull(chartDataPointList47);
        org.junit.Assert.assertNull(observedProperty49);
        org.junit.Assert.assertNotNull(chartData51);
        org.junit.Assert.assertNull(samplingLocation53);
        org.junit.Assert.assertNull(observedProperty55);
        org.junit.Assert.assertNotNull(chartDataPointArray56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(chartData60);
        org.junit.Assert.assertNull(observedProperty61);
        org.junit.Assert.assertNotNull(chartData63);
        org.junit.Assert.assertNotNull(chartDataArray66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertNotNull(chartDataList70);
        org.junit.Assert.assertNotNull(multiChartData71);
    }

    @Test
    public void test53014() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest106.test53014");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationMonitoringMethod locationMonitoringMethod0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationMonitoringMethod();
        java.lang.String str1 = locationMonitoringMethod0.getModel();
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TagMetadata> tagMetadataList2 = null;
        locationMonitoringMethod0.Tags = tagMetadataList2;
        java.lang.String str4 = locationMonitoringMethod0.getParameterId();
        java.lang.String str5 = locationMonitoringMethod0.Parameter;
        locationMonitoringMethod0.Comment = "";
        locationMonitoringMethod0.LocationIdentifier = "9999-12-31T23:59:59.999Z";
        java.lang.String str10 = locationMonitoringMethod0.getParameterId();
        java.lang.String str11 = locationMonitoringMethod0.SerialNumber;
        java.lang.String str12 = locationMonitoringMethod0.getModel();
        java.lang.String str13 = locationMonitoringMethod0.MethodCode;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CrossSectionSurveyActivity crossSectionSurveyActivity14 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CrossSectionSurveyActivity();
        java.lang.String str15 = crossSectionSurveyActivity14.Channel;
        java.lang.String str16 = crossSectionSurveyActivity14.Channel;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportSamplingLocations getExportSamplingLocations17 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportSamplingLocations();
        java.util.List<java.lang.String> strList18 = getExportSamplingLocations17.getLocationGroupTypeIds();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse19 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant20 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse21 = locationDescriptionListServiceResponse19.setNextToken(instant20);
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescription> locationDescriptionList22 = locationDescriptionListServiceResponse21.LocationDescriptions;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingCurveListServiceRequest ratingCurveListServiceRequest23 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingCurveListServiceRequest();
        java.time.Instant instant24 = ratingCurveListServiceRequest23.QueryTo;
        java.lang.String str25 = ratingCurveListServiceRequest23.getRatingModelIdentifier();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse26 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary27 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary29 = dischargeSummary27.setPublish((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse30 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant31 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse32 = locationDescriptionListServiceResponse30.setNextToken(instant31);
        dischargeSummary27.MeasurementTime = instant31;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse34 = locationDescriptionListServiceResponse26.setNextToken(instant31);
        java.time.Instant instant35 = locationDescriptionListServiceResponse26.getNextToken();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest36 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ControlConditionActivity controlConditionActivity37 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ControlConditionActivity();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ControlCleanedType controlCleanedType38 = null;
        controlConditionActivity37.ControlCleaned = controlCleanedType38;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse40 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant41 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse42 = locationDescriptionListServiceResponse40.setNextToken(instant41);
        controlConditionActivity37.DateCleaned = instant41;
        timeAlignedDataServiceRequest36.QueryFrom = instant41;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse45 = locationDescriptionListServiceResponse26.setNextToken(instant41);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingCurveListServiceRequest ratingCurveListServiceRequest46 = ratingCurveListServiceRequest23.setQueryTo(instant41);
        java.time.Instant instant47 = ratingCurveListServiceRequest46.getQueryTo();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse48 = locationDescriptionListServiceResponse21.setNextToken(instant47);
        getExportSamplingLocations17.StartModificationTime = instant47;
        java.time.Instant instant50 = getExportSamplingLocations17.getStartModificationTime();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CrossSectionSurveyActivity crossSectionSurveyActivity51 = crossSectionSurveyActivity14.setEndTime(instant50);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationMonitoringMethod locationMonitoringMethod52 = locationMonitoringMethod0.setLastModifiedUtc(instant50);
        java.lang.String str53 = locationMonitoringMethod0.ParameterId;
        locationMonitoringMethod0.Model = "multipart/form-data; boundary=****5d34e306-630a-492f-8c84-1002d981f2f0****";
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNull(strList18);
        org.junit.Assert.assertNotNull(instant20);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse21);
        org.junit.Assert.assertNull(locationDescriptionList22);
        org.junit.Assert.assertNull(instant24);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertNotNull(dischargeSummary29);
        org.junit.Assert.assertNotNull(instant31);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse32);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse34);
        org.junit.Assert.assertNotNull(instant35);
        org.junit.Assert.assertNotNull(instant41);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse42);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse45);
        org.junit.Assert.assertNotNull(ratingCurveListServiceRequest46);
        org.junit.Assert.assertNotNull(instant47);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse48);
        org.junit.Assert.assertNotNull(instant50);
        org.junit.Assert.assertNotNull(crossSectionSurveyActivity51);
        org.junit.Assert.assertNotNull(locationMonitoringMethod52);
        org.junit.Assert.assertNull(str53);
    }

    @Test
    public void test53015() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest106.test53015");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservationV2 postObservationV2_0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservationV2();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabInstruction labInstruction1 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservationV2 postObservationV2_2 = postObservationV2_0.setLabInstruction(labInstruction1);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Taxon taxon3 = null;
        postObservationV2_2.RelatedTaxon = taxon3;
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.RuleValidationDetails> ruleValidationDetailsList5 = postObservationV2_2.getValidationWarnings();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.QualityControlType qualityControlType6 = postObservationV2_2.getQualityControlType();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationStatistics observationStatistics7 = postObservationV2_2.getStatistics();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Device device8 = postObservationV2_2.Device;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.CollectionMethod collectionMethod9 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.CollectionMethod();
        java.lang.String str10 = collectionMethod9.getCustomId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservationV2 postObservationV2_11 = postObservationV2_2.setCollectionMethod(collectionMethod9);
        java.lang.String str12 = postObservationV2_11.getCustomId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.CollectionMethod collectionMethod13 = postObservationV2_11.CollectionMethod;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails14 = postObservationV2_11.getLabResultDetails();
        org.junit.Assert.assertNotNull(postObservationV2_2);
        org.junit.Assert.assertNull(ruleValidationDetailsList5);
        org.junit.Assert.assertNull(qualityControlType6);
        org.junit.Assert.assertNull(observationStatistics7);
        org.junit.Assert.assertNull(device8);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNotNull(postObservationV2_11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(collectionMethod13);
        org.junit.Assert.assertNull(labResultDetails14);
    }

    @Test
    public void test53016() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest106.test53016");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.GradeMetadata gradeMetadata0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.GradeMetadata();
        java.lang.String str1 = gradeMetadata0.Identifier;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.GradeMetadata gradeMetadata3 = gradeMetadata0.setDescription("multipart/form-data; boundary=****bbcf5f9e-6ccf-4b63-91ab-6e645caf02af****");
        java.lang.String str4 = gradeMetadata0.Description;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.GradeMetadata gradeMetadata6 = gradeMetadata0.setDisplayName("http");
        gradeMetadata0.Description = "multipart/form-data; boundary=****022375a8-70cd-4ba3-9c8e-31a17ba81297****";
        java.lang.String str9 = gradeMetadata0.Description;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(gradeMetadata3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "multipart/form-data; boundary=****bbcf5f9e-6ccf-4b63-91ab-6e645caf02af****" + "'", str4, "multipart/form-data; boundary=****bbcf5f9e-6ccf-4b63-91ab-6e645caf02af****");
        org.junit.Assert.assertNotNull(gradeMetadata6);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "multipart/form-data; boundary=****022375a8-70cd-4ba3-9c8e-31a17ba81297****" + "'", str9, "multipart/form-data; boundary=****022375a8-70cd-4ba3-9c8e-31a17ba81297****");
    }

    @Test
    public void test53017() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest106.test53017");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationType putLocationType0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationType();
        java.lang.String str1 = putLocationType0.Description;
        java.lang.String str2 = putLocationType0.TypeName;
        java.util.ArrayList<java.lang.String> strList3 = putLocationType0.ExtendedAttributeDefinitionIds;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(strList3);
    }

    @Test
    public void test53018() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest106.test53018");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Correction correction0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Correction();
        correction0.Comment = "multipart/form-data; boundary=****bbcf5f9e-6ccf-4b63-91ab-6e645caf02af****";
        java.time.Instant instant3 = correction0.AppliedTimeUtc;
        java.lang.String str4 = correction0.Comment;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CorrectionType correctionType5 = correction0.getType();
        org.junit.Assert.assertNull(instant3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "multipart/form-data; boundary=****bbcf5f9e-6ccf-4b63-91ab-6e645caf02af****" + "'", str4, "multipart/form-data; boundary=****bbcf5f9e-6ccf-4b63-91ab-6e645caf02af****");
        org.junit.Assert.assertNull(correctionType5);
    }

    @Test
    public void test53019() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest106.test53019");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostStatisticalDerivedTimeSeries postStatisticalDerivedTimeSeries0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostStatisticalDerivedTimeSeries();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostStatisticalDerivedTimeSeries postStatisticalDerivedTimeSeries2 = postStatisticalDerivedTimeSeries0.setComment("'.'SSSSSSS");
        java.lang.String str3 = postStatisticalDerivedTimeSeries0.getParameter();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostStatisticalDerivedTimeSeries postStatisticalDerivedTimeSeries5 = postStatisticalDerivedTimeSeries0.setTimeSeriesUniqueId("");
        postStatisticalDerivedTimeSeries0.LocationUniqueId = "MaxInstant";
        java.lang.String str8 = postStatisticalDerivedTimeSeries0.Method;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostStatisticalDerivedTimeSeries postStatisticalDerivedTimeSeries10 = postStatisticalDerivedTimeSeries0.setComputationIdentifier("MaxDuration");
        java.lang.Boolean boolean11 = postStatisticalDerivedTimeSeries10.isPublish();
        org.junit.Assert.assertNotNull(postStatisticalDerivedTimeSeries2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(postStatisticalDerivedTimeSeries5);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(postStatisticalDerivedTimeSeries10);
        org.junit.Assert.assertNull(boolean11);
    }

    @Test
    public void test53020() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest106.test53020");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.InputPart inputPart0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.InputPart();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.InterpolationType interpolationType1 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.InterpolationType.PrecedingConstant;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.InputPart inputPart2 = inputPart0.setHeaders((java.lang.Object) interpolationType1);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MediaType mediaType3 = inputPart0.getMediaType();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MediaType mediaType4 = inputPart0.getMediaType();
        java.lang.String str5 = inputPart0.getBodyAsString();
        org.junit.Assert.assertTrue("'" + interpolationType1 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.InterpolationType.PrecedingConstant + "'", interpolationType1.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.InterpolationType.PrecedingConstant));
        org.junit.Assert.assertNotNull(inputPart2);
        org.junit.Assert.assertNull(mediaType3);
        org.junit.Assert.assertNull(mediaType4);
        org.junit.Assert.assertNull(str5);
    }

    @Test
    public void test53021() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest106.test53021");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SearchResultStandardSimple searchResultStandardSimple0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SearchResultStandardSimple();
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple> standardSimpleList1 = searchResultStandardSimple0.getDomainObjects();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SearchResultStandardSimple searchResultStandardSimple3 = searchResultStandardSimple0.setTotalCount((java.lang.Integer) 1);
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple> standardSimpleList4 = searchResultStandardSimple0.getDomainObjects();
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple> standardSimpleList5 = searchResultStandardSimple0.DomainObjects;
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple> standardSimpleList6 = searchResultStandardSimple0.getDomainObjects();
        org.junit.Assert.assertNull(standardSimpleList1);
        org.junit.Assert.assertNotNull(searchResultStandardSimple3);
        org.junit.Assert.assertNull(standardSimpleList4);
        org.junit.Assert.assertNull(standardSimpleList5);
        org.junit.Assert.assertNull(standardSimpleList6);
    }

    @Test
    public void test53022() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest106.test53022");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Correction correction0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Correction();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.InputPart inputPart1 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.InputPart();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.InterpolationType interpolationType2 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.InterpolationType.PrecedingConstant;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.InputPart inputPart3 = inputPart1.setHeaders((java.lang.Object) interpolationType2);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MediaType mediaType4 = inputPart1.getMediaType();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MediaType mediaType5 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MediaType();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.InputPart inputPart6 = inputPart1.setMediaType(mediaType5);
        java.lang.String str7 = mediaType5.getSubtype();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetSamplingLocations getSamplingLocations8 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetSamplingLocations();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ReportListServiceRequest reportListServiceRequest9 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ReportListServiceRequest();
        reportListServiceRequest9.ReportTitle = "MinDuration";
        reportListServiceRequest9.LocationUniqueId = "/AQUARIUS";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportSpecimens getExportSpecimens14 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportSpecimens();
        java.util.List<java.lang.String> strList15 = getExportSpecimens14.getActivityTypes();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Qualifier qualifier16 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Qualifier();
        java.time.Instant instant17 = qualifier16.DateApplied;
        java.lang.String str18 = qualifier16.User;
        java.lang.String str19 = qualifier16.getIdentifier();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest20 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest();
        java.lang.Object obj21 = timeAlignedDataServiceRequest20.getResponseType();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse22 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant23 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse24 = locationDescriptionListServiceResponse22.setNextToken(instant23);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest25 = timeAlignedDataServiceRequest20.setQueryFrom(instant23);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Qualifier qualifier26 = qualifier16.setDateApplied(instant23);
        getExportSpecimens14.Before = instant23;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationRemark locationRemark28 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationRemark();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationRemark locationRemark30 = locationRemark28.setDescription("MaxInstant");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitDataServiceResponse fieldVisitDataServiceResponse31 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitDataServiceResponse();
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CrossSectionSurveyActivity> crossSectionSurveyActivityList32 = fieldVisitDataServiceResponse31.CrossSectionSurveyActivity;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitDataServiceResponse fieldVisitDataServiceResponse34 = fieldVisitDataServiceResponse31.setIdentifier("");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary35 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        dischargeSummary35.Reviewer = "";
        java.time.Instant instant38 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        dischargeSummary35.MeasurementTime = instant38;
        fieldVisitDataServiceResponse31.ResponseTime = instant38;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationRemark locationRemark41 = locationRemark28.setCreateTime(instant38);
        getExportSpecimens14.EndModificationTime = instant38;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ReportListServiceRequest reportListServiceRequest43 = reportListServiceRequest9.setCreatedFrom(instant38);
        getSamplingLocations8.StartModificationTime = instant38;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MediaType mediaType45 = mediaType5.setParameters((java.lang.Object) instant38);
        correction0.EndTime = instant38;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CorrectionOperation correctionOperation47 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CorrectionOperation();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CorrectionType correctionType48 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CorrectionType.AdjustableTrim;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CorrectionOperation correctionOperation49 = correctionOperation47.setType(correctionType48);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeOperationType metadataChangeOperationType50 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeOperationType.Creation;
        correctionOperation47.OperationType = metadataChangeOperationType50;
        java.time.Instant instant52 = null;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CorrectionOperation correctionOperation53 = correctionOperation47.setDateAppliedUtc(instant52);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MethodOperation methodOperation54 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MethodOperation();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeOperationType metadataChangeOperationType55 = methodOperation54.getOperationType();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeOperationType metadataChangeOperationType56 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeOperationType.Creation;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MethodOperation methodOperation57 = methodOperation54.setOperationType(metadataChangeOperationType56);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CorrectionOperation correctionOperation58 = correctionOperation53.setOperationType(metadataChangeOperationType56);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CorrectionOperation correctionOperation59 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CorrectionOperation();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CorrectionType correctionType60 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CorrectionType.AdjustableTrim;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CorrectionOperation correctionOperation61 = correctionOperation59.setType(correctionType60);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeOperationType metadataChangeOperationType62 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeOperationType.Creation;
        correctionOperation59.OperationType = metadataChangeOperationType62;
        java.time.Instant instant64 = null;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CorrectionOperation correctionOperation65 = correctionOperation59.setDateAppliedUtc(instant64);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MethodOperation methodOperation66 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MethodOperation();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeOperationType metadataChangeOperationType67 = methodOperation66.getOperationType();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeOperationType metadataChangeOperationType68 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeOperationType.Creation;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MethodOperation methodOperation69 = methodOperation66.setOperationType(metadataChangeOperationType68);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CorrectionOperation correctionOperation70 = correctionOperation65.setOperationType(metadataChangeOperationType68);
        correctionOperation53.OperationType = metadataChangeOperationType68;
        java.lang.String str72 = correctionOperation53.getComments();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CorrectionType correctionType73 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CorrectionType.UsgsMultiPoint;
        correctionOperation53.Type = correctionType73;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Correction correction75 = correction0.setType(correctionType73);
        correction75.User = "https";
        java.util.HashMap<java.lang.String, java.lang.Object> strMap78 = null;
        correction75.Parameters = strMap78;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Correction correction81 = correction75.setUser("multipart/form-data; boundary=****2917d69a-62fa-41ce-b981-4dbe2deab9f5****");
        java.time.Instant instant82 = correction75.EndTime;
        org.junit.Assert.assertTrue("'" + interpolationType2 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.InterpolationType.PrecedingConstant + "'", interpolationType2.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.InterpolationType.PrecedingConstant));
        org.junit.Assert.assertNotNull(inputPart3);
        org.junit.Assert.assertNull(mediaType4);
        org.junit.Assert.assertNotNull(inputPart6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(strList15);
        org.junit.Assert.assertNull(instant17);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertNotNull(obj21);
        org.junit.Assert.assertEquals(obj21.toString(), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj21), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj21), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertNotNull(instant23);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse24);
        org.junit.Assert.assertNotNull(timeAlignedDataServiceRequest25);
        org.junit.Assert.assertNotNull(qualifier26);
        org.junit.Assert.assertNotNull(locationRemark30);
        org.junit.Assert.assertNull(crossSectionSurveyActivityList32);
        org.junit.Assert.assertNotNull(fieldVisitDataServiceResponse34);
        org.junit.Assert.assertNotNull(instant38);
        org.junit.Assert.assertNotNull(locationRemark41);
        org.junit.Assert.assertNotNull(reportListServiceRequest43);
        org.junit.Assert.assertNotNull(mediaType45);
        org.junit.Assert.assertTrue("'" + correctionType48 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CorrectionType.AdjustableTrim + "'", correctionType48.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CorrectionType.AdjustableTrim));
        org.junit.Assert.assertNotNull(correctionOperation49);
        org.junit.Assert.assertTrue("'" + metadataChangeOperationType50 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeOperationType.Creation + "'", metadataChangeOperationType50.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeOperationType.Creation));
        org.junit.Assert.assertNotNull(correctionOperation53);
        org.junit.Assert.assertNull(metadataChangeOperationType55);
        org.junit.Assert.assertTrue("'" + metadataChangeOperationType56 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeOperationType.Creation + "'", metadataChangeOperationType56.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeOperationType.Creation));
        org.junit.Assert.assertNotNull(methodOperation57);
        org.junit.Assert.assertNotNull(correctionOperation58);
        org.junit.Assert.assertTrue("'" + correctionType60 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CorrectionType.AdjustableTrim + "'", correctionType60.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CorrectionType.AdjustableTrim));
        org.junit.Assert.assertNotNull(correctionOperation61);
        org.junit.Assert.assertTrue("'" + metadataChangeOperationType62 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeOperationType.Creation + "'", metadataChangeOperationType62.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeOperationType.Creation));
        org.junit.Assert.assertNotNull(correctionOperation65);
        org.junit.Assert.assertNull(metadataChangeOperationType67);
        org.junit.Assert.assertTrue("'" + metadataChangeOperationType68 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeOperationType.Creation + "'", metadataChangeOperationType68.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeOperationType.Creation));
        org.junit.Assert.assertNotNull(methodOperation69);
        org.junit.Assert.assertNotNull(correctionOperation70);
        org.junit.Assert.assertNull(str72);
        org.junit.Assert.assertTrue("'" + correctionType73 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CorrectionType.UsgsMultiPoint + "'", correctionType73.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CorrectionType.UsgsMultiPoint));
        org.junit.Assert.assertNotNull(correction75);
        org.junit.Assert.assertNotNull(correction81);
        org.junit.Assert.assertNotNull(instant82);
    }

    @Test
    public void test53023() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest106.test53023");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UnitGroupWithUnits unitGroupWithUnits0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UnitGroupWithUnits();
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Unit> unitList1 = unitGroupWithUnits0.Units;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes2 = unitGroupWithUnits0.AuditAttributes;
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Unit> unitList3 = unitGroupWithUnits0.Units;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutFieldVisit putFieldVisit4 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutFieldVisit();
        putFieldVisit4.Notes = "MinDuration";
        java.time.OffsetDateTime offsetDateTime7 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutFieldVisit putFieldVisit8 = putFieldVisit4.setStartTime(offsetDateTime7);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Laboratory laboratory9 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Laboratory();
        laboratory9.Id = "MaxInstant";
        java.lang.String str12 = laboratory9.PhoneNumber;
        laboratory9.Id = "/AQUARIUS/Acquisition/v2://9999-12-31T23:59:59.999Z";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSchedule putSchedule15 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSchedule();
        java.time.OffsetDateTime offsetDateTime16 = putSchedule15.StartDate;
        java.time.OffsetDateTime offsetDateTime17 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSchedule putSchedule18 = putSchedule15.setEndDate(offsetDateTime17);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes19 = putSchedule18.AuditAttributes;
        java.time.OffsetDateTime offsetDateTime20 = putSchedule18.getEndDate();
        java.time.OffsetDateTime offsetDateTime21 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSchedule putSchedule22 = putSchedule18.setStartDate(offsetDateTime21);
        java.lang.Integer int23 = putSchedule18.SamplingLocationGroupSelectionTypeRandomCount;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.RecurrenceDayMonthlyType recurrenceDayMonthlyType24 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.RecurrenceDayMonthlyType.LAST_DAY_OF_MONTH;
        putSchedule18.RecurrenceDayMonthly = recurrenceDayMonthlyType24;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Unit unit26 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Unit();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes27 = unit26.AuditAttributes;
        unit26.BaseMultiplier = 0.0d;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutAccessGroup putAccessGroup30 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutAccessGroup();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivity samplingPlanPlannedActivity31 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivity();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes32 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivity samplingPlanPlannedActivity33 = samplingPlanPlannedActivity31.setAuditAttributes(auditAttributes32);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes34 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes36 = auditAttributes34.setCreationUserProfileId("'.'SSSSSSS");
        samplingPlanPlannedActivity33.AuditAttributes = auditAttributes34;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes38 = samplingPlanPlannedActivity33.AuditAttributes;
        putAccessGroup30.AuditAttributes = auditAttributes38;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Unit unit40 = unit26.setAuditAttributes(auditAttributes38);
        putSchedule18.AuditAttributes = auditAttributes38;
        laboratory9.AuditAttributes = auditAttributes38;
        java.time.OffsetDateTime offsetDateTime43 = auditAttributes38.ModificationTime;
        putFieldVisit4.AuditAttributes = auditAttributes38;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutFieldVisit putFieldVisit45 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutFieldVisit();
        putFieldVisit45.Notes = "MinDuration";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutFieldVisit putFieldVisit48 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutFieldVisit();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity[] plannedActivityArray49 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity> plannedActivityList50 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity>();
        boolean boolean51 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity>) plannedActivityList50, plannedActivityArray49);
        putFieldVisit48.PlannedActivities = plannedActivityList50;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutFieldVisit putFieldVisit53 = putFieldVisit45.setPlannedActivities((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity>) plannedActivityList50);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails54 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails56 = labResultDetails54.setAnalysisComment("/AQUARIUS/Acquisition/v2");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes57 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails58 = labResultDetails56.setAuditAttributes(auditAttributes57);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutFieldVisit putFieldVisit59 = putFieldVisit45.setAuditAttributes(auditAttributes57);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutFieldVisit putFieldVisit60 = putFieldVisit4.setAuditAttributes(auditAttributes57);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UnitGroupWithUnits unitGroupWithUnits61 = unitGroupWithUnits0.setAuditAttributes(auditAttributes57);
        java.lang.String str62 = unitGroupWithUnits0.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UnitGroupWithUnits unitGroupWithUnits64 = unitGroupWithUnits0.setId("2021.4.62.0");
        unitGroupWithUnits64.CustomId = "2021.4.62.0";
        unitGroupWithUnits64.SupportsConversion = true;
        org.junit.Assert.assertNull(unitList1);
        org.junit.Assert.assertNull(auditAttributes2);
        org.junit.Assert.assertNull(unitList3);
        org.junit.Assert.assertNotNull(putFieldVisit8);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNull(offsetDateTime16);
        org.junit.Assert.assertNotNull(putSchedule18);
        org.junit.Assert.assertNull(auditAttributes19);
        org.junit.Assert.assertNull(offsetDateTime20);
        org.junit.Assert.assertNotNull(putSchedule22);
        org.junit.Assert.assertNull(int23);
        org.junit.Assert.assertTrue("'" + recurrenceDayMonthlyType24 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.RecurrenceDayMonthlyType.LAST_DAY_OF_MONTH + "'", recurrenceDayMonthlyType24.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.RecurrenceDayMonthlyType.LAST_DAY_OF_MONTH));
        org.junit.Assert.assertNull(auditAttributes27);
        org.junit.Assert.assertNotNull(samplingPlanPlannedActivity33);
        org.junit.Assert.assertNotNull(auditAttributes36);
        org.junit.Assert.assertNotNull(auditAttributes38);
        org.junit.Assert.assertNotNull(unit40);
        org.junit.Assert.assertNull(offsetDateTime43);
        org.junit.Assert.assertNotNull(plannedActivityArray49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(putFieldVisit53);
        org.junit.Assert.assertNotNull(labResultDetails56);
        org.junit.Assert.assertNotNull(labResultDetails58);
        org.junit.Assert.assertNotNull(putFieldVisit59);
        org.junit.Assert.assertNotNull(putFieldVisit60);
        org.junit.Assert.assertNotNull(unitGroupWithUnits61);
        org.junit.Assert.assertNull(str62);
        org.junit.Assert.assertNotNull(unitGroupWithUnits64);
    }

    @Test
    public void test53024() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest106.test53024");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutBulkEditResultGradesV2 putBulkEditResultGradesV2_0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutBulkEditResultGradesV2();
        java.lang.Double double1 = putBulkEditResultGradesV2_0.DepthValue;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_2 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray4 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList5 = new java.util.ArrayList<java.lang.String>();
        boolean boolean6 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList5, strArray4);
        getObservationsV2_2.SpecimenIds = strList5;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags8 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray12 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList13 = new java.util.ArrayList<java.lang.String>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList13, strArray12);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags15 = putLocationTags8.setTagUniqueIds(strList13);
        getObservationsV2_2.QualityControlTypes = strList13;
        java.util.List<java.lang.String> strList17 = getObservationsV2_2.getAnalyticalGroupIds();
        java.util.List<java.lang.String> strList18 = getObservationsV2_2.DataClassifications;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.FieldResultType fieldResultType19 = getObservationsV2_2.FieldResultType;
        java.time.Instant instant20 = getObservationsV2_2.getEndObservedTime();
        java.lang.String str21 = getObservationsV2_2.DepthUnitCustomId;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags22 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray26 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList27 = new java.util.ArrayList<java.lang.String>();
        boolean boolean28 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList27, strArray26);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags29 = putLocationTags22.setTagUniqueIds(strList27);
        java.util.ArrayList<java.lang.String> strList30 = putLocationTags29.TagUniqueIds;
        getObservationsV2_2.ProjectIds = strList30;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutBulkEditResultGradesV2 putBulkEditResultGradesV2_32 = putBulkEditResultGradesV2_0.setSearch((java.util.List<java.lang.String>) strList30);
        java.util.List<java.lang.String> strList33 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutBulkEditResultGradesV2 putBulkEditResultGradesV2_34 = putBulkEditResultGradesV2_32.setLabResultLaboratoryIds(strList33);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitDataServiceResponse fieldVisitDataServiceResponse35 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitDataServiceResponse();
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CrossSectionSurveyActivity> crossSectionSurveyActivityList36 = fieldVisitDataServiceResponse35.CrossSectionSurveyActivity;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitDataServiceResponse fieldVisitDataServiceResponse38 = fieldVisitDataServiceResponse35.setIdentifier("");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary39 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        dischargeSummary39.Reviewer = "";
        java.time.Instant instant42 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        dischargeSummary39.MeasurementTime = instant42;
        fieldVisitDataServiceResponse35.ResponseTime = instant42;
        putBulkEditResultGradesV2_34.EndModificationTime = instant42;
        putBulkEditResultGradesV2_34.NumericResultValue = 10.0d;
        java.util.List<java.lang.String> strList48 = putBulkEditResultGradesV2_34.getTaxonIds();
        org.junit.Assert.assertNull(double1);
        org.junit.Assert.assertNotNull(strArray4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(putLocationTags15);
        org.junit.Assert.assertNull(strList17);
        org.junit.Assert.assertNull(strList18);
        org.junit.Assert.assertNull(fieldResultType19);
        org.junit.Assert.assertNull(instant20);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(putLocationTags29);
        org.junit.Assert.assertNotNull(strList30);
        org.junit.Assert.assertNotNull(putBulkEditResultGradesV2_32);
        org.junit.Assert.assertNotNull(putBulkEditResultGradesV2_34);
        org.junit.Assert.assertNull(crossSectionSurveyActivityList36);
        org.junit.Assert.assertNotNull(fieldVisitDataServiceResponse38);
        org.junit.Assert.assertNotNull(instant42);
        org.junit.Assert.assertNull(strList48);
    }

    @Test
    public void test53025() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest106.test53025");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutProject putProject0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutProject();
        java.time.OffsetDateTime offsetDateTime1 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutProject putProject2 = putProject0.setStartTime(offsetDateTime1);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutProject putProject4 = putProject0.setApprovalAgency("yyyy'-'MM'-'dd'T'HH':'mm':'ss");
        java.time.OffsetDateTime offsetDateTime5 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutProject putProject6 = putProject4.setStartTime(offsetDateTime5);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ProjectType projectType7 = putProject6.getType();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ProjectType projectType8 = putProject6.Type;
        java.lang.String str9 = putProject6.getCustomId();
        java.time.OffsetDateTime offsetDateTime10 = putProject6.getStartTime();
        org.junit.Assert.assertNotNull(putProject2);
        org.junit.Assert.assertNotNull(putProject4);
        org.junit.Assert.assertNotNull(putProject6);
        org.junit.Assert.assertNull(projectType7);
        org.junit.Assert.assertNull(projectType8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNull(offsetDateTime10);
    }

    @Test
    public void test53026() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest106.test53026");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Vertical vertical0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Vertical();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Vertical vertical2 = vertical0.setPercentageOfTotalDischarge((java.lang.Double) 100.0d);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay3 = vertical2.getSegmentWidth();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MeasurementCondition measurementCondition4 = null;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Vertical vertical5 = vertical2.setMeasurementCondition(measurementCondition4);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Vertical vertical6 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Vertical();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay7 = vertical6.getMeanVelocity();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay8 = null;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Vertical vertical9 = vertical6.setSegmentWidth(quantityWithDisplay8);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Vertical vertical10 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Vertical();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay11 = vertical10.SoundedDepth;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay12 = null;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Vertical vertical13 = vertical10.setSegmentDischarge(quantityWithDisplay12);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MeasurementCondition measurementCondition14 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MeasurementCondition.Unknown;
        vertical10.MeasurementCondition = measurementCondition14;
        vertical6.MeasurementCondition = measurementCondition14;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay17 = vertical6.SoundedDepth;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.AdcpDischargeActivity adcpDischargeActivity18 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.AdcpDischargeActivity();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay19 = null;
        adcpDischargeActivity18.TransducerDepth = quantityWithDisplay19;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay21 = null;
        adcpDischargeActivity18.TransducerDepth = quantityWithDisplay21;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.AdcpDischargeActivity adcpDischargeActivity24 = adcpDischargeActivity18.setNumberOfTransects((java.lang.Integer) 4);
        adcpDischargeActivity24.SerialNumber = "multipart/form-data; boundary=****bbcf5f9e-6ccf-4b63-91ab-6e645caf02af****";
        adcpDischargeActivity24.NumberOfTransects = 2;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Vertical vertical29 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Vertical();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay30 = vertical29.SoundedDepth;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay31 = null;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Vertical vertical32 = vertical29.setSegmentDischarge(quantityWithDisplay31);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Vertical vertical34 = vertical32.setVerticalNumber((java.lang.Double) (-1.0d));
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CrossSectionPoint crossSectionPoint35 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CrossSectionPoint();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay36 = null;
        crossSectionPoint35.Distance = quantityWithDisplay36;
        crossSectionPoint35.PointOrder = 1;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay40 = crossSectionPoint35.getElevation();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CrossSectionPoint crossSectionPoint42 = crossSectionPoint35.setComments("hi!");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay43 = null;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CrossSectionPoint crossSectionPoint44 = crossSectionPoint42.setElevation(quantityWithDisplay43);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay45 = null;
        crossSectionPoint44.Depth = quantityWithDisplay45;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DatumConvertedQuantityWithDisplay datumConvertedQuantityWithDisplay47 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DatumConvertedQuantityWithDisplay();
        crossSectionPoint44.Depth = datumConvertedQuantityWithDisplay47;
        vertical32.SegmentWidth = datumConvertedQuantityWithDisplay47;
        adcpDischargeActivity24.VelocityAverage = datumConvertedQuantityWithDisplay47;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Vertical vertical51 = vertical6.setSegmentArea((com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay) datumConvertedQuantityWithDisplay47);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Vertical vertical52 = vertical5.setSegmentVelocity((com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay) datumConvertedQuantityWithDisplay47);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Vertical vertical53 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Vertical();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay54 = vertical53.SegmentArea;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay55 = null;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Vertical vertical56 = vertical53.setEffectiveDepth(quantityWithDisplay55);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FlowDirectionType flowDirectionType57 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FlowDirectionType.Normal;
        vertical53.FlowDirection = flowDirectionType57;
        vertical52.FlowDirection = flowDirectionType57;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MeasurementCondition measurementCondition60 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MeasurementCondition.OpenWater;
        vertical52.MeasurementCondition = measurementCondition60;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MeasurementCondition measurementCondition62 = vertical52.MeasurementCondition;
        org.junit.Assert.assertNotNull(vertical2);
        org.junit.Assert.assertNull(quantityWithDisplay3);
        org.junit.Assert.assertNotNull(vertical5);
        org.junit.Assert.assertNull(quantityWithDisplay7);
        org.junit.Assert.assertNotNull(vertical9);
        org.junit.Assert.assertNull(quantityWithDisplay11);
        org.junit.Assert.assertNotNull(vertical13);
        org.junit.Assert.assertTrue("'" + measurementCondition14 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MeasurementCondition.Unknown + "'", measurementCondition14.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MeasurementCondition.Unknown));
        org.junit.Assert.assertNull(quantityWithDisplay17);
        org.junit.Assert.assertNotNull(adcpDischargeActivity24);
        org.junit.Assert.assertNull(quantityWithDisplay30);
        org.junit.Assert.assertNotNull(vertical32);
        org.junit.Assert.assertNotNull(vertical34);
        org.junit.Assert.assertNull(quantityWithDisplay40);
        org.junit.Assert.assertNotNull(crossSectionPoint42);
        org.junit.Assert.assertNotNull(crossSectionPoint44);
        org.junit.Assert.assertNotNull(vertical51);
        org.junit.Assert.assertNotNull(vertical52);
        org.junit.Assert.assertNull(quantityWithDisplay54);
        org.junit.Assert.assertNotNull(vertical56);
        org.junit.Assert.assertTrue("'" + flowDirectionType57 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FlowDirectionType.Normal + "'", flowDirectionType57.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FlowDirectionType.Normal));
        org.junit.Assert.assertTrue("'" + measurementCondition60 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MeasurementCondition.OpenWater + "'", measurementCondition60.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MeasurementCondition.OpenWater));
        org.junit.Assert.assertTrue("'" + measurementCondition62 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MeasurementCondition.OpenWater + "'", measurementCondition62.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MeasurementCondition.OpenWater));
    }

    @Test
    public void test53027() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest106.test53027");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutStandard putStandard0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutStandard();
        putStandard0.Active = true;
        java.lang.String str3 = putStandard0.getCustomId();
        java.lang.String str4 = putStandard0.getName();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFilter postFilter5 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFilter();
        java.time.OffsetDateTime offsetDateTime6 = postFilter5.StartTime;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes7 = postFilter5.getAuditAttributes();
        postFilter5.Description = "'.'SSSSSSS";
        java.time.OffsetDateTime offsetDateTime10 = postFilter5.getEndTime();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFilter postFilter11 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFilter();
        postFilter11.CustomId = "http";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocation[] samplingLocationArray14 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocation[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocation> samplingLocationList15 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocation>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocation>) samplingLocationList15, samplingLocationArray14);
        postFilter11.SamplingLocations = samplingLocationList15;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFilter postFilter18 = postFilter5.setSamplingLocations((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocation>) samplingLocationList15);
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocation> samplingLocationList19 = postFilter5.getSamplingLocations();
        java.time.OffsetDateTime offsetDateTime20 = postFilter5.getStartTime();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroup analyticalGroup21 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroup();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupType analyticalGroupType22 = analyticalGroup21.getType();
        analyticalGroup21.Name = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSSSSSZZZZZ";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroup analyticalGroup25 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroup();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem analyticalGroupItem26 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod27 = analyticalGroupItem26.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem analyticalGroupItem28 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod29 = analyticalGroupItem28.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod30 = analyticalGroupItem28.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem analyticalGroupItem31 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod32 = analyticalGroupItem31.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod33 = analyticalGroupItem31.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod34 = null;
        analyticalGroupItem31.AnalysisMethod = analysisMethod34;
        java.lang.String str36 = analyticalGroupItem31.getHoldingTime();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem analyticalGroupItem37 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod38 = analyticalGroupItem37.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod39 = analyticalGroupItem37.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem analyticalGroupItem40 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod41 = analyticalGroupItem40.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem analyticalGroupItem42 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod43 = analyticalGroupItem42.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod44 = analyticalGroupItem42.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod45 = null;
        analyticalGroupItem42.AnalysisMethod = analysisMethod45;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem[] analyticalGroupItemArray47 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem[] { analyticalGroupItem26, analyticalGroupItem28, analyticalGroupItem31, analyticalGroupItem37, analyticalGroupItem40, analyticalGroupItem42 };
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem> analyticalGroupItemList48 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem>();
        boolean boolean49 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem>) analyticalGroupItemList48, analyticalGroupItemArray47);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroup analyticalGroup50 = analyticalGroup25.setAnalyticalGroupItems((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem>) analyticalGroupItemList48);
        analyticalGroup21.AnalyticalGroupItems = analyticalGroupItemList48;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes52 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes();
        analyticalGroup21.AuditAttributes = auditAttributes52;
        postFilter5.AuditAttributes = auditAttributes52;
        putStandard0.AuditAttributes = auditAttributes52;
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationSimple> samplingLocationSimpleList56 = putStandard0.SamplingLocations;
        java.lang.String str57 = putStandard0.getName();
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationStandard> observationStandardList58 = putStandard0.ObservationStandards;
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(offsetDateTime6);
        org.junit.Assert.assertNull(auditAttributes7);
        org.junit.Assert.assertNull(offsetDateTime10);
        org.junit.Assert.assertNotNull(samplingLocationArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(postFilter18);
        org.junit.Assert.assertNotNull(samplingLocationList19);
        org.junit.Assert.assertNull(offsetDateTime20);
        org.junit.Assert.assertNull(analyticalGroupType22);
        org.junit.Assert.assertNull(analysisMethod27);
        org.junit.Assert.assertNull(analysisMethod29);
        org.junit.Assert.assertNull(analysisMethod30);
        org.junit.Assert.assertNull(analysisMethod32);
        org.junit.Assert.assertNull(analysisMethod33);
        org.junit.Assert.assertNull(str36);
        org.junit.Assert.assertNull(analysisMethod38);
        org.junit.Assert.assertNull(analysisMethod39);
        org.junit.Assert.assertNull(analysisMethod41);
        org.junit.Assert.assertNull(analysisMethod43);
        org.junit.Assert.assertNull(analysisMethod44);
        org.junit.Assert.assertNotNull(analyticalGroupItemArray47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(analyticalGroup50);
        org.junit.Assert.assertNull(samplingLocationSimpleList56);
        org.junit.Assert.assertNull(str57);
        org.junit.Assert.assertNull(observationStandardList58);
    }

    @Test
    public void test53028() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest106.test53028");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutObservedProperty putObservedProperty0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutObservedProperty();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity quantity1 = putObservedProperty0.LowerLimit;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutObservedProperty putObservedProperty3 = putObservedProperty0.setDescription("");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutObservedProperty putObservedProperty5 = putObservedProperty3.setDescription("2021.4.62.0");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes6 = putObservedProperty5.getAuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes7 = putObservedProperty5.AuditAttributes;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity quantity8 = putObservedProperty5.LowerLimit;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity quantity9 = putObservedProperty5.getUpperLimit();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutObservedProperty putObservedProperty11 = putObservedProperty5.setName("multipart/form-data; boundary=****bbcf5f9e-6ccf-4b63-91ab-6e645caf02af****");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity quantity12 = putObservedProperty5.getUpperLimit();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes13 = putObservedProperty5.AuditAttributes;
        org.junit.Assert.assertNull(quantity1);
        org.junit.Assert.assertNotNull(putObservedProperty3);
        org.junit.Assert.assertNotNull(putObservedProperty5);
        org.junit.Assert.assertNull(auditAttributes6);
        org.junit.Assert.assertNull(auditAttributes7);
        org.junit.Assert.assertNull(quantity8);
        org.junit.Assert.assertNull(quantity9);
        org.junit.Assert.assertNotNull(putObservedProperty11);
        org.junit.Assert.assertNull(quantity12);
        org.junit.Assert.assertNull(auditAttributes13);
    }

    @Test
    public void test53029() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest106.test53029");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservedProperty postObservedProperty0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservedProperty();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UnitGroup unitGroup1 = postObservedProperty0.UnitGroup;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple[] importHistoryEventSimpleArray2 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple> importHistoryEventSimpleList3 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple>) importHistoryEventSimpleList3, importHistoryEventSimpleArray2);
        postObservedProperty0.ImportHistoryEventSimples = importHistoryEventSimpleList3;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Unit unit6 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservedProperty postObservedProperty7 = postObservedProperty0.setDefaultUnit(unit6);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation8 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedFieldResult plannedFieldResult9 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation10 = observation8.setPlannedFieldResult(plannedFieldResult9);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabInstruction labInstruction11 = null;
        observation10.LabInstruction = labInstruction11;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationStatistics observationStatistics13 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation14 = observation10.setStatistics(observationStatistics13);
        java.time.OffsetDateTime offsetDateTime15 = observation14.getResultTime();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultGrade resultGrade16 = observation14.ResultGrade;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.NullMeasureQualifier nullMeasureQualifier17 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation18 = observation14.setNullMeasureQualifier(nullMeasureQualifier17);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservedProperty postObservedProperty19 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservedProperty();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UnitGroup unitGroup20 = postObservedProperty19.UnitGroup;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity quantity21 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Unit unit22 = null;
        quantity21.Unit = unit22;
        postObservedProperty19.LowerLimit = quantity21;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity quantity25 = postObservedProperty19.LowerLimit;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Unit unit26 = quantity25.Unit;
        observation18.Depth = quantity25;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservedProperty postObservedProperty28 = postObservedProperty7.setLowerLimit(quantity25);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisType analysisType29 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservedProperty postObservedProperty30 = postObservedProperty7.setAnalysisType(analysisType29);
        org.junit.Assert.assertNull(unitGroup1);
        org.junit.Assert.assertNotNull(importHistoryEventSimpleArray2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(postObservedProperty7);
        org.junit.Assert.assertNotNull(observation10);
        org.junit.Assert.assertNotNull(observation14);
        org.junit.Assert.assertNull(offsetDateTime15);
        org.junit.Assert.assertNull(resultGrade16);
        org.junit.Assert.assertNotNull(observation18);
        org.junit.Assert.assertNull(unitGroup20);
        org.junit.Assert.assertNotNull(quantity25);
        org.junit.Assert.assertNull(unit26);
        org.junit.Assert.assertNotNull(postObservedProperty28);
        org.junit.Assert.assertNotNull(postObservedProperty30);
    }

    @Test
    public void test53030() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest106.test53030");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedPoint timeAlignedPoint0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedPoint();
        timeAlignedPoint0.Method9 = "multipart/form-data; boundary=****7eff1774-b6b0-471a-961c-156c64359366****";
        timeAlignedPoint0.DisplayValue9 = "";
        java.lang.String str5 = timeAlignedPoint0.getApprovalName4();
        java.lang.Long long6 = timeAlignedPoint0.getApprovalLevel7();
        java.lang.String str7 = timeAlignedPoint0.Method7;
        timeAlignedPoint0.NumericValue8 = 0.0d;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedPoint timeAlignedPoint11 = timeAlignedPoint0.setDisplayValue4("multipart/form-data; boundary=****9fadde69-3f13-40c4-a87c-0f3f51c2dd35****");
        java.lang.String str12 = timeAlignedPoint11.getQualifiers10();
        java.lang.Double double13 = timeAlignedPoint11.NumericValue5;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedPoint timeAlignedPoint15 = timeAlignedPoint11.setDisplayValue4("multipart/form-data; boundary=****f642a130-eb6d-4fb6-a1a4-7c7216ab119b****");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedPoint timeAlignedPoint17 = timeAlignedPoint15.setDisplayValue4("multipart/form-data; boundary=****59879c02-0839-4b96-bc41-a13ebb706be4****");
        java.time.Instant instant18 = timeAlignedPoint17.Timestamp;
        java.lang.String str19 = timeAlignedPoint17.Method6;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedPoint timeAlignedPoint21 = timeAlignedPoint17.setGradeName7("multipart/form-data; boundary=****453bbbc7-a235-4d67-9e25-19f5ad16bf76****");
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(long6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(timeAlignedPoint11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNull(double13);
        org.junit.Assert.assertNotNull(timeAlignedPoint15);
        org.junit.Assert.assertNotNull(timeAlignedPoint17);
        org.junit.Assert.assertNull(instant18);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertNotNull(timeAlignedPoint21);
    }

    @Test
    public void test53031() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest106.test53031");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostStatisticalDerivedTimeSeries postStatisticalDerivedTimeSeries0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostStatisticalDerivedTimeSeries();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostStatisticalDerivedTimeSeries postStatisticalDerivedTimeSeries2 = postStatisticalDerivedTimeSeries0.setComment("'.'SSSSSSS");
        java.lang.String str3 = postStatisticalDerivedTimeSeries0.getParameter();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostStatisticalDerivedTimeSeries postStatisticalDerivedTimeSeries5 = postStatisticalDerivedTimeSeries0.setTimeStepCount((java.lang.Integer) 0);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostStatisticalDerivedTimeSeries postStatisticalDerivedTimeSeries7 = postStatisticalDerivedTimeSeries5.setParameter("http");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostStatisticalDerivedTimeSeries postStatisticalDerivedTimeSeries9 = postStatisticalDerivedTimeSeries7.setComputationIdentifier("multipart/form-data; boundary=****ebf59e0e-2d1f-43bc-996f-3c628a80f696****");
        postStatisticalDerivedTimeSeries7.LocationUniqueId = "zZZZZ";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostStatisticalDerivedTimeSeries postStatisticalDerivedTimeSeries13 = postStatisticalDerivedTimeSeries7.setTimeSeriesUniqueId("multipart/form-data; boundary=****a6346bd6-b0e7-4290-a612-1b1730df8677****");
        org.junit.Assert.assertNotNull(postStatisticalDerivedTimeSeries2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(postStatisticalDerivedTimeSeries5);
        org.junit.Assert.assertNotNull(postStatisticalDerivedTimeSeries7);
        org.junit.Assert.assertNotNull(postStatisticalDerivedTimeSeries9);
        org.junit.Assert.assertNotNull(postStatisticalDerivedTimeSeries13);
    }

    @Test
    public void test53032() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest106.test53032");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationExportIIV2 getObservationExportIIV2_0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationExportIIV2();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationExportIIFormatType getObservationExportIIFormatType1 = getObservationExportIIV2_0.getFormat();
        java.util.List<java.lang.String> strList2 = getObservationExportIIV2_0.SamplingLocationIds;
        getObservationExportIIV2_0.ActivityCustomId = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSSSSSZZZZZ";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportSamplingLocations getExportSamplingLocations5 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportSamplingLocations();
        java.time.Instant instant6 = getExportSamplingLocations5.getStartModificationTime();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_7 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray10 = new java.lang.String[] { "", "" };
        java.util.ArrayList<java.lang.String> strList11 = new java.util.ArrayList<java.lang.String>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList11, strArray10);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_13 = getObservationsV2_7.setDataClassifications((java.util.List<java.lang.String>) strList11);
        java.util.List<java.lang.String> strList14 = getObservationsV2_7.ResultGrades;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.FieldResultType fieldResultType15 = null;
        getObservationsV2_7.FieldResultType = fieldResultType15;
        getObservationsV2_7.MaxNumericResultValue = 100.0d;
        java.lang.String str19 = getObservationsV2_7.getActivityCustomId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_21 = getObservationsV2_7.setDepthUnitCustomId("/AQUARIUS/Acquisition/v2://9999-12-31T23:59:59.999Z");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_22 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray24 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList25 = new java.util.ArrayList<java.lang.String>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList25, strArray24);
        getObservationsV2_22.SpecimenIds = strList25;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_28 = getObservationsV2_7.setAnalysisMethodIds((java.util.List<java.lang.String>) strList25);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportSamplingLocations getExportSamplingLocations29 = getExportSamplingLocations5.setSamplingLocationGroupIds((java.util.List<java.lang.String>) strList25);
        getExportSamplingLocations29.Sort = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSSSSSZZZZZ";
        java.lang.String str32 = getExportSamplingLocations29.Cursor;
        java.lang.Integer int33 = getExportSamplingLocations29.getLimit();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_34 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray37 = new java.lang.String[] { "", "" };
        java.util.ArrayList<java.lang.String> strList38 = new java.util.ArrayList<java.lang.String>();
        boolean boolean39 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList38, strArray37);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_40 = getObservationsV2_34.setDataClassifications((java.util.List<java.lang.String>) strList38);
        java.time.Instant instant41 = getObservationsV2_34.getStartObservedTime();
        java.util.List<java.lang.String> strList42 = getObservationsV2_34.Ids;
        java.util.List<java.lang.String> strList43 = getObservationsV2_34.DataClassifications;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_45 = getObservationsV2_34.setDepthUnitId("http://MaxDurationhttp/json/reply/Integer");
        java.util.List<java.lang.String> strList46 = getObservationsV2_45.getTaxonIds();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostTag postTag47 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostTag();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_48 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray51 = new java.lang.String[] { "", "" };
        java.util.ArrayList<java.lang.String> strList52 = new java.util.ArrayList<java.lang.String>();
        boolean boolean53 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList52, strArray51);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_54 = getObservationsV2_48.setDataClassifications((java.util.List<java.lang.String>) strList52);
        postTag47.PickListValues = strList52;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_56 = getObservationsV2_45.setResultStatuses((java.util.List<java.lang.String>) strList52);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportSamplingLocations getExportSamplingLocations57 = getExportSamplingLocations29.setSearch((java.util.List<java.lang.String>) strList52);
        getObservationExportIIV2_0.Media = strList52;
        java.lang.String str59 = getObservationExportIIV2_0.getDetectionCondition();
        org.junit.Assert.assertNull(getObservationExportIIFormatType1);
        org.junit.Assert.assertNull(strList2);
        org.junit.Assert.assertNull(instant6);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(getObservationsV2_13);
        org.junit.Assert.assertNull(strList14);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertNotNull(getObservationsV2_21);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(getObservationsV2_28);
        org.junit.Assert.assertNotNull(getExportSamplingLocations29);
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertNull(int33);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(getObservationsV2_40);
        org.junit.Assert.assertNull(instant41);
        org.junit.Assert.assertNull(strList42);
        org.junit.Assert.assertNotNull(strList43);
        org.junit.Assert.assertNotNull(getObservationsV2_45);
        org.junit.Assert.assertNull(strList46);
        org.junit.Assert.assertNotNull(strArray51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(getObservationsV2_54);
        org.junit.Assert.assertNotNull(getObservationsV2_56);
        org.junit.Assert.assertNotNull(getExportSamplingLocations57);
        org.junit.Assert.assertNull(str59);
    }

    @Test
    public void test53033() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest106.test53033");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SearchResultSpecimen searchResultSpecimen0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SearchResultSpecimen();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Specimen[] specimenArray1 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Specimen[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Specimen> specimenList2 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Specimen>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Specimen>) specimenList2, specimenArray1);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SearchResultSpecimen searchResultSpecimen4 = searchResultSpecimen0.setDomainObjects((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Specimen>) specimenList2);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SearchResultSpecimen searchResultSpecimen5 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SearchResultSpecimen();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Specimen[] specimenArray6 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Specimen[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Specimen> specimenList7 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Specimen>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Specimen>) specimenList7, specimenArray6);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SearchResultSpecimen searchResultSpecimen9 = searchResultSpecimen5.setDomainObjects((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Specimen>) specimenList7);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SearchResultSpecimen searchResultSpecimen10 = searchResultSpecimen4.setDomainObjects((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Specimen>) specimenList7);
        searchResultSpecimen4.TotalCount = 100;
        org.junit.Assert.assertNotNull(specimenArray1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(searchResultSpecimen4);
        org.junit.Assert.assertNotNull(specimenArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(searchResultSpecimen9);
        org.junit.Assert.assertNotNull(searchResultSpecimen10);
    }

    @Test
    public void test53034() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest106.test53034");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CorrectionListServiceRequest correctionListServiceRequest0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CorrectionListServiceRequest();
        correctionListServiceRequest0.TimeSeriesUniqueId = "/AQUARIUS";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse3 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary4 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary6 = dischargeSummary4.setPublish((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse7 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant8 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse9 = locationDescriptionListServiceResponse7.setNextToken(instant8);
        dischargeSummary4.MeasurementTime = instant8;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse11 = locationDescriptionListServiceResponse3.setNextToken(instant8);
        java.time.Instant instant12 = locationDescriptionListServiceResponse3.getNextToken();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest13 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ControlConditionActivity controlConditionActivity14 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ControlConditionActivity();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ControlCleanedType controlCleanedType15 = null;
        controlConditionActivity14.ControlCleaned = controlCleanedType15;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse17 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant18 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse19 = locationDescriptionListServiceResponse17.setNextToken(instant18);
        controlConditionActivity14.DateCleaned = instant18;
        timeAlignedDataServiceRequest13.QueryFrom = instant18;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse22 = locationDescriptionListServiceResponse3.setNextToken(instant18);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CorrectionListServiceRequest correctionListServiceRequest23 = correctionListServiceRequest0.setQueryTo(instant18);
        java.time.Instant instant24 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CorrectionListServiceRequest correctionListServiceRequest25 = correctionListServiceRequest23.setQueryTo(instant24);
        java.lang.String str26 = correctionListServiceRequest23.getTimeSeriesUniqueId();
        org.junit.Assert.assertNotNull(dischargeSummary6);
        org.junit.Assert.assertNotNull(instant8);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse9);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse11);
        org.junit.Assert.assertNotNull(instant12);
        org.junit.Assert.assertNotNull(instant18);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse19);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse22);
        org.junit.Assert.assertNotNull(correctionListServiceRequest23);
        org.junit.Assert.assertNotNull(instant24);
        org.junit.Assert.assertNotNull(correctionListServiceRequest25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "/AQUARIUS" + "'", str26, "/AQUARIUS");
    }

    @Test
    public void test53035() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest106.test53035");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutFieldTrip putFieldTrip0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutFieldTrip();
        java.time.OffsetDateTime offsetDateTime1 = putFieldTrip0.StartTime;
        java.time.OffsetDateTime offsetDateTime2 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutFieldTrip putFieldTrip3 = putFieldTrip0.setStartTime(offsetDateTime2);
        java.lang.String str4 = putFieldTrip0.getId();
        putFieldTrip0.Participants = "****2c758a89-79ef-4b16-8ced-c7bb83cdba18****";
        org.junit.Assert.assertNull(offsetDateTime1);
        org.junit.Assert.assertNotNull(putFieldTrip3);
        org.junit.Assert.assertNull(str4);
    }

    @Test
    public void test53036() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest106.test53036");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportSummary importSummary0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportSummary();
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObject> importItemObjectList1 = importSummary0.ErrorImportItems;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportSummary importSummary3 = importSummary0.setNewCount((java.lang.Integer) 10);
        java.lang.Integer int4 = importSummary0.getErrorCount();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportSummary importSummary6 = importSummary0.setUpdateCount((java.lang.Integer) 10);
        java.lang.String str7 = importSummary6.SummaryReportText;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportSummary importSummary9 = importSummary6.setInvalidRowsCsvUrl("http://MaxDurationhttp/json/reply/Float");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportSummary importSummary11 = importSummary9.setExpectedCount((java.lang.Integer) 4);
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObject> importItemObjectList12 = importSummary11.ErrorImportItems;
        org.junit.Assert.assertNull(importItemObjectList1);
        org.junit.Assert.assertNotNull(importSummary3);
        org.junit.Assert.assertNull(int4);
        org.junit.Assert.assertNotNull(importSummary6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(importSummary9);
        org.junit.Assert.assertNotNull(importSummary11);
        org.junit.Assert.assertNull(importItemObjectList12);
    }

    @Test
    public void test53037() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest106.test53037");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupSimple analyticalGroupSimple0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupSimple();
        java.lang.Integer int1 = analyticalGroupSimple0.getNumberOfAnalysisMethodsInGroupItems();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupSimple analyticalGroupSimple3 = analyticalGroupSimple0.setNumberOfAnalysisMethodsInGroupItems((java.lang.Integer) 10);
        analyticalGroupSimple0.Description = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupSimple analyticalGroupSimple7 = analyticalGroupSimple0.setNumberOfAnalysisMethodsInGroupItems((java.lang.Integer) 10);
        java.lang.String str8 = analyticalGroupSimple0.Description;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupSimple analyticalGroupSimple10 = analyticalGroupSimple0.setDescription("yyyy'-'MM'-'dd'T'HH':'mm':'ss");
        analyticalGroupSimple10.NumberOfAnalysisMethodsInGroupItems = 5;
        org.junit.Assert.assertNull(int1);
        org.junit.Assert.assertNotNull(analyticalGroupSimple3);
        org.junit.Assert.assertNotNull(analyticalGroupSimple7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ" + "'", str8, "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ");
        org.junit.Assert.assertNotNull(analyticalGroupSimple10);
    }

    @Test
    public void test53038() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest106.test53038");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.TimeSeriesAppendStatus timeSeriesAppendStatus0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.TimeSeriesAppendStatus();
        java.lang.Integer int1 = timeSeriesAppendStatus0.NumberOfPointsDeleted;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.AppendStatusCode appendStatusCode2 = timeSeriesAppendStatus0.getAppendStatus();
        java.lang.Integer int3 = timeSeriesAppendStatus0.getNumberOfPointsAppended();
        java.lang.String str4 = timeSeriesAppendStatus0.getTimeSeriesUniqueId();
        java.lang.Integer int5 = timeSeriesAppendStatus0.getNumberOfPointsAppended();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.TimeSeriesAppendStatus timeSeriesAppendStatus6 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.TimeSeriesAppendStatus();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.AppendStatusCode appendStatusCode7 = timeSeriesAppendStatus6.AppendStatus;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.TimeSeriesAppendStatus timeSeriesAppendStatus8 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.TimeSeriesAppendStatus();
        java.lang.Integer int9 = timeSeriesAppendStatus8.NumberOfPointsDeleted;
        java.lang.Integer int10 = timeSeriesAppendStatus8.NumberOfPointsDeleted;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.AppendStatusCode appendStatusCode11 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.AppendStatusCode.Failed;
        timeSeriesAppendStatus8.AppendStatus = appendStatusCode11;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.TimeSeriesAppendStatus timeSeriesAppendStatus13 = timeSeriesAppendStatus6.setAppendStatus(appendStatusCode11);
        timeSeriesAppendStatus0.AppendStatus = appendStatusCode11;
        org.junit.Assert.assertNull(int1);
        org.junit.Assert.assertNull(appendStatusCode2);
        org.junit.Assert.assertNull(int3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(int5);
        org.junit.Assert.assertNull(appendStatusCode7);
        org.junit.Assert.assertNull(int9);
        org.junit.Assert.assertNull(int10);
        org.junit.Assert.assertTrue("'" + appendStatusCode11 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.AppendStatusCode.Failed + "'", appendStatusCode11.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.AppendStatusCode.Failed));
        org.junit.Assert.assertNotNull(timeSeriesAppendStatus13);
    }

    @Test
    public void test53039() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest106.test53039");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitDescriptionListServiceRequest fieldVisitDescriptionListServiceRequest0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitDescriptionListServiceRequest();
        java.time.Instant instant1 = fieldVisitDescriptionListServiceRequest0.QueryTo;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetActivities getActivities2 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetActivities();
        java.lang.String str3 = getActivities2.getCustomId();
        java.time.Instant instant4 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MinConcreteValue;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetActivities getActivities5 = getActivities2.setFromStartTime(instant4);
        java.time.Instant instant6 = getActivities5.FromStartTime;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitDescriptionListServiceRequest fieldVisitDescriptionListServiceRequest7 = fieldVisitDescriptionListServiceRequest0.setQueryFrom(instant6);
        java.lang.Boolean boolean8 = fieldVisitDescriptionListServiceRequest0.IncludeInvalidFieldVisits;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesThresholdPeriod timeSeriesThresholdPeriod9 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesThresholdPeriod();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesThresholdPeriod timeSeriesThresholdPeriod11 = timeSeriesThresholdPeriod9.setReferenceValue((java.lang.Double) 0.0d);
        java.time.Instant instant12 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MinValue;
        timeSeriesThresholdPeriod9.AppliedTime = instant12;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeTransactionListServiceRequest metadataChangeTransactionListServiceRequest14 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeTransactionListServiceRequest();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostRecurringReport postRecurringReport15 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostRecurringReport();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary16 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        dischargeSummary16.Reviewer = "";
        java.time.Instant instant19 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        dischargeSummary16.MeasurementTime = instant19;
        postRecurringReport15.NextGenerationDate = instant19;
        java.time.Instant instant22 = postRecurringReport15.getNextGenerationDate();
        java.lang.String str23 = com.aquaticinformatics.aquarius.sdk.samples.serializers.InstantSerializer.format(instant22);
        metadataChangeTransactionListServiceRequest14.QueryFrom = instant22;
        timeSeriesThresholdPeriod9.AppliedTime = instant22;
        java.lang.String str26 = timeSeriesThresholdPeriod9.getComments();
        java.lang.Boolean boolean27 = timeSeriesThresholdPeriod9.isSuppressData();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesThresholdPeriod timeSeriesThresholdPeriod29 = timeSeriesThresholdPeriod9.setReferenceValue((java.lang.Double) 10.0d);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CalibrationCheck calibrationCheck30 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CalibrationCheck();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CalibrationCheckType calibrationCheckType31 = calibrationCheck30.getCalibrationCheckType();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay32 = calibrationCheck30.Value;
        java.lang.String str33 = calibrationCheck30.getModel();
        java.time.Instant instant34 = calibrationCheck30.getTime();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.StandardDetails standardDetails35 = null;
        calibrationCheck30.StandardDetails = standardDetails35;
        java.lang.String str37 = calibrationCheck30.getNodeDetails();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.GapToleranceOperation gapToleranceOperation38 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.GapToleranceOperation();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeOperationType metadataChangeOperationType39 = gapToleranceOperation38.OperationType;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitDataServiceResponse fieldVisitDataServiceResponse40 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitDataServiceResponse();
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CrossSectionSurveyActivity> crossSectionSurveyActivityList41 = fieldVisitDataServiceResponse40.CrossSectionSurveyActivity;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitDataServiceResponse fieldVisitDataServiceResponse43 = fieldVisitDataServiceResponse40.setIdentifier("");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary44 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        dischargeSummary44.Reviewer = "";
        java.time.Instant instant47 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        dischargeSummary44.MeasurementTime = instant47;
        fieldVisitDataServiceResponse40.ResponseTime = instant47;
        gapToleranceOperation38.DateAppliedUtc = instant47;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.GapToleranceOperation gapToleranceOperation51 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.GapToleranceOperation();
        java.lang.String str52 = gapToleranceOperation51.User;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.GapToleranceOperation gapToleranceOperation54 = gapToleranceOperation51.setComments("https");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.LocationDatumPeriod locationDatumPeriod55 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.LocationDatumPeriod();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.LocationDatumPeriodBase locationDatumPeriodBase57 = locationDatumPeriod55.setComment("'.'SSSSSSS");
        java.lang.String str58 = locationDatumPeriodBase57.Method;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse59 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant60 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse61 = locationDescriptionListServiceResponse59.setNextToken(instant60);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.LocationDatumPeriodBase locationDatumPeriodBase62 = locationDatumPeriodBase57.setValidFrom(instant60);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeRange timeRange63 = gapToleranceOperation51.setStartTime(instant60);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeRange timeRange64 = gapToleranceOperation38.setEndTime(instant60);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CalibrationCheck calibrationCheck65 = calibrationCheck30.setTime(instant60);
        timeSeriesThresholdPeriod9.AppliedTime = instant60;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitDescriptionListServiceRequest fieldVisitDescriptionListServiceRequest67 = fieldVisitDescriptionListServiceRequest0.setChangesSinceToken(instant60);
        org.junit.Assert.assertNull(instant1);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(instant4);
        org.junit.Assert.assertNotNull(getActivities5);
        org.junit.Assert.assertNotNull(instant6);
        org.junit.Assert.assertNotNull(fieldVisitDescriptionListServiceRequest7);
        org.junit.Assert.assertNull(boolean8);
        org.junit.Assert.assertNotNull(timeSeriesThresholdPeriod11);
        org.junit.Assert.assertNotNull(instant12);
        org.junit.Assert.assertNotNull(instant19);
        org.junit.Assert.assertNotNull(instant22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "9999-12-31T23:59:59.999Z" + "'", str23, "9999-12-31T23:59:59.999Z");
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertNull(boolean27);
        org.junit.Assert.assertNotNull(timeSeriesThresholdPeriod29);
        org.junit.Assert.assertNull(calibrationCheckType31);
        org.junit.Assert.assertNull(doubleWithDisplay32);
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertNull(instant34);
        org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertNull(metadataChangeOperationType39);
        org.junit.Assert.assertNull(crossSectionSurveyActivityList41);
        org.junit.Assert.assertNotNull(fieldVisitDataServiceResponse43);
        org.junit.Assert.assertNotNull(instant47);
        org.junit.Assert.assertNull(str52);
        org.junit.Assert.assertNotNull(gapToleranceOperation54);
        org.junit.Assert.assertNotNull(locationDatumPeriodBase57);
        org.junit.Assert.assertNull(str58);
        org.junit.Assert.assertNotNull(instant60);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse61);
        org.junit.Assert.assertNotNull(locationDatumPeriodBase62);
        org.junit.Assert.assertNotNull(timeRange63);
        org.junit.Assert.assertNotNull(timeRange64);
        org.junit.Assert.assertNotNull(calibrationCheck65);
        org.junit.Assert.assertNotNull(fieldVisitDescriptionListServiceRequest67);
    }

    @Test
    public void test53040() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest106.test53040");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutObservedProperty putObservedProperty0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutObservedProperty();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity quantity1 = putObservedProperty0.LowerLimit;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutObservedProperty putObservedProperty3 = putObservedProperty0.setDescription("");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisType analysisType4 = putObservedProperty0.AnalysisType;
        putObservedProperty0.Name = "/AQUARIUS";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity quantity7 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Unit unit8 = null;
        quantity7.Unit = unit8;
        java.lang.Double double10 = quantity7.Value;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity quantity12 = quantity7.setValue((java.lang.Double) (-1.0d));
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutObservedProperty putObservedProperty13 = putObservedProperty0.setUpperLimit(quantity12);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservationV2 postObservationV2_14 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservationV2();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabInstruction labInstruction15 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservationV2 postObservationV2_16 = postObservationV2_14.setLabInstruction(labInstruction15);
        java.lang.String str17 = postObservationV2_16.MediumSubdivision;
        java.lang.String str18 = postObservationV2_16.getComment();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DataClassificationType dataClassificationType19 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DataClassificationType.FIELD_RESULT;
        postObservationV2_16.DataClassification = dataClassificationType19;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails21 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails23 = labResultDetails21.setAnalysisComment("/AQUARIUS/Acquisition/v2");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails25 = labResultDetails21.setPreparationMethod("https");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes26 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails27 = labResultDetails21.setAuditAttributes(auditAttributes26);
        postObservationV2_16.LabResultDetails = labResultDetails27;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabInstruction labInstruction29 = postObservationV2_16.LabInstruction;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethodSimple analysisMethodSimple30 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethodSimple();
        java.lang.String str31 = analysisMethodSimple30.getId();
        java.lang.String str32 = analysisMethodSimple30.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservationV2 postObservationV2_33 = postObservationV2_16.setAnalysisMethod(analysisMethodSimple30);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostSamplingLocation postSamplingLocation34 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostSamplingLocation();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostSamplingLocation postSamplingLocation36 = postSamplingLocation34.setCustomId("hi!");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Address address37 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostSamplingLocation postSamplingLocation38 = postSamplingLocation34.setAddress(address37);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutObservedProperty putObservedProperty39 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutObservedProperty();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultType resultType40 = null;
        putObservedProperty39.ResultType = resultType40;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostAnalysisMethod postAnalysisMethod42 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostAnalysisMethod();
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple> importHistoryEventSimpleList43 = postAnalysisMethod42.ImportHistoryEventSimples;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostAnalysisMethod postAnalysisMethod45 = postAnalysisMethod42.setDescription("https");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostAnalysisMethod postAnalysisMethod47 = postAnalysisMethod42.setName("hi!:///AQUARIUS/Provisioning/v1");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservedProperty postObservedProperty48 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservedProperty();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UnitGroup unitGroup49 = postObservedProperty48.UnitGroup;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple[] importHistoryEventSimpleArray50 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple> importHistoryEventSimpleList51 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple>();
        boolean boolean52 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple>) importHistoryEventSimpleList51, importHistoryEventSimpleArray50);
        postObservedProperty48.ImportHistoryEventSimples = importHistoryEventSimpleList51;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostAnalysisMethod postAnalysisMethod54 = postAnalysisMethod42.setImportHistoryEventSimples((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple>) importHistoryEventSimpleList51);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutObservedProperty putObservedProperty55 = putObservedProperty39.setImportHistoryEventSimples((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple>) importHistoryEventSimpleList51);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostSamplingLocation postSamplingLocation56 = postSamplingLocation38.setImportHistoryEventSimples((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple>) importHistoryEventSimpleList51);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservationV2 postObservationV2_57 = postObservationV2_16.setImportHistoryEventSimples((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple>) importHistoryEventSimpleList51);
        postObservationV2_57.MediumSubdivision = "multipart/form-data; boundary=****f2ce0d54-dac7-4cd0-b74f-1024089261f9****";
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple> importHistoryEventSimpleList60 = postObservationV2_57.getImportHistoryEventSimples();
        putObservedProperty0.ImportHistoryEventSimples = importHistoryEventSimpleList60;
        org.junit.Assert.assertNull(quantity1);
        org.junit.Assert.assertNotNull(putObservedProperty3);
        org.junit.Assert.assertNull(analysisType4);
        org.junit.Assert.assertNull(double10);
        org.junit.Assert.assertNotNull(quantity12);
        org.junit.Assert.assertNotNull(putObservedProperty13);
        org.junit.Assert.assertNotNull(postObservationV2_16);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertTrue("'" + dataClassificationType19 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DataClassificationType.FIELD_RESULT + "'", dataClassificationType19.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DataClassificationType.FIELD_RESULT));
        org.junit.Assert.assertNotNull(labResultDetails23);
        org.junit.Assert.assertNotNull(labResultDetails25);
        org.junit.Assert.assertNotNull(labResultDetails27);
        org.junit.Assert.assertNull(labInstruction29);
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertNotNull(postObservationV2_33);
        org.junit.Assert.assertNotNull(postSamplingLocation36);
        org.junit.Assert.assertNotNull(postSamplingLocation38);
        org.junit.Assert.assertNull(importHistoryEventSimpleList43);
        org.junit.Assert.assertNotNull(postAnalysisMethod45);
        org.junit.Assert.assertNotNull(postAnalysisMethod47);
        org.junit.Assert.assertNull(unitGroup49);
        org.junit.Assert.assertNotNull(importHistoryEventSimpleArray50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(postAnalysisMethod54);
        org.junit.Assert.assertNotNull(putObservedProperty55);
        org.junit.Assert.assertNotNull(postSamplingLocation56);
        org.junit.Assert.assertNotNull(postObservationV2_57);
        org.junit.Assert.assertNotNull(importHistoryEventSimpleList60);
    }

    @Test
    public void test53041() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest106.test53041");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.GetLocationDatum getLocationDatum0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.GetLocationDatum();
        java.lang.Object obj1 = getLocationDatum0.getResponseType();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.GetLocationDatum getLocationDatum3 = getLocationDatum0.setLocationUniqueId("yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSSSSSZZZZZ");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.GetLocationDatum getLocationDatum5 = getLocationDatum3.setLocationUniqueId("0001-01-01T00:00:00.000Z");
        org.junit.Assert.assertNotNull(obj1);
        org.junit.Assert.assertEquals(obj1.toString(), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning$LocationDatumResponse");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj1), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning$LocationDatumResponse");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj1), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning$LocationDatumResponse");
        org.junit.Assert.assertNotNull(getLocationDatum3);
        org.junit.Assert.assertNotNull(getLocationDatum5);
    }

    @Test
    public void test53042() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest106.test53042");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ExtendedAttribute extendedAttribute0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ExtendedAttribute();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ExtendedAttribute extendedAttribute2 = extendedAttribute0.setName("/AQUARIUS/Provisioning/v1");
        extendedAttribute0.UniqueId = "multipart/form-data; boundary=****bbcf5f9e-6ccf-4b63-91ab-6e645caf02af****";
        extendedAttribute0.Type = "multipart/form-data; boundary=****26835278-3e68-484a-a157-468aab2e69a2****";
        java.lang.Object obj7 = extendedAttribute0.getValue();
        org.junit.Assert.assertNotNull(extendedAttribute2);
        org.junit.Assert.assertNull(obj7);
    }

    @Test
    public void test53043() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest106.test53043");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutFieldVisit putFieldVisit0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutFieldVisit();
        putFieldVisit0.Notes = "MinDuration";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutFieldVisit putFieldVisit3 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutFieldVisit();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity[] plannedActivityArray4 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity> plannedActivityList5 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity>();
        boolean boolean6 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity>) plannedActivityList5, plannedActivityArray4);
        putFieldVisit3.PlannedActivities = plannedActivityList5;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutFieldVisit putFieldVisit8 = putFieldVisit0.setPlannedActivities((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity>) plannedActivityList5);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ProjectSimple projectSimple9 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ProjectSimple();
        java.lang.String str10 = projectSimple9.Name;
        java.lang.String str11 = projectSimple9.getCustomId();
        projectSimple9.CustomId = "hi!:///AQUARIUS/Provisioning/v1";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ProjectSimple projectSimple15 = projectSimple9.setId("MinDuration");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutFieldVisit putFieldVisit16 = putFieldVisit0.setProject(projectSimple9);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocation samplingLocation17 = putFieldVisit16.getSamplingLocation();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutFieldVisit putFieldVisit18 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutFieldVisit();
        putFieldVisit18.Notes = "MinDuration";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutFieldVisit putFieldVisit21 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutFieldVisit();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity[] plannedActivityArray22 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity> plannedActivityList23 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity>) plannedActivityList23, plannedActivityArray22);
        putFieldVisit21.PlannedActivities = plannedActivityList23;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutFieldVisit putFieldVisit26 = putFieldVisit18.setPlannedActivities((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity>) plannedActivityList23);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails27 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails29 = labResultDetails27.setAnalysisComment("/AQUARIUS/Acquisition/v2");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes30 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails31 = labResultDetails29.setAuditAttributes(auditAttributes30);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutFieldVisit putFieldVisit32 = putFieldVisit18.setAuditAttributes(auditAttributes30);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty observedProperty33 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty();
        observedProperty33.CasNumber = "MinDuration";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutDetectioncondition putDetectioncondition36 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutDetectioncondition();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes37 = putDetectioncondition36.getAuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutDetectioncondition putDetectioncondition39 = putDetectioncondition36.setCustomId("http");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivity samplingPlanPlannedActivity40 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivity();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes41 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivity samplingPlanPlannedActivity42 = samplingPlanPlannedActivity40.setAuditAttributes(auditAttributes41);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes43 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes45 = auditAttributes43.setCreationUserProfileId("'.'SSSSSSS");
        samplingPlanPlannedActivity42.AuditAttributes = auditAttributes43;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes47 = samplingPlanPlannedActivity42.AuditAttributes;
        putDetectioncondition36.AuditAttributes = auditAttributes47;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty observedProperty49 = observedProperty33.setAuditAttributes(auditAttributes47);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutFieldVisit putFieldVisit50 = putFieldVisit18.setAuditAttributes(auditAttributes47);
        putFieldVisit18.Participants = "2021.8.9990";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ProjectSimple projectSimple53 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ProjectSimple();
        java.lang.String str54 = projectSimple53.Name;
        java.lang.String str55 = projectSimple53.getCustomId();
        java.lang.String str56 = projectSimple53.getCustomId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ProjectSimple projectSimple58 = projectSimple53.setName("9999-12-31T23:59:59.9999999Z://2021.4.62.0");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutFieldVisit putFieldVisit59 = putFieldVisit18.setProject(projectSimple58);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutFieldVisit putFieldVisit60 = putFieldVisit16.setProject(projectSimple58);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ProjectSimple projectSimple61 = putFieldVisit16.Project;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlan samplingPlan62 = putFieldVisit16.SamplingPlan;
        org.junit.Assert.assertNotNull(plannedActivityArray4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(putFieldVisit8);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNotNull(projectSimple15);
        org.junit.Assert.assertNotNull(putFieldVisit16);
        org.junit.Assert.assertNull(samplingLocation17);
        org.junit.Assert.assertNotNull(plannedActivityArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(putFieldVisit26);
        org.junit.Assert.assertNotNull(labResultDetails29);
        org.junit.Assert.assertNotNull(labResultDetails31);
        org.junit.Assert.assertNotNull(putFieldVisit32);
        org.junit.Assert.assertNull(auditAttributes37);
        org.junit.Assert.assertNotNull(putDetectioncondition39);
        org.junit.Assert.assertNotNull(samplingPlanPlannedActivity42);
        org.junit.Assert.assertNotNull(auditAttributes45);
        org.junit.Assert.assertNotNull(auditAttributes47);
        org.junit.Assert.assertNotNull(observedProperty49);
        org.junit.Assert.assertNotNull(putFieldVisit50);
        org.junit.Assert.assertNull(str54);
        org.junit.Assert.assertNull(str55);
        org.junit.Assert.assertNull(str56);
        org.junit.Assert.assertNotNull(projectSimple58);
        org.junit.Assert.assertNotNull(putFieldVisit59);
        org.junit.Assert.assertNotNull(putFieldVisit60);
        org.junit.Assert.assertNotNull(projectSimple61);
        org.junit.Assert.assertNull(samplingPlan62);
    }

    @Test
    public void test53044() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest106.test53044");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutFieldVisit putFieldVisit0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutFieldVisit();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity[] plannedActivityArray1 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity> plannedActivityList2 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity>) plannedActivityList2, plannedActivityArray1);
        putFieldVisit0.PlannedActivities = plannedActivityList2;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment5 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment();
        java.lang.String str6 = domainObjectAttachment5.getId();
        java.lang.String str7 = domainObjectAttachment5.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Attachment attachment8 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment9 = domainObjectAttachment5.setAttachment(attachment8);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment10 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment();
        java.lang.String str11 = domainObjectAttachment10.getId();
        java.lang.String str12 = domainObjectAttachment10.getId();
        domainObjectAttachment10.Id = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment16 = domainObjectAttachment10.setId("hi!");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment17 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment();
        java.lang.String str18 = domainObjectAttachment17.getId();
        java.lang.String str19 = domainObjectAttachment17.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Attachment attachment20 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment21 = domainObjectAttachment17.setAttachment(attachment20);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment22 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment();
        java.lang.String str23 = domainObjectAttachment22.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment24 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment();
        java.lang.String str25 = domainObjectAttachment24.getId();
        java.lang.String str26 = domainObjectAttachment24.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Attachment attachment27 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment28 = domainObjectAttachment24.setAttachment(attachment27);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment29 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment();
        java.lang.String str30 = domainObjectAttachment29.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment[] domainObjectAttachmentArray31 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment[] { domainObjectAttachment5, domainObjectAttachment10, domainObjectAttachment17, domainObjectAttachment22, domainObjectAttachment24, domainObjectAttachment29 };
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment> domainObjectAttachmentList32 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment>();
        boolean boolean33 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment>) domainObjectAttachmentList32, domainObjectAttachmentArray31);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutFieldVisit putFieldVisit34 = putFieldVisit0.setAttachments((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment>) domainObjectAttachmentList32);
        java.time.OffsetDateTime offsetDateTime35 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutFieldVisit putFieldVisit36 = putFieldVisit0.setEndTime(offsetDateTime35);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocation samplingLocation37 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocation();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricConfiguration metricConfiguration38 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricConfiguration();
        java.lang.String str39 = metricConfiguration38.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty observedProperty40 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty();
        observedProperty40.CasNumber = "MinDuration";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricConfiguration metricConfiguration43 = metricConfiguration38.setObservedProperty(observedProperty40);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultType resultType44 = observedProperty40.ResultType;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservedProperty postObservedProperty45 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservedProperty();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UnitGroup unitGroup46 = postObservedProperty45.UnitGroup;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity quantity47 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Unit unit48 = null;
        quantity47.Unit = unit48;
        postObservedProperty45.LowerLimit = quantity47;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity quantity51 = postObservedProperty45.LowerLimit;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Unit unit52 = quantity51.Unit;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty observedProperty53 = observedProperty40.setUpperLimit(quantity51);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocation samplingLocation54 = samplingLocation37.setElevation(quantity51);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutFieldVisit putFieldVisit55 = putFieldVisit36.setSamplingLocation(samplingLocation37);
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple> importHistoryEventSimpleList56 = samplingLocation37.ImportHistoryEventSimples;
        java.lang.String str57 = samplingLocation37.Latitude;
        java.lang.String str58 = samplingLocation37.Name;
        org.junit.Assert.assertNotNull(plannedActivityArray1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(domainObjectAttachment9);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(domainObjectAttachment16);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertNotNull(domainObjectAttachment21);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertNotNull(domainObjectAttachment28);
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertNotNull(domainObjectAttachmentArray31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(putFieldVisit34);
        org.junit.Assert.assertNotNull(putFieldVisit36);
        org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertNotNull(metricConfiguration43);
        org.junit.Assert.assertNull(resultType44);
        org.junit.Assert.assertNull(unitGroup46);
        org.junit.Assert.assertNotNull(quantity51);
        org.junit.Assert.assertNull(unit52);
        org.junit.Assert.assertNotNull(observedProperty53);
        org.junit.Assert.assertNotNull(samplingLocation54);
        org.junit.Assert.assertNotNull(putFieldVisit55);
        org.junit.Assert.assertNull(importHistoryEventSimpleList56);
        org.junit.Assert.assertNull(str57);
        org.junit.Assert.assertNull(str58);
    }

    @Test
    public void test53045() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest106.test53045");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutActivity putActivity0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutActivity();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity quantity1 = null;
        putActivity0.Depth = quantity1;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricResult[] metricResultArray3 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricResult[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricResult> metricResultList4 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricResult>();
        boolean boolean5 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricResult>) metricResultList4, metricResultArray3);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutActivity putActivity6 = putActivity0.setMetricResults((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricResult>) metricResultList4);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ActivityWithDetailsType activityWithDetailsType7 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ActivityWithDetailsType.REPLICATE;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutActivity putActivity8 = putActivity0.setType(activityWithDetailsType7);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes9 = putActivity8.AuditAttributes;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocation samplingLocation10 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocation();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricConfiguration metricConfiguration11 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricConfiguration();
        java.lang.String str12 = metricConfiguration11.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty observedProperty13 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty();
        observedProperty13.CasNumber = "MinDuration";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricConfiguration metricConfiguration16 = metricConfiguration11.setObservedProperty(observedProperty13);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultType resultType17 = observedProperty13.ResultType;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservedProperty postObservedProperty18 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservedProperty();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UnitGroup unitGroup19 = postObservedProperty18.UnitGroup;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity quantity20 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Unit unit21 = null;
        quantity20.Unit = unit21;
        postObservedProperty18.LowerLimit = quantity20;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity quantity24 = postObservedProperty18.LowerLimit;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Unit unit25 = quantity24.Unit;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty observedProperty26 = observedProperty13.setUpperLimit(quantity24);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocation samplingLocation27 = samplingLocation10.setElevation(quantity24);
        java.lang.Double double28 = quantity24.getValue();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutActivity putActivity29 = putActivity8.setDepth(quantity24);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation30 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedFieldResult plannedFieldResult31 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation32 = observation30.setPlannedFieldResult(plannedFieldResult31);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabInstruction labInstruction33 = null;
        observation32.LabInstruction = labInstruction33;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationStatistics observationStatistics35 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation36 = observation32.setStatistics(observationStatistics35);
        java.time.OffsetDateTime offsetDateTime37 = observation36.getResultTime();
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple> importHistoryEventSimpleList38 = observation36.ImportHistoryEventSimples;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation39 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Device device40 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Device();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Device device42 = device40.setType("/AQUARIUS/Acquisition/v2");
        device42.Description = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSSSSSZZZZZ";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation45 = observation39.setDevice(device42);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation46 = observation36.setDevice(device42);
        java.lang.String str47 = device42.getType();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutActivity putActivity48 = putActivity29.setDevice(device42);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Device device50 = device42.setDescription("multipart/form-data; boundary=****a6346bd6-b0e7-4290-a612-1b1730df8677****");
        org.junit.Assert.assertNotNull(metricResultArray3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(putActivity6);
        org.junit.Assert.assertTrue("'" + activityWithDetailsType7 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ActivityWithDetailsType.REPLICATE + "'", activityWithDetailsType7.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ActivityWithDetailsType.REPLICATE));
        org.junit.Assert.assertNotNull(putActivity8);
        org.junit.Assert.assertNull(auditAttributes9);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(metricConfiguration16);
        org.junit.Assert.assertNull(resultType17);
        org.junit.Assert.assertNull(unitGroup19);
        org.junit.Assert.assertNotNull(quantity24);
        org.junit.Assert.assertNull(unit25);
        org.junit.Assert.assertNotNull(observedProperty26);
        org.junit.Assert.assertNotNull(samplingLocation27);
        org.junit.Assert.assertNull(double28);
        org.junit.Assert.assertNotNull(putActivity29);
        org.junit.Assert.assertNotNull(observation32);
        org.junit.Assert.assertNotNull(observation36);
        org.junit.Assert.assertNull(offsetDateTime37);
        org.junit.Assert.assertNull(importHistoryEventSimpleList38);
        org.junit.Assert.assertNotNull(device42);
        org.junit.Assert.assertNotNull(observation45);
        org.junit.Assert.assertNotNull(observation46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "/AQUARIUS/Acquisition/v2" + "'", str47, "/AQUARIUS/Acquisition/v2");
        org.junit.Assert.assertNotNull(putActivity48);
        org.junit.Assert.assertNotNull(device50);
    }

    @Test
    public void test53046() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest106.test53046");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutObservationV2 putObservationV2_0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutObservationV2();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty observedProperty1 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutObservationV2 putObservationV2_2 = putObservationV2_0.setObservedProperty(observedProperty1);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Activity activity3 = putObservationV2_2.Activity;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DataClassificationType dataClassificationType4 = putObservationV2_2.getDataClassification();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.CategoricalResult categoricalResult5 = putObservationV2_2.CategoricalResult;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Specimen specimen6 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutObservationV2 putObservationV2_7 = putObservationV2_2.setSpecimen(specimen6);
        java.time.OffsetDateTime offsetDateTime8 = putObservationV2_2.getResultTime();
        java.lang.String str9 = putObservationV2_2.getMediumSubdivision();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultStatus resultStatus10 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultStatus();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultStatusSystemCodeType resultStatusSystemCodeType11 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultStatusSystemCodeType.PRELIMINARY;
        resultStatus10.SystemCode = resultStatusSystemCodeType11;
        resultStatus10.CustomId = "-PT87591240H";
        resultStatus10.CustomId = "https";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutObservationV2 putObservationV2_17 = putObservationV2_2.setResultStatus(resultStatus10);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultStatusSystemCodeType resultStatusSystemCodeType18 = resultStatus10.SystemCode;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation19 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedFieldResult plannedFieldResult20 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation21 = observation19.setPlannedFieldResult(plannedFieldResult20);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabInstruction labInstruction22 = null;
        observation21.LabInstruction = labInstruction22;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.CollectionMethod collectionMethod24 = observation21.CollectionMethod;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.NullMeasureQualifier nullMeasureQualifier25 = null;
        observation21.NullMeasureQualifier = nullMeasureQualifier25;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DataClassificationType dataClassificationType27 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DataClassificationType.SURROGATE_RESULT;
        observation21.DataClassification = dataClassificationType27;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.NumericResult numericResult29 = observation21.getNumericResult();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultStatus resultStatus30 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultStatus();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultStatusSystemCodeType resultStatusSystemCodeType31 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultStatusSystemCodeType.PRELIMINARY;
        resultStatus30.SystemCode = resultStatusSystemCodeType31;
        resultStatus30.CustomId = "-PT87591240H";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation35 = observation21.setResultStatus(resultStatus30);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultStatusSystemCodeType resultStatusSystemCodeType36 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultStatusSystemCodeType.REQUESTED;
        resultStatus30.SystemCode = resultStatusSystemCodeType36;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultStatusSystemCodeType resultStatusSystemCodeType38 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultStatusSystemCodeType.PRELIMINARY;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultStatus resultStatus39 = resultStatus30.setSystemCode(resultStatusSystemCodeType38);
        resultStatus10.SystemCode = resultStatusSystemCodeType38;
        org.junit.Assert.assertNotNull(putObservationV2_2);
        org.junit.Assert.assertNull(activity3);
        org.junit.Assert.assertNull(dataClassificationType4);
        org.junit.Assert.assertNull(categoricalResult5);
        org.junit.Assert.assertNotNull(putObservationV2_7);
        org.junit.Assert.assertNull(offsetDateTime8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + resultStatusSystemCodeType11 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultStatusSystemCodeType.PRELIMINARY + "'", resultStatusSystemCodeType11.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultStatusSystemCodeType.PRELIMINARY));
        org.junit.Assert.assertNotNull(putObservationV2_17);
        org.junit.Assert.assertTrue("'" + resultStatusSystemCodeType18 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultStatusSystemCodeType.PRELIMINARY + "'", resultStatusSystemCodeType18.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultStatusSystemCodeType.PRELIMINARY));
        org.junit.Assert.assertNotNull(observation21);
        org.junit.Assert.assertNull(collectionMethod24);
        org.junit.Assert.assertTrue("'" + dataClassificationType27 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DataClassificationType.SURROGATE_RESULT + "'", dataClassificationType27.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DataClassificationType.SURROGATE_RESULT));
        org.junit.Assert.assertNull(numericResult29);
        org.junit.Assert.assertTrue("'" + resultStatusSystemCodeType31 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultStatusSystemCodeType.PRELIMINARY + "'", resultStatusSystemCodeType31.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultStatusSystemCodeType.PRELIMINARY));
        org.junit.Assert.assertNotNull(observation35);
        org.junit.Assert.assertTrue("'" + resultStatusSystemCodeType36 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultStatusSystemCodeType.REQUESTED + "'", resultStatusSystemCodeType36.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultStatusSystemCodeType.REQUESTED));
        org.junit.Assert.assertTrue("'" + resultStatusSystemCodeType38 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultStatusSystemCodeType.PRELIMINARY + "'", resultStatusSystemCodeType38.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultStatusSystemCodeType.PRELIMINARY));
        org.junit.Assert.assertNotNull(resultStatus39);
    }

    @Test
    public void test53047() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest106.test53047");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutAttachment putAttachment0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutAttachment();
        putAttachment0.Latitude = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ";
        java.lang.String str3 = putAttachment0.Comment;
        java.lang.String str4 = putAttachment0.Resolution;
        java.lang.String str5 = putAttachment0.getLatitude();
        putAttachment0.FileName = "http://MaxDurationhttp/json/reply/Float";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributesFull auditAttributesFull8 = putAttachment0.getAuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributesFull auditAttributesFull9 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributesFull();
        java.lang.String str10 = auditAttributesFull9.getModificationUserProfileId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UserProfile userProfile11 = auditAttributesFull9.getModificationUserProfile();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UserProfile userProfile12 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributesFull auditAttributesFull13 = auditAttributesFull9.setModificationUserProfile(userProfile12);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UserProfile userProfile14 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributesFull auditAttributesFull15 = auditAttributesFull13.setModificationUserProfile(userProfile14);
        java.time.OffsetDateTime offsetDateTime16 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributesFull auditAttributesFull17 = auditAttributesFull15.setModificationTime(offsetDateTime16);
        java.time.OffsetDateTime offsetDateTime18 = null;
        auditAttributesFull17.ModificationTime = offsetDateTime18;
        java.time.OffsetDateTime offsetDateTime20 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributesFull auditAttributesFull21 = auditAttributesFull17.setCreationTime(offsetDateTime20);
        java.time.OffsetDateTime offsetDateTime22 = null;
        auditAttributesFull21.CreationTime = offsetDateTime22;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutAttachment putAttachment24 = putAttachment0.setAuditAttributes(auditAttributesFull21);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ" + "'", str5, "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ");
        org.junit.Assert.assertNull(auditAttributesFull8);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNull(userProfile11);
        org.junit.Assert.assertNotNull(auditAttributesFull13);
        org.junit.Assert.assertNotNull(auditAttributesFull15);
        org.junit.Assert.assertNotNull(auditAttributesFull17);
        org.junit.Assert.assertNotNull(auditAttributesFull21);
        org.junit.Assert.assertNotNull(putAttachment24);
    }

    @Test
    public void test53048() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest106.test53048");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutStandard putStandard0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutStandard();
        putStandard0.Active = true;
        java.lang.String str3 = putStandard0.getCustomId();
        java.lang.String str4 = putStandard0.getName();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutAnalysisMethod putAnalysisMethod5 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes6 = putAnalysisMethod5.getAuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationMinimal observationMinimal7 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationMinimal();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenNestedInActivity specimenNestedInActivity8 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationMinimal observationMinimal9 = observationMinimal7.setSpecimen(specimenNestedInActivity8);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty observedProperty10 = observationMinimal9.ObservedProperty;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.CategoricalResult categoricalResult11 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.CategoricalResult();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.CategoricalValue categoricalValue12 = categoricalResult11.getFixedValue();
        observationMinimal9.CategoricalResult = categoricalResult11;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.CategoricalResult categoricalResult14 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.CategoricalResult();
        categoricalResult14.Value = "'.'SSSSSSS";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.CategoricalValue categoricalValue17 = categoricalResult14.FixedValue;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.NullMeasureQualifier nullMeasureQualifier18 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.NullMeasureQualifier();
        categoricalResult14.NullMeasureQualifier = nullMeasureQualifier18;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.CategoricalResult categoricalResult20 = categoricalResult11.setNullMeasureQualifier(nullMeasureQualifier18);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.NullMeasureQualifier nullMeasureQualifier21 = categoricalResult11.NullMeasureQualifier;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutAnalyticalGroup putAnalyticalGroup22 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutAnalyticalGroup();
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem> analyticalGroupItemList23 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutAnalyticalGroup putAnalyticalGroup24 = putAnalyticalGroup22.setAnalyticalGroupItems(analyticalGroupItemList23);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails25 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails27 = labResultDetails25.setAnalysisComment("/AQUARIUS/Acquisition/v2");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlan samplingPlan28 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlan();
        samplingPlan28.SamplingLocationGroupSelectionTypeRandomCount = 0;
        java.time.OffsetDateTime offsetDateTime31 = samplingPlan28.StartDate;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutUnitGroupWithUnit putUnitGroupWithUnit32 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutUnitGroupWithUnit();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutUnitGroupWithUnit putUnitGroupWithUnit34 = putUnitGroupWithUnit32.setId("yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UnitGroupSystemCodeType unitGroupSystemCodeType35 = putUnitGroupWithUnit32.SystemCode;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutAccessGroup putAccessGroup36 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutAccessGroup();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivity samplingPlanPlannedActivity37 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivity();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes38 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivity samplingPlanPlannedActivity39 = samplingPlanPlannedActivity37.setAuditAttributes(auditAttributes38);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes40 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes42 = auditAttributes40.setCreationUserProfileId("'.'SSSSSSS");
        samplingPlanPlannedActivity39.AuditAttributes = auditAttributes40;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes44 = samplingPlanPlannedActivity39.AuditAttributes;
        putAccessGroup36.AuditAttributes = auditAttributes44;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutUnitGroupWithUnit putUnitGroupWithUnit46 = putUnitGroupWithUnit32.setAuditAttributes(auditAttributes44);
        samplingPlan28.AuditAttributes = auditAttributes44;
        java.time.OffsetDateTime offsetDateTime48 = null;
        auditAttributes44.ModificationTime = offsetDateTime48;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails50 = labResultDetails25.setAuditAttributes(auditAttributes44);
        putAnalyticalGroup24.AuditAttributes = auditAttributes44;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.NullMeasureQualifier nullMeasureQualifier52 = nullMeasureQualifier21.setAuditAttributes(auditAttributes44);
        putAnalysisMethod5.AuditAttributes = auditAttributes44;
        putStandard0.AuditAttributes = auditAttributes44;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardDefinition standardDefinition55 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardDefinition();
        java.lang.String str56 = standardDefinition55.Description;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSchedule putSchedule57 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSchedule();
        java.time.OffsetDateTime offsetDateTime58 = putSchedule57.StartDate;
        java.time.OffsetDateTime offsetDateTime59 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSchedule putSchedule60 = putSchedule57.setEndDate(offsetDateTime59);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes61 = putSchedule60.AuditAttributes;
        java.time.OffsetDateTime offsetDateTime62 = null;
        putSchedule60.LastGenerationDate = offsetDateTime62;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.RecurrenceDayMonthlyType recurrenceDayMonthlyType64 = putSchedule60.RecurrenceDayMonthly;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedFieldResult plannedFieldResult65 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedFieldResult();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes66 = plannedFieldResult65.AuditAttributes;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails67 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails69 = labResultDetails67.setAnalysisComment("/AQUARIUS/Acquisition/v2");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes70 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails71 = labResultDetails69.setAuditAttributes(auditAttributes70);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedFieldResult plannedFieldResult72 = plannedFieldResult65.setAuditAttributes(auditAttributes70);
        putSchedule60.AuditAttributes = auditAttributes70;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardDefinition standardDefinition74 = standardDefinition55.setAuditAttributes(auditAttributes70);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardDefinition standardDefinition76 = standardDefinition55.setDescription("yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardDefinition standardDefinition77 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardDefinition();
        standardDefinition77.Active = false;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardDefinition standardDefinition81 = standardDefinition77.setCustomId("2021.4.62.0");
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationSimple> samplingLocationSimpleList82 = standardDefinition81.getSamplingLocations();
        com.aquaticinformatics.aquarius.sdk.samples.Interval interval83 = standardDefinition81.ApplicabilityRange;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardDefinition standardDefinition85 = standardDefinition81.setActive((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostStandard postStandard86 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostStandard();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostStandard postStandard88 = postStandard86.setCustomId("/AQUARIUS/Provisioning/v1");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostStandard postStandard90 = postStandard88.setId("/AQUARIUS/Acquisition/v2://9999-12-31T23:59:59.999Z");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationStandard[] observationStandardArray91 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationStandard[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationStandard> observationStandardList92 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationStandard>();
        boolean boolean93 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationStandard>) observationStandardList92, observationStandardArray91);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostStandard postStandard94 = postStandard90.setObservationStandards((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationStandard>) observationStandardList92);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardDefinition standardDefinition95 = standardDefinition81.setObservationStandards((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationStandard>) observationStandardList92);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardDefinition standardDefinition96 = standardDefinition76.setObservationStandards((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationStandard>) observationStandardList92);
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationStandard> observationStandardList97 = standardDefinition76.ObservationStandards;
        putStandard0.ObservationStandards = observationStandardList97;
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(auditAttributes6);
        org.junit.Assert.assertNotNull(observationMinimal9);
        org.junit.Assert.assertNull(observedProperty10);
        org.junit.Assert.assertNull(categoricalValue12);
        org.junit.Assert.assertNull(categoricalValue17);
        org.junit.Assert.assertNotNull(categoricalResult20);
        org.junit.Assert.assertNotNull(nullMeasureQualifier21);
        org.junit.Assert.assertNotNull(putAnalyticalGroup24);
        org.junit.Assert.assertNotNull(labResultDetails27);
        org.junit.Assert.assertNull(offsetDateTime31);
        org.junit.Assert.assertNotNull(putUnitGroupWithUnit34);
        org.junit.Assert.assertNull(unitGroupSystemCodeType35);
        org.junit.Assert.assertNotNull(samplingPlanPlannedActivity39);
        org.junit.Assert.assertNotNull(auditAttributes42);
        org.junit.Assert.assertNotNull(auditAttributes44);
        org.junit.Assert.assertNotNull(putUnitGroupWithUnit46);
        org.junit.Assert.assertNotNull(labResultDetails50);
        org.junit.Assert.assertNotNull(nullMeasureQualifier52);
        org.junit.Assert.assertNull(str56);
        org.junit.Assert.assertNull(offsetDateTime58);
        org.junit.Assert.assertNotNull(putSchedule60);
        org.junit.Assert.assertNull(auditAttributes61);
        org.junit.Assert.assertNull(recurrenceDayMonthlyType64);
        org.junit.Assert.assertNull(auditAttributes66);
        org.junit.Assert.assertNotNull(labResultDetails69);
        org.junit.Assert.assertNotNull(labResultDetails71);
        org.junit.Assert.assertNotNull(plannedFieldResult72);
        org.junit.Assert.assertNotNull(standardDefinition74);
        org.junit.Assert.assertNotNull(standardDefinition76);
        org.junit.Assert.assertNotNull(standardDefinition81);
        org.junit.Assert.assertNull(samplingLocationSimpleList82);
        org.junit.Assert.assertNull(interval83);
        org.junit.Assert.assertNotNull(standardDefinition85);
        org.junit.Assert.assertNotNull(postStandard88);
        org.junit.Assert.assertNotNull(postStandard90);
        org.junit.Assert.assertNotNull(observationStandardArray91);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertNotNull(postStandard94);
        org.junit.Assert.assertNotNull(standardDefinition95);
        org.junit.Assert.assertNotNull(standardDefinition96);
        org.junit.Assert.assertNotNull(observationStandardList97);
    }

    @Test
    public void test53049() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest106.test53049");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.PostVisitFileToVisit postVisitFileToVisit0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.PostVisitFileToVisit();
        java.lang.String str1 = postVisitFileToVisit0.getVisitIdentifier();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.IHttpFile iHttpFile2 = postVisitFileToVisit0.getFile();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.IHttpFile iHttpFile3 = null;
        postVisitFileToVisit0.File = iHttpFile3;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.IHttpFile iHttpFile5 = null;
        postVisitFileToVisit0.File = iHttpFile5;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.IHttpFile iHttpFile7 = postVisitFileToVisit0.File;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(iHttpFile2);
        org.junit.Assert.assertNull(iHttpFile7);
    }

    @Test
    public void test53050() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest106.test53050");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedFieldResult plannedFieldResult1 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation2 = observation0.setPlannedFieldResult(plannedFieldResult1);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabInstruction labInstruction3 = null;
        observation2.LabInstruction = labInstruction3;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationStatistics observationStatistics5 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation6 = observation2.setStatistics(observationStatistics5);
        java.time.OffsetDateTime offsetDateTime7 = observation6.getResultTime();
        java.time.OffsetDateTime offsetDateTime8 = null;
        observation6.ObservedTime = offsetDateTime8;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation11 = observation6.setComment("yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty observedProperty12 = null;
        observation11.ObservedProperty = observedProperty12;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.NumericResult numericResult14 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation15 = observation11.setNumericResult(numericResult14);
        observation11.Comment = "multipart/form-data; boundary=****3b079027-9343-4d29-973c-7bf16739cdb0****";
        org.junit.Assert.assertNotNull(observation2);
        org.junit.Assert.assertNotNull(observation6);
        org.junit.Assert.assertNull(offsetDateTime7);
        org.junit.Assert.assertNotNull(observation11);
        org.junit.Assert.assertNotNull(observation15);
    }

    @Test
    public void test53051() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest106.test53051");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.InputPart inputPart0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.InputPart();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.InterpolationType interpolationType1 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.InterpolationType.PrecedingConstant;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.InputPart inputPart2 = inputPart0.setHeaders((java.lang.Object) interpolationType1);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MediaType mediaType3 = inputPart0.getMediaType();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MediaType mediaType4 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MediaType();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.InputPart inputPart5 = inputPart0.setMediaType(mediaType4);
        java.lang.String str6 = mediaType4.getSubtype();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetSamplingLocations getSamplingLocations7 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetSamplingLocations();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ReportListServiceRequest reportListServiceRequest8 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ReportListServiceRequest();
        reportListServiceRequest8.ReportTitle = "MinDuration";
        reportListServiceRequest8.LocationUniqueId = "/AQUARIUS";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportSpecimens getExportSpecimens13 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportSpecimens();
        java.util.List<java.lang.String> strList14 = getExportSpecimens13.getActivityTypes();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Qualifier qualifier15 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Qualifier();
        java.time.Instant instant16 = qualifier15.DateApplied;
        java.lang.String str17 = qualifier15.User;
        java.lang.String str18 = qualifier15.getIdentifier();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest19 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest();
        java.lang.Object obj20 = timeAlignedDataServiceRequest19.getResponseType();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse21 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant22 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse23 = locationDescriptionListServiceResponse21.setNextToken(instant22);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest24 = timeAlignedDataServiceRequest19.setQueryFrom(instant22);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Qualifier qualifier25 = qualifier15.setDateApplied(instant22);
        getExportSpecimens13.Before = instant22;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationRemark locationRemark27 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationRemark();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationRemark locationRemark29 = locationRemark27.setDescription("MaxInstant");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitDataServiceResponse fieldVisitDataServiceResponse30 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitDataServiceResponse();
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CrossSectionSurveyActivity> crossSectionSurveyActivityList31 = fieldVisitDataServiceResponse30.CrossSectionSurveyActivity;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitDataServiceResponse fieldVisitDataServiceResponse33 = fieldVisitDataServiceResponse30.setIdentifier("");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary34 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        dischargeSummary34.Reviewer = "";
        java.time.Instant instant37 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        dischargeSummary34.MeasurementTime = instant37;
        fieldVisitDataServiceResponse30.ResponseTime = instant37;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationRemark locationRemark40 = locationRemark27.setCreateTime(instant37);
        getExportSpecimens13.EndModificationTime = instant37;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ReportListServiceRequest reportListServiceRequest42 = reportListServiceRequest8.setCreatedFrom(instant37);
        getSamplingLocations7.StartModificationTime = instant37;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MediaType mediaType44 = mediaType4.setParameters((java.lang.Object) instant37);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Schedule schedule45 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Schedule();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Schedule schedule47 = schedule45.setCustomId("");
        java.time.OffsetDateTime offsetDateTime48 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Schedule schedule49 = schedule45.setStartDate(offsetDateTime48);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes50 = schedule49.getAuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes51 = schedule49.getAuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationGroup samplingLocationGroup52 = schedule49.SamplingLocationGroup;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MediaType mediaType53 = mediaType4.setParameters((java.lang.Object) schedule49);
        java.time.OffsetDateTime offsetDateTime54 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Schedule schedule55 = schedule49.setLastGenerationDate(offsetDateTime54);
        org.junit.Assert.assertTrue("'" + interpolationType1 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.InterpolationType.PrecedingConstant + "'", interpolationType1.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.InterpolationType.PrecedingConstant));
        org.junit.Assert.assertNotNull(inputPart2);
        org.junit.Assert.assertNull(mediaType3);
        org.junit.Assert.assertNotNull(inputPart5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(strList14);
        org.junit.Assert.assertNull(instant16);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNotNull(obj20);
        org.junit.Assert.assertEquals(obj20.toString(), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj20), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj20), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertNotNull(instant22);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse23);
        org.junit.Assert.assertNotNull(timeAlignedDataServiceRequest24);
        org.junit.Assert.assertNotNull(qualifier25);
        org.junit.Assert.assertNotNull(locationRemark29);
        org.junit.Assert.assertNull(crossSectionSurveyActivityList31);
        org.junit.Assert.assertNotNull(fieldVisitDataServiceResponse33);
        org.junit.Assert.assertNotNull(instant37);
        org.junit.Assert.assertNotNull(locationRemark40);
        org.junit.Assert.assertNotNull(reportListServiceRequest42);
        org.junit.Assert.assertNotNull(mediaType44);
        org.junit.Assert.assertNotNull(schedule47);
        org.junit.Assert.assertNotNull(schedule49);
        org.junit.Assert.assertNull(auditAttributes50);
        org.junit.Assert.assertNull(auditAttributes51);
        org.junit.Assert.assertNull(samplingLocationGroup52);
        org.junit.Assert.assertNotNull(mediaType53);
        org.junit.Assert.assertNotNull(schedule55);
    }

    @Test
    public void test53052() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest106.test53052");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostSpecimen postSpecimen0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostSpecimen();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes1 = postSpecimen0.AuditAttributes;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes2 = postSpecimen0.getAuditAttributes();
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation> observationList3 = postSpecimen0.getObservations();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ShippingContainer shippingContainer4 = postSpecimen0.getShippingContainer();
        java.lang.String str5 = postSpecimen0.FiltrationComment;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Laboratory laboratory6 = postSpecimen0.getLaboratory();
        org.junit.Assert.assertNull(auditAttributes1);
        org.junit.Assert.assertNull(auditAttributes2);
        org.junit.Assert.assertNull(observationList3);
        org.junit.Assert.assertNull(shippingContainer4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(laboratory6);
    }

    @Test
    public void test53053() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest106.test53053");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.FieldVisitStatistics fieldVisitStatistics0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.FieldVisitStatistics();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.FieldVisitStatistics fieldVisitStatistics2 = fieldVisitStatistics0.setVerticalProfileCount((java.lang.Integer) 10);
        java.lang.Integer int3 = fieldVisitStatistics0.getRoutineSampleCount();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.FieldVisitStatistics fieldVisitStatistics5 = fieldVisitStatistics0.setVerticalProfileCount((java.lang.Integer) 2);
        java.lang.Integer int6 = fieldVisitStatistics5.FieldResultCount;
        java.lang.Integer int7 = fieldVisitStatistics5.getQcSampleCount();
        fieldVisitStatistics5.VerticalProfileCount = 100;
        org.junit.Assert.assertNotNull(fieldVisitStatistics2);
        org.junit.Assert.assertNull(int3);
        org.junit.Assert.assertNotNull(fieldVisitStatistics5);
        org.junit.Assert.assertNull(int6);
        org.junit.Assert.assertNull(int7);
    }

    @Test
    public void test53054() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest106.test53054");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemAnalysisMethod importItemAnalysisMethod0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemAnalysisMethod();
        java.util.List<java.lang.String> strList1 = importItemAnalysisMethod0.getWarningMessages();
        java.lang.String str2 = importItemAnalysisMethod0.Input;
        java.lang.Object obj3 = importItemAnalysisMethod0.Errors;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocation putLocation4 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocation();
        java.lang.String str5 = putLocation4.LocationUniqueId;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocation putLocation7 = putLocation4.setLocationUniqueId("multipart/form-data; boundary=****59879c02-0839-4b96-bc41-a13ebb706be4****");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocation putLocation9 = putLocation4.setLocationUniqueId("/AQUARIUS/Acquisition/v2");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.LocationBase locationBase11 = putLocation4.setDescription("****231224c4-98ce-4e30-bd65-1d25287c4abe****");
        java.lang.String str12 = putLocation4.LocationName;
        importItemAnalysisMethod0.Errors = putLocation4;
        java.lang.String str14 = putLocation4.ElevationUnits;
        java.util.List<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeValue> extendedAttributeValueList15 = null;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.LocationBase locationBase16 = putLocation4.setExtendedAttributeValues(extendedAttributeValueList15);
        java.lang.String str17 = locationBase16.LocationType;
        org.junit.Assert.assertNull(strList1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(putLocation7);
        org.junit.Assert.assertNotNull(putLocation9);
        org.junit.Assert.assertNotNull(locationBase11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(locationBase16);
        org.junit.Assert.assertNull(str17);
    }

    @Test
    public void test53055() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest106.test53055");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationExportIIV2 getObservationExportIIV2_0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationExportIIV2();
        java.util.List<java.lang.String> strList1 = getObservationExportIIV2_0.getCollectionMethodIds();
        java.time.Instant instant2 = getObservationExportIIV2_0.StartModificationTime;
        java.lang.String str3 = getObservationExportIIV2_0.DetectionCondition;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SampleFractionType sampleFractionType4 = getObservationExportIIV2_0.SampleFraction;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationExportIIV2 getObservationExportIIV2_5 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationExportIIV2();
        java.util.List<java.lang.String> strList6 = getObservationExportIIV2_5.getCollectionMethodIds();
        java.lang.String str7 = getObservationExportIIV2_5.getDepthUnitCustomId();
        java.time.Instant instant8 = getObservationExportIIV2_5.EndObservedTime;
        java.time.Instant instant9 = getObservationExportIIV2_5.EndModificationTime;
        java.lang.String str10 = getObservationExportIIV2_5.DepthUnitId;
        getObservationExportIIV2_5.DetectionCondition = "multipart/form-data; boundary=****9fadde69-3f13-40c4-a87c-0f3f51c2dd35****";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportObservations getExportObservations13 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportObservations();
        java.util.List<java.lang.String> strList14 = getExportObservations13.getLabReportIds();
        java.lang.String str15 = getExportObservations13.DepthUnitCustomId;
        java.util.List<java.lang.String> strList16 = getExportObservations13.getSearch();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetChartDataV2 getChartDataV2_17 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetChartDataV2();
        java.lang.String str18 = getChartDataV2_17.getActivityCustomId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetChartDataV2 getChartDataV2_20 = getChartDataV2_17.setFilterId("");
        java.util.List<java.lang.String> strList21 = getChartDataV2_17.getIds();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExtendedAttributeDropdownlistitems getExtendedAttributeDropdownlistitems22 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExtendedAttributeDropdownlistitems();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_23 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.util.List<java.lang.String> strList24 = getObservationsV2_23.SamplingContextTagIds;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_25 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray27 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList28 = new java.util.ArrayList<java.lang.String>();
        boolean boolean29 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList28, strArray27);
        getObservationsV2_25.SpecimenIds = strList28;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags31 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray35 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList36 = new java.util.ArrayList<java.lang.String>();
        boolean boolean37 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList36, strArray35);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags38 = putLocationTags31.setTagUniqueIds(strList36);
        getObservationsV2_25.QualityControlTypes = strList36;
        getObservationsV2_23.ResultGrades = strList36;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExtendedAttributeDropdownlistitems getExtendedAttributeDropdownlistitems41 = getExtendedAttributeDropdownlistitems22.setSearch((java.util.List<java.lang.String>) strList36);
        getChartDataV2_17.ObservedPropertyIds = strList36;
        getChartDataV2_17.SpecimenName = "MinDuration";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportObservations getExportObservations45 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportObservations();
        java.util.List<java.lang.String> strList46 = getExportObservations45.getLabReportIds();
        java.lang.String str47 = getExportObservations45.DepthUnitCustomId;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetActivityTemplates getActivityTemplates48 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetActivityTemplates();
        java.lang.Object obj49 = getActivityTemplates48.getResponseType();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_50 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray52 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList53 = new java.util.ArrayList<java.lang.String>();
        boolean boolean54 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList53, strArray52);
        getObservationsV2_50.SpecimenIds = strList53;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags56 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray60 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList61 = new java.util.ArrayList<java.lang.String>();
        boolean boolean62 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList61, strArray60);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags63 = putLocationTags56.setTagUniqueIds(strList61);
        getObservationsV2_50.QualityControlTypes = strList61;
        getActivityTemplates48.Type = strList61;
        getExportObservations45.AnalyticalGroupIds = strList61;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetChartDataV2 getChartDataV2_67 = getChartDataV2_17.setAnalysisMethodIds((java.util.List<java.lang.String>) strList61);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportObservations getExportObservations68 = getExportObservations13.setAnalyticalGroupIds((java.util.List<java.lang.String>) strList61);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ReportListServiceRequest reportListServiceRequest69 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ReportListServiceRequest();
        reportListServiceRequest69.ReportTitle = "MinDuration";
        java.lang.String str72 = reportListServiceRequest69.getLocationUniqueId();
        java.time.Instant instant73 = null;
        reportListServiceRequest69.CreatedFrom = instant73;
        java.lang.String[] strArray87 = new java.lang.String[] { "https", "", "MinDuration", "/AQUARIUS/Acquisition/v2", "hi!", "", "2021.4.62.0", "MaxInstant", "http", "MinDuration", "2021.4.62.0", "/AQUARIUS" };
        java.util.ArrayList<java.lang.String> strList88 = new java.util.ArrayList<java.lang.String>();
        boolean boolean89 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList88, strArray87);
        reportListServiceRequest69.TagValues = strList88;
        getExportObservations13.AnalysisMethodSimpleIds = strList88;
        getObservationExportIIV2_5.AnalysisMethodIds = strList88;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationExportIIV2 getObservationExportIIV2_93 = getObservationExportIIV2_0.setIds((java.util.List<java.lang.String>) strList88);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationExportIIV2 getObservationExportIIV2_95 = getObservationExportIIV2_93.setDepthValue((java.lang.Double) (-1.0d));
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SampleFractionType sampleFractionType96 = getObservationExportIIV2_93.getSampleFraction();
        org.junit.Assert.assertNull(strList1);
        org.junit.Assert.assertNull(instant2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(sampleFractionType4);
        org.junit.Assert.assertNull(strList6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(instant8);
        org.junit.Assert.assertNull(instant9);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNull(strList14);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNull(strList16);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNotNull(getChartDataV2_20);
        org.junit.Assert.assertNull(strList21);
        org.junit.Assert.assertNull(strList24);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(putLocationTags38);
        org.junit.Assert.assertNotNull(getExtendedAttributeDropdownlistitems41);
        org.junit.Assert.assertNull(strList46);
        org.junit.Assert.assertNull(str47);
        org.junit.Assert.assertNotNull(obj49);
        org.junit.Assert.assertEquals(obj49.toString(), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$SearchResultActivityTemplate");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj49), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$SearchResultActivityTemplate");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj49), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$SearchResultActivityTemplate");
        org.junit.Assert.assertNotNull(strArray52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(strArray60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertNotNull(putLocationTags63);
        org.junit.Assert.assertNotNull(getChartDataV2_67);
        org.junit.Assert.assertNotNull(getExportObservations68);
        org.junit.Assert.assertNull(str72);
        org.junit.Assert.assertNotNull(strArray87);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + true + "'", boolean89 == true);
        org.junit.Assert.assertNotNull(getObservationExportIIV2_93);
        org.junit.Assert.assertNotNull(getObservationExportIIV2_95);
        org.junit.Assert.assertNull(sampleFractionType96);
    }

    @Test
    public void test53056() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest106.test53056");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity postActivity0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity();
        postActivity0.SourceActivityId = "2021.4.62.0";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity plannedActivity3 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity postActivity4 = postActivity0.setPlannedActivity(plannedActivity3);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity postActivity6 = postActivity0.setLoggerFileName("https");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFieldVisitActivityWithTemplate postFieldVisitActivityWithTemplate7 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFieldVisitActivityWithTemplate();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate8 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate();
        specimenTemplate8.CustomId = "hi!";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate11 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate12 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate();
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabInstructionTemplate> labInstructionTemplateList13 = specimenTemplate12.getLabInstructionTemplates();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate14 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate16 = specimenTemplate14.setCustomId("hi!");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate17 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate18 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate();
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabInstructionTemplate> labInstructionTemplateList19 = specimenTemplate18.LabInstructionTemplates;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate[] specimenTemplateArray20 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate[] { specimenTemplate8, specimenTemplate11, specimenTemplate12, specimenTemplate16, specimenTemplate17, specimenTemplate18 };
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate> specimenTemplateList21 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate>) specimenTemplateList21, specimenTemplateArray20);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFieldVisitActivityWithTemplate postFieldVisitActivityWithTemplate23 = postFieldVisitActivityWithTemplate7.setSpecimenTemplates((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate>) specimenTemplateList21);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity postActivity24 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity();
        postActivity24.LoggerFileName = "hi!";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity plannedActivity27 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity postActivity28 = postActivity24.setPlannedActivity(plannedActivity27);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ActivityType activityType29 = postActivity24.Type;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFieldVisitActivityWithTemplate postFieldVisitActivityWithTemplate30 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFieldVisitActivityWithTemplate();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate31 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate();
        specimenTemplate31.CustomId = "hi!";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate34 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate35 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate();
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabInstructionTemplate> labInstructionTemplateList36 = specimenTemplate35.getLabInstructionTemplates();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate37 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate39 = specimenTemplate37.setCustomId("hi!");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate40 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate41 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate();
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabInstructionTemplate> labInstructionTemplateList42 = specimenTemplate41.LabInstructionTemplates;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate[] specimenTemplateArray43 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate[] { specimenTemplate31, specimenTemplate34, specimenTemplate35, specimenTemplate39, specimenTemplate40, specimenTemplate41 };
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate> specimenTemplateList44 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate>) specimenTemplateList44, specimenTemplateArray43);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFieldVisitActivityWithTemplate postFieldVisitActivityWithTemplate46 = postFieldVisitActivityWithTemplate30.setSpecimenTemplates((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate>) specimenTemplateList44);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.CollectionMethod collectionMethod47 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.CollectionMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFieldVisitActivityWithTemplate postFieldVisitActivityWithTemplate48 = postFieldVisitActivityWithTemplate46.setCollectionMethod(collectionMethod47);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity postActivity49 = postActivity24.setCollectionMethod(collectionMethod47);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFieldVisitActivityWithTemplate postFieldVisitActivityWithTemplate50 = postFieldVisitActivityWithTemplate7.setCollectionMethod(collectionMethod47);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity postActivity51 = postActivity0.setCollectionMethod(collectionMethod47);
        java.time.OffsetDateTime offsetDateTime52 = postActivity51.getStartTime();
        org.junit.Assert.assertNotNull(postActivity4);
        org.junit.Assert.assertNotNull(postActivity6);
        org.junit.Assert.assertNull(labInstructionTemplateList13);
        org.junit.Assert.assertNotNull(specimenTemplate16);
        org.junit.Assert.assertNull(labInstructionTemplateList19);
        org.junit.Assert.assertNotNull(specimenTemplateArray20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(postFieldVisitActivityWithTemplate23);
        org.junit.Assert.assertNotNull(postActivity28);
        org.junit.Assert.assertNull(activityType29);
        org.junit.Assert.assertNull(labInstructionTemplateList36);
        org.junit.Assert.assertNotNull(specimenTemplate39);
        org.junit.Assert.assertNull(labInstructionTemplateList42);
        org.junit.Assert.assertNotNull(specimenTemplateArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(postFieldVisitActivityWithTemplate46);
        org.junit.Assert.assertNotNull(postFieldVisitActivityWithTemplate48);
        org.junit.Assert.assertNotNull(postActivity49);
        org.junit.Assert.assertNotNull(postFieldVisitActivityWithTemplate50);
        org.junit.Assert.assertNotNull(postActivity51);
        org.junit.Assert.assertNull(offsetDateTime52);
    }

    @Test
    public void test53057() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest106.test53057");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Specimen specimen0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Specimen();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Specimen specimen2 = specimen0.setFiltrationComment("9999-12-31T23:59:59.9999999Z://2021.4.62.0");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Specimen specimen4 = specimen2.setName("9999-12-31T23:59:59.9999999Z://2021.4.62.0");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Activity activity5 = specimen2.Activity;
        java.lang.Integer int6 = specimen2.getNumberOfReceivedObservations();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Specimen specimen8 = specimen2.setFiltrationComment("'.'SSSSSSS://multipart/form-data; boundary=****e0afd3ef-ab93-4371-a368-4a6f5ef58c71****");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Laboratory laboratory9 = specimen8.Laboratory;
        org.junit.Assert.assertNotNull(specimen2);
        org.junit.Assert.assertNotNull(specimen4);
        org.junit.Assert.assertNull(activity5);
        org.junit.Assert.assertNull(int6);
        org.junit.Assert.assertNotNull(specimen8);
        org.junit.Assert.assertNull(laboratory9);
    }

    @Test
    public void test53058() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest106.test53058");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DeleteActivities deleteActivities0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DeleteActivities();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutOpenIdConnectRelyingPartyConfiguration putOpenIdConnectRelyingPartyConfiguration1 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutOpenIdConnectRelyingPartyConfiguration();
        java.util.List<java.lang.String> strList2 = putOpenIdConnectRelyingPartyConfiguration1.getScopes();
        java.lang.String str3 = putOpenIdConnectRelyingPartyConfiguration1.getOptionalIssuerDiscoveryUri();
        java.lang.String str4 = putOpenIdConnectRelyingPartyConfiguration1.getOptionalIssuerDiscoveryUri();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostTag postTag5 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostTag();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_6 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray9 = new java.lang.String[] { "", "" };
        java.util.ArrayList<java.lang.String> strList10 = new java.util.ArrayList<java.lang.String>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList10, strArray9);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_12 = getObservationsV2_6.setDataClassifications((java.util.List<java.lang.String>) strList10);
        postTag5.PickListValues = strList10;
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.TagApplicability> tagApplicabilityList14 = postTag5.Applicability;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.TagRequestBase tagRequestBase16 = postTag5.setKey("");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.TagValueType tagValueType17 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.TagValueType.PickList;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.TagRequestBase tagRequestBase18 = tagRequestBase16.setValueType(tagValueType17);
        java.lang.String str19 = tagRequestBase18.Key;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_20 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray22 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList23 = new java.util.ArrayList<java.lang.String>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList23, strArray22);
        getObservationsV2_20.SpecimenIds = strList23;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags26 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray30 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList31 = new java.util.ArrayList<java.lang.String>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList31, strArray30);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags33 = putLocationTags26.setTagUniqueIds(strList31);
        getObservationsV2_20.ActivityIds = strList31;
        tagRequestBase18.PickListValues = strList31;
        putOpenIdConnectRelyingPartyConfiguration1.HostedDomains = strList31;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DeleteActivities deleteActivities37 = deleteActivities0.setProjectIds((java.util.List<java.lang.String>) strList31);
        java.util.List<java.lang.String> strList38 = deleteActivities0.Media;
        java.lang.String str39 = deleteActivities0.Sort;
        java.util.List<java.lang.String> strList40 = deleteActivities0.ActivityTypes;
        deleteActivities0.Limit = 100;
        org.junit.Assert.assertNull(strList2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(getObservationsV2_12);
        org.junit.Assert.assertNull(tagApplicabilityList14);
        org.junit.Assert.assertNotNull(tagRequestBase16);
        org.junit.Assert.assertTrue("'" + tagValueType17 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.TagValueType.PickList + "'", tagValueType17.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.TagValueType.PickList));
        org.junit.Assert.assertNotNull(tagRequestBase18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(putLocationTags33);
        org.junit.Assert.assertNotNull(deleteActivities37);
        org.junit.Assert.assertNull(strList38);
        org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertNull(strList40);
    }

    @Test
    public void test53059() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest106.test53059");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.IndexConfiguration indexConfiguration0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.IndexConfiguration();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Unit unit1 = indexConfiguration0.Unit;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes2 = indexConfiguration0.AuditAttributes;
        indexConfiguration0.Description = "'.'SSSSSSS";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Unit unit5 = indexConfiguration0.getUnit();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Unit unit6 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Unit();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes7 = unit6.AuditAttributes;
        unit6.Name = "2021.4.62.0";
        java.lang.String str10 = unit6.getCustomId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Unit unit12 = unit6.setName("MinDuration");
        java.lang.String str13 = unit6.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes14 = unit6.getAuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.IndexConfiguration indexConfiguration15 = indexConfiguration0.setUnit(unit6);
        indexConfiguration0.Description = "multipart/form-data; boundary=****73426a9f-8a73-4fda-95b3-78cea45bbfe9****";
        java.lang.Boolean boolean18 = indexConfiguration0.UseScoreRanges;
        org.junit.Assert.assertNull(unit1);
        org.junit.Assert.assertNull(auditAttributes2);
        org.junit.Assert.assertNull(unit5);
        org.junit.Assert.assertNull(auditAttributes7);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNotNull(unit12);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNull(auditAttributes14);
        org.junit.Assert.assertNotNull(indexConfiguration15);
        org.junit.Assert.assertNull(boolean18);
    }

    @Test
    public void test53060() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest106.test53060");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CorrectionOperation correctionOperation0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CorrectionOperation();
        java.util.HashMap<java.lang.String, java.lang.Object> strMap1 = null;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CorrectionOperation correctionOperation2 = correctionOperation0.setParameters(strMap1);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.StatisticalDateTimeOffset statisticalDateTimeOffset3 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.StatisticalDateTimeOffset();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostRecurringReport postRecurringReport4 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostRecurringReport();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary5 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        dischargeSummary5.Reviewer = "";
        java.time.Instant instant8 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        dischargeSummary5.MeasurementTime = instant8;
        postRecurringReport4.NextGenerationDate = instant8;
        java.time.Instant instant11 = postRecurringReport4.getNextGenerationDate();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.StatisticalDateTimeOffset statisticalDateTimeOffset12 = statisticalDateTimeOffset3.setDateTimeOffset(instant11);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDescription timeSeriesDescription13 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDescription();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest14 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest();
        java.lang.Object obj15 = timeAlignedDataServiceRequest14.getResponseType();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse16 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant17 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse18 = locationDescriptionListServiceResponse16.setNextToken(instant17);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest19 = timeAlignedDataServiceRequest14.setQueryFrom(instant17);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDescription timeSeriesDescription20 = timeSeriesDescription13.setRawStartTime(instant17);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.StatisticalDateTimeOffset statisticalDateTimeOffset21 = statisticalDateTimeOffset3.setDateTimeOffset(instant17);
        java.lang.Boolean boolean22 = statisticalDateTimeOffset21.isRepresentsEndOfTimePeriod();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Attachment attachment23 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Attachment();
        java.lang.String str24 = attachment23.getUrl();
        java.lang.String str25 = attachment23.FileName;
        java.lang.String str26 = attachment23.getFileName();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Attachment attachment27 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Attachment();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.AttachmentCategory attachmentCategory28 = attachment27.AttachmentCategory;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Attachment attachment30 = attachment27.setFileName("");
        attachment27.UploadedByUser = "/AQUARIUS/Acquisition/v2://9999-12-31T23:59:59.999Z";
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TagMetadata> tagMetadataList33 = attachment27.Tags;
        java.lang.String str34 = attachment27.Url;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportSpecimens getExportSpecimens35 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportSpecimens();
        java.util.List<java.lang.String> strList36 = getExportSpecimens35.getActivityTypes();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Qualifier qualifier37 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Qualifier();
        java.time.Instant instant38 = qualifier37.DateApplied;
        java.lang.String str39 = qualifier37.User;
        java.lang.String str40 = qualifier37.getIdentifier();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest41 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest();
        java.lang.Object obj42 = timeAlignedDataServiceRequest41.getResponseType();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse43 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant44 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse45 = locationDescriptionListServiceResponse43.setNextToken(instant44);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest46 = timeAlignedDataServiceRequest41.setQueryFrom(instant44);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Qualifier qualifier47 = qualifier37.setDateApplied(instant44);
        getExportSpecimens35.Before = instant44;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationRemark locationRemark49 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationRemark();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationRemark locationRemark51 = locationRemark49.setDescription("MaxInstant");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitDataServiceResponse fieldVisitDataServiceResponse52 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitDataServiceResponse();
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CrossSectionSurveyActivity> crossSectionSurveyActivityList53 = fieldVisitDataServiceResponse52.CrossSectionSurveyActivity;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitDataServiceResponse fieldVisitDataServiceResponse55 = fieldVisitDataServiceResponse52.setIdentifier("");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary56 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        dischargeSummary56.Reviewer = "";
        java.time.Instant instant59 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        dischargeSummary56.MeasurementTime = instant59;
        fieldVisitDataServiceResponse52.ResponseTime = instant59;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationRemark locationRemark62 = locationRemark49.setCreateTime(instant59);
        getExportSpecimens35.EndModificationTime = instant59;
        attachment27.DateUploaded = instant59;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Attachment attachment65 = attachment23.setDateLastAccessed(instant59);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.StatisticalDateTimeOffset statisticalDateTimeOffset66 = statisticalDateTimeOffset21.setDateTimeOffset(instant59);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CorrectionOperation correctionOperation67 = correctionOperation2.setDateAppliedUtc(instant59);
        java.lang.String str68 = correctionOperation67.getComments();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MethodOperation methodOperation69 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MethodOperation();
        java.time.Instant instant70 = methodOperation69.getDateAppliedUtc();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary71 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary73 = dischargeSummary71.setPublish((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse74 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant75 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse76 = locationDescriptionListServiceResponse74.setNextToken(instant75);
        dischargeSummary71.MeasurementTime = instant75;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MethodOperation methodOperation78 = methodOperation69.setDateAppliedUtc(instant75);
        methodOperation69.Comments = "/AQUARIUS";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MethodOperation methodOperation82 = methodOperation69.setStackPosition((java.lang.Integer) 0);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MethodOperation methodOperation83 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MethodOperation();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeOperationType metadataChangeOperationType84 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeOperationType.Creation;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MethodOperation methodOperation85 = methodOperation83.setOperationType(metadataChangeOperationType84);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeOperationType metadataChangeOperationType86 = methodOperation85.OperationType;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MethodOperation methodOperation87 = methodOperation82.setOperationType(metadataChangeOperationType86);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeOperationType metadataChangeOperationType88 = methodOperation87.getOperationType();
        correctionOperation67.OperationType = metadataChangeOperationType88;
        java.util.HashMap<java.lang.String, java.lang.Object> strMap90 = correctionOperation67.Parameters;
        java.lang.Integer int91 = correctionOperation67.StackPosition;
        org.junit.Assert.assertNotNull(correctionOperation2);
        org.junit.Assert.assertNotNull(instant8);
        org.junit.Assert.assertNotNull(instant11);
        org.junit.Assert.assertNotNull(statisticalDateTimeOffset12);
        org.junit.Assert.assertNotNull(obj15);
        org.junit.Assert.assertEquals(obj15.toString(), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj15), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj15), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertNotNull(instant17);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse18);
        org.junit.Assert.assertNotNull(timeAlignedDataServiceRequest19);
        org.junit.Assert.assertNotNull(timeSeriesDescription20);
        org.junit.Assert.assertNotNull(statisticalDateTimeOffset21);
        org.junit.Assert.assertNull(boolean22);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertNull(attachmentCategory28);
        org.junit.Assert.assertNotNull(attachment30);
        org.junit.Assert.assertNull(tagMetadataList33);
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertNull(strList36);
        org.junit.Assert.assertNull(instant38);
        org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertNull(str40);
        org.junit.Assert.assertNotNull(obj42);
        org.junit.Assert.assertEquals(obj42.toString(), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj42), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj42), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertNotNull(instant44);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse45);
        org.junit.Assert.assertNotNull(timeAlignedDataServiceRequest46);
        org.junit.Assert.assertNotNull(qualifier47);
        org.junit.Assert.assertNotNull(locationRemark51);
        org.junit.Assert.assertNull(crossSectionSurveyActivityList53);
        org.junit.Assert.assertNotNull(fieldVisitDataServiceResponse55);
        org.junit.Assert.assertNotNull(instant59);
        org.junit.Assert.assertNotNull(locationRemark62);
        org.junit.Assert.assertNotNull(attachment65);
        org.junit.Assert.assertNotNull(statisticalDateTimeOffset66);
        org.junit.Assert.assertNotNull(correctionOperation67);
        org.junit.Assert.assertNull(str68);
        org.junit.Assert.assertNull(instant70);
        org.junit.Assert.assertNotNull(dischargeSummary73);
        org.junit.Assert.assertNotNull(instant75);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse76);
        org.junit.Assert.assertNotNull(methodOperation78);
        org.junit.Assert.assertNotNull(methodOperation82);
        org.junit.Assert.assertTrue("'" + metadataChangeOperationType84 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeOperationType.Creation + "'", metadataChangeOperationType84.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeOperationType.Creation));
        org.junit.Assert.assertNotNull(methodOperation85);
        org.junit.Assert.assertTrue("'" + metadataChangeOperationType86 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeOperationType.Creation + "'", metadataChangeOperationType86.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeOperationType.Creation));
        org.junit.Assert.assertNotNull(methodOperation87);
        org.junit.Assert.assertTrue("'" + metadataChangeOperationType88 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeOperationType.Creation + "'", metadataChangeOperationType88.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeOperationType.Creation));
        org.junit.Assert.assertNull(strMap90);
        org.junit.Assert.assertNull(int91);
    }

    @Test
    public void test53061() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest106.test53061");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SearchResultTimeZone searchResultTimeZone0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SearchResultTimeZone();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.TimeZone[] timeZoneArray1 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.TimeZone[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.TimeZone> timeZoneList2 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.TimeZone>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.TimeZone>) timeZoneList2, timeZoneArray1);
        searchResultTimeZone0.DomainObjects = timeZoneList2;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SearchResultTimeZone searchResultTimeZone5 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SearchResultTimeZone();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.TimeZone[] timeZoneArray6 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.TimeZone[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.TimeZone> timeZoneList7 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.TimeZone>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.TimeZone>) timeZoneList7, timeZoneArray6);
        searchResultTimeZone5.DomainObjects = timeZoneList7;
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.TimeZone> timeZoneList10 = searchResultTimeZone5.DomainObjects;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SearchResultTimeZone searchResultTimeZone11 = searchResultTimeZone0.setDomainObjects(timeZoneList10);
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.TimeZone> timeZoneList12 = searchResultTimeZone11.getDomainObjects();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SearchResultTimeZone searchResultTimeZone13 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SearchResultTimeZone();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SearchResultTimeZone searchResultTimeZone15 = searchResultTimeZone13.setCursor("/AQUARIUS/Acquisition/v2://9999-12-31T23:59:59.999Z");
        java.lang.Integer int16 = searchResultTimeZone13.TotalCount;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SearchResultTimeZone searchResultTimeZone18 = searchResultTimeZone13.setTotalCount((java.lang.Integer) 1);
        searchResultTimeZone18.Cursor = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SearchResultTimeZone searchResultTimeZone21 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SearchResultTimeZone();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.TimeZone[] timeZoneArray22 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.TimeZone[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.TimeZone> timeZoneList23 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.TimeZone>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.TimeZone>) timeZoneList23, timeZoneArray22);
        searchResultTimeZone21.DomainObjects = timeZoneList23;
        searchResultTimeZone18.DomainObjects = timeZoneList23;
        searchResultTimeZone11.DomainObjects = timeZoneList23;
        org.junit.Assert.assertNotNull(timeZoneArray1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(timeZoneArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(timeZoneList10);
        org.junit.Assert.assertNotNull(searchResultTimeZone11);
        org.junit.Assert.assertNotNull(timeZoneList12);
        org.junit.Assert.assertNotNull(searchResultTimeZone15);
        org.junit.Assert.assertNull(int16);
        org.junit.Assert.assertNotNull(searchResultTimeZone18);
        org.junit.Assert.assertNotNull(timeZoneArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
    }

    @Test
    public void test53062() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest106.test53062");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Filter filter0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Filter();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Filter filter2 = filter0.setId("2021.4.62.0");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Filter filter4 = filter2.setId("POST");
        filter4.Id = "https";
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty> observedPropertyList7 = filter4.ObservedProperties;
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty> observedPropertyList8 = filter4.ObservedProperties;
        java.lang.String str9 = filter4.CustomId;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes10 = filter4.AuditAttributes;
        java.lang.String str11 = filter4.CustomId;
        org.junit.Assert.assertNotNull(filter2);
        org.junit.Assert.assertNotNull(filter4);
        org.junit.Assert.assertNull(observedPropertyList7);
        org.junit.Assert.assertNull(observedPropertyList8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNull(auditAttributes10);
        org.junit.Assert.assertNull(str11);
    }

    @Test
    public void test53063() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest106.test53063");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItem importItem0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItem();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutQualifierGroup putQualifierGroup1 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutQualifierGroup();
        putQualifierGroup1.Identifier = "";
        java.lang.Object obj4 = putQualifierGroup1.getResponseType();
        importItem0.Errors = obj4;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportObservations getExportObservations6 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportObservations();
        java.lang.String str7 = getExportObservations6.DepthUnitId;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportObservations getExportObservations9 = getExportObservations6.setSort("yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSSSSSZZZZZ");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportObservations getExportObservations11 = getExportObservations6.setSort("http://MaxDurationhttp/json/reply/Integer");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RecurringReport recurringReport12 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RecurringReport();
        recurringReport12.JsonTemplate = "2021.4.62.0";
        java.time.Instant instant15 = recurringReport12.getNextGenerationDate();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisit fieldVisit16 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisit();
        fieldVisit16.Weather = "/AQUARIUS/Acquisition/v2";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.LocationDatumPeriod locationDatumPeriod19 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.LocationDatumPeriod();
        java.time.Instant instant20 = locationDatumPeriod19.AppliedTimeUtc;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.LocationDatumPeriod locationDatumPeriod22 = locationDatumPeriod19.setAppliedByUser("/AQUARIUS/Acquisition/v2://9999-12-31T23:59:59.999Z");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDescription timeSeriesDescription23 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDescription();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest24 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest();
        java.lang.Object obj25 = timeAlignedDataServiceRequest24.getResponseType();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse26 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant27 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse28 = locationDescriptionListServiceResponse26.setNextToken(instant27);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest29 = timeAlignedDataServiceRequest24.setQueryFrom(instant27);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDescription timeSeriesDescription30 = timeSeriesDescription23.setRawStartTime(instant27);
        locationDatumPeriod19.ValidFrom = instant27;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitDescription fieldVisitDescription32 = fieldVisit16.setLastMatchedTime(instant27);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RecurringReport recurringReport33 = recurringReport12.setNextGenerationDate(instant27);
        getExportObservations6.StartModificationTime = instant27;
        java.lang.String str35 = getExportObservations6.ActivityCustomId;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostQualifier postQualifier36 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostQualifier();
        java.lang.Object obj37 = postQualifier36.getResponseType();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetActivities getActivities38 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetActivities();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutBulkEditResultGradesV2 putBulkEditResultGradesV2_39 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutBulkEditResultGradesV2();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RoleFlattened roleFlattened40 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RoleFlattened();
        java.lang.Boolean boolean41 = roleFlattened40.CanRemoveFieldVisits;
        roleFlattened40.Name = "MaxInstant";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationType putLocationType44 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationType();
        java.lang.String str45 = putLocationType44.Description;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_46 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray49 = new java.lang.String[] { "", "" };
        java.util.ArrayList<java.lang.String> strList50 = new java.util.ArrayList<java.lang.String>();
        boolean boolean51 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList50, strArray49);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_52 = getObservationsV2_46.setDataClassifications((java.util.List<java.lang.String>) strList50);
        getObservationsV2_52.DepthUnitCustomId = "hi!";
        java.lang.String str55 = getObservationsV2_52.CustomId;
        java.util.List<java.lang.String> strList56 = getObservationsV2_52.getSearch();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_57 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray59 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList60 = new java.util.ArrayList<java.lang.String>();
        boolean boolean61 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList60, strArray59);
        getObservationsV2_57.SpecimenIds = strList60;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags63 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray67 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList68 = new java.util.ArrayList<java.lang.String>();
        boolean boolean69 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList68, strArray67);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags70 = putLocationTags63.setTagUniqueIds(strList68);
        getObservationsV2_57.QualityControlTypes = strList68;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_72 = getObservationsV2_52.setMedia((java.util.List<java.lang.String>) strList68);
        putLocationType44.ExtendedAttributeDefinitionIds = strList68;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RoleFlattenedBase roleFlattenedBase74 = roleFlattened40.setRoleApprovalTransitions(strList68);
        putBulkEditResultGradesV2_39.ResultGrades = strList68;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetActivities getActivities76 = getActivities38.setSamplingLocationIds((java.util.List<java.lang.String>) strList68);
        postQualifier36.GroupIdentifiers = strList68;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportObservations getExportObservations78 = getExportObservations6.setActivityTypes((java.util.List<java.lang.String>) strList68);
        importItem0.Fields = strList68;
        importItem0.Input = "http://MaxDurationhttp/json/reply/Integer";
        org.junit.Assert.assertNotNull(obj4);
        org.junit.Assert.assertEquals(obj4.toString(), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning$QualifierGroupResponse");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj4), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning$QualifierGroupResponse");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj4), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning$QualifierGroupResponse");
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(getExportObservations9);
        org.junit.Assert.assertNotNull(getExportObservations11);
        org.junit.Assert.assertNull(instant15);
        org.junit.Assert.assertNull(instant20);
        org.junit.Assert.assertNotNull(locationDatumPeriod22);
        org.junit.Assert.assertNotNull(obj25);
        org.junit.Assert.assertEquals(obj25.toString(), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj25), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj25), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertNotNull(instant27);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse28);
        org.junit.Assert.assertNotNull(timeAlignedDataServiceRequest29);
        org.junit.Assert.assertNotNull(timeSeriesDescription30);
        org.junit.Assert.assertNotNull(fieldVisitDescription32);
        org.junit.Assert.assertNotNull(recurringReport33);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertNotNull(obj37);
        org.junit.Assert.assertEquals(obj37.toString(), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning$QualifierResponse");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj37), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning$QualifierResponse");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj37), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning$QualifierResponse");
        org.junit.Assert.assertNull(boolean41);
        org.junit.Assert.assertNull(str45);
        org.junit.Assert.assertNotNull(strArray49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNotNull(getObservationsV2_52);
        org.junit.Assert.assertNull(str55);
        org.junit.Assert.assertNull(strList56);
        org.junit.Assert.assertNotNull(strArray59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(strArray67);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertNotNull(putLocationTags70);
        org.junit.Assert.assertNotNull(getObservationsV2_72);
        org.junit.Assert.assertNotNull(roleFlattenedBase74);
        org.junit.Assert.assertNotNull(getActivities76);
        org.junit.Assert.assertNotNull(getExportObservations78);
    }

    @Test
    public void test53064() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest106.test53064");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDataServiceResponse locationDataServiceResponse0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDataServiceResponse();
        java.lang.String str1 = locationDataServiceResponse0.Description;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDataServiceResponse locationDataServiceResponse3 = locationDataServiceResponse0.setElevationUnits("");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDataServiceResponse locationDataServiceResponse5 = locationDataServiceResponse0.setElevation((java.lang.Double) 10.0d);
        locationDataServiceResponse5.Srid = (-1.0d);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(locationDataServiceResponse3);
        org.junit.Assert.assertNotNull(locationDataServiceResponse5);
    }

    @Test
    public void test53065() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest106.test53065");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpreadsheetTemplate spreadsheetTemplate0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpreadsheetTemplate();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpreadsheetTemplateType spreadsheetTemplateType1 = spreadsheetTemplate0.getType();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpreadsheetTemplateType spreadsheetTemplateType2 = spreadsheetTemplate0.getType();
        spreadsheetTemplate0.Description = "https";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpreadsheetTemplateType spreadsheetTemplateType5 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpreadsheetTemplate spreadsheetTemplate6 = spreadsheetTemplate0.setType(spreadsheetTemplateType5);
        spreadsheetTemplate6.CustomId = "http://MaxDurationhttp/json/reply/String";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLabReport postLabReport9 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLabReport();
        postLabReport9.Id = "-PT87591240H";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutFieldTrip putFieldTrip12 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutFieldTrip();
        java.time.OffsetDateTime offsetDateTime13 = putFieldTrip12.StartTime;
        java.time.OffsetDateTime offsetDateTime14 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutFieldTrip putFieldTrip15 = putFieldTrip12.setStartTime(offsetDateTime14);
        java.time.OffsetDateTime offsetDateTime16 = null;
        putFieldTrip12.StartTime = offsetDateTime16;
        java.time.OffsetDateTime offsetDateTime18 = null;
        putFieldTrip12.StartTime = offsetDateTime18;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.FieldVisit fieldVisit20 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.FieldVisit();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment21 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment();
        java.lang.String str22 = domainObjectAttachment21.getId();
        java.lang.String str23 = domainObjectAttachment21.getId();
        domainObjectAttachment21.Id = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment27 = domainObjectAttachment21.setId("hi!");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment29 = domainObjectAttachment27.setId("hi!");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment30 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment();
        java.lang.String str31 = domainObjectAttachment30.getId();
        java.lang.String str32 = domainObjectAttachment30.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment[] domainObjectAttachmentArray33 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment[] { domainObjectAttachment27, domainObjectAttachment30 };
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment> domainObjectAttachmentList34 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment>) domainObjectAttachmentList34, domainObjectAttachmentArray33);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.FieldVisit fieldVisit36 = fieldVisit20.setAttachments((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment>) domainObjectAttachmentList34);
        putFieldTrip12.Attachments = domainObjectAttachmentList34;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLabReport postLabReport38 = postLabReport9.setAttachments((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment>) domainObjectAttachmentList34);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpreadsheetTemplate spreadsheetTemplate39 = spreadsheetTemplate6.setAttachments((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment>) domainObjectAttachmentList34);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpreadsheetTemplate spreadsheetTemplate40 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpreadsheetTemplate();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpreadsheetTemplateType spreadsheetTemplateType41 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpreadsheetTemplate spreadsheetTemplate42 = spreadsheetTemplate40.setType(spreadsheetTemplateType41);
        spreadsheetTemplate40.Description = "/AQUARIUS/Acquisition/v2";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpreadsheetTemplate spreadsheetTemplate46 = spreadsheetTemplate40.setId("2021.8.9990");
        java.lang.String str47 = spreadsheetTemplate40.Id;
        java.lang.String str48 = spreadsheetTemplate40.getDescription();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSpreadsheetTemplate putSpreadsheetTemplate49 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSpreadsheetTemplate();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSpreadsheetTemplate putSpreadsheetTemplate51 = putSpreadsheetTemplate49.setId("POST");
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment> domainObjectAttachmentList52 = putSpreadsheetTemplate51.getAttachments();
        putSpreadsheetTemplate51.Description = "multipart/form-data; boundary=****d9f5d551-383a-4365-87fd-ae7094da6f3b****";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSpreadsheetTemplate putSpreadsheetTemplate55 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSpreadsheetTemplate();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes56 = putSpreadsheetTemplate55.AuditAttributes;
        putSpreadsheetTemplate55.CustomId = "2021.4.62.0";
        java.lang.String str59 = putSpreadsheetTemplate55.Id;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpreadsheetTemplateType spreadsheetTemplateType60 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpreadsheetTemplateType.OBSERVATION_EXPORT;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSpreadsheetTemplate putSpreadsheetTemplate61 = putSpreadsheetTemplate55.setType(spreadsheetTemplateType60);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSpreadsheetTemplate putSpreadsheetTemplate62 = putSpreadsheetTemplate51.setType(spreadsheetTemplateType60);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpreadsheetTemplate spreadsheetTemplate63 = spreadsheetTemplate40.setType(spreadsheetTemplateType60);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpreadsheetTemplate spreadsheetTemplate64 = spreadsheetTemplate6.setType(spreadsheetTemplateType60);
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment> domainObjectAttachmentList65 = spreadsheetTemplate64.Attachments;
        org.junit.Assert.assertNull(spreadsheetTemplateType1);
        org.junit.Assert.assertNull(spreadsheetTemplateType2);
        org.junit.Assert.assertNotNull(spreadsheetTemplate6);
        org.junit.Assert.assertNull(offsetDateTime13);
        org.junit.Assert.assertNotNull(putFieldTrip15);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertNotNull(domainObjectAttachment27);
        org.junit.Assert.assertNotNull(domainObjectAttachment29);
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertNotNull(domainObjectAttachmentArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(fieldVisit36);
        org.junit.Assert.assertNotNull(postLabReport38);
        org.junit.Assert.assertNotNull(spreadsheetTemplate39);
        org.junit.Assert.assertNotNull(spreadsheetTemplate42);
        org.junit.Assert.assertNotNull(spreadsheetTemplate46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "2021.8.9990" + "'", str47, "2021.8.9990");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "/AQUARIUS/Acquisition/v2" + "'", str48, "/AQUARIUS/Acquisition/v2");
        org.junit.Assert.assertNotNull(putSpreadsheetTemplate51);
        org.junit.Assert.assertNull(domainObjectAttachmentList52);
        org.junit.Assert.assertNull(auditAttributes56);
        org.junit.Assert.assertNull(str59);
        org.junit.Assert.assertTrue("'" + spreadsheetTemplateType60 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpreadsheetTemplateType.OBSERVATION_EXPORT + "'", spreadsheetTemplateType60.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpreadsheetTemplateType.OBSERVATION_EXPORT));
        org.junit.Assert.assertNotNull(putSpreadsheetTemplate61);
        org.junit.Assert.assertNotNull(putSpreadsheetTemplate62);
        org.junit.Assert.assertNotNull(spreadsheetTemplate63);
        org.junit.Assert.assertNotNull(spreadsheetTemplate64);
        org.junit.Assert.assertNotNull(domainObjectAttachmentList65);
    }

    @Test
    public void test53066() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest106.test53066");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisit fieldVisit0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisit();
        java.time.Instant instant1 = fieldVisit0.StartTime;
        java.lang.String str2 = fieldVisit0.getParty();
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Attachment> attachmentList3 = fieldVisit0.Attachments;
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Attachment> attachmentList4 = fieldVisit0.Attachments;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DatumConversionResult datumConversionResult5 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DatumConversionResult();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DatumConversionResult datumConversionResult7 = datumConversionResult5.setTargetDatum("http");
        java.lang.String str8 = datumConversionResult5.TargetDatum;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DatumConversionResult datumConversionResult10 = datumConversionResult5.setTargetDatum("https");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisit fieldVisit11 = fieldVisit0.setDatumConversionResult(datumConversionResult10);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LevelSurveyActivity levelSurveyActivity12 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LevelSurveyActivity();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisit fieldVisit13 = fieldVisit0.setLevelSurveyActivity(levelSurveyActivity12);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LevelSurveyActivity levelSurveyActivity14 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LevelSurveyActivity();
        levelSurveyActivity14.Party = "/AQUARIUS/Acquisition/v2://9999-12-31T23:59:59.999Z";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LevelSurveyActivity levelSurveyActivity17 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LevelSurveyActivity();
        java.lang.String str18 = levelSurveyActivity17.getParty();
        java.lang.String str19 = levelSurveyActivity17.OriginReferencePointUniqueId;
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LevelSurveyMeasurement> levelSurveyMeasurementList20 = levelSurveyActivity17.LevelMeasurements;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LevelSurveyActivity levelSurveyActivity22 = levelSurveyActivity17.setMethod("yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSSSSSZZZZZ");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LevelSurveyMeasurement[] levelSurveyMeasurementArray23 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LevelSurveyMeasurement[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LevelSurveyMeasurement> levelSurveyMeasurementList24 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LevelSurveyMeasurement>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LevelSurveyMeasurement>) levelSurveyMeasurementList24, levelSurveyMeasurementArray23);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LevelSurveyActivity levelSurveyActivity26 = levelSurveyActivity22.setLevelMeasurements(levelSurveyMeasurementList24);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LevelSurveyActivity levelSurveyActivity27 = levelSurveyActivity14.setLevelMeasurements(levelSurveyMeasurementList24);
        levelSurveyActivity14.Party = "http://MaxDurationhttp/json/reply/Integer";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisit fieldVisit30 = fieldVisit13.setLevelSurveyActivity(levelSurveyActivity14);
        java.lang.String str31 = fieldVisit13.getLocationIdentifier();
        java.time.Instant instant32 = fieldVisit13.getLastMatchedTime();
        org.junit.Assert.assertNull(instant1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(attachmentList3);
        org.junit.Assert.assertNull(attachmentList4);
        org.junit.Assert.assertNotNull(datumConversionResult7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "http" + "'", str8, "http");
        org.junit.Assert.assertNotNull(datumConversionResult10);
        org.junit.Assert.assertNotNull(fieldVisit11);
        org.junit.Assert.assertNotNull(fieldVisit13);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertNull(levelSurveyMeasurementList20);
        org.junit.Assert.assertNotNull(levelSurveyActivity22);
        org.junit.Assert.assertNotNull(levelSurveyMeasurementArray23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(levelSurveyActivity26);
        org.junit.Assert.assertNotNull(levelSurveyActivity27);
        org.junit.Assert.assertNotNull(fieldVisit30);
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertNull(instant32);
    }

    @Test
    public void test53067() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest106.test53067");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostLocation postLocation0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostLocation();
        postLocation0.Description = "hi!";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeValue[] extendedAttributeValueArray3 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeValue[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeValue> extendedAttributeValueList4 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeValue>();
        boolean boolean5 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeValue>) extendedAttributeValueList4, extendedAttributeValueArray3);
        postLocation0.ExtendedAttributeValues = extendedAttributeValueList4;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.LocationBase locationBase8 = postLocation0.setElevation((java.lang.Double) 100.0d);
        java.lang.String str9 = postLocation0.UtcOffset;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostLocation postLocation10 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostLocation();
        postLocation10.Description = "hi!";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeValue[] extendedAttributeValueArray13 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeValue[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeValue> extendedAttributeValueList14 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeValue>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeValue>) extendedAttributeValueList14, extendedAttributeValueArray13);
        postLocation10.ExtendedAttributeValues = extendedAttributeValueList14;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.LocationBase locationBase18 = postLocation10.setElevation((java.lang.Double) 100.0d);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.LocationBase locationBase20 = postLocation10.setLatitude((java.lang.Double) 0.0d);
        locationBase20.LocationType = "/AQUARIUS/Provisioning/v1";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostDatumConvertedTimeSeries postDatumConvertedTimeSeries23 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostDatumConvertedTimeSeries();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostDatumConvertedTimeSeries postDatumConvertedTimeSeries25 = postDatumConvertedTimeSeries23.setDescription("yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ");
        postDatumConvertedTimeSeries23.Publish = false;
        postDatumConvertedTimeSeries23.Publish = false;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostDatumConvertedTimeSeries postDatumConvertedTimeSeries31 = postDatumConvertedTimeSeries23.setSubLocationIdentifier("2021.4.62.0");
        java.lang.Boolean boolean32 = postDatumConvertedTimeSeries23.TargetIsLocalAssumedDatum;
        postDatumConvertedTimeSeries23.TargetIsLocalAssumedDatum = true;
        postDatumConvertedTimeSeries23.SubLocationIdentifier = "9999-12-31T23:59:59.9999999Z://2021.4.62.0";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostDatumConvertedTimeSeries postDatumConvertedTimeSeries37 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostDatumConvertedTimeSeries();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostDatumConvertedTimeSeries postDatumConvertedTimeSeries39 = postDatumConvertedTimeSeries37.setDescription("yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ");
        postDatumConvertedTimeSeries37.Publish = false;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostLocation postLocation42 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostLocation();
        postLocation42.Description = "hi!";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeValue[] extendedAttributeValueArray45 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeValue[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeValue> extendedAttributeValueList46 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeValue>();
        boolean boolean47 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeValue>) extendedAttributeValueList46, extendedAttributeValueArray45);
        postLocation42.ExtendedAttributeValues = extendedAttributeValueList46;
        java.lang.Boolean boolean49 = postLocation42.Publish;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostStatisticalDerivedTimeSeries postStatisticalDerivedTimeSeries50 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostStatisticalDerivedTimeSeries();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostStatisticalDerivedTimeSeries postStatisticalDerivedTimeSeries52 = postStatisticalDerivedTimeSeries50.setComment("'.'SSSSSSS");
        java.lang.String str53 = postStatisticalDerivedTimeSeries50.getParameter();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostStatisticalDerivedTimeSeries postStatisticalDerivedTimeSeries55 = postStatisticalDerivedTimeSeries50.setTimeSeriesUniqueId("");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.InterpolationType interpolationType56 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.InterpolationType.InstantaneousValues;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostStatisticalDerivedTimeSeries postStatisticalDerivedTimeSeries57 = postStatisticalDerivedTimeSeries50.setInterpolationType(interpolationType56);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeValue[] extendedAttributeValueArray58 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeValue[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeValue> extendedAttributeValueList59 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeValue>();
        boolean boolean60 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeValue>) extendedAttributeValueList59, extendedAttributeValueArray58);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostStatisticalDerivedTimeSeries postStatisticalDerivedTimeSeries61 = postStatisticalDerivedTimeSeries50.setExtendedAttributeValues((java.util.List<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeValue>) extendedAttributeValueList59);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.LocationBase locationBase62 = postLocation42.setExtendedAttributeValues((java.util.List<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeValue>) extendedAttributeValueList59);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostCalculatedDerivedTimeSeries postCalculatedDerivedTimeSeries63 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostCalculatedDerivedTimeSeries();
        java.util.ArrayList<java.lang.String> strList64 = postCalculatedDerivedTimeSeries63.TimeSeriesUniqueIds;
        java.lang.String str65 = postCalculatedDerivedTimeSeries63.Label;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostLocation postLocation66 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostLocation();
        postLocation66.Description = "hi!";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeValue[] extendedAttributeValueArray69 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeValue[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeValue> extendedAttributeValueList70 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeValue>();
        boolean boolean71 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeValue>) extendedAttributeValueList70, extendedAttributeValueArray69);
        postLocation66.ExtendedAttributeValues = extendedAttributeValueList70;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostCalculatedDerivedTimeSeries postCalculatedDerivedTimeSeries73 = postCalculatedDerivedTimeSeries63.setExtendedAttributeValues((java.util.List<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeValue>) extendedAttributeValueList70);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.LocationBase locationBase74 = postLocation42.setExtendedAttributeValues((java.util.List<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeValue>) extendedAttributeValueList70);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostDatumConvertedTimeSeries postDatumConvertedTimeSeries75 = postDatumConvertedTimeSeries37.setExtendedAttributeValues((java.util.List<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeValue>) extendedAttributeValueList70);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostDatumConvertedTimeSeries postDatumConvertedTimeSeries76 = postDatumConvertedTimeSeries23.setExtendedAttributeValues((java.util.List<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeValue>) extendedAttributeValueList70);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.LocationBase locationBase77 = locationBase20.setExtendedAttributeValues((java.util.List<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeValue>) extendedAttributeValueList70);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.LocationBase locationBase78 = postLocation0.setExtendedAttributeValues((java.util.List<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeValue>) extendedAttributeValueList70);
        org.junit.Assert.assertNotNull(extendedAttributeValueArray3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(locationBase8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(extendedAttributeValueArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(locationBase18);
        org.junit.Assert.assertNotNull(locationBase20);
        org.junit.Assert.assertNotNull(postDatumConvertedTimeSeries25);
        org.junit.Assert.assertNotNull(postDatumConvertedTimeSeries31);
        org.junit.Assert.assertNull(boolean32);
        org.junit.Assert.assertNotNull(postDatumConvertedTimeSeries39);
        org.junit.Assert.assertNotNull(extendedAttributeValueArray45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNull(boolean49);
        org.junit.Assert.assertNotNull(postStatisticalDerivedTimeSeries52);
        org.junit.Assert.assertNull(str53);
        org.junit.Assert.assertNotNull(postStatisticalDerivedTimeSeries55);
        org.junit.Assert.assertTrue("'" + interpolationType56 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.InterpolationType.InstantaneousValues + "'", interpolationType56.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.InterpolationType.InstantaneousValues));
        org.junit.Assert.assertNotNull(postStatisticalDerivedTimeSeries57);
        org.junit.Assert.assertNotNull(extendedAttributeValueArray58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(postStatisticalDerivedTimeSeries61);
        org.junit.Assert.assertNotNull(locationBase62);
        org.junit.Assert.assertNull(strList64);
        org.junit.Assert.assertNull(str65);
        org.junit.Assert.assertNotNull(extendedAttributeValueArray69);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(postCalculatedDerivedTimeSeries73);
        org.junit.Assert.assertNotNull(locationBase74);
        org.junit.Assert.assertNotNull(postDatumConvertedTimeSeries75);
        org.junit.Assert.assertNotNull(postDatumConvertedTimeSeries76);
        org.junit.Assert.assertNotNull(locationBase77);
        org.junit.Assert.assertNotNull(locationBase78);
    }

    @Test
    public void test53068() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest106.test53068");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ApplyTagRequest applyTagRequest0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ApplyTagRequest();
        java.lang.String str1 = applyTagRequest0.Value;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ApplyTagRequest applyTagRequest3 = applyTagRequest0.setUniqueId("0001-01-01T00:00:00.000Z");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ApplyTagRequest applyTagRequest5 = applyTagRequest0.setUniqueId("multipart/form-data; boundary=****2d077bad-cd27-4736-8ba0-2a8d8a85733d****");
        java.lang.String str6 = applyTagRequest5.getValue();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(applyTagRequest3);
        org.junit.Assert.assertNotNull(applyTagRequest5);
        org.junit.Assert.assertNull(str6);
    }

    @Test
    public void test53069() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest106.test53069");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutDetectioncondition putDetectioncondition0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutDetectioncondition();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes1 = putDetectioncondition0.getAuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutDetectioncondition putDetectioncondition3 = putDetectioncondition0.setCustomId("http");
        putDetectioncondition3.CustomId = "POST";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutDetectioncondition putDetectioncondition7 = putDetectioncondition3.setName("multipart/form-data; boundary=****2917d69a-62fa-41ce-b981-4dbe2deab9f5****");
        putDetectioncondition3.Name = "multipart/form-data; boundary=****2d077bad-cd27-4736-8ba0-2a8d8a85733d****";
        java.lang.String str10 = putDetectioncondition3.Id;
        org.junit.Assert.assertNull(auditAttributes1);
        org.junit.Assert.assertNotNull(putDetectioncondition3);
        org.junit.Assert.assertNotNull(putDetectioncondition7);
        org.junit.Assert.assertNull(str10);
    }

    @Test
    public void test53070() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest106.test53070");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SchedulePlannedActivity schedulePlannedActivity0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SchedulePlannedActivity();
        schedulePlannedActivity0.Instruction = "-PT87591240H";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ActivityTemplate activityTemplate3 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ActivityTemplate();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MediumType mediumType4 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MediumType.BIOLOGICAL;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ActivityTemplate activityTemplate5 = activityTemplate3.setMedium(mediumType4);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SchedulePlannedActivity schedulePlannedActivity6 = schedulePlannedActivity0.setActivityTemplate(activityTemplate5);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SchedulePlannedActivity schedulePlannedActivity8 = schedulePlannedActivity0.setInstruction("9999-12-31T23:59:59.999Z");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes9 = schedulePlannedActivity0.getAuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ActivityType activityType10 = schedulePlannedActivity0.ActivityType;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SchedulePlannedActivity schedulePlannedActivity12 = schedulePlannedActivity0.setId("hi!:///AQUARIUS/Provisioning/v1");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity postActivity13 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity();
        postActivity13.SourceActivityId = "2021.4.62.0";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity plannedActivity16 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity postActivity17 = postActivity13.setPlannedActivity(plannedActivity16);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity postActivity19 = postActivity13.setLoggerFileName("https");
        postActivity13.Refreshed = false;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity postActivity22 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity();
        postActivity22.SourceActivityId = "2021.4.62.0";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity plannedActivity25 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity postActivity26 = postActivity22.setPlannedActivity(plannedActivity25);
        java.time.OffsetDateTime offsetDateTime27 = null;
        postActivity22.StartTime = offsetDateTime27;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ActivityType activityType29 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ActivityType.REPLICATE;
        postActivity22.Type = activityType29;
        postActivity13.Type = activityType29;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity postActivity32 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity();
        postActivity32.SourceActivityId = "2021.4.62.0";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity plannedActivity35 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity postActivity36 = postActivity32.setPlannedActivity(plannedActivity35);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity postActivity38 = postActivity32.setLoggerFileName("https");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFieldVisitActivityWithTemplate postFieldVisitActivityWithTemplate39 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFieldVisitActivityWithTemplate();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate40 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate();
        specimenTemplate40.CustomId = "hi!";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate43 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate44 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate();
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabInstructionTemplate> labInstructionTemplateList45 = specimenTemplate44.getLabInstructionTemplates();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate46 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate48 = specimenTemplate46.setCustomId("hi!");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate49 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate50 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate();
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabInstructionTemplate> labInstructionTemplateList51 = specimenTemplate50.LabInstructionTemplates;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate[] specimenTemplateArray52 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate[] { specimenTemplate40, specimenTemplate43, specimenTemplate44, specimenTemplate48, specimenTemplate49, specimenTemplate50 };
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate> specimenTemplateList53 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate>();
        boolean boolean54 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate>) specimenTemplateList53, specimenTemplateArray52);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFieldVisitActivityWithTemplate postFieldVisitActivityWithTemplate55 = postFieldVisitActivityWithTemplate39.setSpecimenTemplates((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate>) specimenTemplateList53);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity postActivity56 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity();
        postActivity56.LoggerFileName = "hi!";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity plannedActivity59 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity postActivity60 = postActivity56.setPlannedActivity(plannedActivity59);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ActivityType activityType61 = postActivity56.Type;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFieldVisitActivityWithTemplate postFieldVisitActivityWithTemplate62 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFieldVisitActivityWithTemplate();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate63 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate();
        specimenTemplate63.CustomId = "hi!";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate66 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate67 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate();
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabInstructionTemplate> labInstructionTemplateList68 = specimenTemplate67.getLabInstructionTemplates();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate69 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate71 = specimenTemplate69.setCustomId("hi!");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate72 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate73 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate();
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabInstructionTemplate> labInstructionTemplateList74 = specimenTemplate73.LabInstructionTemplates;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate[] specimenTemplateArray75 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate[] { specimenTemplate63, specimenTemplate66, specimenTemplate67, specimenTemplate71, specimenTemplate72, specimenTemplate73 };
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate> specimenTemplateList76 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate>();
        boolean boolean77 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate>) specimenTemplateList76, specimenTemplateArray75);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFieldVisitActivityWithTemplate postFieldVisitActivityWithTemplate78 = postFieldVisitActivityWithTemplate62.setSpecimenTemplates((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate>) specimenTemplateList76);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.CollectionMethod collectionMethod79 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.CollectionMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFieldVisitActivityWithTemplate postFieldVisitActivityWithTemplate80 = postFieldVisitActivityWithTemplate78.setCollectionMethod(collectionMethod79);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity postActivity81 = postActivity56.setCollectionMethod(collectionMethod79);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFieldVisitActivityWithTemplate postFieldVisitActivityWithTemplate82 = postFieldVisitActivityWithTemplate39.setCollectionMethod(collectionMethod79);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity postActivity83 = postActivity32.setCollectionMethod(collectionMethod79);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivity samplingPlanPlannedActivity84 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivity();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ActivityType activityType85 = null;
        samplingPlanPlannedActivity84.ActivityType = activityType85;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ActivityType activityType87 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ActivityType.FIELD_SURVEY;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivity samplingPlanPlannedActivity88 = samplingPlanPlannedActivity84.setActivityType(activityType87);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity postActivity89 = postActivity32.setType(activityType87);
        postActivity13.Type = activityType87;
        schedulePlannedActivity0.ActivityType = activityType87;
        org.junit.Assert.assertTrue("'" + mediumType4 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MediumType.BIOLOGICAL + "'", mediumType4.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MediumType.BIOLOGICAL));
        org.junit.Assert.assertNotNull(activityTemplate5);
        org.junit.Assert.assertNotNull(schedulePlannedActivity6);
        org.junit.Assert.assertNotNull(schedulePlannedActivity8);
        org.junit.Assert.assertNull(auditAttributes9);
        org.junit.Assert.assertNull(activityType10);
        org.junit.Assert.assertNotNull(schedulePlannedActivity12);
        org.junit.Assert.assertNotNull(postActivity17);
        org.junit.Assert.assertNotNull(postActivity19);
        org.junit.Assert.assertNotNull(postActivity26);
        org.junit.Assert.assertTrue("'" + activityType29 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ActivityType.REPLICATE + "'", activityType29.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ActivityType.REPLICATE));
        org.junit.Assert.assertNotNull(postActivity36);
        org.junit.Assert.assertNotNull(postActivity38);
        org.junit.Assert.assertNull(labInstructionTemplateList45);
        org.junit.Assert.assertNotNull(specimenTemplate48);
        org.junit.Assert.assertNull(labInstructionTemplateList51);
        org.junit.Assert.assertNotNull(specimenTemplateArray52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(postFieldVisitActivityWithTemplate55);
        org.junit.Assert.assertNotNull(postActivity60);
        org.junit.Assert.assertNull(activityType61);
        org.junit.Assert.assertNull(labInstructionTemplateList68);
        org.junit.Assert.assertNotNull(specimenTemplate71);
        org.junit.Assert.assertNull(labInstructionTemplateList74);
        org.junit.Assert.assertNotNull(specimenTemplateArray75);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertNotNull(postFieldVisitActivityWithTemplate78);
        org.junit.Assert.assertNotNull(postFieldVisitActivityWithTemplate80);
        org.junit.Assert.assertNotNull(postActivity81);
        org.junit.Assert.assertNotNull(postFieldVisitActivityWithTemplate82);
        org.junit.Assert.assertNotNull(postActivity83);
        org.junit.Assert.assertTrue("'" + activityType87 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ActivityType.FIELD_SURVEY + "'", activityType87.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ActivityType.FIELD_SURVEY));
        org.junit.Assert.assertNotNull(samplingPlanPlannedActivity88);
        org.junit.Assert.assertNotNull(postActivity89);
    }

    @Test
    public void test53071() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest106.test53071");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeTransaction metadataChangeTransaction0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeTransaction();
        java.util.List<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.GapToleranceOperation> gapToleranceOperationList1 = metadataChangeTransaction0.GapToleranceOperations;
        java.util.List<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CorrectionOperation> correctionOperationList2 = metadataChangeTransaction0.CorrectionOperations;
        java.util.List<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.InterpolationTypeOperation> interpolationTypeOperationList3 = metadataChangeTransaction0.getInterpolationTypeOperations();
        java.util.List<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.NoteOperation> noteOperationList4 = metadataChangeTransaction0.NoteOperations;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeTransaction metadataChangeTransaction5 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeTransaction();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeTransaction metadataChangeTransaction6 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeTransaction();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CorrectionOperation correctionOperation7 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CorrectionOperation();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CorrectionType correctionType8 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CorrectionType.AdjustableTrim;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CorrectionOperation correctionOperation9 = correctionOperation7.setType(correctionType8);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeOperationType metadataChangeOperationType10 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeOperationType.Creation;
        correctionOperation7.OperationType = metadataChangeOperationType10;
        java.time.Instant instant12 = null;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CorrectionOperation correctionOperation13 = correctionOperation7.setDateAppliedUtc(instant12);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MethodOperation methodOperation14 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MethodOperation();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeOperationType metadataChangeOperationType15 = methodOperation14.getOperationType();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeOperationType metadataChangeOperationType16 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeOperationType.Creation;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MethodOperation methodOperation17 = methodOperation14.setOperationType(metadataChangeOperationType16);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CorrectionOperation correctionOperation18 = correctionOperation13.setOperationType(metadataChangeOperationType16);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CorrectionOperation correctionOperation19 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CorrectionOperation();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CorrectionType correctionType20 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CorrectionType.AdjustableTrim;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CorrectionOperation correctionOperation21 = correctionOperation19.setType(correctionType20);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeOperationType metadataChangeOperationType22 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeOperationType.Creation;
        correctionOperation19.OperationType = metadataChangeOperationType22;
        java.time.Instant instant24 = null;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CorrectionOperation correctionOperation25 = correctionOperation19.setDateAppliedUtc(instant24);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MethodOperation methodOperation26 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MethodOperation();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeOperationType metadataChangeOperationType27 = methodOperation26.getOperationType();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeOperationType metadataChangeOperationType28 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeOperationType.Creation;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MethodOperation methodOperation29 = methodOperation26.setOperationType(metadataChangeOperationType28);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CorrectionOperation correctionOperation30 = correctionOperation25.setOperationType(metadataChangeOperationType28);
        correctionOperation13.OperationType = metadataChangeOperationType28;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TrendLineAnalysisServiceRequest trendLineAnalysisServiceRequest32 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TrendLineAnalysisServiceRequest();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TrendLineAnalysisType trendLineAnalysisType33 = trendLineAnalysisServiceRequest32.getType();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationRemark locationRemark34 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationRemark();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationRemark locationRemark36 = locationRemark34.setDescription("MaxInstant");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse37 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant38 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse39 = locationDescriptionListServiceResponse37.setNextToken(instant38);
        locationRemark36.FromTime = instant38;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationRemark locationRemark42 = locationRemark36.setRemark("/AQUARIUS/Acquisition/v2");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesThresholdPeriod timeSeriesThresholdPeriod43 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesThresholdPeriod();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesThresholdPeriod timeSeriesThresholdPeriod45 = timeSeriesThresholdPeriod43.setReferenceValue((java.lang.Double) 0.0d);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescription locationDescription46 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescription();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescription locationDescription48 = locationDescription46.setIdentifier("");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ControlConditionActivity controlConditionActivity49 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ControlConditionActivity();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ControlCleanedType controlCleanedType50 = null;
        controlConditionActivity49.ControlCleaned = controlCleanedType50;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse52 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant53 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse54 = locationDescriptionListServiceResponse52.setNextToken(instant53);
        controlConditionActivity49.DateCleaned = instant53;
        locationDescription48.LastModified = instant53;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesThresholdPeriod timeSeriesThresholdPeriod57 = timeSeriesThresholdPeriod45.setAppliedTime(instant53);
        locationRemark42.ToTime = instant53;
        trendLineAnalysisServiceRequest32.QueryFrom = instant53;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CorrectionOperation correctionOperation60 = correctionOperation13.setDateAppliedUtc(instant53);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CorrectionOperation[] correctionOperationArray61 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CorrectionOperation[] { correctionOperation60 };
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CorrectionOperation> correctionOperationList62 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CorrectionOperation>();
        boolean boolean63 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CorrectionOperation>) correctionOperationList62, correctionOperationArray61);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeTransaction metadataChangeTransaction64 = metadataChangeTransaction6.setCorrectionOperations((java.util.List<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CorrectionOperation>) correctionOperationList62);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeTransaction metadataChangeTransaction65 = metadataChangeTransaction5.setCorrectionOperations((java.util.List<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CorrectionOperation>) correctionOperationList62);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetActivities getActivities66 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetActivities();
        java.lang.String str67 = getActivities66.getCustomId();
        java.time.Instant instant68 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MinConcreteValue;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetActivities getActivities69 = getActivities66.setFromStartTime(instant68);
        java.time.Instant instant70 = getActivities69.FromStartTime;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeTransaction metadataChangeTransaction71 = metadataChangeTransaction65.setAppliedTime(instant70);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QualifierOperation[] qualifierOperationArray72 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QualifierOperation[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QualifierOperation> qualifierOperationList73 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QualifierOperation>();
        boolean boolean74 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QualifierOperation>) qualifierOperationList73, qualifierOperationArray72);
        metadataChangeTransaction71.QualifierOperations = qualifierOperationList73;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeTransaction metadataChangeTransaction76 = metadataChangeTransaction0.setQualifierOperations((java.util.List<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QualifierOperation>) qualifierOperationList73);
        java.util.List<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QualifierOperation> qualifierOperationList77 = metadataChangeTransaction76.QualifierOperations;
        org.junit.Assert.assertNull(gapToleranceOperationList1);
        org.junit.Assert.assertNull(correctionOperationList2);
        org.junit.Assert.assertNull(interpolationTypeOperationList3);
        org.junit.Assert.assertNull(noteOperationList4);
        org.junit.Assert.assertTrue("'" + correctionType8 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CorrectionType.AdjustableTrim + "'", correctionType8.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CorrectionType.AdjustableTrim));
        org.junit.Assert.assertNotNull(correctionOperation9);
        org.junit.Assert.assertTrue("'" + metadataChangeOperationType10 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeOperationType.Creation + "'", metadataChangeOperationType10.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeOperationType.Creation));
        org.junit.Assert.assertNotNull(correctionOperation13);
        org.junit.Assert.assertNull(metadataChangeOperationType15);
        org.junit.Assert.assertTrue("'" + metadataChangeOperationType16 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeOperationType.Creation + "'", metadataChangeOperationType16.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeOperationType.Creation));
        org.junit.Assert.assertNotNull(methodOperation17);
        org.junit.Assert.assertNotNull(correctionOperation18);
        org.junit.Assert.assertTrue("'" + correctionType20 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CorrectionType.AdjustableTrim + "'", correctionType20.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CorrectionType.AdjustableTrim));
        org.junit.Assert.assertNotNull(correctionOperation21);
        org.junit.Assert.assertTrue("'" + metadataChangeOperationType22 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeOperationType.Creation + "'", metadataChangeOperationType22.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeOperationType.Creation));
        org.junit.Assert.assertNotNull(correctionOperation25);
        org.junit.Assert.assertNull(metadataChangeOperationType27);
        org.junit.Assert.assertTrue("'" + metadataChangeOperationType28 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeOperationType.Creation + "'", metadataChangeOperationType28.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeOperationType.Creation));
        org.junit.Assert.assertNotNull(methodOperation29);
        org.junit.Assert.assertNotNull(correctionOperation30);
        org.junit.Assert.assertNull(trendLineAnalysisType33);
        org.junit.Assert.assertNotNull(locationRemark36);
        org.junit.Assert.assertNotNull(instant38);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse39);
        org.junit.Assert.assertNotNull(locationRemark42);
        org.junit.Assert.assertNotNull(timeSeriesThresholdPeriod45);
        org.junit.Assert.assertNotNull(locationDescription48);
        org.junit.Assert.assertNotNull(instant53);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse54);
        org.junit.Assert.assertNotNull(timeSeriesThresholdPeriod57);
        org.junit.Assert.assertNotNull(correctionOperation60);
        org.junit.Assert.assertNotNull(correctionOperationArray61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNotNull(metadataChangeTransaction64);
        org.junit.Assert.assertNotNull(metadataChangeTransaction65);
        org.junit.Assert.assertNull(str67);
        org.junit.Assert.assertNotNull(instant68);
        org.junit.Assert.assertNotNull(getActivities69);
        org.junit.Assert.assertNotNull(instant70);
        org.junit.Assert.assertNotNull(metadataChangeTransaction71);
        org.junit.Assert.assertNotNull(qualifierOperationArray72);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(metadataChangeTransaction76);
        org.junit.Assert.assertNotNull(qualifierOperationList77);
    }

    @Test
    public void test53072() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest106.test53072");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabInstruction labInstruction0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabInstruction();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod1 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabInstruction labInstruction2 = labInstruction0.setAnalysisMethod(analysisMethod1);
        java.lang.String str3 = labInstruction0.getAnalysisComment();
        java.lang.String str4 = labInstruction0.getAnalysisComment();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabInstruction labInstruction6 = labInstruction0.setPreparationMethod("****231224c4-98ce-4e30-bd65-1d25287c4abe****");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabInstruction labInstruction8 = labInstruction0.setPreparationMethod("multipart/form-data; boundary=****a02903b2-8109-4914-8058-61246cf0a809****");
        org.junit.Assert.assertNotNull(labInstruction2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNotNull(labInstruction6);
        org.junit.Assert.assertNotNull(labInstruction8);
    }

    @Test
    public void test53073() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest106.test53073");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutLaboratory putLaboratory0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutLaboratory();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutLaboratory putLaboratory2 = putLaboratory0.setPointOfContact("http://MaxDurationhttp");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutLaboratory putLaboratory4 = putLaboratory2.setDescription("-PT87591240H");
        java.lang.String str5 = putLaboratory2.PhoneNumber;
        java.lang.String str6 = putLaboratory2.getName();
        putLaboratory2.Address = "multipart/form-data; boundary=****2917d69a-62fa-41ce-b981-4dbe2deab9f5****";
        org.junit.Assert.assertNotNull(putLaboratory2);
        org.junit.Assert.assertNotNull(putLaboratory4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(str6);
    }

    @Test
    public void test53074() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest106.test53074");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostDatumConvertedTimeSeries postDatumConvertedTimeSeries0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostDatumConvertedTimeSeries();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostDatumConvertedTimeSeries postDatumConvertedTimeSeries2 = postDatumConvertedTimeSeries0.setDescription("yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ");
        postDatumConvertedTimeSeries0.Publish = false;
        java.lang.String str5 = postDatumConvertedTimeSeries0.getComment();
        java.lang.String str6 = postDatumConvertedTimeSeries0.getDescription();
        java.lang.String str7 = postDatumConvertedTimeSeries0.Parameter;
        postDatumConvertedTimeSeries0.ComputationIdentifier = "multipart/form-data; boundary=****9a2a71f5-e148-48e5-b44f-3c1e18f7138d****";
        org.junit.Assert.assertNotNull(postDatumConvertedTimeSeries2);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ" + "'", str6, "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ");
        org.junit.Assert.assertNull(str7);
    }

    @Test
    public void test53075() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest106.test53075");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ActivityWithDetails activityWithDetails0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ActivityWithDetails();
        activityWithDetails0.LoggerFileName = "'.'SSSSSSS";
        java.time.OffsetDateTime offsetDateTime3 = activityWithDetails0.getEndTime();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.IndexConfiguration indexConfiguration4 = activityWithDetails0.getIndexConfiguration();
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationMinimal> observationMinimalList5 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ActivityWithDetails activityWithDetails6 = activityWithDetails0.setObservations(observationMinimalList5);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Device device7 = activityWithDetails0.getDevice();
        java.lang.Boolean boolean8 = activityWithDetails0.getRefreshed();
        java.time.OffsetDateTime offsetDateTime9 = activityWithDetails0.EndTime;
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricResult> metricResultList10 = activityWithDetails0.MetricResults;
        java.time.OffsetDateTime offsetDateTime11 = null;
        activityWithDetails0.EndTime = offsetDateTime11;
        java.lang.String str13 = activityWithDetails0.getComment();
        org.junit.Assert.assertNull(offsetDateTime3);
        org.junit.Assert.assertNull(indexConfiguration4);
        org.junit.Assert.assertNotNull(activityWithDetails6);
        org.junit.Assert.assertNull(device7);
        org.junit.Assert.assertNull(boolean8);
        org.junit.Assert.assertNull(offsetDateTime9);
        org.junit.Assert.assertNull(metricResultList10);
        org.junit.Assert.assertNull(str13);
    }

    @Test
    public void test53076() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest106.test53076");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.DeleteStandardReferenceDatum deleteStandardReferenceDatum0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.DeleteStandardReferenceDatum();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.DeleteStandardReferenceDatum deleteStandardReferenceDatum2 = deleteStandardReferenceDatum0.setStandardIdentifier("MaxInstant");
        java.lang.String str3 = deleteStandardReferenceDatum2.getLocationUniqueId();
        java.lang.String str4 = deleteStandardReferenceDatum2.LocationUniqueId;
        java.lang.String str5 = deleteStandardReferenceDatum2.StandardIdentifier;
        org.junit.Assert.assertNotNull(deleteStandardReferenceDatum2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "MaxInstant" + "'", str5, "MaxInstant");
    }

    @Test
    public void test53077() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest106.test53077");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetFieldVisits getFieldVisits0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetFieldVisits();
        java.lang.Integer int1 = getFieldVisits0.Limit;
        java.util.List<java.lang.String> strList2 = getFieldVisits0.getProjectIds();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetSpecimens getSpecimens3 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetSpecimens();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutUserV2 putUserV2_4 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutUserV2();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UserType userType5 = putUserV2_4.UserType;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetActivities getActivities6 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetActivities();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse7 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary8 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary10 = dischargeSummary8.setPublish((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse11 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant12 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse13 = locationDescriptionListServiceResponse11.setNextToken(instant12);
        dischargeSummary8.MeasurementTime = instant12;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse15 = locationDescriptionListServiceResponse7.setNextToken(instant12);
        java.time.Instant instant16 = locationDescriptionListServiceResponse7.getNextToken();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetActivities getActivities17 = getActivities6.setToStartTime(instant16);
        java.lang.String str18 = getActivities17.getSort();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_19 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.util.List<java.lang.String> strList20 = getObservationsV2_19.SamplingContextTagIds;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_21 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray23 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList24 = new java.util.ArrayList<java.lang.String>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList24, strArray23);
        getObservationsV2_21.SpecimenIds = strList24;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags27 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray31 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList32 = new java.util.ArrayList<java.lang.String>();
        boolean boolean33 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList32, strArray31);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags34 = putLocationTags27.setTagUniqueIds(strList32);
        getObservationsV2_21.QualityControlTypes = strList32;
        getObservationsV2_19.ResultGrades = strList32;
        getActivities17.Media = strList32;
        putUserV2_4.AccessGroups = strList32;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetSpecimens getSpecimens39 = getSpecimens3.setSamplingLocationIds((java.util.List<java.lang.String>) strList32);
        getFieldVisits0.PlanningStatuses = strList32;
        java.util.List<java.lang.String> strList41 = getFieldVisits0.getSamplingLocationIds();
        java.util.List<java.lang.String> strList42 = getFieldVisits0.Search;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetFieldVisits getFieldVisits44 = getFieldVisits0.setSort("9999-12-31T23:59:59.999Z");
        java.util.List<java.lang.String> strList45 = null;
        getFieldVisits44.PlanningStatuses = strList45;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CorrectionListServiceRequest correctionListServiceRequest47 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CorrectionListServiceRequest();
        correctionListServiceRequest47.TimeSeriesUniqueId = "/AQUARIUS";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse50 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary51 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary53 = dischargeSummary51.setPublish((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse54 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant55 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse56 = locationDescriptionListServiceResponse54.setNextToken(instant55);
        dischargeSummary51.MeasurementTime = instant55;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse58 = locationDescriptionListServiceResponse50.setNextToken(instant55);
        java.time.Instant instant59 = locationDescriptionListServiceResponse50.getNextToken();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest60 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ControlConditionActivity controlConditionActivity61 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ControlConditionActivity();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ControlCleanedType controlCleanedType62 = null;
        controlConditionActivity61.ControlCleaned = controlCleanedType62;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse64 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant65 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse66 = locationDescriptionListServiceResponse64.setNextToken(instant65);
        controlConditionActivity61.DateCleaned = instant65;
        timeAlignedDataServiceRequest60.QueryFrom = instant65;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse69 = locationDescriptionListServiceResponse50.setNextToken(instant65);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CorrectionListServiceRequest correctionListServiceRequest70 = correctionListServiceRequest47.setQueryTo(instant65);
        java.time.Instant instant71 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CorrectionListServiceRequest correctionListServiceRequest72 = correctionListServiceRequest70.setQueryTo(instant71);
        java.lang.String str73 = correctionListServiceRequest72.TimeSeriesUniqueId;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesApprovalsTransactionListServiceRequest timeSeriesApprovalsTransactionListServiceRequest74 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesApprovalsTransactionListServiceRequest();
        java.lang.String str75 = timeSeriesApprovalsTransactionListServiceRequest74.getTimeSeriesUniqueId();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ControlConditionActivity controlConditionActivity76 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ControlConditionActivity();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ControlCleanedType controlCleanedType77 = null;
        controlConditionActivity76.ControlCleaned = controlCleanedType77;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse79 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant80 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse81 = locationDescriptionListServiceResponse79.setNextToken(instant80);
        controlConditionActivity76.DateCleaned = instant80;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesApprovalsTransactionListServiceRequest timeSeriesApprovalsTransactionListServiceRequest83 = timeSeriesApprovalsTransactionListServiceRequest74.setQueryTo(instant80);
        correctionListServiceRequest72.QueryFrom = instant80;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetFieldVisits getFieldVisits85 = getFieldVisits44.setStartStartTime(instant80);
        org.junit.Assert.assertNull(int1);
        org.junit.Assert.assertNull(strList2);
        org.junit.Assert.assertNull(userType5);
        org.junit.Assert.assertNotNull(dischargeSummary10);
        org.junit.Assert.assertNotNull(instant12);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse13);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse15);
        org.junit.Assert.assertNotNull(instant16);
        org.junit.Assert.assertNotNull(getActivities17);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNull(strList20);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(putLocationTags34);
        org.junit.Assert.assertNotNull(getSpecimens39);
        org.junit.Assert.assertNull(strList41);
        org.junit.Assert.assertNull(strList42);
        org.junit.Assert.assertNotNull(getFieldVisits44);
        org.junit.Assert.assertNotNull(dischargeSummary53);
        org.junit.Assert.assertNotNull(instant55);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse56);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse58);
        org.junit.Assert.assertNotNull(instant59);
        org.junit.Assert.assertNotNull(instant65);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse66);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse69);
        org.junit.Assert.assertNotNull(correctionListServiceRequest70);
        org.junit.Assert.assertNotNull(instant71);
        org.junit.Assert.assertNotNull(correctionListServiceRequest72);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "/AQUARIUS" + "'", str73, "/AQUARIUS");
        org.junit.Assert.assertNull(str75);
        org.junit.Assert.assertNotNull(instant80);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse81);
        org.junit.Assert.assertNotNull(timeSeriesApprovalsTransactionListServiceRequest83);
        org.junit.Assert.assertNotNull(getFieldVisits85);
    }

    @Test
    public void test53078() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest106.test53078");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedPoint timeAlignedPoint0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedPoint();
        timeAlignedPoint0.Method9 = "multipart/form-data; boundary=****7eff1774-b6b0-471a-961c-156c64359366****";
        timeAlignedPoint0.DisplayValue9 = "";
        java.lang.String str5 = timeAlignedPoint0.getApprovalName4();
        java.lang.Long long6 = timeAlignedPoint0.getGradeCode3();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedPoint timeAlignedPoint8 = timeAlignedPoint0.setGradeCode2((java.lang.Long) 1L);
        java.lang.Long long9 = timeAlignedPoint8.ApprovalLevel6;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedPoint timeAlignedPoint11 = timeAlignedPoint8.setApprovalName1("http://MaxDurationhttp/json/reply/ArrayList");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedPoint timeAlignedPoint13 = timeAlignedPoint8.setApprovalLevel2((java.lang.Long) 1L);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedPoint timeAlignedPoint15 = timeAlignedPoint13.setApprovalLevel4((java.lang.Long) (-1L));
        timeAlignedPoint15.GradeCode1 = (-1L);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedPoint timeAlignedPoint19 = timeAlignedPoint15.setApprovalLevel6((java.lang.Long) (-1L));
        java.lang.String str20 = timeAlignedPoint15.getMethod3();
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(long6);
        org.junit.Assert.assertNotNull(timeAlignedPoint8);
        org.junit.Assert.assertNull(long9);
        org.junit.Assert.assertNotNull(timeAlignedPoint11);
        org.junit.Assert.assertNotNull(timeAlignedPoint13);
        org.junit.Assert.assertNotNull(timeAlignedPoint15);
        org.junit.Assert.assertNotNull(timeAlignedPoint19);
        org.junit.Assert.assertNull(str20);
    }

    @Test
    public void test53079() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest106.test53079");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSpreadsheetTemplate putSpreadsheetTemplate0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSpreadsheetTemplate();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpreadsheetTemplateType spreadsheetTemplateType1 = null;
        putSpreadsheetTemplate0.Type = spreadsheetTemplateType1;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpreadsheetTemplateType spreadsheetTemplateType3 = putSpreadsheetTemplate0.getType();
        java.lang.String str4 = putSpreadsheetTemplate0.CustomId;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.FieldTrip fieldTrip5 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.FieldTrip();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutFieldVisit putFieldVisit6 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutFieldVisit();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity[] plannedActivityArray7 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity> plannedActivityList8 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity>) plannedActivityList8, plannedActivityArray7);
        putFieldVisit6.PlannedActivities = plannedActivityList8;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment11 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment();
        java.lang.String str12 = domainObjectAttachment11.getId();
        java.lang.String str13 = domainObjectAttachment11.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Attachment attachment14 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment15 = domainObjectAttachment11.setAttachment(attachment14);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment16 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment();
        java.lang.String str17 = domainObjectAttachment16.getId();
        java.lang.String str18 = domainObjectAttachment16.getId();
        domainObjectAttachment16.Id = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment22 = domainObjectAttachment16.setId("hi!");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment23 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment();
        java.lang.String str24 = domainObjectAttachment23.getId();
        java.lang.String str25 = domainObjectAttachment23.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Attachment attachment26 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment27 = domainObjectAttachment23.setAttachment(attachment26);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment28 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment();
        java.lang.String str29 = domainObjectAttachment28.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment30 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment();
        java.lang.String str31 = domainObjectAttachment30.getId();
        java.lang.String str32 = domainObjectAttachment30.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Attachment attachment33 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment34 = domainObjectAttachment30.setAttachment(attachment33);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment35 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment();
        java.lang.String str36 = domainObjectAttachment35.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment[] domainObjectAttachmentArray37 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment[] { domainObjectAttachment11, domainObjectAttachment16, domainObjectAttachment23, domainObjectAttachment28, domainObjectAttachment30, domainObjectAttachment35 };
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment> domainObjectAttachmentList38 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment>();
        boolean boolean39 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment>) domainObjectAttachmentList38, domainObjectAttachmentArray37);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutFieldVisit putFieldVisit40 = putFieldVisit6.setAttachments((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment>) domainObjectAttachmentList38);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlan samplingPlan41 = putFieldVisit6.getSamplingPlan();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment42 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment43 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment();
        java.lang.String str44 = domainObjectAttachment43.getId();
        java.lang.String str45 = domainObjectAttachment43.getId();
        domainObjectAttachment43.Id = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment49 = domainObjectAttachment43.setId("hi!");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment[] domainObjectAttachmentArray50 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment[] { domainObjectAttachment42, domainObjectAttachment43 };
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment> domainObjectAttachmentList51 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment>();
        boolean boolean52 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment>) domainObjectAttachmentList51, domainObjectAttachmentArray50);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutFieldVisit putFieldVisit53 = putFieldVisit6.setAttachments((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment>) domainObjectAttachmentList51);
        fieldTrip5.Attachments = domainObjectAttachmentList51;
        putSpreadsheetTemplate0.Attachments = domainObjectAttachmentList51;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSpreadsheetTemplate putSpreadsheetTemplate57 = putSpreadsheetTemplate0.setDescription("/AQUARIUS/Provisioning/v1");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSpreadsheetTemplate putSpreadsheetTemplate59 = putSpreadsheetTemplate0.setId("multipart/form-data; boundary=****6b8051d4-caf2-4095-9f11-faa36b95fc28****");
        org.junit.Assert.assertNull(spreadsheetTemplateType3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNotNull(plannedActivityArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNotNull(domainObjectAttachment15);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNotNull(domainObjectAttachment22);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertNotNull(domainObjectAttachment27);
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertNotNull(domainObjectAttachment34);
        org.junit.Assert.assertNull(str36);
        org.junit.Assert.assertNotNull(domainObjectAttachmentArray37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(putFieldVisit40);
        org.junit.Assert.assertNull(samplingPlan41);
        org.junit.Assert.assertNull(str44);
        org.junit.Assert.assertNull(str45);
        org.junit.Assert.assertNotNull(domainObjectAttachment49);
        org.junit.Assert.assertNotNull(domainObjectAttachmentArray50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(putFieldVisit53);
        org.junit.Assert.assertNotNull(putSpreadsheetTemplate57);
        org.junit.Assert.assertNotNull(putSpreadsheetTemplate59);
    }

    @Test
    public void test53080() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest106.test53080");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DownchainProcessorListByRatingModelServiceRequest downchainProcessorListByRatingModelServiceRequest0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DownchainProcessorListByRatingModelServiceRequest();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeTransactionListServiceRequest metadataChangeTransactionListServiceRequest1 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeTransactionListServiceRequest();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostRecurringReport postRecurringReport2 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostRecurringReport();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary3 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        dischargeSummary3.Reviewer = "";
        java.time.Instant instant6 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        dischargeSummary3.MeasurementTime = instant6;
        postRecurringReport2.NextGenerationDate = instant6;
        java.time.Instant instant9 = postRecurringReport2.getNextGenerationDate();
        java.lang.String str10 = com.aquaticinformatics.aquarius.sdk.samples.serializers.InstantSerializer.format(instant9);
        metadataChangeTransactionListServiceRequest1.QueryFrom = instant9;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DownchainProcessorListByRatingModelServiceRequest downchainProcessorListByRatingModelServiceRequest12 = downchainProcessorListByRatingModelServiceRequest0.setQueryTo(instant9);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DownchainProcessorListByRatingModelServiceRequest downchainProcessorListByRatingModelServiceRequest14 = downchainProcessorListByRatingModelServiceRequest0.setRatingModelIdentifier("hi!");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Qualifier qualifier15 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Qualifier();
        java.time.Instant instant16 = qualifier15.DateApplied;
        java.lang.String str17 = qualifier15.User;
        java.lang.String str18 = qualifier15.getIdentifier();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest19 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest();
        java.lang.Object obj20 = timeAlignedDataServiceRequest19.getResponseType();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse21 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant22 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse23 = locationDescriptionListServiceResponse21.setNextToken(instant22);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest24 = timeAlignedDataServiceRequest19.setQueryFrom(instant22);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Qualifier qualifier25 = qualifier15.setDateApplied(instant22);
        java.time.Instant instant26 = qualifier25.getDateApplied();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DownchainProcessorListByRatingModelServiceRequest downchainProcessorListByRatingModelServiceRequest27 = downchainProcessorListByRatingModelServiceRequest0.setQueryFrom(instant26);
        java.lang.String str28 = downchainProcessorListByRatingModelServiceRequest0.getRatingModelIdentifier();
        java.time.Instant instant29 = downchainProcessorListByRatingModelServiceRequest0.QueryFrom;
        java.time.Instant instant30 = downchainProcessorListByRatingModelServiceRequest0.QueryFrom;
        org.junit.Assert.assertNotNull(instant6);
        org.junit.Assert.assertNotNull(instant9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "9999-12-31T23:59:59.999Z" + "'", str10, "9999-12-31T23:59:59.999Z");
        org.junit.Assert.assertNotNull(downchainProcessorListByRatingModelServiceRequest12);
        org.junit.Assert.assertNotNull(downchainProcessorListByRatingModelServiceRequest14);
        org.junit.Assert.assertNull(instant16);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNotNull(obj20);
        org.junit.Assert.assertEquals(obj20.toString(), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj20), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj20), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertNotNull(instant22);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse23);
        org.junit.Assert.assertNotNull(timeAlignedDataServiceRequest24);
        org.junit.Assert.assertNotNull(qualifier25);
        org.junit.Assert.assertNotNull(instant26);
        org.junit.Assert.assertNotNull(downchainProcessorListByRatingModelServiceRequest27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "hi!" + "'", str28, "hi!");
        org.junit.Assert.assertNotNull(instant29);
        org.junit.Assert.assertNotNull(instant30);
    }

    @Test
    public void test53081() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest106.test53081");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLabReport postLabReport0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLabReport();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFieldVisitActivityWithTemplate postFieldVisitActivityWithTemplate1 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFieldVisitActivityWithTemplate();
        java.lang.String str2 = postFieldVisitActivityWithTemplate1.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFieldVisitActivityWithTemplate postFieldVisitActivityWithTemplate4 = postFieldVisitActivityWithTemplate1.setCustomId("'.'SSSSSSS");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedFieldResult plannedFieldResult5 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedFieldResult();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes6 = plannedFieldResult5.AuditAttributes;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails7 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails9 = labResultDetails7.setAnalysisComment("/AQUARIUS/Acquisition/v2");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes10 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails11 = labResultDetails9.setAuditAttributes(auditAttributes10);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedFieldResult plannedFieldResult12 = plannedFieldResult5.setAuditAttributes(auditAttributes10);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroup analyticalGroup13 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroup();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupType analyticalGroupType14 = analyticalGroup13.getType();
        analyticalGroup13.Name = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSSSSSZZZZZ";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroup analyticalGroup17 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroup();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem analyticalGroupItem18 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod19 = analyticalGroupItem18.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem analyticalGroupItem20 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod21 = analyticalGroupItem20.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod22 = analyticalGroupItem20.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem analyticalGroupItem23 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod24 = analyticalGroupItem23.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod25 = analyticalGroupItem23.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod26 = null;
        analyticalGroupItem23.AnalysisMethod = analysisMethod26;
        java.lang.String str28 = analyticalGroupItem23.getHoldingTime();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem analyticalGroupItem29 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod30 = analyticalGroupItem29.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod31 = analyticalGroupItem29.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem analyticalGroupItem32 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod33 = analyticalGroupItem32.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem analyticalGroupItem34 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod35 = analyticalGroupItem34.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod36 = analyticalGroupItem34.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod37 = null;
        analyticalGroupItem34.AnalysisMethod = analysisMethod37;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem[] analyticalGroupItemArray39 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem[] { analyticalGroupItem18, analyticalGroupItem20, analyticalGroupItem23, analyticalGroupItem29, analyticalGroupItem32, analyticalGroupItem34 };
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem> analyticalGroupItemList40 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem>();
        boolean boolean41 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem>) analyticalGroupItemList40, analyticalGroupItemArray39);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroup analyticalGroup42 = analyticalGroup17.setAnalyticalGroupItems((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem>) analyticalGroupItemList40);
        analyticalGroup13.AnalyticalGroupItems = analyticalGroupItemList40;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes44 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes();
        analyticalGroup13.AuditAttributes = auditAttributes44;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedFieldResult plannedFieldResult46 = plannedFieldResult12.setAuditAttributes(auditAttributes44);
        postFieldVisitActivityWithTemplate4.AuditAttributes = auditAttributes44;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLabReport postLabReport48 = postLabReport0.setAuditAttributes(auditAttributes44);
        java.lang.String str49 = postLabReport48.CustomId;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLabReport postLabReport51 = postLabReport48.setQcSummary("hi!:///AQUARIUS/Provisioning/v1");
        postLabReport51.QcSummary = "/AQUARIUS/Acquisition/v2://9999-12-31T23:59:59.999Z";
        java.lang.Object obj54 = postLabReport51.getResponseType();
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNotNull(postFieldVisitActivityWithTemplate4);
        org.junit.Assert.assertNull(auditAttributes6);
        org.junit.Assert.assertNotNull(labResultDetails9);
        org.junit.Assert.assertNotNull(labResultDetails11);
        org.junit.Assert.assertNotNull(plannedFieldResult12);
        org.junit.Assert.assertNull(analyticalGroupType14);
        org.junit.Assert.assertNull(analysisMethod19);
        org.junit.Assert.assertNull(analysisMethod21);
        org.junit.Assert.assertNull(analysisMethod22);
        org.junit.Assert.assertNull(analysisMethod24);
        org.junit.Assert.assertNull(analysisMethod25);
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertNull(analysisMethod30);
        org.junit.Assert.assertNull(analysisMethod31);
        org.junit.Assert.assertNull(analysisMethod33);
        org.junit.Assert.assertNull(analysisMethod35);
        org.junit.Assert.assertNull(analysisMethod36);
        org.junit.Assert.assertNotNull(analyticalGroupItemArray39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(analyticalGroup42);
        org.junit.Assert.assertNotNull(plannedFieldResult46);
        org.junit.Assert.assertNotNull(postLabReport48);
        org.junit.Assert.assertNull(str49);
        org.junit.Assert.assertNotNull(postLabReport51);
        org.junit.Assert.assertNotNull(obj54);
        org.junit.Assert.assertEquals(obj54.toString(), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$LabReport");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj54), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$LabReport");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj54), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$LabReport");
    }

    @Test
    public void test53082() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest106.test53082");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportSummarySpecimen importSummarySpecimen0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportSummarySpecimen();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportSummarySpecimen importSummarySpecimen2 = importSummarySpecimen0.setSummaryReportText("/AQUARIUS/Provisioning/v1");
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemSpecimen> importItemSpecimenList3 = importSummarySpecimen0.ErrorImportItems;
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemSpecimen> importItemSpecimenList4 = importSummarySpecimen0.ErrorImportItems;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportSummarySpecimen importSummarySpecimen6 = importSummarySpecimen0.setSuccessCount((java.lang.Integer) 5);
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportError> importErrorList7 = null;
        importSummarySpecimen0.ImportJobErrors = importErrorList7;
        org.junit.Assert.assertNotNull(importSummarySpecimen2);
        org.junit.Assert.assertNull(importItemSpecimenList3);
        org.junit.Assert.assertNull(importItemSpecimenList4);
        org.junit.Assert.assertNotNull(importSummarySpecimen6);
    }

    @Test
    public void test53083() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest106.test53083");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemSamplingLocation importItemSamplingLocation0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemSamplingLocation();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemSamplingLocation importItemSamplingLocation2 = importItemSamplingLocation0.setInput("yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItem importItem3 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_4 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray6 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList7 = new java.util.ArrayList<java.lang.String>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList7, strArray6);
        getObservationsV2_4.SpecimenIds = strList7;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags10 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray14 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList15 = new java.util.ArrayList<java.lang.String>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList15, strArray14);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags17 = putLocationTags10.setTagUniqueIds(strList15);
        getObservationsV2_4.QualityControlTypes = strList15;
        java.util.List<java.lang.String> strList19 = getObservationsV2_4.getLabReportIds();
        importItem3.Errors = getObservationsV2_4;
        java.lang.Object obj21 = importItem3.getExistingItem();
        importItem3.Input = "hi!";
        java.lang.Object obj24 = importItem3.getItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemStatusType importItemStatusType25 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemStatusType.SKIPPED;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItem importItem26 = importItem3.setStatus(importItemStatusType25);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemSamplingLocation importItemSamplingLocation27 = importItemSamplingLocation2.setStatus(importItemStatusType25);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemStatusType importItemStatusType28 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemStatusType.ERROR;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemSamplingLocation importItemSamplingLocation29 = importItemSamplingLocation2.setStatus(importItemStatusType28);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ActivityWithDetails activityWithDetails30 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ActivityWithDetails();
        activityWithDetails30.LoggerFileName = "'.'SSSSSSS";
        java.time.OffsetDateTime offsetDateTime33 = activityWithDetails30.getEndTime();
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenNestedInActivity> specimenNestedInActivityList34 = activityWithDetails30.Specimens;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocation samplingLocation35 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocation();
        java.lang.String str36 = samplingLocation35.Description;
        java.lang.String str37 = samplingLocation35.VerticalCollectionMethod;
        java.lang.String str38 = samplingLocation35.getLongitude();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSamplingLocation putSamplingLocation39 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSamplingLocation();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSamplingLocation putSamplingLocation41 = putSamplingLocation39.setCustomId("https");
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationGroup> samplingLocationGroupList42 = putSamplingLocation41.getSamplingLocationGroups();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostSamplingLocation postSamplingLocation43 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostSamplingLocation();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple standardSimple44 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple();
        com.aquaticinformatics.aquarius.sdk.samples.Interval interval45 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple standardSimple46 = standardSimple44.setApplicabilityRange(interval45);
        java.lang.String str47 = standardSimple44.getCustomId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple standardSimple48 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple();
        com.aquaticinformatics.aquarius.sdk.samples.Interval interval49 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple standardSimple50 = standardSimple48.setApplicabilityRange(interval49);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple standardSimple52 = standardSimple48.setActive((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple standardSimple53 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple standardSimple54 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple();
        com.aquaticinformatics.aquarius.sdk.samples.Interval interval55 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple standardSimple56 = standardSimple54.setApplicabilityRange(interval55);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple standardSimple58 = standardSimple54.setActive((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple standardSimple59 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple();
        com.aquaticinformatics.aquarius.sdk.samples.Interval interval60 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple standardSimple61 = standardSimple59.setApplicabilityRange(interval60);
        java.lang.String str62 = standardSimple61.CustomId;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple standardSimple63 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple standardSimple64 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple standardSimple65 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple();
        com.aquaticinformatics.aquarius.sdk.samples.Interval interval66 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple standardSimple67 = standardSimple65.setApplicabilityRange(interval66);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple standardSimple68 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple();
        com.aquaticinformatics.aquarius.sdk.samples.Interval interval69 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple standardSimple70 = standardSimple68.setApplicabilityRange(interval69);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple[] standardSimpleArray71 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple[] { standardSimple44, standardSimple48, standardSimple53, standardSimple54, standardSimple61, standardSimple63, standardSimple64, standardSimple67, standardSimple68 };
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple> standardSimpleList72 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple>();
        boolean boolean73 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple>) standardSimpleList72, standardSimpleArray71);
        postSamplingLocation43.Standards = standardSimpleList72;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSamplingLocation putSamplingLocation75 = putSamplingLocation41.setStandards((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple>) standardSimpleList72);
        samplingLocation35.Standards = standardSimpleList72;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ActivityWithDetails activityWithDetails77 = activityWithDetails30.setSamplingLocation(samplingLocation35);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemSamplingLocation importItemSamplingLocation78 = importItemSamplingLocation29.setItem(samplingLocation35);
        org.junit.Assert.assertNotNull(importItemSamplingLocation2);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(putLocationTags17);
        org.junit.Assert.assertNull(strList19);
        org.junit.Assert.assertNull(obj21);
        org.junit.Assert.assertNull(obj24);
        org.junit.Assert.assertTrue("'" + importItemStatusType25 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemStatusType.SKIPPED + "'", importItemStatusType25.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemStatusType.SKIPPED));
        org.junit.Assert.assertNotNull(importItem26);
        org.junit.Assert.assertNotNull(importItemSamplingLocation27);
        org.junit.Assert.assertTrue("'" + importItemStatusType28 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemStatusType.ERROR + "'", importItemStatusType28.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemStatusType.ERROR));
        org.junit.Assert.assertNotNull(importItemSamplingLocation29);
        org.junit.Assert.assertNull(offsetDateTime33);
        org.junit.Assert.assertNull(specimenNestedInActivityList34);
        org.junit.Assert.assertNull(str36);
        org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertNull(str38);
        org.junit.Assert.assertNotNull(putSamplingLocation41);
        org.junit.Assert.assertNull(samplingLocationGroupList42);
        org.junit.Assert.assertNotNull(standardSimple46);
        org.junit.Assert.assertNull(str47);
        org.junit.Assert.assertNotNull(standardSimple50);
        org.junit.Assert.assertNotNull(standardSimple52);
        org.junit.Assert.assertNotNull(standardSimple56);
        org.junit.Assert.assertNotNull(standardSimple58);
        org.junit.Assert.assertNotNull(standardSimple61);
        org.junit.Assert.assertNull(str62);
        org.junit.Assert.assertNotNull(standardSimple67);
        org.junit.Assert.assertNotNull(standardSimple70);
        org.junit.Assert.assertNotNull(standardSimpleArray71);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertNotNull(putSamplingLocation75);
        org.junit.Assert.assertNotNull(activityWithDetails77);
        org.junit.Assert.assertNotNull(importItemSamplingLocation78);
    }

    @Test
    public void test53084() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest106.test53084");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostAccessGroup postAccessGroup0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostAccessGroup();
        java.lang.String str1 = postAccessGroup0.getName();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes2 = postAccessGroup0.AuditAttributes;
        java.lang.String str3 = postAccessGroup0.getDescription();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostExtendedAttribute postExtendedAttribute4 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostExtendedAttribute();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DataType dataType5 = null;
        postExtendedAttribute4.DataType = dataType5;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostExtendedAttribute postExtendedAttribute8 = postExtendedAttribute4.setCustomId("");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttributeListItem extendedAttributeListItem9 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttributeListItem();
        java.lang.String str10 = extendedAttributeListItem9.getId();
        java.lang.String str11 = extendedAttributeListItem9.getCustomId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttributeListItem extendedAttributeListItem12 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttributeListItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttributeListItem extendedAttributeListItem13 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttributeListItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttributeListItem extendedAttributeListItem14 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttributeListItem();
        java.lang.String str15 = extendedAttributeListItem14.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttributeListItem extendedAttributeListItem16 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttributeListItem();
        java.lang.String str17 = extendedAttributeListItem16.CustomId;
        extendedAttributeListItem16.Id = "POST";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttributeListItem[] extendedAttributeListItemArray20 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttributeListItem[] { extendedAttributeListItem9, extendedAttributeListItem12, extendedAttributeListItem13, extendedAttributeListItem14, extendedAttributeListItem16 };
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttributeListItem> extendedAttributeListItemList21 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttributeListItem>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttributeListItem>) extendedAttributeListItemList21, extendedAttributeListItemArray20);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostExtendedAttribute postExtendedAttribute23 = postExtendedAttribute8.setDropDownListItems((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttributeListItem>) extendedAttributeListItemList21);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DataType dataType24 = postExtendedAttribute8.getDataType();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity postActivity25 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity();
        postActivity25.LoggerFileName = "hi!";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity plannedActivity28 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity postActivity29 = postActivity25.setPlannedActivity(plannedActivity28);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ActivityType activityType30 = postActivity25.Type;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFieldVisitActivityWithTemplate postFieldVisitActivityWithTemplate31 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFieldVisitActivityWithTemplate();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate32 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate();
        specimenTemplate32.CustomId = "hi!";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate35 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate36 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate();
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabInstructionTemplate> labInstructionTemplateList37 = specimenTemplate36.getLabInstructionTemplates();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate38 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate40 = specimenTemplate38.setCustomId("hi!");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate41 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate42 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate();
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabInstructionTemplate> labInstructionTemplateList43 = specimenTemplate42.LabInstructionTemplates;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate[] specimenTemplateArray44 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate[] { specimenTemplate32, specimenTemplate35, specimenTemplate36, specimenTemplate40, specimenTemplate41, specimenTemplate42 };
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate> specimenTemplateList45 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate>) specimenTemplateList45, specimenTemplateArray44);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFieldVisitActivityWithTemplate postFieldVisitActivityWithTemplate47 = postFieldVisitActivityWithTemplate31.setSpecimenTemplates((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate>) specimenTemplateList45);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.CollectionMethod collectionMethod48 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.CollectionMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFieldVisitActivityWithTemplate postFieldVisitActivityWithTemplate49 = postFieldVisitActivityWithTemplate47.setCollectionMethod(collectionMethod48);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity postActivity50 = postActivity25.setCollectionMethod(collectionMethod48);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Medium medium51 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Medium();
        postActivity25.Medium = medium51;
        medium51.CustomId = "-PT87591240H";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroup analyticalGroup55 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroup();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupType analyticalGroupType56 = analyticalGroup55.getType();
        analyticalGroup55.Name = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSSSSSZZZZZ";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroup analyticalGroup59 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroup();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem analyticalGroupItem60 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod61 = analyticalGroupItem60.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem analyticalGroupItem62 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod63 = analyticalGroupItem62.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod64 = analyticalGroupItem62.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem analyticalGroupItem65 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod66 = analyticalGroupItem65.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod67 = analyticalGroupItem65.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod68 = null;
        analyticalGroupItem65.AnalysisMethod = analysisMethod68;
        java.lang.String str70 = analyticalGroupItem65.getHoldingTime();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem analyticalGroupItem71 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod72 = analyticalGroupItem71.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod73 = analyticalGroupItem71.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem analyticalGroupItem74 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod75 = analyticalGroupItem74.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem analyticalGroupItem76 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod77 = analyticalGroupItem76.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod78 = analyticalGroupItem76.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod79 = null;
        analyticalGroupItem76.AnalysisMethod = analysisMethod79;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem[] analyticalGroupItemArray81 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem[] { analyticalGroupItem60, analyticalGroupItem62, analyticalGroupItem65, analyticalGroupItem71, analyticalGroupItem74, analyticalGroupItem76 };
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem> analyticalGroupItemList82 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem>();
        boolean boolean83 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem>) analyticalGroupItemList82, analyticalGroupItemArray81);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroup analyticalGroup84 = analyticalGroup59.setAnalyticalGroupItems((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem>) analyticalGroupItemList82);
        analyticalGroup55.AnalyticalGroupItems = analyticalGroupItemList82;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes86 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes();
        analyticalGroup55.AuditAttributes = auditAttributes86;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Medium medium88 = medium51.setAuditAttributes(auditAttributes86);
        postExtendedAttribute8.AuditAttributes = auditAttributes86;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostAccessGroup postAccessGroup90 = postAccessGroup0.setAuditAttributes(auditAttributes86);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostAccessGroup postAccessGroup92 = postAccessGroup90.setId("http://MaxDurationhttp/json/reply/String");
        java.lang.String str93 = postAccessGroup92.getName();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(auditAttributes2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(postExtendedAttribute8);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertNotNull(extendedAttributeListItemArray20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(postExtendedAttribute23);
        org.junit.Assert.assertNull(dataType24);
        org.junit.Assert.assertNotNull(postActivity29);
        org.junit.Assert.assertNull(activityType30);
        org.junit.Assert.assertNull(labInstructionTemplateList37);
        org.junit.Assert.assertNotNull(specimenTemplate40);
        org.junit.Assert.assertNull(labInstructionTemplateList43);
        org.junit.Assert.assertNotNull(specimenTemplateArray44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(postFieldVisitActivityWithTemplate47);
        org.junit.Assert.assertNotNull(postFieldVisitActivityWithTemplate49);
        org.junit.Assert.assertNotNull(postActivity50);
        org.junit.Assert.assertNull(analyticalGroupType56);
        org.junit.Assert.assertNull(analysisMethod61);
        org.junit.Assert.assertNull(analysisMethod63);
        org.junit.Assert.assertNull(analysisMethod64);
        org.junit.Assert.assertNull(analysisMethod66);
        org.junit.Assert.assertNull(analysisMethod67);
        org.junit.Assert.assertNull(str70);
        org.junit.Assert.assertNull(analysisMethod72);
        org.junit.Assert.assertNull(analysisMethod73);
        org.junit.Assert.assertNull(analysisMethod75);
        org.junit.Assert.assertNull(analysisMethod77);
        org.junit.Assert.assertNull(analysisMethod78);
        org.junit.Assert.assertNotNull(analyticalGroupItemArray81);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + true + "'", boolean83 == true);
        org.junit.Assert.assertNotNull(analyticalGroup84);
        org.junit.Assert.assertNotNull(medium88);
        org.junit.Assert.assertNotNull(postAccessGroup90);
        org.junit.Assert.assertNotNull(postAccessGroup92);
        org.junit.Assert.assertNull(str93);
    }

    @Test
    public void test53085() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest106.test53085");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutActivityTemplate putActivityTemplate0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutActivityTemplate();
        java.lang.String str1 = putActivityTemplate0.getId();
        java.lang.String str2 = putActivityTemplate0.Id;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes3 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes5 = auditAttributes3.setCreationUserProfileId("'.'SSSSSSS");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutActivityTemplate putActivityTemplate6 = putActivityTemplate0.setAuditAttributes(auditAttributes5);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MediumType mediumType7 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MediumType.WATER;
        putActivityTemplate6.Medium = mediumType7;
        java.lang.String str9 = putActivityTemplate6.getComment();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.CollectionMethod collectionMethod10 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.CollectionMethod();
        collectionMethod10.Id = "yyyy'-'MM'-'dd'T'HH':'mm':'ss";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutActivityTemplate putActivityTemplate13 = putActivityTemplate6.setCollectionMethod(collectionMethod10);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFieldVisitActivityWithTemplate postFieldVisitActivityWithTemplate14 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFieldVisitActivityWithTemplate();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate15 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate();
        specimenTemplate15.CustomId = "hi!";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate18 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate19 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate();
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabInstructionTemplate> labInstructionTemplateList20 = specimenTemplate19.getLabInstructionTemplates();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate21 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate23 = specimenTemplate21.setCustomId("hi!");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate24 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate25 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate();
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabInstructionTemplate> labInstructionTemplateList26 = specimenTemplate25.LabInstructionTemplates;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate[] specimenTemplateArray27 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate[] { specimenTemplate15, specimenTemplate18, specimenTemplate19, specimenTemplate23, specimenTemplate24, specimenTemplate25 };
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate> specimenTemplateList28 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate>();
        boolean boolean29 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate>) specimenTemplateList28, specimenTemplateArray27);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFieldVisitActivityWithTemplate postFieldVisitActivityWithTemplate30 = postFieldVisitActivityWithTemplate14.setSpecimenTemplates((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate>) specimenTemplateList28);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ActivityTemplateType activityTemplateType31 = postFieldVisitActivityWithTemplate30.getType();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation32 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedFieldResult plannedFieldResult33 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation34 = observation32.setPlannedFieldResult(plannedFieldResult33);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultStatus resultStatus35 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation36 = observation34.setResultStatus(resultStatus35);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity postActivity37 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity();
        postActivity37.LoggerFileName = "hi!";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity plannedActivity40 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity postActivity41 = postActivity37.setPlannedActivity(plannedActivity40);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ActivityType activityType42 = postActivity37.Type;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFieldVisitActivityWithTemplate postFieldVisitActivityWithTemplate43 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFieldVisitActivityWithTemplate();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate44 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate();
        specimenTemplate44.CustomId = "hi!";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate47 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate48 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate();
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabInstructionTemplate> labInstructionTemplateList49 = specimenTemplate48.getLabInstructionTemplates();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate50 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate52 = specimenTemplate50.setCustomId("hi!");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate53 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate54 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate();
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabInstructionTemplate> labInstructionTemplateList55 = specimenTemplate54.LabInstructionTemplates;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate[] specimenTemplateArray56 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate[] { specimenTemplate44, specimenTemplate47, specimenTemplate48, specimenTemplate52, specimenTemplate53, specimenTemplate54 };
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate> specimenTemplateList57 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate>();
        boolean boolean58 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate>) specimenTemplateList57, specimenTemplateArray56);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFieldVisitActivityWithTemplate postFieldVisitActivityWithTemplate59 = postFieldVisitActivityWithTemplate43.setSpecimenTemplates((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate>) specimenTemplateList57);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.CollectionMethod collectionMethod60 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.CollectionMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFieldVisitActivityWithTemplate postFieldVisitActivityWithTemplate61 = postFieldVisitActivityWithTemplate59.setCollectionMethod(collectionMethod60);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity postActivity62 = postActivity37.setCollectionMethod(collectionMethod60);
        observation36.CollectionMethod = collectionMethod60;
        collectionMethod60.Name = "http";
        java.lang.String str66 = collectionMethod60.getCustomId();
        collectionMethod60.CustomId = "MinDuration";
        collectionMethod60.CustomId = "0001-01-01T00:00:00.000Z";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFieldVisitActivityWithTemplate postFieldVisitActivityWithTemplate71 = postFieldVisitActivityWithTemplate30.setCollectionMethod(collectionMethod60);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutActivityTemplate putActivityTemplate72 = putActivityTemplate6.setCollectionMethod(collectionMethod60);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.CollectionMethod collectionMethod74 = collectionMethod60.setName("http://MaxDurationhttp/json/reply/ArrayList");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.CollectionMethod collectionMethod76 = collectionMethod60.setName("MinDuration");
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNotNull(auditAttributes5);
        org.junit.Assert.assertNotNull(putActivityTemplate6);
        org.junit.Assert.assertTrue("'" + mediumType7 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MediumType.WATER + "'", mediumType7.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MediumType.WATER));
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(putActivityTemplate13);
        org.junit.Assert.assertNull(labInstructionTemplateList20);
        org.junit.Assert.assertNotNull(specimenTemplate23);
        org.junit.Assert.assertNull(labInstructionTemplateList26);
        org.junit.Assert.assertNotNull(specimenTemplateArray27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(postFieldVisitActivityWithTemplate30);
        org.junit.Assert.assertNull(activityTemplateType31);
        org.junit.Assert.assertNotNull(observation34);
        org.junit.Assert.assertNotNull(observation36);
        org.junit.Assert.assertNotNull(postActivity41);
        org.junit.Assert.assertNull(activityType42);
        org.junit.Assert.assertNull(labInstructionTemplateList49);
        org.junit.Assert.assertNotNull(specimenTemplate52);
        org.junit.Assert.assertNull(labInstructionTemplateList55);
        org.junit.Assert.assertNotNull(specimenTemplateArray56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(postFieldVisitActivityWithTemplate59);
        org.junit.Assert.assertNotNull(postFieldVisitActivityWithTemplate61);
        org.junit.Assert.assertNotNull(postActivity62);
        org.junit.Assert.assertNull(str66);
        org.junit.Assert.assertNotNull(postFieldVisitActivityWithTemplate71);
        org.junit.Assert.assertNotNull(putActivityTemplate72);
        org.junit.Assert.assertNotNull(collectionMethod74);
        org.junit.Assert.assertNotNull(collectionMethod76);
    }

    @Test
    public void test53086() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest106.test53086");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostSchedule postSchedule0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostSchedule();
        java.lang.String str1 = postSchedule0.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.RecurrenceType recurrenceType2 = postSchedule0.RecurrenceType;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostSchedule postSchedule3 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostSchedule();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationGroupSelectionType samplingLocationGroupSelectionType4 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationGroupSelectionType.ALL;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostSchedule postSchedule5 = postSchedule3.setSamplingLocationGroupSelectionType(samplingLocationGroupSelectionType4);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Schedule schedule6 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Schedule();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Schedule schedule8 = schedule6.setCustomId("");
        java.time.OffsetDateTime offsetDateTime9 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Schedule schedule10 = schedule6.setStartDate(offsetDateTime9);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.RecurrenceType recurrenceType11 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.RecurrenceType.MONTHLY;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Schedule schedule12 = schedule10.setRecurrenceType(recurrenceType11);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Schedule schedule14 = schedule12.setSamplingLocationGroupSelectionTypeRandomCount((java.lang.Integer) 4);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Schedule schedule15 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Schedule();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Schedule schedule17 = schedule15.setCustomId("");
        java.time.OffsetDateTime offsetDateTime18 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Schedule schedule19 = schedule15.setStartDate(offsetDateTime18);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.RecurrenceType recurrenceType20 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.RecurrenceType.MONTHLY;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Schedule schedule21 = schedule19.setRecurrenceType(recurrenceType20);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Schedule schedule22 = schedule14.setRecurrenceType(recurrenceType20);
        postSchedule5.RecurrenceType = recurrenceType20;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostSchedule postSchedule24 = postSchedule0.setRecurrenceType(recurrenceType20);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(recurrenceType2);
        org.junit.Assert.assertTrue("'" + samplingLocationGroupSelectionType4 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationGroupSelectionType.ALL + "'", samplingLocationGroupSelectionType4.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationGroupSelectionType.ALL));
        org.junit.Assert.assertNotNull(postSchedule5);
        org.junit.Assert.assertNotNull(schedule8);
        org.junit.Assert.assertNotNull(schedule10);
        org.junit.Assert.assertTrue("'" + recurrenceType11 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.RecurrenceType.MONTHLY + "'", recurrenceType11.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.RecurrenceType.MONTHLY));
        org.junit.Assert.assertNotNull(schedule12);
        org.junit.Assert.assertNotNull(schedule14);
        org.junit.Assert.assertNotNull(schedule17);
        org.junit.Assert.assertNotNull(schedule19);
        org.junit.Assert.assertTrue("'" + recurrenceType20 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.RecurrenceType.MONTHLY + "'", recurrenceType20.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.RecurrenceType.MONTHLY));
        org.junit.Assert.assertNotNull(schedule21);
        org.junit.Assert.assertNotNull(schedule22);
        org.junit.Assert.assertNotNull(postSchedule24);
    }

    @Test
    public void test53087() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest106.test53087");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostAnalyticalGroup postAnalyticalGroup0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostAnalyticalGroup();
        postAnalyticalGroup0.Id = "/AQUARIUS";
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem> analyticalGroupItemList3 = postAnalyticalGroup0.getAnalyticalGroupItems();
        postAnalyticalGroup0.NumberOfObservedPropertiesInGroupItems = 2;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostAnalyticalGroup postAnalyticalGroup7 = postAnalyticalGroup0.setId("multipart/form-data; boundary=****9fadde69-3f13-40c4-a87c-0f3f51c2dd35****");
        java.lang.Integer int8 = postAnalyticalGroup0.getNumberOfAnalysisMethodsInGroupItems();
        java.lang.Integer int9 = postAnalyticalGroup0.getNumberOfAnalysisMethodsInGroupItems();
        java.lang.Integer int10 = postAnalyticalGroup0.NumberOfAnalysisMethodsInGroupItems;
        org.junit.Assert.assertNull(analyticalGroupItemList3);
        org.junit.Assert.assertNotNull(postAnalyticalGroup7);
        org.junit.Assert.assertNull(int8);
        org.junit.Assert.assertNull(int9);
        org.junit.Assert.assertNull(int10);
    }

    @Test
    public void test53088() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest106.test53088");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ActiveMeterDetails activeMeterDetails0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ActiveMeterDetails();
        java.lang.String str1 = activeMeterDetails0.SoftwareVersion;
        java.lang.String str2 = activeMeterDetails0.Manufacturer;
        java.lang.String str3 = activeMeterDetails0.getFirmwareVersion();
        java.lang.String str4 = activeMeterDetails0.SerialNumber;
        java.lang.String str5 = activeMeterDetails0.getFirmwareVersion();
        java.lang.String str6 = activeMeterDetails0.getManufacturer();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CurrentMeter currentMeter8 = activeMeterDetails0.setSerialNumber("yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ");
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNotNull(currentMeter8);
    }

    @Test
    public void test53089() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest106.test53089");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation();
        observation0.CustomId = "hi!";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.CategoricalResult categoricalResult3 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation4 = observation0.setCategoricalResult(categoricalResult3);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple[] importHistoryEventSimpleArray5 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple> importHistoryEventSimpleList6 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple>) importHistoryEventSimpleList6, importHistoryEventSimpleArray5);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation8 = observation0.setImportHistoryEventSimples((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple>) importHistoryEventSimpleList6);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Taxon taxon9 = observation0.RelatedTaxon;
        java.time.OffsetDateTime offsetDateTime10 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation11 = observation0.setResultTime(offsetDateTime10);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedFieldResult plannedFieldResult12 = observation11.getPlannedFieldResult();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Specimen specimen13 = observation11.Specimen;
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttribute> extendedAttributeList14 = observation11.getExtendedAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedFieldResult plannedFieldResult15 = observation11.PlannedFieldResult;
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.RuleValidationDetails> ruleValidationDetailsList16 = observation11.ValidationWarnings;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultGrade resultGrade17 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultGrade();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultGradeSystemCodeType resultGradeSystemCodeType18 = resultGrade17.getSystemCode();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation19 = observation11.setResultGrade(resultGrade17);
        org.junit.Assert.assertNotNull(observation4);
        org.junit.Assert.assertNotNull(importHistoryEventSimpleArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(observation8);
        org.junit.Assert.assertNull(taxon9);
        org.junit.Assert.assertNotNull(observation11);
        org.junit.Assert.assertNull(plannedFieldResult12);
        org.junit.Assert.assertNull(specimen13);
        org.junit.Assert.assertNull(extendedAttributeList14);
        org.junit.Assert.assertNull(plannedFieldResult15);
        org.junit.Assert.assertNull(ruleValidationDetailsList16);
        org.junit.Assert.assertNull(resultGradeSystemCodeType18);
        org.junit.Assert.assertNotNull(observation19);
    }

    @Test
    public void test53090() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest106.test53090");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObject importItemObject0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObject();
        java.util.List<java.lang.String> strList1 = importItemObject0.getWarningMessages();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetSpecimens getSpecimens2 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetSpecimens();
        java.util.List<java.lang.String> strList3 = getSpecimens2.getActivityIds();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetSpecimens getSpecimens5 = getSpecimens2.setSort("MinDuration");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetChartDataV2 getChartDataV2_6 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetChartDataV2();
        java.lang.String str7 = getChartDataV2_6.getActivityCustomId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetChartDataV2 getChartDataV2_9 = getChartDataV2_6.setFilterId("");
        java.util.List<java.lang.String> strList10 = getChartDataV2_6.ResultGrades;
        getChartDataV2_6.MinNumericResultValue = 100.0d;
        java.lang.Double double13 = getChartDataV2_6.MaxNumericResultValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostTag postTag14 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostTag();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_15 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray18 = new java.lang.String[] { "", "" };
        java.util.ArrayList<java.lang.String> strList19 = new java.util.ArrayList<java.lang.String>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList19, strArray18);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_21 = getObservationsV2_15.setDataClassifications((java.util.List<java.lang.String>) strList19);
        postTag14.PickListValues = strList19;
        getChartDataV2_6.SamplingContextTagIds = strList19;
        getSpecimens2.ActivityTypes = strList19;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObject importItemObject25 = importItemObject0.setExistingItem((java.lang.Object) strList19);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.GetActiveDirectoryUser getActiveDirectoryUser26 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.GetActiveDirectoryUser();
        getActiveDirectoryUser26.UniqueId = "9999-12-31T23:59:59.999Z";
        importItemObject25.ExistingItem = getActiveDirectoryUser26;
        getActiveDirectoryUser26.UniqueId = "multipart/form-data; boundary=****1165d1f3-8b30-4f2e-8d0b-ffebab458859****";
        java.lang.String str32 = getActiveDirectoryUser26.UniqueId;
        org.junit.Assert.assertNull(strList1);
        org.junit.Assert.assertNull(strList3);
        org.junit.Assert.assertNotNull(getSpecimens5);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(getChartDataV2_9);
        org.junit.Assert.assertNull(strList10);
        org.junit.Assert.assertNull(double13);
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(getObservationsV2_21);
        org.junit.Assert.assertNotNull(importItemObject25);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "multipart/form-data; boundary=****1165d1f3-8b30-4f2e-8d0b-ffebab458859****" + "'", str32, "multipart/form-data; boundary=****1165d1f3-8b30-4f2e-8d0b-ffebab458859****");
    }

    @Test
    public void test53091() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest106.test53091");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostSchedule postSchedule0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostSchedule();
        java.time.OffsetDateTime offsetDateTime1 = postSchedule0.StartDate;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSchedule putSchedule2 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSchedule();
        java.time.OffsetDateTime offsetDateTime3 = putSchedule2.StartDate;
        java.time.OffsetDateTime offsetDateTime4 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSchedule putSchedule5 = putSchedule2.setEndDate(offsetDateTime4);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes6 = putSchedule5.AuditAttributes;
        java.time.OffsetDateTime offsetDateTime7 = putSchedule5.getEndDate();
        java.time.OffsetDateTime offsetDateTime8 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSchedule putSchedule9 = putSchedule5.setStartDate(offsetDateTime8);
        java.lang.Integer int10 = putSchedule5.SamplingLocationGroupSelectionTypeRandomCount;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.RecurrenceDayMonthlyType recurrenceDayMonthlyType11 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.RecurrenceDayMonthlyType.LAST_DAY_OF_MONTH;
        putSchedule5.RecurrenceDayMonthly = recurrenceDayMonthlyType11;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostSchedule postSchedule13 = postSchedule0.setRecurrenceDayMonthly(recurrenceDayMonthlyType11);
        java.time.OffsetDateTime offsetDateTime14 = postSchedule0.EndDate;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity postActivity15 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity();
        postActivity15.LoggerFileName = "hi!";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity postActivity19 = postActivity15.setCustomId("");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutActivity putActivity20 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutActivity();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity plannedActivity21 = null;
        putActivity20.PlannedActivity = plannedActivity21;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity postActivity23 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity();
        postActivity23.LoggerFileName = "hi!";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity plannedActivity26 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity postActivity27 = postActivity23.setPlannedActivity(plannedActivity26);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag samplingContextTag28 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag();
        java.lang.String str29 = samplingContextTag28.getDescription();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes30 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag samplingContextTag31 = samplingContextTag28.setAuditAttributes(auditAttributes30);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag samplingContextTag33 = samplingContextTag31.setId("yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag samplingContextTag34 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag();
        java.lang.String str35 = samplingContextTag34.getDescription();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag samplingContextTag36 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag();
        java.lang.String str37 = samplingContextTag36.getDescription();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes38 = null;
        samplingContextTag36.AuditAttributes = auditAttributes38;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag samplingContextTag40 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag();
        java.lang.String str41 = samplingContextTag40.getDescription();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes42 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag samplingContextTag43 = samplingContextTag40.setAuditAttributes(auditAttributes42);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag[] samplingContextTagArray44 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag[] { samplingContextTag33, samplingContextTag34, samplingContextTag36, samplingContextTag43 };
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag> samplingContextTagList45 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag>) samplingContextTagList45, samplingContextTagArray44);
        postActivity23.SamplingContextTags = samplingContextTagList45;
        putActivity20.SamplingContextTags = samplingContextTagList45;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity postActivity49 = postActivity19.setSamplingContextTags((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag>) samplingContextTagList45);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.CollectionMethod collectionMethod50 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.CollectionMethod();
        java.lang.String str51 = collectionMethod50.getCustomId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.CollectionMethod collectionMethod53 = collectionMethod50.setCustomId("MinDuration");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity postActivity54 = postActivity19.setCollectionMethod(collectionMethod53);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlan samplingPlan55 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlan();
        samplingPlan55.SamplingLocationGroupSelectionTypeRandomCount = 0;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationGroupSelectionType samplingLocationGroupSelectionType58 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationGroupSelectionType.ALL;
        samplingPlan55.SamplingLocationGroupSelectionType = samplingLocationGroupSelectionType58;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationGroup samplingLocationGroup60 = samplingPlan55.getSamplingLocationGroup();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes61 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlan samplingPlan62 = samplingPlan55.setAuditAttributes(auditAttributes61);
        collectionMethod53.AuditAttributes = auditAttributes61;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostSchedule postSchedule64 = postSchedule0.setAuditAttributes(auditAttributes61);
        java.lang.Integer int65 = postSchedule0.SamplingLocationGroupSelectionTypeRandomCount;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.RecurrenceDayMonthlyType recurrenceDayMonthlyType66 = postSchedule0.getRecurrenceDayMonthly();
        org.junit.Assert.assertNull(offsetDateTime1);
        org.junit.Assert.assertNull(offsetDateTime3);
        org.junit.Assert.assertNotNull(putSchedule5);
        org.junit.Assert.assertNull(auditAttributes6);
        org.junit.Assert.assertNull(offsetDateTime7);
        org.junit.Assert.assertNotNull(putSchedule9);
        org.junit.Assert.assertNull(int10);
        org.junit.Assert.assertTrue("'" + recurrenceDayMonthlyType11 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.RecurrenceDayMonthlyType.LAST_DAY_OF_MONTH + "'", recurrenceDayMonthlyType11.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.RecurrenceDayMonthlyType.LAST_DAY_OF_MONTH));
        org.junit.Assert.assertNotNull(postSchedule13);
        org.junit.Assert.assertNull(offsetDateTime14);
        org.junit.Assert.assertNotNull(postActivity19);
        org.junit.Assert.assertNotNull(postActivity27);
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertNotNull(samplingContextTag31);
        org.junit.Assert.assertNotNull(samplingContextTag33);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertNull(str41);
        org.junit.Assert.assertNotNull(samplingContextTag43);
        org.junit.Assert.assertNotNull(samplingContextTagArray44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(postActivity49);
        org.junit.Assert.assertNull(str51);
        org.junit.Assert.assertNotNull(collectionMethod53);
        org.junit.Assert.assertNotNull(postActivity54);
        org.junit.Assert.assertTrue("'" + samplingLocationGroupSelectionType58 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationGroupSelectionType.ALL + "'", samplingLocationGroupSelectionType58.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationGroupSelectionType.ALL));
        org.junit.Assert.assertNull(samplingLocationGroup60);
        org.junit.Assert.assertNotNull(samplingPlan62);
        org.junit.Assert.assertNotNull(postSchedule64);
        org.junit.Assert.assertNull(int65);
        org.junit.Assert.assertTrue("'" + recurrenceDayMonthlyType66 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.RecurrenceDayMonthlyType.LAST_DAY_OF_MONTH + "'", recurrenceDayMonthlyType66.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.RecurrenceDayMonthlyType.LAST_DAY_OF_MONTH));
    }

    @Test
    public void test53092() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest106.test53092");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSamplingLocation putSamplingLocation0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSamplingLocation();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSamplingLocation putSamplingLocation2 = putSamplingLocation0.setCustomId("https");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSamplingLocation putSamplingLocation4 = putSamplingLocation2.setVerticalCollectionMethod("POST");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSamplingLocation putSamplingLocation6 = putSamplingLocation2.setVerticalDatum("MinInstant");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation7 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedFieldResult plannedFieldResult8 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation9 = observation7.setPlannedFieldResult(plannedFieldResult8);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabInstruction labInstruction10 = null;
        observation9.LabInstruction = labInstruction10;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationStatistics observationStatistics12 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation13 = observation9.setStatistics(observationStatistics12);
        java.time.OffsetDateTime offsetDateTime14 = observation13.getResultTime();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity quantity15 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Unit unit16 = null;
        quantity15.Unit = unit16;
        observation13.Depth = quantity15;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSamplingLocation putSamplingLocation19 = putSamplingLocation6.setElevation(quantity15);
        putSamplingLocation6.Latitude = "multipart/form-data; boundary=****1844e1de-1bae-48cf-aab8-ac5571d6efc7****";
        org.junit.Assert.assertNotNull(putSamplingLocation2);
        org.junit.Assert.assertNotNull(putSamplingLocation4);
        org.junit.Assert.assertNotNull(putSamplingLocation6);
        org.junit.Assert.assertNotNull(observation9);
        org.junit.Assert.assertNotNull(observation13);
        org.junit.Assert.assertNull(offsetDateTime14);
        org.junit.Assert.assertNotNull(putSamplingLocation19);
    }

    @Test
    public void test53093() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest106.test53093");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostImportSamplingLocationsDryRun postImportSamplingLocationsDryRun0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostImportSamplingLocationsDryRun();
        java.lang.Object obj1 = postImportSamplingLocationsDryRun0.getResponseType();
        postImportSamplingLocationsDryRun0.FileType = "ZZZZZ";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostImportSamplingLocationsDryRun postImportSamplingLocationsDryRun5 = postImportSamplingLocationsDryRun0.setFileType("multipart/form-data; boundary=****73426a9f-8a73-4fda-95b3-78cea45bbfe9****");
        java.lang.String str6 = postImportSamplingLocationsDryRun5.FileType;
        org.junit.Assert.assertNotNull(obj1);
        org.junit.Assert.assertEquals(obj1.toString(), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$SamplingLocationImportSummary");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj1), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$SamplingLocationImportSummary");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj1), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$SamplingLocationImportSummary");
        org.junit.Assert.assertNotNull(postImportSamplingLocationsDryRun5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "multipart/form-data; boundary=****73426a9f-8a73-4fda-95b3-78cea45bbfe9****" + "'", str6, "multipart/form-data; boundary=****73426a9f-8a73-4fda-95b3-78cea45bbfe9****");
    }

    @Test
    public void test53094() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest106.test53094");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SearchResultProject searchResultProject0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SearchResultProject();
        java.lang.String str1 = searchResultProject0.getCursor();
        java.lang.String str2 = searchResultProject0.getCursor();
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Project> projectList3 = searchResultProject0.getDomainObjects();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(projectList3);
    }

    @Test
    public void test53095() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest106.test53095");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedFieldResult plannedFieldResult1 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation2 = observation0.setPlannedFieldResult(plannedFieldResult1);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabInstruction labInstruction3 = null;
        observation2.LabInstruction = labInstruction3;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationStatistics observationStatistics5 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation6 = observation2.setStatistics(observationStatistics5);
        java.time.OffsetDateTime offsetDateTime7 = observation6.getResultTime();
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple> importHistoryEventSimpleList8 = observation6.ImportHistoryEventSimples;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty observedProperty9 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation10 = observation6.setObservedProperty(observedProperty9);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultGrade resultGrade11 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation12 = observation6.setResultGrade(resultGrade11);
        java.time.OffsetDateTime offsetDateTime13 = observation12.getObservedTime();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Device device14 = observation12.Device;
        java.time.OffsetDateTime offsetDateTime15 = observation12.getResultTime();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation17 = observation12.setComment("9999-12-31T23:59:59.999Z");
        java.time.OffsetDateTime offsetDateTime18 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation19 = observation17.setObservedTime(offsetDateTime18);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation21 = observation17.setCustomId("multipart/form-data; boundary=****221f1588-b890-43c2-a3c8-0d77cfe54330****");
        org.junit.Assert.assertNotNull(observation2);
        org.junit.Assert.assertNotNull(observation6);
        org.junit.Assert.assertNull(offsetDateTime7);
        org.junit.Assert.assertNull(importHistoryEventSimpleList8);
        org.junit.Assert.assertNotNull(observation10);
        org.junit.Assert.assertNotNull(observation12);
        org.junit.Assert.assertNull(offsetDateTime13);
        org.junit.Assert.assertNull(device14);
        org.junit.Assert.assertNull(offsetDateTime15);
        org.junit.Assert.assertNotNull(observation17);
        org.junit.Assert.assertNotNull(observation19);
        org.junit.Assert.assertNotNull(observation21);
    }

    @Test
    public void test53096() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest106.test53096");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Report report0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Report();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Report report2 = report0.setUserName("/AQUARIUS/Acquisition/v2");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Report report4 = report2.setUserName("'.'SSSSSSS");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Report report6 = report4.setIsTransient((java.lang.Boolean) false);
        java.util.ArrayList<java.lang.String> strList7 = report4.SourceTimeSeriesUniqueIds;
        java.lang.String str8 = report4.getLocationUniqueId();
        org.junit.Assert.assertNotNull(report2);
        org.junit.Assert.assertNotNull(report4);
        org.junit.Assert.assertNotNull(report6);
        org.junit.Assert.assertNull(strList7);
        org.junit.Assert.assertNull(str8);
    }

    @Test
    public void test53097() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest106.test53097");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VolumetricDischargeReading volumetricDischargeReading0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VolumetricDischargeReading();
        java.lang.String str1 = volumetricDischargeReading0.getName();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VolumetricDischargeReading volumetricDischargeReading3 = volumetricDischargeReading0.setIsUsed((java.lang.Boolean) true);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary4 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        dischargeSummary4.Reviewer = "";
        java.time.Instant instant7 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        dischargeSummary4.MeasurementTime = instant7;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.BaseFlowType baseFlowType9 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.BaseFlowType.BaseFlow;
        dischargeSummary4.BaseFlow = baseFlowType9;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeUncertainty dischargeUncertainty11 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeUncertainty();
        dischargeSummary4.DischargeUncertainty = dischargeUncertainty11;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary13 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay14 = dischargeSummary13.getMeanGageHeight();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay15 = dischargeSummary13.Discharge;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay16 = dischargeSummary13.DurationInHours;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay17 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay19 = doubleWithDisplay17.setNumeric((java.lang.Double) 10.0d);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary20 = dischargeSummary13.setDurationInHours(doubleWithDisplay17);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeUncertainty dischargeUncertainty21 = dischargeUncertainty11.setQuantitativeUncertainty(doubleWithDisplay17);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VolumetricDischargeReading volumetricDischargeReading22 = volumetricDischargeReading0.setEndingVolume(doubleWithDisplay17);
        volumetricDischargeReading0.Name = "";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary25 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary27 = dischargeSummary25.setPublish((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay28 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay();
        dischargeSummary27.DifferenceDuringVisit = doubleWithDisplay28;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay31 = doubleWithDisplay28.setDisplay("");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VolumetricDischargeReading volumetricDischargeReading32 = volumetricDischargeReading0.setDischarge(doubleWithDisplay28);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay33 = null;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VolumetricDischargeReading volumetricDischargeReading34 = volumetricDischargeReading0.setVolumeChange(doubleWithDisplay33);
        java.lang.String str35 = volumetricDischargeReading0.Name;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VolumetricDischargeReading volumetricDischargeReading37 = volumetricDischargeReading0.setName("multipart/form-data; boundary=****59879c02-0839-4b96-bc41-a13ebb706be4****");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesPoint timeSeriesPoint38 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesPoint();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.StatisticalDateTimeOffset statisticalDateTimeOffset39 = timeSeriesPoint38.getTimestamp();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Reading reading40 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Reading();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay41 = reading40.getValue();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Reading reading43 = reading40.setParameterId("hi!");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Reading reading45 = reading43.setModel("MaxInstant");
        reading45.Comments = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ";
        java.time.Instant instant48 = reading45.Time;
        java.lang.String str49 = reading45.getUnit();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay50 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay();
        reading45.Value = doubleWithDisplay50;
        timeSeriesPoint38.Value = doubleWithDisplay50;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VolumetricDischargeReading volumetricDischargeReading53 = volumetricDischargeReading37.setDischarge(doubleWithDisplay50);
        java.lang.Double double54 = doubleWithDisplay50.getNumeric();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(volumetricDischargeReading3);
        org.junit.Assert.assertNotNull(instant7);
        org.junit.Assert.assertTrue("'" + baseFlowType9 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.BaseFlowType.BaseFlow + "'", baseFlowType9.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.BaseFlowType.BaseFlow));
        org.junit.Assert.assertNull(quantityWithDisplay14);
        org.junit.Assert.assertNull(quantityWithDisplay15);
        org.junit.Assert.assertNull(doubleWithDisplay16);
        org.junit.Assert.assertNotNull(doubleWithDisplay19);
        org.junit.Assert.assertNotNull(dischargeSummary20);
        org.junit.Assert.assertNotNull(dischargeUncertainty21);
        org.junit.Assert.assertNotNull(volumetricDischargeReading22);
        org.junit.Assert.assertNotNull(dischargeSummary27);
        org.junit.Assert.assertNotNull(doubleWithDisplay31);
        org.junit.Assert.assertNotNull(volumetricDischargeReading32);
        org.junit.Assert.assertNotNull(volumetricDischargeReading34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertNotNull(volumetricDischargeReading37);
        org.junit.Assert.assertNull(statisticalDateTimeOffset39);
        org.junit.Assert.assertNull(doubleWithDisplay41);
        org.junit.Assert.assertNotNull(reading43);
        org.junit.Assert.assertNotNull(reading45);
        org.junit.Assert.assertNull(instant48);
        org.junit.Assert.assertNull(str49);
        org.junit.Assert.assertNotNull(volumetricDischargeReading53);
        org.junit.Assert.assertNull(double54);
    }

    @Test
    public void test53098() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest106.test53098");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.LocationType locationType0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.LocationType();
        java.lang.String str1 = locationType0.getDescription();
        java.lang.String str2 = locationType0.getUniqueId();
        locationType0.AttributeTableName = "";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.LocationType locationType6 = locationType0.setDescription("yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSSSSSZZZZZ");
        locationType6.UniqueId = "2021.8.9990";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.LocationType locationType10 = locationType6.setDescription("yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ");
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNotNull(locationType6);
        org.junit.Assert.assertNotNull(locationType10);
    }

    @Test
    public void test53099() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest106.test53099");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.GetRecurringReport getRecurringReport0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.GetRecurringReport();
        getRecurringReport0.UniqueId = "'.'SSSSSSS";
        java.lang.String str3 = getRecurringReport0.getUniqueId();
        java.lang.String str4 = getRecurringReport0.UniqueId;
        getRecurringReport0.UniqueId = "multipart/form-data; boundary=****a6346bd6-b0e7-4290-a612-1b1730df8677****";
        java.lang.String str7 = getRecurringReport0.getUniqueId();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "'.'SSSSSSS" + "'", str3, "'.'SSSSSSS");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "'.'SSSSSSS" + "'", str4, "'.'SSSSSSS");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "multipart/form-data; boundary=****a6346bd6-b0e7-4290-a612-1b1730df8677****" + "'", str7, "multipart/form-data; boundary=****a6346bd6-b0e7-4290-a612-1b1730df8677****");
    }

    @Test
    public void test53100() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest106.test53100");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate();
        specimenTemplate0.CustomId = "hi!";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate4 = specimenTemplate0.setId("hi!");
        java.lang.Boolean boolean5 = specimenTemplate4.getFiltered();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate7 = specimenTemplate4.setFiltrationComment("hi!");
        java.lang.String str8 = specimenTemplate4.CustomId;
        java.lang.String str9 = specimenTemplate4.CustomId;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.RuleValidationDetails ruleValidationDetails10 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.RuleValidationDetails();
        java.lang.String str11 = ruleValidationDetails10.getType();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutActivity putActivity12 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutActivity();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity quantity13 = null;
        putActivity12.Depth = quantity13;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricResult[] metricResultArray15 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricResult[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricResult> metricResultList16 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricResult>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricResult>) metricResultList16, metricResultArray15);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutActivity putActivity18 = putActivity12.setMetricResults((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricResult>) metricResultList16);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutActivity putActivity20 = putActivity12.setLoggerFileName("");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Device device21 = putActivity20.getDevice();
        ruleValidationDetails10.Properties = putActivity20;
        java.lang.Object obj23 = ruleValidationDetails10.Properties;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroup analyticalGroup24 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroup();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem analyticalGroupItem25 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod26 = analyticalGroupItem25.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem analyticalGroupItem27 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod28 = analyticalGroupItem27.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod29 = analyticalGroupItem27.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem analyticalGroupItem30 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod31 = analyticalGroupItem30.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod32 = analyticalGroupItem30.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod33 = null;
        analyticalGroupItem30.AnalysisMethod = analysisMethod33;
        java.lang.String str35 = analyticalGroupItem30.getHoldingTime();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem analyticalGroupItem36 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod37 = analyticalGroupItem36.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod38 = analyticalGroupItem36.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem analyticalGroupItem39 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod40 = analyticalGroupItem39.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem analyticalGroupItem41 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod42 = analyticalGroupItem41.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod43 = analyticalGroupItem41.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod44 = null;
        analyticalGroupItem41.AnalysisMethod = analysisMethod44;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem[] analyticalGroupItemArray46 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem[] { analyticalGroupItem25, analyticalGroupItem27, analyticalGroupItem30, analyticalGroupItem36, analyticalGroupItem39, analyticalGroupItem41 };
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem> analyticalGroupItemList47 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem>();
        boolean boolean48 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem>) analyticalGroupItemList47, analyticalGroupItemArray46);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroup analyticalGroup49 = analyticalGroup24.setAnalyticalGroupItems((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem>) analyticalGroupItemList47);
        java.lang.Integer int50 = analyticalGroup49.NumberOfAnalysisMethodsInGroupItems;
        java.lang.Integer int51 = analyticalGroup49.getNumberOfAnalysisMethodsInGroupItems();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroup analyticalGroup53 = analyticalGroup49.setDescription("****231224c4-98ce-4e30-bd65-1d25287c4abe****");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroup analyticalGroup55 = analyticalGroup49.setDescription("http:///AQUARIUS/Acquisition/v2multipart/form-data; boundary=****44f0772e-c3ca-4316-8e2a-61ec8540d661****/v1/observedproperties/{id}/categoricalvalues");
        ruleValidationDetails10.Properties = analyticalGroup49;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate57 = specimenTemplate4.setAnalyticalGroup(analyticalGroup49);
        java.lang.String str58 = specimenTemplate4.getDescription();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PreservativeType preservativeType59 = specimenTemplate4.getPreservative();
        org.junit.Assert.assertNotNull(specimenTemplate4);
        org.junit.Assert.assertNull(boolean5);
        org.junit.Assert.assertNotNull(specimenTemplate7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "hi!" + "'", str9, "hi!");
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNotNull(metricResultArray15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(putActivity18);
        org.junit.Assert.assertNotNull(putActivity20);
        org.junit.Assert.assertNull(device21);
        org.junit.Assert.assertNotNull(obj23);
        org.junit.Assert.assertNull(analysisMethod26);
        org.junit.Assert.assertNull(analysisMethod28);
        org.junit.Assert.assertNull(analysisMethod29);
        org.junit.Assert.assertNull(analysisMethod31);
        org.junit.Assert.assertNull(analysisMethod32);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertNull(analysisMethod37);
        org.junit.Assert.assertNull(analysisMethod38);
        org.junit.Assert.assertNull(analysisMethod40);
        org.junit.Assert.assertNull(analysisMethod42);
        org.junit.Assert.assertNull(analysisMethod43);
        org.junit.Assert.assertNotNull(analyticalGroupItemArray46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(analyticalGroup49);
        org.junit.Assert.assertNull(int50);
        org.junit.Assert.assertNull(int51);
        org.junit.Assert.assertNotNull(analyticalGroup53);
        org.junit.Assert.assertNotNull(analyticalGroup55);
        org.junit.Assert.assertNotNull(specimenTemplate57);
        org.junit.Assert.assertNull(str58);
        org.junit.Assert.assertNull(preservativeType59);
    }

    @Test
    public void test53101() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest106.test53101");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetChartDataV2 getChartDataV2_0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetChartDataV2();
        java.lang.String str1 = getChartDataV2_0.getActivityCustomId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetChartDataV2 getChartDataV2_3 = getChartDataV2_0.setFilterId("");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_4 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.util.List<java.lang.String> strList5 = getObservationsV2_4.SamplingContextTagIds;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_6 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray8 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList9 = new java.util.ArrayList<java.lang.String>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList9, strArray8);
        getObservationsV2_6.SpecimenIds = strList9;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags12 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray16 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList17 = new java.util.ArrayList<java.lang.String>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList17, strArray16);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags19 = putLocationTags12.setTagUniqueIds(strList17);
        getObservationsV2_6.QualityControlTypes = strList17;
        getObservationsV2_4.ResultGrades = strList17;
        java.lang.Double double22 = getObservationsV2_4.getMinNumericResultValue();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DeleteFieldVisits deleteFieldVisits23 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DeleteFieldVisits();
        java.lang.String str24 = deleteFieldVisits23.Sort;
        deleteFieldVisits23.Sort = "9999-12-31T23:59:59.999Z";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_27 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray30 = new java.lang.String[] { "", "" };
        java.util.ArrayList<java.lang.String> strList31 = new java.util.ArrayList<java.lang.String>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList31, strArray30);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_33 = getObservationsV2_27.setDataClassifications((java.util.List<java.lang.String>) strList31);
        java.util.List<java.lang.String> strList34 = getObservationsV2_27.ResultGrades;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary35 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        dischargeSummary35.Reviewer = "";
        java.time.Instant instant38 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        dischargeSummary35.MeasurementTime = instant38;
        getObservationsV2_27.StartResultTime = instant38;
        java.lang.String[] strArray50 = new java.lang.String[] { "https", "/AQUARIUS/Provisioning/v1", "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ", "2021.4.62.0", "hi!", "2021.4.62.0", "2021.4.62.0", "/AQUARIUS/Acquisition/v2", "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ" };
        java.util.ArrayList<java.lang.String> strList51 = new java.util.ArrayList<java.lang.String>();
        boolean boolean52 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList51, strArray50);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_53 = getObservationsV2_27.setAnalyticalGroupIds((java.util.List<java.lang.String>) strList51);
        deleteFieldVisits23.PlanningStatuses = strList51;
        getObservationsV2_4.Media = strList51;
        getChartDataV2_0.SpecimenIds = strList51;
        java.lang.Integer int57 = getChartDataV2_0.getLimit();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetChartDataV2 getChartDataV2_59 = getChartDataV2_0.setDepthUnitId("/AQUARIUS/Acquisition/v2");
        java.util.List<java.lang.String> strList60 = getChartDataV2_0.getSamplingContextTagIds();
        java.lang.Double double61 = getChartDataV2_0.getDepthValue();
        java.time.Instant instant62 = getChartDataV2_0.StartModificationTime;
        getChartDataV2_0.ActivityCustomId = "http";
        getChartDataV2_0.ImportHistoryEventId = "multipart/form-data; boundary=****ee0ec537-fde4-45ee-9c35-68c37cf65c1c****";
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(getChartDataV2_3);
        org.junit.Assert.assertNull(strList5);
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(putLocationTags19);
        org.junit.Assert.assertNull(double22);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(getObservationsV2_33);
        org.junit.Assert.assertNull(strList34);
        org.junit.Assert.assertNotNull(instant38);
        org.junit.Assert.assertNotNull(strArray50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(getObservationsV2_53);
        org.junit.Assert.assertNull(int57);
        org.junit.Assert.assertNotNull(getChartDataV2_59);
        org.junit.Assert.assertNull(strList60);
        org.junit.Assert.assertNull(double61);
        org.junit.Assert.assertNull(instant62);
    }

    @Test
    public void test53102() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest106.test53102");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostCollectionMethod postCollectionMethod0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostCollectionMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity postActivity1 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity();
        postActivity1.LoggerFileName = "hi!";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity postActivity5 = postActivity1.setCustomId("");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes6 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity postActivity7 = postActivity5.setAuditAttributes(auditAttributes6);
        postCollectionMethod0.AuditAttributes = auditAttributes6;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UnitGroupWithUnits unitGroupWithUnits9 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UnitGroupWithUnits();
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Unit> unitList10 = unitGroupWithUnits9.Units;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes11 = unitGroupWithUnits9.AuditAttributes;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFieldVisitActivityFromPlannedActivity postFieldVisitActivityFromPlannedActivity12 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFieldVisitActivityFromPlannedActivity();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostDetectioncondition postDetectioncondition13 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostDetectioncondition();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes14 = postDetectioncondition13.getAuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostDetectioncondition postDetectioncondition16 = postDetectioncondition13.setId("9999-12-31T23:59:59.999Z");
        postDetectioncondition13.Description = "9999-12-31T23:59:59.999Z";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostDetectioncondition postDetectioncondition20 = postDetectioncondition13.setId("/AQUARIUS/Provisioning/v1");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostDetectioncondition postDetectioncondition22 = postDetectioncondition20.setId("MinInstant");
        postDetectioncondition22.SystemCode = "hi!";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Project project25 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Project();
        java.lang.String str26 = project25.getName();
        java.time.OffsetDateTime offsetDateTime27 = null;
        project25.EndTime = offsetDateTime27;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Project project30 = project25.setDescription("MaxInstant");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabInstructionTemplate labInstructionTemplate31 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabInstructionTemplate();
        java.lang.String str32 = labInstructionTemplate31.HoldingTime;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSchedule putSchedule33 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSchedule();
        java.time.OffsetDateTime offsetDateTime34 = putSchedule33.StartDate;
        java.time.OffsetDateTime offsetDateTime35 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSchedule putSchedule36 = putSchedule33.setEndDate(offsetDateTime35);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes37 = putSchedule36.AuditAttributes;
        java.time.OffsetDateTime offsetDateTime38 = null;
        putSchedule36.LastGenerationDate = offsetDateTime38;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.RecurrenceDayMonthlyType recurrenceDayMonthlyType40 = putSchedule36.RecurrenceDayMonthly;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedFieldResult plannedFieldResult41 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedFieldResult();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes42 = plannedFieldResult41.AuditAttributes;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails43 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails45 = labResultDetails43.setAnalysisComment("/AQUARIUS/Acquisition/v2");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes46 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails47 = labResultDetails45.setAuditAttributes(auditAttributes46);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedFieldResult plannedFieldResult48 = plannedFieldResult41.setAuditAttributes(auditAttributes46);
        putSchedule36.AuditAttributes = auditAttributes46;
        labInstructionTemplate31.AuditAttributes = auditAttributes46;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Project project51 = project25.setAuditAttributes(auditAttributes46);
        postDetectioncondition22.AuditAttributes = auditAttributes46;
        java.time.OffsetDateTime offsetDateTime53 = auditAttributes46.CreationTime;
        postFieldVisitActivityFromPlannedActivity12.AuditAttributes = auditAttributes46;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UnitGroupWithUnits unitGroupWithUnits55 = unitGroupWithUnits9.setAuditAttributes(auditAttributes46);
        postCollectionMethod0.AuditAttributes = auditAttributes46;
        org.junit.Assert.assertNotNull(postActivity5);
        org.junit.Assert.assertNotNull(postActivity7);
        org.junit.Assert.assertNull(unitList10);
        org.junit.Assert.assertNull(auditAttributes11);
        org.junit.Assert.assertNull(auditAttributes14);
        org.junit.Assert.assertNotNull(postDetectioncondition16);
        org.junit.Assert.assertNotNull(postDetectioncondition20);
        org.junit.Assert.assertNotNull(postDetectioncondition22);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertNotNull(project30);
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertNull(offsetDateTime34);
        org.junit.Assert.assertNotNull(putSchedule36);
        org.junit.Assert.assertNull(auditAttributes37);
        org.junit.Assert.assertNull(recurrenceDayMonthlyType40);
        org.junit.Assert.assertNull(auditAttributes42);
        org.junit.Assert.assertNotNull(labResultDetails45);
        org.junit.Assert.assertNotNull(labResultDetails47);
        org.junit.Assert.assertNotNull(plannedFieldResult48);
        org.junit.Assert.assertNotNull(project51);
        org.junit.Assert.assertNull(offsetDateTime53);
        org.junit.Assert.assertNotNull(unitGroupWithUnits55);
    }

    @Test
    public void test53103() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest106.test53103");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TrendLineAnalysisServiceResponse trendLineAnalysisServiceResponse0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TrendLineAnalysisServiceResponse();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TrendLineAnalysis trendLineAnalysis1 = trendLineAnalysisServiceResponse0.TrendLineAnalysis;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TrendLineAnalysis trendLineAnalysis2 = null;
        trendLineAnalysisServiceResponse0.TrendLineAnalysis = trendLineAnalysis2;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TrendLineAnalysis trendLineAnalysis4 = null;
        trendLineAnalysisServiceResponse0.TrendLineAnalysis = trendLineAnalysis4;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TrendLineAnalysis trendLineAnalysis6 = trendLineAnalysisServiceResponse0.TrendLineAnalysis;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TrendLineAnalysis trendLineAnalysis7 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TrendLineAnalysis();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay8 = trendLineAnalysis7.getSlope();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesPoint timeSeriesPoint9 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesPoint();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.StatisticalDateTimeOffset statisticalDateTimeOffset10 = timeSeriesPoint9.getTimestamp();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.StatisticalDateTimeOffset statisticalDateTimeOffset11 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.StatisticalDateTimeOffset();
        java.time.Instant instant12 = statisticalDateTimeOffset11.getDateTimeOffset();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesPoint timeSeriesPoint13 = timeSeriesPoint9.setTimestamp(statisticalDateTimeOffset11);
        trendLineAnalysis7.StartPoint = timeSeriesPoint9;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay15 = trendLineAnalysis7.getLowerQuartileOfResiduals();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TrendLineAnalysisServiceResponse trendLineAnalysisServiceResponse16 = trendLineAnalysisServiceResponse0.setTrendLineAnalysis(trendLineAnalysis7);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TrendLineAnalysis trendLineAnalysis17 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TrendLineAnalysis();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay18 = trendLineAnalysis17.getSlope();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesPoint timeSeriesPoint19 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesPoint();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.StatisticalDateTimeOffset statisticalDateTimeOffset20 = timeSeriesPoint19.getTimestamp();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.StatisticalDateTimeOffset statisticalDateTimeOffset21 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.StatisticalDateTimeOffset();
        java.time.Instant instant22 = statisticalDateTimeOffset21.getDateTimeOffset();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesPoint timeSeriesPoint23 = timeSeriesPoint19.setTimestamp(statisticalDateTimeOffset21);
        trendLineAnalysis17.StartPoint = timeSeriesPoint19;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.GroundWaterMeasurement groundWaterMeasurement25 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.GroundWaterMeasurement();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity pointVelocityDischargeActivity26 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity();
        java.lang.String str27 = pointVelocityDischargeActivity26.SoftwareVersion;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity pointVelocityDischargeActivity29 = pointVelocityDischargeActivity26.setIsValid((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay30 = pointVelocityDischargeActivity29.getVelocityAverage();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary31 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary33 = dischargeSummary31.setPublish((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay34 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay();
        dischargeSummary33.DifferenceDuringVisit = doubleWithDisplay34;
        java.lang.String str36 = doubleWithDisplay34.getDisplay();
        pointVelocityDischargeActivity29.MeanObservationDurationInSeconds = doubleWithDisplay34;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.GroundWaterMeasurement groundWaterMeasurement38 = groundWaterMeasurement25.setHold(doubleWithDisplay34);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VolumetricDischargeReading volumetricDischargeReading39 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VolumetricDischargeReading();
        java.lang.String str40 = volumetricDischargeReading39.getName();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary41 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay42 = dischargeSummary41.getMeanGageHeight();
        java.lang.String str43 = dischargeSummary41.getGageHeightComments();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary45 = dischargeSummary41.setPublish((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay46 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay48 = doubleWithDisplay46.setNumeric((java.lang.Double) 10.0d);
        dischargeSummary41.DurationInHours = doubleWithDisplay48;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VolumetricDischargeReading volumetricDischargeReading50 = volumetricDischargeReading39.setDischarge(doubleWithDisplay48);
        groundWaterMeasurement38.TapeCorrection = doubleWithDisplay48;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TrendLineAnalysis trendLineAnalysis52 = trendLineAnalysis17.setSlopeStandardError(doubleWithDisplay48);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay53 = trendLineAnalysis52.SlopeStandardError;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TrendLineAnalysisType trendLineAnalysisType54 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TrendLineAnalysisType.Linear;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TrendLineAnalysis trendLineAnalysis55 = trendLineAnalysis52.setType(trendLineAnalysisType54);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Reading reading56 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Reading();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary57 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary59 = dischargeSummary57.setPublish((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay60 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay();
        dischargeSummary59.DifferenceDuringVisit = doubleWithDisplay60;
        reading56.Value = doubleWithDisplay60;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TrendLineAnalysis trendLineAnalysis63 = trendLineAnalysis55.setMedianOfResiduals(doubleWithDisplay60);
        trendLineAnalysisServiceResponse16.TrendLineAnalysis = trendLineAnalysis63;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TrendLineAnalysis trendLineAnalysis65 = trendLineAnalysisServiceResponse16.getTrendLineAnalysis();
        org.junit.Assert.assertNull(trendLineAnalysis1);
        org.junit.Assert.assertNull(trendLineAnalysis6);
        org.junit.Assert.assertNull(doubleWithDisplay8);
        org.junit.Assert.assertNull(statisticalDateTimeOffset10);
        org.junit.Assert.assertNull(instant12);
        org.junit.Assert.assertNotNull(timeSeriesPoint13);
        org.junit.Assert.assertNull(doubleWithDisplay15);
        org.junit.Assert.assertNotNull(trendLineAnalysisServiceResponse16);
        org.junit.Assert.assertNull(doubleWithDisplay18);
        org.junit.Assert.assertNull(statisticalDateTimeOffset20);
        org.junit.Assert.assertNull(instant22);
        org.junit.Assert.assertNotNull(timeSeriesPoint23);
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertNotNull(pointVelocityDischargeActivity29);
        org.junit.Assert.assertNull(quantityWithDisplay30);
        org.junit.Assert.assertNotNull(dischargeSummary33);
        org.junit.Assert.assertNull(str36);
        org.junit.Assert.assertNotNull(groundWaterMeasurement38);
        org.junit.Assert.assertNull(str40);
        org.junit.Assert.assertNull(quantityWithDisplay42);
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertNotNull(dischargeSummary45);
        org.junit.Assert.assertNotNull(doubleWithDisplay48);
        org.junit.Assert.assertNotNull(volumetricDischargeReading50);
        org.junit.Assert.assertNotNull(trendLineAnalysis52);
        org.junit.Assert.assertNotNull(doubleWithDisplay53);
        org.junit.Assert.assertTrue("'" + trendLineAnalysisType54 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TrendLineAnalysisType.Linear + "'", trendLineAnalysisType54.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TrendLineAnalysisType.Linear));
        org.junit.Assert.assertNotNull(trendLineAnalysis55);
        org.junit.Assert.assertNotNull(dischargeSummary59);
        org.junit.Assert.assertNotNull(trendLineAnalysis63);
        org.junit.Assert.assertNotNull(trendLineAnalysis65);
    }

    @Test
    public void test53104() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest106.test53104");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LocationObservationsGroup locationObservationsGroup0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LocationObservationsGroup();
        java.lang.Integer int1 = locationObservationsGroup0.TotalCount;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocation samplingLocation2 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LocationObservationsGroup locationObservationsGroup3 = locationObservationsGroup0.setSamplingLocation(samplingLocation2);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocation samplingLocation4 = null;
        locationObservationsGroup3.SamplingLocation = samplingLocation4;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LocationObservationsGroup locationObservationsGroup7 = locationObservationsGroup3.setTotalCount((java.lang.Integer) 0);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocation samplingLocation8 = locationObservationsGroup7.getSamplingLocation();
        org.junit.Assert.assertNull(int1);
        org.junit.Assert.assertNotNull(locationObservationsGroup3);
        org.junit.Assert.assertNotNull(locationObservationsGroup7);
        org.junit.Assert.assertNull(samplingLocation8);
    }

    @Test
    public void test53105() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest106.test53105");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenWithObservations specimenWithObservations0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenWithObservations();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenWithObservations specimenWithObservations2 = specimenWithObservations0.setNumberOfReceivedObservations((java.lang.Integer) 1);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabReport labReport3 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabReport();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Laboratory laboratory4 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Laboratory();
        laboratory4.Id = "MaxInstant";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Laboratory laboratory8 = laboratory4.setName("hi!:///AQUARIUS/Provisioning/v1");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabReport labReport9 = labReport3.setLaboratory(laboratory8);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Laboratory laboratory10 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Laboratory();
        laboratory10.Id = "MaxInstant";
        java.lang.String str13 = laboratory10.PhoneNumber;
        laboratory10.Id = "/AQUARIUS/Acquisition/v2://9999-12-31T23:59:59.999Z";
        java.lang.String str16 = laboratory10.PointOfContact;
        labReport3.Laboratory = laboratory10;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenWithObservations specimenWithObservations18 = specimenWithObservations0.setLaboratory(laboratory10);
        laboratory10.Address = "http://MaxDurationhttp";
        java.lang.String str21 = laboratory10.Id;
        org.junit.Assert.assertNotNull(specimenWithObservations2);
        org.junit.Assert.assertNotNull(laboratory8);
        org.junit.Assert.assertNotNull(labReport9);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNotNull(specimenWithObservations18);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "/AQUARIUS/Acquisition/v2://9999-12-31T23:59:59.999Z" + "'", str21, "/AQUARIUS/Acquisition/v2://9999-12-31T23:59:59.999Z");
    }

    @Test
    public void test53106() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest106.test53106");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSchedule putSchedule0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSchedule();
        java.time.OffsetDateTime offsetDateTime1 = putSchedule0.StartDate;
        java.time.OffsetDateTime offsetDateTime2 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSchedule putSchedule3 = putSchedule0.setEndDate(offsetDateTime2);
        java.time.OffsetDateTime offsetDateTime4 = null;
        putSchedule3.EndDate = offsetDateTime4;
        java.lang.Integer int6 = putSchedule3.SamplingLocationGroupSelectionTypeRandomCount;
        org.junit.Assert.assertNull(offsetDateTime1);
        org.junit.Assert.assertNotNull(putSchedule3);
        org.junit.Assert.assertNull(int6);
    }

    @Test
    public void test53107() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest106.test53107");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationMinimal observationMinimal0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationMinimal();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty observedProperty1 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationMinimal observationMinimal2 = observationMinimal0.setObservedProperty(observedProperty1);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultStatus resultStatus3 = observationMinimal2.getResultStatus();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenNestedInActivity specimenNestedInActivity4 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationMinimal observationMinimal5 = observationMinimal2.setSpecimen(specimenNestedInActivity4);
        java.time.OffsetDateTime offsetDateTime6 = observationMinimal5.ResultTime;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DataClassificationType dataClassificationType7 = observationMinimal5.DataClassification;
        org.junit.Assert.assertNotNull(observationMinimal2);
        org.junit.Assert.assertNull(resultStatus3);
        org.junit.Assert.assertNotNull(observationMinimal5);
        org.junit.Assert.assertNull(offsetDateTime6);
        org.junit.Assert.assertNull(dataClassificationType7);
    }

    @Test
    public void test53108() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest106.test53108");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Vertical vertical0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Vertical();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay1 = vertical0.SegmentArea;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay2 = null;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Vertical vertical3 = vertical0.setEffectiveDepth(quantityWithDisplay2);
        java.lang.Boolean boolean4 = vertical0.IsSoundedDepthEstimated;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Vertical vertical5 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Vertical();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay6 = vertical5.SoundedDepth;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay7 = null;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Vertical vertical8 = vertical5.setSegmentDischarge(quantityWithDisplay7);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Vertical vertical10 = vertical8.setVerticalNumber((java.lang.Double) (-1.0d));
        vertical8.VerticalNumber = 100.0d;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MeasurementCondition measurementCondition13 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MeasurementCondition.Unknown;
        vertical8.MeasurementCondition = measurementCondition13;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Vertical vertical15 = vertical0.setMeasurementCondition(measurementCondition13);
        vertical15.IsSoundedDepthEstimated = true;
        org.junit.Assert.assertNull(quantityWithDisplay1);
        org.junit.Assert.assertNotNull(vertical3);
        org.junit.Assert.assertNull(boolean4);
        org.junit.Assert.assertNull(quantityWithDisplay6);
        org.junit.Assert.assertNotNull(vertical8);
        org.junit.Assert.assertNotNull(vertical10);
        org.junit.Assert.assertTrue("'" + measurementCondition13 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MeasurementCondition.Unknown + "'", measurementCondition13.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MeasurementCondition.Unknown));
        org.junit.Assert.assertNotNull(vertical15);
    }

    @Test
    public void test53109() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest106.test53109");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceResponse timeAlignedDataServiceResponse0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceResponse();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeRange timeRange1 = timeAlignedDataServiceResponse0.TimeRange;
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedTimeSeriesInfo> timeAlignedTimeSeriesInfoList2 = timeAlignedDataServiceResponse0.TimeSeries;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeRange timeRange3 = timeAlignedDataServiceResponse0.getTimeRange();
        org.junit.Assert.assertNull(timeRange1);
        org.junit.Assert.assertNull(timeAlignedTimeSeriesInfoList2);
        org.junit.Assert.assertNull(timeRange3);
    }

    @Test
    public void test53110() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest106.test53110");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CrossSectionSurveyActivity crossSectionSurveyActivity0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CrossSectionSurveyActivity();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.StartPointType startPointType1 = crossSectionSurveyActivity0.StartingPoint;
        java.time.Instant instant2 = crossSectionSurveyActivity0.EndTime;
        java.time.Instant instant3 = crossSectionSurveyActivity0.getEndTime();
        org.junit.Assert.assertNull(startPointType1);
        org.junit.Assert.assertNull(instant2);
        org.junit.Assert.assertNull(instant3);
    }

    @Test
    public void test53111() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest106.test53111");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemTaxon importItemTaxon0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemTaxon();
        java.util.List<java.lang.String> strList1 = importItemTaxon0.getWarningMessages();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Taxon taxon2 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemTaxon importItemTaxon3 = importItemTaxon0.setItem(taxon2);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostCalculatedDerivedTimeSeries postCalculatedDerivedTimeSeries4 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostCalculatedDerivedTimeSeries();
        java.lang.String str5 = postCalculatedDerivedTimeSeries4.LocationUniqueId;
        java.util.List<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeValue> extendedAttributeValueList6 = postCalculatedDerivedTimeSeries4.getExtendedAttributeValues();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemTaxon importItemTaxon7 = importItemTaxon3.setErrors((java.lang.Object) postCalculatedDerivedTimeSeries4);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObject importItemObject8 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObject();
        java.util.List<java.lang.String> strList9 = importItemObject8.getWarningMessages();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportChangeItem[] importChangeItemArray10 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportChangeItem[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportChangeItem> importChangeItemList11 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportChangeItem>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportChangeItem>) importChangeItemList11, importChangeItemArray10);
        importItemObject8.ItemComparison = importChangeItemList11;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags14 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray18 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList19 = new java.util.ArrayList<java.lang.String>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList19, strArray18);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags21 = putLocationTags14.setTagUniqueIds(strList19);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObject importItemObject22 = importItemObject8.setExistingItem((java.lang.Object) putLocationTags14);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.OpenIdConnectUser openIdConnectUser23 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.OpenIdConnectUser();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.OpenIdConnectUser openIdConnectUser25 = openIdConnectUser23.setIdentifier("");
        java.lang.Boolean boolean26 = openIdConnectUser25.CanConfigureSystem;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObject importItemObject27 = importItemObject8.setErrors((java.lang.Object) openIdConnectUser25);
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportChangeItem> importChangeItemList28 = importItemObject27.ItemComparison;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemTaxon importItemTaxon29 = importItemTaxon7.setItemComparison(importChangeItemList28);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemTaxon importItemTaxon30 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemTaxon();
        java.util.List<java.lang.String> strList31 = importItemTaxon30.getWarningMessages();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Taxon taxon32 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemTaxon importItemTaxon33 = importItemTaxon30.setItem(taxon32);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostCalculatedDerivedTimeSeries postCalculatedDerivedTimeSeries34 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostCalculatedDerivedTimeSeries();
        java.lang.String str35 = postCalculatedDerivedTimeSeries34.LocationUniqueId;
        java.util.List<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeValue> extendedAttributeValueList36 = postCalculatedDerivedTimeSeries34.getExtendedAttributeValues();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemTaxon importItemTaxon37 = importItemTaxon33.setErrors((java.lang.Object) postCalculatedDerivedTimeSeries34);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Taxon taxon38 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Taxon();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemTaxon importItemTaxon39 = importItemTaxon33.setExistingItem(taxon38);
        importItemTaxon7.Item = taxon38;
        taxon38.ItisTsn = "yyyy'-'MM'-'dd'T'HH':'mm':'ss";
        java.lang.String str43 = taxon38.ItisTsn;
        java.lang.String str44 = taxon38.getCommonName();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.TaxonomyLevel taxonomyLevel45 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.TaxonomyLevel();
        java.lang.String str46 = taxonomyLevel45.Id;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes47 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.TaxonomyLevel taxonomyLevel48 = taxonomyLevel45.setAuditAttributes(auditAttributes47);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.TaxonomyLevel taxonomyLevel50 = taxonomyLevel45.setCustomId("9999-12-31T23:59:59.999Z");
        taxonomyLevel45.CustomId = "'.'SSSSSSS";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.TaxonomyLevel taxonomyLevel54 = taxonomyLevel45.setCustomId("");
        taxonomyLevel45.CustomId = "-PT87591240H";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Taxon taxon57 = taxon38.setTaxonomyLevel(taxonomyLevel45);
        taxon57.Comment = "";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes60 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Taxon taxon61 = taxon57.setAuditAttributes(auditAttributes60);
        java.lang.String str62 = taxon57.getItisUrl();
        org.junit.Assert.assertNull(strList1);
        org.junit.Assert.assertNotNull(importItemTaxon3);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(extendedAttributeValueList6);
        org.junit.Assert.assertNotNull(importItemTaxon7);
        org.junit.Assert.assertNull(strList9);
        org.junit.Assert.assertNotNull(importChangeItemArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(putLocationTags21);
        org.junit.Assert.assertNotNull(importItemObject22);
        org.junit.Assert.assertNotNull(openIdConnectUser25);
        org.junit.Assert.assertNull(boolean26);
        org.junit.Assert.assertNotNull(importItemObject27);
        org.junit.Assert.assertNotNull(importChangeItemList28);
        org.junit.Assert.assertNotNull(importItemTaxon29);
        org.junit.Assert.assertNull(strList31);
        org.junit.Assert.assertNotNull(importItemTaxon33);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertNull(extendedAttributeValueList36);
        org.junit.Assert.assertNotNull(importItemTaxon37);
        org.junit.Assert.assertNotNull(importItemTaxon39);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "yyyy'-'MM'-'dd'T'HH':'mm':'ss" + "'", str43, "yyyy'-'MM'-'dd'T'HH':'mm':'ss");
        org.junit.Assert.assertNull(str44);
        org.junit.Assert.assertNull(str46);
        org.junit.Assert.assertNotNull(taxonomyLevel48);
        org.junit.Assert.assertNotNull(taxonomyLevel50);
        org.junit.Assert.assertNotNull(taxonomyLevel54);
        org.junit.Assert.assertNotNull(taxon57);
        org.junit.Assert.assertNotNull(taxon61);
        org.junit.Assert.assertNull(str62);
    }

    @Test
    public void test53112() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest106.test53112");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostAccessGroup postAccessGroup0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostAccessGroup();
        java.lang.String str1 = postAccessGroup0.getName();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes2 = postAccessGroup0.AuditAttributes;
        java.lang.Object obj3 = postAccessGroup0.getResponseType();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostAccessGroup postAccessGroup5 = postAccessGroup0.setId("multipart/form-data; boundary=****c82cca4e-7755-4a00-8acf-9ac791c56995****");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SearchResultSamplingLocationGroup searchResultSamplingLocationGroup6 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SearchResultSamplingLocationGroup();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutAccessGroup putAccessGroup7 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutAccessGroup();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostAccessGroup postAccessGroup8 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostAccessGroup();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationGroup[] samplingLocationGroupArray9 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationGroup[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationGroup> samplingLocationGroupList10 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationGroup>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationGroup>) samplingLocationGroupList10, samplingLocationGroupArray9);
        postAccessGroup8.SamplingLocationGroups = samplingLocationGroupList10;
        putAccessGroup7.SamplingLocationGroups = samplingLocationGroupList10;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SearchResultSamplingLocationGroup searchResultSamplingLocationGroup14 = searchResultSamplingLocationGroup6.setDomainObjects((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationGroup>) samplingLocationGroupList10);
        java.lang.String str15 = searchResultSamplingLocationGroup14.getCursor();
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationGroup> samplingLocationGroupList16 = searchResultSamplingLocationGroup14.getDomainObjects();
        postAccessGroup0.SamplingLocationGroups = samplingLocationGroupList16;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(auditAttributes2);
        org.junit.Assert.assertNotNull(obj3);
        org.junit.Assert.assertEquals(obj3.toString(), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$AccessGroup");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj3), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$AccessGroup");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj3), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$AccessGroup");
        org.junit.Assert.assertNotNull(postAccessGroup5);
        org.junit.Assert.assertNotNull(samplingLocationGroupArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(searchResultSamplingLocationGroup14);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNotNull(samplingLocationGroupList16);
    }

    @Test
    public void test53113() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest106.test53113");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SearchResultExtendedAttributeListItem searchResultExtendedAttributeListItem0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SearchResultExtendedAttributeListItem();
        searchResultExtendedAttributeListItem0.TotalCount = 10;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SearchResultExtendedAttributeListItem searchResultExtendedAttributeListItem4 = searchResultExtendedAttributeListItem0.setCursor("9999-12-31T23:59:59.999Z");
        searchResultExtendedAttributeListItem0.TotalCount = 10;
        java.lang.String str7 = searchResultExtendedAttributeListItem0.Cursor;
        org.junit.Assert.assertNotNull(searchResultExtendedAttributeListItem4);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "9999-12-31T23:59:59.999Z" + "'", str7, "9999-12-31T23:59:59.999Z");
    }

    @Test
    public void test53114() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest106.test53114");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.TaxonomicResult taxonomicResult0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.TaxonomicResult();
        taxonomicResult0.Id = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSSSSSZZZZZ";
        java.lang.String str3 = taxonomicResult0.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemTaxon importItemTaxon4 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemTaxon();
        java.util.List<java.lang.String> strList5 = importItemTaxon4.getWarningMessages();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Taxon taxon6 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemTaxon importItemTaxon7 = importItemTaxon4.setItem(taxon6);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostCalculatedDerivedTimeSeries postCalculatedDerivedTimeSeries8 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostCalculatedDerivedTimeSeries();
        java.lang.String str9 = postCalculatedDerivedTimeSeries8.LocationUniqueId;
        java.util.List<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeValue> extendedAttributeValueList10 = postCalculatedDerivedTimeSeries8.getExtendedAttributeValues();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemTaxon importItemTaxon11 = importItemTaxon7.setErrors((java.lang.Object) postCalculatedDerivedTimeSeries8);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObject importItemObject12 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObject();
        java.util.List<java.lang.String> strList13 = importItemObject12.getWarningMessages();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportChangeItem[] importChangeItemArray14 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportChangeItem[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportChangeItem> importChangeItemList15 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportChangeItem>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportChangeItem>) importChangeItemList15, importChangeItemArray14);
        importItemObject12.ItemComparison = importChangeItemList15;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags18 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray22 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList23 = new java.util.ArrayList<java.lang.String>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList23, strArray22);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags25 = putLocationTags18.setTagUniqueIds(strList23);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObject importItemObject26 = importItemObject12.setExistingItem((java.lang.Object) putLocationTags18);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.OpenIdConnectUser openIdConnectUser27 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.OpenIdConnectUser();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.OpenIdConnectUser openIdConnectUser29 = openIdConnectUser27.setIdentifier("");
        java.lang.Boolean boolean30 = openIdConnectUser29.CanConfigureSystem;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObject importItemObject31 = importItemObject12.setErrors((java.lang.Object) openIdConnectUser29);
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportChangeItem> importChangeItemList32 = importItemObject31.ItemComparison;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemTaxon importItemTaxon33 = importItemTaxon11.setItemComparison(importChangeItemList32);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemTaxon importItemTaxon34 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemTaxon();
        java.util.List<java.lang.String> strList35 = importItemTaxon34.getWarningMessages();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Taxon taxon36 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemTaxon importItemTaxon37 = importItemTaxon34.setItem(taxon36);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostCalculatedDerivedTimeSeries postCalculatedDerivedTimeSeries38 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostCalculatedDerivedTimeSeries();
        java.lang.String str39 = postCalculatedDerivedTimeSeries38.LocationUniqueId;
        java.util.List<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeValue> extendedAttributeValueList40 = postCalculatedDerivedTimeSeries38.getExtendedAttributeValues();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemTaxon importItemTaxon41 = importItemTaxon37.setErrors((java.lang.Object) postCalculatedDerivedTimeSeries38);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Taxon taxon42 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Taxon();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemTaxon importItemTaxon43 = importItemTaxon37.setExistingItem(taxon42);
        importItemTaxon11.Item = taxon42;
        taxon42.Source = "MaxDuration";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSchedule putSchedule47 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSchedule();
        java.time.OffsetDateTime offsetDateTime48 = putSchedule47.StartDate;
        java.time.OffsetDateTime offsetDateTime49 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSchedule putSchedule50 = putSchedule47.setEndDate(offsetDateTime49);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes51 = putSchedule50.AuditAttributes;
        java.time.OffsetDateTime offsetDateTime52 = putSchedule50.getEndDate();
        java.time.OffsetDateTime offsetDateTime53 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSchedule putSchedule54 = putSchedule50.setStartDate(offsetDateTime53);
        java.lang.Integer int55 = putSchedule50.SamplingLocationGroupSelectionTypeRandomCount;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.RecurrenceDayMonthlyType recurrenceDayMonthlyType56 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.RecurrenceDayMonthlyType.LAST_DAY_OF_MONTH;
        putSchedule50.RecurrenceDayMonthly = recurrenceDayMonthlyType56;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Unit unit58 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Unit();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes59 = unit58.AuditAttributes;
        unit58.BaseMultiplier = 0.0d;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutAccessGroup putAccessGroup62 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutAccessGroup();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivity samplingPlanPlannedActivity63 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivity();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes64 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivity samplingPlanPlannedActivity65 = samplingPlanPlannedActivity63.setAuditAttributes(auditAttributes64);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes66 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes68 = auditAttributes66.setCreationUserProfileId("'.'SSSSSSS");
        samplingPlanPlannedActivity65.AuditAttributes = auditAttributes66;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes70 = samplingPlanPlannedActivity65.AuditAttributes;
        putAccessGroup62.AuditAttributes = auditAttributes70;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Unit unit72 = unit58.setAuditAttributes(auditAttributes70);
        putSchedule50.AuditAttributes = auditAttributes70;
        java.lang.String str74 = auditAttributes70.getCreationUserProfileId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Taxon taxon75 = taxon42.setAuditAttributes(auditAttributes70);
        taxon42.ItisUrl = "multipart/form-data; boundary=****f2ce0d54-dac7-4cd0-b74f-1024089261f9****";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.TaxonomicResult taxonomicResult78 = taxonomicResult0.setTaxon(taxon42);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSSSSSZZZZZ" + "'", str3, "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSSSSSZZZZZ");
        org.junit.Assert.assertNull(strList5);
        org.junit.Assert.assertNotNull(importItemTaxon7);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNull(extendedAttributeValueList10);
        org.junit.Assert.assertNotNull(importItemTaxon11);
        org.junit.Assert.assertNull(strList13);
        org.junit.Assert.assertNotNull(importChangeItemArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(putLocationTags25);
        org.junit.Assert.assertNotNull(importItemObject26);
        org.junit.Assert.assertNotNull(openIdConnectUser29);
        org.junit.Assert.assertNull(boolean30);
        org.junit.Assert.assertNotNull(importItemObject31);
        org.junit.Assert.assertNotNull(importChangeItemList32);
        org.junit.Assert.assertNotNull(importItemTaxon33);
        org.junit.Assert.assertNull(strList35);
        org.junit.Assert.assertNotNull(importItemTaxon37);
        org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertNull(extendedAttributeValueList40);
        org.junit.Assert.assertNotNull(importItemTaxon41);
        org.junit.Assert.assertNotNull(importItemTaxon43);
        org.junit.Assert.assertNull(offsetDateTime48);
        org.junit.Assert.assertNotNull(putSchedule50);
        org.junit.Assert.assertNull(auditAttributes51);
        org.junit.Assert.assertNull(offsetDateTime52);
        org.junit.Assert.assertNotNull(putSchedule54);
        org.junit.Assert.assertNull(int55);
        org.junit.Assert.assertTrue("'" + recurrenceDayMonthlyType56 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.RecurrenceDayMonthlyType.LAST_DAY_OF_MONTH + "'", recurrenceDayMonthlyType56.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.RecurrenceDayMonthlyType.LAST_DAY_OF_MONTH));
        org.junit.Assert.assertNull(auditAttributes59);
        org.junit.Assert.assertNotNull(samplingPlanPlannedActivity65);
        org.junit.Assert.assertNotNull(auditAttributes68);
        org.junit.Assert.assertNotNull(auditAttributes70);
        org.junit.Assert.assertNotNull(unit72);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "'.'SSSSSSS" + "'", str74, "'.'SSSSSSS");
        org.junit.Assert.assertNotNull(taxon75);
        org.junit.Assert.assertNotNull(taxonomicResult78);
    }

    @Test
    public void test53115() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest106.test53115");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingModelOutputValuesServiceRequest ratingModelOutputValuesServiceRequest0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingModelOutputValuesServiceRequest();
        ratingModelOutputValuesServiceRequest0.ApplyShifts = true;
        java.time.Instant instant3 = ratingModelOutputValuesServiceRequest0.getEffectiveTime();
        java.lang.String str4 = ratingModelOutputValuesServiceRequest0.getRatingModelIdentifier();
        java.time.Instant instant5 = ratingModelOutputValuesServiceRequest0.EffectiveTime;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingModelOutputValuesServiceRequest ratingModelOutputValuesServiceRequest6 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingModelOutputValuesServiceRequest();
        ratingModelOutputValuesServiceRequest6.ApplyShifts = true;
        java.time.Instant instant9 = ratingModelOutputValuesServiceRequest6.getEffectiveTime();
        java.lang.String str10 = ratingModelOutputValuesServiceRequest6.getRatingModelIdentifier();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingModelOutputValuesServiceRequest ratingModelOutputValuesServiceRequest12 = ratingModelOutputValuesServiceRequest6.setApplyShifts((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingModelOutputValuesServiceRequest ratingModelOutputValuesServiceRequest14 = ratingModelOutputValuesServiceRequest12.setRatingModelIdentifier("yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingModelOutputValuesServiceResponse ratingModelOutputValuesServiceResponse15 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingModelOutputValuesServiceResponse();
        java.lang.Double[] doubleArray19 = new java.lang.Double[] { 1.0d, 100.0d, (-1.0d) };
        java.util.ArrayList<java.lang.Double> doubleList20 = new java.util.ArrayList<java.lang.Double>();
        boolean boolean21 = java.util.Collections.addAll((java.util.Collection<java.lang.Double>) doubleList20, doubleArray19);
        ratingModelOutputValuesServiceResponse15.OutputValues = doubleList20;
        ratingModelOutputValuesServiceRequest14.InputValues = doubleList20;
        ratingModelOutputValuesServiceRequest0.InputValues = doubleList20;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingModelInputValuesServiceResponse ratingModelInputValuesServiceResponse25 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingModelInputValuesServiceResponse();
        java.lang.Double[] doubleArray27 = new java.lang.Double[] { 0.0d };
        java.util.ArrayList<java.lang.Double> doubleList28 = new java.util.ArrayList<java.lang.Double>();
        boolean boolean29 = java.util.Collections.addAll((java.util.Collection<java.lang.Double>) doubleList28, doubleArray27);
        ratingModelInputValuesServiceResponse25.InputValues = doubleList28;
        java.util.ArrayList<java.lang.Double> doubleList31 = ratingModelInputValuesServiceResponse25.InputValues;
        java.util.ArrayList<java.lang.Double> doubleList32 = ratingModelInputValuesServiceResponse25.InputValues;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingModelOutputValuesServiceResponse ratingModelOutputValuesServiceResponse33 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingModelOutputValuesServiceResponse();
        java.lang.Double[] doubleArray37 = new java.lang.Double[] { 1.0d, 100.0d, (-1.0d) };
        java.util.ArrayList<java.lang.Double> doubleList38 = new java.util.ArrayList<java.lang.Double>();
        boolean boolean39 = java.util.Collections.addAll((java.util.Collection<java.lang.Double>) doubleList38, doubleArray37);
        ratingModelOutputValuesServiceResponse33.OutputValues = doubleList38;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingModelInputValuesServiceResponse ratingModelInputValuesServiceResponse41 = ratingModelInputValuesServiceResponse25.setInputValues(doubleList38);
        ratingModelOutputValuesServiceRequest0.InputValues = doubleList38;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Reading reading43 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Reading();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay44 = reading43.getValue();
        reading43.ReferencePointUniqueId = "hi!";
        java.lang.String str47 = reading43.Parameter;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary48 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary50 = dischargeSummary48.setPublish((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay51 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay();
        dischargeSummary50.DifferenceDuringVisit = doubleWithDisplay51;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay54 = doubleWithDisplay51.setNumeric((java.lang.Double) 100.0d);
        reading43.Value = doubleWithDisplay54;
        java.lang.Boolean boolean56 = reading43.isPublish();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Reading reading58 = reading43.setParameterId("/AQUARIUS/Acquisition/v2://9999-12-31T23:59:59.999Z");
        java.util.ArrayList<java.lang.String> strList59 = reading43.ReadingQualifiers;
        java.util.ArrayList<java.lang.String> strList60 = reading43.ReadingQualifiers;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationRemark locationRemark61 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationRemark();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationRemark locationRemark63 = locationRemark61.setDescription("MaxInstant");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationRemark locationRemark64 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationRemark();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationRemark locationRemark66 = locationRemark64.setDescription("MaxInstant");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse67 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant68 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse69 = locationDescriptionListServiceResponse67.setNextToken(instant68);
        locationRemark66.FromTime = instant68;
        locationRemark63.CreateTime = instant68;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Reading reading72 = reading43.setTime(instant68);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingModelOutputValuesServiceRequest ratingModelOutputValuesServiceRequest73 = ratingModelOutputValuesServiceRequest0.setEffectiveTime(instant68);
        org.junit.Assert.assertNull(instant3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(instant5);
        org.junit.Assert.assertNull(instant9);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNotNull(ratingModelOutputValuesServiceRequest12);
        org.junit.Assert.assertNotNull(ratingModelOutputValuesServiceRequest14);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(doubleList31);
        org.junit.Assert.assertNotNull(doubleList32);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(ratingModelInputValuesServiceResponse41);
        org.junit.Assert.assertNull(doubleWithDisplay44);
        org.junit.Assert.assertNull(str47);
        org.junit.Assert.assertNotNull(dischargeSummary50);
        org.junit.Assert.assertNotNull(doubleWithDisplay54);
        org.junit.Assert.assertNull(boolean56);
        org.junit.Assert.assertNotNull(reading58);
        org.junit.Assert.assertNull(strList59);
        org.junit.Assert.assertNull(strList60);
        org.junit.Assert.assertNotNull(locationRemark63);
        org.junit.Assert.assertNotNull(locationRemark66);
        org.junit.Assert.assertNotNull(instant68);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse69);
        org.junit.Assert.assertNotNull(reading72);
        org.junit.Assert.assertNotNull(ratingModelOutputValuesServiceRequest73);
    }

    @Test
    public void test53116() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest106.test53116");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SearchResultUser searchResultUser0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SearchResultUser();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SearchResultUser searchResultUser2 = searchResultUser0.setTotalCount((java.lang.Integer) (-1));
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SearchResultUser searchResultUser4 = searchResultUser2.setTotalCount((java.lang.Integer) 10);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SearchResultUser searchResultUser5 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SearchResultUser();
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.User> userList6 = searchResultUser5.DomainObjects;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SearchResultUser searchResultUser8 = searchResultUser5.setTotalCount((java.lang.Integer) 1);
        java.lang.String str9 = searchResultUser8.getCursor();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SearchResultUser searchResultUser10 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SearchResultUser();
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.User> userList11 = searchResultUser10.DomainObjects;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SearchResultUser searchResultUser13 = searchResultUser10.setTotalCount((java.lang.Integer) 1);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.User[] userArray14 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.User[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.User> userList15 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.User>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.User>) userList15, userArray14);
        searchResultUser13.DomainObjects = userList15;
        searchResultUser8.DomainObjects = userList15;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SearchResultUser searchResultUser19 = searchResultUser2.setDomainObjects((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.User>) userList15);
        org.junit.Assert.assertNotNull(searchResultUser2);
        org.junit.Assert.assertNotNull(searchResultUser4);
        org.junit.Assert.assertNull(userList6);
        org.junit.Assert.assertNotNull(searchResultUser8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNull(userList11);
        org.junit.Assert.assertNotNull(searchResultUser13);
        org.junit.Assert.assertNotNull(userArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(searchResultUser19);
    }

    @Test
    public void test53117() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest106.test53117");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QualifierMetadata qualifierMetadata0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QualifierMetadata();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QualifierMetadata qualifierMetadata2 = qualifierMetadata0.setDisplayName("multipart/form-data; boundary=****c82cca4e-7755-4a00-8acf-9ac791c56995****");
        qualifierMetadata2.DisplayName = "multipart/form-data; boundary=****f2ce0d54-dac7-4cd0-b74f-1024089261f9****";
        java.lang.String str5 = qualifierMetadata2.Identifier;
        qualifierMetadata2.Code = "multipart/form-data; boundary=****ebf59e0e-2d1f-43bc-996f-3c628a80f696****";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QualifierMetadata qualifierMetadata9 = qualifierMetadata2.setIdentifier("0001-01-01T00:00:00.0000000Z");
        java.lang.String str10 = qualifierMetadata2.getDisplayName();
        org.junit.Assert.assertNotNull(qualifierMetadata2);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(qualifierMetadata9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "multipart/form-data; boundary=****f2ce0d54-dac7-4cd0-b74f-1024089261f9****" + "'", str10, "multipart/form-data; boundary=****f2ce0d54-dac7-4cd0-b74f-1024089261f9****");
    }

    @Test
    public void test53118() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest106.test53118");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationUserRole putLocationUserRole0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationUserRole();
        java.lang.String str1 = putLocationUserRole0.getLocationUniqueId();
        java.lang.String str2 = putLocationUserRole0.getLocationUniqueId();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationUserRole putLocationUserRole4 = putLocationUserRole0.setLocationUniqueId("http://MaxDurationhttp/json/reply/Integer");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutUserRoleBase putUserRoleBase6 = putLocationUserRole4.setUserUniqueId("");
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNotNull(putLocationUserRole4);
        org.junit.Assert.assertNotNull(putUserRoleBase6);
    }

    @Test
    public void test53119() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest106.test53119");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostImportVerticalProfileData postImportVerticalProfileData0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostImportVerticalProfileData();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostImportVerticalProfileData postImportVerticalProfileData2 = postImportVerticalProfileData0.setActivityId("MinInstant");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostImportVerticalProfileData postImportVerticalProfileData4 = postImportVerticalProfileData0.setSamplingLocationIds("");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostImportVerticalProfileData postImportVerticalProfileData6 = postImportVerticalProfileData0.setSamplingLocationIds("https");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostImportVerticalProfileData postImportVerticalProfileData8 = postImportVerticalProfileData6.setSamplingLocationIds("yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSSSSSZZZZZ");
        java.lang.String str9 = postImportVerticalProfileData6.ActivityId;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostImportVerticalProfileData postImportVerticalProfileData11 = postImportVerticalProfileData6.setSamplingLocationIds("multipart/form-data; boundary=****ee0ec537-fde4-45ee-9c35-68c37cf65c1c****");
        postImportVerticalProfileData11.TimeZoneOffset = "9999-12-31T23:59:59.999Z";
        postImportVerticalProfileData11.ActivityId = "multipart/form-data; boundary=****e0afd3ef-ab93-4371-a368-4a6f5ef58c71****";
        org.junit.Assert.assertNotNull(postImportVerticalProfileData2);
        org.junit.Assert.assertNotNull(postImportVerticalProfileData4);
        org.junit.Assert.assertNotNull(postImportVerticalProfileData6);
        org.junit.Assert.assertNotNull(postImportVerticalProfileData8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "MinInstant" + "'", str9, "MinInstant");
        org.junit.Assert.assertNotNull(postImportVerticalProfileData11);
    }

    @Test
    public void test53120() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest106.test53120");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.DeleteExtendedAttribute deleteExtendedAttribute0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.DeleteExtendedAttribute();
        java.lang.String str1 = deleteExtendedAttribute0.UniqueId;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.DeleteExtendedAttribute deleteExtendedAttribute3 = deleteExtendedAttribute0.setUniqueId("0001-01-01T00:00:00.000Z");
        deleteExtendedAttribute0.UniqueId = "/AQUARIUS/Acquisition/v2";
        java.lang.String str6 = deleteExtendedAttribute0.getUniqueId();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(deleteExtendedAttribute3);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "/AQUARIUS/Acquisition/v2" + "'", str6, "/AQUARIUS/Acquisition/v2");
    }

    @Test
    public void test53121() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest106.test53121");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SearchResultObservation searchResultObservation0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SearchResultObservation();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SearchResultObservation searchResultObservation2 = searchResultObservation0.setTotalCount((java.lang.Integer) 2);
        searchResultObservation2.Cursor = "multipart/form-data; boundary=****d9f5d551-383a-4365-87fd-ae7094da6f3b****";
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation> observationList5 = searchResultObservation2.DomainObjects;
        org.junit.Assert.assertNotNull(searchResultObservation2);
        org.junit.Assert.assertNull(observationList5);
    }

    @Test
    public void test53122() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest106.test53122");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetFieldVisits getFieldVisits0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetFieldVisits();
        java.lang.Integer int1 = getFieldVisits0.Limit;
        java.util.List<java.lang.String> strList2 = getFieldVisits0.getProjectIds();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetGroupedObservationsV2 getGroupedObservationsV2_3 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetGroupedObservationsV2();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutBulkEditResultGradesV2 putBulkEditResultGradesV2_4 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutBulkEditResultGradesV2();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_5 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String str6 = getObservationsV2_5.getCustomId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_7 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray9 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList10 = new java.util.ArrayList<java.lang.String>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList10, strArray9);
        getObservationsV2_7.SpecimenIds = strList10;
        getObservationsV2_5.ProjectIds = strList10;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutBulkEditResultGradesV2 putBulkEditResultGradesV2_14 = putBulkEditResultGradesV2_4.setTaxonIds((java.util.List<java.lang.String>) strList10);
        java.lang.Double double15 = putBulkEditResultGradesV2_14.NumericResultValue;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_16 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray19 = new java.lang.String[] { "", "" };
        java.util.ArrayList<java.lang.String> strList20 = new java.util.ArrayList<java.lang.String>();
        boolean boolean21 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList20, strArray19);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_22 = getObservationsV2_16.setDataClassifications((java.util.List<java.lang.String>) strList20);
        java.util.List<java.lang.String> strList23 = getObservationsV2_16.ResultGrades;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary24 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        dischargeSummary24.Reviewer = "";
        java.time.Instant instant27 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        dischargeSummary24.MeasurementTime = instant27;
        getObservationsV2_16.StartResultTime = instant27;
        java.lang.String[] strArray39 = new java.lang.String[] { "https", "/AQUARIUS/Provisioning/v1", "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ", "2021.4.62.0", "hi!", "2021.4.62.0", "2021.4.62.0", "/AQUARIUS/Acquisition/v2", "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ" };
        java.util.ArrayList<java.lang.String> strList40 = new java.util.ArrayList<java.lang.String>();
        boolean boolean41 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList40, strArray39);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_42 = getObservationsV2_16.setAnalyticalGroupIds((java.util.List<java.lang.String>) strList40);
        putBulkEditResultGradesV2_14.ActivityTypes = strList40;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetGroupedObservationsV2 getGroupedObservationsV2_44 = getGroupedObservationsV2_3.setIds((java.util.List<java.lang.String>) strList40);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetFieldVisits getFieldVisits45 = getFieldVisits0.setIds((java.util.List<java.lang.String>) strList40);
        java.util.List<java.lang.String> strList46 = getFieldVisits45.getScheduleIds();
        org.junit.Assert.assertNull(int1);
        org.junit.Assert.assertNull(strList2);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(putBulkEditResultGradesV2_14);
        org.junit.Assert.assertNull(double15);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(getObservationsV2_22);
        org.junit.Assert.assertNull(strList23);
        org.junit.Assert.assertNotNull(instant27);
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(getObservationsV2_42);
        org.junit.Assert.assertNotNull(getGroupedObservationsV2_44);
        org.junit.Assert.assertNotNull(getFieldVisits45);
        org.junit.Assert.assertNull(strList46);
    }

    @Test
    public void test53123() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest106.test53123");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SearchResultSamplingLocation searchResultSamplingLocation0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SearchResultSamplingLocation();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SearchResultSamplingLocation searchResultSamplingLocation2 = searchResultSamplingLocation0.setCursor("");
        searchResultSamplingLocation2.Cursor = "multipart/form-data; boundary=****d9f5d551-383a-4365-87fd-ae7094da6f3b****";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SearchResultSamplingLocation searchResultSamplingLocation6 = searchResultSamplingLocation2.setCursor("multipart/form-data; boundary=****2917d69a-62fa-41ce-b981-4dbe2deab9f5****");
        java.lang.Integer int7 = searchResultSamplingLocation2.getTotalCount();
        org.junit.Assert.assertNotNull(searchResultSamplingLocation2);
        org.junit.Assert.assertNotNull(searchResultSamplingLocation6);
        org.junit.Assert.assertNull(int7);
    }

    @Test
    public void test53124() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest106.test53124");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.IceCoveredData iceCoveredData0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.IceCoveredData();
        java.lang.String str1 = iceCoveredData0.IceAssemblyType;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay2 = iceCoveredData0.getAboveFooting();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary3 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary5 = dischargeSummary3.setPublish((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse6 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant7 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse8 = locationDescriptionListServiceResponse6.setNextToken(instant7);
        dischargeSummary3.MeasurementTime = instant7;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay10 = dischargeSummary3.getGageHeightAdjustmentAmount();
        java.time.Instant instant11 = dischargeSummary3.MeasurementStartTime;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitReading fieldVisitReading12 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitReading();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitReading fieldVisitReading14 = fieldVisitReading12.setUseLocationDatumAsReference((java.lang.Boolean) true);
        fieldVisitReading14.Manufacturer = "https";
        java.lang.String str17 = fieldVisitReading14.getControlCondition();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CalibrationCheck calibrationCheck18 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CalibrationCheck();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CalibrationCheck calibrationCheck20 = calibrationCheck18.setUnit("hi!");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay21 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay23 = doubleWithDisplay21.setNumeric((java.lang.Double) 10.0d);
        java.lang.String str24 = doubleWithDisplay23.getDisplay();
        calibrationCheck20.Difference = doubleWithDisplay23;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity pointVelocityDischargeActivity26 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity pointVelocityDischargeActivity28 = pointVelocityDischargeActivity26.setIsValid((java.lang.Boolean) false);
        pointVelocityDischargeActivity26.Manufacturer = "2021.4.62.0";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity pointVelocityDischargeActivity32 = pointVelocityDischargeActivity26.setSuspensionWeight("");
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Vertical> verticalList33 = pointVelocityDischargeActivity32.getVerticals();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DatumConvertedQuantityWithDisplay datumConvertedQuantityWithDisplay34 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DatumConvertedQuantityWithDisplay();
        pointVelocityDischargeActivity32.DistanceToMeter = datumConvertedQuantityWithDisplay34;
        calibrationCheck20.Standard = datumConvertedQuantityWithDisplay34;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitReading fieldVisitReading37 = fieldVisitReading14.setAdjustmentAmount((com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay) datumConvertedQuantityWithDisplay34);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary38 = dischargeSummary3.setGageHeightAdjustmentAmount((com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay) datumConvertedQuantityWithDisplay34);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.IceCoveredData iceCoveredData39 = iceCoveredData0.setBelowFooting((com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay) datumConvertedQuantityWithDisplay34);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CrossSectionSurveyActivity crossSectionSurveyActivity40 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CrossSectionSurveyActivity();
        java.lang.String str41 = crossSectionSurveyActivity40.Channel;
        java.lang.String str42 = crossSectionSurveyActivity40.Channel;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.AdcpDischargeActivity adcpDischargeActivity43 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.AdcpDischargeActivity();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.AdcpDischargeActivity adcpDischargeActivity45 = adcpDischargeActivity43.setSoftwareVersion("yyyy'-'MM'-'dd'T'HH':'mm':'ss");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay46 = adcpDischargeActivity45.getDischargeCoefficientVariation();
        adcpDischargeActivity45.NodeDetails = "yyyy'-'MM'-'dd'T'HH':'mm':'ss";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary49 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay50 = dischargeSummary49.getMeanGageHeight();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay51 = dischargeSummary49.Discharge;
        java.lang.Integer int52 = dischargeSummary49.getGradeCode();
        java.lang.String str53 = dischargeSummary49.MeasurementId;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DatumConvertedQuantityWithDisplay datumConvertedQuantityWithDisplay54 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DatumConvertedQuantityWithDisplay();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary55 = dischargeSummary49.setAlternateRatingDischarge((com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay) datumConvertedQuantityWithDisplay54);
        adcpDischargeActivity45.Area = datumConvertedQuantityWithDisplay54;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CrossSectionSurveyActivity crossSectionSurveyActivity57 = crossSectionSurveyActivity40.setStage((com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay) datumConvertedQuantityWithDisplay54);
        iceCoveredData39.AboveFooting = datumConvertedQuantityWithDisplay54;
        iceCoveredData39.IceAssemblyType = "multipart/form-data; boundary=****f642a130-eb6d-4fb6-a1a4-7c7216ab119b****";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.IceCoveredData iceCoveredData62 = iceCoveredData39.setIceAssemblyType("multipart/form-data; boundary=****895246ac-50fd-4284-9cd4-5cdd869d7100****");
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(quantityWithDisplay2);
        org.junit.Assert.assertNotNull(dischargeSummary5);
        org.junit.Assert.assertNotNull(instant7);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse8);
        org.junit.Assert.assertNull(quantityWithDisplay10);
        org.junit.Assert.assertNull(instant11);
        org.junit.Assert.assertNotNull(fieldVisitReading14);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertNotNull(calibrationCheck20);
        org.junit.Assert.assertNotNull(doubleWithDisplay23);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNotNull(pointVelocityDischargeActivity28);
        org.junit.Assert.assertNotNull(pointVelocityDischargeActivity32);
        org.junit.Assert.assertNull(verticalList33);
        org.junit.Assert.assertNotNull(fieldVisitReading37);
        org.junit.Assert.assertNotNull(dischargeSummary38);
        org.junit.Assert.assertNotNull(iceCoveredData39);
        org.junit.Assert.assertNull(str41);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertNotNull(adcpDischargeActivity45);
        org.junit.Assert.assertNull(doubleWithDisplay46);
        org.junit.Assert.assertNull(quantityWithDisplay50);
        org.junit.Assert.assertNull(quantityWithDisplay51);
        org.junit.Assert.assertNull(int52);
        org.junit.Assert.assertNull(str53);
        org.junit.Assert.assertNotNull(dischargeSummary55);
        org.junit.Assert.assertNotNull(crossSectionSurveyActivity57);
        org.junit.Assert.assertNotNull(iceCoveredData62);
    }

    @Test
    public void test53125() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest106.test53125");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttributeDefinition extendedAttributeDefinition0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttributeDefinition();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttributeDefinition extendedAttributeDefinition2 = extendedAttributeDefinition0.setMandatory((java.lang.Boolean) false);
        extendedAttributeDefinition0.Description = "hi!:///AQUARIUS/Provisioning/v1";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabInstructionTemplate labInstructionTemplate5 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabInstructionTemplate();
        java.lang.String str6 = labInstructionTemplate5.HoldingTime;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSchedule putSchedule7 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSchedule();
        java.time.OffsetDateTime offsetDateTime8 = putSchedule7.StartDate;
        java.time.OffsetDateTime offsetDateTime9 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSchedule putSchedule10 = putSchedule7.setEndDate(offsetDateTime9);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes11 = putSchedule10.AuditAttributes;
        java.time.OffsetDateTime offsetDateTime12 = null;
        putSchedule10.LastGenerationDate = offsetDateTime12;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.RecurrenceDayMonthlyType recurrenceDayMonthlyType14 = putSchedule10.RecurrenceDayMonthly;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedFieldResult plannedFieldResult15 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedFieldResult();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes16 = plannedFieldResult15.AuditAttributes;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails17 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails19 = labResultDetails17.setAnalysisComment("/AQUARIUS/Acquisition/v2");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes20 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails21 = labResultDetails19.setAuditAttributes(auditAttributes20);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedFieldResult plannedFieldResult22 = plannedFieldResult15.setAuditAttributes(auditAttributes20);
        putSchedule10.AuditAttributes = auditAttributes20;
        labInstructionTemplate5.AuditAttributes = auditAttributes20;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabInstructionTemplate labInstructionTemplate25 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabInstructionTemplate();
        java.lang.String str26 = labInstructionTemplate25.HoldingTime;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSchedule putSchedule27 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSchedule();
        java.time.OffsetDateTime offsetDateTime28 = putSchedule27.StartDate;
        java.time.OffsetDateTime offsetDateTime29 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSchedule putSchedule30 = putSchedule27.setEndDate(offsetDateTime29);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes31 = putSchedule30.AuditAttributes;
        java.time.OffsetDateTime offsetDateTime32 = null;
        putSchedule30.LastGenerationDate = offsetDateTime32;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.RecurrenceDayMonthlyType recurrenceDayMonthlyType34 = putSchedule30.RecurrenceDayMonthly;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedFieldResult plannedFieldResult35 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedFieldResult();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes36 = plannedFieldResult35.AuditAttributes;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails37 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails39 = labResultDetails37.setAnalysisComment("/AQUARIUS/Acquisition/v2");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes40 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails41 = labResultDetails39.setAuditAttributes(auditAttributes40);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedFieldResult plannedFieldResult42 = plannedFieldResult35.setAuditAttributes(auditAttributes40);
        putSchedule30.AuditAttributes = auditAttributes40;
        labInstructionTemplate25.AuditAttributes = auditAttributes40;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabInstructionTemplate labInstructionTemplate45 = labInstructionTemplate5.setAuditAttributes(auditAttributes40);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes46 = labInstructionTemplate5.AuditAttributes;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttributeDefinition extendedAttributeDefinition47 = extendedAttributeDefinition0.setAuditAttributes(auditAttributes46);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExtendedAttributes getExtendedAttributes48 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExtendedAttributes();
        java.lang.Integer int49 = getExtendedAttributes48.Limit;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AppliesToType appliesToType50 = getExtendedAttributes48.getAppliesToType();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AppliesToType appliesToType51 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AppliesToType.OBSERVATION;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExtendedAttributes getExtendedAttributes52 = getExtendedAttributes48.setAppliesToType(appliesToType51);
        extendedAttributeDefinition47.AppliesToType = appliesToType51;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Specimen specimen54 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Specimen();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Specimen specimen56 = specimen54.setFiltrationComment("9999-12-31T23:59:59.9999999Z://2021.4.62.0");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Specimen specimen58 = specimen56.setName("9999-12-31T23:59:59.9999999Z://2021.4.62.0");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostCollectionMethod postCollectionMethod59 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostCollectionMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity postActivity60 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity();
        postActivity60.LoggerFileName = "hi!";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity postActivity64 = postActivity60.setCustomId("");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes65 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity postActivity66 = postActivity64.setAuditAttributes(auditAttributes65);
        postCollectionMethod59.AuditAttributes = auditAttributes65;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Specimen specimen68 = specimen56.setAuditAttributes(auditAttributes65);
        specimen68.FiltrationComment = "hi!";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PreservativeType preservativeType71 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PreservativeType.HYDROCHLORIC_ACID;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Specimen specimen72 = specimen68.setPreservative(preservativeType71);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSpecimen putSpecimen73 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSpecimen();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Activity activity74 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Activity();
        putSpecimen73.Activity = activity74;
        java.lang.String str76 = activity74.Id;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ActivityType activityType77 = activity74.getType();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Device device78 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Device();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Device device80 = device78.setType("/AQUARIUS/Acquisition/v2");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Device device82 = device80.setType("/AQUARIUS/Acquisition/v2://9999-12-31T23:59:59.999Z");
        java.lang.String str83 = device80.getType();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Activity activity84 = activity74.setDevice(device80);
        java.lang.String str85 = activity74.getCustomId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ActivityType activityType86 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ActivityType.NONE;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Activity activity87 = activity74.setType(activityType86);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity quantity88 = activity87.getDepth();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Specimen specimen89 = specimen72.setActivity(activity87);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes90 = specimen72.AuditAttributes;
        extendedAttributeDefinition47.AuditAttributes = auditAttributes90;
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttributeListItem> extendedAttributeListItemList92 = extendedAttributeDefinition47.getDropDownListItems();
        org.junit.Assert.assertNotNull(extendedAttributeDefinition2);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(offsetDateTime8);
        org.junit.Assert.assertNotNull(putSchedule10);
        org.junit.Assert.assertNull(auditAttributes11);
        org.junit.Assert.assertNull(recurrenceDayMonthlyType14);
        org.junit.Assert.assertNull(auditAttributes16);
        org.junit.Assert.assertNotNull(labResultDetails19);
        org.junit.Assert.assertNotNull(labResultDetails21);
        org.junit.Assert.assertNotNull(plannedFieldResult22);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertNull(offsetDateTime28);
        org.junit.Assert.assertNotNull(putSchedule30);
        org.junit.Assert.assertNull(auditAttributes31);
        org.junit.Assert.assertNull(recurrenceDayMonthlyType34);
        org.junit.Assert.assertNull(auditAttributes36);
        org.junit.Assert.assertNotNull(labResultDetails39);
        org.junit.Assert.assertNotNull(labResultDetails41);
        org.junit.Assert.assertNotNull(plannedFieldResult42);
        org.junit.Assert.assertNotNull(labInstructionTemplate45);
        org.junit.Assert.assertNotNull(auditAttributes46);
        org.junit.Assert.assertNotNull(extendedAttributeDefinition47);
        org.junit.Assert.assertNull(int49);
        org.junit.Assert.assertNull(appliesToType50);
        org.junit.Assert.assertTrue("'" + appliesToType51 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AppliesToType.OBSERVATION + "'", appliesToType51.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AppliesToType.OBSERVATION));
        org.junit.Assert.assertNotNull(getExtendedAttributes52);
        org.junit.Assert.assertNotNull(specimen56);
        org.junit.Assert.assertNotNull(specimen58);
        org.junit.Assert.assertNotNull(postActivity64);
        org.junit.Assert.assertNotNull(postActivity66);
        org.junit.Assert.assertNotNull(specimen68);
        org.junit.Assert.assertTrue("'" + preservativeType71 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PreservativeType.HYDROCHLORIC_ACID + "'", preservativeType71.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PreservativeType.HYDROCHLORIC_ACID));
        org.junit.Assert.assertNotNull(specimen72);
        org.junit.Assert.assertNull(str76);
        org.junit.Assert.assertNull(activityType77);
        org.junit.Assert.assertNotNull(device80);
        org.junit.Assert.assertNotNull(device82);
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "/AQUARIUS/Acquisition/v2://9999-12-31T23:59:59.999Z" + "'", str83, "/AQUARIUS/Acquisition/v2://9999-12-31T23:59:59.999Z");
        org.junit.Assert.assertNotNull(activity84);
        org.junit.Assert.assertNull(str85);
        org.junit.Assert.assertTrue("'" + activityType86 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ActivityType.NONE + "'", activityType86.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ActivityType.NONE));
        org.junit.Assert.assertNotNull(activity87);
        org.junit.Assert.assertNull(quantity88);
        org.junit.Assert.assertNotNull(specimen89);
        org.junit.Assert.assertNotNull(auditAttributes90);
        org.junit.Assert.assertNull(extendedAttributeListItemList92);
    }

    @Test
    public void test53126() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest106.test53126");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationRemark locationRemark0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationRemark();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationRemark locationRemark2 = locationRemark0.setDescription("MaxInstant");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse3 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant4 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse5 = locationDescriptionListServiceResponse3.setNextToken(instant4);
        locationRemark2.FromTime = instant4;
        java.time.Instant instant7 = locationRemark2.getCreateTime();
        java.lang.String str8 = locationRemark2.getDescription();
        org.junit.Assert.assertNotNull(locationRemark2);
        org.junit.Assert.assertNotNull(instant4);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse5);
        org.junit.Assert.assertNull(instant7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "MaxInstant" + "'", str8, "MaxInstant");
    }

    @Test
    public void test53127() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest106.test53127");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingCurveListServiceRequest ratingCurveListServiceRequest0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingCurveListServiceRequest();
        java.time.Instant instant1 = ratingCurveListServiceRequest0.QueryTo;
        java.lang.String str2 = ratingCurveListServiceRequest0.getRatingModelIdentifier();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingCurveListServiceRequest ratingCurveListServiceRequest4 = ratingCurveListServiceRequest0.setRatingModelIdentifier("http");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesApprovalsTransactionListServiceRequest timeSeriesApprovalsTransactionListServiceRequest5 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesApprovalsTransactionListServiceRequest();
        java.lang.String str6 = timeSeriesApprovalsTransactionListServiceRequest5.getTimeSeriesUniqueId();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ControlConditionActivity controlConditionActivity7 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ControlConditionActivity();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ControlCleanedType controlCleanedType8 = null;
        controlConditionActivity7.ControlCleaned = controlCleanedType8;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse10 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant11 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse12 = locationDescriptionListServiceResponse10.setNextToken(instant11);
        controlConditionActivity7.DateCleaned = instant11;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesApprovalsTransactionListServiceRequest timeSeriesApprovalsTransactionListServiceRequest14 = timeSeriesApprovalsTransactionListServiceRequest5.setQueryTo(instant11);
        java.time.Instant instant15 = timeSeriesApprovalsTransactionListServiceRequest5.QueryTo;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDescription timeSeriesDescription16 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDescription();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest17 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest();
        java.lang.Object obj18 = timeAlignedDataServiceRequest17.getResponseType();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse19 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant20 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse21 = locationDescriptionListServiceResponse19.setNextToken(instant20);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest22 = timeAlignedDataServiceRequest17.setQueryFrom(instant20);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDescription timeSeriesDescription23 = timeSeriesDescription16.setRawStartTime(instant20);
        timeSeriesApprovalsTransactionListServiceRequest5.QueryTo = instant20;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingCurveListServiceRequest ratingCurveListServiceRequest25 = ratingCurveListServiceRequest4.setQueryTo(instant20);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingCurveListServiceRequest ratingCurveListServiceRequest27 = ratingCurveListServiceRequest25.setRatingModelIdentifier("0001-01-01T00:00:00.000Z");
        org.junit.Assert.assertNull(instant1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNotNull(ratingCurveListServiceRequest4);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNotNull(instant11);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse12);
        org.junit.Assert.assertNotNull(timeSeriesApprovalsTransactionListServiceRequest14);
        org.junit.Assert.assertNotNull(instant15);
        org.junit.Assert.assertNotNull(obj18);
        org.junit.Assert.assertEquals(obj18.toString(), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj18), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj18), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertNotNull(instant20);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse21);
        org.junit.Assert.assertNotNull(timeAlignedDataServiceRequest22);
        org.junit.Assert.assertNotNull(timeSeriesDescription23);
        org.junit.Assert.assertNotNull(ratingCurveListServiceRequest25);
        org.junit.Assert.assertNotNull(ratingCurveListServiceRequest27);
    }

    @Test
    public void test53128() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest106.test53128");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetLabReport getLabReport0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetLabReport();
        getLabReport0.Id = "https";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetLabReport getLabReport4 = getLabReport0.setId("");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetLabReport getLabReport6 = getLabReport4.setId("");
        java.lang.String str7 = getLabReport6.Id;
        getLabReport6.Id = "ZZZZZ";
        java.lang.String str10 = getLabReport6.getId();
        org.junit.Assert.assertNotNull(getLabReport4);
        org.junit.Assert.assertNotNull(getLabReport6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "ZZZZZ" + "'", str10, "ZZZZZ");
    }

    @Test
    public void test53129() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest106.test53129");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportSummaryObservation importSummaryObservation0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportSummaryObservation();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportSummaryObservation importSummaryObservation2 = importSummaryObservation0.setSummaryReportText("multipart/form-data; boundary=****bbcf5f9e-6ccf-4b63-91ab-6e645caf02af****");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportSummaryObservation importSummaryObservation4 = importSummaryObservation2.setSuccessCount((java.lang.Integer) 2);
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportError> importErrorList5 = importSummaryObservation2.getImportJobErrors();
        importSummaryObservation2.SummaryReportText = "";
        org.junit.Assert.assertNotNull(importSummaryObservation2);
        org.junit.Assert.assertNotNull(importSummaryObservation4);
        org.junit.Assert.assertNull(importErrorList5);
    }

    @Test
    public void test53130() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest106.test53130");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.StandardReferenceDatum standardReferenceDatum0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.StandardReferenceDatum();
        java.lang.String str1 = standardReferenceDatum0.StandardIdentifier;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.StandardReferenceDatum standardReferenceDatum3 = standardReferenceDatum0.setUncertainty((java.lang.Double) 0.0d);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.StandardReferenceDatum standardReferenceDatum5 = standardReferenceDatum3.setComments("multipart/form-data; boundary=****895246ac-50fd-4284-9cd4-5cdd869d7100****");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.StandardReferenceDatum standardReferenceDatum7 = standardReferenceDatum3.setIsBaseReference((java.lang.Boolean) false);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(standardReferenceDatum3);
        org.junit.Assert.assertNotNull(standardReferenceDatum5);
        org.junit.Assert.assertNotNull(standardReferenceDatum7);
    }

    @Test
    public void test53131() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest106.test53131");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemSpecimen importItemSpecimen0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemSpecimen();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemStatusType importItemStatusType1 = importItemSpecimen0.Status;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObject importItemObject2 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObject();
        java.util.List<java.lang.String> strList3 = importItemObject2.getWarningMessages();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportChangeItem[] importChangeItemArray4 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportChangeItem[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportChangeItem> importChangeItemList5 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportChangeItem>();
        boolean boolean6 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportChangeItem>) importChangeItemList5, importChangeItemArray4);
        importItemObject2.ItemComparison = importChangeItemList5;
        java.lang.String str8 = importItemObject2.Input;
        java.lang.String str9 = importItemObject2.getRowId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItem importItem10 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_11 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray13 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList14 = new java.util.ArrayList<java.lang.String>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList14, strArray13);
        getObservationsV2_11.SpecimenIds = strList14;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags17 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray21 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList22 = new java.util.ArrayList<java.lang.String>();
        boolean boolean23 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList22, strArray21);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags24 = putLocationTags17.setTagUniqueIds(strList22);
        getObservationsV2_11.QualityControlTypes = strList22;
        java.util.List<java.lang.String> strList26 = getObservationsV2_11.getLabReportIds();
        importItem10.Errors = getObservationsV2_11;
        java.lang.Object obj28 = importItem10.getExistingItem();
        importItem10.Input = "hi!";
        java.lang.Object obj31 = importItem10.getItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemStatusType importItemStatusType32 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemStatusType.SKIPPED;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItem importItem33 = importItem10.setStatus(importItemStatusType32);
        importItemObject2.Status = importItemStatusType32;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemSpecimen importItemSpecimen35 = importItemSpecimen0.setStatus(importItemStatusType32);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObject importItemObject36 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObject();
        java.util.List<java.lang.String> strList37 = importItemObject36.getWarningMessages();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportChangeItem[] importChangeItemArray38 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportChangeItem[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportChangeItem> importChangeItemList39 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportChangeItem>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportChangeItem>) importChangeItemList39, importChangeItemArray38);
        importItemObject36.ItemComparison = importChangeItemList39;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags42 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray46 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList47 = new java.util.ArrayList<java.lang.String>();
        boolean boolean48 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList47, strArray46);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags49 = putLocationTags42.setTagUniqueIds(strList47);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObject importItemObject50 = importItemObject36.setExistingItem((java.lang.Object) putLocationTags42);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_51 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray53 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList54 = new java.util.ArrayList<java.lang.String>();
        boolean boolean55 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList54, strArray53);
        getObservationsV2_51.SpecimenIds = strList54;
        importItemObject50.WarningMessages = strList54;
        importItemSpecimen35.WarningMessages = strList54;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemSpecimen importItemSpecimen60 = importItemSpecimen35.setInput("hi!");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemSpecimen importItemSpecimen62 = importItemSpecimen35.setRowId("http");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Specimen specimen63 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Specimen();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Specimen specimen65 = specimen63.setFiltrationComment("9999-12-31T23:59:59.9999999Z://2021.4.62.0");
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttribute> extendedAttributeList66 = specimen65.ExtendedAttributes;
        java.lang.Integer int67 = specimen65.NumberOfRequestedObservations;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemSpecimen importItemSpecimen68 = importItemSpecimen62.setItem(specimen65);
        java.util.List<java.lang.String> strList69 = importItemSpecimen68.getFields();
        org.junit.Assert.assertNull(importItemStatusType1);
        org.junit.Assert.assertNull(strList3);
        org.junit.Assert.assertNotNull(importChangeItemArray4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(putLocationTags24);
        org.junit.Assert.assertNull(strList26);
        org.junit.Assert.assertNull(obj28);
        org.junit.Assert.assertNull(obj31);
        org.junit.Assert.assertTrue("'" + importItemStatusType32 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemStatusType.SKIPPED + "'", importItemStatusType32.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemStatusType.SKIPPED));
        org.junit.Assert.assertNotNull(importItem33);
        org.junit.Assert.assertNotNull(importItemSpecimen35);
        org.junit.Assert.assertNull(strList37);
        org.junit.Assert.assertNotNull(importChangeItemArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(putLocationTags49);
        org.junit.Assert.assertNotNull(importItemObject50);
        org.junit.Assert.assertNotNull(strArray53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(importItemSpecimen60);
        org.junit.Assert.assertNotNull(importItemSpecimen62);
        org.junit.Assert.assertNotNull(specimen65);
        org.junit.Assert.assertNull(extendedAttributeList66);
        org.junit.Assert.assertNull(int67);
        org.junit.Assert.assertNotNull(importItemSpecimen68);
        org.junit.Assert.assertNull(strList69);
    }

    @Test
    public void test53132() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest106.test53132");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetActivities getActivities0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetActivities();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse1 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary2 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary4 = dischargeSummary2.setPublish((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse5 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant6 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse7 = locationDescriptionListServiceResponse5.setNextToken(instant6);
        dischargeSummary2.MeasurementTime = instant6;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse9 = locationDescriptionListServiceResponse1.setNextToken(instant6);
        java.time.Instant instant10 = locationDescriptionListServiceResponse1.getNextToken();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetActivities getActivities11 = getActivities0.setToStartTime(instant10);
        java.lang.String str12 = getActivities11.getSort();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetActivities getActivities14 = getActivities11.setLimit((java.lang.Integer) 1);
        getActivities14.Cursor = "";
        getActivities14.Limit = 0;
        java.time.Instant instant19 = getActivities14.FromStartTime;
        getActivities14.CustomId = "'.'SSSSSSS://multipart/form-data; boundary=****e0afd3ef-ab93-4371-a368-4a6f5ef58c71****";
        java.util.List<java.lang.String> strList22 = getActivities14.ActivityTypes;
        org.junit.Assert.assertNotNull(dischargeSummary4);
        org.junit.Assert.assertNotNull(instant6);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse7);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse9);
        org.junit.Assert.assertNotNull(instant10);
        org.junit.Assert.assertNotNull(getActivities11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(getActivities14);
        org.junit.Assert.assertNull(instant19);
        org.junit.Assert.assertNull(strList22);
    }

    @Test
    public void test53133() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest106.test53133");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportSummarySpecimen importSummarySpecimen0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportSummarySpecimen();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportSummarySpecimen importSummarySpecimen2 = importSummarySpecimen0.setSummaryReportText("/AQUARIUS/Provisioning/v1");
        importSummarySpecimen0.ExpectedCount = 10;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportSummarySpecimen importSummarySpecimen6 = importSummarySpecimen0.setSummaryReportText("");
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemSpecimen> importItemSpecimenList7 = importSummarySpecimen0.ImportItems;
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemSpecimen> importItemSpecimenList8 = importSummarySpecimen0.ErrorImportItems;
        org.junit.Assert.assertNotNull(importSummarySpecimen2);
        org.junit.Assert.assertNotNull(importSummarySpecimen6);
        org.junit.Assert.assertNull(importItemSpecimenList7);
        org.junit.Assert.assertNull(importItemSpecimenList8);
    }

    @Test
    public void test53134() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest106.test53134");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SearchResultShippingContainer searchResultShippingContainer0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SearchResultShippingContainer();
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ShippingContainer> shippingContainerList1 = searchResultShippingContainer0.DomainObjects;
        java.lang.Integer int2 = searchResultShippingContainer0.getTotalCount();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SearchResultShippingContainer searchResultShippingContainer3 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SearchResultShippingContainer();
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ShippingContainer> shippingContainerList4 = searchResultShippingContainer3.DomainObjects;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ShippingContainer shippingContainer5 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ShippingContainer();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ShippingContainer shippingContainer6 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ShippingContainer();
        java.lang.String str7 = shippingContainer6.getTrackingId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity postActivity8 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity();
        postActivity8.LoggerFileName = "hi!";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity postActivity12 = postActivity8.setCustomId("");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes13 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity postActivity14 = postActivity12.setAuditAttributes(auditAttributes13);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ShippingContainer shippingContainer15 = shippingContainer6.setAuditAttributes(auditAttributes13);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ShippingContainer shippingContainer16 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ShippingContainer();
        java.lang.String str17 = shippingContainer16.TrackingId;
        shippingContainer16.TrackingId = "/AQUARIUS/Acquisition/v2";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ShippingContainer shippingContainer20 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ShippingContainer();
        java.lang.String str21 = shippingContainer20.getTrackingId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity postActivity22 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity();
        postActivity22.LoggerFileName = "hi!";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity postActivity26 = postActivity22.setCustomId("");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes27 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity postActivity28 = postActivity26.setAuditAttributes(auditAttributes27);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ShippingContainer shippingContainer29 = shippingContainer20.setAuditAttributes(auditAttributes27);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ShippingContainer[] shippingContainerArray30 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ShippingContainer[] { shippingContainer5, shippingContainer6, shippingContainer16, shippingContainer20 };
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ShippingContainer> shippingContainerList31 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ShippingContainer>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ShippingContainer>) shippingContainerList31, shippingContainerArray30);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SearchResultShippingContainer searchResultShippingContainer33 = searchResultShippingContainer3.setDomainObjects((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ShippingContainer>) shippingContainerList31);
        searchResultShippingContainer0.DomainObjects = shippingContainerList31;
        java.lang.String str35 = searchResultShippingContainer0.getCursor();
        java.lang.Integer int36 = searchResultShippingContainer0.getTotalCount();
        org.junit.Assert.assertNull(shippingContainerList1);
        org.junit.Assert.assertNull(int2);
        org.junit.Assert.assertNull(shippingContainerList4);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(postActivity12);
        org.junit.Assert.assertNotNull(postActivity14);
        org.junit.Assert.assertNotNull(shippingContainer15);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNotNull(postActivity26);
        org.junit.Assert.assertNotNull(postActivity28);
        org.junit.Assert.assertNotNull(shippingContainer29);
        org.junit.Assert.assertNotNull(shippingContainerArray30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(searchResultShippingContainer33);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertNull(int36);
    }

    @Test
    public void test53135() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest106.test53135");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedPoint timeAlignedPoint0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedPoint();
        timeAlignedPoint0.Method9 = "multipart/form-data; boundary=****7eff1774-b6b0-471a-961c-156c64359366****";
        timeAlignedPoint0.DisplayValue9 = "";
        java.lang.String str5 = timeAlignedPoint0.getApprovalName4();
        java.lang.Long long6 = timeAlignedPoint0.getGradeCode3();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedPoint timeAlignedPoint8 = timeAlignedPoint0.setQualifiers1("MinInstant");
        timeAlignedPoint8.Qualifiers8 = "/AQUARIUS/Provisioning/v1";
        timeAlignedPoint8.GradeName5 = "hi!";
        java.lang.String str13 = timeAlignedPoint8.getGradeName6();
        java.lang.String str14 = timeAlignedPoint8.getDisplayValue4();
        java.lang.String str15 = timeAlignedPoint8.DisplayValue2;
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(long6);
        org.junit.Assert.assertNotNull(timeAlignedPoint8);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNull(str15);
    }

    @Test
    public void test53136() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest106.test53136");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingModelEffectiveShiftsServiceRequest ratingModelEffectiveShiftsServiceRequest0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingModelEffectiveShiftsServiceRequest();
        java.lang.String str1 = ratingModelEffectiveShiftsServiceRequest0.getTimeSeriesUniqueId();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingModelEffectiveShiftsServiceRequest ratingModelEffectiveShiftsServiceRequest3 = ratingModelEffectiveShiftsServiceRequest0.setTimeSeriesUniqueId("http");
        java.lang.String str4 = ratingModelEffectiveShiftsServiceRequest0.TimeSeriesUniqueId;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingModelEffectiveShiftsServiceRequest ratingModelEffectiveShiftsServiceRequest6 = ratingModelEffectiveShiftsServiceRequest0.setRatingModelIdentifier("multipart/form-data; boundary=****f2ce0d54-dac7-4cd0-b74f-1024089261f9****");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingModelEffectiveShiftsServiceRequest ratingModelEffectiveShiftsServiceRequest8 = ratingModelEffectiveShiftsServiceRequest0.setTimeSeriesUniqueId("multipart/form-data; boundary=****59879c02-0839-4b96-bc41-a13ebb706be4****");
        java.time.Instant instant9 = null;
        ratingModelEffectiveShiftsServiceRequest0.QueryFrom = instant9;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingModelEffectiveShiftsServiceRequest ratingModelEffectiveShiftsServiceRequest12 = ratingModelEffectiveShiftsServiceRequest0.setRatingModelIdentifier("multipart/form-data; boundary=****a6346bd6-b0e7-4290-a612-1b1730df8677****");
        java.time.Instant instant13 = ratingModelEffectiveShiftsServiceRequest12.getQueryFrom();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(ratingModelEffectiveShiftsServiceRequest3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "http" + "'", str4, "http");
        org.junit.Assert.assertNotNull(ratingModelEffectiveShiftsServiceRequest6);
        org.junit.Assert.assertNotNull(ratingModelEffectiveShiftsServiceRequest8);
        org.junit.Assert.assertNotNull(ratingModelEffectiveShiftsServiceRequest12);
        org.junit.Assert.assertNull(instant13);
    }

    @Test
    public void test53137() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest106.test53137");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostDetectioncondition postDetectioncondition0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostDetectioncondition();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes1 = postDetectioncondition0.getAuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostDetectioncondition postDetectioncondition3 = postDetectioncondition0.setId("9999-12-31T23:59:59.999Z");
        postDetectioncondition0.Description = "9999-12-31T23:59:59.999Z";
        postDetectioncondition0.CustomId = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSSSSSZZZZZ";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes8 = postDetectioncondition0.AuditAttributes;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostDetectioncondition postDetectioncondition10 = postDetectioncondition0.setCustomId("hi!");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostDetectioncondition postDetectioncondition12 = postDetectioncondition10.setName("multipart/form-data; boundary=****1eab67e1-84c8-4b82-aa06-d6c7526551f8****");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutTag putTag13 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutTag();
        java.lang.String str14 = putTag13.Name;
        java.lang.String str15 = putTag13.getName();
        java.lang.String str16 = putTag13.Description;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes17 = putTag13.AuditAttributes;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutTag putTag19 = putTag13.setDescription("MaxInstant");
        putTag19.Name = "multipart/form-data; boundary=****44f0772e-c3ca-4316-8e2a-61ec8540d661****";
        putTag19.Name = "9999-12-31T23:59:59.999Z";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty observedProperty24 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty();
        observedProperty24.CasNumber = "MinDuration";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroup analyticalGroup27 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroup();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes28 = null;
        analyticalGroup27.AuditAttributes = auditAttributes28;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroup analyticalGroup31 = analyticalGroup27.setNumberOfObservedPropertiesInGroupItems((java.lang.Integer) 10);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag samplingContextTag32 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag();
        java.lang.String str33 = samplingContextTag32.getDescription();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes34 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag samplingContextTag35 = samplingContextTag32.setAuditAttributes(auditAttributes34);
        java.lang.String str36 = samplingContextTag32.getName();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethodSimple analysisMethodSimple37 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethodSimple();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutDetectioncondition putDetectioncondition38 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutDetectioncondition();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes39 = putDetectioncondition38.getAuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutDetectioncondition putDetectioncondition41 = putDetectioncondition38.setCustomId("http");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivity samplingPlanPlannedActivity42 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivity();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes43 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivity samplingPlanPlannedActivity44 = samplingPlanPlannedActivity42.setAuditAttributes(auditAttributes43);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes45 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes47 = auditAttributes45.setCreationUserProfileId("'.'SSSSSSS");
        samplingPlanPlannedActivity44.AuditAttributes = auditAttributes45;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes49 = samplingPlanPlannedActivity44.AuditAttributes;
        putDetectioncondition38.AuditAttributes = auditAttributes49;
        analysisMethodSimple37.AuditAttributes = auditAttributes49;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag samplingContextTag52 = samplingContextTag32.setAuditAttributes(auditAttributes49);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroup analyticalGroup53 = analyticalGroup27.setAuditAttributes(auditAttributes49);
        java.lang.String str54 = auditAttributes49.CreationUserProfileId;
        observedProperty24.AuditAttributes = auditAttributes49;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutTag putTag56 = putTag19.setAuditAttributes(auditAttributes49);
        postDetectioncondition12.AuditAttributes = auditAttributes49;
        postDetectioncondition12.SystemCode = "multipart/form-data; boundary=****9dca3c57-4d61-4929-84c6-58c5a7f24542****";
        org.junit.Assert.assertNull(auditAttributes1);
        org.junit.Assert.assertNotNull(postDetectioncondition3);
        org.junit.Assert.assertNull(auditAttributes8);
        org.junit.Assert.assertNotNull(postDetectioncondition10);
        org.junit.Assert.assertNotNull(postDetectioncondition12);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNull(auditAttributes17);
        org.junit.Assert.assertNotNull(putTag19);
        org.junit.Assert.assertNotNull(analyticalGroup31);
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertNotNull(samplingContextTag35);
        org.junit.Assert.assertNull(str36);
        org.junit.Assert.assertNull(auditAttributes39);
        org.junit.Assert.assertNotNull(putDetectioncondition41);
        org.junit.Assert.assertNotNull(samplingPlanPlannedActivity44);
        org.junit.Assert.assertNotNull(auditAttributes47);
        org.junit.Assert.assertNotNull(auditAttributes49);
        org.junit.Assert.assertNotNull(samplingContextTag52);
        org.junit.Assert.assertNotNull(analyticalGroup53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "'.'SSSSSSS" + "'", str54, "'.'SSSSSSS");
        org.junit.Assert.assertNotNull(putTag56);
    }

    @Test
    public void test53138() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest106.test53138");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CalibrationCheck calibrationCheck0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CalibrationCheck();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CalibrationCheckType calibrationCheckType1 = calibrationCheck0.getCalibrationCheckType();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay2 = calibrationCheck0.Value;
        java.lang.String str3 = calibrationCheck0.getModel();
        java.time.Instant instant4 = calibrationCheck0.getTime();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.StandardDetails standardDetails5 = null;
        calibrationCheck0.StandardDetails = standardDetails5;
        java.lang.String str7 = calibrationCheck0.getSerialNumber();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ControlConditionActivity controlConditionActivity8 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ControlConditionActivity();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ControlCleanedType controlCleanedType9 = null;
        controlConditionActivity8.ControlCleaned = controlCleanedType9;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay11 = controlConditionActivity8.getDistanceToGage();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ControlCleanedType controlCleanedType12 = controlConditionActivity8.getControlCleaned();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ControlCleanedType controlCleanedType13 = controlConditionActivity8.getControlCleaned();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ControlConditionActivity controlConditionActivity15 = controlConditionActivity8.setIsValid((java.lang.Boolean) true);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CrossSectionSurveyActivity crossSectionSurveyActivity16 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CrossSectionSurveyActivity();
        java.time.Instant instant17 = crossSectionSurveyActivity16.StartTime;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity pointVelocityDischargeActivity18 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity();
        java.lang.String str19 = pointVelocityDischargeActivity18.SoftwareVersion;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity pointVelocityDischargeActivity21 = pointVelocityDischargeActivity18.setIsValid((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity pointVelocityDischargeActivity23 = pointVelocityDischargeActivity18.setSoftwareVersion("");
        java.lang.String str24 = pointVelocityDischargeActivity23.getManufacturer();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.StartPointType startPointType25 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.StartPointType.Unspecified;
        pointVelocityDischargeActivity23.StartPoint = startPointType25;
        crossSectionSurveyActivity16.StartingPoint = startPointType25;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CrossSectionSurveyActivity crossSectionSurveyActivity28 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CrossSectionSurveyActivity();
        java.time.Instant instant29 = crossSectionSurveyActivity28.StartTime;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity pointVelocityDischargeActivity30 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity();
        java.lang.String str31 = pointVelocityDischargeActivity30.SoftwareVersion;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity pointVelocityDischargeActivity33 = pointVelocityDischargeActivity30.setIsValid((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity pointVelocityDischargeActivity35 = pointVelocityDischargeActivity30.setSoftwareVersion("");
        java.lang.String str36 = pointVelocityDischargeActivity35.getManufacturer();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.StartPointType startPointType37 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.StartPointType.Unspecified;
        pointVelocityDischargeActivity35.StartPoint = startPointType37;
        crossSectionSurveyActivity28.StartingPoint = startPointType37;
        crossSectionSurveyActivity16.StartingPoint = startPointType37;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DatumConvertedQuantityWithDisplay datumConvertedQuantityWithDisplay41 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DatumConvertedQuantityWithDisplay();
        crossSectionSurveyActivity16.Stage = datumConvertedQuantityWithDisplay41;
        controlConditionActivity15.DistanceToGage = datumConvertedQuantityWithDisplay41;
        calibrationCheck0.Standard = datumConvertedQuantityWithDisplay41;
        java.lang.String str45 = datumConvertedQuantityWithDisplay41.Display;
        org.junit.Assert.assertNull(calibrationCheckType1);
        org.junit.Assert.assertNull(doubleWithDisplay2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(instant4);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(quantityWithDisplay11);
        org.junit.Assert.assertNull(controlCleanedType12);
        org.junit.Assert.assertNull(controlCleanedType13);
        org.junit.Assert.assertNotNull(controlConditionActivity15);
        org.junit.Assert.assertNull(instant17);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertNotNull(pointVelocityDischargeActivity21);
        org.junit.Assert.assertNotNull(pointVelocityDischargeActivity23);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertTrue("'" + startPointType25 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.StartPointType.Unspecified + "'", startPointType25.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.StartPointType.Unspecified));
        org.junit.Assert.assertNull(instant29);
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertNotNull(pointVelocityDischargeActivity33);
        org.junit.Assert.assertNotNull(pointVelocityDischargeActivity35);
        org.junit.Assert.assertNull(str36);
        org.junit.Assert.assertTrue("'" + startPointType37 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.StartPointType.Unspecified + "'", startPointType37.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.StartPointType.Unspecified));
        org.junit.Assert.assertNull(str45);
    }

    @Test
    public void test53139() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest106.test53139");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SearchResultSchedule searchResultSchedule0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SearchResultSchedule();
        java.lang.String str1 = searchResultSchedule0.getCursor();
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Schedule> scheduleList2 = searchResultSchedule0.DomainObjects;
        searchResultSchedule0.Cursor = "multipart/form-data; boundary=****9a2a71f5-e148-48e5-b44f-3c1e18f7138d****";
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(scheduleList2);
    }

    @Test
    public void test53140() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest106.test53140");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostUser postUser0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostUser();
        java.lang.String str1 = postUser0.Id;
        postUser0.Email = "yyyy'-'MM'-'dd'T'HH':'mm':'ss";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetFieldVisits getFieldVisits4 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetFieldVisits();
        java.lang.Integer int5 = getFieldVisits4.Limit;
        java.util.List<java.lang.String> strList6 = getFieldVisits4.getProjectIds();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetSpecimens getSpecimens7 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetSpecimens();
        java.util.List<java.lang.String> strList8 = getSpecimens7.getActivityIds();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutUserV2 putUserV2_9 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutUserV2();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UserType userType10 = putUserV2_9.UserType;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetActivities getActivities11 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetActivities();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse12 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary13 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary15 = dischargeSummary13.setPublish((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse16 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant17 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse18 = locationDescriptionListServiceResponse16.setNextToken(instant17);
        dischargeSummary13.MeasurementTime = instant17;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse20 = locationDescriptionListServiceResponse12.setNextToken(instant17);
        java.time.Instant instant21 = locationDescriptionListServiceResponse12.getNextToken();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetActivities getActivities22 = getActivities11.setToStartTime(instant21);
        java.lang.String str23 = getActivities22.getSort();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_24 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.util.List<java.lang.String> strList25 = getObservationsV2_24.SamplingContextTagIds;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_26 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray28 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList29 = new java.util.ArrayList<java.lang.String>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList29, strArray28);
        getObservationsV2_26.SpecimenIds = strList29;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags32 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray36 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList37 = new java.util.ArrayList<java.lang.String>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList37, strArray36);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags39 = putLocationTags32.setTagUniqueIds(strList37);
        getObservationsV2_26.QualityControlTypes = strList37;
        getObservationsV2_24.ResultGrades = strList37;
        getActivities22.Media = strList37;
        putUserV2_9.AccessGroups = strList37;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetSpecimens getSpecimens44 = getSpecimens7.setAnalyticalGroupIds((java.util.List<java.lang.String>) strList37);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetFieldVisits getFieldVisits45 = getFieldVisits4.setSearch((java.util.List<java.lang.String>) strList37);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostUser postUser46 = postUser0.setAccessGroups((java.util.List<java.lang.String>) strList37);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostUser postUser48 = postUser46.setEmail("****82feecb1-0c54-43a1-b60a-302dc897d638****");
        postUser48.CustomId = "multipart/form-data; boundary=****1844e1de-1bae-48cf-aab8-ac5571d6efc7****";
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(int5);
        org.junit.Assert.assertNull(strList6);
        org.junit.Assert.assertNull(strList8);
        org.junit.Assert.assertNull(userType10);
        org.junit.Assert.assertNotNull(dischargeSummary15);
        org.junit.Assert.assertNotNull(instant17);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse18);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse20);
        org.junit.Assert.assertNotNull(instant21);
        org.junit.Assert.assertNotNull(getActivities22);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertNull(strList25);
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(putLocationTags39);
        org.junit.Assert.assertNotNull(getSpecimens44);
        org.junit.Assert.assertNotNull(getFieldVisits45);
        org.junit.Assert.assertNotNull(postUser46);
        org.junit.Assert.assertNotNull(postUser48);
    }

    @Test
    public void test53141() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest106.test53141");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabReport labReport0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabReport();
        java.time.OffsetDateTime offsetDateTime1 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabReport labReport2 = labReport0.setDateReceived(offsetDateTime1);
        java.lang.String str3 = labReport2.CaseNarrative;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabReport labReport5 = labReport2.setId("multipart/form-data; boundary=****e0afd3ef-ab93-4371-a368-4a6f5ef58c71****");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes6 = labReport2.AuditAttributes;
        org.junit.Assert.assertNotNull(labReport2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(labReport5);
        org.junit.Assert.assertNull(auditAttributes6);
    }

    @Test
    public void test53142() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest106.test53142");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSamplingLocation putSamplingLocation0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSamplingLocation();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSamplingLocation putSamplingLocation2 = putSamplingLocation0.setCustomId("https");
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttribute> extendedAttributeList3 = putSamplingLocation0.ExtendedAttributes;
        java.lang.String str4 = putSamplingLocation0.VerticalCollectionMethod;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Address address5 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Address();
        putSamplingLocation0.Address = address5;
        java.lang.String str7 = address5.getStateProvinceCode();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Address address9 = address5.setCityName("zZZZZ");
        java.lang.String str10 = address5.CountryCode;
        java.lang.String str11 = address5.getCityName();
        org.junit.Assert.assertNotNull(putSamplingLocation2);
        org.junit.Assert.assertNull(extendedAttributeList3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(address9);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "zZZZZ" + "'", str11, "zZZZZ");
    }

    @Test
    public void test53143() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest106.test53143");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ReferencePoint referencePoint0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ReferencePoint();
        java.lang.String str1 = referencePoint0.Name;
        java.lang.String str2 = referencePoint0.getUniqueId();
        referencePoint0.Name = "multipart/form-data; boundary=****d9f5d551-383a-4365-87fd-ae7094da6f3b****";
        java.lang.String str5 = referencePoint0.getName();
        referencePoint0.DecommissionedReason = "";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ReferencePoint referencePoint9 = referencePoint0.setName("multipart/form-data; boundary=****231224c4-98ce-4e30-bd65-1d25287c4abe****");
        referencePoint9.Description = "multipart/form-data; boundary=****44f0772e-c3ca-4316-8e2a-61ec8540d661****";
        java.lang.String str12 = referencePoint9.Name;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ReferencePoint referencePoint14 = referencePoint9.setDescription("multipart/form-data; boundary=****895246ac-50fd-4284-9cd4-5cdd869d7100****");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ReferencePoint referencePoint16 = referencePoint9.setLatitude((java.lang.Double) 100.0d);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Approval approval17 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Approval();
        java.lang.String str18 = approval17.User;
        approval17.LevelDescription = "MinDuration";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Approval approval22 = approval17.setApprovalLevel((java.lang.Integer) (-1));
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesThresholdPeriod timeSeriesThresholdPeriod23 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesThresholdPeriod();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesThresholdPeriod timeSeriesThresholdPeriod25 = timeSeriesThresholdPeriod23.setReferenceValue((java.lang.Double) 0.0d);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescription locationDescription26 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescription();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescription locationDescription28 = locationDescription26.setIdentifier("");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ControlConditionActivity controlConditionActivity29 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ControlConditionActivity();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ControlCleanedType controlCleanedType30 = null;
        controlConditionActivity29.ControlCleaned = controlCleanedType30;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse32 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant33 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse34 = locationDescriptionListServiceResponse32.setNextToken(instant33);
        controlConditionActivity29.DateCleaned = instant33;
        locationDescription28.LastModified = instant33;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesThresholdPeriod timeSeriesThresholdPeriod37 = timeSeriesThresholdPeriod25.setAppliedTime(instant33);
        approval22.DateAppliedUtc = instant33;
        java.time.Instant instant39 = approval22.getDateAppliedUtc();
        referencePoint9.DecommissionedDate = instant39;
        java.lang.String str41 = referencePoint9.getDecommissionedReason();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "multipart/form-data; boundary=****d9f5d551-383a-4365-87fd-ae7094da6f3b****" + "'", str5, "multipart/form-data; boundary=****d9f5d551-383a-4365-87fd-ae7094da6f3b****");
        org.junit.Assert.assertNotNull(referencePoint9);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "multipart/form-data; boundary=****231224c4-98ce-4e30-bd65-1d25287c4abe****" + "'", str12, "multipart/form-data; boundary=****231224c4-98ce-4e30-bd65-1d25287c4abe****");
        org.junit.Assert.assertNotNull(referencePoint14);
        org.junit.Assert.assertNotNull(referencePoint16);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNotNull(approval22);
        org.junit.Assert.assertNotNull(timeSeriesThresholdPeriod25);
        org.junit.Assert.assertNotNull(locationDescription28);
        org.junit.Assert.assertNotNull(instant33);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse34);
        org.junit.Assert.assertNotNull(timeSeriesThresholdPeriod37);
        org.junit.Assert.assertNotNull(instant39);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
    }

    @Test
    public void test53144() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest106.test53144");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutRecurringReport putRecurringReport0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutRecurringReport();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.LocationDatumPeriod locationDatumPeriod1 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.LocationDatumPeriod();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.LocationDatumPeriodBase locationDatumPeriodBase3 = locationDatumPeriod1.setComment("'.'SSSSSSS");
        java.lang.Double double4 = locationDatumPeriodBase3.Elevation;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Qualifier qualifier5 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Qualifier();
        java.time.Instant instant6 = qualifier5.DateApplied;
        java.lang.String str7 = qualifier5.User;
        java.lang.String str8 = qualifier5.getIdentifier();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest9 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest();
        java.lang.Object obj10 = timeAlignedDataServiceRequest9.getResponseType();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse11 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant12 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse13 = locationDescriptionListServiceResponse11.setNextToken(instant12);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest14 = timeAlignedDataServiceRequest9.setQueryFrom(instant12);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Qualifier qualifier15 = qualifier5.setDateApplied(instant12);
        java.time.Instant instant16 = qualifier15.getDateApplied();
        locationDatumPeriodBase3.ValidFrom = instant16;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RecurringReportBase recurringReportBase18 = putRecurringReport0.setNextGenerationDate(instant16);
        java.lang.String str19 = putRecurringReport0.JsonTemplate;
        java.time.Instant instant20 = putRecurringReport0.getNextGenerationDate();
        java.time.Instant instant21 = putRecurringReport0.getNextGenerationDate();
        java.lang.String str22 = putRecurringReport0.JsonTemplate;
        org.junit.Assert.assertNotNull(locationDatumPeriodBase3);
        org.junit.Assert.assertNull(double4);
        org.junit.Assert.assertNull(instant6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(obj10);
        org.junit.Assert.assertEquals(obj10.toString(), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj10), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj10), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertNotNull(instant12);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse13);
        org.junit.Assert.assertNotNull(timeAlignedDataServiceRequest14);
        org.junit.Assert.assertNotNull(qualifier15);
        org.junit.Assert.assertNotNull(instant16);
        org.junit.Assert.assertNotNull(recurringReportBase18);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertNotNull(instant20);
        org.junit.Assert.assertNotNull(instant21);
        org.junit.Assert.assertNull(str22);
    }

    @Test
    public void test53145() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest106.test53145");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Vertical vertical0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Vertical();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay1 = null;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Vertical vertical2 = vertical0.setSegmentVelocity(quantityWithDisplay1);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityObservationType pointVelocityObservationType3 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityObservationType.OneAtPointSix;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Vertical vertical4 = vertical0.setVelocityObservationMethod(pointVelocityObservationType3);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Vertical vertical5 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Vertical();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay6 = vertical5.SoundedDepth;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay7 = null;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Vertical vertical8 = vertical5.setSegmentDischarge(quantityWithDisplay7);
        java.lang.Boolean boolean9 = vertical5.getIsDischargeEstimated();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Vertical vertical11 = vertical5.setIsDischargeEstimated((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.StatisticalDateTimeOffset statisticalDateTimeOffset12 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.StatisticalDateTimeOffset();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostRecurringReport postRecurringReport13 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostRecurringReport();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary14 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        dischargeSummary14.Reviewer = "";
        java.time.Instant instant17 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        dischargeSummary14.MeasurementTime = instant17;
        postRecurringReport13.NextGenerationDate = instant17;
        java.time.Instant instant20 = postRecurringReport13.getNextGenerationDate();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.StatisticalDateTimeOffset statisticalDateTimeOffset21 = statisticalDateTimeOffset12.setDateTimeOffset(instant20);
        vertical5.MeasurementTime = instant20;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Vertical vertical23 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Vertical();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FlowDirectionType flowDirectionType24 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FlowDirectionType.Reversed;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Vertical vertical25 = vertical23.setFlowDirection(flowDirectionType24);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VelocityObservation velocityObservation26 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VelocityObservation();
        vertical23.VelocityObservation = velocityObservation26;
        java.util.List<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VelocityDepthObservation> velocityDepthObservationList28 = velocityObservation26.getObservations();
        vertical5.VelocityObservation = velocityObservation26;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DeploymentMethodType deploymentMethodType30 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DeploymentMethodType.Unknown;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VelocityObservation velocityObservation31 = velocityObservation26.setDeploymentMethod(deploymentMethodType30);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Vertical vertical32 = vertical4.setVelocityObservation(velocityObservation31);
        java.lang.Double double33 = vertical4.getVerticalNumber();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CurrentMeter currentMeter34 = vertical4.getCurrentMeter();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VolumetricDischargeReading volumetricDischargeReading35 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VolumetricDischargeReading();
        java.lang.String str36 = volumetricDischargeReading35.getName();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VolumetricDischargeReading volumetricDischargeReading38 = volumetricDischargeReading35.setIsUsed((java.lang.Boolean) true);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary39 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary41 = dischargeSummary39.setPublish((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay42 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay();
        dischargeSummary41.DifferenceDuringVisit = doubleWithDisplay42;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay45 = doubleWithDisplay42.setNumeric((java.lang.Double) 100.0d);
        volumetricDischargeReading38.StartingVolume = doubleWithDisplay42;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay47 = volumetricDischargeReading38.VolumeChange;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Vertical vertical48 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Vertical();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Vertical vertical50 = vertical48.setPercentageOfTotalDischarge((java.lang.Double) 100.0d);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay51 = vertical50.getSegmentWidth();
        java.lang.Double double52 = vertical50.CosineOfUniqueFlow;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Vertical vertical53 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Vertical();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay54 = null;
        vertical53.EffectiveDepth = quantityWithDisplay54;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Vertical vertical57 = vertical53.setPercentageOfTotalDischarge((java.lang.Double) (-1.0d));
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary58 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary60 = dischargeSummary58.setPublish((java.lang.Boolean) false);
        java.lang.String str61 = dischargeSummary60.Reviewer;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary62 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        dischargeSummary62.Reviewer = "";
        dischargeSummary62.Publish = true;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MeasurementGradeType measurementGradeType67 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MeasurementGradeType.Good;
        dischargeSummary62.MeasurementGrade = measurementGradeType67;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary69 = dischargeSummary60.setMeasurementGrade(measurementGradeType67);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity pointVelocityDischargeActivity70 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity pointVelocityDischargeActivity72 = pointVelocityDischargeActivity70.setIsValid((java.lang.Boolean) false);
        pointVelocityDischargeActivity70.Manufacturer = "2021.4.62.0";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity pointVelocityDischargeActivity76 = pointVelocityDischargeActivity70.setSuspensionWeight("");
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Vertical> verticalList77 = pointVelocityDischargeActivity76.getVerticals();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DatumConvertedQuantityWithDisplay datumConvertedQuantityWithDisplay78 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DatumConvertedQuantityWithDisplay();
        pointVelocityDischargeActivity76.DistanceToMeter = datumConvertedQuantityWithDisplay78;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary80 = dischargeSummary60.setDischarge((com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay) datumConvertedQuantityWithDisplay78);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Vertical vertical81 = vertical57.setEffectiveDepth((com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay) datumConvertedQuantityWithDisplay78);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Vertical vertical82 = vertical50.setTaglinePosition((com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay) datumConvertedQuantityWithDisplay78);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VolumetricDischargeReading volumetricDischargeReading83 = volumetricDischargeReading38.setStartingVolume((com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay) datumConvertedQuantityWithDisplay78);
        vertical4.EffectiveDepth = datumConvertedQuantityWithDisplay78;
        org.junit.Assert.assertNotNull(vertical2);
        org.junit.Assert.assertTrue("'" + pointVelocityObservationType3 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityObservationType.OneAtPointSix + "'", pointVelocityObservationType3.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityObservationType.OneAtPointSix));
        org.junit.Assert.assertNotNull(vertical4);
        org.junit.Assert.assertNull(quantityWithDisplay6);
        org.junit.Assert.assertNotNull(vertical8);
        org.junit.Assert.assertNull(boolean9);
        org.junit.Assert.assertNotNull(vertical11);
        org.junit.Assert.assertNotNull(instant17);
        org.junit.Assert.assertNotNull(instant20);
        org.junit.Assert.assertNotNull(statisticalDateTimeOffset21);
        org.junit.Assert.assertTrue("'" + flowDirectionType24 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FlowDirectionType.Reversed + "'", flowDirectionType24.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FlowDirectionType.Reversed));
        org.junit.Assert.assertNotNull(vertical25);
        org.junit.Assert.assertNull(velocityDepthObservationList28);
        org.junit.Assert.assertTrue("'" + deploymentMethodType30 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DeploymentMethodType.Unknown + "'", deploymentMethodType30.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DeploymentMethodType.Unknown));
        org.junit.Assert.assertNotNull(velocityObservation31);
        org.junit.Assert.assertNotNull(vertical32);
        org.junit.Assert.assertNull(double33);
        org.junit.Assert.assertNull(currentMeter34);
        org.junit.Assert.assertNull(str36);
        org.junit.Assert.assertNotNull(volumetricDischargeReading38);
        org.junit.Assert.assertNotNull(dischargeSummary41);
        org.junit.Assert.assertNotNull(doubleWithDisplay45);
        org.junit.Assert.assertNull(doubleWithDisplay47);
        org.junit.Assert.assertNotNull(vertical50);
        org.junit.Assert.assertNull(quantityWithDisplay51);
        org.junit.Assert.assertNull(double52);
        org.junit.Assert.assertNotNull(vertical57);
        org.junit.Assert.assertNotNull(dischargeSummary60);
        org.junit.Assert.assertNull(str61);
        org.junit.Assert.assertTrue("'" + measurementGradeType67 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MeasurementGradeType.Good + "'", measurementGradeType67.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MeasurementGradeType.Good));
        org.junit.Assert.assertNotNull(dischargeSummary69);
        org.junit.Assert.assertNotNull(pointVelocityDischargeActivity72);
        org.junit.Assert.assertNotNull(pointVelocityDischargeActivity76);
        org.junit.Assert.assertNull(verticalList77);
        org.junit.Assert.assertNotNull(dischargeSummary80);
        org.junit.Assert.assertNotNull(vertical81);
        org.junit.Assert.assertNotNull(vertical82);
        org.junit.Assert.assertNotNull(volumetricDischargeReading83);
    }

    @Test
    public void test53146() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest106.test53146");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutLaboratory putLaboratory0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutLaboratory();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutLaboratory putLaboratory2 = putLaboratory0.setPhoneNumber("multipart/form-data; boundary=****7eff1774-b6b0-471a-961c-156c64359366****");
        java.lang.String str3 = putLaboratory0.Id;
        java.lang.String str4 = putLaboratory0.getCustomId();
        java.lang.String str5 = putLaboratory0.getDescription();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutLaboratory putLaboratory7 = putLaboratory0.setEmailAddress("****231224c4-98ce-4e30-bd65-1d25287c4abe****");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutLaboratory putLaboratory9 = putLaboratory0.setPointOfContact("multipart/form-data; boundary=****139d2780-c7bb-430f-8369-46ea90b53b7d****");
        java.lang.String str10 = putLaboratory0.getId();
        org.junit.Assert.assertNotNull(putLaboratory2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(putLaboratory7);
        org.junit.Assert.assertNotNull(putLaboratory9);
        org.junit.Assert.assertNull(str10);
    }

    @Test
    public void test53147() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest106.test53147");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportObservations getExportObservations0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportObservations();
        java.util.List<java.lang.String> strList1 = getExportObservations0.getLabReportIds();
        java.lang.String str2 = getExportObservations0.DepthUnitCustomId;
        java.util.List<java.lang.String> strList3 = getExportObservations0.getSearch();
        java.util.List<java.lang.String> strList4 = getExportObservations0.LabResultLaboratoryIds;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeTransactionListServiceRequest metadataChangeTransactionListServiceRequest5 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeTransactionListServiceRequest();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostRecurringReport postRecurringReport6 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostRecurringReport();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary7 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        dischargeSummary7.Reviewer = "";
        java.time.Instant instant10 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        dischargeSummary7.MeasurementTime = instant10;
        postRecurringReport6.NextGenerationDate = instant10;
        java.time.Instant instant13 = postRecurringReport6.getNextGenerationDate();
        java.lang.String str14 = com.aquaticinformatics.aquarius.sdk.samples.serializers.InstantSerializer.format(instant13);
        metadataChangeTransactionListServiceRequest5.QueryFrom = instant13;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportObservations getExportObservations16 = getExportObservations0.setEndObservedTime(instant13);
        java.lang.String str17 = getExportObservations0.getFilterId();
        java.lang.String str18 = getExportObservations0.getActivityCustomId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetAnalyticalGroups getAnalyticalGroups19 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetAnalyticalGroups();
        java.util.List<java.lang.String> strList20 = getAnalyticalGroups19.getAnalyticalGroupTypes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObservation importItemObservation21 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObservation();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest22 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest();
        java.lang.Object obj23 = timeAlignedDataServiceRequest22.getResponseType();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse24 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant25 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse26 = locationDescriptionListServiceResponse24.setNextToken(instant25);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest27 = timeAlignedDataServiceRequest22.setQueryFrom(instant25);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags28 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray32 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList33 = new java.util.ArrayList<java.lang.String>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList33, strArray32);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags35 = putLocationTags28.setTagUniqueIds(strList33);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest36 = timeAlignedDataServiceRequest22.setTimeSeriesOutputUnitIds(strList33);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObservation importItemObservation37 = importItemObservation21.setFields((java.util.List<java.lang.String>) strList33);
        java.lang.Object obj38 = importItemObservation37.getErrors();
        java.util.List<java.lang.String> strList39 = importItemObservation37.getWarningMessages();
        java.util.List<java.lang.String> strList40 = importItemObservation37.WarningMessages;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags41 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray45 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList46 = new java.util.ArrayList<java.lang.String>();
        boolean boolean47 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList46, strArray45);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags48 = putLocationTags41.setTagUniqueIds(strList46);
        java.lang.Object obj49 = putLocationTags48.getResponseType();
        java.util.ArrayList<java.lang.String> strList50 = putLocationTags48.getTagUniqueIds();
        importItemObservation37.WarningMessages = strList50;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetAnalyticalGroups getAnalyticalGroups52 = getAnalyticalGroups19.setAnalyticalGroupTypes((java.util.List<java.lang.String>) strList50);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportObservations getExportObservations53 = getExportObservations0.setSpecimenIds((java.util.List<java.lang.String>) strList50);
        java.util.List<java.lang.String> strList54 = getExportObservations0.ResultStatuses;
        java.util.List<java.lang.String> strList55 = getExportObservations0.getSamplingLocationIds();
        org.junit.Assert.assertNull(strList1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(strList3);
        org.junit.Assert.assertNull(strList4);
        org.junit.Assert.assertNotNull(instant10);
        org.junit.Assert.assertNotNull(instant13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "9999-12-31T23:59:59.999Z" + "'", str14, "9999-12-31T23:59:59.999Z");
        org.junit.Assert.assertNotNull(getExportObservations16);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNull(strList20);
        org.junit.Assert.assertNotNull(obj23);
        org.junit.Assert.assertEquals(obj23.toString(), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj23), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj23), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertNotNull(instant25);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse26);
        org.junit.Assert.assertNotNull(timeAlignedDataServiceRequest27);
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(putLocationTags35);
        org.junit.Assert.assertNotNull(timeAlignedDataServiceRequest36);
        org.junit.Assert.assertNotNull(importItemObservation37);
        org.junit.Assert.assertNull(obj38);
        org.junit.Assert.assertNull(strList39);
        org.junit.Assert.assertNull(strList40);
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(putLocationTags48);
        org.junit.Assert.assertNotNull(obj49);
        org.junit.Assert.assertEquals(obj49.toString(), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning$Location");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj49), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning$Location");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj49), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning$Location");
        org.junit.Assert.assertNotNull(strList50);
        org.junit.Assert.assertNotNull(getAnalyticalGroups52);
        org.junit.Assert.assertNotNull(getExportObservations53);
        org.junit.Assert.assertNull(strList54);
        org.junit.Assert.assertNull(strList55);
    }

    @Test
    public void test53148() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest106.test53148");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutOpenIdConnectUser putOpenIdConnectUser0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutOpenIdConnectUser();
        java.lang.String str1 = putOpenIdConnectUser0.getSubjectIdentifier();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutUserBase putUserBase3 = putOpenIdConnectUser0.setUniqueId("multipart/form-data; boundary=****bbcf5f9e-6ccf-4b63-91ab-6e645caf02af****");
        putOpenIdConnectUser0.LastName = "hi!";
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(putUserBase3);
    }

    @Test
    public void test53149() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest106.test53149");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PopulatedUnitGroup populatedUnitGroup0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PopulatedUnitGroup();
        java.lang.String str1 = populatedUnitGroup0.getDisplayName();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.UnitGroup unitGroup3 = populatedUnitGroup0.setCurrentDimension((java.lang.Integer) 100);
        java.lang.Integer int4 = populatedUnitGroup0.getIntensityDimension();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.UnitGroup unitGroup6 = populatedUnitGroup0.setGroupIdentifier("/AQUARIUS");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.UnitGroup unitGroup8 = unitGroup6.setGroupIdentifier("MinInstant");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.UnitGroup unitGroup10 = unitGroup6.setBaseUnitIdentifier("multipart/form-data; boundary=****73426a9f-8a73-4fda-95b3-78cea45bbfe9****");
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(unitGroup3);
        org.junit.Assert.assertNull(int4);
        org.junit.Assert.assertNotNull(unitGroup6);
        org.junit.Assert.assertNotNull(unitGroup8);
        org.junit.Assert.assertNotNull(unitGroup10);
    }

    @Test
    public void test53150() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest106.test53150");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.RuleValidationDetails ruleValidationDetails0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.RuleValidationDetails();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutOpenIdConnectAuth putOpenIdConnectAuth1 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutOpenIdConnectAuth();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutOpenIdConnectAuth putOpenIdConnectAuth3 = putOpenIdConnectAuth1.setIdentifier("");
        putOpenIdConnectAuth3.SubjectIdentifier = "http://MaxDurationhttp/json/reply/ArrayList";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.RuleValidationDetails ruleValidationDetails6 = ruleValidationDetails0.setProperties((java.lang.Object) "http://MaxDurationhttp/json/reply/ArrayList");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.RuleValidationDetails ruleValidationDetails8 = ruleValidationDetails6.setType("MinInstant");
        java.lang.String str9 = ruleValidationDetails6.getDescription();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeChannelMeasurement dischargeChannelMeasurement10 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeChannelMeasurement();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ChannelMaterialType channelMaterialType11 = dischargeChannelMeasurement10.getChannelMaterial();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay12 = dischargeChannelMeasurement10.Discharge;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.HorizontalFlowType horizontalFlowType13 = dischargeChannelMeasurement10.getHorizontalFlow();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeChannelMeasurement dischargeChannelMeasurement15 = dischargeChannelMeasurement10.setParty("yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSSSSSZZZZZ");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VelocityVariationType velocityVariationType16 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VelocityVariationType.Steady;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeChannelMeasurement dischargeChannelMeasurement17 = dischargeChannelMeasurement15.setVelocityVariation(velocityVariationType16);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ChannelEvennessType channelEvennessType18 = dischargeChannelMeasurement17.ChannelEvenness;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MeterSuspensionType meterSuspensionType19 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MeterSuspensionType.RigidBoatMount;
        dischargeChannelMeasurement17.MeterSuspension = meterSuspensionType19;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.RuleValidationDetails ruleValidationDetails21 = ruleValidationDetails6.setProperties((java.lang.Object) dischargeChannelMeasurement17);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SearchResultSpreadsheetTemplate searchResultSpreadsheetTemplate22 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SearchResultSpreadsheetTemplate();
        java.lang.Integer int23 = searchResultSpreadsheetTemplate22.TotalCount;
        java.lang.Integer int24 = searchResultSpreadsheetTemplate22.TotalCount;
        ruleValidationDetails6.Properties = int24;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEvent importHistoryEvent26 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEvent();
        java.time.OffsetDateTime offsetDateTime27 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEvent importHistoryEvent28 = importHistoryEvent26.setImportTime(offsetDateTime27);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEvent importHistoryEvent30 = importHistoryEvent26.setFileName("9999-12-31T23:59:59.999Z");
        ruleValidationDetails6.Properties = importHistoryEvent26;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.RuleValidationDetails ruleValidationDetails33 = ruleValidationDetails6.setType("multipart/form-data; boundary=****2e497db8-6b91-47d6-99bc-df65af225bf8****");
        ruleValidationDetails33.Type = "multipart/form-data; boundary=****1844e1de-1bae-48cf-aab8-ac5571d6efc7****";
        org.junit.Assert.assertNotNull(putOpenIdConnectAuth3);
        org.junit.Assert.assertNotNull(ruleValidationDetails6);
        org.junit.Assert.assertNotNull(ruleValidationDetails8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNull(channelMaterialType11);
        org.junit.Assert.assertNull(quantityWithDisplay12);
        org.junit.Assert.assertNull(horizontalFlowType13);
        org.junit.Assert.assertNotNull(dischargeChannelMeasurement15);
        org.junit.Assert.assertTrue("'" + velocityVariationType16 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VelocityVariationType.Steady + "'", velocityVariationType16.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VelocityVariationType.Steady));
        org.junit.Assert.assertNotNull(dischargeChannelMeasurement17);
        org.junit.Assert.assertNull(channelEvennessType18);
        org.junit.Assert.assertTrue("'" + meterSuspensionType19 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MeterSuspensionType.RigidBoatMount + "'", meterSuspensionType19.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MeterSuspensionType.RigidBoatMount));
        org.junit.Assert.assertNotNull(ruleValidationDetails21);
        org.junit.Assert.assertNull(int23);
        org.junit.Assert.assertNull(int24);
        org.junit.Assert.assertNotNull(importHistoryEvent28);
        org.junit.Assert.assertNotNull(importHistoryEvent30);
        org.junit.Assert.assertNotNull(ruleValidationDetails33);
    }

    @Test
    public void test53151() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest106.test53151");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.GetUnitGroup getUnitGroup0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.GetUnitGroup();
        java.lang.String str1 = getUnitGroup0.UniqueId;
        java.lang.String str2 = getUnitGroup0.UniqueId;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
    }

    @Test
    public void test53152() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest106.test53152");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostSpreadsheetTemplate postSpreadsheetTemplate0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostSpreadsheetTemplate();
        java.lang.String str1 = postSpreadsheetTemplate0.Id;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpreadsheetTemplateType spreadsheetTemplateType2 = postSpreadsheetTemplate0.Type;
        java.lang.String str3 = postSpreadsheetTemplate0.getId();
        java.lang.String str4 = postSpreadsheetTemplate0.getId();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(spreadsheetTemplateType2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(str4);
    }

    @Test
    public void test53153() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest106.test53153");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Unit unit0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Unit();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Unit unit2 = unit0.setUniqueId("yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ");
        java.lang.String str3 = unit2.UniqueId;
        java.lang.String str4 = unit2.Symbol;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Unit unit6 = unit2.setUnitIdentifier("hi!:///AQUARIUS/Provisioning/v1");
        org.junit.Assert.assertNotNull(unit2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ" + "'", str3, "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ");
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNotNull(unit6);
    }

    @Test
    public void test53154() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest106.test53154");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.FieldVisitSimple fieldVisitSimple0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.FieldVisitSimple();
        fieldVisitSimple0.Participants = "'.'SSSSSSS";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlanningStatusType planningStatusType3 = fieldVisitSimple0.getPlanningStatus();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationSimple samplingLocationSimple4 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.FieldVisitSimple fieldVisitSimple5 = fieldVisitSimple0.setSamplingLocation(samplingLocationSimple4);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlanningStatusType planningStatusType6 = null;
        fieldVisitSimple5.PlanningStatus = planningStatusType6;
        fieldVisitSimple5.Id = "MaxInstant";
        fieldVisitSimple5.Notes = "'.'SSSSSSS";
        java.time.OffsetDateTime offsetDateTime12 = null;
        fieldVisitSimple5.StartTime = offsetDateTime12;
        org.junit.Assert.assertNull(planningStatusType3);
        org.junit.Assert.assertNotNull(fieldVisitSimple5);
    }

    @Test
    public void test53155() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest106.test53155");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SearchResultActivityTemplate searchResultActivityTemplate0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SearchResultActivityTemplate();
        searchResultActivityTemplate0.Cursor = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ";
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ActivityTemplate> activityTemplateList3 = searchResultActivityTemplate0.DomainObjects;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SearchResultActivityTemplate searchResultActivityTemplate5 = searchResultActivityTemplate0.setCursor("****6c1e8d5f-414c-40a7-adc8-0ffe3463ffc2****");
        org.junit.Assert.assertNull(activityTemplateList3);
        org.junit.Assert.assertNotNull(searchResultActivityTemplate5);
    }

    @Test
    public void test53156() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest106.test53156");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabReport labReport0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabReport();
        java.time.OffsetDateTime offsetDateTime1 = null;
        labReport0.DateReceived = offsetDateTime1;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Laboratory laboratory3 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Laboratory();
        laboratory3.PhoneNumber = "yyyy'-'MM'-'dd'T'HH':'mm':'ss";
        java.lang.String str6 = laboratory3.getCustomId();
        labReport0.Laboratory = laboratory3;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Laboratory laboratory8 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Laboratory();
        laboratory8.PhoneNumber = "yyyy'-'MM'-'dd'T'HH':'mm':'ss";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Laboratory laboratory12 = laboratory8.setCustomId("/AQUARIUS/Provisioning/v1");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Laboratory laboratory14 = laboratory12.setCustomId("/AQUARIUS");
        labReport0.Laboratory = laboratory12;
        java.lang.String str16 = laboratory12.getDescription();
        java.lang.String str17 = laboratory12.getAddress();
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNotNull(laboratory12);
        org.junit.Assert.assertNotNull(laboratory14);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNull(str17);
    }

    @Test
    public void test53157() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest106.test53157");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.DeleteVisit deleteVisit0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.DeleteVisit();
        java.lang.String str1 = deleteVisit0.getVisitIdentifier();
        org.junit.Assert.assertNull(str1);
    }

    @Test
    public void test53158() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest106.test53158");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedPoint timeAlignedPoint0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedPoint();
        timeAlignedPoint0.Method9 = "multipart/form-data; boundary=****7eff1774-b6b0-471a-961c-156c64359366****";
        timeAlignedPoint0.DisplayValue9 = "";
        java.lang.String str5 = timeAlignedPoint0.getApprovalName4();
        java.lang.Long long6 = timeAlignedPoint0.getApprovalLevel7();
        java.lang.String str7 = timeAlignedPoint0.Method7;
        timeAlignedPoint0.NumericValue8 = 0.0d;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedPoint timeAlignedPoint11 = timeAlignedPoint0.setDisplayValue4("multipart/form-data; boundary=****9fadde69-3f13-40c4-a87c-0f3f51c2dd35****");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedPoint timeAlignedPoint13 = timeAlignedPoint0.setGradeCode3((java.lang.Long) 1L);
        java.lang.String str14 = timeAlignedPoint13.Method2;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedPoint timeAlignedPoint16 = timeAlignedPoint13.setGradeName7("https");
        java.lang.Long long17 = timeAlignedPoint16.getGradeCode5();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedPoint timeAlignedPoint19 = timeAlignedPoint16.setGradeName7("multipart/form-data; boundary=****e0afd3ef-ab93-4371-a368-4a6f5ef58c71****");
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(long6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(timeAlignedPoint11);
        org.junit.Assert.assertNotNull(timeAlignedPoint13);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(timeAlignedPoint16);
        org.junit.Assert.assertNull(long17);
        org.junit.Assert.assertNotNull(timeAlignedPoint19);
    }

    @Test
    public void test53159() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest106.test53159");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationFolder putLocationFolder0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationFolder();
        java.lang.Object obj1 = putLocationFolder0.getResponseType();
        java.lang.Object obj2 = putLocationFolder0.getResponseType();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationFolder putLocationFolder4 = putLocationFolder0.setLocationFolderUniqueId("multipart/form-data; boundary=****59879c02-0839-4b96-bc41-a13ebb706be4****");
        putLocationFolder0.LocationFolderUniqueId = "multipart/form-data; boundary=****5f5c0da4-c582-4ddf-ae9f-fc64a997490d****";
        org.junit.Assert.assertNotNull(obj1);
        org.junit.Assert.assertEquals(obj1.toString(), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning$LocationFolder");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj1), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning$LocationFolder");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj1), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning$LocationFolder");
        org.junit.Assert.assertNotNull(obj2);
        org.junit.Assert.assertEquals(obj2.toString(), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning$LocationFolder");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj2), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning$LocationFolder");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj2), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning$LocationFolder");
        org.junit.Assert.assertNotNull(putLocationFolder4);
    }

    @Test
    public void test53160() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest106.test53160");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedPoint timeAlignedPoint0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedPoint();
        timeAlignedPoint0.Method9 = "multipart/form-data; boundary=****7eff1774-b6b0-471a-961c-156c64359366****";
        timeAlignedPoint0.DisplayValue9 = "";
        java.lang.String str5 = timeAlignedPoint0.getApprovalName4();
        java.lang.Long long6 = timeAlignedPoint0.getGradeCode3();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedPoint timeAlignedPoint8 = timeAlignedPoint0.setGradeCode2((java.lang.Long) 1L);
        java.lang.Long long9 = timeAlignedPoint8.ApprovalLevel6;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedPoint timeAlignedPoint11 = timeAlignedPoint8.setApprovalName1("http://MaxDurationhttp/json/reply/ArrayList");
        java.lang.Long long12 = timeAlignedPoint8.getGradeCode9();
        java.lang.String str13 = timeAlignedPoint8.getMethod6();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedPoint timeAlignedPoint15 = timeAlignedPoint8.setGradeName7("multipart/form-data; boundary=****2d077bad-cd27-4736-8ba0-2a8d8a85733d****");
        java.lang.String str16 = timeAlignedPoint8.getDisplayValue3();
        java.lang.String str17 = timeAlignedPoint8.GradeName2;
        java.lang.String str18 = timeAlignedPoint8.GradeName10;
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(long6);
        org.junit.Assert.assertNotNull(timeAlignedPoint8);
        org.junit.Assert.assertNull(long9);
        org.junit.Assert.assertNotNull(timeAlignedPoint11);
        org.junit.Assert.assertNull(long12);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNotNull(timeAlignedPoint15);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertNull(str18);
    }

    @Test
    public void test53161() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest106.test53161");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutObservationV2 putObservationV2_0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutObservationV2();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLaboratory postLaboratory1 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLaboratory();
        java.lang.String str2 = postLaboratory1.Address;
        java.lang.String str3 = postLaboratory1.Name;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivity samplingPlanPlannedActivity4 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivity();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes5 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivity samplingPlanPlannedActivity6 = samplingPlanPlannedActivity4.setAuditAttributes(auditAttributes5);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes7 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes9 = auditAttributes7.setCreationUserProfileId("'.'SSSSSSS");
        samplingPlanPlannedActivity6.AuditAttributes = auditAttributes7;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes11 = samplingPlanPlannedActivity6.AuditAttributes;
        postLaboratory1.AuditAttributes = auditAttributes11;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLaboratory postLaboratory14 = postLaboratory1.setName("yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.TaxonomicResult taxonomicResult15 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.TaxonomicResult();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Taxon taxon16 = taxonomicResult15.Taxon;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes17 = taxonomicResult15.AuditAttributes;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutTag putTag18 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutTag();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlan samplingPlan19 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlan();
        samplingPlan19.SamplingLocationGroupSelectionTypeRandomCount = 0;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationGroupSelectionType samplingLocationGroupSelectionType22 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationGroupSelectionType.ALL;
        samplingPlan19.SamplingLocationGroupSelectionType = samplingLocationGroupSelectionType22;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationGroup samplingLocationGroup24 = samplingPlan19.getSamplingLocationGroup();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes25 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlan samplingPlan26 = samplingPlan19.setAuditAttributes(auditAttributes25);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutTag putTag27 = putTag18.setAuditAttributes(auditAttributes25);
        taxonomicResult15.AuditAttributes = auditAttributes25;
        postLaboratory14.AuditAttributes = auditAttributes25;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutObservationV2 putObservationV2_30 = putObservationV2_0.setAuditAttributes(auditAttributes25);
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.RuleValidationDetails> ruleValidationDetailsList31 = putObservationV2_30.getValidationWarnings();
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttribute> extendedAttributeList32 = putObservationV2_30.getExtendedAttributes();
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple> importHistoryEventSimpleList33 = putObservationV2_30.ImportHistoryEventSimples;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservedProperty postObservedProperty34 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservedProperty();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UnitGroup unitGroup35 = postObservedProperty34.UnitGroup;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple[] importHistoryEventSimpleArray36 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple> importHistoryEventSimpleList37 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple>) importHistoryEventSimpleList37, importHistoryEventSimpleArray36);
        postObservedProperty34.ImportHistoryEventSimples = importHistoryEventSimpleList37;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Unit unit40 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservedProperty postObservedProperty41 = postObservedProperty34.setDefaultUnit(unit40);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation42 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedFieldResult plannedFieldResult43 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation44 = observation42.setPlannedFieldResult(plannedFieldResult43);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabInstruction labInstruction45 = null;
        observation44.LabInstruction = labInstruction45;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationStatistics observationStatistics47 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation48 = observation44.setStatistics(observationStatistics47);
        java.time.OffsetDateTime offsetDateTime49 = observation48.getResultTime();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultGrade resultGrade50 = observation48.ResultGrade;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.NullMeasureQualifier nullMeasureQualifier51 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation52 = observation48.setNullMeasureQualifier(nullMeasureQualifier51);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservedProperty postObservedProperty53 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservedProperty();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UnitGroup unitGroup54 = postObservedProperty53.UnitGroup;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity quantity55 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Unit unit56 = null;
        quantity55.Unit = unit56;
        postObservedProperty53.LowerLimit = quantity55;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity quantity59 = postObservedProperty53.LowerLimit;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Unit unit60 = quantity59.Unit;
        observation52.Depth = quantity59;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservedProperty postObservedProperty62 = postObservedProperty41.setLowerLimit(quantity59);
        putObservationV2_30.Depth = quantity59;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutObservationV2 putObservationV2_65 = putObservationV2_30.setCustomId("multipart/form-data; boundary=****1844e1de-1bae-48cf-aab8-ac5571d6efc7****");
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(samplingPlanPlannedActivity6);
        org.junit.Assert.assertNotNull(auditAttributes9);
        org.junit.Assert.assertNotNull(auditAttributes11);
        org.junit.Assert.assertNotNull(postLaboratory14);
        org.junit.Assert.assertNull(taxon16);
        org.junit.Assert.assertNull(auditAttributes17);
        org.junit.Assert.assertTrue("'" + samplingLocationGroupSelectionType22 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationGroupSelectionType.ALL + "'", samplingLocationGroupSelectionType22.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationGroupSelectionType.ALL));
        org.junit.Assert.assertNull(samplingLocationGroup24);
        org.junit.Assert.assertNotNull(samplingPlan26);
        org.junit.Assert.assertNotNull(putTag27);
        org.junit.Assert.assertNotNull(putObservationV2_30);
        org.junit.Assert.assertNull(ruleValidationDetailsList31);
        org.junit.Assert.assertNull(extendedAttributeList32);
        org.junit.Assert.assertNull(importHistoryEventSimpleList33);
        org.junit.Assert.assertNull(unitGroup35);
        org.junit.Assert.assertNotNull(importHistoryEventSimpleArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(postObservedProperty41);
        org.junit.Assert.assertNotNull(observation44);
        org.junit.Assert.assertNotNull(observation48);
        org.junit.Assert.assertNull(offsetDateTime49);
        org.junit.Assert.assertNull(resultGrade50);
        org.junit.Assert.assertNotNull(observation52);
        org.junit.Assert.assertNull(unitGroup54);
        org.junit.Assert.assertNotNull(quantity59);
        org.junit.Assert.assertNull(unit60);
        org.junit.Assert.assertNotNull(postObservedProperty62);
        org.junit.Assert.assertNotNull(putObservationV2_65);
    }

    @Test
    public void test53162() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest106.test53162");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetMediumHistory getMediumHistory0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetMediumHistory();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetMediumHistory getMediumHistory2 = getMediumHistory0.setId("MaxInstant");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetMediumHistory getMediumHistory4 = getMediumHistory2.setId("hi!");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetMediumHistory getMediumHistory6 = getMediumHistory2.setId("ZZZZZ");
        java.lang.String str7 = getMediumHistory6.Id;
        java.lang.Object obj8 = getMediumHistory6.getResponseType();
        java.lang.String str9 = getMediumHistory6.getId();
        org.junit.Assert.assertNotNull(getMediumHistory2);
        org.junit.Assert.assertNotNull(getMediumHistory4);
        org.junit.Assert.assertNotNull(getMediumHistory6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "ZZZZZ" + "'", str7, "ZZZZZ");
        org.junit.Assert.assertNotNull(obj8);
        org.junit.Assert.assertEquals(obj8.toString(), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$SearchResultAuditHistory");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj8), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$SearchResultAuditHistory");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj8), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$SearchResultAuditHistory");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "ZZZZZ" + "'", str9, "ZZZZZ");
    }

    @Test
    public void test53163() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest106.test53163");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationStandard observationStandard0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationStandard();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation1 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedFieldResult plannedFieldResult2 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation3 = observation1.setPlannedFieldResult(plannedFieldResult2);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabInstruction labInstruction4 = null;
        observation3.LabInstruction = labInstruction4;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationStatistics observationStatistics6 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation7 = observation3.setStatistics(observationStatistics6);
        java.time.OffsetDateTime offsetDateTime8 = observation7.getResultTime();
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple> importHistoryEventSimpleList9 = observation7.ImportHistoryEventSimples;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty observedProperty10 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation11 = observation7.setObservedProperty(observedProperty10);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultGrade resultGrade12 = observation11.ResultGrade;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails13 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails15 = labResultDetails13.setAnalysisComment("/AQUARIUS/Acquisition/v2");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes16 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails17 = labResultDetails15.setAuditAttributes(auditAttributes16);
        observation11.AuditAttributes = auditAttributes16;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricConfiguration metricConfiguration19 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricConfiguration();
        java.lang.String str20 = metricConfiguration19.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty observedProperty21 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty();
        observedProperty21.CasNumber = "MinDuration";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricConfiguration metricConfiguration24 = metricConfiguration19.setObservedProperty(observedProperty21);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultType resultType25 = observedProperty21.ResultType;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservedProperty postObservedProperty26 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservedProperty();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UnitGroup unitGroup27 = postObservedProperty26.UnitGroup;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity quantity28 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Unit unit29 = null;
        quantity28.Unit = unit29;
        postObservedProperty26.LowerLimit = quantity28;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity quantity32 = postObservedProperty26.LowerLimit;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Unit unit33 = quantity32.Unit;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty observedProperty34 = observedProperty21.setUpperLimit(quantity32);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UnitGroup unitGroup35 = observedProperty34.UnitGroup;
        observation11.ObservedProperty = observedProperty34;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty observedProperty38 = observedProperty34.setCustomId("/AQUARIUS");
        observationStandard0.ObservedProperty = observedProperty34;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity quantity40 = observationStandard0.getResultLowerLimit();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ChartData chartData41 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ChartData();
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ChartDataPoint> chartDataPointList42 = chartData41.getDataPoints();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UnitGroupWithUnits unitGroupWithUnits43 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ChartData chartData44 = chartData41.setDepthUnitGroupWithUnits(unitGroupWithUnits43);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UnitGroupWithUnits unitGroupWithUnits45 = chartData41.UnitGroupWithUnits;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocation samplingLocation46 = chartData41.getSamplingLocation();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty observedProperty47 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty();
        observedProperty47.CasNumber = "MinDuration";
        java.lang.String str50 = observedProperty47.getCasNumber();
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple> importHistoryEventSimpleList51 = observedProperty47.ImportHistoryEventSimples;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ChartData chartData52 = chartData41.setObservedProperty(observedProperty47);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty observedProperty53 = chartData52.ObservedProperty;
        java.lang.String str54 = observedProperty53.getCasNumber();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationStandard observationStandard55 = observationStandard0.setObservedProperty(observedProperty53);
        org.junit.Assert.assertNotNull(observation3);
        org.junit.Assert.assertNotNull(observation7);
        org.junit.Assert.assertNull(offsetDateTime8);
        org.junit.Assert.assertNull(importHistoryEventSimpleList9);
        org.junit.Assert.assertNotNull(observation11);
        org.junit.Assert.assertNull(resultGrade12);
        org.junit.Assert.assertNotNull(labResultDetails15);
        org.junit.Assert.assertNotNull(labResultDetails17);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNotNull(metricConfiguration24);
        org.junit.Assert.assertNull(resultType25);
        org.junit.Assert.assertNull(unitGroup27);
        org.junit.Assert.assertNotNull(quantity32);
        org.junit.Assert.assertNull(unit33);
        org.junit.Assert.assertNotNull(observedProperty34);
        org.junit.Assert.assertNull(unitGroup35);
        org.junit.Assert.assertNotNull(observedProperty38);
        org.junit.Assert.assertNull(quantity40);
        org.junit.Assert.assertNull(chartDataPointList42);
        org.junit.Assert.assertNotNull(chartData44);
        org.junit.Assert.assertNull(unitGroupWithUnits45);
        org.junit.Assert.assertNull(samplingLocation46);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "MinDuration" + "'", str50, "MinDuration");
        org.junit.Assert.assertNull(importHistoryEventSimpleList51);
        org.junit.Assert.assertNotNull(chartData52);
        org.junit.Assert.assertNotNull(observedProperty53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "MinDuration" + "'", str54, "MinDuration");
        org.junit.Assert.assertNotNull(observationStandard55);
    }

    @Test
    public void test53164() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest106.test53164");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.DropDownList dropDownList0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.DropDownList();
        java.lang.String str1 = dropDownList0.Id;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.DropDownList dropDownList3 = dropDownList0.setDisplayName("multipart/form-data; boundary=****da58f2ef-63a3-4c78-8209-7fba304b6eeb****");
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(dropDownList3);
    }

    @Test
    public void test53165() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest106.test53165");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity postActivity0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes1 = postActivity0.getAuditAttributes();
        java.lang.Boolean boolean2 = postActivity0.Refreshed;
        java.lang.String str3 = postActivity0.LoggerFileName;
        java.time.OffsetDateTime offsetDateTime4 = null;
        postActivity0.StartTime = offsetDateTime4;
        java.lang.String str6 = postActivity0.getLoggerFileName();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes7 = postActivity0.AuditAttributes;
        org.junit.Assert.assertNull(auditAttributes1);
        org.junit.Assert.assertNull(boolean2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(auditAttributes7);
    }

    @Test
    public void test53166() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest106.test53166");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Project project0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Project();
        java.lang.String str1 = project0.getName();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ProjectType projectType2 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ProjectType.EVENT_BASED_MONITORING;
        project0.Type = projectType2;
        java.time.OffsetDateTime offsetDateTime4 = project0.getStartTime();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Project project6 = project0.setScopeStatement("/AQUARIUS/Acquisition/v2");
        java.lang.String str7 = project6.Name;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Project project9 = project6.setScopeStatement("multipart/form-data; boundary=****ee0ec537-fde4-45ee-9c35-68c37cf65c1c****");
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + projectType2 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ProjectType.EVENT_BASED_MONITORING + "'", projectType2.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ProjectType.EVENT_BASED_MONITORING));
        org.junit.Assert.assertNull(offsetDateTime4);
        org.junit.Assert.assertNotNull(project6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(project9);
    }

    @Test
    public void test53167() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest106.test53167");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetAccessGroups getAccessGroups0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetAccessGroups();
        java.lang.Object obj1 = getAccessGroups0.getResponseType();
        java.lang.Object obj2 = getAccessGroups0.getResponseType();
        java.lang.Object obj3 = getAccessGroups0.getResponseType();
        java.lang.Object obj4 = getAccessGroups0.getResponseType();
        org.junit.Assert.assertNotNull(obj1);
        org.junit.Assert.assertEquals(obj1.toString(), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$SearchResultAccessGroup");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj1), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$SearchResultAccessGroup");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj1), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$SearchResultAccessGroup");
        org.junit.Assert.assertNotNull(obj2);
        org.junit.Assert.assertEquals(obj2.toString(), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$SearchResultAccessGroup");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj2), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$SearchResultAccessGroup");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj2), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$SearchResultAccessGroup");
        org.junit.Assert.assertNotNull(obj3);
        org.junit.Assert.assertEquals(obj3.toString(), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$SearchResultAccessGroup");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj3), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$SearchResultAccessGroup");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj3), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$SearchResultAccessGroup");
        org.junit.Assert.assertNotNull(obj4);
        org.junit.Assert.assertEquals(obj4.toString(), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$SearchResultAccessGroup");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj4), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$SearchResultAccessGroup");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj4), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$SearchResultAccessGroup");
    }

    @Test
    public void test53168() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest106.test53168");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabReport labReport0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabReport();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Laboratory laboratory1 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Laboratory();
        laboratory1.Id = "MaxInstant";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Laboratory laboratory5 = laboratory1.setName("hi!:///AQUARIUS/Provisioning/v1");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabReport labReport6 = labReport0.setLaboratory(laboratory5);
        java.lang.String str7 = labReport6.getQcSummary();
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment> domainObjectAttachmentList8 = labReport6.getAttachments();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Specimen specimen9 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Specimen();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Specimen specimen11 = specimen9.setFiltrationComment("9999-12-31T23:59:59.9999999Z://2021.4.62.0");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Specimen specimen13 = specimen11.setName("9999-12-31T23:59:59.9999999Z://2021.4.62.0");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostCollectionMethod postCollectionMethod14 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostCollectionMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity postActivity15 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity();
        postActivity15.LoggerFileName = "hi!";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity postActivity19 = postActivity15.setCustomId("");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes20 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity postActivity21 = postActivity19.setAuditAttributes(auditAttributes20);
        postCollectionMethod14.AuditAttributes = auditAttributes20;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Specimen specimen23 = specimen11.setAuditAttributes(auditAttributes20);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Laboratory laboratory24 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Laboratory();
        laboratory24.PhoneNumber = "yyyy'-'MM'-'dd'T'HH':'mm':'ss";
        java.lang.String str27 = laboratory24.getCustomId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes28 = laboratory24.getAuditAttributes();
        java.lang.String str29 = laboratory24.getPointOfContact();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Specimen specimen30 = specimen11.setLaboratory(laboratory24);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabReport labReport31 = labReport6.setLaboratory(laboratory24);
        org.junit.Assert.assertNotNull(laboratory5);
        org.junit.Assert.assertNotNull(labReport6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(domainObjectAttachmentList8);
        org.junit.Assert.assertNotNull(specimen11);
        org.junit.Assert.assertNotNull(specimen13);
        org.junit.Assert.assertNotNull(postActivity19);
        org.junit.Assert.assertNotNull(postActivity21);
        org.junit.Assert.assertNotNull(specimen23);
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertNull(auditAttributes28);
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertNotNull(specimen30);
        org.junit.Assert.assertNotNull(labReport31);
    }

    @Test
    public void test53169() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest106.test53169");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SearchResultResultStatus searchResultResultStatus0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SearchResultResultStatus();
        java.lang.String str1 = searchResultResultStatus0.Cursor;
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultStatus> resultStatusList2 = searchResultResultStatus0.getDomainObjects();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SearchResultResultStatus searchResultResultStatus4 = searchResultResultStatus0.setTotalCount((java.lang.Integer) 0);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SearchResultResultStatus searchResultResultStatus6 = searchResultResultStatus4.setCursor("http:///AQUARIUS/Acquisition/v2multipart/form-data; boundary=****44f0772e-c3ca-4316-8e2a-61ec8540d661****/v1/observedproperties/{id}/categoricalvalues");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SearchResultResultStatus searchResultResultStatus7 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SearchResultResultStatus();
        java.lang.String str8 = searchResultResultStatus7.Cursor;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SearchResultResultStatus searchResultResultStatus9 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SearchResultResultStatus();
        java.lang.String str10 = searchResultResultStatus9.Cursor;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultStatus[] resultStatusArray11 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultStatus[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultStatus> resultStatusList12 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultStatus>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultStatus>) resultStatusList12, resultStatusArray11);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SearchResultResultStatus searchResultResultStatus14 = searchResultResultStatus9.setDomainObjects((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultStatus>) resultStatusList12);
        searchResultResultStatus7.DomainObjects = resultStatusList12;
        searchResultResultStatus4.DomainObjects = resultStatusList12;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(resultStatusList2);
        org.junit.Assert.assertNotNull(searchResultResultStatus4);
        org.junit.Assert.assertNotNull(searchResultResultStatus6);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNotNull(resultStatusArray11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(searchResultResultStatus14);
    }

    @Test
    public void test53170() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest106.test53170");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSpecimen putSpecimen0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSpecimen();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Activity activity1 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Activity();
        putSpecimen0.Activity = activity1;
        java.lang.String str3 = activity1.Id;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ActivityType activityType4 = activity1.getType();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Device device5 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Device();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Device device7 = device5.setType("/AQUARIUS/Acquisition/v2");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Device device9 = device7.setType("/AQUARIUS/Acquisition/v2://9999-12-31T23:59:59.999Z");
        java.lang.String str10 = device7.getType();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Activity activity11 = activity1.setDevice(device7);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Activity activity13 = activity11.setCustomId("ZZZZZ");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Device device14 = activity13.getDevice();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity quantity15 = activity13.Depth;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Device device16 = activity13.Device;
        java.lang.String str17 = device16.Name;
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(activityType4);
        org.junit.Assert.assertNotNull(device7);
        org.junit.Assert.assertNotNull(device9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "/AQUARIUS/Acquisition/v2://9999-12-31T23:59:59.999Z" + "'", str10, "/AQUARIUS/Acquisition/v2://9999-12-31T23:59:59.999Z");
        org.junit.Assert.assertNotNull(activity11);
        org.junit.Assert.assertNotNull(activity13);
        org.junit.Assert.assertNotNull(device14);
        org.junit.Assert.assertNull(quantity15);
        org.junit.Assert.assertNotNull(device16);
        org.junit.Assert.assertNull(str17);
    }

    @Test
    public void test53171() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest106.test53171");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutBulkEditResultGradesV2 putBulkEditResultGradesV2_0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutBulkEditResultGradesV2();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeField extendedAttributeField1 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeField();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeField extendedAttributeField3 = extendedAttributeField1.setDisplayName("");
        java.lang.Boolean boolean4 = extendedAttributeField3.CanBeEmpty;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest5 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest();
        java.lang.Object obj6 = timeAlignedDataServiceRequest5.getResponseType();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_7 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray10 = new java.lang.String[] { "", "" };
        java.util.ArrayList<java.lang.String> strList11 = new java.util.ArrayList<java.lang.String>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList11, strArray10);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_13 = getObservationsV2_7.setDataClassifications((java.util.List<java.lang.String>) strList11);
        getObservationsV2_13.DepthUnitCustomId = "hi!";
        java.lang.String str16 = getObservationsV2_13.CustomId;
        java.util.List<java.lang.String> strList17 = getObservationsV2_13.getSearch();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_18 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray20 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList21 = new java.util.ArrayList<java.lang.String>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList21, strArray20);
        getObservationsV2_18.SpecimenIds = strList21;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags24 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray28 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList29 = new java.util.ArrayList<java.lang.String>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList29, strArray28);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags31 = putLocationTags24.setTagUniqueIds(strList29);
        getObservationsV2_18.QualityControlTypes = strList29;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_33 = getObservationsV2_13.setMedia((java.util.List<java.lang.String>) strList29);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_34 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String str35 = getObservationsV2_34.getCustomId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_36 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray38 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList39 = new java.util.ArrayList<java.lang.String>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList39, strArray38);
        getObservationsV2_36.SpecimenIds = strList39;
        getObservationsV2_34.ProjectIds = strList39;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_43 = getObservationsV2_13.setObservedPropertyIds((java.util.List<java.lang.String>) strList39);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest44 = timeAlignedDataServiceRequest5.setTimeSeriesOutputUnitIds(strList39);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeField extendedAttributeField45 = extendedAttributeField3.setValueOptions((java.util.List<java.lang.String>) strList39);
        putBulkEditResultGradesV2_0.AnalysisMethodSimpleIds = strList39;
        java.lang.String str47 = putBulkEditResultGradesV2_0.getSpecimenName();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SampleFractionType sampleFractionType48 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SampleFractionType.DISSOLVED;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutBulkEditResultGradesV2 putBulkEditResultGradesV2_49 = putBulkEditResultGradesV2_0.setSampleFraction(sampleFractionType48);
        java.util.List<java.lang.String> strList50 = putBulkEditResultGradesV2_49.ResultGrades;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeChannelMeasurement dischargeChannelMeasurement51 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeChannelMeasurement();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ChannelMaterialType channelMaterialType52 = dischargeChannelMeasurement51.getChannelMaterial();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay53 = null;
        dischargeChannelMeasurement51.Discharge = quantityWithDisplay53;
        dischargeChannelMeasurement51.Comments = "https";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeChannelMeasurement dischargeChannelMeasurement57 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeChannelMeasurement();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ChannelMaterialType channelMaterialType58 = dischargeChannelMeasurement57.getChannelMaterial();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay59 = dischargeChannelMeasurement57.Discharge;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.HorizontalFlowType horizontalFlowType60 = dischargeChannelMeasurement57.getHorizontalFlow();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeChannelMeasurement dischargeChannelMeasurement62 = dischargeChannelMeasurement57.setParty("yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSSSSSZZZZZ");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MeasurementLocationToGageType measurementLocationToGageType63 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MeasurementLocationToGageType.Downstream;
        dischargeChannelMeasurement62.MeasurementLocationToGage = measurementLocationToGageType63;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeChannelMeasurement dischargeChannelMeasurement65 = dischargeChannelMeasurement51.setMeasurementLocationToGage(measurementLocationToGageType63);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Qualifier qualifier66 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Qualifier();
        java.time.Instant instant67 = qualifier66.DateApplied;
        java.lang.String str68 = qualifier66.User;
        java.lang.String str69 = qualifier66.getIdentifier();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest70 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest();
        java.lang.Object obj71 = timeAlignedDataServiceRequest70.getResponseType();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse72 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant73 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse74 = locationDescriptionListServiceResponse72.setNextToken(instant73);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest75 = timeAlignedDataServiceRequest70.setQueryFrom(instant73);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Qualifier qualifier76 = qualifier66.setDateApplied(instant73);
        dischargeChannelMeasurement65.StartTime = instant73;
        putBulkEditResultGradesV2_49.EndResultTime = instant73;
        java.lang.String str79 = putBulkEditResultGradesV2_49.getDetectionCondition();
        org.junit.Assert.assertNotNull(extendedAttributeField3);
        org.junit.Assert.assertNull(boolean4);
        org.junit.Assert.assertNotNull(obj6);
        org.junit.Assert.assertEquals(obj6.toString(), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj6), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj6), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(getObservationsV2_13);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNull(strList17);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(putLocationTags31);
        org.junit.Assert.assertNotNull(getObservationsV2_33);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(getObservationsV2_43);
        org.junit.Assert.assertNotNull(timeAlignedDataServiceRequest44);
        org.junit.Assert.assertNotNull(extendedAttributeField45);
        org.junit.Assert.assertNull(str47);
        org.junit.Assert.assertTrue("'" + sampleFractionType48 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SampleFractionType.DISSOLVED + "'", sampleFractionType48.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SampleFractionType.DISSOLVED));
        org.junit.Assert.assertNotNull(putBulkEditResultGradesV2_49);
        org.junit.Assert.assertNull(strList50);
        org.junit.Assert.assertNull(channelMaterialType52);
        org.junit.Assert.assertNull(channelMaterialType58);
        org.junit.Assert.assertNull(quantityWithDisplay59);
        org.junit.Assert.assertNull(horizontalFlowType60);
        org.junit.Assert.assertNotNull(dischargeChannelMeasurement62);
        org.junit.Assert.assertTrue("'" + measurementLocationToGageType63 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MeasurementLocationToGageType.Downstream + "'", measurementLocationToGageType63.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MeasurementLocationToGageType.Downstream));
        org.junit.Assert.assertNotNull(dischargeChannelMeasurement65);
        org.junit.Assert.assertNull(instant67);
        org.junit.Assert.assertNull(str68);
        org.junit.Assert.assertNull(str69);
        org.junit.Assert.assertNotNull(obj71);
        org.junit.Assert.assertEquals(obj71.toString(), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj71), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj71), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertNotNull(instant73);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse74);
        org.junit.Assert.assertNotNull(timeAlignedDataServiceRequest75);
        org.junit.Assert.assertNotNull(qualifier76);
        org.junit.Assert.assertNull(str79);
    }

    @Test
    public void test53172() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest106.test53172");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AttachmentRepresentation attachmentRepresentation0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AttachmentRepresentation();
        java.lang.String str1 = attachmentRepresentation0.getLongitude();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AttachmentRepresentation attachmentRepresentation3 = attachmentRepresentation0.setContentType("yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSSSSSZZZZZ");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AttachmentRepresentation attachmentRepresentation5 = attachmentRepresentation3.setLongitude("hi!");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AttachmentRepresentation attachmentRepresentation7 = attachmentRepresentation3.setSuccess((java.lang.Boolean) true);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AttachmentRepresentation attachmentRepresentation9 = attachmentRepresentation3.setComment("/AQUARIUS/Acquisition/v2");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributesFull auditAttributesFull10 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributesFull();
        java.lang.String str11 = auditAttributesFull10.getModificationUserProfileId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UserProfile userProfile12 = auditAttributesFull10.CreationUserProfile;
        attachmentRepresentation9.AuditAttributes = auditAttributesFull10;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AttachmentRepresentation attachmentRepresentation15 = attachmentRepresentation9.setLongitude("http");
        java.lang.String str16 = attachmentRepresentation9.Comment;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributesFull auditAttributesFull17 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributesFull();
        java.lang.String str18 = auditAttributesFull17.getModificationUserProfileId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UserProfile userProfile19 = auditAttributesFull17.getModificationUserProfile();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UserProfile userProfile20 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributesFull auditAttributesFull21 = auditAttributesFull17.setModificationUserProfile(userProfile20);
        java.time.OffsetDateTime offsetDateTime22 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributesFull auditAttributesFull23 = auditAttributesFull21.setModificationTime(offsetDateTime22);
        auditAttributesFull21.ModificationUserProfileId = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ";
        java.time.OffsetDateTime offsetDateTime26 = auditAttributesFull21.getCreationTime();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AttachmentRepresentation attachmentRepresentation27 = attachmentRepresentation9.setAuditAttributes(auditAttributesFull21);
        java.lang.String str28 = attachmentRepresentation27.getId();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(attachmentRepresentation3);
        org.junit.Assert.assertNotNull(attachmentRepresentation5);
        org.junit.Assert.assertNotNull(attachmentRepresentation7);
        org.junit.Assert.assertNotNull(attachmentRepresentation9);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNull(userProfile12);
        org.junit.Assert.assertNotNull(attachmentRepresentation15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "/AQUARIUS/Acquisition/v2" + "'", str16, "/AQUARIUS/Acquisition/v2");
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNull(userProfile19);
        org.junit.Assert.assertNotNull(auditAttributesFull21);
        org.junit.Assert.assertNotNull(auditAttributesFull23);
        org.junit.Assert.assertNull(offsetDateTime26);
        org.junit.Assert.assertNotNull(attachmentRepresentation27);
        org.junit.Assert.assertNull(str28);
    }

    @Test
    public void test53173() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest106.test53173");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ActivityWithDetails activityWithDetails0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ActivityWithDetails();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ActivityWithDetails activityWithDetails2 = activityWithDetails0.setSourceActivityId("multipart/form-data; boundary=****2917d69a-62fa-41ce-b981-4dbe2deab9f5****");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.CollectionMethod collectionMethod3 = activityWithDetails2.CollectionMethod;
        java.lang.String str4 = activityWithDetails2.getComment();
        java.time.OffsetDateTime offsetDateTime5 = activityWithDetails2.StartTime;
        org.junit.Assert.assertNotNull(activityWithDetails2);
        org.junit.Assert.assertNull(collectionMethod3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(offsetDateTime5);
    }

    @Test
    public void test53174() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest106.test53174");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Location location0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Location();
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.AppliedTag> appliedTagList1 = location0.Tags;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Location location3 = location0.setUniqueId("MaxInstant");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Location location5 = location3.setUtcOffset("9999-12-31T23:59:59.999Z");
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.AppliedTag> appliedTagList6 = location3.getTags();
        java.lang.String str7 = location3.getIdentifier();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.AppliedTag appliedTag8 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.AppliedTag();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.AppliedTag appliedTag9 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.AppliedTag();
        java.lang.String str10 = appliedTag9.getUniqueId();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.AppliedTag appliedTag11 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.AppliedTag();
        java.lang.String str12 = appliedTag11.getUniqueId();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.AppliedTag[] appliedTagArray13 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.AppliedTag[] { appliedTag8, appliedTag9, appliedTag11 };
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.AppliedTag> appliedTagList14 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.AppliedTag>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.AppliedTag>) appliedTagList14, appliedTagArray13);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Location location16 = location3.setTags(appliedTagList14);
        java.lang.String str17 = location3.UtcOffset;
        java.lang.String str18 = location3.UniqueId;
        location3.Description = "http://MaxDurationhttp/json/reply/ArrayList";
        location3.Publish = true;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Location location24 = location3.setDescription("multipart/form-data; boundary=****f2ce0d54-dac7-4cd0-b74f-1024089261f9****");
        org.junit.Assert.assertNull(appliedTagList1);
        org.junit.Assert.assertNotNull(location3);
        org.junit.Assert.assertNotNull(location5);
        org.junit.Assert.assertNull(appliedTagList6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(appliedTagArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(location16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "9999-12-31T23:59:59.999Z" + "'", str17, "9999-12-31T23:59:59.999Z");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "MaxInstant" + "'", str18, "MaxInstant");
        org.junit.Assert.assertNotNull(location24);
    }

    @Test
    public void test53175() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest106.test53175");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostActiveDirectoryUser postActiveDirectoryUser0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostActiveDirectoryUser();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostActiveDirectoryUser postActiveDirectoryUser2 = postActiveDirectoryUser0.setUserPrincipalName("multipart/form-data; boundary=****f642a130-eb6d-4fb6-a1a4-7c7216ab119b****");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostActiveDirectoryUser postActiveDirectoryUser4 = postActiveDirectoryUser2.setActiveDirectorySid("multipart/form-data; boundary=****2917d69a-62fa-41ce-b981-4dbe2deab9f5****");
        java.lang.Object obj5 = postActiveDirectoryUser4.getResponseType();
        java.lang.Object obj6 = postActiveDirectoryUser4.getResponseType();
        postActiveDirectoryUser4.ActiveDirectorySid = "multipart/form-data; boundary=****2917d69a-62fa-41ce-b981-4dbe2deab9f5****";
        java.lang.Object obj9 = postActiveDirectoryUser4.getResponseType();
        org.junit.Assert.assertNotNull(postActiveDirectoryUser2);
        org.junit.Assert.assertNotNull(postActiveDirectoryUser4);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning$User");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning$User");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning$User");
        org.junit.Assert.assertNotNull(obj6);
        org.junit.Assert.assertEquals(obj6.toString(), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning$User");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj6), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning$User");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj6), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning$User");
        org.junit.Assert.assertNotNull(obj9);
        org.junit.Assert.assertEquals(obj9.toString(), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning$User");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj9), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning$User");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj9), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning$User");
    }

    @Test
    public void test53176() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest106.test53176");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDescription timeSeriesDescription0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDescription();
        java.lang.String str1 = timeSeriesDescription0.Parameter;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDescription timeSeriesDescription3 = timeSeriesDescription0.setPublish((java.lang.Boolean) false);
        java.lang.String str4 = timeSeriesDescription3.ComputationIdentifier;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_5 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray8 = new java.lang.String[] { "", "" };
        java.util.ArrayList<java.lang.String> strList9 = new java.util.ArrayList<java.lang.String>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList9, strArray8);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_11 = getObservationsV2_5.setDataClassifications((java.util.List<java.lang.String>) strList9);
        getObservationsV2_11.DepthUnitCustomId = "hi!";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse14 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant15 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse16 = locationDescriptionListServiceResponse14.setNextToken(instant15);
        getObservationsV2_11.EndObservedTime = instant15;
        timeSeriesDescription3.CorrectedEndTime = instant15;
        java.lang.String str19 = timeSeriesDescription3.getLocationIdentifier();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDescription timeSeriesDescription20 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDescription();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest21 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest();
        java.lang.Object obj22 = timeAlignedDataServiceRequest21.getResponseType();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse23 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant24 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse25 = locationDescriptionListServiceResponse23.setNextToken(instant24);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest26 = timeAlignedDataServiceRequest21.setQueryFrom(instant24);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDescription timeSeriesDescription27 = timeSeriesDescription20.setRawStartTime(instant24);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDescription timeSeriesDescription29 = timeSeriesDescription27.setSubLocationIdentifier("");
        java.time.Instant instant30 = timeSeriesDescription27.LastModified;
        java.lang.Boolean boolean31 = timeSeriesDescription27.isPublish();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ExtendedAttribute[] extendedAttributeArray32 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ExtendedAttribute[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ExtendedAttribute> extendedAttributeList33 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ExtendedAttribute>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ExtendedAttribute>) extendedAttributeList33, extendedAttributeArray32);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDescription timeSeriesDescription35 = timeSeriesDescription27.setExtendedAttributes((java.util.List<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ExtendedAttribute>) extendedAttributeList33);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDescription timeSeriesDescription36 = timeSeriesDescription3.setExtendedAttributes((java.util.List<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ExtendedAttribute>) extendedAttributeList33);
        java.lang.String str37 = timeSeriesDescription36.getParameterId();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(timeSeriesDescription3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(getObservationsV2_11);
        org.junit.Assert.assertNotNull(instant15);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse16);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertNotNull(obj22);
        org.junit.Assert.assertEquals(obj22.toString(), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj22), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj22), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertNotNull(instant24);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse25);
        org.junit.Assert.assertNotNull(timeAlignedDataServiceRequest26);
        org.junit.Assert.assertNotNull(timeSeriesDescription27);
        org.junit.Assert.assertNotNull(timeSeriesDescription29);
        org.junit.Assert.assertNull(instant30);
        org.junit.Assert.assertNull(boolean31);
        org.junit.Assert.assertNotNull(extendedAttributeArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(timeSeriesDescription35);
        org.junit.Assert.assertNotNull(timeSeriesDescription36);
        org.junit.Assert.assertNull(str37);
    }

    @Test
    public void test53177() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest106.test53177");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetChartDataV2 getChartDataV2_0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetChartDataV2();
        java.lang.String str1 = getChartDataV2_0.getActivityCustomId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetChartDataV2 getChartDataV2_3 = getChartDataV2_0.setFilterId("");
        java.util.List<java.lang.String> strList4 = getChartDataV2_0.ResultGrades;
        java.util.List<java.lang.String> strList5 = getChartDataV2_0.CollectionMethodIds;
        getChartDataV2_0.MinNumericResultValue = 10.0d;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItem importItem8 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_9 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray11 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList12 = new java.util.ArrayList<java.lang.String>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList12, strArray11);
        getObservationsV2_9.SpecimenIds = strList12;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags15 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray19 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList20 = new java.util.ArrayList<java.lang.String>();
        boolean boolean21 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList20, strArray19);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags22 = putLocationTags15.setTagUniqueIds(strList20);
        getObservationsV2_9.QualityControlTypes = strList20;
        java.util.List<java.lang.String> strList24 = getObservationsV2_9.getLabReportIds();
        importItem8.Errors = getObservationsV2_9;
        java.lang.Object obj26 = importItem8.getExistingItem();
        importItem8.Input = "hi!";
        java.lang.Object obj29 = importItem8.getItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemStatusType importItemStatusType30 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemStatusType.SKIPPED;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItem importItem31 = importItem8.setStatus(importItemStatusType30);
        importItem31.Input = "/AQUARIUS/Provisioning/v1";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate34 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate();
        specimenTemplate34.CustomId = "hi!";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate38 = specimenTemplate34.setId("hi!");
        java.lang.Boolean boolean39 = specimenTemplate38.getFiltered();
        importItem31.Item = specimenTemplate38;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Processor processor41 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Processor();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostTag postTag42 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostTag();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_43 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray46 = new java.lang.String[] { "", "" };
        java.util.ArrayList<java.lang.String> strList47 = new java.util.ArrayList<java.lang.String>();
        boolean boolean48 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList47, strArray46);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_49 = getObservationsV2_43.setDataClassifications((java.util.List<java.lang.String>) strList47);
        postTag42.PickListValues = strList47;
        java.util.ArrayList<java.lang.String> strList51 = postTag42.PickListValues;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Processor processor52 = processor41.setInputTimeSeriesUniqueIds(strList51);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItem importItem53 = importItem31.setWarningMessages((java.util.List<java.lang.String>) strList51);
        java.util.List<java.lang.String> strList54 = importItem31.getWarningMessages();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetChartDataV2 getChartDataV2_55 = getChartDataV2_0.setSpecimenIds(strList54);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetChartDataV2 getChartDataV2_57 = getChartDataV2_55.setMinNumericResultValue((java.lang.Double) 100.0d);
        java.util.List<java.lang.String> strList58 = getChartDataV2_57.LabReportIds;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.FieldResultType fieldResultType59 = getChartDataV2_57.FieldResultType;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(getChartDataV2_3);
        org.junit.Assert.assertNull(strList4);
        org.junit.Assert.assertNull(strList5);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(putLocationTags22);
        org.junit.Assert.assertNull(strList24);
        org.junit.Assert.assertNull(obj26);
        org.junit.Assert.assertNull(obj29);
        org.junit.Assert.assertTrue("'" + importItemStatusType30 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemStatusType.SKIPPED + "'", importItemStatusType30.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemStatusType.SKIPPED));
        org.junit.Assert.assertNotNull(importItem31);
        org.junit.Assert.assertNotNull(specimenTemplate38);
        org.junit.Assert.assertNull(boolean39);
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(getObservationsV2_49);
        org.junit.Assert.assertNotNull(strList51);
        org.junit.Assert.assertNotNull(processor52);
        org.junit.Assert.assertNotNull(importItem53);
        org.junit.Assert.assertNotNull(strList54);
        org.junit.Assert.assertNotNull(getChartDataV2_55);
        org.junit.Assert.assertNotNull(getChartDataV2_57);
        org.junit.Assert.assertNull(strList58);
        org.junit.Assert.assertNull(fieldResultType59);
    }

    @Test
    public void test53178() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest106.test53178");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationMonitoringMethod locationMonitoringMethod0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationMonitoringMethod();
        java.lang.String str1 = locationMonitoringMethod0.getModel();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationMonitoringMethod locationMonitoringMethod3 = locationMonitoringMethod0.setParameterUniqueId("");
        java.lang.String str4 = locationMonitoringMethod3.getParameterId();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(locationMonitoringMethod3);
        org.junit.Assert.assertNull(str4);
    }

    @Test
    public void test53179() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest106.test53179");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetActivityTemplates getActivityTemplates0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetActivityTemplates();
        java.util.List<java.lang.String> strList1 = getActivityTemplates0.Type;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivityRecurrence samplingPlanPlannedActivityRecurrence2 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivityRecurrence();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.RecurrenceFrequencyType recurrenceFrequencyType3 = samplingPlanPlannedActivityRecurrence2.RecurrenceFrequency;
        java.util.List<java.lang.String> strList4 = samplingPlanPlannedActivityRecurrence2.getMonthsOfYear();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutQualifier putQualifier5 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutQualifier();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutQualifier putQualifier7 = putQualifier5.setUniqueId("");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest8 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_9 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray11 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList12 = new java.util.ArrayList<java.lang.String>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList12, strArray11);
        getObservationsV2_9.SpecimenIds = strList12;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags15 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray19 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList20 = new java.util.ArrayList<java.lang.String>();
        boolean boolean21 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList20, strArray19);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags22 = putLocationTags15.setTagUniqueIds(strList20);
        getObservationsV2_9.QualityControlTypes = strList20;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest24 = timeAlignedDataServiceRequest8.setTimeSeriesUniqueIds(strList20);
        putQualifier5.GroupIdentifiers = strList20;
        java.util.ArrayList<java.lang.String> strList26 = putQualifier5.GroupIdentifiers;
        samplingPlanPlannedActivityRecurrence2.MonthsOfYear = strList26;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetActivityTemplates getActivityTemplates28 = getActivityTemplates0.setType((java.util.List<java.lang.String>) strList26);
        java.util.List<java.lang.String> strList29 = getActivityTemplates28.Type;
        java.lang.Object obj30 = getActivityTemplates28.getResponseType();
        org.junit.Assert.assertNull(strList1);
        org.junit.Assert.assertNull(recurrenceFrequencyType3);
        org.junit.Assert.assertNull(strList4);
        org.junit.Assert.assertNotNull(putQualifier7);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(putLocationTags22);
        org.junit.Assert.assertNotNull(timeAlignedDataServiceRequest24);
        org.junit.Assert.assertNotNull(strList26);
        org.junit.Assert.assertNotNull(getActivityTemplates28);
        org.junit.Assert.assertNotNull(strList29);
        org.junit.Assert.assertNotNull(obj30);
        org.junit.Assert.assertEquals(obj30.toString(), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$SearchResultActivityTemplate");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj30), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$SearchResultActivityTemplate");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj30), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$SearchResultActivityTemplate");
    }

    @Test
    public void test53180() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest106.test53180");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostDatumConvertedTimeSeries postDatumConvertedTimeSeries0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostDatumConvertedTimeSeries();
        postDatumConvertedTimeSeries0.SourceIsLocalAssumedDatum = false;
        java.lang.String str3 = postDatumConvertedTimeSeries0.getComputationIdentifier();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostCalculatedDerivedTimeSeries postCalculatedDerivedTimeSeries4 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostCalculatedDerivedTimeSeries();
        java.util.ArrayList<java.lang.String> strList5 = postCalculatedDerivedTimeSeries4.TimeSeriesUniqueIds;
        java.lang.String str6 = postCalculatedDerivedTimeSeries4.Label;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostLocation postLocation7 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostLocation();
        postLocation7.Description = "hi!";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeValue[] extendedAttributeValueArray10 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeValue[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeValue> extendedAttributeValueList11 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeValue>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeValue>) extendedAttributeValueList11, extendedAttributeValueArray10);
        postLocation7.ExtendedAttributeValues = extendedAttributeValueList11;
        postCalculatedDerivedTimeSeries4.ExtendedAttributeValues = extendedAttributeValueList11;
        java.lang.String str15 = postCalculatedDerivedTimeSeries4.ComputationPeriodIdentifier;
        java.util.List<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeValue> extendedAttributeValueList16 = postCalculatedDerivedTimeSeries4.getExtendedAttributeValues();
        postDatumConvertedTimeSeries0.ExtendedAttributeValues = extendedAttributeValueList16;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostDatumConvertedTimeSeries postDatumConvertedTimeSeries19 = postDatumConvertedTimeSeries0.setPublish((java.lang.Boolean) false);
        java.lang.Boolean boolean20 = postDatumConvertedTimeSeries0.Publish;
        java.lang.Boolean boolean21 = postDatumConvertedTimeSeries0.TargetIsLocalAssumedDatum;
        java.lang.String str22 = postDatumConvertedTimeSeries0.getComment();
        java.lang.String str23 = postDatumConvertedTimeSeries0.TargetStandardReferenceDatumIdentifier;
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(strList5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNotNull(extendedAttributeValueArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNotNull(extendedAttributeValueList16);
        org.junit.Assert.assertNotNull(postDatumConvertedTimeSeries19);
        org.junit.Assert.assertEquals("'" + boolean20 + "' != '" + false + "'", boolean20, false);
        org.junit.Assert.assertNull(boolean21);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertNull(str23);
    }

    @Test
    public void test53181() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest106.test53181");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescription locationDescription0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescription();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescription locationDescription2 = locationDescription0.setIdentifier("");
        locationDescription2.UtcOffset = 1.0d;
        java.lang.Boolean boolean5 = locationDescription2.getIsExternalLocation();
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TagMetadata> tagMetadataList6 = null;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescription locationDescription7 = locationDescription2.setTags(tagMetadataList6);
        java.lang.String str8 = locationDescription7.PrimaryFolder;
        java.util.ArrayList<java.lang.String> strList9 = locationDescription7.SecondaryFolders;
        org.junit.Assert.assertNotNull(locationDescription2);
        org.junit.Assert.assertNull(boolean5);
        org.junit.Assert.assertNotNull(locationDescription7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNull(strList9);
    }

    @Test
    public void test53182() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest106.test53182");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDataCorrectedServiceRequest timeSeriesDataCorrectedServiceRequest0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDataCorrectedServiceRequest();
        timeSeriesDataCorrectedServiceRequest0.GetParts = "http";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDataCorrectedServiceRequest timeSeriesDataCorrectedServiceRequest4 = timeSeriesDataCorrectedServiceRequest0.setUtcOffset((java.lang.Double) 100.0d);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDataCorrectedServiceRequest timeSeriesDataCorrectedServiceRequest6 = timeSeriesDataCorrectedServiceRequest4.setReturnFullCoverage((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDataCorrectedServiceRequest timeSeriesDataCorrectedServiceRequest8 = timeSeriesDataCorrectedServiceRequest6.setIncludeGapMarkers((java.lang.Boolean) true);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDataCorrectedServiceRequest timeSeriesDataCorrectedServiceRequest10 = timeSeriesDataCorrectedServiceRequest6.setIncludeGapMarkers((java.lang.Boolean) false);
        java.lang.String str11 = timeSeriesDataCorrectedServiceRequest6.getGetParts();
        org.junit.Assert.assertNotNull(timeSeriesDataCorrectedServiceRequest4);
        org.junit.Assert.assertNotNull(timeSeriesDataCorrectedServiceRequest6);
        org.junit.Assert.assertNotNull(timeSeriesDataCorrectedServiceRequest8);
        org.junit.Assert.assertNotNull(timeSeriesDataCorrectedServiceRequest10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "http" + "'", str11, "http");
    }

    @Test
    public void test53183() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest106.test53183");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostAccessGroup postAccessGroup0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostAccessGroup();
        java.lang.String str1 = postAccessGroup0.Name;
        postAccessGroup0.Id = "";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostSamplingLocation postSamplingLocation4 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostSamplingLocation();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostSamplingLocation postSamplingLocation6 = postSamplingLocation4.setCustomId("hi!");
        java.lang.String str7 = postSamplingLocation6.getName();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostSamplingLocation postSamplingLocation8 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostSamplingLocation();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostSamplingLocation postSamplingLocation10 = postSamplingLocation8.setCustomId("hi!");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Address address11 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostSamplingLocation postSamplingLocation12 = postSamplingLocation8.setAddress(address11);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity quantity13 = postSamplingLocation12.getElevation();
        postSamplingLocation12.Longitude = "POST";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes16 = postSamplingLocation12.getAuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostAccessGroup postAccessGroup17 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostAccessGroup();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationGroup[] samplingLocationGroupArray18 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationGroup[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationGroup> samplingLocationGroupList19 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationGroup>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationGroup>) samplingLocationGroupList19, samplingLocationGroupArray18);
        postAccessGroup17.SamplingLocationGroups = samplingLocationGroupList19;
        postSamplingLocation12.SamplingLocationGroups = samplingLocationGroupList19;
        postSamplingLocation6.SamplingLocationGroups = samplingLocationGroupList19;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostAccessGroup postAccessGroup24 = postAccessGroup0.setSamplingLocationGroups((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationGroup>) samplingLocationGroupList19);
        java.lang.Object obj25 = postAccessGroup0.getResponseType();
        java.lang.String str26 = postAccessGroup0.getDescription();
        java.lang.String str27 = postAccessGroup0.getDescription();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(postSamplingLocation6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(postSamplingLocation10);
        org.junit.Assert.assertNotNull(postSamplingLocation12);
        org.junit.Assert.assertNull(quantity13);
        org.junit.Assert.assertNull(auditAttributes16);
        org.junit.Assert.assertNotNull(samplingLocationGroupArray18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(postAccessGroup24);
        org.junit.Assert.assertNotNull(obj25);
        org.junit.Assert.assertEquals(obj25.toString(), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$AccessGroup");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj25), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$AccessGroup");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj25), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$AccessGroup");
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertNull(str27);
    }

    @Test
    public void test53184() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest106.test53184");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedPoint timeAlignedPoint0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedPoint();
        timeAlignedPoint0.Method9 = "multipart/form-data; boundary=****7eff1774-b6b0-471a-961c-156c64359366****";
        timeAlignedPoint0.DisplayValue9 = "";
        java.lang.String str5 = timeAlignedPoint0.getApprovalName4();
        timeAlignedPoint0.ApprovalLevel2 = 0L;
        timeAlignedPoint0.GradeCode1 = 1L;
        java.lang.String str10 = timeAlignedPoint0.ApprovalName10;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedPoint timeAlignedPoint12 = timeAlignedPoint0.setGradeCode6((java.lang.Long) 1L);
        java.lang.String str13 = timeAlignedPoint0.getDisplayValue4();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedPoint timeAlignedPoint15 = timeAlignedPoint0.setDisplayValue2("multipart/form-data; boundary=****6b8051d4-caf2-4095-9f11-faa36b95fc28****");
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNotNull(timeAlignedPoint12);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNotNull(timeAlignedPoint15);
    }

    @Test
    public void test53185() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest106.test53185");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenWithObservations specimenWithObservations0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenWithObservations();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenWithObservations specimenWithObservations2 = specimenWithObservations0.setNumberOfReceivedObservations((java.lang.Integer) 1);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PreservativeType preservativeType3 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PreservativeType.NITRIC_ACID;
        specimenWithObservations0.Preservative = preservativeType3;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate5 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate();
        java.lang.String str6 = specimenTemplate5.CustomId;
        specimenWithObservations0.TemplateCreatedFrom = specimenTemplate5;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate9 = specimenTemplate5.setName("POST");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate11 = specimenTemplate5.setCustomId("MaxDuration");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate13 = specimenTemplate11.setName("-PT87591240H");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PreservativeType preservativeType14 = specimenTemplate13.getPreservative();
        org.junit.Assert.assertNotNull(specimenWithObservations2);
        org.junit.Assert.assertTrue("'" + preservativeType3 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PreservativeType.NITRIC_ACID + "'", preservativeType3.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PreservativeType.NITRIC_ACID));
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNotNull(specimenTemplate9);
        org.junit.Assert.assertNotNull(specimenTemplate11);
        org.junit.Assert.assertNotNull(specimenTemplate13);
        org.junit.Assert.assertNull(preservativeType14);
    }

    @Test
    public void test53186() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest106.test53186");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostShippingContainer postShippingContainer0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostShippingContainer();
        java.lang.String str1 = postShippingContainer0.getCustomId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostShippingContainer postShippingContainer3 = postShippingContainer0.setCustomId("MinDuration");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostShippingContainer postShippingContainer5 = postShippingContainer0.setComment("9999-12-31T23:59:59.999Z");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag samplingContextTag6 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag();
        java.lang.String str7 = samplingContextTag6.getDescription();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes8 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag samplingContextTag9 = samplingContextTag6.setAuditAttributes(auditAttributes8);
        java.lang.String str10 = samplingContextTag6.getName();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethodSimple analysisMethodSimple11 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethodSimple();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutDetectioncondition putDetectioncondition12 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutDetectioncondition();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes13 = putDetectioncondition12.getAuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutDetectioncondition putDetectioncondition15 = putDetectioncondition12.setCustomId("http");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivity samplingPlanPlannedActivity16 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivity();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes17 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivity samplingPlanPlannedActivity18 = samplingPlanPlannedActivity16.setAuditAttributes(auditAttributes17);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes19 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes21 = auditAttributes19.setCreationUserProfileId("'.'SSSSSSS");
        samplingPlanPlannedActivity18.AuditAttributes = auditAttributes19;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes23 = samplingPlanPlannedActivity18.AuditAttributes;
        putDetectioncondition12.AuditAttributes = auditAttributes23;
        analysisMethodSimple11.AuditAttributes = auditAttributes23;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag samplingContextTag26 = samplingContextTag6.setAuditAttributes(auditAttributes23);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostShippingContainer postShippingContainer27 = postShippingContainer0.setAuditAttributes(auditAttributes23);
        postShippingContainer0.Id = "MinDuration";
        postShippingContainer0.TrackingId = "/AQUARIUS/Acquisition/v2";
        postShippingContainer0.CustomId = "0001-01-01T00:00:00.0000000Z";
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(postShippingContainer3);
        org.junit.Assert.assertNotNull(postShippingContainer5);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(samplingContextTag9);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNull(auditAttributes13);
        org.junit.Assert.assertNotNull(putDetectioncondition15);
        org.junit.Assert.assertNotNull(samplingPlanPlannedActivity18);
        org.junit.Assert.assertNotNull(auditAttributes21);
        org.junit.Assert.assertNotNull(auditAttributes23);
        org.junit.Assert.assertNotNull(samplingContextTag26);
        org.junit.Assert.assertNotNull(postShippingContainer27);
    }

    @Test
    public void test53187() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest106.test53187");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutFilter putFilter0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutFilter();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutFilter putFilter2 = putFilter0.setId("MaxDuration");
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty> observedPropertyList3 = putFilter0.getObservedProperties();
        java.time.OffsetDateTime offsetDateTime4 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutFilter putFilter5 = putFilter0.setStartTime(offsetDateTime4);
        org.junit.Assert.assertNotNull(putFilter2);
        org.junit.Assert.assertNull(observedPropertyList3);
        org.junit.Assert.assertNotNull(putFilter5);
    }

    @Test
    public void test53188() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest106.test53188");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.util.List<java.lang.String> strList1 = getObservationsV2_0.SamplingContextTagIds;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_2 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray4 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList5 = new java.util.ArrayList<java.lang.String>();
        boolean boolean6 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList5, strArray4);
        getObservationsV2_2.SpecimenIds = strList5;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags8 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray12 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList13 = new java.util.ArrayList<java.lang.String>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList13, strArray12);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags15 = putLocationTags8.setTagUniqueIds(strList13);
        getObservationsV2_2.QualityControlTypes = strList13;
        getObservationsV2_0.ResultGrades = strList13;
        java.lang.Double double18 = getObservationsV2_0.getMinNumericResultValue();
        getObservationsV2_0.DetectionCondition = "https";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ReportListServiceRequest reportListServiceRequest21 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ReportListServiceRequest();
        reportListServiceRequest21.ReportTitle = "MinDuration";
        java.lang.String str24 = reportListServiceRequest21.getLocationUniqueId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_25 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray27 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList28 = new java.util.ArrayList<java.lang.String>();
        boolean boolean29 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList28, strArray27);
        getObservationsV2_25.SpecimenIds = strList28;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags31 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray35 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList36 = new java.util.ArrayList<java.lang.String>();
        boolean boolean37 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList36, strArray35);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags38 = putLocationTags31.setTagUniqueIds(strList36);
        getObservationsV2_25.QualityControlTypes = strList36;
        java.util.List<java.lang.String> strList40 = getObservationsV2_25.getAnalyticalGroupIds();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_42 = getObservationsV2_25.setSpecimenName("/AQUARIUS/Acquisition/v2://9999-12-31T23:59:59.999Z");
        java.util.List<java.lang.String> strList43 = getObservationsV2_42.getMedia();
        java.time.Instant instant44 = getObservationsV2_42.getStartModificationTime();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_45 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray47 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList48 = new java.util.ArrayList<java.lang.String>();
        boolean boolean49 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList48, strArray47);
        getObservationsV2_45.SpecimenIds = strList48;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_51 = getObservationsV2_42.setProjectIds((java.util.List<java.lang.String>) strList48);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ReportListServiceRequest reportListServiceRequest52 = reportListServiceRequest21.setTagKeys(strList48);
        reportListServiceRequest21.LocationUniqueId = "9999-12-31T23:59:59.999Z";
        java.util.ArrayList<java.lang.String> strList55 = reportListServiceRequest21.getTimeSeriesUniqueIds();
        java.util.ArrayList<java.lang.String> strList56 = reportListServiceRequest21.TagKeys;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_57 = getObservationsV2_0.setAnalysisMethodSimpleIds((java.util.List<java.lang.String>) strList56);
        java.util.List<java.lang.String> strList58 = getObservationsV2_57.getAnalysisMethodSimpleIds();
        java.util.List<java.lang.String> strList59 = getObservationsV2_57.Ids;
        org.junit.Assert.assertNull(strList1);
        org.junit.Assert.assertNotNull(strArray4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(putLocationTags15);
        org.junit.Assert.assertNull(double18);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(putLocationTags38);
        org.junit.Assert.assertNull(strList40);
        org.junit.Assert.assertNotNull(getObservationsV2_42);
        org.junit.Assert.assertNull(strList43);
        org.junit.Assert.assertNull(instant44);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(getObservationsV2_51);
        org.junit.Assert.assertNotNull(reportListServiceRequest52);
        org.junit.Assert.assertNull(strList55);
        org.junit.Assert.assertNotNull(strList56);
        org.junit.Assert.assertNotNull(getObservationsV2_57);
        org.junit.Assert.assertNotNull(strList58);
        org.junit.Assert.assertNull(strList59);
    }

    @Test
    public void test53189() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest106.test53189");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationExportIIV2 getObservationExportIIV2_0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationExportIIV2();
        java.util.List<java.lang.String> strList1 = getObservationExportIIV2_0.getCollectionMethodIds();
        java.lang.Integer int2 = getObservationExportIIV2_0.getLimit();
        java.util.List<java.lang.String> strList3 = getObservationExportIIV2_0.Ids;
        getObservationExportIIV2_0.DepthUnitCustomId = "";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationExportIIV2 getObservationExportIIV2_7 = getObservationExportIIV2_0.setDetectionCondition("multipart/form-data; boundary=****46b5d5e5-73d1-43c8-8704-4a7bbf2d8314****");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetActivityTemplates getActivityTemplates8 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetActivityTemplates();
        java.util.List<java.lang.String> strList9 = getActivityTemplates8.Type;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivityRecurrence samplingPlanPlannedActivityRecurrence10 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivityRecurrence();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.RecurrenceFrequencyType recurrenceFrequencyType11 = samplingPlanPlannedActivityRecurrence10.RecurrenceFrequency;
        java.util.List<java.lang.String> strList12 = samplingPlanPlannedActivityRecurrence10.getMonthsOfYear();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutQualifier putQualifier13 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutQualifier();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutQualifier putQualifier15 = putQualifier13.setUniqueId("");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest16 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_17 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray19 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList20 = new java.util.ArrayList<java.lang.String>();
        boolean boolean21 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList20, strArray19);
        getObservationsV2_17.SpecimenIds = strList20;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags23 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray27 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList28 = new java.util.ArrayList<java.lang.String>();
        boolean boolean29 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList28, strArray27);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags30 = putLocationTags23.setTagUniqueIds(strList28);
        getObservationsV2_17.QualityControlTypes = strList28;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest32 = timeAlignedDataServiceRequest16.setTimeSeriesUniqueIds(strList28);
        putQualifier13.GroupIdentifiers = strList28;
        java.util.ArrayList<java.lang.String> strList34 = putQualifier13.GroupIdentifiers;
        samplingPlanPlannedActivityRecurrence10.MonthsOfYear = strList34;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetActivityTemplates getActivityTemplates36 = getActivityTemplates8.setType((java.util.List<java.lang.String>) strList34);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_37 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray40 = new java.lang.String[] { "", "" };
        java.util.ArrayList<java.lang.String> strList41 = new java.util.ArrayList<java.lang.String>();
        boolean boolean42 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList41, strArray40);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_43 = getObservationsV2_37.setDataClassifications((java.util.List<java.lang.String>) strList41);
        getObservationsV2_43.DepthUnitCustomId = "hi!";
        java.lang.String str46 = getObservationsV2_43.CustomId;
        java.util.List<java.lang.String> strList47 = getObservationsV2_43.getSearch();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_48 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray50 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList51 = new java.util.ArrayList<java.lang.String>();
        boolean boolean52 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList51, strArray50);
        getObservationsV2_48.SpecimenIds = strList51;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags54 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray58 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList59 = new java.util.ArrayList<java.lang.String>();
        boolean boolean60 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList59, strArray58);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags61 = putLocationTags54.setTagUniqueIds(strList59);
        getObservationsV2_48.QualityControlTypes = strList59;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_63 = getObservationsV2_43.setMedia((java.util.List<java.lang.String>) strList59);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_64 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String str65 = getObservationsV2_64.getCustomId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_66 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray68 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList69 = new java.util.ArrayList<java.lang.String>();
        boolean boolean70 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList69, strArray68);
        getObservationsV2_66.SpecimenIds = strList69;
        getObservationsV2_64.ProjectIds = strList69;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_73 = getObservationsV2_43.setObservedPropertyIds((java.util.List<java.lang.String>) strList69);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetActivityTemplates getActivityTemplates74 = getActivityTemplates36.setType((java.util.List<java.lang.String>) strList69);
        java.util.List<java.lang.String> strList75 = getActivityTemplates36.getType();
        java.util.List<java.lang.String> strList76 = getActivityTemplates36.getType();
        java.util.List<java.lang.String> strList77 = getActivityTemplates36.Type;
        getObservationExportIIV2_7.ProjectIds = strList77;
        java.util.List<java.lang.String> strList79 = getObservationExportIIV2_7.TaxonIds;
        org.junit.Assert.assertNull(strList1);
        org.junit.Assert.assertNull(int2);
        org.junit.Assert.assertNull(strList3);
        org.junit.Assert.assertNotNull(getObservationExportIIV2_7);
        org.junit.Assert.assertNull(strList9);
        org.junit.Assert.assertNull(recurrenceFrequencyType11);
        org.junit.Assert.assertNull(strList12);
        org.junit.Assert.assertNotNull(putQualifier15);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(putLocationTags30);
        org.junit.Assert.assertNotNull(timeAlignedDataServiceRequest32);
        org.junit.Assert.assertNotNull(strList34);
        org.junit.Assert.assertNotNull(getActivityTemplates36);
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(getObservationsV2_43);
        org.junit.Assert.assertNull(str46);
        org.junit.Assert.assertNull(strList47);
        org.junit.Assert.assertNotNull(strArray50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(strArray58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(putLocationTags61);
        org.junit.Assert.assertNotNull(getObservationsV2_63);
        org.junit.Assert.assertNull(str65);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertNotNull(getObservationsV2_73);
        org.junit.Assert.assertNotNull(getActivityTemplates74);
        org.junit.Assert.assertNotNull(strList75);
        org.junit.Assert.assertNotNull(strList76);
        org.junit.Assert.assertNotNull(strList77);
        org.junit.Assert.assertNull(strList79);
    }

    @Test
    public void test53190() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest106.test53190");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VelocityDepthObservation velocityDepthObservation0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VelocityDepthObservation();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VolumetricDischargeReading volumetricDischargeReading1 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VolumetricDischargeReading();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay2 = volumetricDischargeReading1.StartingVolume;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.AdcpDischargeActivity adcpDischargeActivity3 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.AdcpDischargeActivity();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay4 = null;
        adcpDischargeActivity3.TransducerDepth = quantityWithDisplay4;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary6 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        dischargeSummary6.Reviewer = "";
        java.time.Instant instant9 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        dischargeSummary6.MeasurementTime = instant9;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.BaseFlowType baseFlowType11 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.BaseFlowType.BaseFlow;
        dischargeSummary6.BaseFlow = baseFlowType11;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeUncertainty dischargeUncertainty13 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeUncertainty();
        dischargeSummary6.DischargeUncertainty = dischargeUncertainty13;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary15 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay16 = dischargeSummary15.getMeanGageHeight();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay17 = dischargeSummary15.Discharge;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay18 = dischargeSummary15.DurationInHours;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay19 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay21 = doubleWithDisplay19.setNumeric((java.lang.Double) 10.0d);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary22 = dischargeSummary15.setDurationInHours(doubleWithDisplay19);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeUncertainty dischargeUncertainty23 = dischargeUncertainty13.setQuantitativeUncertainty(doubleWithDisplay19);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.AdcpDischargeActivity adcpDischargeActivity24 = adcpDischargeActivity3.setTopEstimateExponent(doubleWithDisplay19);
        java.lang.String str25 = adcpDischargeActivity3.FirmwareVersion;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CrossSectionSurveyActivity crossSectionSurveyActivity26 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CrossSectionSurveyActivity();
        java.time.Instant instant27 = crossSectionSurveyActivity26.StartTime;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity pointVelocityDischargeActivity28 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity();
        java.lang.String str29 = pointVelocityDischargeActivity28.SoftwareVersion;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity pointVelocityDischargeActivity31 = pointVelocityDischargeActivity28.setIsValid((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity pointVelocityDischargeActivity33 = pointVelocityDischargeActivity28.setSoftwareVersion("");
        java.lang.String str34 = pointVelocityDischargeActivity33.getManufacturer();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.StartPointType startPointType35 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.StartPointType.Unspecified;
        pointVelocityDischargeActivity33.StartPoint = startPointType35;
        crossSectionSurveyActivity26.StartingPoint = startPointType35;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CrossSectionSurveyActivity crossSectionSurveyActivity38 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CrossSectionSurveyActivity();
        java.time.Instant instant39 = crossSectionSurveyActivity38.StartTime;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity pointVelocityDischargeActivity40 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity();
        java.lang.String str41 = pointVelocityDischargeActivity40.SoftwareVersion;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity pointVelocityDischargeActivity43 = pointVelocityDischargeActivity40.setIsValid((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity pointVelocityDischargeActivity45 = pointVelocityDischargeActivity40.setSoftwareVersion("");
        java.lang.String str46 = pointVelocityDischargeActivity45.getManufacturer();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.StartPointType startPointType47 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.StartPointType.Unspecified;
        pointVelocityDischargeActivity45.StartPoint = startPointType47;
        crossSectionSurveyActivity38.StartingPoint = startPointType47;
        crossSectionSurveyActivity26.StartingPoint = startPointType47;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DatumConvertedQuantityWithDisplay datumConvertedQuantityWithDisplay51 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DatumConvertedQuantityWithDisplay();
        crossSectionSurveyActivity26.Stage = datumConvertedQuantityWithDisplay51;
        adcpDischargeActivity3.DischargeCoefficientVariation = datumConvertedQuantityWithDisplay51;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VolumetricDischargeReading volumetricDischargeReading54 = volumetricDischargeReading1.setDurationInSeconds((com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay) datumConvertedQuantityWithDisplay51);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VelocityDepthObservation velocityDepthObservation55 = velocityDepthObservation0.setDepth((com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay) datumConvertedQuantityWithDisplay51);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay56 = velocityDepthObservation0.getObservationIntervalInSeconds();
        org.junit.Assert.assertNull(doubleWithDisplay2);
        org.junit.Assert.assertNotNull(instant9);
        org.junit.Assert.assertTrue("'" + baseFlowType11 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.BaseFlowType.BaseFlow + "'", baseFlowType11.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.BaseFlowType.BaseFlow));
        org.junit.Assert.assertNull(quantityWithDisplay16);
        org.junit.Assert.assertNull(quantityWithDisplay17);
        org.junit.Assert.assertNull(doubleWithDisplay18);
        org.junit.Assert.assertNotNull(doubleWithDisplay21);
        org.junit.Assert.assertNotNull(dischargeSummary22);
        org.junit.Assert.assertNotNull(dischargeUncertainty23);
        org.junit.Assert.assertNotNull(adcpDischargeActivity24);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertNull(instant27);
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertNotNull(pointVelocityDischargeActivity31);
        org.junit.Assert.assertNotNull(pointVelocityDischargeActivity33);
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertTrue("'" + startPointType35 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.StartPointType.Unspecified + "'", startPointType35.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.StartPointType.Unspecified));
        org.junit.Assert.assertNull(instant39);
        org.junit.Assert.assertNull(str41);
        org.junit.Assert.assertNotNull(pointVelocityDischargeActivity43);
        org.junit.Assert.assertNotNull(pointVelocityDischargeActivity45);
        org.junit.Assert.assertNull(str46);
        org.junit.Assert.assertTrue("'" + startPointType47 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.StartPointType.Unspecified + "'", startPointType47.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.StartPointType.Unspecified));
        org.junit.Assert.assertNotNull(volumetricDischargeReading54);
        org.junit.Assert.assertNotNull(velocityDepthObservation55);
        org.junit.Assert.assertNull(doubleWithDisplay56);
    }

    @Test
    public void test53191() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest106.test53191");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        dischargeSummary0.Reviewer = "";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary4 = dischargeSummary0.setReviewer("/AQUARIUS/Provisioning/v1");
        dischargeSummary0.Comments = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ReferencePointBase referencePointBase7 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ReferencePointBase();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ReferencePointBase referencePointBase9 = referencePointBase7.setLongitude((java.lang.Double) 10.0d);
        java.lang.String str10 = referencePointBase9.DecommissionedReason;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingCurveListServiceRequest ratingCurveListServiceRequest11 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingCurveListServiceRequest();
        java.time.Instant instant12 = ratingCurveListServiceRequest11.QueryTo;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDescription timeSeriesDescription13 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDescription();
        java.lang.String str14 = timeSeriesDescription13.Parameter;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDescription timeSeriesDescription16 = timeSeriesDescription13.setPublish((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.LocationDatumPeriod locationDatumPeriod17 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.LocationDatumPeriod();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.LocationDatumPeriodBase locationDatumPeriodBase19 = locationDatumPeriod17.setComment("'.'SSSSSSS");
        java.lang.Double double20 = locationDatumPeriodBase19.Elevation;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Qualifier qualifier21 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Qualifier();
        java.time.Instant instant22 = qualifier21.DateApplied;
        java.lang.String str23 = qualifier21.User;
        java.lang.String str24 = qualifier21.getIdentifier();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest25 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest();
        java.lang.Object obj26 = timeAlignedDataServiceRequest25.getResponseType();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse27 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant28 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse29 = locationDescriptionListServiceResponse27.setNextToken(instant28);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest30 = timeAlignedDataServiceRequest25.setQueryFrom(instant28);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Qualifier qualifier31 = qualifier21.setDateApplied(instant28);
        java.time.Instant instant32 = qualifier31.getDateApplied();
        locationDatumPeriodBase19.ValidFrom = instant32;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDescription timeSeriesDescription34 = timeSeriesDescription16.setLastModified(instant32);
        ratingCurveListServiceRequest11.QueryTo = instant32;
        referencePointBase9.DecommissionedDate = instant32;
        dischargeSummary0.MeasurementEndTime = instant32;
        org.junit.Assert.assertNotNull(dischargeSummary4);
        org.junit.Assert.assertNotNull(referencePointBase9);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNull(instant12);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(timeSeriesDescription16);
        org.junit.Assert.assertNotNull(locationDatumPeriodBase19);
        org.junit.Assert.assertNull(double20);
        org.junit.Assert.assertNull(instant22);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNotNull(obj26);
        org.junit.Assert.assertEquals(obj26.toString(), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj26), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj26), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertNotNull(instant28);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse29);
        org.junit.Assert.assertNotNull(timeAlignedDataServiceRequest30);
        org.junit.Assert.assertNotNull(qualifier31);
        org.junit.Assert.assertNotNull(instant32);
        org.junit.Assert.assertNotNull(timeSeriesDescription34);
    }

    @Test
    public void test53192() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest106.test53192");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostProject postProject0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostProject();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes1 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostProject postProject2 = postProject0.setAuditAttributes(auditAttributes1);
        java.time.OffsetDateTime offsetDateTime3 = null;
        postProject0.StartTime = offsetDateTime3;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity postActivity5 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity();
        postActivity5.LoggerFileName = "hi!";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity postActivity9 = postActivity5.setCustomId("");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes10 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity postActivity11 = postActivity9.setAuditAttributes(auditAttributes10);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostProject postProject12 = postProject0.setAuditAttributes(auditAttributes10);
        postProject12.Description = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ";
        java.time.OffsetDateTime offsetDateTime15 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostProject postProject16 = postProject12.setEndTime(offsetDateTime15);
        java.time.OffsetDateTime offsetDateTime17 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostProject postProject18 = postProject16.setStartTime(offsetDateTime17);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservedProperty postObservedProperty19 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservedProperty();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLabAnalysisMethod postLabAnalysisMethod20 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLabAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation21 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation();
        observation21.CustomId = "hi!";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.CategoricalResult categoricalResult24 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation25 = observation21.setCategoricalResult(categoricalResult24);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple[] importHistoryEventSimpleArray26 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple> importHistoryEventSimpleList27 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple>();
        boolean boolean28 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple>) importHistoryEventSimpleList27, importHistoryEventSimpleArray26);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation29 = observation21.setImportHistoryEventSimples((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple>) importHistoryEventSimpleList27);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLabAnalysisMethod postLabAnalysisMethod30 = postLabAnalysisMethod20.setImportHistoryEventSimples((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple>) importHistoryEventSimpleList27);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservedProperty postObservedProperty31 = postObservedProperty19.setImportHistoryEventSimples((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple>) importHistoryEventSimpleList27);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservedProperty postObservedProperty33 = postObservedProperty19.setId("/AQUARIUS/Acquisition/v2://9999-12-31T23:59:59.999Z");
        postObservedProperty33.Name = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSSSSSZZZZZ";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostUnitGroup postUnitGroup36 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostUnitGroup();
        java.lang.String str37 = postUnitGroup36.CustomId;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes38 = postUnitGroup36.AuditAttributes;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes39 = postUnitGroup36.getAuditAttributes();
        java.lang.String str40 = postUnitGroup36.getCustomId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutUnit putUnit41 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutUnit();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutUnit putUnit43 = putUnit41.setName("MinInstant");
        java.lang.Double double44 = putUnit41.getBaseMultiplier();
        putUnit41.Name = "http";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation47 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocation samplingLocation48 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation49 = observation47.setSamplingLocation(samplingLocation48);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails50 = observation49.LabResultDetails;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.TaxonomicResult taxonomicResult51 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.TaxonomicResult();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Taxon taxon52 = taxonomicResult51.Taxon;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes53 = taxonomicResult51.AuditAttributes;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutTag putTag54 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutTag();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlan samplingPlan55 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlan();
        samplingPlan55.SamplingLocationGroupSelectionTypeRandomCount = 0;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationGroupSelectionType samplingLocationGroupSelectionType58 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationGroupSelectionType.ALL;
        samplingPlan55.SamplingLocationGroupSelectionType = samplingLocationGroupSelectionType58;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationGroup samplingLocationGroup60 = samplingPlan55.getSamplingLocationGroup();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes61 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlan samplingPlan62 = samplingPlan55.setAuditAttributes(auditAttributes61);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutTag putTag63 = putTag54.setAuditAttributes(auditAttributes61);
        taxonomicResult51.AuditAttributes = auditAttributes61;
        observation49.TaxonomicResult = taxonomicResult51;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes66 = taxonomicResult51.AuditAttributes;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutUnit putUnit67 = putUnit41.setAuditAttributes(auditAttributes66);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostUnitGroup postUnitGroup68 = postUnitGroup36.setAuditAttributes(auditAttributes66);
        postObservedProperty33.AuditAttributes = auditAttributes66;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostProject postProject70 = postProject16.setAuditAttributes(auditAttributes66);
        org.junit.Assert.assertNotNull(postProject2);
        org.junit.Assert.assertNotNull(postActivity9);
        org.junit.Assert.assertNotNull(postActivity11);
        org.junit.Assert.assertNotNull(postProject12);
        org.junit.Assert.assertNotNull(postProject16);
        org.junit.Assert.assertNotNull(postProject18);
        org.junit.Assert.assertNotNull(observation25);
        org.junit.Assert.assertNotNull(importHistoryEventSimpleArray26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(observation29);
        org.junit.Assert.assertNotNull(postLabAnalysisMethod30);
        org.junit.Assert.assertNotNull(postObservedProperty31);
        org.junit.Assert.assertNotNull(postObservedProperty33);
        org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertNull(auditAttributes38);
        org.junit.Assert.assertNull(auditAttributes39);
        org.junit.Assert.assertNull(str40);
        org.junit.Assert.assertNotNull(putUnit43);
        org.junit.Assert.assertNull(double44);
        org.junit.Assert.assertNotNull(observation49);
        org.junit.Assert.assertNull(labResultDetails50);
        org.junit.Assert.assertNull(taxon52);
        org.junit.Assert.assertNull(auditAttributes53);
        org.junit.Assert.assertTrue("'" + samplingLocationGroupSelectionType58 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationGroupSelectionType.ALL + "'", samplingLocationGroupSelectionType58.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationGroupSelectionType.ALL));
        org.junit.Assert.assertNull(samplingLocationGroup60);
        org.junit.Assert.assertNotNull(samplingPlan62);
        org.junit.Assert.assertNotNull(putTag63);
        org.junit.Assert.assertNotNull(auditAttributes66);
        org.junit.Assert.assertNotNull(putUnit67);
        org.junit.Assert.assertNotNull(postUnitGroup68);
        org.junit.Assert.assertNotNull(postProject70);
    }

    @Test
    public void test53193() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest106.test53193");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostTaxon postTaxon0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostTaxon();
        postTaxon0.ItisUrl = "MinInstant";
        postTaxon0.ItisTsn = "MaxDuration";
        postTaxon0.Comment = "MaxInstant";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.TaxonomyLevel taxonomyLevel7 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.TaxonomyLevel();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostTaxon postTaxon8 = postTaxon0.setTaxonomyLevel(taxonomyLevel7);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes9 = postTaxon8.getAuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostTaxon postTaxon11 = postTaxon8.setItisTsn("");
        java.lang.String str12 = postTaxon11.getComment();
        java.lang.String str13 = postTaxon11.getItisUrl();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostTaxon postTaxon15 = postTaxon11.setCommonName("9999-12-31T23:59:59.9999999Z");
        postTaxon11.Comment = "multipart/form-data; boundary=****8e3722aa-afdf-4137-ab41-bb1bb285cdf2****";
        org.junit.Assert.assertNotNull(postTaxon8);
        org.junit.Assert.assertNull(auditAttributes9);
        org.junit.Assert.assertNotNull(postTaxon11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "MaxInstant" + "'", str12, "MaxInstant");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "MinInstant" + "'", str13, "MinInstant");
        org.junit.Assert.assertNotNull(postTaxon15);
    }

    @Test
    public void test53194() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest106.test53194");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Role role0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Role();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Role role2 = role0.setCanRemoveAppendConfigurations((java.lang.Boolean) true);
        java.lang.Boolean boolean3 = role2.isCanEditData();
        java.lang.String str4 = role2.UniqueId;
        java.lang.Boolean boolean5 = role2.CanAddAppendConfigurations;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Role role7 = role2.setUniqueId("'.'SSSSSSS");
        java.lang.Boolean boolean8 = role7.CanAssignUserRoles;
        org.junit.Assert.assertNotNull(role2);
        org.junit.Assert.assertNull(boolean3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(boolean5);
        org.junit.Assert.assertNotNull(role7);
        org.junit.Assert.assertNull(boolean8);
    }

    @Test
    public void test53195() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest106.test53195");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.PostReportAttachment postReportAttachment0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.PostReportAttachment();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.PostReportAttachment postReportAttachment2 = postReportAttachment0.setTitle("MinDuration");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.PostReportAttachment postReportAttachment4 = postReportAttachment0.setTitle("");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.PostReportAttachment postReportAttachment6 = postReportAttachment0.setLocationUniqueId("https");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.PostReportAttachment postReportAttachment7 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.PostReportAttachment();
        postReportAttachment7.Description = "2021.4.62.0";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.ApplyTagRequest applyTagRequest10 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.ApplyTagRequest();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.ApplyTagRequest[] applyTagRequestArray11 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.ApplyTagRequest[] { applyTagRequest10 };
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.ApplyTagRequest> applyTagRequestList12 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.ApplyTagRequest>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.ApplyTagRequest>) applyTagRequestList12, applyTagRequestArray11);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.PostReportAttachment postReportAttachment14 = postReportAttachment7.setTags(applyTagRequestList12);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.PostReportAttachment postReportAttachment15 = postReportAttachment0.setTags(applyTagRequestList12);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.PostReportAttachment postReportAttachment17 = postReportAttachment15.setDescription("multipart/form-data; boundary=****6b8051d4-caf2-4095-9f11-faa36b95fc28****");
        org.junit.Assert.assertNotNull(postReportAttachment2);
        org.junit.Assert.assertNotNull(postReportAttachment4);
        org.junit.Assert.assertNotNull(postReportAttachment6);
        org.junit.Assert.assertNotNull(applyTagRequestArray11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(postReportAttachment14);
        org.junit.Assert.assertNotNull(postReportAttachment15);
        org.junit.Assert.assertNotNull(postReportAttachment17);
    }

    @Test
    public void test53196() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest106.test53196");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObservedProperty importItemObservedProperty0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObservedProperty();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitDataByLocationServiceRequest fieldVisitDataByLocationServiceRequest1 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitDataByLocationServiceRequest();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitDataByLocationServiceRequest fieldVisitDataByLocationServiceRequest3 = fieldVisitDataByLocationServiceRequest1.setIncludeNodeDetails((java.lang.Boolean) true);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObservedProperty importItemObservedProperty4 = importItemObservedProperty0.setErrors((java.lang.Object) true);
        importItemObservedProperty0.Input = "hi!";
        java.lang.String str7 = importItemObservedProperty0.getInput();
        org.junit.Assert.assertNotNull(fieldVisitDataByLocationServiceRequest3);
        org.junit.Assert.assertNotNull(importItemObservedProperty4);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
    }

    @Test
    public void test53197() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest106.test53197");
        java.util.Map<java.lang.Object, java.lang.reflect.Type> objMap2 = null;
        java.util.Map<java.lang.Object, java.lang.reflect.Type> objMap5 = null;
        java.util.Map<java.lang.Object, java.lang.reflect.Type> objMap8 = null;
        java.util.Map<java.lang.Object, java.lang.reflect.Type> objMap11 = null;
        java.util.Map<java.lang.Object, java.lang.reflect.Type> objMap14 = null;
        com.aquaticinformatics.aquarius.sdk.samples.FieldNamer fieldNamer15 = new com.aquaticinformatics.aquarius.sdk.samples.FieldNamer();
        com.aquaticinformatics.aquarius.sdk.helpers.SdkServiceClient sdkServiceClient17 = com.aquaticinformatics.aquarius.sdk.helpers.SdkServiceClient.Create("MaxDuration", "http", objMap14, (com.aquaticinformatics.aquarius.sdk.helpers.IFieldNamer) fieldNamer15, false);
        com.aquaticinformatics.aquarius.sdk.helpers.SdkServiceClient sdkServiceClient19 = com.aquaticinformatics.aquarius.sdk.helpers.SdkServiceClient.Create("/AQUARIUS/Acquisition/v2", "multipart/form-data; boundary=****44f0772e-c3ca-4316-8e2a-61ec8540d661****", objMap11, (com.aquaticinformatics.aquarius.sdk.helpers.IFieldNamer) fieldNamer15, true);
        com.aquaticinformatics.aquarius.sdk.helpers.SdkServiceClient sdkServiceClient21 = com.aquaticinformatics.aquarius.sdk.helpers.SdkServiceClient.Create("multipart/form-data; boundary=****6b8051d4-caf2-4095-9f11-faa36b95fc28****", "multipart/form-data; boundary=****f642a130-eb6d-4fb6-a1a4-7c7216ab119b****", objMap8, (com.aquaticinformatics.aquarius.sdk.helpers.IFieldNamer) fieldNamer15, true);
        com.aquaticinformatics.aquarius.sdk.helpers.SdkServiceClient sdkServiceClient22 = com.aquaticinformatics.aquarius.sdk.helpers.SdkServiceClient.Create("http://MaxDurationhttp", "multipart/form-data; boundary=****c82cca4e-7755-4a00-8acf-9ac791c56995****", objMap5, (com.aquaticinformatics.aquarius.sdk.helpers.IFieldNamer) fieldNamer15);
        com.aquaticinformatics.aquarius.sdk.helpers.SdkServiceClient sdkServiceClient24 = com.aquaticinformatics.aquarius.sdk.helpers.SdkServiceClient.Create("0001-01-01T00:00:00.0000000Z", "multipart/form-data; boundary=****871ccc7e-c9d9-467b-8c95-d6f9599f0e81****", objMap2, (com.aquaticinformatics.aquarius.sdk.helpers.IFieldNamer) fieldNamer15, true);
        net.servicestack.client.ConnectionFilter connectionFilter25 = sdkServiceClient24.ResponseFilter;
        org.junit.Assert.assertNotNull(sdkServiceClient17);
        org.junit.Assert.assertNotNull(sdkServiceClient19);
        org.junit.Assert.assertNotNull(sdkServiceClient21);
        org.junit.Assert.assertNotNull(sdkServiceClient22);
        org.junit.Assert.assertNotNull(sdkServiceClient24);
        org.junit.Assert.assertNull(connectionFilter25);
    }

    @Test
    public void test53198() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest106.test53198");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescription locationDescription0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescription();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescription locationDescription2 = locationDescription0.setIdentifier("");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescription locationDescription4 = locationDescription2.setUniqueId("'.'SSSSSSS");
        locationDescription4.PrimaryFolder = "MaxInstant";
        java.lang.String str7 = locationDescription4.getIdentifier();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescription locationDescription9 = locationDescription4.setIsExternalLocation((java.lang.Boolean) false);
        locationDescription9.PrimaryFolder = "9999-12-31T23:59:59.9999999Z://2021.4.62.0";
        java.lang.Boolean boolean12 = locationDescription9.IsExternalLocation;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationNote locationNote13 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationNote();
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TagMetadata> tagMetadataList14 = locationNote13.Tags;
        java.time.Instant instant15 = locationNote13.getFromTimeUtc();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationMonitoringMethod locationMonitoringMethod16 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationMonitoringMethod();
        java.lang.String str17 = locationMonitoringMethod16.getModel();
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TagMetadata> tagMetadataList18 = null;
        locationMonitoringMethod16.Tags = tagMetadataList18;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationMonitoringMethod locationMonitoringMethod20 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationMonitoringMethod();
        java.lang.String str21 = locationMonitoringMethod20.getModel();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationMonitoringMethod locationMonitoringMethod23 = locationMonitoringMethod20.setParameter("MinDuration");
        locationMonitoringMethod23.Parameter = "MinDuration";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Attachment attachment26 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Attachment();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.AttachmentCategory attachmentCategory27 = attachment26.AttachmentCategory;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Attachment attachment29 = attachment26.setFileName("");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescription locationDescription30 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescription();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescription locationDescription32 = locationDescription30.setIdentifier("");
        locationDescription32.Identifier = "MaxInstant";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationMonitoringMethod locationMonitoringMethod35 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationMonitoringMethod();
        java.lang.String str36 = locationMonitoringMethod35.getModel();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationMonitoringMethod locationMonitoringMethod38 = locationMonitoringMethod35.setParameter("MinDuration");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TagMetadata[] tagMetadataArray39 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TagMetadata[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TagMetadata> tagMetadataList40 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TagMetadata>();
        boolean boolean41 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TagMetadata>) tagMetadataList40, tagMetadataArray39);
        locationMonitoringMethod38.Tags = tagMetadataList40;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescription locationDescription43 = locationDescription32.setTags(tagMetadataList40);
        attachment29.Tags = tagMetadataList40;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationMonitoringMethod locationMonitoringMethod45 = locationMonitoringMethod23.setTags(tagMetadataList40);
        locationMonitoringMethod16.Tags = tagMetadataList40;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationNote locationNote47 = locationNote13.setTags(tagMetadataList40);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationMonitoringMethod locationMonitoringMethod48 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationMonitoringMethod();
        java.lang.String str49 = locationMonitoringMethod48.getModel();
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TagMetadata> tagMetadataList50 = null;
        locationMonitoringMethod48.Tags = tagMetadataList50;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationMonitoringMethod locationMonitoringMethod52 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationMonitoringMethod();
        java.lang.String str53 = locationMonitoringMethod52.getModel();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationMonitoringMethod locationMonitoringMethod55 = locationMonitoringMethod52.setParameter("MinDuration");
        locationMonitoringMethod55.Parameter = "MinDuration";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Attachment attachment58 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Attachment();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.AttachmentCategory attachmentCategory59 = attachment58.AttachmentCategory;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Attachment attachment61 = attachment58.setFileName("");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescription locationDescription62 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescription();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescription locationDescription64 = locationDescription62.setIdentifier("");
        locationDescription64.Identifier = "MaxInstant";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationMonitoringMethod locationMonitoringMethod67 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationMonitoringMethod();
        java.lang.String str68 = locationMonitoringMethod67.getModel();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationMonitoringMethod locationMonitoringMethod70 = locationMonitoringMethod67.setParameter("MinDuration");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TagMetadata[] tagMetadataArray71 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TagMetadata[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TagMetadata> tagMetadataList72 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TagMetadata>();
        boolean boolean73 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TagMetadata>) tagMetadataList72, tagMetadataArray71);
        locationMonitoringMethod70.Tags = tagMetadataList72;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescription locationDescription75 = locationDescription64.setTags(tagMetadataList72);
        attachment61.Tags = tagMetadataList72;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationMonitoringMethod locationMonitoringMethod77 = locationMonitoringMethod55.setTags(tagMetadataList72);
        locationMonitoringMethod48.Tags = tagMetadataList72;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationNote locationNote79 = locationNote47.setTags(tagMetadataList72);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescription locationDescription80 = locationDescription9.setTags(tagMetadataList72);
        locationDescription9.IsExternalLocation = false;
        org.junit.Assert.assertNotNull(locationDescription2);
        org.junit.Assert.assertNotNull(locationDescription4);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(locationDescription9);
        org.junit.Assert.assertEquals("'" + boolean12 + "' != '" + false + "'", boolean12, false);
        org.junit.Assert.assertNull(tagMetadataList14);
        org.junit.Assert.assertNull(instant15);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNotNull(locationMonitoringMethod23);
        org.junit.Assert.assertNull(attachmentCategory27);
        org.junit.Assert.assertNotNull(attachment29);
        org.junit.Assert.assertNotNull(locationDescription32);
        org.junit.Assert.assertNull(str36);
        org.junit.Assert.assertNotNull(locationMonitoringMethod38);
        org.junit.Assert.assertNotNull(tagMetadataArray39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(locationDescription43);
        org.junit.Assert.assertNotNull(locationMonitoringMethod45);
        org.junit.Assert.assertNotNull(locationNote47);
        org.junit.Assert.assertNull(str49);
        org.junit.Assert.assertNull(str53);
        org.junit.Assert.assertNotNull(locationMonitoringMethod55);
        org.junit.Assert.assertNull(attachmentCategory59);
        org.junit.Assert.assertNotNull(attachment61);
        org.junit.Assert.assertNotNull(locationDescription64);
        org.junit.Assert.assertNull(str68);
        org.junit.Assert.assertNotNull(locationMonitoringMethod70);
        org.junit.Assert.assertNotNull(tagMetadataArray71);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(locationDescription75);
        org.junit.Assert.assertNotNull(locationMonitoringMethod77);
        org.junit.Assert.assertNotNull(locationNote79);
        org.junit.Assert.assertNotNull(locationDescription80);
    }

    @Test
    public void test53199() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest106.test53199");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributesResponse extendedAttributesResponse0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributesResponse();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttribute[] extendedAttributeArray1 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttribute[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttribute> extendedAttributeList2 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttribute>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttribute>) extendedAttributeList2, extendedAttributeArray1);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributesResponse extendedAttributesResponse4 = extendedAttributesResponse0.setResults(extendedAttributeList2);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributesResponse extendedAttributesResponse5 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributesResponse();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttribute[] extendedAttributeArray6 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttribute[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttribute> extendedAttributeList7 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttribute>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttribute>) extendedAttributeList7, extendedAttributeArray6);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributesResponse extendedAttributesResponse9 = extendedAttributesResponse5.setResults(extendedAttributeList7);
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttribute> extendedAttributeList10 = extendedAttributesResponse5.getResults();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributesResponse extendedAttributesResponse11 = extendedAttributesResponse4.setResults(extendedAttributeList10);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributesResponse extendedAttributesResponse12 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributesResponse();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttribute[] extendedAttributeArray13 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttribute[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttribute> extendedAttributeList14 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttribute>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttribute>) extendedAttributeList14, extendedAttributeArray13);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributesResponse extendedAttributesResponse16 = extendedAttributesResponse12.setResults(extendedAttributeList14);
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttribute> extendedAttributeList17 = extendedAttributesResponse12.getResults();
        extendedAttributesResponse11.Results = extendedAttributeList17;
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttribute> extendedAttributeList19 = extendedAttributesResponse11.getResults();
        org.junit.Assert.assertNotNull(extendedAttributeArray1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(extendedAttributesResponse4);
        org.junit.Assert.assertNotNull(extendedAttributeArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(extendedAttributesResponse9);
        org.junit.Assert.assertNotNull(extendedAttributeList10);
        org.junit.Assert.assertNotNull(extendedAttributesResponse11);
        org.junit.Assert.assertNotNull(extendedAttributeArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(extendedAttributesResponse16);
        org.junit.Assert.assertNotNull(extendedAttributeList17);
        org.junit.Assert.assertNotNull(extendedAttributeList19);
    }

    @Test
    public void test53200() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest106.test53200");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Attachment attachment0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Attachment();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributesFull auditAttributesFull1 = attachment0.AuditAttributes;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributesFull auditAttributesFull2 = attachment0.getAuditAttributes();
        java.time.OffsetDateTime offsetDateTime3 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Attachment attachment4 = attachment0.setDateTaken(offsetDateTime3);
        java.lang.String str5 = attachment4.getResolution();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Attachment attachment7 = attachment4.setLatitude("http:///AQUARIUS/Acquisition/v2multipart/form-data; boundary=****44f0772e-c3ca-4316-8e2a-61ec8540d661****/v1/observedproperties/{id}/categoricalvalues");
        java.lang.String str8 = attachment4.Longitude;
        java.lang.String str9 = attachment4.getId();
        attachment4.Resolution = "PT87591240H";
        java.lang.String str12 = attachment4.getFileName();
        org.junit.Assert.assertNull(auditAttributesFull1);
        org.junit.Assert.assertNull(auditAttributesFull2);
        org.junit.Assert.assertNotNull(attachment4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(attachment7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNull(str12);
    }

    @Test
    public void test53201() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest106.test53201");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.GetFieldVisitReadingsByLocationServiceRequest getFieldVisitReadingsByLocationServiceRequest0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.GetFieldVisitReadingsByLocationServiceRequest();
        java.lang.Boolean boolean1 = getFieldVisitReadingsByLocationServiceRequest0.ApplyRounding;
        getFieldVisitReadingsByLocationServiceRequest0.ApplyDatumConversion = true;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.GetFieldVisitReadingsByLocationServiceRequest getFieldVisitReadingsByLocationServiceRequest5 = getFieldVisitReadingsByLocationServiceRequest0.setLocationUniqueId("2021.4.62.0");
        getFieldVisitReadingsByLocationServiceRequest5.Publish = false;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportObservations getExportObservations8 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportObservations();
        java.util.List<java.lang.String> strList9 = getExportObservations8.getLabReportIds();
        java.lang.String str10 = getExportObservations8.DepthUnitCustomId;
        java.util.List<java.lang.String> strList11 = getExportObservations8.getSearch();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetChartDataV2 getChartDataV2_12 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetChartDataV2();
        java.lang.String str13 = getChartDataV2_12.getActivityCustomId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetChartDataV2 getChartDataV2_15 = getChartDataV2_12.setFilterId("");
        java.util.List<java.lang.String> strList16 = getChartDataV2_12.getIds();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExtendedAttributeDropdownlistitems getExtendedAttributeDropdownlistitems17 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExtendedAttributeDropdownlistitems();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_18 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.util.List<java.lang.String> strList19 = getObservationsV2_18.SamplingContextTagIds;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_20 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray22 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList23 = new java.util.ArrayList<java.lang.String>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList23, strArray22);
        getObservationsV2_20.SpecimenIds = strList23;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags26 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray30 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList31 = new java.util.ArrayList<java.lang.String>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList31, strArray30);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags33 = putLocationTags26.setTagUniqueIds(strList31);
        getObservationsV2_20.QualityControlTypes = strList31;
        getObservationsV2_18.ResultGrades = strList31;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExtendedAttributeDropdownlistitems getExtendedAttributeDropdownlistitems36 = getExtendedAttributeDropdownlistitems17.setSearch((java.util.List<java.lang.String>) strList31);
        getChartDataV2_12.ObservedPropertyIds = strList31;
        getChartDataV2_12.SpecimenName = "MinDuration";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportObservations getExportObservations40 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportObservations();
        java.util.List<java.lang.String> strList41 = getExportObservations40.getLabReportIds();
        java.lang.String str42 = getExportObservations40.DepthUnitCustomId;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetActivityTemplates getActivityTemplates43 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetActivityTemplates();
        java.lang.Object obj44 = getActivityTemplates43.getResponseType();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_45 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray47 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList48 = new java.util.ArrayList<java.lang.String>();
        boolean boolean49 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList48, strArray47);
        getObservationsV2_45.SpecimenIds = strList48;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags51 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray55 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList56 = new java.util.ArrayList<java.lang.String>();
        boolean boolean57 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList56, strArray55);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags58 = putLocationTags51.setTagUniqueIds(strList56);
        getObservationsV2_45.QualityControlTypes = strList56;
        getActivityTemplates43.Type = strList56;
        getExportObservations40.AnalyticalGroupIds = strList56;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetChartDataV2 getChartDataV2_62 = getChartDataV2_12.setAnalysisMethodIds((java.util.List<java.lang.String>) strList56);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportObservations getExportObservations63 = getExportObservations8.setAnalyticalGroupIds((java.util.List<java.lang.String>) strList56);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.GetFieldVisitReadingsByLocationServiceRequest getFieldVisitReadingsByLocationServiceRequest64 = getFieldVisitReadingsByLocationServiceRequest5.setParameters(strList56);
        java.util.ArrayList<java.lang.String> strList65 = getFieldVisitReadingsByLocationServiceRequest5.Parameters;
        java.lang.Boolean boolean66 = getFieldVisitReadingsByLocationServiceRequest5.isApplyRounding();
        java.lang.Boolean boolean67 = getFieldVisitReadingsByLocationServiceRequest5.isApplyDatumConversion();
        java.lang.String str68 = getFieldVisitReadingsByLocationServiceRequest5.LocationIdentifier;
        org.junit.Assert.assertNull(boolean1);
        org.junit.Assert.assertNotNull(getFieldVisitReadingsByLocationServiceRequest5);
        org.junit.Assert.assertNull(strList9);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNull(strList11);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNotNull(getChartDataV2_15);
        org.junit.Assert.assertNull(strList16);
        org.junit.Assert.assertNull(strList19);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(putLocationTags33);
        org.junit.Assert.assertNotNull(getExtendedAttributeDropdownlistitems36);
        org.junit.Assert.assertNull(strList41);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertNotNull(obj44);
        org.junit.Assert.assertEquals(obj44.toString(), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$SearchResultActivityTemplate");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj44), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$SearchResultActivityTemplate");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj44), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$SearchResultActivityTemplate");
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(strArray55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertNotNull(putLocationTags58);
        org.junit.Assert.assertNotNull(getChartDataV2_62);
        org.junit.Assert.assertNotNull(getExportObservations63);
        org.junit.Assert.assertNotNull(getFieldVisitReadingsByLocationServiceRequest64);
        org.junit.Assert.assertNotNull(strList65);
        org.junit.Assert.assertNull(boolean66);
        org.junit.Assert.assertEquals("'" + boolean67 + "' != '" + true + "'", boolean67, true);
        org.junit.Assert.assertNull(str68);
    }

    @Test
    public void test53202() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest106.test53202");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExtendedAttributes getExtendedAttributes0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExtendedAttributes();
        java.lang.Integer int1 = getExtendedAttributes0.Limit;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AppliesToType appliesToType2 = getExtendedAttributes0.getAppliesToType();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AppliesToType appliesToType3 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AppliesToType.OBSERVATION;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExtendedAttributes getExtendedAttributes4 = getExtendedAttributes0.setAppliesToType(appliesToType3);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DeleteFieldVisits deleteFieldVisits5 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DeleteFieldVisits();
        java.util.List<java.lang.String> strList6 = deleteFieldVisits5.ProjectIds;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_7 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray9 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList10 = new java.util.ArrayList<java.lang.String>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList10, strArray9);
        getObservationsV2_7.SpecimenIds = strList10;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags13 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray17 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList18 = new java.util.ArrayList<java.lang.String>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList18, strArray17);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags20 = putLocationTags13.setTagUniqueIds(strList18);
        getObservationsV2_7.QualityControlTypes = strList18;
        java.util.List<java.lang.String> strList22 = getObservationsV2_7.getAnalyticalGroupIds();
        java.util.List<java.lang.String> strList23 = getObservationsV2_7.DataClassifications;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.FieldResultType fieldResultType24 = getObservationsV2_7.FieldResultType;
        java.time.Instant instant25 = getObservationsV2_7.getEndObservedTime();
        java.lang.String str26 = getObservationsV2_7.DepthUnitCustomId;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags27 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray31 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList32 = new java.util.ArrayList<java.lang.String>();
        boolean boolean33 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList32, strArray31);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags34 = putLocationTags27.setTagUniqueIds(strList32);
        java.util.ArrayList<java.lang.String> strList35 = putLocationTags34.TagUniqueIds;
        getObservationsV2_7.ProjectIds = strList35;
        deleteFieldVisits5.ProjectIds = strList35;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExtendedAttributes getExtendedAttributes38 = getExtendedAttributes0.setSearch((java.util.List<java.lang.String>) strList35);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AppliesToType appliesToType39 = getExtendedAttributes0.getAppliesToType();
        java.lang.String str40 = getExtendedAttributes0.CustomId;
        java.lang.String str41 = getExtendedAttributes0.CustomId;
        org.junit.Assert.assertNull(int1);
        org.junit.Assert.assertNull(appliesToType2);
        org.junit.Assert.assertTrue("'" + appliesToType3 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AppliesToType.OBSERVATION + "'", appliesToType3.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AppliesToType.OBSERVATION));
        org.junit.Assert.assertNotNull(getExtendedAttributes4);
        org.junit.Assert.assertNull(strList6);
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(putLocationTags20);
        org.junit.Assert.assertNull(strList22);
        org.junit.Assert.assertNull(strList23);
        org.junit.Assert.assertNull(fieldResultType24);
        org.junit.Assert.assertNull(instant25);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(putLocationTags34);
        org.junit.Assert.assertNotNull(strList35);
        org.junit.Assert.assertNotNull(getExtendedAttributes38);
        org.junit.Assert.assertTrue("'" + appliesToType39 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AppliesToType.OBSERVATION + "'", appliesToType39.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AppliesToType.OBSERVATION));
        org.junit.Assert.assertNull(str40);
        org.junit.Assert.assertNull(str41);
    }

    @Test
    public void test53203() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest106.test53203");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostUnitGroup postUnitGroup0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostUnitGroup();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes1 = null;
        postUnitGroup0.AuditAttributes = auditAttributes1;
        postUnitGroup0.CustomId = "MaxInstant";
        postUnitGroup0.Id = "9999-12-31T23:59:59.999Z";
        postUnitGroup0.CustomId = "hi!:///AQUARIUS/Provisioning/v1";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostUnitGroup postUnitGroup10 = postUnitGroup0.setSupportsConversion((java.lang.Boolean) true);
        org.junit.Assert.assertNotNull(postUnitGroup10);
    }

    @Test
    public void test53204() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest106.test53204");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitReadingsByLocationServiceResponse fieldVisitReadingsByLocationServiceResponse0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitReadingsByLocationServiceResponse();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitReading fieldVisitReading1 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitReading();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitReading fieldVisitReading2 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitReading();
        java.util.ArrayList<java.lang.String> strList3 = fieldVisitReading2.getQualifiers();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay4 = null;
        fieldVisitReading2.AdjustmentAmount = quantityWithDisplay4;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay6 = fieldVisitReading2.Value;
        java.lang.String str7 = fieldVisitReading2.Comments;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitReading fieldVisitReading8 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitReading();
        java.util.ArrayList<java.lang.String> strList9 = fieldVisitReading8.getQualifiers();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay10 = null;
        fieldVisitReading8.AdjustmentAmount = quantityWithDisplay10;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitReading fieldVisitReading12 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitReading();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitReadingType fieldVisitReadingType13 = fieldVisitReading12.ReadingType;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitReading fieldVisitReading14 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitReading();
        java.util.ArrayList<java.lang.String> strList15 = fieldVisitReading14.getQualifiers();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay16 = null;
        fieldVisitReading14.AdjustmentAmount = quantityWithDisplay16;
        java.time.Instant instant18 = com.aquaticinformatics.aquarius.sdk.samples.serializers.InstantDeserializer.MaxValue;
        fieldVisitReading14.Time = instant18;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitReading fieldVisitReading20 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitReading();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitReading fieldVisitReading22 = fieldVisitReading20.setUseLocationDatumAsReference((java.lang.Boolean) true);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitReading fieldVisitReading23 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitReading();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitReading fieldVisitReading25 = fieldVisitReading23.setUseLocationDatumAsReference((java.lang.Boolean) true);
        fieldVisitReading25.Manufacturer = "https";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitReading fieldVisitReading28 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitReading();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitReadingType fieldVisitReadingType29 = fieldVisitReading28.ReadingType;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitReading fieldVisitReading30 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitReading();
        java.util.ArrayList<java.lang.String> strList31 = fieldVisitReading30.getQualifiers();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay32 = null;
        fieldVisitReading30.AdjustmentAmount = quantityWithDisplay32;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay34 = fieldVisitReading30.Value;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitReading[] fieldVisitReadingArray35 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitReading[] { fieldVisitReading1, fieldVisitReading2, fieldVisitReading8, fieldVisitReading12, fieldVisitReading14, fieldVisitReading22, fieldVisitReading25, fieldVisitReading28, fieldVisitReading30 };
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitReading> fieldVisitReadingList36 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitReading>();
        boolean boolean37 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitReading>) fieldVisitReadingList36, fieldVisitReadingArray35);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitReadingsByLocationServiceResponse fieldVisitReadingsByLocationServiceResponse38 = fieldVisitReadingsByLocationServiceResponse0.setFieldVisitReadings(fieldVisitReadingList36);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitReading fieldVisitReading39 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitReading();
        fieldVisitReading39.FieldVisitIdentifier = "MaxInstant";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitReading fieldVisitReading42 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitReading();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitReadingType fieldVisitReadingType43 = fieldVisitReading42.ReadingType;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitApproval fieldVisitApproval44 = fieldVisitReading42.Approval;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitReading fieldVisitReading45 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitReading();
        java.util.ArrayList<java.lang.String> strList46 = fieldVisitReading45.getQualifiers();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay47 = null;
        fieldVisitReading45.AdjustmentAmount = quantityWithDisplay47;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay49 = fieldVisitReading45.Value;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitReading fieldVisitReading50 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitReading();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitReading fieldVisitReading52 = fieldVisitReading50.setUseLocationDatumAsReference((java.lang.Boolean) true);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitReading fieldVisitReading54 = fieldVisitReading52.setParameter("0001-01-01T00:00:00.000Z");
        java.lang.Integer int55 = fieldVisitReading52.GradeCode;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitReading fieldVisitReading56 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitReading();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay57 = fieldVisitReading56.Value;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitReading[] fieldVisitReadingArray58 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitReading[] { fieldVisitReading39, fieldVisitReading42, fieldVisitReading45, fieldVisitReading52, fieldVisitReading56 };
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitReading> fieldVisitReadingList59 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitReading>();
        boolean boolean60 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitReading>) fieldVisitReadingList59, fieldVisitReadingArray58);
        fieldVisitReadingsByLocationServiceResponse0.FieldVisitReadings = fieldVisitReadingList59;
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitReading> fieldVisitReadingList62 = fieldVisitReadingsByLocationServiceResponse0.getFieldVisitReadings();
        org.junit.Assert.assertNull(strList3);
        org.junit.Assert.assertNull(quantityWithDisplay6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(strList9);
        org.junit.Assert.assertNull(fieldVisitReadingType13);
        org.junit.Assert.assertNull(strList15);
        org.junit.Assert.assertNotNull(instant18);
        org.junit.Assert.assertNotNull(fieldVisitReading22);
        org.junit.Assert.assertNotNull(fieldVisitReading25);
        org.junit.Assert.assertNull(fieldVisitReadingType29);
        org.junit.Assert.assertNull(strList31);
        org.junit.Assert.assertNull(quantityWithDisplay34);
        org.junit.Assert.assertNotNull(fieldVisitReadingArray35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(fieldVisitReadingsByLocationServiceResponse38);
        org.junit.Assert.assertNull(fieldVisitReadingType43);
        org.junit.Assert.assertNull(fieldVisitApproval44);
        org.junit.Assert.assertNull(strList46);
        org.junit.Assert.assertNull(quantityWithDisplay49);
        org.junit.Assert.assertNotNull(fieldVisitReading52);
        org.junit.Assert.assertNotNull(fieldVisitReading54);
        org.junit.Assert.assertNull(int55);
        org.junit.Assert.assertNull(quantityWithDisplay57);
        org.junit.Assert.assertNotNull(fieldVisitReadingArray58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(fieldVisitReadingList62);
    }

    @Test
    public void test53205() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest106.test53205");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostRecurringReport postRecurringReport0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostRecurringReport();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary1 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        dischargeSummary1.Reviewer = "";
        java.time.Instant instant4 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        dischargeSummary1.MeasurementTime = instant4;
        postRecurringReport0.NextGenerationDate = instant4;
        java.time.Instant instant7 = postRecurringReport0.getNextGenerationDate();
        java.lang.Object obj8 = postRecurringReport0.getResponseType();
        java.lang.Object obj9 = postRecurringReport0.getResponseType();
        java.lang.Object obj10 = postRecurringReport0.getResponseType();
        org.junit.Assert.assertNotNull(instant4);
        org.junit.Assert.assertNotNull(instant7);
        org.junit.Assert.assertNotNull(obj8);
        org.junit.Assert.assertEquals(obj8.toString(), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning$RecurringReport");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj8), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning$RecurringReport");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj8), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning$RecurringReport");
        org.junit.Assert.assertNotNull(obj9);
        org.junit.Assert.assertEquals(obj9.toString(), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning$RecurringReport");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj9), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning$RecurringReport");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj9), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning$RecurringReport");
        org.junit.Assert.assertNotNull(obj10);
        org.junit.Assert.assertEquals(obj10.toString(), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning$RecurringReport");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj10), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning$RecurringReport");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj10), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning$RecurringReport");
    }

    @Test
    public void test53206() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest106.test53206");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TrendLineAnalysisServiceRequest trendLineAnalysisServiceRequest0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TrendLineAnalysisServiceRequest();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TrendLineAnalysisType trendLineAnalysisType1 = null;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TrendLineAnalysisServiceRequest trendLineAnalysisServiceRequest2 = trendLineAnalysisServiceRequest0.setType(trendLineAnalysisType1);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TrendLineAnalysisType trendLineAnalysisType3 = trendLineAnalysisServiceRequest2.Type;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.StatisticalDateTimeOffset statisticalDateTimeOffset4 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.StatisticalDateTimeOffset();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostRecurringReport postRecurringReport5 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostRecurringReport();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary6 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        dischargeSummary6.Reviewer = "";
        java.time.Instant instant9 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        dischargeSummary6.MeasurementTime = instant9;
        postRecurringReport5.NextGenerationDate = instant9;
        java.time.Instant instant12 = postRecurringReport5.getNextGenerationDate();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.StatisticalDateTimeOffset statisticalDateTimeOffset13 = statisticalDateTimeOffset4.setDateTimeOffset(instant12);
        trendLineAnalysisServiceRequest2.QueryTo = instant12;
        java.time.Instant instant15 = trendLineAnalysisServiceRequest2.getQueryFrom();
        java.time.Instant instant16 = trendLineAnalysisServiceRequest2.getQueryTo();
        java.time.Instant instant17 = trendLineAnalysisServiceRequest2.QueryTo;
        org.junit.Assert.assertNotNull(trendLineAnalysisServiceRequest2);
        org.junit.Assert.assertNull(trendLineAnalysisType3);
        org.junit.Assert.assertNotNull(instant9);
        org.junit.Assert.assertNotNull(instant12);
        org.junit.Assert.assertNotNull(statisticalDateTimeOffset13);
        org.junit.Assert.assertNull(instant15);
        org.junit.Assert.assertNotNull(instant16);
        org.junit.Assert.assertNotNull(instant17);
    }

    @Test
    public void test53207() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest106.test53207");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostApprovalLevel postApprovalLevel0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostApprovalLevel();
        java.lang.Object obj1 = postApprovalLevel0.getResponseType();
        java.lang.String str2 = postApprovalLevel0.Color;
        postApprovalLevel0.Color = "";
        postApprovalLevel0.ApprovalLevel = 10L;
        org.junit.Assert.assertNotNull(obj1);
        org.junit.Assert.assertEquals(obj1.toString(), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning$ApprovalLevel");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj1), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning$ApprovalLevel");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj1), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning$ApprovalLevel");
        org.junit.Assert.assertNull(str2);
    }

    @Test
    public void test53208() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest106.test53208");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Unit unit0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Unit();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes1 = unit0.AuditAttributes;
        unit0.Name = "2021.4.62.0";
        java.lang.String str4 = unit0.getCustomId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Unit unit6 = unit0.setName("MinDuration");
        java.lang.String str7 = unit6.getName();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Unit unit9 = unit6.setCustomId("multipart/form-data; boundary=****895246ac-50fd-4284-9cd4-5cdd869d7100****");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Unit unit11 = unit9.setBaseMultiplier((java.lang.Double) (-1.0d));
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Unit unit13 = unit11.setCustomId("multipart/form-data; boundary=****9fadde69-3f13-40c4-a87c-0f3f51c2dd35****");
        org.junit.Assert.assertNull(auditAttributes1);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNotNull(unit6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "MinDuration" + "'", str7, "MinDuration");
        org.junit.Assert.assertNotNull(unit9);
        org.junit.Assert.assertNotNull(unit11);
        org.junit.Assert.assertNotNull(unit13);
    }

    @Test
    public void test53209() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest106.test53209");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeTransaction metadataChangeTransaction0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeTransaction();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CorrectionOperation correctionOperation1 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CorrectionOperation();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CorrectionType correctionType2 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CorrectionType.AdjustableTrim;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CorrectionOperation correctionOperation3 = correctionOperation1.setType(correctionType2);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeOperationType metadataChangeOperationType4 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeOperationType.Creation;
        correctionOperation1.OperationType = metadataChangeOperationType4;
        java.time.Instant instant6 = null;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CorrectionOperation correctionOperation7 = correctionOperation1.setDateAppliedUtc(instant6);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MethodOperation methodOperation8 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MethodOperation();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeOperationType metadataChangeOperationType9 = methodOperation8.getOperationType();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeOperationType metadataChangeOperationType10 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeOperationType.Creation;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MethodOperation methodOperation11 = methodOperation8.setOperationType(metadataChangeOperationType10);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CorrectionOperation correctionOperation12 = correctionOperation7.setOperationType(metadataChangeOperationType10);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CorrectionOperation correctionOperation13 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CorrectionOperation();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CorrectionType correctionType14 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CorrectionType.AdjustableTrim;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CorrectionOperation correctionOperation15 = correctionOperation13.setType(correctionType14);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeOperationType metadataChangeOperationType16 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeOperationType.Creation;
        correctionOperation13.OperationType = metadataChangeOperationType16;
        java.time.Instant instant18 = null;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CorrectionOperation correctionOperation19 = correctionOperation13.setDateAppliedUtc(instant18);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MethodOperation methodOperation20 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MethodOperation();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeOperationType metadataChangeOperationType21 = methodOperation20.getOperationType();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeOperationType metadataChangeOperationType22 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeOperationType.Creation;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MethodOperation methodOperation23 = methodOperation20.setOperationType(metadataChangeOperationType22);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CorrectionOperation correctionOperation24 = correctionOperation19.setOperationType(metadataChangeOperationType22);
        correctionOperation7.OperationType = metadataChangeOperationType22;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TrendLineAnalysisServiceRequest trendLineAnalysisServiceRequest26 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TrendLineAnalysisServiceRequest();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TrendLineAnalysisType trendLineAnalysisType27 = trendLineAnalysisServiceRequest26.getType();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationRemark locationRemark28 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationRemark();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationRemark locationRemark30 = locationRemark28.setDescription("MaxInstant");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse31 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant32 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse33 = locationDescriptionListServiceResponse31.setNextToken(instant32);
        locationRemark30.FromTime = instant32;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationRemark locationRemark36 = locationRemark30.setRemark("/AQUARIUS/Acquisition/v2");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesThresholdPeriod timeSeriesThresholdPeriod37 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesThresholdPeriod();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesThresholdPeriod timeSeriesThresholdPeriod39 = timeSeriesThresholdPeriod37.setReferenceValue((java.lang.Double) 0.0d);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescription locationDescription40 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescription();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescription locationDescription42 = locationDescription40.setIdentifier("");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ControlConditionActivity controlConditionActivity43 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ControlConditionActivity();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ControlCleanedType controlCleanedType44 = null;
        controlConditionActivity43.ControlCleaned = controlCleanedType44;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse46 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant47 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse48 = locationDescriptionListServiceResponse46.setNextToken(instant47);
        controlConditionActivity43.DateCleaned = instant47;
        locationDescription42.LastModified = instant47;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesThresholdPeriod timeSeriesThresholdPeriod51 = timeSeriesThresholdPeriod39.setAppliedTime(instant47);
        locationRemark36.ToTime = instant47;
        trendLineAnalysisServiceRequest26.QueryFrom = instant47;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CorrectionOperation correctionOperation54 = correctionOperation7.setDateAppliedUtc(instant47);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CorrectionOperation[] correctionOperationArray55 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CorrectionOperation[] { correctionOperation54 };
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CorrectionOperation> correctionOperationList56 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CorrectionOperation>();
        boolean boolean57 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CorrectionOperation>) correctionOperationList56, correctionOperationArray55);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeTransaction metadataChangeTransaction58 = metadataChangeTransaction0.setCorrectionOperations((java.util.List<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CorrectionOperation>) correctionOperationList56);
        java.util.List<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QualifierOperation> qualifierOperationList59 = metadataChangeTransaction0.getQualifierOperations();
        java.util.List<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QualifierOperation> qualifierOperationList60 = metadataChangeTransaction0.QualifierOperations;
        org.junit.Assert.assertTrue("'" + correctionType2 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CorrectionType.AdjustableTrim + "'", correctionType2.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CorrectionType.AdjustableTrim));
        org.junit.Assert.assertNotNull(correctionOperation3);
        org.junit.Assert.assertTrue("'" + metadataChangeOperationType4 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeOperationType.Creation + "'", metadataChangeOperationType4.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeOperationType.Creation));
        org.junit.Assert.assertNotNull(correctionOperation7);
        org.junit.Assert.assertNull(metadataChangeOperationType9);
        org.junit.Assert.assertTrue("'" + metadataChangeOperationType10 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeOperationType.Creation + "'", metadataChangeOperationType10.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeOperationType.Creation));
        org.junit.Assert.assertNotNull(methodOperation11);
        org.junit.Assert.assertNotNull(correctionOperation12);
        org.junit.Assert.assertTrue("'" + correctionType14 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CorrectionType.AdjustableTrim + "'", correctionType14.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CorrectionType.AdjustableTrim));
        org.junit.Assert.assertNotNull(correctionOperation15);
        org.junit.Assert.assertTrue("'" + metadataChangeOperationType16 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeOperationType.Creation + "'", metadataChangeOperationType16.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeOperationType.Creation));
        org.junit.Assert.assertNotNull(correctionOperation19);
        org.junit.Assert.assertNull(metadataChangeOperationType21);
        org.junit.Assert.assertTrue("'" + metadataChangeOperationType22 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeOperationType.Creation + "'", metadataChangeOperationType22.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeOperationType.Creation));
        org.junit.Assert.assertNotNull(methodOperation23);
        org.junit.Assert.assertNotNull(correctionOperation24);
        org.junit.Assert.assertNull(trendLineAnalysisType27);
        org.junit.Assert.assertNotNull(locationRemark30);
        org.junit.Assert.assertNotNull(instant32);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse33);
        org.junit.Assert.assertNotNull(locationRemark36);
        org.junit.Assert.assertNotNull(timeSeriesThresholdPeriod39);
        org.junit.Assert.assertNotNull(locationDescription42);
        org.junit.Assert.assertNotNull(instant47);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse48);
        org.junit.Assert.assertNotNull(timeSeriesThresholdPeriod51);
        org.junit.Assert.assertNotNull(correctionOperation54);
        org.junit.Assert.assertNotNull(correctionOperationArray55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertNotNull(metadataChangeTransaction58);
        org.junit.Assert.assertNull(qualifierOperationList59);
        org.junit.Assert.assertNull(qualifierOperationList60);
    }

    @Test
    public void test53210() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest106.test53210");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitReading fieldVisitReading0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitReading();
        java.util.ArrayList<java.lang.String> strList1 = fieldVisitReading0.getQualifiers();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitReading fieldVisitReading3 = fieldVisitReading0.setSerialNumber("yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSSSSSZZZZZ");
        java.util.ArrayList<java.lang.String> strList4 = fieldVisitReading0.getQualifiers();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitReading fieldVisitReading6 = fieldVisitReading0.setComments("-PT87591240H");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitReading fieldVisitReading8 = fieldVisitReading0.setSubLocationIdentifier("");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitApproval fieldVisitApproval9 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitApproval();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitApproval fieldVisitApproval11 = fieldVisitApproval9.setLevelDescription("/AQUARIUS/Acquisition/v2");
        fieldVisitReading0.Approval = fieldVisitApproval9;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay13 = fieldVisitReading0.Value;
        org.junit.Assert.assertNull(strList1);
        org.junit.Assert.assertNotNull(fieldVisitReading3);
        org.junit.Assert.assertNull(strList4);
        org.junit.Assert.assertNotNull(fieldVisitReading6);
        org.junit.Assert.assertNotNull(fieldVisitReading8);
        org.junit.Assert.assertNotNull(fieldVisitApproval11);
        org.junit.Assert.assertNull(quantityWithDisplay13);
    }

    @Test
    public void test53211() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest106.test53211");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity pointVelocityDischargeActivity0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity();
        java.lang.String str1 = pointVelocityDischargeActivity0.getModel();
        java.lang.String str2 = pointVelocityDischargeActivity0.getFirmwareVersion();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay3 = null;
        pointVelocityDischargeActivity0.Width = quantityWithDisplay3;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.StartPointType startPointType5 = null;
        pointVelocityDischargeActivity0.StartPoint = startPointType5;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Vertical[] verticalArray7 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Vertical[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Vertical> verticalList8 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Vertical>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Vertical>) verticalList8, verticalArray7);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity pointVelocityDischargeActivity10 = pointVelocityDischargeActivity0.setVerticals(verticalList8);
        java.lang.String str11 = pointVelocityDischargeActivity10.getSoftwareVersion();
        java.lang.Boolean boolean12 = pointVelocityDischargeActivity10.isSuspensionCoefficientUsed();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNotNull(verticalArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(pointVelocityDischargeActivity10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNull(boolean12);
    }

    @Test
    public void test53212() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest106.test53212");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDescription timeSeriesDescription0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDescription();
        java.time.Instant instant1 = timeSeriesDescription0.getCorrectedStartTime();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest2 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ControlConditionActivity controlConditionActivity3 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ControlConditionActivity();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ControlCleanedType controlCleanedType4 = null;
        controlConditionActivity3.ControlCleaned = controlCleanedType4;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse6 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant7 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse8 = locationDescriptionListServiceResponse6.setNextToken(instant7);
        controlConditionActivity3.DateCleaned = instant7;
        timeAlignedDataServiceRequest2.QueryFrom = instant7;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDescription timeSeriesDescription11 = timeSeriesDescription0.setCorrectedEndTime(instant7);
        java.lang.String str12 = timeSeriesDescription0.Label;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesThresholdPeriod timeSeriesThresholdPeriod13 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesThresholdPeriod();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesThresholdPeriod timeSeriesThresholdPeriod15 = timeSeriesThresholdPeriod13.setReferenceValue((java.lang.Double) 0.0d);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesThresholdPeriod timeSeriesThresholdPeriod17 = timeSeriesThresholdPeriod15.setReferenceValue((java.lang.Double) 0.0d);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MethodOperation methodOperation18 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MethodOperation();
        java.time.Instant instant19 = methodOperation18.getDateAppliedUtc();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary20 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary22 = dischargeSummary20.setPublish((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse23 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant24 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse25 = locationDescriptionListServiceResponse23.setNextToken(instant24);
        dischargeSummary20.MeasurementTime = instant24;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MethodOperation methodOperation27 = methodOperation18.setDateAppliedUtc(instant24);
        timeSeriesThresholdPeriod17.EndTime = instant24;
        timeSeriesDescription0.LastModified = instant24;
        org.junit.Assert.assertNull(instant1);
        org.junit.Assert.assertNotNull(instant7);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse8);
        org.junit.Assert.assertNotNull(timeSeriesDescription11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(timeSeriesThresholdPeriod15);
        org.junit.Assert.assertNotNull(timeSeriesThresholdPeriod17);
        org.junit.Assert.assertNull(instant19);
        org.junit.Assert.assertNotNull(dischargeSummary22);
        org.junit.Assert.assertNotNull(instant24);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse25);
        org.junit.Assert.assertNotNull(methodOperation27);
    }

    @Test
    public void test53213() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest106.test53213");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SearchResultCollectionMethod searchResultCollectionMethod0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SearchResultCollectionMethod();
        java.lang.String str1 = searchResultCollectionMethod0.Cursor;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SearchResultCollectionMethod searchResultCollectionMethod3 = searchResultCollectionMethod0.setCursor("MinDuration");
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.CollectionMethod> collectionMethodList4 = searchResultCollectionMethod0.DomainObjects;
        java.lang.Integer int5 = searchResultCollectionMethod0.getTotalCount();
        java.lang.Integer int6 = searchResultCollectionMethod0.getTotalCount();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(searchResultCollectionMethod3);
        org.junit.Assert.assertNull(collectionMethodList4);
        org.junit.Assert.assertNull(int5);
        org.junit.Assert.assertNull(int6);
    }

    @Test
    public void test53214() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest106.test53214");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.PostLocationAttachmentResponse postLocationAttachmentResponse0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.PostLocationAttachmentResponse();
        java.lang.String str1 = postLocationAttachmentResponse0.getComments();
        java.lang.String str2 = postLocationAttachmentResponse0.Comments;
        java.lang.String str3 = postLocationAttachmentResponse0.LocationUniqueId;
        postLocationAttachmentResponse0.Url = "MaxInstant";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.PostLocationAttachmentResponse postLocationAttachmentResponse7 = postLocationAttachmentResponse0.setUniqueId("ZZZZZ");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.PostLocationAttachmentResponse postLocationAttachmentResponse9 = postLocationAttachmentResponse7.setUniqueId("");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.PostLocationAttachment postLocationAttachment10 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.PostLocationAttachment();
        java.lang.String str11 = postLocationAttachment10.getComments();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.IHttpFile iHttpFile12 = null;
        postLocationAttachment10.File = iHttpFile12;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.IHttpFile iHttpFile14 = null;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.PostLocationAttachment postLocationAttachment15 = postLocationAttachment10.setFile(iHttpFile14);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.PostLocationAttachmentResponse postLocationAttachmentResponse16 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.PostLocationAttachmentResponse();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.AttachmentCategory attachmentCategory17 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.AttachmentCategory.InventoryControl;
        postLocationAttachmentResponse16.AttachmentCategory = attachmentCategory17;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.PostLocationAttachment postLocationAttachment19 = postLocationAttachment15.setAttachmentCategory(attachmentCategory17);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.PostLocationAttachmentResponse postLocationAttachmentResponse20 = postLocationAttachmentResponse7.setAttachmentCategory(attachmentCategory17);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.PostLocationAttachmentResponse postLocationAttachmentResponse22 = postLocationAttachmentResponse20.setLocationUniqueId("****231224c4-98ce-4e30-bd65-1d25287c4abe****");
        postLocationAttachmentResponse22.LocationUniqueId = "https";
        postLocationAttachmentResponse22.UniqueId = "0001-01-01T00:00:00.000Z";
        postLocationAttachmentResponse22.UniqueId = "multipart/form-data; boundary=****9a2a71f5-e148-48e5-b44f-3c1e18f7138d****";
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(postLocationAttachmentResponse7);
        org.junit.Assert.assertNotNull(postLocationAttachmentResponse9);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNotNull(postLocationAttachment15);
        org.junit.Assert.assertTrue("'" + attachmentCategory17 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.AttachmentCategory.InventoryControl + "'", attachmentCategory17.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.AttachmentCategory.InventoryControl));
        org.junit.Assert.assertNotNull(postLocationAttachment19);
        org.junit.Assert.assertNotNull(postLocationAttachmentResponse20);
        org.junit.Assert.assertNotNull(postLocationAttachmentResponse22);
    }

    @Test
    public void test53215() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest106.test53215");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostSamplingLocation postSamplingLocation0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostSamplingLocation();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostSamplingLocation postSamplingLocation1 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostSamplingLocation();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple standardSimple2 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple();
        com.aquaticinformatics.aquarius.sdk.samples.Interval interval3 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple standardSimple4 = standardSimple2.setApplicabilityRange(interval3);
        java.lang.String str5 = standardSimple2.getCustomId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple standardSimple6 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple();
        com.aquaticinformatics.aquarius.sdk.samples.Interval interval7 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple standardSimple8 = standardSimple6.setApplicabilityRange(interval7);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple standardSimple10 = standardSimple6.setActive((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple standardSimple11 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple standardSimple12 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple();
        com.aquaticinformatics.aquarius.sdk.samples.Interval interval13 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple standardSimple14 = standardSimple12.setApplicabilityRange(interval13);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple standardSimple16 = standardSimple12.setActive((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple standardSimple17 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple();
        com.aquaticinformatics.aquarius.sdk.samples.Interval interval18 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple standardSimple19 = standardSimple17.setApplicabilityRange(interval18);
        java.lang.String str20 = standardSimple19.CustomId;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple standardSimple21 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple standardSimple22 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple standardSimple23 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple();
        com.aquaticinformatics.aquarius.sdk.samples.Interval interval24 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple standardSimple25 = standardSimple23.setApplicabilityRange(interval24);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple standardSimple26 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple();
        com.aquaticinformatics.aquarius.sdk.samples.Interval interval27 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple standardSimple28 = standardSimple26.setApplicabilityRange(interval27);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple[] standardSimpleArray29 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple[] { standardSimple2, standardSimple6, standardSimple11, standardSimple12, standardSimple19, standardSimple21, standardSimple22, standardSimple25, standardSimple26 };
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple> standardSimpleList30 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple>();
        boolean boolean31 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple>) standardSimpleList30, standardSimpleArray29);
        postSamplingLocation1.Standards = standardSimpleList30;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutFieldVisit putFieldVisit33 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutFieldVisit();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity[] plannedActivityArray34 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity> plannedActivityList35 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity>();
        boolean boolean36 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity>) plannedActivityList35, plannedActivityArray34);
        putFieldVisit33.PlannedActivities = plannedActivityList35;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment38 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment();
        java.lang.String str39 = domainObjectAttachment38.getId();
        java.lang.String str40 = domainObjectAttachment38.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Attachment attachment41 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment42 = domainObjectAttachment38.setAttachment(attachment41);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment43 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment();
        java.lang.String str44 = domainObjectAttachment43.getId();
        java.lang.String str45 = domainObjectAttachment43.getId();
        domainObjectAttachment43.Id = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment49 = domainObjectAttachment43.setId("hi!");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment50 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment();
        java.lang.String str51 = domainObjectAttachment50.getId();
        java.lang.String str52 = domainObjectAttachment50.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Attachment attachment53 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment54 = domainObjectAttachment50.setAttachment(attachment53);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment55 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment();
        java.lang.String str56 = domainObjectAttachment55.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment57 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment();
        java.lang.String str58 = domainObjectAttachment57.getId();
        java.lang.String str59 = domainObjectAttachment57.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Attachment attachment60 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment61 = domainObjectAttachment57.setAttachment(attachment60);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment62 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment();
        java.lang.String str63 = domainObjectAttachment62.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment[] domainObjectAttachmentArray64 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment[] { domainObjectAttachment38, domainObjectAttachment43, domainObjectAttachment50, domainObjectAttachment55, domainObjectAttachment57, domainObjectAttachment62 };
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment> domainObjectAttachmentList65 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment>();
        boolean boolean66 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment>) domainObjectAttachmentList65, domainObjectAttachmentArray64);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutFieldVisit putFieldVisit67 = putFieldVisit33.setAttachments((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment>) domainObjectAttachmentList65);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlan samplingPlan68 = putFieldVisit33.getSamplingPlan();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.FieldTripSimple fieldTripSimple69 = putFieldVisit33.getFieldTrip();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Schedule schedule70 = putFieldVisit33.Schedule;
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment> domainObjectAttachmentList71 = putFieldVisit33.Attachments;
        postSamplingLocation1.Attachments = domainObjectAttachmentList71;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostSamplingLocation postSamplingLocation73 = postSamplingLocation0.setAttachments(domainObjectAttachmentList71);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostSamplingLocation postSamplingLocation75 = postSamplingLocation73.setName("POST");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostSamplingLocation postSamplingLocation77 = postSamplingLocation73.setHorizontalDatum("https");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation78 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedFieldResult plannedFieldResult79 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation80 = observation78.setPlannedFieldResult(plannedFieldResult79);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabInstruction labInstruction81 = null;
        observation80.LabInstruction = labInstruction81;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationStatistics observationStatistics83 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation84 = observation80.setStatistics(observationStatistics83);
        java.time.OffsetDateTime offsetDateTime85 = observation84.getResultTime();
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple> importHistoryEventSimpleList86 = observation84.ImportHistoryEventSimples;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty observedProperty87 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation88 = observation84.setObservedProperty(observedProperty87);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationStatistics observationStatistics89 = observation84.Statistics;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity postActivity90 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttribute[] extendedAttributeArray91 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttribute[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttribute> extendedAttributeList92 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttribute>();
        boolean boolean93 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttribute>) extendedAttributeList92, extendedAttributeArray91);
        postActivity90.ExtendedAttributes = extendedAttributeList92;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation95 = observation84.setExtendedAttributes((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttribute>) extendedAttributeList92);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostSamplingLocation postSamplingLocation96 = postSamplingLocation77.setExtendedAttributes((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttribute>) extendedAttributeList92);
        postSamplingLocation77.Name = "multipart/form-data; boundary=****2e497db8-6b91-47d6-99bc-df65af225bf8****";
        org.junit.Assert.assertNotNull(standardSimple4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(standardSimple8);
        org.junit.Assert.assertNotNull(standardSimple10);
        org.junit.Assert.assertNotNull(standardSimple14);
        org.junit.Assert.assertNotNull(standardSimple16);
        org.junit.Assert.assertNotNull(standardSimple19);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNotNull(standardSimple25);
        org.junit.Assert.assertNotNull(standardSimple28);
        org.junit.Assert.assertNotNull(standardSimpleArray29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(plannedActivityArray34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertNull(str40);
        org.junit.Assert.assertNotNull(domainObjectAttachment42);
        org.junit.Assert.assertNull(str44);
        org.junit.Assert.assertNull(str45);
        org.junit.Assert.assertNotNull(domainObjectAttachment49);
        org.junit.Assert.assertNull(str51);
        org.junit.Assert.assertNull(str52);
        org.junit.Assert.assertNotNull(domainObjectAttachment54);
        org.junit.Assert.assertNull(str56);
        org.junit.Assert.assertNull(str58);
        org.junit.Assert.assertNull(str59);
        org.junit.Assert.assertNotNull(domainObjectAttachment61);
        org.junit.Assert.assertNull(str63);
        org.junit.Assert.assertNotNull(domainObjectAttachmentArray64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertNotNull(putFieldVisit67);
        org.junit.Assert.assertNull(samplingPlan68);
        org.junit.Assert.assertNull(fieldTripSimple69);
        org.junit.Assert.assertNull(schedule70);
        org.junit.Assert.assertNotNull(domainObjectAttachmentList71);
        org.junit.Assert.assertNotNull(postSamplingLocation73);
        org.junit.Assert.assertNotNull(postSamplingLocation75);
        org.junit.Assert.assertNotNull(postSamplingLocation77);
        org.junit.Assert.assertNotNull(observation80);
        org.junit.Assert.assertNotNull(observation84);
        org.junit.Assert.assertNull(offsetDateTime85);
        org.junit.Assert.assertNull(importHistoryEventSimpleList86);
        org.junit.Assert.assertNotNull(observation88);
        org.junit.Assert.assertNull(observationStatistics89);
        org.junit.Assert.assertNotNull(extendedAttributeArray91);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertNotNull(observation95);
        org.junit.Assert.assertNotNull(postSamplingLocation96);
    }

    @Test
    public void test53216() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest106.test53216");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.GetLocationReferencePoints getLocationReferencePoints0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.GetLocationReferencePoints();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.GetLocationReferencePoints getLocationReferencePoints2 = getLocationReferencePoints0.setLocationUniqueId("/AQUARIUS/Acquisition/v2");
        java.lang.Object obj3 = getLocationReferencePoints0.getResponseType();
        java.lang.String str4 = getLocationReferencePoints0.getLocationUniqueId();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.GetLocationReferencePoints getLocationReferencePoints6 = getLocationReferencePoints0.setLocationUniqueId("http://MaxDurationhttp/json/reply/Integer");
        getLocationReferencePoints0.LocationUniqueId = "multipart/form-data; boundary=****46b5d5e5-73d1-43c8-8704-4a7bbf2d8314****";
        org.junit.Assert.assertNotNull(getLocationReferencePoints2);
        org.junit.Assert.assertNotNull(obj3);
        org.junit.Assert.assertEquals(obj3.toString(), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning$ReferencePointResponse");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj3), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning$ReferencePointResponse");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj3), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning$ReferencePointResponse");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "/AQUARIUS/Acquisition/v2" + "'", str4, "/AQUARIUS/Acquisition/v2");
        org.junit.Assert.assertNotNull(getLocationReferencePoints6);
    }

    @Test
    public void test53217() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest106.test53217");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutOpenIdConnectRelyingPartyConfiguration putOpenIdConnectRelyingPartyConfiguration0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutOpenIdConnectRelyingPartyConfiguration();
        java.util.List<java.lang.String> strList1 = putOpenIdConnectRelyingPartyConfiguration0.getScopes();
        java.lang.String str2 = putOpenIdConnectRelyingPartyConfiguration0.RedirectUri;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.OpenIdConnectRelyingPartyConfigurationBase openIdConnectRelyingPartyConfigurationBase4 = putOpenIdConnectRelyingPartyConfiguration0.setDisplayName("https");
        openIdConnectRelyingPartyConfigurationBase4.ClientSecret = "POST";
        java.lang.String str7 = openIdConnectRelyingPartyConfigurationBase4.getOptionalIssuerDiscoveryUri();
        java.lang.String str8 = openIdConnectRelyingPartyConfigurationBase4.getIdentifierClaim();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.OpenIdConnectRelyingPartyConfigurationBase openIdConnectRelyingPartyConfigurationBase10 = openIdConnectRelyingPartyConfigurationBase4.setDisplayName("multipart/form-data; boundary=****221f1588-b890-43c2-a3c8-0d77cfe54330****");
        java.lang.String str11 = openIdConnectRelyingPartyConfigurationBase4.IdentifierClaim;
        org.junit.Assert.assertNull(strList1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNotNull(openIdConnectRelyingPartyConfigurationBase4);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(openIdConnectRelyingPartyConfigurationBase10);
        org.junit.Assert.assertNull(str11);
    }

    @Test
    public void test53218() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest106.test53218");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ReferencePointPeriod referencePointPeriod0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ReferencePointPeriod();
        referencePointPeriod0.Comment = "/AQUARIUS/Provisioning/v1";
        java.time.Instant instant3 = referencePointPeriod0.AppliedTimeUtc;
        java.lang.String str4 = referencePointPeriod0.getReferencePointUniqueId();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ReferencePointPeriodBase referencePointPeriodBase6 = referencePointPeriod0.setIsMeasuredAgainstLocalAssumedDatum((java.lang.Boolean) true);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ReferencePointPeriod referencePointPeriod7 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ReferencePointPeriod();
        java.lang.String str8 = referencePointPeriod7.getMethod();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.MeasurementDirection measurementDirection9 = referencePointPeriod7.getMeasurementDirection();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ReferencePointPeriod referencePointPeriod11 = referencePointPeriod7.setAppliedByUser("yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSSSSSZZZZZ");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.LocationDatumPeriod locationDatumPeriod12 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.LocationDatumPeriod();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.LocationDatumPeriodBase locationDatumPeriodBase14 = locationDatumPeriod12.setComment("'.'SSSSSSS");
        java.lang.String str15 = locationDatumPeriod12.getAppliedByUser();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.LocationDatumPeriodBase locationDatumPeriodBase17 = locationDatumPeriod12.setComment("MaxInstant");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.MeasurementDirection measurementDirection18 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.MeasurementDirection.FromTopToBottom;
        locationDatumPeriodBase17.MeasurementDirection = measurementDirection18;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ReferencePointPeriodBase referencePointPeriodBase20 = referencePointPeriod11.setMeasurementDirection(measurementDirection18);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.MeasurementDirection measurementDirection21 = referencePointPeriod11.getMeasurementDirection();
        referencePointPeriod0.MeasurementDirection = measurementDirection21;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetActivities getActivities23 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetActivities();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse24 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary25 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary27 = dischargeSummary25.setPublish((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse28 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant29 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse30 = locationDescriptionListServiceResponse28.setNextToken(instant29);
        dischargeSummary25.MeasurementTime = instant29;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse32 = locationDescriptionListServiceResponse24.setNextToken(instant29);
        java.time.Instant instant33 = locationDescriptionListServiceResponse24.getNextToken();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetActivities getActivities34 = getActivities23.setToStartTime(instant33);
        java.lang.String str35 = getActivities34.getSort();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetActivities getActivities37 = getActivities34.setLimit((java.lang.Integer) 1);
        getActivities37.Cursor = "";
        getActivities37.Limit = 0;
        java.util.List<java.lang.String> strList42 = getActivities37.getMedia();
        java.time.Instant instant43 = getActivities37.ToStartTime;
        referencePointPeriod0.ValidFrom = instant43;
        referencePointPeriod0.Uncertainty = 10.0d;
        java.lang.String str47 = referencePointPeriod0.ReferencePointUniqueId;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ReferencePointPeriod referencePointPeriod49 = referencePointPeriod0.setReferencePointUniqueId("multipart/form-data; boundary=****9fadde69-3f13-40c4-a87c-0f3f51c2dd35****");
        java.lang.Double double50 = referencePointPeriod0.getElevation();
        org.junit.Assert.assertNull(instant3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNotNull(referencePointPeriodBase6);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNull(measurementDirection9);
        org.junit.Assert.assertNotNull(referencePointPeriod11);
        org.junit.Assert.assertNotNull(locationDatumPeriodBase14);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNotNull(locationDatumPeriodBase17);
        org.junit.Assert.assertTrue("'" + measurementDirection18 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.MeasurementDirection.FromTopToBottom + "'", measurementDirection18.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.MeasurementDirection.FromTopToBottom));
        org.junit.Assert.assertNotNull(referencePointPeriodBase20);
        org.junit.Assert.assertTrue("'" + measurementDirection21 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.MeasurementDirection.FromTopToBottom + "'", measurementDirection21.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.MeasurementDirection.FromTopToBottom));
        org.junit.Assert.assertNotNull(dischargeSummary27);
        org.junit.Assert.assertNotNull(instant29);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse30);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse32);
        org.junit.Assert.assertNotNull(instant33);
        org.junit.Assert.assertNotNull(getActivities34);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertNotNull(getActivities37);
        org.junit.Assert.assertNull(strList42);
        org.junit.Assert.assertNotNull(instant43);
        org.junit.Assert.assertNull(str47);
        org.junit.Assert.assertNotNull(referencePointPeriod49);
        org.junit.Assert.assertNull(double50);
    }

    @Test
    public void test53219() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest106.test53219");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Vertical vertical0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Vertical();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay1 = vertical0.SoundedDepth;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay2 = null;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Vertical vertical3 = vertical0.setSegmentDischarge(quantityWithDisplay2);
        java.lang.Boolean boolean4 = vertical0.getIsDischargeEstimated();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Vertical vertical6 = vertical0.setComments("MaxInstant");
        java.lang.Boolean boolean7 = vertical0.getIsSoundedDepthEstimated();
        org.junit.Assert.assertNull(quantityWithDisplay1);
        org.junit.Assert.assertNotNull(vertical3);
        org.junit.Assert.assertNull(boolean4);
        org.junit.Assert.assertNotNull(vertical6);
        org.junit.Assert.assertNull(boolean7);
    }

    @Test
    public void test53220() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest106.test53220");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabReportImportHistoryEvent labReportImportHistoryEvent0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabReportImportHistoryEvent();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEvent importHistoryEvent1 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEvent();
        java.time.OffsetDateTime offsetDateTime2 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEvent importHistoryEvent3 = importHistoryEvent1.setImportTime(offsetDateTime2);
        java.lang.String str4 = importHistoryEvent3.getTimeZoneOffset();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabReportImportHistoryEvent labReportImportHistoryEvent5 = labReportImportHistoryEvent0.setImportHistoryEvent(importHistoryEvent3);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabReport labReport6 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabReport();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Laboratory laboratory7 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Laboratory();
        laboratory7.Id = "MaxInstant";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Laboratory laboratory11 = laboratory7.setName("hi!:///AQUARIUS/Provisioning/v1");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabReport labReport12 = labReport6.setLaboratory(laboratory11);
        java.lang.String str13 = labReport12.getQcSummary();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabReport labReport15 = labReport12.setCustomId("http");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Laboratory laboratory16 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabReport labReport17 = labReport12.setLaboratory(laboratory16);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabReport labReport19 = labReport17.setQcSummary("/AQUARIUS/Acquisition/v2://9999-12-31T23:59:59.999Z");
        java.lang.String str20 = labReport19.getCaseNarrative();
        labReportImportHistoryEvent0.LabReport = labReport19;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEvent importHistoryEvent22 = labReportImportHistoryEvent0.getImportHistoryEvent();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabReport labReport23 = labReportImportHistoryEvent0.getLabReport();
        org.junit.Assert.assertNotNull(importHistoryEvent3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNotNull(labReportImportHistoryEvent5);
        org.junit.Assert.assertNotNull(laboratory11);
        org.junit.Assert.assertNotNull(labReport12);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNotNull(labReport15);
        org.junit.Assert.assertNotNull(labReport17);
        org.junit.Assert.assertNotNull(labReport19);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNotNull(importHistoryEvent22);
        org.junit.Assert.assertNotNull(labReport23);
    }

    @Test
    public void test53221() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest106.test53221");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostReflectedTimeSeries postReflectedTimeSeries0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostReflectedTimeSeries();
        postReflectedTimeSeries0.Parameter = "0001-01-01T00:00:00.000Z";
        java.lang.String str3 = postReflectedTimeSeries0.Description;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.InterpolationType interpolationType4 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.InterpolationType.PrecedingTotals;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostReflectedTimeSeries postReflectedTimeSeries5 = postReflectedTimeSeries0.setInterpolationType(interpolationType4);
        java.lang.String str6 = postReflectedTimeSeries5.Parameter;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutTimeSeries putTimeSeries7 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutTimeSeries();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutTimeSeries putTimeSeries9 = putTimeSeries7.setDescription("hi!");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutTimeSeries putTimeSeries11 = putTimeSeries7.setComment("https");
        putTimeSeries11.SubLocationIdentifier = "https";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Location location14 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Location();
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.AppliedTag> appliedTagList15 = location14.Tags;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Location location17 = location14.setUniqueId("MaxInstant");
        java.lang.String str18 = location14.getLocationPath();
        java.lang.String str19 = location14.getUtcOffset();
        location14.Publish = false;
        java.lang.Boolean boolean22 = location14.Publish;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostStatisticalDerivedTimeSeries postStatisticalDerivedTimeSeries23 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostStatisticalDerivedTimeSeries();
        java.lang.String str24 = postStatisticalDerivedTimeSeries23.ComputationPeriodIdentifier;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostCalculatedDerivedTimeSeries postCalculatedDerivedTimeSeries25 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostCalculatedDerivedTimeSeries();
        java.util.ArrayList<java.lang.String> strList26 = postCalculatedDerivedTimeSeries25.TimeSeriesUniqueIds;
        java.lang.String str27 = postCalculatedDerivedTimeSeries25.Label;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostLocation postLocation28 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostLocation();
        postLocation28.Description = "hi!";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeValue[] extendedAttributeValueArray31 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeValue[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeValue> extendedAttributeValueList32 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeValue>();
        boolean boolean33 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeValue>) extendedAttributeValueList32, extendedAttributeValueArray31);
        postLocation28.ExtendedAttributeValues = extendedAttributeValueList32;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostCalculatedDerivedTimeSeries postCalculatedDerivedTimeSeries35 = postCalculatedDerivedTimeSeries25.setExtendedAttributeValues((java.util.List<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeValue>) extendedAttributeValueList32);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostStatisticalDerivedTimeSeries postStatisticalDerivedTimeSeries36 = postStatisticalDerivedTimeSeries23.setExtendedAttributeValues((java.util.List<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeValue>) extendedAttributeValueList32);
        location14.ExtendedAttributeValues = extendedAttributeValueList32;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutTimeSeries putTimeSeries38 = putTimeSeries11.setExtendedAttributeValues((java.util.List<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeValue>) extendedAttributeValueList32);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostReflectedTimeSeries postReflectedTimeSeries39 = postReflectedTimeSeries5.setExtendedAttributeValues((java.util.List<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeValue>) extendedAttributeValueList32);
        postReflectedTimeSeries5.Publish = false;
        java.lang.String str42 = postReflectedTimeSeries5.getUnit();
        postReflectedTimeSeries5.ComputationPeriodIdentifier = "multipart/form-data; boundary=****1844e1de-1bae-48cf-aab8-ac5571d6efc7****";
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertTrue("'" + interpolationType4 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.InterpolationType.PrecedingTotals + "'", interpolationType4.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.InterpolationType.PrecedingTotals));
        org.junit.Assert.assertNotNull(postReflectedTimeSeries5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "0001-01-01T00:00:00.000Z" + "'", str6, "0001-01-01T00:00:00.000Z");
        org.junit.Assert.assertNotNull(putTimeSeries9);
        org.junit.Assert.assertNotNull(putTimeSeries11);
        org.junit.Assert.assertNull(appliedTagList15);
        org.junit.Assert.assertNotNull(location17);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertEquals("'" + boolean22 + "' != '" + false + "'", boolean22, false);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNull(strList26);
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertNotNull(extendedAttributeValueArray31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(postCalculatedDerivedTimeSeries35);
        org.junit.Assert.assertNotNull(postStatisticalDerivedTimeSeries36);
        org.junit.Assert.assertNotNull(putTimeSeries38);
        org.junit.Assert.assertNotNull(postReflectedTimeSeries39);
        org.junit.Assert.assertNull(str42);
    }

    @Test
    public void test53222() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest106.test53222");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedPoint timeAlignedPoint0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedPoint();
        timeAlignedPoint0.Method9 = "multipart/form-data; boundary=****7eff1774-b6b0-471a-961c-156c64359366****";
        timeAlignedPoint0.DisplayValue9 = "";
        java.lang.String str5 = timeAlignedPoint0.getApprovalName4();
        java.lang.Long long6 = timeAlignedPoint0.getApprovalLevel7();
        java.lang.String str7 = timeAlignedPoint0.Method7;
        java.lang.Long long8 = timeAlignedPoint0.ApprovalLevel2;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedPoint timeAlignedPoint10 = timeAlignedPoint0.setApprovalName4("multipart/form-data; boundary=****7eff1774-b6b0-471a-961c-156c64359366****");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedPoint timeAlignedPoint12 = timeAlignedPoint0.setGradeName8("http://MaxDurationhttp/json/reply/Integer://multipart/form-data; boundary=****930a219d-85cf-428e-8cad-9442e08cea99****");
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(long6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(long8);
        org.junit.Assert.assertNotNull(timeAlignedPoint10);
        org.junit.Assert.assertNotNull(timeAlignedPoint12);
    }

    @Test
    public void test53223() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest106.test53223");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RoleFlattened roleFlattened0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RoleFlattened();
        roleFlattened0.CanAddOrRemoveLocations = false;
        java.lang.Boolean boolean3 = roleFlattened0.CanEditAppendConfigurations;
        java.lang.String str4 = roleFlattened0.getName();
        java.lang.Boolean boolean5 = roleFlattened0.CanEditLocationDetails;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RoleFlattenedBase roleFlattenedBase7 = roleFlattened0.setCanAssignUserRoles((java.lang.Boolean) true);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RoleFlattenedBase roleFlattenedBase9 = roleFlattenedBase7.setCanAddData((java.lang.Boolean) true);
        java.lang.Boolean boolean10 = roleFlattenedBase7.CanEditLocationDetails;
        org.junit.Assert.assertNull(boolean3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(boolean5);
        org.junit.Assert.assertNotNull(roleFlattenedBase7);
        org.junit.Assert.assertNotNull(roleFlattenedBase9);
        org.junit.Assert.assertNull(boolean10);
    }

    @Test
    public void test53224() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest106.test53224");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.DeleteStandardDatum deleteStandardDatum0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.DeleteStandardDatum();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.DeleteStandardDatum deleteStandardDatum2 = deleteStandardDatum0.setIdentifier("http://MaxDurationhttp");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.DeleteStandardDatum deleteStandardDatum4 = deleteStandardDatum0.setIdentifier("multipart/form-data; boundary=****231224c4-98ce-4e30-bd65-1d25287c4abe****");
        java.lang.String str5 = deleteStandardDatum0.Identifier;
        deleteStandardDatum0.Identifier = "-PT87591240H";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.DeleteStandardDatum deleteStandardDatum9 = deleteStandardDatum0.setIdentifier("yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ");
        java.lang.String str10 = deleteStandardDatum0.getIdentifier();
        org.junit.Assert.assertNotNull(deleteStandardDatum2);
        org.junit.Assert.assertNotNull(deleteStandardDatum4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "multipart/form-data; boundary=****231224c4-98ce-4e30-bd65-1d25287c4abe****" + "'", str5, "multipart/form-data; boundary=****231224c4-98ce-4e30-bd65-1d25287c4abe****");
        org.junit.Assert.assertNotNull(deleteStandardDatum9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ" + "'", str10, "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ");
    }

    @Test
    public void test53225() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest106.test53225");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetFieldVisits getFieldVisits0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetFieldVisits();
        java.util.List<java.lang.String> strList1 = getFieldVisits0.getSamplingLocationIds();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags2 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray6 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList7 = new java.util.ArrayList<java.lang.String>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList7, strArray6);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags9 = putLocationTags2.setTagUniqueIds(strList7);
        java.util.ArrayList<java.lang.String> strList10 = putLocationTags9.TagUniqueIds;
        getFieldVisits0.ScheduleIds = strList10;
        java.lang.Integer int12 = getFieldVisits0.Limit;
        java.util.List<java.lang.String> strList13 = getFieldVisits0.getFieldTripIds();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_14 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray16 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList17 = new java.util.ArrayList<java.lang.String>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList17, strArray16);
        getObservationsV2_14.SpecimenIds = strList17;
        getFieldVisits0.Search = strList17;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetFieldVisits getFieldVisits22 = getFieldVisits0.setCursor("");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObservation importItemObservation23 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObservation();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest24 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest();
        java.lang.Object obj25 = timeAlignedDataServiceRequest24.getResponseType();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse26 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant27 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse28 = locationDescriptionListServiceResponse26.setNextToken(instant27);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest29 = timeAlignedDataServiceRequest24.setQueryFrom(instant27);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags30 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray34 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList35 = new java.util.ArrayList<java.lang.String>();
        boolean boolean36 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList35, strArray34);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags37 = putLocationTags30.setTagUniqueIds(strList35);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest38 = timeAlignedDataServiceRequest24.setTimeSeriesOutputUnitIds(strList35);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObservation importItemObservation39 = importItemObservation23.setFields((java.util.List<java.lang.String>) strList35);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetFieldVisits getFieldVisits40 = getFieldVisits22.setFieldTripIds((java.util.List<java.lang.String>) strList35);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemTaxon importItemTaxon41 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemTaxon();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemTaxon importItemTaxon43 = importItemTaxon41.setRowId("/AQUARIUS/Provisioning/v1");
        java.lang.String str44 = importItemTaxon43.Input;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemTaxon importItemTaxon46 = importItemTaxon43.setInput("MinDuration");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutBulkEditResultGradesV2 putBulkEditResultGradesV2_47 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutBulkEditResultGradesV2();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RoleFlattened roleFlattened48 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RoleFlattened();
        java.lang.Boolean boolean49 = roleFlattened48.CanRemoveFieldVisits;
        roleFlattened48.Name = "MaxInstant";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationType putLocationType52 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationType();
        java.lang.String str53 = putLocationType52.Description;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_54 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray57 = new java.lang.String[] { "", "" };
        java.util.ArrayList<java.lang.String> strList58 = new java.util.ArrayList<java.lang.String>();
        boolean boolean59 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList58, strArray57);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_60 = getObservationsV2_54.setDataClassifications((java.util.List<java.lang.String>) strList58);
        getObservationsV2_60.DepthUnitCustomId = "hi!";
        java.lang.String str63 = getObservationsV2_60.CustomId;
        java.util.List<java.lang.String> strList64 = getObservationsV2_60.getSearch();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_65 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray67 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList68 = new java.util.ArrayList<java.lang.String>();
        boolean boolean69 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList68, strArray67);
        getObservationsV2_65.SpecimenIds = strList68;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags71 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray75 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList76 = new java.util.ArrayList<java.lang.String>();
        boolean boolean77 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList76, strArray75);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags78 = putLocationTags71.setTagUniqueIds(strList76);
        getObservationsV2_65.QualityControlTypes = strList76;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_80 = getObservationsV2_60.setMedia((java.util.List<java.lang.String>) strList76);
        putLocationType52.ExtendedAttributeDefinitionIds = strList76;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RoleFlattenedBase roleFlattenedBase82 = roleFlattened48.setRoleApprovalTransitions(strList76);
        putBulkEditResultGradesV2_47.ResultGrades = strList76;
        importItemTaxon46.WarningMessages = strList76;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetFieldVisits getFieldVisits85 = getFieldVisits40.setPlanningStatuses((java.util.List<java.lang.String>) strList76);
        java.util.List<java.lang.String> strList86 = getFieldVisits40.SamplingPlanIds;
        java.util.List<java.lang.String> strList87 = getFieldVisits40.getSamplingPlanIds();
        org.junit.Assert.assertNull(strList1);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(putLocationTags9);
        org.junit.Assert.assertNotNull(strList10);
        org.junit.Assert.assertNull(int12);
        org.junit.Assert.assertNull(strList13);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(getFieldVisits22);
        org.junit.Assert.assertNotNull(obj25);
        org.junit.Assert.assertEquals(obj25.toString(), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj25), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj25), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertNotNull(instant27);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse28);
        org.junit.Assert.assertNotNull(timeAlignedDataServiceRequest29);
        org.junit.Assert.assertNotNull(strArray34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(putLocationTags37);
        org.junit.Assert.assertNotNull(timeAlignedDataServiceRequest38);
        org.junit.Assert.assertNotNull(importItemObservation39);
        org.junit.Assert.assertNotNull(getFieldVisits40);
        org.junit.Assert.assertNotNull(importItemTaxon43);
        org.junit.Assert.assertNull(str44);
        org.junit.Assert.assertNotNull(importItemTaxon46);
        org.junit.Assert.assertNull(boolean49);
        org.junit.Assert.assertNull(str53);
        org.junit.Assert.assertNotNull(strArray57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(getObservationsV2_60);
        org.junit.Assert.assertNull(str63);
        org.junit.Assert.assertNull(strList64);
        org.junit.Assert.assertNotNull(strArray67);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertNotNull(strArray75);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertNotNull(putLocationTags78);
        org.junit.Assert.assertNotNull(getObservationsV2_80);
        org.junit.Assert.assertNotNull(roleFlattenedBase82);
        org.junit.Assert.assertNotNull(getFieldVisits85);
        org.junit.Assert.assertNull(strList86);
        org.junit.Assert.assertNull(strList87);
    }

    @Test
    public void test53226() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest106.test53226");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutQualityCode putQualityCode0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutQualityCode();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutQualityCode putQualityCode2 = putQualityCode0.setColor("yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutQualityCode putQualityCode4 = putQualityCode2.setDescription("yyyy'-'MM'-'dd'T'HH':'mm':'ss");
        java.lang.Integer int5 = putQualityCode4.GradeCode;
        java.lang.String str6 = putQualityCode4.DisplayName;
        java.lang.String str7 = putQualityCode4.Description;
        org.junit.Assert.assertNotNull(putQualityCode2);
        org.junit.Assert.assertNotNull(putQualityCode4);
        org.junit.Assert.assertNull(int5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "yyyy'-'MM'-'dd'T'HH':'mm':'ss" + "'", str7, "yyyy'-'MM'-'dd'T'HH':'mm':'ss");
    }

    @Test
    public void test53227() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest106.test53227");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.GetLocationReferencePoints getLocationReferencePoints0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.GetLocationReferencePoints();
        java.lang.String str1 = getLocationReferencePoints0.LocationUniqueId;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.GetLocationReferencePoints getLocationReferencePoints3 = getLocationReferencePoints0.setLocationUniqueId("MinDuration");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.GetLocationReferencePoints getLocationReferencePoints5 = getLocationReferencePoints3.setLocationUniqueId("/AQUARIUS");
        java.lang.String str6 = getLocationReferencePoints3.getLocationUniqueId();
        getLocationReferencePoints3.LocationUniqueId = "-PT87591240H";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.GetLocationReferencePoints getLocationReferencePoints10 = getLocationReferencePoints3.setLocationUniqueId("");
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(getLocationReferencePoints3);
        org.junit.Assert.assertNotNull(getLocationReferencePoints5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "/AQUARIUS" + "'", str6, "/AQUARIUS");
        org.junit.Assert.assertNotNull(getLocationReferencePoints10);
    }

    @Test
    public void test53228() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest106.test53228");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedPoint timeAlignedPoint0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedPoint();
        timeAlignedPoint0.Method9 = "multipart/form-data; boundary=****7eff1774-b6b0-471a-961c-156c64359366****";
        timeAlignedPoint0.DisplayValue9 = "";
        java.lang.String str5 = timeAlignedPoint0.getApprovalName4();
        java.lang.Long long6 = timeAlignedPoint0.getGradeCode3();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedPoint timeAlignedPoint8 = timeAlignedPoint0.setGradeCode2((java.lang.Long) 1L);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedPoint timeAlignedPoint10 = timeAlignedPoint8.setNumericValue4((java.lang.Double) 0.0d);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedPoint timeAlignedPoint12 = timeAlignedPoint8.setGradeCode9((java.lang.Long) 0L);
        java.lang.String str13 = timeAlignedPoint12.getDisplayValue9();
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(long6);
        org.junit.Assert.assertNotNull(timeAlignedPoint8);
        org.junit.Assert.assertNotNull(timeAlignedPoint10);
        org.junit.Assert.assertNotNull(timeAlignedPoint12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
    }

    @Test
    public void test53229() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest106.test53229");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostShippingContainer postShippingContainer0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostShippingContainer();
        java.lang.String str1 = postShippingContainer0.getCustomId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostShippingContainer postShippingContainer3 = postShippingContainer0.setCustomId("MinDuration");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostShippingContainer postShippingContainer5 = postShippingContainer0.setComment("9999-12-31T23:59:59.999Z");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes6 = postShippingContainer0.AuditAttributes;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostShippingContainer postShippingContainer8 = postShippingContainer0.setComment("yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSSSSSZZZZZ");
        java.lang.String str9 = postShippingContainer0.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutFieldVisit putFieldVisit10 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutFieldVisit();
        putFieldVisit10.Notes = "MinDuration";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutFieldVisit putFieldVisit13 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutFieldVisit();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity[] plannedActivityArray14 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity> plannedActivityList15 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity>) plannedActivityList15, plannedActivityArray14);
        putFieldVisit13.PlannedActivities = plannedActivityList15;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutFieldVisit putFieldVisit18 = putFieldVisit10.setPlannedActivities((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity>) plannedActivityList15);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails19 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails21 = labResultDetails19.setAnalysisComment("/AQUARIUS/Acquisition/v2");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes22 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails23 = labResultDetails21.setAuditAttributes(auditAttributes22);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutFieldVisit putFieldVisit24 = putFieldVisit10.setAuditAttributes(auditAttributes22);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty observedProperty25 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty();
        observedProperty25.CasNumber = "MinDuration";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutDetectioncondition putDetectioncondition28 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutDetectioncondition();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes29 = putDetectioncondition28.getAuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutDetectioncondition putDetectioncondition31 = putDetectioncondition28.setCustomId("http");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivity samplingPlanPlannedActivity32 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivity();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes33 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivity samplingPlanPlannedActivity34 = samplingPlanPlannedActivity32.setAuditAttributes(auditAttributes33);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes35 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes37 = auditAttributes35.setCreationUserProfileId("'.'SSSSSSS");
        samplingPlanPlannedActivity34.AuditAttributes = auditAttributes35;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes39 = samplingPlanPlannedActivity34.AuditAttributes;
        putDetectioncondition28.AuditAttributes = auditAttributes39;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty observedProperty41 = observedProperty25.setAuditAttributes(auditAttributes39);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutFieldVisit putFieldVisit42 = putFieldVisit10.setAuditAttributes(auditAttributes39);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostShippingContainer postShippingContainer43 = postShippingContainer0.setAuditAttributes(auditAttributes39);
        java.lang.String str44 = postShippingContainer43.Comment;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostShippingContainer postShippingContainer46 = postShippingContainer43.setCustomId("hi!:///AQUARIUS/Provisioning/v1");
        java.lang.String str47 = postShippingContainer46.getCustomId();
        java.lang.String str48 = postShippingContainer46.TrackingId;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(postShippingContainer3);
        org.junit.Assert.assertNotNull(postShippingContainer5);
        org.junit.Assert.assertNull(auditAttributes6);
        org.junit.Assert.assertNotNull(postShippingContainer8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(plannedActivityArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(putFieldVisit18);
        org.junit.Assert.assertNotNull(labResultDetails21);
        org.junit.Assert.assertNotNull(labResultDetails23);
        org.junit.Assert.assertNotNull(putFieldVisit24);
        org.junit.Assert.assertNull(auditAttributes29);
        org.junit.Assert.assertNotNull(putDetectioncondition31);
        org.junit.Assert.assertNotNull(samplingPlanPlannedActivity34);
        org.junit.Assert.assertNotNull(auditAttributes37);
        org.junit.Assert.assertNotNull(auditAttributes39);
        org.junit.Assert.assertNotNull(observedProperty41);
        org.junit.Assert.assertNotNull(putFieldVisit42);
        org.junit.Assert.assertNotNull(postShippingContainer43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSSSSSZZZZZ" + "'", str44, "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSSSSSZZZZZ");
        org.junit.Assert.assertNotNull(postShippingContainer46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "hi!:///AQUARIUS/Provisioning/v1" + "'", str47, "hi!:///AQUARIUS/Provisioning/v1");
        org.junit.Assert.assertNull(str48);
    }

    @Test
    public void test53230() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest106.test53230");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedPoint timeAlignedPoint0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedPoint();
        timeAlignedPoint0.Method9 = "multipart/form-data; boundary=****7eff1774-b6b0-471a-961c-156c64359366****";
        timeAlignedPoint0.DisplayValue9 = "";
        java.lang.String str5 = timeAlignedPoint0.getApprovalName4();
        timeAlignedPoint0.ApprovalLevel2 = 0L;
        timeAlignedPoint0.GradeCode1 = 1L;
        java.lang.String str10 = timeAlignedPoint0.ApprovalName10;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedPoint timeAlignedPoint12 = timeAlignedPoint0.setDisplayValue2("multipart/form-data; boundary=****d9f5d551-383a-4365-87fd-ae7094da6f3b****");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedPoint timeAlignedPoint14 = timeAlignedPoint12.setApprovalLevel8((java.lang.Long) 0L);
        java.lang.String str15 = timeAlignedPoint14.getGradeName5();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedPoint timeAlignedPoint17 = timeAlignedPoint14.setApprovalLevel6((java.lang.Long) (-1L));
        java.lang.String str18 = timeAlignedPoint14.Method4;
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNotNull(timeAlignedPoint12);
        org.junit.Assert.assertNotNull(timeAlignedPoint14);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNotNull(timeAlignedPoint17);
        org.junit.Assert.assertNull(str18);
    }

    @Test
    public void test53231() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest106.test53231");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationMonitoringMethod locationMonitoringMethod0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationMonitoringMethod();
        java.lang.String str1 = locationMonitoringMethod0.getModel();
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TagMetadata> tagMetadataList2 = null;
        locationMonitoringMethod0.Tags = tagMetadataList2;
        java.lang.String str4 = locationMonitoringMethod0.getParameterUniqueId();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationMonitoringMethod locationMonitoringMethod6 = locationMonitoringMethod0.setMethod("'.'SSSSSSS");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationMonitoringMethod locationMonitoringMethod8 = locationMonitoringMethod0.setName("https");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationMonitoringMethod locationMonitoringMethod10 = locationMonitoringMethod8.setUnitName("'.'SSSSSSS");
        java.lang.String str11 = locationMonitoringMethod8.getLocationIdentifier();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationMonitoringMethod locationMonitoringMethod13 = locationMonitoringMethod8.setParameterUniqueId("http://MaxDurationhttp/json/reply/ArrayList");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationMonitoringMethod locationMonitoringMethod15 = locationMonitoringMethod8.setSubLocationIdentifier("multipart/form-data; boundary=****f642a130-eb6d-4fb6-a1a4-7c7216ab119b****");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationMonitoringMethod locationMonitoringMethod17 = locationMonitoringMethod15.setSerialNumber("****ee0ec537-fde4-45ee-9c35-68c37cf65c1c****");
        java.lang.String str18 = locationMonitoringMethod15.UniqueId;
        locationMonitoringMethod15.ParameterId = "****231224c4-98ce-4e30-bd65-1d25287c4abe****";
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNotNull(locationMonitoringMethod6);
        org.junit.Assert.assertNotNull(locationMonitoringMethod8);
        org.junit.Assert.assertNotNull(locationMonitoringMethod10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNotNull(locationMonitoringMethod13);
        org.junit.Assert.assertNotNull(locationMonitoringMethod15);
        org.junit.Assert.assertNotNull(locationMonitoringMethod17);
        org.junit.Assert.assertNull(str18);
    }

    @Test
    public void test53232() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest106.test53232");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethodSimple analysisMethodSimple0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethodSimple();
        java.lang.String str1 = analysisMethodSimple0.getId();
        analysisMethodSimple0.Id = "yyyy'-'MM'-'dd'T'HH':'mm':'ss";
        java.lang.String str4 = analysisMethodSimple0.getId();
        java.lang.String str5 = analysisMethodSimple0.getDescription();
        java.lang.String str6 = analysisMethodSimple0.getId();
        java.lang.String str7 = analysisMethodSimple0.getContext();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "yyyy'-'MM'-'dd'T'HH':'mm':'ss" + "'", str4, "yyyy'-'MM'-'dd'T'HH':'mm':'ss");
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "yyyy'-'MM'-'dd'T'HH':'mm':'ss" + "'", str6, "yyyy'-'MM'-'dd'T'HH':'mm':'ss");
        org.junit.Assert.assertNull(str7);
    }

    @Test
    public void test53233() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest106.test53233");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationMinimal observationMinimal0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationMinimal();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenNestedInActivity specimenNestedInActivity1 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationMinimal observationMinimal2 = observationMinimal0.setSpecimen(specimenNestedInActivity1);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty observedProperty3 = observationMinimal0.ObservedProperty;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.TaxonomicResult taxonomicResult4 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.TaxonomicResult();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Taxon taxon5 = taxonomicResult4.Taxon;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Taxon taxon6 = null;
        taxonomicResult4.Taxon = taxon6;
        observationMinimal0.TaxonomicResult = taxonomicResult4;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Taxon taxon9 = taxonomicResult4.getTaxon();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemTaxon importItemTaxon10 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemTaxon();
        java.util.List<java.lang.String> strList11 = importItemTaxon10.getWarningMessages();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Taxon taxon12 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemTaxon importItemTaxon13 = importItemTaxon10.setItem(taxon12);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemTaxon importItemTaxon14 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemTaxon();
        java.util.List<java.lang.String> strList15 = importItemTaxon14.getWarningMessages();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Taxon taxon16 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemTaxon importItemTaxon17 = importItemTaxon14.setItem(taxon16);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostCalculatedDerivedTimeSeries postCalculatedDerivedTimeSeries18 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostCalculatedDerivedTimeSeries();
        java.lang.String str19 = postCalculatedDerivedTimeSeries18.LocationUniqueId;
        java.util.List<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeValue> extendedAttributeValueList20 = postCalculatedDerivedTimeSeries18.getExtendedAttributeValues();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemTaxon importItemTaxon21 = importItemTaxon17.setErrors((java.lang.Object) postCalculatedDerivedTimeSeries18);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObject importItemObject22 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObject();
        java.util.List<java.lang.String> strList23 = importItemObject22.getWarningMessages();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportChangeItem[] importChangeItemArray24 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportChangeItem[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportChangeItem> importChangeItemList25 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportChangeItem>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportChangeItem>) importChangeItemList25, importChangeItemArray24);
        importItemObject22.ItemComparison = importChangeItemList25;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags28 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray32 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList33 = new java.util.ArrayList<java.lang.String>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList33, strArray32);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags35 = putLocationTags28.setTagUniqueIds(strList33);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObject importItemObject36 = importItemObject22.setExistingItem((java.lang.Object) putLocationTags28);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.OpenIdConnectUser openIdConnectUser37 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.OpenIdConnectUser();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.OpenIdConnectUser openIdConnectUser39 = openIdConnectUser37.setIdentifier("");
        java.lang.Boolean boolean40 = openIdConnectUser39.CanConfigureSystem;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObject importItemObject41 = importItemObject22.setErrors((java.lang.Object) openIdConnectUser39);
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportChangeItem> importChangeItemList42 = importItemObject41.ItemComparison;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemTaxon importItemTaxon43 = importItemTaxon21.setItemComparison(importChangeItemList42);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemTaxon importItemTaxon44 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemTaxon();
        java.util.List<java.lang.String> strList45 = importItemTaxon44.getWarningMessages();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Taxon taxon46 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemTaxon importItemTaxon47 = importItemTaxon44.setItem(taxon46);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostCalculatedDerivedTimeSeries postCalculatedDerivedTimeSeries48 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostCalculatedDerivedTimeSeries();
        java.lang.String str49 = postCalculatedDerivedTimeSeries48.LocationUniqueId;
        java.util.List<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeValue> extendedAttributeValueList50 = postCalculatedDerivedTimeSeries48.getExtendedAttributeValues();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemTaxon importItemTaxon51 = importItemTaxon47.setErrors((java.lang.Object) postCalculatedDerivedTimeSeries48);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Taxon taxon52 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Taxon();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemTaxon importItemTaxon53 = importItemTaxon47.setExistingItem(taxon52);
        importItemTaxon21.Item = taxon52;
        taxon52.Source = "MaxDuration";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemTaxon importItemTaxon57 = importItemTaxon10.setItem(taxon52);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.TaxonomyLevel taxonomyLevel58 = taxon52.getTaxonomyLevel();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.TaxonomicResult taxonomicResult59 = taxonomicResult4.setTaxon(taxon52);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemTaxon importItemTaxon60 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemTaxon();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemTaxon importItemTaxon62 = importItemTaxon60.setRowId("/AQUARIUS/Provisioning/v1");
        java.lang.String str63 = importItemTaxon62.Input;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemTaxon importItemTaxon65 = importItemTaxon62.setInput("MinDuration");
        java.lang.Object obj66 = importItemTaxon65.getErrors();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemStatusType importItemStatusType67 = importItemTaxon65.getStatus();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Taxon taxon68 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Taxon();
        importItemTaxon65.ExistingItem = taxon68;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes70 = taxon68.getAuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Taxon taxon72 = taxon68.setItisTsn("multipart/form-data; boundary=****f2ce0d54-dac7-4cd0-b74f-1024089261f9****");
        java.lang.String str73 = taxon72.ItisTsn;
        java.lang.String str74 = taxon72.CommonName;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.TaxonomicResult taxonomicResult75 = taxonomicResult4.setTaxon(taxon72);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Taxon taxon76 = taxonomicResult75.getTaxon();
        org.junit.Assert.assertNotNull(observationMinimal2);
        org.junit.Assert.assertNull(observedProperty3);
        org.junit.Assert.assertNull(taxon5);
        org.junit.Assert.assertNull(taxon9);
        org.junit.Assert.assertNull(strList11);
        org.junit.Assert.assertNotNull(importItemTaxon13);
        org.junit.Assert.assertNull(strList15);
        org.junit.Assert.assertNotNull(importItemTaxon17);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertNull(extendedAttributeValueList20);
        org.junit.Assert.assertNotNull(importItemTaxon21);
        org.junit.Assert.assertNull(strList23);
        org.junit.Assert.assertNotNull(importChangeItemArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(putLocationTags35);
        org.junit.Assert.assertNotNull(importItemObject36);
        org.junit.Assert.assertNotNull(openIdConnectUser39);
        org.junit.Assert.assertNull(boolean40);
        org.junit.Assert.assertNotNull(importItemObject41);
        org.junit.Assert.assertNotNull(importChangeItemList42);
        org.junit.Assert.assertNotNull(importItemTaxon43);
        org.junit.Assert.assertNull(strList45);
        org.junit.Assert.assertNotNull(importItemTaxon47);
        org.junit.Assert.assertNull(str49);
        org.junit.Assert.assertNull(extendedAttributeValueList50);
        org.junit.Assert.assertNotNull(importItemTaxon51);
        org.junit.Assert.assertNotNull(importItemTaxon53);
        org.junit.Assert.assertNotNull(importItemTaxon57);
        org.junit.Assert.assertNull(taxonomyLevel58);
        org.junit.Assert.assertNotNull(taxonomicResult59);
        org.junit.Assert.assertNotNull(importItemTaxon62);
        org.junit.Assert.assertNull(str63);
        org.junit.Assert.assertNotNull(importItemTaxon65);
        org.junit.Assert.assertNull(obj66);
        org.junit.Assert.assertNull(importItemStatusType67);
        org.junit.Assert.assertNull(auditAttributes70);
        org.junit.Assert.assertNotNull(taxon72);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "multipart/form-data; boundary=****f2ce0d54-dac7-4cd0-b74f-1024089261f9****" + "'", str73, "multipart/form-data; boundary=****f2ce0d54-dac7-4cd0-b74f-1024089261f9****");
        org.junit.Assert.assertNull(str74);
        org.junit.Assert.assertNotNull(taxonomicResult75);
        org.junit.Assert.assertNotNull(taxon76);
    }

    @Test
    public void test53234() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest106.test53234");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest();
        java.lang.Object obj1 = timeAlignedDataServiceRequest0.getResponseType();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse2 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant3 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse4 = locationDescriptionListServiceResponse2.setNextToken(instant3);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest5 = timeAlignedDataServiceRequest0.setQueryFrom(instant3);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags6 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray10 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList11 = new java.util.ArrayList<java.lang.String>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList11, strArray10);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags13 = putLocationTags6.setTagUniqueIds(strList11);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest14 = timeAlignedDataServiceRequest0.setTimeSeriesOutputUnitIds(strList11);
        timeAlignedDataServiceRequest14.IncludeGapMarkers = false;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutQualifierGroup putQualifierGroup17 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutQualifierGroup();
        putQualifierGroup17.Identifier = "";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_20 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray22 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList23 = new java.util.ArrayList<java.lang.String>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList23, strArray22);
        getObservationsV2_20.SpecimenIds = strList23;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags26 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray30 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList31 = new java.util.ArrayList<java.lang.String>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList31, strArray30);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags33 = putLocationTags26.setTagUniqueIds(strList31);
        getObservationsV2_20.QualityControlTypes = strList31;
        java.util.List<java.lang.String> strList35 = getObservationsV2_20.getAnalyticalGroupIds();
        java.util.List<java.lang.String> strList36 = getObservationsV2_20.DataClassifications;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObject importItemObject37 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObject();
        java.util.List<java.lang.String> strList38 = importItemObject37.getWarningMessages();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportChangeItem[] importChangeItemArray39 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportChangeItem[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportChangeItem> importChangeItemList40 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportChangeItem>();
        boolean boolean41 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportChangeItem>) importChangeItemList40, importChangeItemArray39);
        importItemObject37.ItemComparison = importChangeItemList40;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags43 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray47 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList48 = new java.util.ArrayList<java.lang.String>();
        boolean boolean49 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList48, strArray47);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags50 = putLocationTags43.setTagUniqueIds(strList48);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObject importItemObject51 = importItemObject37.setExistingItem((java.lang.Object) putLocationTags43);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemStatusType importItemStatusType52 = importItemObject51.Status;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutBulkEditResultGradesV2 putBulkEditResultGradesV2_53 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutBulkEditResultGradesV2();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RoleFlattened roleFlattened54 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RoleFlattened();
        java.lang.Boolean boolean55 = roleFlattened54.CanRemoveFieldVisits;
        roleFlattened54.Name = "MaxInstant";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationType putLocationType58 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationType();
        java.lang.String str59 = putLocationType58.Description;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_60 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray63 = new java.lang.String[] { "", "" };
        java.util.ArrayList<java.lang.String> strList64 = new java.util.ArrayList<java.lang.String>();
        boolean boolean65 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList64, strArray63);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_66 = getObservationsV2_60.setDataClassifications((java.util.List<java.lang.String>) strList64);
        getObservationsV2_66.DepthUnitCustomId = "hi!";
        java.lang.String str69 = getObservationsV2_66.CustomId;
        java.util.List<java.lang.String> strList70 = getObservationsV2_66.getSearch();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_71 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray73 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList74 = new java.util.ArrayList<java.lang.String>();
        boolean boolean75 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList74, strArray73);
        getObservationsV2_71.SpecimenIds = strList74;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags77 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray81 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList82 = new java.util.ArrayList<java.lang.String>();
        boolean boolean83 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList82, strArray81);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags84 = putLocationTags77.setTagUniqueIds(strList82);
        getObservationsV2_71.QualityControlTypes = strList82;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_86 = getObservationsV2_66.setMedia((java.util.List<java.lang.String>) strList82);
        putLocationType58.ExtendedAttributeDefinitionIds = strList82;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RoleFlattenedBase roleFlattenedBase88 = roleFlattened54.setRoleApprovalTransitions(strList82);
        putBulkEditResultGradesV2_53.ResultGrades = strList82;
        importItemObject51.WarningMessages = strList82;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_91 = getObservationsV2_20.setSamplingLocationGroupIds((java.util.List<java.lang.String>) strList82);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutQualifierGroup putQualifierGroup92 = putQualifierGroup17.setQualifierCodeList(strList82);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest93 = timeAlignedDataServiceRequest14.setTimeSeriesOutputUnitIds(strList82);
        java.lang.Double double94 = timeAlignedDataServiceRequest93.UtcOffset;
        java.lang.Boolean boolean95 = timeAlignedDataServiceRequest93.isApplyRounding();
        java.time.Instant instant96 = timeAlignedDataServiceRequest93.QueryTo;
        org.junit.Assert.assertNotNull(obj1);
        org.junit.Assert.assertEquals(obj1.toString(), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj1), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj1), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertNotNull(instant3);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse4);
        org.junit.Assert.assertNotNull(timeAlignedDataServiceRequest5);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(putLocationTags13);
        org.junit.Assert.assertNotNull(timeAlignedDataServiceRequest14);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(putLocationTags33);
        org.junit.Assert.assertNull(strList35);
        org.junit.Assert.assertNull(strList36);
        org.junit.Assert.assertNull(strList38);
        org.junit.Assert.assertNotNull(importChangeItemArray39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(putLocationTags50);
        org.junit.Assert.assertNotNull(importItemObject51);
        org.junit.Assert.assertNull(importItemStatusType52);
        org.junit.Assert.assertNull(boolean55);
        org.junit.Assert.assertNull(str59);
        org.junit.Assert.assertNotNull(strArray63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertNotNull(getObservationsV2_66);
        org.junit.Assert.assertNull(str69);
        org.junit.Assert.assertNull(strList70);
        org.junit.Assert.assertNotNull(strArray73);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertNotNull(strArray81);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + true + "'", boolean83 == true);
        org.junit.Assert.assertNotNull(putLocationTags84);
        org.junit.Assert.assertNotNull(getObservationsV2_86);
        org.junit.Assert.assertNotNull(roleFlattenedBase88);
        org.junit.Assert.assertNotNull(getObservationsV2_91);
        org.junit.Assert.assertNotNull(putQualifierGroup92);
        org.junit.Assert.assertNotNull(timeAlignedDataServiceRequest93);
        org.junit.Assert.assertNull(double94);
        org.junit.Assert.assertNull(boolean95);
        org.junit.Assert.assertNull(instant96);
    }

    @Test
    public void test53235() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest106.test53235");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostImportVerticalProfileData postImportVerticalProfileData0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostImportVerticalProfileData();
        java.lang.String str1 = postImportVerticalProfileData0.ActivityId;
        postImportVerticalProfileData0.SamplingLocationIds = "****26835278-3e68-484a-a157-468aab2e69a2****";
        org.junit.Assert.assertNull(str1);
    }

    @Test
    public void test53236() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest106.test53236");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Specimen specimen0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Specimen();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate1 = specimen0.getTemplateCreatedFrom();
        org.junit.Assert.assertNull(specimenTemplate1);
    }

    @Test
    public void test53237() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest106.test53237");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFieldVisitActivityFromPlannedActivity postFieldVisitActivityFromPlannedActivity0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFieldVisitActivityFromPlannedActivity();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.CollectionMethod collectionMethod1 = postFieldVisitActivityFromPlannedActivity0.getCollectionMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedFieldResult plannedFieldResult2 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedFieldResult();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes3 = plannedFieldResult2.AuditAttributes;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails4 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails6 = labResultDetails4.setAnalysisComment("/AQUARIUS/Acquisition/v2");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes7 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails8 = labResultDetails6.setAuditAttributes(auditAttributes7);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedFieldResult plannedFieldResult9 = plannedFieldResult2.setAuditAttributes(auditAttributes7);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroup analyticalGroup10 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroup();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupType analyticalGroupType11 = analyticalGroup10.getType();
        analyticalGroup10.Name = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSSSSSZZZZZ";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroup analyticalGroup14 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroup();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem analyticalGroupItem15 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod16 = analyticalGroupItem15.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem analyticalGroupItem17 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod18 = analyticalGroupItem17.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod19 = analyticalGroupItem17.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem analyticalGroupItem20 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod21 = analyticalGroupItem20.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod22 = analyticalGroupItem20.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod23 = null;
        analyticalGroupItem20.AnalysisMethod = analysisMethod23;
        java.lang.String str25 = analyticalGroupItem20.getHoldingTime();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem analyticalGroupItem26 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod27 = analyticalGroupItem26.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod28 = analyticalGroupItem26.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem analyticalGroupItem29 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod30 = analyticalGroupItem29.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem analyticalGroupItem31 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod32 = analyticalGroupItem31.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod33 = analyticalGroupItem31.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod34 = null;
        analyticalGroupItem31.AnalysisMethod = analysisMethod34;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem[] analyticalGroupItemArray36 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem[] { analyticalGroupItem15, analyticalGroupItem17, analyticalGroupItem20, analyticalGroupItem26, analyticalGroupItem29, analyticalGroupItem31 };
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem> analyticalGroupItemList37 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem>) analyticalGroupItemList37, analyticalGroupItemArray36);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroup analyticalGroup39 = analyticalGroup14.setAnalyticalGroupItems((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem>) analyticalGroupItemList37);
        analyticalGroup10.AnalyticalGroupItems = analyticalGroupItemList37;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes41 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes();
        analyticalGroup10.AuditAttributes = auditAttributes41;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedFieldResult plannedFieldResult43 = plannedFieldResult9.setAuditAttributes(auditAttributes41);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutActivityTemplate putActivityTemplate44 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutActivityTemplate();
        java.lang.String str45 = putActivityTemplate44.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MediumType mediumType46 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MediumType.BIOLOGICAL;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutActivityTemplate putActivityTemplate47 = putActivityTemplate44.setMedium(mediumType46);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedFieldResult plannedFieldResult48 = plannedFieldResult9.setMedium(mediumType46);
        postFieldVisitActivityFromPlannedActivity0.Medium = mediumType46;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutActivityTemplate putActivityTemplate50 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutActivityTemplate();
        java.lang.String str51 = putActivityTemplate50.getId();
        java.lang.String str52 = putActivityTemplate50.Id;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes53 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes55 = auditAttributes53.setCreationUserProfileId("'.'SSSSSSS");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutActivityTemplate putActivityTemplate56 = putActivityTemplate50.setAuditAttributes(auditAttributes55);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFieldVisitActivityFromPlannedActivity postFieldVisitActivityFromPlannedActivity57 = postFieldVisitActivityFromPlannedActivity0.setAuditAttributes(auditAttributes55);
        java.lang.String str58 = postFieldVisitActivityFromPlannedActivity0.Id;
        postFieldVisitActivityFromPlannedActivity0.Id = "****8e3722aa-afdf-4137-ab41-bb1bb285cdf2****";
        org.junit.Assert.assertNull(collectionMethod1);
        org.junit.Assert.assertNull(auditAttributes3);
        org.junit.Assert.assertNotNull(labResultDetails6);
        org.junit.Assert.assertNotNull(labResultDetails8);
        org.junit.Assert.assertNotNull(plannedFieldResult9);
        org.junit.Assert.assertNull(analyticalGroupType11);
        org.junit.Assert.assertNull(analysisMethod16);
        org.junit.Assert.assertNull(analysisMethod18);
        org.junit.Assert.assertNull(analysisMethod19);
        org.junit.Assert.assertNull(analysisMethod21);
        org.junit.Assert.assertNull(analysisMethod22);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertNull(analysisMethod27);
        org.junit.Assert.assertNull(analysisMethod28);
        org.junit.Assert.assertNull(analysisMethod30);
        org.junit.Assert.assertNull(analysisMethod32);
        org.junit.Assert.assertNull(analysisMethod33);
        org.junit.Assert.assertNotNull(analyticalGroupItemArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(analyticalGroup39);
        org.junit.Assert.assertNotNull(plannedFieldResult43);
        org.junit.Assert.assertNull(str45);
        org.junit.Assert.assertTrue("'" + mediumType46 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MediumType.BIOLOGICAL + "'", mediumType46.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MediumType.BIOLOGICAL));
        org.junit.Assert.assertNotNull(putActivityTemplate47);
        org.junit.Assert.assertNotNull(plannedFieldResult48);
        org.junit.Assert.assertNull(str51);
        org.junit.Assert.assertNull(str52);
        org.junit.Assert.assertNotNull(auditAttributes55);
        org.junit.Assert.assertNotNull(putActivityTemplate56);
        org.junit.Assert.assertNotNull(postFieldVisitActivityFromPlannedActivity57);
        org.junit.Assert.assertNull(str58);
    }

    @Test
    public void test53238() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest106.test53238");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.PostReportAttachment postReportAttachment0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.PostReportAttachment();
        java.lang.String str1 = postReportAttachment0.Description;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportSpecimens getExportSpecimens2 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportSpecimens();
        java.util.List<java.lang.String> strList3 = getExportSpecimens2.getActivityTypes();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Qualifier qualifier4 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Qualifier();
        java.time.Instant instant5 = qualifier4.DateApplied;
        java.lang.String str6 = qualifier4.User;
        java.lang.String str7 = qualifier4.getIdentifier();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest8 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest();
        java.lang.Object obj9 = timeAlignedDataServiceRequest8.getResponseType();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse10 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant11 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse12 = locationDescriptionListServiceResponse10.setNextToken(instant11);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest13 = timeAlignedDataServiceRequest8.setQueryFrom(instant11);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Qualifier qualifier14 = qualifier4.setDateApplied(instant11);
        getExportSpecimens2.Before = instant11;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.PostReportAttachment postReportAttachment16 = postReportAttachment0.setCreatedTime(instant11);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(strList3);
        org.junit.Assert.assertNull(instant5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(obj9);
        org.junit.Assert.assertEquals(obj9.toString(), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj9), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj9), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertNotNull(instant11);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse12);
        org.junit.Assert.assertNotNull(timeAlignedDataServiceRequest13);
        org.junit.Assert.assertNotNull(qualifier14);
        org.junit.Assert.assertNotNull(postReportAttachment16);
    }

    @Test
    public void test53239() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest106.test53239");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CrossSectionSurveyActivity crossSectionSurveyActivity0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CrossSectionSurveyActivity();
        java.time.Instant instant1 = crossSectionSurveyActivity0.getEndTime();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CrossSectionSurveyActivity crossSectionSurveyActivity2 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CrossSectionSurveyActivity();
        java.time.Instant instant3 = crossSectionSurveyActivity2.StartTime;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity pointVelocityDischargeActivity4 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity();
        java.lang.String str5 = pointVelocityDischargeActivity4.SoftwareVersion;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity pointVelocityDischargeActivity7 = pointVelocityDischargeActivity4.setIsValid((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity pointVelocityDischargeActivity9 = pointVelocityDischargeActivity4.setSoftwareVersion("");
        java.lang.String str10 = pointVelocityDischargeActivity9.getManufacturer();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.StartPointType startPointType11 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.StartPointType.Unspecified;
        pointVelocityDischargeActivity9.StartPoint = startPointType11;
        crossSectionSurveyActivity2.StartingPoint = startPointType11;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CrossSectionPoint crossSectionPoint14 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CrossSectionPoint();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay15 = null;
        crossSectionPoint14.Distance = quantityWithDisplay15;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay17 = null;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CrossSectionPoint crossSectionPoint18 = crossSectionPoint14.setElevation(quantityWithDisplay17);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CrossSectionPoint crossSectionPoint19 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CrossSectionPoint();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay20 = null;
        crossSectionPoint19.Distance = quantityWithDisplay20;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay22 = null;
        crossSectionPoint19.Distance = quantityWithDisplay22;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CrossSectionPoint crossSectionPoint24 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CrossSectionPoint();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay25 = null;
        crossSectionPoint24.Distance = quantityWithDisplay25;
        crossSectionPoint24.PointOrder = 1;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay29 = null;
        crossSectionPoint24.Depth = quantityWithDisplay29;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CrossSectionPoint crossSectionPoint31 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CrossSectionPoint();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay32 = null;
        crossSectionPoint31.Distance = quantityWithDisplay32;
        crossSectionPoint31.PointOrder = 1;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay36 = crossSectionPoint31.getElevation();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CrossSectionPoint crossSectionPoint38 = crossSectionPoint31.setComments("hi!");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CrossSectionPoint crossSectionPoint39 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CrossSectionPoint();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay40 = null;
        crossSectionPoint39.Distance = quantityWithDisplay40;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay42 = null;
        crossSectionPoint39.Distance = quantityWithDisplay42;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CrossSectionPoint crossSectionPoint44 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CrossSectionPoint();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay45 = null;
        crossSectionPoint44.Distance = quantityWithDisplay45;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CrossSectionPoint crossSectionPoint47 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CrossSectionPoint();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay48 = null;
        crossSectionPoint47.Distance = quantityWithDisplay48;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay50 = null;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CrossSectionPoint crossSectionPoint51 = crossSectionPoint47.setElevation(quantityWithDisplay50);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CrossSectionPoint crossSectionPoint52 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CrossSectionPoint();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CrossSectionPoint crossSectionPoint53 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CrossSectionPoint();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay54 = null;
        crossSectionPoint53.Distance = quantityWithDisplay54;
        crossSectionPoint53.PointOrder = 1;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay58 = crossSectionPoint53.getElevation();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CrossSectionPoint crossSectionPoint60 = crossSectionPoint53.setComments("hi!");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CrossSectionPoint crossSectionPoint62 = crossSectionPoint53.setComments("2021.4.62.0");
        java.lang.String str63 = crossSectionPoint62.getComments();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CrossSectionPoint[] crossSectionPointArray64 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CrossSectionPoint[] { crossSectionPoint14, crossSectionPoint19, crossSectionPoint24, crossSectionPoint31, crossSectionPoint39, crossSectionPoint44, crossSectionPoint47, crossSectionPoint52, crossSectionPoint62 };
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CrossSectionPoint> crossSectionPointList65 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CrossSectionPoint>();
        boolean boolean66 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CrossSectionPoint>) crossSectionPointList65, crossSectionPointArray64);
        crossSectionSurveyActivity2.CrossSectionPoints = crossSectionPointList65;
        crossSectionSurveyActivity0.CrossSectionPoints = crossSectionPointList65;
        java.lang.String str69 = crossSectionSurveyActivity0.getComments();
        java.time.Instant instant70 = crossSectionSurveyActivity0.EndTime;
        crossSectionSurveyActivity0.RelativeLocation = "multipart/form-data; boundary=****231224c4-98ce-4e30-bd65-1d25287c4abe****";
        org.junit.Assert.assertNull(instant1);
        org.junit.Assert.assertNull(instant3);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(pointVelocityDischargeActivity7);
        org.junit.Assert.assertNotNull(pointVelocityDischargeActivity9);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertTrue("'" + startPointType11 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.StartPointType.Unspecified + "'", startPointType11.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.StartPointType.Unspecified));
        org.junit.Assert.assertNotNull(crossSectionPoint18);
        org.junit.Assert.assertNull(quantityWithDisplay36);
        org.junit.Assert.assertNotNull(crossSectionPoint38);
        org.junit.Assert.assertNotNull(crossSectionPoint51);
        org.junit.Assert.assertNull(quantityWithDisplay58);
        org.junit.Assert.assertNotNull(crossSectionPoint60);
        org.junit.Assert.assertNotNull(crossSectionPoint62);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "2021.4.62.0" + "'", str63, "2021.4.62.0");
        org.junit.Assert.assertNotNull(crossSectionPointArray64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertNull(str69);
        org.junit.Assert.assertNull(instant70);
    }

    @Test
    public void test53240() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest106.test53240");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostBasicTimeSeries postBasicTimeSeries0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostBasicTimeSeries();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostBasicTimeSeries postBasicTimeSeries2 = postBasicTimeSeries0.setLabel("yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSSSSSZZZZZ");
        java.lang.String str3 = postBasicTimeSeries2.getLabel();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostBasicTimeSeries postBasicTimeSeries5 = postBasicTimeSeries2.setPublish((java.lang.Boolean) true);
        java.lang.Boolean boolean6 = postBasicTimeSeries5.Publish;
        java.time.Duration duration7 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.DurationDeserializer.MinConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostBasicTimeSeries postBasicTimeSeries8 = postBasicTimeSeries5.setGapTolerance(duration7);
        java.lang.String str9 = postBasicTimeSeries5.ComputationPeriodIdentifier;
        org.junit.Assert.assertNotNull(postBasicTimeSeries2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSSSSSZZZZZ" + "'", str3, "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSSSSSZZZZZ");
        org.junit.Assert.assertNotNull(postBasicTimeSeries5);
        org.junit.Assert.assertEquals("'" + boolean6 + "' != '" + true + "'", boolean6, true);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(postBasicTimeSeries8);
        org.junit.Assert.assertNull(str9);
    }

    @Test
    public void test53241() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest106.test53241");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostExtendedAttribute postExtendedAttribute0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostExtendedAttribute();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DataType dataType1 = postExtendedAttribute0.getDataType();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AppliesToType appliesToType2 = postExtendedAttribute0.getAppliesToType();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostExtendedAttribute postExtendedAttribute3 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostExtendedAttribute();
        java.lang.String str4 = postExtendedAttribute3.CustomId;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DataType dataType5 = postExtendedAttribute3.DataType;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivity samplingPlanPlannedActivity6 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivity();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes7 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivity samplingPlanPlannedActivity8 = samplingPlanPlannedActivity6.setAuditAttributes(auditAttributes7);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes9 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes11 = auditAttributes9.setCreationUserProfileId("'.'SSSSSSS");
        samplingPlanPlannedActivity8.AuditAttributes = auditAttributes9;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes13 = samplingPlanPlannedActivity8.AuditAttributes;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostExtendedAttribute postExtendedAttribute14 = postExtendedAttribute3.setAuditAttributes(auditAttributes13);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttributeListItem extendedAttributeListItem15 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttributeListItem();
        java.lang.String str16 = extendedAttributeListItem15.CustomId;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttributeListItem extendedAttributeListItem18 = extendedAttributeListItem15.setId("hi!:///AQUARIUS/Provisioning/v1");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttributeListItem extendedAttributeListItem19 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttributeListItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttributeListItem extendedAttributeListItem20 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttributeListItem();
        java.lang.String str21 = extendedAttributeListItem20.getId();
        java.lang.String str22 = extendedAttributeListItem20.getCustomId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttributeListItem extendedAttributeListItem23 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttributeListItem();
        java.lang.String str24 = extendedAttributeListItem23.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttributeListItem extendedAttributeListItem25 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttributeListItem();
        java.lang.String str26 = extendedAttributeListItem25.CustomId;
        extendedAttributeListItem25.Id = "POST";
        java.lang.String str29 = extendedAttributeListItem25.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttributeListItem extendedAttributeListItem30 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttributeListItem();
        java.lang.String str31 = extendedAttributeListItem30.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttributeListItem extendedAttributeListItem32 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttributeListItem();
        java.lang.String str33 = extendedAttributeListItem32.CustomId;
        extendedAttributeListItem32.Id = "POST";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttributeListItem extendedAttributeListItem36 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttributeListItem();
        java.lang.String str37 = extendedAttributeListItem36.getId();
        java.lang.String str38 = extendedAttributeListItem36.CustomId;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttributeListItem[] extendedAttributeListItemArray39 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttributeListItem[] { extendedAttributeListItem15, extendedAttributeListItem19, extendedAttributeListItem20, extendedAttributeListItem23, extendedAttributeListItem25, extendedAttributeListItem30, extendedAttributeListItem32, extendedAttributeListItem36 };
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttributeListItem> extendedAttributeListItemList40 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttributeListItem>();
        boolean boolean41 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttributeListItem>) extendedAttributeListItemList40, extendedAttributeListItemArray39);
        postExtendedAttribute14.DropDownListItems = extendedAttributeListItemList40;
        postExtendedAttribute0.DropDownListItems = extendedAttributeListItemList40;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DataType dataType44 = postExtendedAttribute0.DataType;
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttributeListItem> extendedAttributeListItemList45 = postExtendedAttribute0.getDropDownListItems();
        postExtendedAttribute0.DefaultValue = "multipart/form-data; boundary=****139d2780-c7bb-430f-8369-46ea90b53b7d****";
        org.junit.Assert.assertNull(dataType1);
        org.junit.Assert.assertNull(appliesToType2);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(dataType5);
        org.junit.Assert.assertNotNull(samplingPlanPlannedActivity8);
        org.junit.Assert.assertNotNull(auditAttributes11);
        org.junit.Assert.assertNotNull(auditAttributes13);
        org.junit.Assert.assertNotNull(postExtendedAttribute14);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNotNull(extendedAttributeListItem18);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "POST" + "'", str29, "POST");
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertNull(str38);
        org.junit.Assert.assertNotNull(extendedAttributeListItemArray39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNull(dataType44);
        org.junit.Assert.assertNotNull(extendedAttributeListItemList45);
    }

    @Test
    public void test53242() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest106.test53242");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttribute extendedAttribute0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttribute();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttribute extendedAttribute2 = extendedAttribute0.setNumber((java.lang.Double) 0.0d);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttribute extendedAttribute4 = extendedAttribute0.setNumber((java.lang.Double) 1.0d);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttribute extendedAttribute6 = extendedAttribute4.setId("/AQUARIUS/Acquisition/v2");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes7 = extendedAttribute4.getAuditAttributes();
        extendedAttribute4.Number = 100.0d;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes10 = extendedAttribute4.AuditAttributes;
        java.lang.String str11 = extendedAttribute4.Text;
        org.junit.Assert.assertNotNull(extendedAttribute2);
        org.junit.Assert.assertNotNull(extendedAttribute4);
        org.junit.Assert.assertNotNull(extendedAttribute6);
        org.junit.Assert.assertNull(auditAttributes7);
        org.junit.Assert.assertNull(auditAttributes10);
        org.junit.Assert.assertNull(str11);
    }

    @Test
    public void test53243() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest106.test53243");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetTaxonomyLevelHistory getTaxonomyLevelHistory0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetTaxonomyLevelHistory();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetTaxonomyLevelHistory getTaxonomyLevelHistory2 = getTaxonomyLevelHistory0.setId("hi!:///AQUARIUS/Provisioning/v1");
        java.lang.String str3 = getTaxonomyLevelHistory2.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetTaxonomyLevelHistory getTaxonomyLevelHistory5 = getTaxonomyLevelHistory2.setId("'.'SSSSSSS");
        org.junit.Assert.assertNotNull(getTaxonomyLevelHistory2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "hi!:///AQUARIUS/Provisioning/v1" + "'", str3, "hi!:///AQUARIUS/Provisioning/v1");
        org.junit.Assert.assertNotNull(getTaxonomyLevelHistory5);
    }

    @Test
    public void test53244() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest106.test53244");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSamplingLocationGroup putSamplingLocationGroup0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSamplingLocationGroup();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LocationGroupType locationGroupType1 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LocationGroupType();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes2 = locationGroupType1.getAuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LocationGroupType locationGroupType4 = locationGroupType1.setCustomId("yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ");
        putSamplingLocationGroup0.LocationGroupType = locationGroupType1;
        java.lang.String str6 = putSamplingLocationGroup0.Id;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LocationGroupType locationGroupType7 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LocationGroupType();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes8 = locationGroupType7.getAuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LocationGroupType locationGroupType10 = locationGroupType7.setCustomId("yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSamplingLocationGroup putSamplingLocationGroup11 = putSamplingLocationGroup0.setLocationGroupType(locationGroupType7);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSamplingLocationGroup putSamplingLocationGroup13 = putSamplingLocationGroup11.setDescription("POST");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LocationGroupType locationGroupType14 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LocationGroupType();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes15 = locationGroupType14.getAuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LocationGroupType locationGroupType17 = locationGroupType14.setCustomId("yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes18 = locationGroupType14.getAuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutActivityTemplate putActivityTemplate19 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutActivityTemplate();
        java.lang.String str20 = putActivityTemplate19.getId();
        java.lang.String str21 = putActivityTemplate19.Id;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes22 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes24 = auditAttributes22.setCreationUserProfileId("'.'SSSSSSS");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutActivityTemplate putActivityTemplate25 = putActivityTemplate19.setAuditAttributes(auditAttributes24);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LocationGroupType locationGroupType26 = locationGroupType14.setAuditAttributes(auditAttributes24);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSamplingLocationGroup putSamplingLocationGroup27 = putSamplingLocationGroup13.setLocationGroupType(locationGroupType14);
        locationGroupType14.CustomId = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ";
        org.junit.Assert.assertNull(auditAttributes2);
        org.junit.Assert.assertNotNull(locationGroupType4);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(auditAttributes8);
        org.junit.Assert.assertNotNull(locationGroupType10);
        org.junit.Assert.assertNotNull(putSamplingLocationGroup11);
        org.junit.Assert.assertNotNull(putSamplingLocationGroup13);
        org.junit.Assert.assertNull(auditAttributes15);
        org.junit.Assert.assertNotNull(locationGroupType17);
        org.junit.Assert.assertNull(auditAttributes18);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNotNull(auditAttributes24);
        org.junit.Assert.assertNotNull(putActivityTemplate25);
        org.junit.Assert.assertNotNull(locationGroupType26);
        org.junit.Assert.assertNotNull(putSamplingLocationGroup27);
    }

    @Test
    public void test53245() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest106.test53245");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ParameterListServiceResponse parameterListServiceResponse0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ParameterListServiceResponse();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ParameterMetadata parameterMetadata1 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ParameterMetadata();
        parameterMetadata1.RoundingSpec = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ";
        java.lang.String str4 = parameterMetadata1.getIdentifier();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ParameterMetadata parameterMetadata6 = parameterMetadata1.setRoundingSpec("'.'SSSSSSS");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ParameterMetadata parameterMetadata8 = parameterMetadata6.setIdentifier("multipart/form-data; boundary=****44f0772e-c3ca-4316-8e2a-61ec8540d661****");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ParameterMetadata parameterMetadata9 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ParameterMetadata();
        parameterMetadata9.RoundingSpec = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ";
        java.lang.String str12 = parameterMetadata9.getIdentifier();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ParameterMetadata parameterMetadata14 = parameterMetadata9.setRoundingSpec("'.'SSSSSSS");
        java.lang.String str15 = parameterMetadata14.getUnitGroupIdentifier();
        parameterMetadata14.RoundingSpec = "2021.4.62.0";
        java.lang.String str18 = parameterMetadata14.UnitIdentifier;
        java.lang.String str19 = parameterMetadata14.Identifier;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ParameterMetadata parameterMetadata20 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ParameterMetadata();
        parameterMetadata20.RoundingSpec = "";
        java.lang.String str23 = parameterMetadata20.getUnitGroupIdentifier();
        java.lang.String str24 = parameterMetadata20.InterpolationType;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ParameterMetadata parameterMetadata26 = parameterMetadata20.setDisplayName("hi!");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ParameterMetadata parameterMetadata27 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ParameterMetadata();
        parameterMetadata27.RoundingSpec = "";
        java.lang.String str30 = parameterMetadata27.getInterpolationType();
        parameterMetadata27.InterpolationType = "hi!";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ParameterMetadata parameterMetadata34 = parameterMetadata27.setUnitGroupIdentifier("http:///AQUARIUS/Acquisition/v2multipart/form-data; boundary=****44f0772e-c3ca-4316-8e2a-61ec8540d661****/v1/observedproperties/{id}/categoricalvalues");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ParameterMetadata parameterMetadata35 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ParameterMetadata();
        parameterMetadata35.RoundingSpec = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ";
        java.lang.String str38 = parameterMetadata35.getIdentifier();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ParameterMetadata parameterMetadata40 = parameterMetadata35.setRoundingSpec("'.'SSSSSSS");
        java.lang.String str41 = parameterMetadata40.getUnitGroupIdentifier();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ParameterMetadata parameterMetadata43 = parameterMetadata40.setUnitIdentifier("9999-12-31T23:59:59.999Z");
        java.lang.String str44 = parameterMetadata40.UnitIdentifier;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ParameterMetadata parameterMetadata45 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ParameterMetadata();
        parameterMetadata45.RoundingSpec = "";
        java.lang.String str48 = parameterMetadata45.getUnitGroupIdentifier();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ParameterMetadata parameterMetadata50 = parameterMetadata45.setUnitGroupIdentifier("yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ");
        java.lang.String str51 = parameterMetadata50.getRoundingSpec();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ParameterMetadata parameterMetadata52 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ParameterMetadata();
        parameterMetadata52.RoundingSpec = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ";
        java.lang.String str55 = parameterMetadata52.getIdentifier();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ParameterMetadata parameterMetadata57 = parameterMetadata52.setRoundingSpec("'.'SSSSSSS");
        java.lang.String str58 = parameterMetadata57.getUnitGroupIdentifier();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ParameterMetadata parameterMetadata60 = parameterMetadata57.setUnitIdentifier("9999-12-31T23:59:59.999Z");
        parameterMetadata60.DisplayName = "2021.4.62.0";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ParameterMetadata parameterMetadata63 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ParameterMetadata();
        parameterMetadata63.RoundingSpec = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ";
        java.lang.String str66 = parameterMetadata63.getIdentifier();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ParameterMetadata parameterMetadata68 = parameterMetadata63.setRoundingSpec("'.'SSSSSSS");
        java.lang.String str69 = parameterMetadata68.getUnitGroupIdentifier();
        parameterMetadata68.RoundingSpec = "2021.4.62.0";
        java.lang.String str72 = parameterMetadata68.UnitIdentifier;
        parameterMetadata68.RoundingSpec = "2021.4.62.0";
        java.lang.String str75 = parameterMetadata68.UnitGroupIdentifier;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ParameterMetadata[] parameterMetadataArray76 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ParameterMetadata[] { parameterMetadata8, parameterMetadata14, parameterMetadata20, parameterMetadata27, parameterMetadata40, parameterMetadata50, parameterMetadata60, parameterMetadata68 };
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ParameterMetadata> parameterMetadataList77 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ParameterMetadata>();
        boolean boolean78 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ParameterMetadata>) parameterMetadataList77, parameterMetadataArray76);
        parameterListServiceResponse0.Parameters = parameterMetadataList77;
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ParameterMetadata> parameterMetadataList80 = parameterListServiceResponse0.getParameters();
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ParameterMetadata> parameterMetadataList81 = parameterListServiceResponse0.getParameters();
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNotNull(parameterMetadata6);
        org.junit.Assert.assertNotNull(parameterMetadata8);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(parameterMetadata14);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNotNull(parameterMetadata26);
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertNotNull(parameterMetadata34);
        org.junit.Assert.assertNull(str38);
        org.junit.Assert.assertNotNull(parameterMetadata40);
        org.junit.Assert.assertNull(str41);
        org.junit.Assert.assertNotNull(parameterMetadata43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "9999-12-31T23:59:59.999Z" + "'", str44, "9999-12-31T23:59:59.999Z");
        org.junit.Assert.assertNull(str48);
        org.junit.Assert.assertNotNull(parameterMetadata50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
        org.junit.Assert.assertNull(str55);
        org.junit.Assert.assertNotNull(parameterMetadata57);
        org.junit.Assert.assertNull(str58);
        org.junit.Assert.assertNotNull(parameterMetadata60);
        org.junit.Assert.assertNull(str66);
        org.junit.Assert.assertNotNull(parameterMetadata68);
        org.junit.Assert.assertNull(str69);
        org.junit.Assert.assertNull(str72);
        org.junit.Assert.assertNull(str75);
        org.junit.Assert.assertNotNull(parameterMetadataArray76);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
        org.junit.Assert.assertNotNull(parameterMetadataList80);
        org.junit.Assert.assertNotNull(parameterMetadataList81);
    }

    @Test
    public void test53246() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest106.test53246");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutStandard putStandard0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutStandard();
        putStandard0.Active = true;
        java.lang.String str3 = putStandard0.Id;
        java.lang.String str4 = putStandard0.Id;
        java.lang.String str5 = putStandard0.getDescription();
        java.lang.String str6 = putStandard0.getName();
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationStandard> observationStandardList7 = putStandard0.getObservationStandards();
        java.lang.String str8 = putStandard0.Description;
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(observationStandardList7);
        org.junit.Assert.assertNull(str8);
    }

    @Test
    public void test53247() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest106.test53247");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitDataServiceResponse fieldVisitDataServiceResponse0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitDataServiceResponse();
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CrossSectionSurveyActivity> crossSectionSurveyActivityList1 = fieldVisitDataServiceResponse0.CrossSectionSurveyActivity;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitDataServiceResponse fieldVisitDataServiceResponse3 = fieldVisitDataServiceResponse0.setIdentifier("");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.GageHeightAtZeroFlowActivity gageHeightAtZeroFlowActivity4 = fieldVisitDataServiceResponse3.getGageHeightAtZeroFlowActivity();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ControlConditionActivity controlConditionActivity5 = fieldVisitDataServiceResponse3.getControlConditionActivity();
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CrossSectionSurveyActivity> crossSectionSurveyActivityList6 = fieldVisitDataServiceResponse3.getCrossSectionSurveyActivity();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitDataServiceResponse fieldVisitDataServiceResponse8 = fieldVisitDataServiceResponse3.setIdentifier("multipart/form-data; boundary=****e48381b1-dcc5-4af7-8a12-f30d1690cec2****");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.GageHeightAtZeroFlowActivity gageHeightAtZeroFlowActivity9 = fieldVisitDataServiceResponse8.GageHeightAtZeroFlowActivity;
        fieldVisitDataServiceResponse8.Identifier = "multipart/form-data; boundary=****63fe3634-a082-4ae8-b380-4fc445059c1d****";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.GageHeightAtZeroFlowActivity gageHeightAtZeroFlowActivity12 = fieldVisitDataServiceResponse8.getGageHeightAtZeroFlowActivity();
        org.junit.Assert.assertNull(crossSectionSurveyActivityList1);
        org.junit.Assert.assertNotNull(fieldVisitDataServiceResponse3);
        org.junit.Assert.assertNull(gageHeightAtZeroFlowActivity4);
        org.junit.Assert.assertNull(controlConditionActivity5);
        org.junit.Assert.assertNull(crossSectionSurveyActivityList6);
        org.junit.Assert.assertNotNull(fieldVisitDataServiceResponse8);
        org.junit.Assert.assertNull(gageHeightAtZeroFlowActivity9);
        org.junit.Assert.assertNull(gageHeightAtZeroFlowActivity12);
    }

    @Test
    public void test53248() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest106.test53248");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.PostReportAttachment postReportAttachment0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.PostReportAttachment();
        postReportAttachment0.Description = "2021.4.62.0";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.PostReportAttachment postReportAttachment4 = postReportAttachment0.setLocationUniqueId("MaxInstant");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Interval interval5 = postReportAttachment4.SourceTimeRange;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.PostTimeSeriesOverwriteAppend postTimeSeriesOverwriteAppend6 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.PostTimeSeriesOverwriteAppend();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Interval interval7 = null;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.PostTimeSeriesOverwriteAppend postTimeSeriesOverwriteAppend8 = postTimeSeriesOverwriteAppend6.setTimeRange(interval7);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.PostTimeSeriesOverwriteAppend postTimeSeriesOverwriteAppend10 = postTimeSeriesOverwriteAppend6.setUniqueId("");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Interval interval11 = postTimeSeriesOverwriteAppend10.getTimeRange();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Interval interval12 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Interval();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.PostTimeSeriesOverwriteAppend postTimeSeriesOverwriteAppend13 = postTimeSeriesOverwriteAppend10.setTimeRange(interval12);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.PostReportAttachment postReportAttachment14 = postReportAttachment4.setSourceTimeRange(interval12);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest15 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest();
        java.lang.Object obj16 = timeAlignedDataServiceRequest15.getResponseType();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Sensor sensor17 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Sensor();
        java.time.Instant instant18 = sensor17.getLastModifiedUtc();
        java.time.Instant instant19 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Sensor sensor20 = sensor17.setLastModifiedUtc(instant19);
        java.time.Instant instant21 = sensor17.LastModifiedUtc;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest22 = timeAlignedDataServiceRequest15.setQueryTo(instant21);
        java.time.Instant instant23 = timeAlignedDataServiceRequest15.QueryFrom;
        java.lang.Boolean boolean24 = timeAlignedDataServiceRequest15.isApplyRounding();
        java.lang.Boolean boolean25 = timeAlignedDataServiceRequest15.isIncludeGapMarkers();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ReferencePointBase referencePointBase26 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ReferencePointBase();
        java.lang.Double double27 = referencePointBase26.Longitude;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ReferencePointBase referencePointBase29 = referencePointBase26.setLongitude((java.lang.Double) 100.0d);
        java.lang.String str30 = referencePointBase26.getDecommissionedReason();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ReferencePointBase referencePointBase32 = referencePointBase26.setName("multipart/form-data; boundary=****d9f5d551-383a-4365-87fd-ae7094da6f3b****");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CalibrationCheck calibrationCheck33 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CalibrationCheck();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CalibrationCheckType calibrationCheckType34 = calibrationCheck33.getCalibrationCheckType();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay35 = calibrationCheck33.Value;
        java.lang.String str36 = calibrationCheck33.getModel();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay37 = calibrationCheck33.Difference;
        java.lang.String str38 = calibrationCheck33.getParameter();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CalibrationCheck calibrationCheck40 = calibrationCheck33.setSensorUniqueId("MinInstant");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CalibrationCheck calibrationCheck42 = calibrationCheck33.setPublish((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Qualifier qualifier43 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Qualifier();
        java.time.Instant instant44 = qualifier43.DateApplied;
        java.lang.String str45 = qualifier43.User;
        java.lang.String str46 = qualifier43.getIdentifier();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest47 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest();
        java.lang.Object obj48 = timeAlignedDataServiceRequest47.getResponseType();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse49 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant50 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse51 = locationDescriptionListServiceResponse49.setNextToken(instant50);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest52 = timeAlignedDataServiceRequest47.setQueryFrom(instant50);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Qualifier qualifier53 = qualifier43.setDateApplied(instant50);
        java.time.Instant instant54 = qualifier53.getDateApplied();
        calibrationCheck42.Time = instant54;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ReferencePointBase referencePointBase56 = referencePointBase26.setPrimarySinceDate(instant54);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest57 = timeAlignedDataServiceRequest15.setQueryFrom(instant54);
        interval12.End = instant54;
        org.junit.Assert.assertNotNull(postReportAttachment4);
        org.junit.Assert.assertNull(interval5);
        org.junit.Assert.assertNotNull(postTimeSeriesOverwriteAppend8);
        org.junit.Assert.assertNotNull(postTimeSeriesOverwriteAppend10);
        org.junit.Assert.assertNull(interval11);
        org.junit.Assert.assertNotNull(postTimeSeriesOverwriteAppend13);
        org.junit.Assert.assertNotNull(postReportAttachment14);
        org.junit.Assert.assertNotNull(obj16);
        org.junit.Assert.assertEquals(obj16.toString(), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj16), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj16), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertNull(instant18);
        org.junit.Assert.assertNotNull(instant19);
        org.junit.Assert.assertNotNull(sensor20);
        org.junit.Assert.assertNotNull(instant21);
        org.junit.Assert.assertNotNull(timeAlignedDataServiceRequest22);
        org.junit.Assert.assertNull(instant23);
        org.junit.Assert.assertNull(boolean24);
        org.junit.Assert.assertNull(boolean25);
        org.junit.Assert.assertNull(double27);
        org.junit.Assert.assertNotNull(referencePointBase29);
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertNotNull(referencePointBase32);
        org.junit.Assert.assertNull(calibrationCheckType34);
        org.junit.Assert.assertNull(doubleWithDisplay35);
        org.junit.Assert.assertNull(str36);
        org.junit.Assert.assertNull(doubleWithDisplay37);
        org.junit.Assert.assertNull(str38);
        org.junit.Assert.assertNotNull(calibrationCheck40);
        org.junit.Assert.assertNotNull(calibrationCheck42);
        org.junit.Assert.assertNull(instant44);
        org.junit.Assert.assertNull(str45);
        org.junit.Assert.assertNull(str46);
        org.junit.Assert.assertNotNull(obj48);
        org.junit.Assert.assertEquals(obj48.toString(), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj48), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj48), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertNotNull(instant50);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse51);
        org.junit.Assert.assertNotNull(timeAlignedDataServiceRequest52);
        org.junit.Assert.assertNotNull(qualifier53);
        org.junit.Assert.assertNotNull(instant54);
        org.junit.Assert.assertNotNull(referencePointBase56);
        org.junit.Assert.assertNotNull(timeAlignedDataServiceRequest57);
    }

    @Test
    public void test53249() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest106.test53249");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesUniqueIdListServiceRequest timeSeriesUniqueIdListServiceRequest0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesUniqueIdListServiceRequest();
        java.lang.Object obj1 = timeSeriesUniqueIdListServiceRequest0.getResponseType();
        java.lang.String str2 = timeSeriesUniqueIdListServiceRequest0.getChangeEventType();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesUniqueIdListServiceRequest timeSeriesUniqueIdListServiceRequest4 = timeSeriesUniqueIdListServiceRequest0.setParameter("");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesUniqueIdListServiceRequest timeSeriesUniqueIdListServiceRequest6 = timeSeriesUniqueIdListServiceRequest4.setComputationIdentifier("multipart/form-data; boundary=****d9f5d551-383a-4365-87fd-ae7094da6f3b****");
        timeSeriesUniqueIdListServiceRequest4.ComputationIdentifier = "multipart/form-data; boundary=****1165d1f3-8b30-4f2e-8d0b-ffebab458859****";
        org.junit.Assert.assertNotNull(obj1);
        org.junit.Assert.assertEquals(obj1.toString(), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeSeriesUniqueIdListServiceResponse");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj1), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeSeriesUniqueIdListServiceResponse");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj1), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeSeriesUniqueIdListServiceResponse");
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNotNull(timeSeriesUniqueIdListServiceRequest4);
        org.junit.Assert.assertNotNull(timeSeriesUniqueIdListServiceRequest6);
    }

    @Test
    public void test53250() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest106.test53250");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.SettingsResponse settingsResponse0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.SettingsResponse();
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Setting> settingList1 = settingsResponse0.getResults();
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Setting> settingList2 = settingsResponse0.Results;
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Setting> settingList3 = settingsResponse0.getResults();
        org.junit.Assert.assertNull(settingList1);
        org.junit.Assert.assertNull(settingList2);
        org.junit.Assert.assertNull(settingList3);
    }

    @Test
    public void test53251() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest106.test53251");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedFieldResult plannedFieldResult1 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation2 = observation0.setPlannedFieldResult(plannedFieldResult1);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabInstruction labInstruction3 = null;
        observation2.LabInstruction = labInstruction3;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationStatistics observationStatistics5 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation6 = observation2.setStatistics(observationStatistics5);
        java.time.OffsetDateTime offsetDateTime7 = observation6.getResultTime();
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple> importHistoryEventSimpleList8 = observation6.ImportHistoryEventSimples;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty observedProperty9 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation10 = observation6.setObservedProperty(observedProperty9);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultGrade resultGrade11 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation12 = observation6.setResultGrade(resultGrade11);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationStatistics observationStatistics13 = observation6.Statistics;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty observedProperty14 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation15 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation();
        observation15.CustomId = "hi!";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.CategoricalResult categoricalResult18 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation19 = observation15.setCategoricalResult(categoricalResult18);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple[] importHistoryEventSimpleArray20 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple> importHistoryEventSimpleList21 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple>) importHistoryEventSimpleList21, importHistoryEventSimpleArray20);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation23 = observation15.setImportHistoryEventSimples((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple>) importHistoryEventSimpleList21);
        observedProperty14.ImportHistoryEventSimples = importHistoryEventSimpleList21;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation25 = observation6.setObservedProperty(observedProperty14);
        java.lang.String str26 = observation6.MediumSubdivision;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultGrade resultGrade27 = observation6.ResultGrade;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultStatus resultStatus28 = observation6.getResultStatus();
        org.junit.Assert.assertNotNull(observation2);
        org.junit.Assert.assertNotNull(observation6);
        org.junit.Assert.assertNull(offsetDateTime7);
        org.junit.Assert.assertNull(importHistoryEventSimpleList8);
        org.junit.Assert.assertNotNull(observation10);
        org.junit.Assert.assertNotNull(observation12);
        org.junit.Assert.assertNull(observationStatistics13);
        org.junit.Assert.assertNotNull(observation19);
        org.junit.Assert.assertNotNull(importHistoryEventSimpleArray20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(observation23);
        org.junit.Assert.assertNotNull(observation25);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertNull(resultGrade27);
        org.junit.Assert.assertNull(resultStatus28);
    }

    @Test
    public void test53252() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest106.test53252");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ActivityTemplate activityTemplate0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ActivityTemplate();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes1 = null;
        activityTemplate0.AuditAttributes = auditAttributes1;
        java.lang.String str3 = activityTemplate0.getComment();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ActivityTemplateType activityTemplateType4 = activityTemplate0.getType();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MediumType mediumType5 = activityTemplate0.Medium;
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate> specimenTemplateList6 = activityTemplate0.SpecimenTemplates;
        activityTemplate0.Id = "/AQUARIUS/Acquisition/v2://9999-12-31T23:59:59.999Z";
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(activityTemplateType4);
        org.junit.Assert.assertNull(mediumType5);
        org.junit.Assert.assertNull(specimenTemplateList6);
    }

    @Test
    public void test53253() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest106.test53253");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSamplingLocationGroup putSamplingLocationGroup0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSamplingLocationGroup();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LocationGroupType locationGroupType1 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LocationGroupType();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes2 = locationGroupType1.getAuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LocationGroupType locationGroupType4 = locationGroupType1.setCustomId("yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ");
        putSamplingLocationGroup0.LocationGroupType = locationGroupType1;
        java.lang.String str6 = putSamplingLocationGroup0.getName();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSamplingLocationGroup putSamplingLocationGroup8 = putSamplingLocationGroup0.setId("yyyy'-'MM'-'dd'T'HH':'mm':'ss");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSamplingLocationGroup putSamplingLocationGroup9 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSamplingLocationGroup();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LocationGroupType locationGroupType10 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LocationGroupType();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes11 = locationGroupType10.getAuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LocationGroupType locationGroupType13 = locationGroupType10.setCustomId("yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ");
        putSamplingLocationGroup9.LocationGroupType = locationGroupType10;
        java.lang.String str15 = putSamplingLocationGroup9.Id;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LocationGroupType locationGroupType16 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LocationGroupType();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes17 = locationGroupType16.getAuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LocationGroupType locationGroupType19 = locationGroupType16.setCustomId("yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSamplingLocationGroup putSamplingLocationGroup20 = putSamplingLocationGroup9.setLocationGroupType(locationGroupType16);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSamplingLocationGroup putSamplingLocationGroup21 = putSamplingLocationGroup8.setLocationGroupType(locationGroupType16);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LocationGroupType locationGroupType22 = putSamplingLocationGroup8.LocationGroupType;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes23 = putSamplingLocationGroup8.AuditAttributes;
        org.junit.Assert.assertNull(auditAttributes2);
        org.junit.Assert.assertNotNull(locationGroupType4);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNotNull(putSamplingLocationGroup8);
        org.junit.Assert.assertNull(auditAttributes11);
        org.junit.Assert.assertNotNull(locationGroupType13);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNull(auditAttributes17);
        org.junit.Assert.assertNotNull(locationGroupType19);
        org.junit.Assert.assertNotNull(putSamplingLocationGroup20);
        org.junit.Assert.assertNotNull(putSamplingLocationGroup21);
        org.junit.Assert.assertNotNull(locationGroupType22);
        org.junit.Assert.assertNull(auditAttributes23);
    }

    @Test
    public void test53254() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest106.test53254");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetLabReportImportHistoryEvents getLabReportImportHistoryEvents0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetLabReportImportHistoryEvents();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags1 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray5 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList6 = new java.util.ArrayList<java.lang.String>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList6, strArray5);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags8 = putLocationTags1.setTagUniqueIds(strList6);
        java.util.ArrayList<java.lang.String> strList9 = putLocationTags8.TagUniqueIds;
        getLabReportImportHistoryEvents0.LabReportIds = strList9;
        getLabReportImportHistoryEvents0.Limit = 100;
        java.lang.String str13 = getLabReportImportHistoryEvents0.Sort;
        getLabReportImportHistoryEvents0.Limit = 100;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetLabReportImportHistoryEvents getLabReportImportHistoryEvents17 = getLabReportImportHistoryEvents0.setCursor("multipart/form-data; boundary=****c052e2e0-9b0e-4df2-9a74-52850b5df85a****");
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(putLocationTags8);
        org.junit.Assert.assertNotNull(strList9);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNotNull(getLabReportImportHistoryEvents17);
    }

    @Test
    public void test53255() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest106.test53255");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationExportIIV2 getObservationExportIIV2_0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationExportIIV2();
        java.util.List<java.lang.String> strList1 = getObservationExportIIV2_0.getCollectionMethodIds();
        java.util.List<java.lang.String> strList2 = getObservationExportIIV2_0.AnalyticalGroupIds;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportObservations getExportObservations3 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportObservations();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportObservations getExportObservations5 = getExportObservations3.setLimit((java.lang.Integer) 2);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DeleteFieldVisits deleteFieldVisits6 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DeleteFieldVisits();
        java.lang.String str7 = deleteFieldVisits6.Sort;
        deleteFieldVisits6.Sort = "9999-12-31T23:59:59.999Z";
        java.util.List<java.lang.String> strList10 = deleteFieldVisits6.getScheduleIds();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetShippingContainers getShippingContainers11 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetShippingContainers();
        java.util.List<java.lang.String> strList12 = getShippingContainers11.Search;
        java.util.List<java.lang.String> strList13 = getShippingContainers11.Search;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetAnalysisMethods getAnalysisMethods14 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetAnalysisMethods();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItem importItem15 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_16 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray18 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList19 = new java.util.ArrayList<java.lang.String>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList19, strArray18);
        getObservationsV2_16.SpecimenIds = strList19;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags22 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray26 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList27 = new java.util.ArrayList<java.lang.String>();
        boolean boolean28 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList27, strArray26);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags29 = putLocationTags22.setTagUniqueIds(strList27);
        getObservationsV2_16.QualityControlTypes = strList27;
        java.util.List<java.lang.String> strList31 = getObservationsV2_16.getLabReportIds();
        importItem15.Errors = getObservationsV2_16;
        java.lang.Object obj33 = importItem15.getExistingItem();
        importItem15.Input = "hi!";
        java.lang.Object obj36 = importItem15.getItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemStatusType importItemStatusType37 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemStatusType.SKIPPED;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItem importItem38 = importItem15.setStatus(importItemStatusType37);
        importItem38.Input = "/AQUARIUS/Provisioning/v1";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate41 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate();
        specimenTemplate41.CustomId = "hi!";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate45 = specimenTemplate41.setId("hi!");
        java.lang.Boolean boolean46 = specimenTemplate45.getFiltered();
        importItem38.Item = specimenTemplate45;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Processor processor48 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Processor();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostTag postTag49 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostTag();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_50 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray53 = new java.lang.String[] { "", "" };
        java.util.ArrayList<java.lang.String> strList54 = new java.util.ArrayList<java.lang.String>();
        boolean boolean55 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList54, strArray53);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_56 = getObservationsV2_50.setDataClassifications((java.util.List<java.lang.String>) strList54);
        postTag49.PickListValues = strList54;
        java.util.ArrayList<java.lang.String> strList58 = postTag49.PickListValues;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Processor processor59 = processor48.setInputTimeSeriesUniqueIds(strList58);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItem importItem60 = importItem38.setWarningMessages((java.util.List<java.lang.String>) strList58);
        java.util.List<java.lang.String> strList61 = importItem38.getWarningMessages();
        getAnalysisMethods14.ObservedPropertyIds = strList61;
        getShippingContainers11.Search = strList61;
        deleteFieldVisits6.SamplingLocationIds = strList61;
        getExportObservations3.SpecimenIds = strList61;
        getObservationExportIIV2_0.SamplingLocationGroupIds = strList61;
        java.util.List<java.lang.String> strList67 = getObservationExportIIV2_0.AnalysisMethodIds;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationExportIIV2 getObservationExportIIV2_68 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationExportIIV2();
        java.util.List<java.lang.String> strList69 = getObservationExportIIV2_68.getCollectionMethodIds();
        java.lang.String str70 = getObservationExportIIV2_68.getDepthUnitCustomId();
        java.time.Instant instant71 = getObservationExportIIV2_68.getStartResultTime();
        getObservationExportIIV2_68.DetectionCondition = "";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationExportIIFormatType getObservationExportIIFormatType74 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationExportIIFormatType.CSV;
        getObservationExportIIV2_68.Format = getObservationExportIIFormatType74;
        getObservationExportIIV2_0.Format = getObservationExportIIFormatType74;
        getObservationExportIIV2_0.Limit = 7;
        org.junit.Assert.assertNull(strList1);
        org.junit.Assert.assertNull(strList2);
        org.junit.Assert.assertNotNull(getExportObservations5);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(strList10);
        org.junit.Assert.assertNull(strList12);
        org.junit.Assert.assertNull(strList13);
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(putLocationTags29);
        org.junit.Assert.assertNull(strList31);
        org.junit.Assert.assertNull(obj33);
        org.junit.Assert.assertNull(obj36);
        org.junit.Assert.assertTrue("'" + importItemStatusType37 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemStatusType.SKIPPED + "'", importItemStatusType37.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemStatusType.SKIPPED));
        org.junit.Assert.assertNotNull(importItem38);
        org.junit.Assert.assertNotNull(specimenTemplate45);
        org.junit.Assert.assertNull(boolean46);
        org.junit.Assert.assertNotNull(strArray53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(getObservationsV2_56);
        org.junit.Assert.assertNotNull(strList58);
        org.junit.Assert.assertNotNull(processor59);
        org.junit.Assert.assertNotNull(importItem60);
        org.junit.Assert.assertNotNull(strList61);
        org.junit.Assert.assertNull(strList67);
        org.junit.Assert.assertNull(strList69);
        org.junit.Assert.assertNull(str70);
        org.junit.Assert.assertNull(instant71);
        org.junit.Assert.assertTrue("'" + getObservationExportIIFormatType74 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationExportIIFormatType.CSV + "'", getObservationExportIIFormatType74.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationExportIIFormatType.CSV));
    }

    @Test
    public void test53256() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest106.test53256");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetAnalysisMethod getAnalysisMethod0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetAnalysisMethod();
        java.lang.Object obj1 = getAnalysisMethod0.getResponseType();
        getAnalysisMethod0.Id = "";
        getAnalysisMethod0.Id = "multipart/form-data; boundary=****9dca3c57-4d61-4929-84c6-58c5a7f24542****";
        org.junit.Assert.assertNotNull(obj1);
        org.junit.Assert.assertEquals(obj1.toString(), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$AnalysisMethod");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj1), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$AnalysisMethod");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj1), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$AnalysisMethod");
    }

    @Test
    public void test53257() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest106.test53257");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SearchResultNullMeasureQualifier searchResultNullMeasureQualifier0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SearchResultNullMeasureQualifier();
        java.lang.String str1 = searchResultNullMeasureQualifier0.Cursor;
        java.lang.Integer int2 = searchResultNullMeasureQualifier0.getTotalCount();
        searchResultNullMeasureQualifier0.Cursor = "multipart/form-data; boundary=****bbcf5f9e-6ccf-4b63-91ab-6e645caf02af****";
        java.lang.Integer int5 = searchResultNullMeasureQualifier0.TotalCount;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(int2);
        org.junit.Assert.assertNull(int5);
    }

    @Test
    public void test53258() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest106.test53258");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Reading reading0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Reading();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay1 = reading0.getValue();
        reading0.ReferencePointUniqueId = "hi!";
        java.lang.String str4 = reading0.Parameter;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary5 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary7 = dischargeSummary5.setPublish((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay8 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay();
        dischargeSummary7.DifferenceDuringVisit = doubleWithDisplay8;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay11 = doubleWithDisplay8.setNumeric((java.lang.Double) 100.0d);
        reading0.Value = doubleWithDisplay11;
        java.lang.Boolean boolean13 = reading0.isPublish();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Reading reading15 = reading0.setParameterId("/AQUARIUS/Acquisition/v2://9999-12-31T23:59:59.999Z");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_16 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray19 = new java.lang.String[] { "", "" };
        java.util.ArrayList<java.lang.String> strList20 = new java.util.ArrayList<java.lang.String>();
        boolean boolean21 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList20, strArray19);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_22 = getObservationsV2_16.setDataClassifications((java.util.List<java.lang.String>) strList20);
        getObservationsV2_22.DepthUnitCustomId = "hi!";
        java.lang.String str25 = getObservationsV2_22.CustomId;
        java.util.List<java.lang.String> strList26 = getObservationsV2_22.getSearch();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_27 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray29 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList30 = new java.util.ArrayList<java.lang.String>();
        boolean boolean31 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList30, strArray29);
        getObservationsV2_27.SpecimenIds = strList30;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags33 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray37 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList38 = new java.util.ArrayList<java.lang.String>();
        boolean boolean39 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList38, strArray37);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags40 = putLocationTags33.setTagUniqueIds(strList38);
        getObservationsV2_27.QualityControlTypes = strList38;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_42 = getObservationsV2_22.setMedia((java.util.List<java.lang.String>) strList38);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_43 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String str44 = getObservationsV2_43.getCustomId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_45 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray47 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList48 = new java.util.ArrayList<java.lang.String>();
        boolean boolean49 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList48, strArray47);
        getObservationsV2_45.SpecimenIds = strList48;
        getObservationsV2_43.ProjectIds = strList48;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_52 = getObservationsV2_22.setObservedPropertyIds((java.util.List<java.lang.String>) strList48);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Reading reading53 = reading0.setReadingQualifiers(strList48);
        reading53.Parameter = "/AQUARIUS/Acquisition/v2://9999-12-31T23:59:59.999Z";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ReadingType readingType56 = reading53.ReadingType;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ReadingType readingType57 = reading53.getReadingType();
        reading53.Publish = true;
        reading53.ReferencePointUniqueId = "9999-12-31T23:59:59.9999999Z";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.GroundWaterMeasurement groundWaterMeasurement62 = reading53.GroundWaterMeasurement;
        org.junit.Assert.assertNull(doubleWithDisplay1);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNotNull(dischargeSummary7);
        org.junit.Assert.assertNotNull(doubleWithDisplay11);
        org.junit.Assert.assertNull(boolean13);
        org.junit.Assert.assertNotNull(reading15);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(getObservationsV2_22);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertNull(strList26);
        org.junit.Assert.assertNotNull(strArray29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(putLocationTags40);
        org.junit.Assert.assertNotNull(getObservationsV2_42);
        org.junit.Assert.assertNull(str44);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(getObservationsV2_52);
        org.junit.Assert.assertNotNull(reading53);
        org.junit.Assert.assertNull(readingType56);
        org.junit.Assert.assertNull(readingType57);
        org.junit.Assert.assertNull(groundWaterMeasurement62);
    }

    @Test
    public void test53259() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest106.test53259");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetSpecimens getSpecimens0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetSpecimens();
        java.util.List<java.lang.String> strList1 = getSpecimens0.getActivityIds();
        java.time.Instant instant2 = getSpecimens0.EndModificationTime;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetActivities getActivities3 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetActivities();
        java.lang.String str4 = getActivities3.getCustomId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetActivities getActivities6 = getActivities3.setLimit((java.lang.Integer) 100);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetActivities getActivities8 = getActivities6.setSort("multipart/form-data; boundary=****59879c02-0839-4b96-bc41-a13ebb706be4****");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetSpecimens getSpecimens9 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetSpecimens();
        java.util.List<java.lang.String> strList10 = getSpecimens9.getActivityIds();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetSpecimens getSpecimens12 = getSpecimens9.setSort("MinDuration");
        java.util.List<java.lang.String> strList13 = getSpecimens12.getSamplingLocationIds();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetActivities getActivities14 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetActivities();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse15 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary16 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary18 = dischargeSummary16.setPublish((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse19 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant20 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse21 = locationDescriptionListServiceResponse19.setNextToken(instant20);
        dischargeSummary16.MeasurementTime = instant20;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse23 = locationDescriptionListServiceResponse15.setNextToken(instant20);
        java.time.Instant instant24 = locationDescriptionListServiceResponse15.getNextToken();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetActivities getActivities25 = getActivities14.setToStartTime(instant24);
        java.lang.String str26 = getActivities25.getSort();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RoleFlattened roleFlattened27 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RoleFlattened();
        java.lang.Boolean boolean28 = roleFlattened27.CanRemoveFieldVisits;
        roleFlattened27.Name = "MaxInstant";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationType putLocationType31 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationType();
        java.lang.String str32 = putLocationType31.Description;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_33 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray36 = new java.lang.String[] { "", "" };
        java.util.ArrayList<java.lang.String> strList37 = new java.util.ArrayList<java.lang.String>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList37, strArray36);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_39 = getObservationsV2_33.setDataClassifications((java.util.List<java.lang.String>) strList37);
        getObservationsV2_39.DepthUnitCustomId = "hi!";
        java.lang.String str42 = getObservationsV2_39.CustomId;
        java.util.List<java.lang.String> strList43 = getObservationsV2_39.getSearch();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_44 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray46 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList47 = new java.util.ArrayList<java.lang.String>();
        boolean boolean48 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList47, strArray46);
        getObservationsV2_44.SpecimenIds = strList47;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags50 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray54 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList55 = new java.util.ArrayList<java.lang.String>();
        boolean boolean56 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList55, strArray54);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags57 = putLocationTags50.setTagUniqueIds(strList55);
        getObservationsV2_44.QualityControlTypes = strList55;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_59 = getObservationsV2_39.setMedia((java.util.List<java.lang.String>) strList55);
        putLocationType31.ExtendedAttributeDefinitionIds = strList55;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RoleFlattenedBase roleFlattenedBase61 = roleFlattened27.setRoleApprovalTransitions(strList55);
        getActivities25.SamplingLocationIds = strList55;
        getSpecimens12.ActivityTypes = strList55;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetActivities getActivities64 = getActivities6.setActivityTemplateId((java.util.List<java.lang.String>) strList55);
        getSpecimens0.Search = strList55;
        org.junit.Assert.assertNull(strList1);
        org.junit.Assert.assertNull(instant2);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNotNull(getActivities6);
        org.junit.Assert.assertNotNull(getActivities8);
        org.junit.Assert.assertNull(strList10);
        org.junit.Assert.assertNotNull(getSpecimens12);
        org.junit.Assert.assertNull(strList13);
        org.junit.Assert.assertNotNull(dischargeSummary18);
        org.junit.Assert.assertNotNull(instant20);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse21);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse23);
        org.junit.Assert.assertNotNull(instant24);
        org.junit.Assert.assertNotNull(getActivities25);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertNull(boolean28);
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(getObservationsV2_39);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertNull(strList43);
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(strArray54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(putLocationTags57);
        org.junit.Assert.assertNotNull(getObservationsV2_59);
        org.junit.Assert.assertNotNull(roleFlattenedBase61);
        org.junit.Assert.assertNotNull(getActivities64);
    }

    @Test
    public void test53260() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest106.test53260");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetChartDataV2 getChartDataV2_0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetChartDataV2();
        java.lang.String str1 = getChartDataV2_0.getActivityCustomId();
        java.util.List<java.lang.String> strList2 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetChartDataV2 getChartDataV2_3 = getChartDataV2_0.setSearch(strList2);
        getChartDataV2_3.Sort = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ";
        java.lang.String str6 = getChartDataV2_3.SpecimenName;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetChartDataV2 getChartDataV2_8 = getChartDataV2_3.setSort("PT87591240H");
        java.lang.Double double9 = getChartDataV2_3.DepthValue;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(getChartDataV2_3);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNotNull(getChartDataV2_8);
        org.junit.Assert.assertNull(double9);
    }

    @Test
    public void test53261() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest106.test53261");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostStatisticalDerivedTimeSeries postStatisticalDerivedTimeSeries0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostStatisticalDerivedTimeSeries();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostStatisticalDerivedTimeSeries postStatisticalDerivedTimeSeries2 = postStatisticalDerivedTimeSeries0.setComment("'.'SSSSSSS");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostStatisticalDerivedTimeSeries postStatisticalDerivedTimeSeries4 = postStatisticalDerivedTimeSeries0.setLabel("'.'SSSSSSS");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostStatisticalDerivedTimeSeries postStatisticalDerivedTimeSeries6 = postStatisticalDerivedTimeSeries0.setParameter("/AQUARIUS/Provisioning/v1");
        java.lang.Integer int7 = postStatisticalDerivedTimeSeries0.PartialCoverageGrade;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostStatisticalDerivedTimeSeries postStatisticalDerivedTimeSeries9 = postStatisticalDerivedTimeSeries0.setUtcOffset("MaxInstant");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostStatisticalDerivedTimeSeries postStatisticalDerivedTimeSeries11 = postStatisticalDerivedTimeSeries9.setBinAnchorOffsetPeriod("POST");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostStatisticalDerivedTimeSeries postStatisticalDerivedTimeSeries13 = postStatisticalDerivedTimeSeries11.setObservationOffsetInMinutes((java.lang.Integer) 0);
        postStatisticalDerivedTimeSeries13.ComputationPeriodIdentifier = "2021.4.62.0";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostStatisticalDerivedTimeSeries postStatisticalDerivedTimeSeries17 = postStatisticalDerivedTimeSeries13.setTimeStepCount((java.lang.Integer) 1);
        org.junit.Assert.assertNotNull(postStatisticalDerivedTimeSeries2);
        org.junit.Assert.assertNotNull(postStatisticalDerivedTimeSeries4);
        org.junit.Assert.assertNotNull(postStatisticalDerivedTimeSeries6);
        org.junit.Assert.assertNull(int7);
        org.junit.Assert.assertNotNull(postStatisticalDerivedTimeSeries9);
        org.junit.Assert.assertNotNull(postStatisticalDerivedTimeSeries11);
        org.junit.Assert.assertNotNull(postStatisticalDerivedTimeSeries13);
        org.junit.Assert.assertNotNull(postStatisticalDerivedTimeSeries17);
    }

    @Test
    public void test53262() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest106.test53262");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Sensor sensor0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Sensor();
        java.time.Instant instant1 = sensor0.getLastModifiedUtc();
        java.time.Instant instant2 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Sensor sensor3 = sensor0.setLastModifiedUtc(instant2);
        java.lang.String str4 = sensor0.ParameterId;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Sensor sensor6 = sensor0.setLocationUniqueId("9999-12-31T23:59:59.999Z");
        java.lang.String str7 = sensor6.Name;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Sensor sensor9 = sensor6.setManufacturer("multipart/form-data; boundary=****44f0772e-c3ca-4316-8e2a-61ec8540d661****");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Sensor sensor11 = sensor6.setModel("http://MaxDurationhttp/json/reply/Integer");
        org.junit.Assert.assertNull(instant1);
        org.junit.Assert.assertNotNull(instant2);
        org.junit.Assert.assertNotNull(sensor3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNotNull(sensor6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(sensor9);
        org.junit.Assert.assertNotNull(sensor11);
    }

    @Test
    public void test53263() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest106.test53263");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditHistory auditHistory0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditHistory();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.OperationType operationType1 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.OperationType.DELETE;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditHistory auditHistory2 = auditHistory0.setOperation(operationType1);
        java.time.OffsetDateTime offsetDateTime3 = null;
        auditHistory2.ModificationTime = offsetDateTime3;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.OperationType operationType5 = auditHistory2.getOperation();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditHistory auditHistory6 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditHistory();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.OperationType operationType7 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.OperationType.DELETE;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditHistory auditHistory8 = auditHistory6.setOperation(operationType7);
        java.time.OffsetDateTime offsetDateTime9 = null;
        auditHistory8.ModificationTime = offsetDateTime9;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.OperationType operationType11 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.OperationType.UPDATE;
        auditHistory8.Operation = operationType11;
        auditHistory2.Operation = operationType11;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UserProfile userProfile14 = auditHistory2.UserProfile;
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditChange> auditChangeList15 = auditHistory2.getAuditChanges();
        org.junit.Assert.assertTrue("'" + operationType1 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.OperationType.DELETE + "'", operationType1.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.OperationType.DELETE));
        org.junit.Assert.assertNotNull(auditHistory2);
        org.junit.Assert.assertTrue("'" + operationType5 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.OperationType.DELETE + "'", operationType5.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.OperationType.DELETE));
        org.junit.Assert.assertTrue("'" + operationType7 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.OperationType.DELETE + "'", operationType7.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.OperationType.DELETE));
        org.junit.Assert.assertNotNull(auditHistory8);
        org.junit.Assert.assertTrue("'" + operationType11 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.OperationType.UPDATE + "'", operationType11.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.OperationType.UPDATE));
        org.junit.Assert.assertNull(userProfile14);
        org.junit.Assert.assertNull(auditChangeList15);
    }

    @Test
    public void test53264() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest106.test53264");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutActivityTemplate putActivityTemplate0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutActivityTemplate();
        java.lang.String str1 = putActivityTemplate0.getId();
        java.lang.String str2 = putActivityTemplate0.Id;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes3 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes5 = auditAttributes3.setCreationUserProfileId("'.'SSSSSSS");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutActivityTemplate putActivityTemplate6 = putActivityTemplate0.setAuditAttributes(auditAttributes5);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MediumType mediumType7 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MediumType.WATER;
        putActivityTemplate6.Medium = mediumType7;
        java.lang.String str9 = putActivityTemplate6.getComment();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ActivityTemplateType activityTemplateType10 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutActivityTemplate putActivityTemplate11 = putActivityTemplate6.setType(activityTemplateType10);
        java.lang.String str12 = putActivityTemplate6.getComment();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation13 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedFieldResult plannedFieldResult14 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation15 = observation13.setPlannedFieldResult(plannedFieldResult14);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultStatus resultStatus16 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation17 = observation15.setResultStatus(resultStatus16);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity postActivity18 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity();
        postActivity18.LoggerFileName = "hi!";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity plannedActivity21 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity postActivity22 = postActivity18.setPlannedActivity(plannedActivity21);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ActivityType activityType23 = postActivity18.Type;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFieldVisitActivityWithTemplate postFieldVisitActivityWithTemplate24 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFieldVisitActivityWithTemplate();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate25 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate();
        specimenTemplate25.CustomId = "hi!";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate28 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate29 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate();
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabInstructionTemplate> labInstructionTemplateList30 = specimenTemplate29.getLabInstructionTemplates();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate31 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate33 = specimenTemplate31.setCustomId("hi!");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate34 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate35 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate();
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabInstructionTemplate> labInstructionTemplateList36 = specimenTemplate35.LabInstructionTemplates;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate[] specimenTemplateArray37 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate[] { specimenTemplate25, specimenTemplate28, specimenTemplate29, specimenTemplate33, specimenTemplate34, specimenTemplate35 };
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate> specimenTemplateList38 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate>();
        boolean boolean39 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate>) specimenTemplateList38, specimenTemplateArray37);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFieldVisitActivityWithTemplate postFieldVisitActivityWithTemplate40 = postFieldVisitActivityWithTemplate24.setSpecimenTemplates((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate>) specimenTemplateList38);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.CollectionMethod collectionMethod41 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.CollectionMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFieldVisitActivityWithTemplate postFieldVisitActivityWithTemplate42 = postFieldVisitActivityWithTemplate40.setCollectionMethod(collectionMethod41);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity postActivity43 = postActivity18.setCollectionMethod(collectionMethod41);
        observation17.CollectionMethod = collectionMethod41;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutActivityTemplate putActivityTemplate45 = putActivityTemplate6.setCollectionMethod(collectionMethod41);
        java.lang.String str46 = collectionMethod41.getIdentifierOrganization();
        java.lang.String str47 = collectionMethod41.getId();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNotNull(auditAttributes5);
        org.junit.Assert.assertNotNull(putActivityTemplate6);
        org.junit.Assert.assertTrue("'" + mediumType7 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MediumType.WATER + "'", mediumType7.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MediumType.WATER));
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(putActivityTemplate11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(observation15);
        org.junit.Assert.assertNotNull(observation17);
        org.junit.Assert.assertNotNull(postActivity22);
        org.junit.Assert.assertNull(activityType23);
        org.junit.Assert.assertNull(labInstructionTemplateList30);
        org.junit.Assert.assertNotNull(specimenTemplate33);
        org.junit.Assert.assertNull(labInstructionTemplateList36);
        org.junit.Assert.assertNotNull(specimenTemplateArray37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(postFieldVisitActivityWithTemplate40);
        org.junit.Assert.assertNotNull(postFieldVisitActivityWithTemplate42);
        org.junit.Assert.assertNotNull(postActivity43);
        org.junit.Assert.assertNotNull(putActivityTemplate45);
        org.junit.Assert.assertNull(str46);
        org.junit.Assert.assertNull(str47);
    }

    @Test
    public void test53265() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest106.test53265");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Attachment attachment0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Attachment();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributesFull auditAttributesFull1 = attachment0.AuditAttributes;
        java.lang.String str2 = attachment0.Comment;
        java.lang.Integer int3 = attachment0.FileSize;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Attachment attachment5 = attachment0.setContentType("multipart/form-data; boundary=****bbcf5f9e-6ccf-4b63-91ab-6e645caf02af****");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Attachment attachment7 = attachment5.setFileName("multipart/form-data; boundary=****1eab67e1-84c8-4b82-aa06-d6c7526551f8****");
        java.time.OffsetDateTime offsetDateTime8 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Attachment attachment9 = attachment5.setDateTaken(offsetDateTime8);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributesFull auditAttributesFull10 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributesFull();
        java.lang.String str11 = auditAttributesFull10.getModificationUserProfileId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UserProfile userProfile12 = auditAttributesFull10.getModificationUserProfile();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UserProfile userProfile13 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributesFull auditAttributesFull14 = auditAttributesFull10.setModificationUserProfile(userProfile13);
        java.time.OffsetDateTime offsetDateTime15 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributesFull auditAttributesFull16 = auditAttributesFull14.setModificationTime(offsetDateTime15);
        auditAttributesFull14.ModificationUserProfileId = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributesFull auditAttributesFull20 = auditAttributesFull14.setModificationUserProfileId("-PT87591240H");
        java.time.OffsetDateTime offsetDateTime21 = null;
        auditAttributesFull20.CreationTime = offsetDateTime21;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UserProfile userProfile23 = null;
        auditAttributesFull20.CreationUserProfile = userProfile23;
        attachment5.AuditAttributes = auditAttributesFull20;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.User user26 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.User();
        java.util.List<java.lang.String> strList27 = user26.getRoles();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.User user29 = user26.setEmail("hi!");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.User user31 = user29.setEmail("POST");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UserType userType32 = user31.UserType;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UserProfile userProfile33 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UserProfile();
        java.lang.String str34 = userProfile33.LastName;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.User user35 = user31.setUserProfile(userProfile33);
        auditAttributesFull20.CreationUserProfile = userProfile33;
        org.junit.Assert.assertNull(auditAttributesFull1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(int3);
        org.junit.Assert.assertNotNull(attachment5);
        org.junit.Assert.assertNotNull(attachment7);
        org.junit.Assert.assertNotNull(attachment9);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNull(userProfile12);
        org.junit.Assert.assertNotNull(auditAttributesFull14);
        org.junit.Assert.assertNotNull(auditAttributesFull16);
        org.junit.Assert.assertNotNull(auditAttributesFull20);
        org.junit.Assert.assertNull(strList27);
        org.junit.Assert.assertNotNull(user29);
        org.junit.Assert.assertNotNull(user31);
        org.junit.Assert.assertNull(userType32);
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertNotNull(user35);
    }

    @Test
    public void test53266() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest106.test53266");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitDataServiceRequest fieldVisitDataServiceRequest0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitDataServiceRequest();
        fieldVisitDataServiceRequest0.ApplyRounding = true;
        java.lang.String str3 = fieldVisitDataServiceRequest0.getFieldVisitIdentifier();
        fieldVisitDataServiceRequest0.DiscreteMeasurementActivity = "";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitDataServiceRequest fieldVisitDataServiceRequest7 = fieldVisitDataServiceRequest0.setIncludeNodeDetails((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitDataServiceRequest fieldVisitDataServiceRequest9 = fieldVisitDataServiceRequest0.setIncludeCrossSectionSurveyProfile((java.lang.Boolean) true);
        fieldVisitDataServiceRequest9.DiscreteMeasurementActivity = "/AQUARIUS/Publish/v2";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitDataServiceRequest fieldVisitDataServiceRequest13 = fieldVisitDataServiceRequest9.setConvertToStandardReferenceDatum("yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSSSSSZZZZZ");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitDataServiceRequest fieldVisitDataServiceRequest15 = fieldVisitDataServiceRequest13.setConvertToStandardReferenceDatum("multipart/form-data; boundary=****2e497db8-6b91-47d6-99bc-df65af225bf8****");
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(fieldVisitDataServiceRequest7);
        org.junit.Assert.assertNotNull(fieldVisitDataServiceRequest9);
        org.junit.Assert.assertNotNull(fieldVisitDataServiceRequest13);
        org.junit.Assert.assertNotNull(fieldVisitDataServiceRequest15);
    }

    @Test
    public void test53267() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest106.test53267");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LocationObservationsGroup locationObservationsGroup0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LocationObservationsGroup();
        java.lang.Integer int1 = locationObservationsGroup0.TotalCount;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocation samplingLocation2 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LocationObservationsGroup locationObservationsGroup3 = locationObservationsGroup0.setSamplingLocation(samplingLocation2);
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation> observationList4 = locationObservationsGroup3.Observations;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LocationObservationsGroup locationObservationsGroup6 = locationObservationsGroup3.setTotalCount((java.lang.Integer) 10);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocation samplingLocation7 = locationObservationsGroup3.SamplingLocation;
        locationObservationsGroup3.TotalCount = 1;
        org.junit.Assert.assertNull(int1);
        org.junit.Assert.assertNotNull(locationObservationsGroup3);
        org.junit.Assert.assertNull(observationList4);
        org.junit.Assert.assertNotNull(locationObservationsGroup6);
        org.junit.Assert.assertNull(samplingLocation7);
    }

    @Test
    public void test53268() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest106.test53268");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutCollectionMethod putCollectionMethod0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutCollectionMethod();
        java.lang.String str1 = putCollectionMethod0.Name;
        putCollectionMethod0.Id = "MinInstant";
        java.lang.String str4 = putCollectionMethod0.getIdentifierOrganization();
        putCollectionMethod0.Id = "http://MaxDurationhttp/json/reply/ArrayList";
        java.lang.Object obj7 = putCollectionMethod0.getResponseType();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutCollectionMethod putCollectionMethod9 = putCollectionMethod0.setIdentifierOrganization("/AQUARIUS");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod10 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLabAnalysisMethod postLabAnalysisMethod11 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLabAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes12 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLabAnalysisMethod postLabAnalysisMethod13 = postLabAnalysisMethod11.setAuditAttributes(auditAttributes12);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty[] observedPropertyArray14 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty> observedPropertyList15 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty>) observedPropertyList15, observedPropertyArray14);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLabAnalysisMethod postLabAnalysisMethod17 = postLabAnalysisMethod13.setObservedProperties((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty>) observedPropertyList15);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod18 = analysisMethod10.setObservedProperties((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty>) observedPropertyList15);
        analysisMethod18.MethodId = "multipart/form-data; boundary=****bbcf5f9e-6ccf-4b63-91ab-6e645caf02af****";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLabReport postLabReport21 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLabReport();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFieldVisitActivityWithTemplate postFieldVisitActivityWithTemplate22 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFieldVisitActivityWithTemplate();
        java.lang.String str23 = postFieldVisitActivityWithTemplate22.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFieldVisitActivityWithTemplate postFieldVisitActivityWithTemplate25 = postFieldVisitActivityWithTemplate22.setCustomId("'.'SSSSSSS");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedFieldResult plannedFieldResult26 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedFieldResult();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes27 = plannedFieldResult26.AuditAttributes;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails28 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails30 = labResultDetails28.setAnalysisComment("/AQUARIUS/Acquisition/v2");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes31 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails32 = labResultDetails30.setAuditAttributes(auditAttributes31);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedFieldResult plannedFieldResult33 = plannedFieldResult26.setAuditAttributes(auditAttributes31);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroup analyticalGroup34 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroup();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupType analyticalGroupType35 = analyticalGroup34.getType();
        analyticalGroup34.Name = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSSSSSZZZZZ";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroup analyticalGroup38 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroup();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem analyticalGroupItem39 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod40 = analyticalGroupItem39.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem analyticalGroupItem41 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod42 = analyticalGroupItem41.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod43 = analyticalGroupItem41.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem analyticalGroupItem44 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod45 = analyticalGroupItem44.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod46 = analyticalGroupItem44.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod47 = null;
        analyticalGroupItem44.AnalysisMethod = analysisMethod47;
        java.lang.String str49 = analyticalGroupItem44.getHoldingTime();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem analyticalGroupItem50 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod51 = analyticalGroupItem50.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod52 = analyticalGroupItem50.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem analyticalGroupItem53 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod54 = analyticalGroupItem53.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem analyticalGroupItem55 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod56 = analyticalGroupItem55.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod57 = analyticalGroupItem55.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod58 = null;
        analyticalGroupItem55.AnalysisMethod = analysisMethod58;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem[] analyticalGroupItemArray60 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem[] { analyticalGroupItem39, analyticalGroupItem41, analyticalGroupItem44, analyticalGroupItem50, analyticalGroupItem53, analyticalGroupItem55 };
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem> analyticalGroupItemList61 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem>();
        boolean boolean62 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem>) analyticalGroupItemList61, analyticalGroupItemArray60);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroup analyticalGroup63 = analyticalGroup38.setAnalyticalGroupItems((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem>) analyticalGroupItemList61);
        analyticalGroup34.AnalyticalGroupItems = analyticalGroupItemList61;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes65 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes();
        analyticalGroup34.AuditAttributes = auditAttributes65;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedFieldResult plannedFieldResult67 = plannedFieldResult33.setAuditAttributes(auditAttributes65);
        postFieldVisitActivityWithTemplate25.AuditAttributes = auditAttributes65;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLabReport postLabReport69 = postLabReport21.setAuditAttributes(auditAttributes65);
        java.time.OffsetDateTime offsetDateTime70 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLabReport postLabReport71 = postLabReport21.setDateReceived(offsetDateTime70);
        postLabReport21.CaseNarrative = "MinInstant";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation74 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedFieldResult plannedFieldResult75 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation76 = observation74.setPlannedFieldResult(plannedFieldResult75);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabInstruction labInstruction77 = null;
        observation76.LabInstruction = labInstruction77;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationStatistics observationStatistics79 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation80 = observation76.setStatistics(observationStatistics79);
        java.time.OffsetDateTime offsetDateTime81 = observation80.getResultTime();
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple> importHistoryEventSimpleList82 = observation80.ImportHistoryEventSimples;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty observedProperty83 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation84 = observation80.setObservedProperty(observedProperty83);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultGrade resultGrade85 = observation84.ResultGrade;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails86 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails88 = labResultDetails86.setAnalysisComment("/AQUARIUS/Acquisition/v2");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes89 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails90 = labResultDetails88.setAuditAttributes(auditAttributes89);
        observation84.AuditAttributes = auditAttributes89;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLabReport postLabReport92 = postLabReport21.setAuditAttributes(auditAttributes89);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes93 = postLabReport92.AuditAttributes;
        analysisMethod18.AuditAttributes = auditAttributes93;
        putCollectionMethod0.AuditAttributes = auditAttributes93;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNotNull(obj7);
        org.junit.Assert.assertEquals(obj7.toString(), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$CollectionMethod");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj7), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$CollectionMethod");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj7), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$CollectionMethod");
        org.junit.Assert.assertNotNull(putCollectionMethod9);
        org.junit.Assert.assertNotNull(postLabAnalysisMethod13);
        org.junit.Assert.assertNotNull(observedPropertyArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(postLabAnalysisMethod17);
        org.junit.Assert.assertNotNull(analysisMethod18);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertNotNull(postFieldVisitActivityWithTemplate25);
        org.junit.Assert.assertNull(auditAttributes27);
        org.junit.Assert.assertNotNull(labResultDetails30);
        org.junit.Assert.assertNotNull(labResultDetails32);
        org.junit.Assert.assertNotNull(plannedFieldResult33);
        org.junit.Assert.assertNull(analyticalGroupType35);
        org.junit.Assert.assertNull(analysisMethod40);
        org.junit.Assert.assertNull(analysisMethod42);
        org.junit.Assert.assertNull(analysisMethod43);
        org.junit.Assert.assertNull(analysisMethod45);
        org.junit.Assert.assertNull(analysisMethod46);
        org.junit.Assert.assertNull(str49);
        org.junit.Assert.assertNull(analysisMethod51);
        org.junit.Assert.assertNull(analysisMethod52);
        org.junit.Assert.assertNull(analysisMethod54);
        org.junit.Assert.assertNull(analysisMethod56);
        org.junit.Assert.assertNull(analysisMethod57);
        org.junit.Assert.assertNotNull(analyticalGroupItemArray60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertNotNull(analyticalGroup63);
        org.junit.Assert.assertNotNull(plannedFieldResult67);
        org.junit.Assert.assertNotNull(postLabReport69);
        org.junit.Assert.assertNotNull(postLabReport71);
        org.junit.Assert.assertNotNull(observation76);
        org.junit.Assert.assertNotNull(observation80);
        org.junit.Assert.assertNull(offsetDateTime81);
        org.junit.Assert.assertNull(importHistoryEventSimpleList82);
        org.junit.Assert.assertNotNull(observation84);
        org.junit.Assert.assertNull(resultGrade85);
        org.junit.Assert.assertNotNull(labResultDetails88);
        org.junit.Assert.assertNotNull(labResultDetails90);
        org.junit.Assert.assertNotNull(postLabReport92);
        org.junit.Assert.assertNotNull(auditAttributes93);
    }

    @Test
    public void test53269() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest106.test53269");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedTimeSeriesInfo timeAlignedTimeSeriesInfo0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedTimeSeriesInfo();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedTimeSeriesInfo timeAlignedTimeSeriesInfo2 = timeAlignedTimeSeriesInfo0.setLabel("multipart/form-data; boundary=****9fadde69-3f13-40c4-a87c-0f3f51c2dd35****");
        timeAlignedTimeSeriesInfo0.Parameter = "multipart/form-data; boundary=****7eff1774-b6b0-471a-961c-156c64359366****";
        java.lang.String str5 = timeAlignedTimeSeriesInfo0.Label;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedTimeSeriesInfo timeAlignedTimeSeriesInfo7 = timeAlignedTimeSeriesInfo0.setUnit("/AQUARIUS/Publish/v2");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedTimeSeriesInfo timeAlignedTimeSeriesInfo9 = timeAlignedTimeSeriesInfo0.setLabel("yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ");
        org.junit.Assert.assertNotNull(timeAlignedTimeSeriesInfo2);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "multipart/form-data; boundary=****9fadde69-3f13-40c4-a87c-0f3f51c2dd35****" + "'", str5, "multipart/form-data; boundary=****9fadde69-3f13-40c4-a87c-0f3f51c2dd35****");
        org.junit.Assert.assertNotNull(timeAlignedTimeSeriesInfo7);
        org.junit.Assert.assertNotNull(timeAlignedTimeSeriesInfo9);
    }

    @Test
    public void test53270() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest106.test53270");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutUserV2 putUserV2_0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutUserV2();
        java.util.List<java.lang.String> strList1 = putUserV2_0.getAccessGroups();
        putUserV2_0.CustomId = "MinInstant";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutBulkEditResultGradesV2 putBulkEditResultGradesV2_4 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutBulkEditResultGradesV2();
        java.lang.Double double5 = putBulkEditResultGradesV2_4.DepthValue;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_6 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray8 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList9 = new java.util.ArrayList<java.lang.String>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList9, strArray8);
        getObservationsV2_6.SpecimenIds = strList9;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags12 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray16 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList17 = new java.util.ArrayList<java.lang.String>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList17, strArray16);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags19 = putLocationTags12.setTagUniqueIds(strList17);
        getObservationsV2_6.QualityControlTypes = strList17;
        java.util.List<java.lang.String> strList21 = getObservationsV2_6.getAnalyticalGroupIds();
        java.util.List<java.lang.String> strList22 = getObservationsV2_6.DataClassifications;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.FieldResultType fieldResultType23 = getObservationsV2_6.FieldResultType;
        java.time.Instant instant24 = getObservationsV2_6.getEndObservedTime();
        java.lang.String str25 = getObservationsV2_6.DepthUnitCustomId;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags26 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray30 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList31 = new java.util.ArrayList<java.lang.String>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList31, strArray30);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags33 = putLocationTags26.setTagUniqueIds(strList31);
        java.util.ArrayList<java.lang.String> strList34 = putLocationTags33.TagUniqueIds;
        getObservationsV2_6.ProjectIds = strList34;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutBulkEditResultGradesV2 putBulkEditResultGradesV2_36 = putBulkEditResultGradesV2_4.setSearch((java.util.List<java.lang.String>) strList34);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.LocationDatumPeriod locationDatumPeriod37 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.LocationDatumPeriod();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.LocationDatumPeriodBase locationDatumPeriodBase39 = locationDatumPeriod37.setComment("'.'SSSSSSS");
        java.lang.Double double40 = locationDatumPeriodBase39.Elevation;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Qualifier qualifier41 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Qualifier();
        java.time.Instant instant42 = qualifier41.DateApplied;
        java.lang.String str43 = qualifier41.User;
        java.lang.String str44 = qualifier41.getIdentifier();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest45 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest();
        java.lang.Object obj46 = timeAlignedDataServiceRequest45.getResponseType();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse47 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant48 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse49 = locationDescriptionListServiceResponse47.setNextToken(instant48);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest50 = timeAlignedDataServiceRequest45.setQueryFrom(instant48);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Qualifier qualifier51 = qualifier41.setDateApplied(instant48);
        java.time.Instant instant52 = qualifier51.getDateApplied();
        locationDatumPeriodBase39.ValidFrom = instant52;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutBulkEditResultGradesV2 putBulkEditResultGradesV2_54 = putBulkEditResultGradesV2_36.setStartModificationTime(instant52);
        java.time.Instant instant55 = putBulkEditResultGradesV2_54.getStartResultTime();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Tag tag56 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Tag();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Tag tag58 = tag56.setAppliesToAttachments((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Tag tag60 = tag56.setAppliesToLocations((java.lang.Boolean) true);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Processor processor61 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Processor();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostTag postTag62 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostTag();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_63 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray66 = new java.lang.String[] { "", "" };
        java.util.ArrayList<java.lang.String> strList67 = new java.util.ArrayList<java.lang.String>();
        boolean boolean68 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList67, strArray66);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_69 = getObservationsV2_63.setDataClassifications((java.util.List<java.lang.String>) strList67);
        postTag62.PickListValues = strList67;
        java.util.ArrayList<java.lang.String> strList71 = postTag62.PickListValues;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Processor processor72 = processor61.setInputTimeSeriesUniqueIds(strList71);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Processor processor74 = processor72.setDescription("/AQUARIUS/Acquisition/v2");
        java.util.ArrayList<java.lang.String> strList75 = processor74.InputTimeSeriesUniqueIds;
        tag60.PickListValues = strList75;
        putBulkEditResultGradesV2_54.ResultStatuses = strList75;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutUserV2 putUserV2_78 = putUserV2_0.setAccessGroups((java.util.List<java.lang.String>) strList75);
        java.lang.Object obj79 = putUserV2_0.getResponseType();
        org.junit.Assert.assertNull(strList1);
        org.junit.Assert.assertNull(double5);
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(putLocationTags19);
        org.junit.Assert.assertNull(strList21);
        org.junit.Assert.assertNull(strList22);
        org.junit.Assert.assertNull(fieldResultType23);
        org.junit.Assert.assertNull(instant24);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(putLocationTags33);
        org.junit.Assert.assertNotNull(strList34);
        org.junit.Assert.assertNotNull(putBulkEditResultGradesV2_36);
        org.junit.Assert.assertNotNull(locationDatumPeriodBase39);
        org.junit.Assert.assertNull(double40);
        org.junit.Assert.assertNull(instant42);
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertNull(str44);
        org.junit.Assert.assertNotNull(obj46);
        org.junit.Assert.assertEquals(obj46.toString(), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj46), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj46), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertNotNull(instant48);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse49);
        org.junit.Assert.assertNotNull(timeAlignedDataServiceRequest50);
        org.junit.Assert.assertNotNull(qualifier51);
        org.junit.Assert.assertNotNull(instant52);
        org.junit.Assert.assertNotNull(putBulkEditResultGradesV2_54);
        org.junit.Assert.assertNull(instant55);
        org.junit.Assert.assertNotNull(tag58);
        org.junit.Assert.assertNotNull(tag60);
        org.junit.Assert.assertNotNull(strArray66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertNotNull(getObservationsV2_69);
        org.junit.Assert.assertNotNull(strList71);
        org.junit.Assert.assertNotNull(processor72);
        org.junit.Assert.assertNotNull(processor74);
        org.junit.Assert.assertNotNull(strList75);
        org.junit.Assert.assertNotNull(putUserV2_78);
        org.junit.Assert.assertNotNull(obj79);
        org.junit.Assert.assertEquals(obj79.toString(), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$User");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj79), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$User");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj79), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$User");
    }

    @Test
    public void test53271() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest106.test53271");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CalibrationCheck calibrationCheck0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CalibrationCheck();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.StandardDetails standardDetails1 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.StandardDetails();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CalibrationCheck calibrationCheck2 = calibrationCheck0.setStandardDetails(standardDetails1);
        java.lang.String str3 = calibrationCheck0.NodeDetails;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.OpenWaterData openWaterData4 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.OpenWaterData();
        java.lang.Double double5 = openWaterData4.getDryLineCorrection();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary6 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        dischargeSummary6.Reviewer = "";
        java.time.Instant instant9 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        dischargeSummary6.MeasurementTime = instant9;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.BaseFlowType baseFlowType11 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.BaseFlowType.BaseFlow;
        dischargeSummary6.BaseFlow = baseFlowType11;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.BaseFlowType baseFlowType13 = dischargeSummary6.BaseFlow;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingModelDescriptionListServiceResponse ratingModelDescriptionListServiceResponse14 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingModelDescriptionListServiceResponse();
        java.util.List<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingModelDescription> ratingModelDescriptionList15 = ratingModelDescriptionListServiceResponse14.RatingModelDescriptions;
        java.time.Instant instant16 = ratingModelDescriptionListServiceResponse14.getNextToken();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CalibrationCheck calibrationCheck17 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CalibrationCheck();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CalibrationCheckType calibrationCheckType18 = calibrationCheck17.getCalibrationCheckType();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay19 = calibrationCheck17.Value;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse20 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary21 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary23 = dischargeSummary21.setPublish((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse24 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant25 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse26 = locationDescriptionListServiceResponse24.setNextToken(instant25);
        dischargeSummary21.MeasurementTime = instant25;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse28 = locationDescriptionListServiceResponse20.setNextToken(instant25);
        java.time.Instant instant29 = locationDescriptionListServiceResponse20.getNextToken();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CalibrationCheck calibrationCheck30 = calibrationCheck17.setTime(instant29);
        java.time.Instant instant31 = calibrationCheck30.Time;
        ratingModelDescriptionListServiceResponse14.NextToken = instant31;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary33 = dischargeSummary6.setMeasurementEndTime(instant31);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay34 = dischargeSummary33.MeanGageHeight;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary36 = dischargeSummary33.setGageHeightComments("http");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CrossSectionSurveyActivity crossSectionSurveyActivity37 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CrossSectionSurveyActivity();
        java.lang.String str38 = crossSectionSurveyActivity37.Channel;
        java.lang.String str39 = crossSectionSurveyActivity37.Channel;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.AdcpDischargeActivity adcpDischargeActivity40 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.AdcpDischargeActivity();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.AdcpDischargeActivity adcpDischargeActivity42 = adcpDischargeActivity40.setSoftwareVersion("yyyy'-'MM'-'dd'T'HH':'mm':'ss");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay43 = adcpDischargeActivity42.getDischargeCoefficientVariation();
        adcpDischargeActivity42.NodeDetails = "yyyy'-'MM'-'dd'T'HH':'mm':'ss";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary46 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay47 = dischargeSummary46.getMeanGageHeight();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay48 = dischargeSummary46.Discharge;
        java.lang.Integer int49 = dischargeSummary46.getGradeCode();
        java.lang.String str50 = dischargeSummary46.MeasurementId;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DatumConvertedQuantityWithDisplay datumConvertedQuantityWithDisplay51 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DatumConvertedQuantityWithDisplay();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary52 = dischargeSummary46.setAlternateRatingDischarge((com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay) datumConvertedQuantityWithDisplay51);
        adcpDischargeActivity42.Area = datumConvertedQuantityWithDisplay51;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CrossSectionSurveyActivity crossSectionSurveyActivity54 = crossSectionSurveyActivity37.setStage((com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay) datumConvertedQuantityWithDisplay51);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary55 = dischargeSummary36.setGageHeightAdjustmentAmount((com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay) datumConvertedQuantityWithDisplay51);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.OpenWaterData openWaterData56 = openWaterData4.setDistanceToMeter((com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay) datumConvertedQuantityWithDisplay51);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.OpenWaterData openWaterData58 = openWaterData56.setSuspensionWeight("multipart/form-data; boundary=****ee0ec537-fde4-45ee-9c35-68c37cf65c1c****");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.OpenWaterData openWaterData60 = openWaterData58.setDryLineCorrection((java.lang.Double) (-1.0d));
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.OpenWaterData openWaterData62 = openWaterData58.setWetLineCorrection((java.lang.Double) 10.0d);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay63 = openWaterData58.DistanceToMeter;
        calibrationCheck0.Value = quantityWithDisplay63;
        org.junit.Assert.assertNotNull(calibrationCheck2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(double5);
        org.junit.Assert.assertNotNull(instant9);
        org.junit.Assert.assertTrue("'" + baseFlowType11 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.BaseFlowType.BaseFlow + "'", baseFlowType11.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.BaseFlowType.BaseFlow));
        org.junit.Assert.assertTrue("'" + baseFlowType13 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.BaseFlowType.BaseFlow + "'", baseFlowType13.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.BaseFlowType.BaseFlow));
        org.junit.Assert.assertNull(ratingModelDescriptionList15);
        org.junit.Assert.assertNull(instant16);
        org.junit.Assert.assertNull(calibrationCheckType18);
        org.junit.Assert.assertNull(doubleWithDisplay19);
        org.junit.Assert.assertNotNull(dischargeSummary23);
        org.junit.Assert.assertNotNull(instant25);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse26);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse28);
        org.junit.Assert.assertNotNull(instant29);
        org.junit.Assert.assertNotNull(calibrationCheck30);
        org.junit.Assert.assertNotNull(instant31);
        org.junit.Assert.assertNotNull(dischargeSummary33);
        org.junit.Assert.assertNull(quantityWithDisplay34);
        org.junit.Assert.assertNotNull(dischargeSummary36);
        org.junit.Assert.assertNull(str38);
        org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertNotNull(adcpDischargeActivity42);
        org.junit.Assert.assertNull(doubleWithDisplay43);
        org.junit.Assert.assertNull(quantityWithDisplay47);
        org.junit.Assert.assertNull(quantityWithDisplay48);
        org.junit.Assert.assertNull(int49);
        org.junit.Assert.assertNull(str50);
        org.junit.Assert.assertNotNull(dischargeSummary52);
        org.junit.Assert.assertNotNull(crossSectionSurveyActivity54);
        org.junit.Assert.assertNotNull(dischargeSummary55);
        org.junit.Assert.assertNotNull(openWaterData56);
        org.junit.Assert.assertNotNull(openWaterData58);
        org.junit.Assert.assertNotNull(openWaterData60);
        org.junit.Assert.assertNotNull(openWaterData62);
        org.junit.Assert.assertNotNull(quantityWithDisplay63);
    }

    @Test
    public void test53272() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest106.test53272");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ActivityWithDetails activityWithDetails0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ActivityWithDetails();
        activityWithDetails0.LoggerFileName = "'.'SSSSSSS";
        java.time.OffsetDateTime offsetDateTime3 = activityWithDetails0.getEndTime();
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenNestedInActivity> specimenNestedInActivityList4 = activityWithDetails0.Specimens;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutActivity putActivity5 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutActivity();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity quantity6 = null;
        putActivity5.Depth = quantity6;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricResult[] metricResultArray8 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricResult[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricResult> metricResultList9 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricResult>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricResult>) metricResultList9, metricResultArray8);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutActivity putActivity11 = putActivity5.setMetricResults((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricResult>) metricResultList9);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ActivityWithDetails activityWithDetails12 = activityWithDetails0.setMetricResults((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricResult>) metricResultList9);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutActivity putActivity13 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutActivity();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenNestedInActivity[] specimenNestedInActivityArray14 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenNestedInActivity[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenNestedInActivity> specimenNestedInActivityList15 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenNestedInActivity>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenNestedInActivity>) specimenNestedInActivityList15, specimenNestedInActivityArray14);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutActivity putActivity17 = putActivity13.setSpecimens((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenNestedInActivity>) specimenNestedInActivityList15);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ActivityWithDetails activityWithDetails18 = activityWithDetails12.setSpecimens((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenNestedInActivity>) specimenNestedInActivityList15);
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttribute> extendedAttributeList19 = activityWithDetails18.getExtendedAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.FieldVisit fieldVisit20 = activityWithDetails18.FieldVisit;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation21 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedFieldResult plannedFieldResult22 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation23 = observation21.setPlannedFieldResult(plannedFieldResult22);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabInstruction labInstruction24 = null;
        observation23.LabInstruction = labInstruction24;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.FieldVisit fieldVisit26 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.FieldVisit();
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment> domainObjectAttachmentList27 = fieldVisit26.Attachments;
        observation23.FieldVisit = fieldVisit26;
        java.time.OffsetDateTime offsetDateTime29 = fieldVisit26.getStartTime();
        activityWithDetails18.FieldVisit = fieldVisit26;
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag> samplingContextTagList31 = activityWithDetails18.getSamplingContextTags();
        org.junit.Assert.assertNull(offsetDateTime3);
        org.junit.Assert.assertNull(specimenNestedInActivityList4);
        org.junit.Assert.assertNotNull(metricResultArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(putActivity11);
        org.junit.Assert.assertNotNull(activityWithDetails12);
        org.junit.Assert.assertNotNull(specimenNestedInActivityArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(putActivity17);
        org.junit.Assert.assertNotNull(activityWithDetails18);
        org.junit.Assert.assertNull(extendedAttributeList19);
        org.junit.Assert.assertNull(fieldVisit20);
        org.junit.Assert.assertNotNull(observation23);
        org.junit.Assert.assertNull(domainObjectAttachmentList27);
        org.junit.Assert.assertNull(offsetDateTime29);
        org.junit.Assert.assertNull(samplingContextTagList31);
    }

    @Test
    public void test53273() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest106.test53273");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostExtendedAttribute postExtendedAttribute0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostExtendedAttribute();
        java.lang.String str1 = postExtendedAttribute0.getKey();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.EditableExtendedAttribute editableExtendedAttribute3 = postExtendedAttribute0.setVisibleInDatasetList((java.lang.Boolean) true);
        java.lang.Boolean boolean4 = editableExtendedAttribute3.isRequired();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.EditableExtendedAttribute editableExtendedAttribute6 = editableExtendedAttribute3.setKey("multipart/form-data; boundary=****bbcf5f9e-6ccf-4b63-91ab-6e645caf02af****");
        java.lang.String str7 = editableExtendedAttribute6.getKey();
        java.lang.String str8 = editableExtendedAttribute6.getDefaultValue();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.EditableExtendedAttribute editableExtendedAttribute10 = editableExtendedAttribute6.setRequired((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostTag postTag11 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostTag();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_12 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray15 = new java.lang.String[] { "", "" };
        java.util.ArrayList<java.lang.String> strList16 = new java.util.ArrayList<java.lang.String>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList16, strArray15);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_18 = getObservationsV2_12.setDataClassifications((java.util.List<java.lang.String>) strList16);
        postTag11.PickListValues = strList16;
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.TagApplicability> tagApplicabilityList20 = postTag11.Applicability;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.TagRequestBase tagRequestBase22 = postTag11.setKey("");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.TagValueType tagValueType23 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.TagValueType.PickList;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.TagRequestBase tagRequestBase24 = tagRequestBase22.setValueType(tagValueType23);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.EditableExtendedAttribute editableExtendedAttribute25 = editableExtendedAttribute6.setValueType(tagValueType23);
        editableExtendedAttribute25.Key = "multipart/form-data; boundary=****3dee2050-7d6c-400f-bd51-383a1324f5dd****";
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(editableExtendedAttribute3);
        org.junit.Assert.assertNull(boolean4);
        org.junit.Assert.assertNotNull(editableExtendedAttribute6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "multipart/form-data; boundary=****bbcf5f9e-6ccf-4b63-91ab-6e645caf02af****" + "'", str7, "multipart/form-data; boundary=****bbcf5f9e-6ccf-4b63-91ab-6e645caf02af****");
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(editableExtendedAttribute10);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(getObservationsV2_18);
        org.junit.Assert.assertNull(tagApplicabilityList20);
        org.junit.Assert.assertNotNull(tagRequestBase22);
        org.junit.Assert.assertTrue("'" + tagValueType23 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.TagValueType.PickList + "'", tagValueType23.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.TagValueType.PickList));
        org.junit.Assert.assertNotNull(tagRequestBase24);
        org.junit.Assert.assertNotNull(editableExtendedAttribute25);
    }

    @Test
    public void test53274() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest106.test53274");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDescription timeSeriesDescription0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDescription();
        java.lang.String str1 = timeSeriesDescription0.Parameter;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDescription timeSeriesDescription3 = timeSeriesDescription0.setPublish((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.LocationDatumPeriod locationDatumPeriod4 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.LocationDatumPeriod();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.LocationDatumPeriodBase locationDatumPeriodBase6 = locationDatumPeriod4.setComment("'.'SSSSSSS");
        java.lang.Double double7 = locationDatumPeriodBase6.Elevation;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Qualifier qualifier8 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Qualifier();
        java.time.Instant instant9 = qualifier8.DateApplied;
        java.lang.String str10 = qualifier8.User;
        java.lang.String str11 = qualifier8.getIdentifier();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest12 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest();
        java.lang.Object obj13 = timeAlignedDataServiceRequest12.getResponseType();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse14 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant15 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse16 = locationDescriptionListServiceResponse14.setNextToken(instant15);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest17 = timeAlignedDataServiceRequest12.setQueryFrom(instant15);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Qualifier qualifier18 = qualifier8.setDateApplied(instant15);
        java.time.Instant instant19 = qualifier18.getDateApplied();
        locationDatumPeriodBase6.ValidFrom = instant19;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDescription timeSeriesDescription21 = timeSeriesDescription3.setLastModified(instant19);
        java.lang.Boolean boolean22 = timeSeriesDescription21.isPublish();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest23 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest();
        java.lang.Object obj24 = timeAlignedDataServiceRequest23.getResponseType();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Sensor sensor25 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Sensor();
        java.time.Instant instant26 = sensor25.getLastModifiedUtc();
        java.time.Instant instant27 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Sensor sensor28 = sensor25.setLastModifiedUtc(instant27);
        java.time.Instant instant29 = sensor25.LastModifiedUtc;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest30 = timeAlignedDataServiceRequest23.setQueryTo(instant29);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest31 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest();
        java.lang.Object obj32 = timeAlignedDataServiceRequest31.getResponseType();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Sensor sensor33 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Sensor();
        java.time.Instant instant34 = sensor33.getLastModifiedUtc();
        java.time.Instant instant35 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Sensor sensor36 = sensor33.setLastModifiedUtc(instant35);
        java.time.Instant instant37 = sensor33.LastModifiedUtc;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest38 = timeAlignedDataServiceRequest31.setQueryTo(instant37);
        timeAlignedDataServiceRequest30.QueryTo = instant37;
        timeSeriesDescription21.CorrectedStartTime = instant37;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDescription timeSeriesDescription42 = timeSeriesDescription21.setSubLocationIdentifier("****8e3722aa-afdf-4137-ab41-bb1bb285cdf2****");
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(timeSeriesDescription3);
        org.junit.Assert.assertNotNull(locationDatumPeriodBase6);
        org.junit.Assert.assertNull(double7);
        org.junit.Assert.assertNull(instant9);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNotNull(obj13);
        org.junit.Assert.assertEquals(obj13.toString(), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj13), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj13), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertNotNull(instant15);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse16);
        org.junit.Assert.assertNotNull(timeAlignedDataServiceRequest17);
        org.junit.Assert.assertNotNull(qualifier18);
        org.junit.Assert.assertNotNull(instant19);
        org.junit.Assert.assertNotNull(timeSeriesDescription21);
        org.junit.Assert.assertEquals("'" + boolean22 + "' != '" + false + "'", boolean22, false);
        org.junit.Assert.assertNotNull(obj24);
        org.junit.Assert.assertEquals(obj24.toString(), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj24), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj24), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertNull(instant26);
        org.junit.Assert.assertNotNull(instant27);
        org.junit.Assert.assertNotNull(sensor28);
        org.junit.Assert.assertNotNull(instant29);
        org.junit.Assert.assertNotNull(timeAlignedDataServiceRequest30);
        org.junit.Assert.assertNotNull(obj32);
        org.junit.Assert.assertEquals(obj32.toString(), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj32), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj32), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertNull(instant34);
        org.junit.Assert.assertNotNull(instant35);
        org.junit.Assert.assertNotNull(sensor36);
        org.junit.Assert.assertNotNull(instant37);
        org.junit.Assert.assertNotNull(timeAlignedDataServiceRequest38);
        org.junit.Assert.assertNotNull(timeSeriesDescription42);
    }

    @Test
    public void test53275() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest106.test53275");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutLabAnalysisMethod putLabAnalysisMethod0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutLabAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostAnalysisMethod postAnalysisMethod1 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostAnalysisMethod();
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple> importHistoryEventSimpleList2 = postAnalysisMethod1.ImportHistoryEventSimples;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLabAnalysisMethod postLabAnalysisMethod3 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLabAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes4 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLabAnalysisMethod postLabAnalysisMethod5 = postLabAnalysisMethod3.setAuditAttributes(auditAttributes4);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty[] observedPropertyArray6 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty> observedPropertyList7 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty>) observedPropertyList7, observedPropertyArray6);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLabAnalysisMethod postLabAnalysisMethod9 = postLabAnalysisMethod5.setObservedProperties((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty>) observedPropertyList7);
        postAnalysisMethod1.ObservedProperties = observedPropertyList7;
        java.lang.String str11 = postAnalysisMethod1.MethodId;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostAnalysisMethod postAnalysisMethod12 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostAnalysisMethod();
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple> importHistoryEventSimpleList13 = postAnalysisMethod12.ImportHistoryEventSimples;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLabAnalysisMethod postLabAnalysisMethod14 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLabAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes15 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLabAnalysisMethod postLabAnalysisMethod16 = postLabAnalysisMethod14.setAuditAttributes(auditAttributes15);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty[] observedPropertyArray17 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty> observedPropertyList18 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty>) observedPropertyList18, observedPropertyArray17);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLabAnalysisMethod postLabAnalysisMethod20 = postLabAnalysisMethod16.setObservedProperties((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty>) observedPropertyList18);
        postAnalysisMethod12.ObservedProperties = observedPropertyList18;
        postAnalysisMethod1.ObservedProperties = observedPropertyList18;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutLabAnalysisMethod putLabAnalysisMethod23 = putLabAnalysisMethod0.setObservedProperties((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty>) observedPropertyList18);
        putLabAnalysisMethod23.MethodId = "'.'SSSSSSS";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ShippingContainer shippingContainer26 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ShippingContainer();
        java.lang.String str27 = shippingContainer26.TrackingId;
        shippingContainer26.TrackingId = "/AQUARIUS/Acquisition/v2";
        java.lang.String str30 = shippingContainer26.TrackingId;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutUnit putUnit31 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutUnit();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes32 = putUnit31.getAuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutDetectioncondition putDetectioncondition33 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutDetectioncondition();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes34 = putDetectioncondition33.getAuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutDetectioncondition putDetectioncondition36 = putDetectioncondition33.setCustomId("http");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivity samplingPlanPlannedActivity37 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivity();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes38 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivity samplingPlanPlannedActivity39 = samplingPlanPlannedActivity37.setAuditAttributes(auditAttributes38);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes40 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes42 = auditAttributes40.setCreationUserProfileId("'.'SSSSSSS");
        samplingPlanPlannedActivity39.AuditAttributes = auditAttributes40;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes44 = samplingPlanPlannedActivity39.AuditAttributes;
        putDetectioncondition33.AuditAttributes = auditAttributes44;
        putUnit31.AuditAttributes = auditAttributes44;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes48 = auditAttributes44.setCreationUserProfileId("http");
        shippingContainer26.AuditAttributes = auditAttributes44;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutLabAnalysisMethod putLabAnalysisMethod50 = putLabAnalysisMethod23.setAuditAttributes(auditAttributes44);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutAnalysisMethod putAnalysisMethod51 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes52 = putAnalysisMethod51.getAuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutAnalysisMethod putAnalysisMethod54 = putAnalysisMethod51.setMethodId("hi!:///AQUARIUS/Provisioning/v1");
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple> importHistoryEventSimpleList55 = putAnalysisMethod51.getImportHistoryEventSimples();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostAnalysisMethod postAnalysisMethod56 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostAnalysisMethod();
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple> importHistoryEventSimpleList57 = postAnalysisMethod56.ImportHistoryEventSimples;
        java.lang.String str58 = postAnalysisMethod56.Context;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostAnalysisMethod postAnalysisMethod60 = postAnalysisMethod56.setId("-PT87591240H");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostAnalysisMethod postAnalysisMethod62 = postAnalysisMethod56.setContext("MaxInstant");
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty> observedPropertyList63 = postAnalysisMethod56.getObservedProperties();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Filter filter64 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Filter();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Filter filter66 = filter64.setId("2021.4.62.0");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Filter filter68 = filter66.setId("POST");
        filter68.Id = "https";
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty> observedPropertyList71 = filter68.getObservedProperties();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Filter filter73 = filter68.setCustomId("http://MaxDurationhttp/json/reply/Integer");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLabAnalysisMethod postLabAnalysisMethod74 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLabAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes75 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLabAnalysisMethod postLabAnalysisMethod76 = postLabAnalysisMethod74.setAuditAttributes(auditAttributes75);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty[] observedPropertyArray77 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty> observedPropertyList78 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty>();
        boolean boolean79 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty>) observedPropertyList78, observedPropertyArray77);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLabAnalysisMethod postLabAnalysisMethod80 = postLabAnalysisMethod76.setObservedProperties((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty>) observedPropertyList78);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes81 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLabAnalysisMethod postLabAnalysisMethod82 = postLabAnalysisMethod76.setAuditAttributes(auditAttributes81);
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty> observedPropertyList83 = postLabAnalysisMethod82.getObservedProperties();
        filter73.ObservedProperties = observedPropertyList83;
        postAnalysisMethod56.ObservedProperties = observedPropertyList83;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutAnalysisMethod putAnalysisMethod86 = putAnalysisMethod51.setObservedProperties(observedPropertyList83);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutLabAnalysisMethod putLabAnalysisMethod87 = putLabAnalysisMethod23.setObservedProperties(observedPropertyList83);
        java.lang.String str88 = putLabAnalysisMethod87.getMethodId();
        java.lang.String str89 = putLabAnalysisMethod87.Name;
        org.junit.Assert.assertNull(importHistoryEventSimpleList2);
        org.junit.Assert.assertNotNull(postLabAnalysisMethod5);
        org.junit.Assert.assertNotNull(observedPropertyArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(postLabAnalysisMethod9);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNull(importHistoryEventSimpleList13);
        org.junit.Assert.assertNotNull(postLabAnalysisMethod16);
        org.junit.Assert.assertNotNull(observedPropertyArray17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(postLabAnalysisMethod20);
        org.junit.Assert.assertNotNull(putLabAnalysisMethod23);
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "/AQUARIUS/Acquisition/v2" + "'", str30, "/AQUARIUS/Acquisition/v2");
        org.junit.Assert.assertNull(auditAttributes32);
        org.junit.Assert.assertNull(auditAttributes34);
        org.junit.Assert.assertNotNull(putDetectioncondition36);
        org.junit.Assert.assertNotNull(samplingPlanPlannedActivity39);
        org.junit.Assert.assertNotNull(auditAttributes42);
        org.junit.Assert.assertNotNull(auditAttributes44);
        org.junit.Assert.assertNotNull(auditAttributes48);
        org.junit.Assert.assertNotNull(putLabAnalysisMethod50);
        org.junit.Assert.assertNull(auditAttributes52);
        org.junit.Assert.assertNotNull(putAnalysisMethod54);
        org.junit.Assert.assertNull(importHistoryEventSimpleList55);
        org.junit.Assert.assertNull(importHistoryEventSimpleList57);
        org.junit.Assert.assertNull(str58);
        org.junit.Assert.assertNotNull(postAnalysisMethod60);
        org.junit.Assert.assertNotNull(postAnalysisMethod62);
        org.junit.Assert.assertNull(observedPropertyList63);
        org.junit.Assert.assertNotNull(filter66);
        org.junit.Assert.assertNotNull(filter68);
        org.junit.Assert.assertNull(observedPropertyList71);
        org.junit.Assert.assertNotNull(filter73);
        org.junit.Assert.assertNotNull(postLabAnalysisMethod76);
        org.junit.Assert.assertNotNull(observedPropertyArray77);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(postLabAnalysisMethod80);
        org.junit.Assert.assertNotNull(postLabAnalysisMethod82);
        org.junit.Assert.assertNotNull(observedPropertyList83);
        org.junit.Assert.assertNotNull(putAnalysisMethod86);
        org.junit.Assert.assertNotNull(putLabAnalysisMethod87);
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "'.'SSSSSSS" + "'", str88, "'.'SSSSSSS");
        org.junit.Assert.assertNull(str89);
    }

    @Test
    public void test53276() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest106.test53276");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray3 = new java.lang.String[] { "", "" };
        java.util.ArrayList<java.lang.String> strList4 = new java.util.ArrayList<java.lang.String>();
        boolean boolean5 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList4, strArray3);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_6 = getObservationsV2_0.setDataClassifications((java.util.List<java.lang.String>) strList4);
        java.util.List<java.lang.String> strList7 = getObservationsV2_0.ResultGrades;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary8 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        dischargeSummary8.Reviewer = "";
        java.time.Instant instant11 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        dischargeSummary8.MeasurementTime = instant11;
        getObservationsV2_0.StartResultTime = instant11;
        java.lang.String[] strArray23 = new java.lang.String[] { "https", "/AQUARIUS/Provisioning/v1", "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ", "2021.4.62.0", "hi!", "2021.4.62.0", "2021.4.62.0", "/AQUARIUS/Acquisition/v2", "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ" };
        java.util.ArrayList<java.lang.String> strList24 = new java.util.ArrayList<java.lang.String>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList24, strArray23);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_26 = getObservationsV2_0.setAnalyticalGroupIds((java.util.List<java.lang.String>) strList24);
        java.util.List<java.lang.String> strList27 = getObservationsV2_26.ProjectIds;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExtendedAttributeDropdownlistitems getExtendedAttributeDropdownlistitems28 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExtendedAttributeDropdownlistitems();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_29 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.util.List<java.lang.String> strList30 = getObservationsV2_29.SamplingContextTagIds;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_31 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray33 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList34 = new java.util.ArrayList<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList34, strArray33);
        getObservationsV2_31.SpecimenIds = strList34;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags37 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray41 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList42 = new java.util.ArrayList<java.lang.String>();
        boolean boolean43 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList42, strArray41);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags44 = putLocationTags37.setTagUniqueIds(strList42);
        getObservationsV2_31.QualityControlTypes = strList42;
        getObservationsV2_29.ResultGrades = strList42;
        getExtendedAttributeDropdownlistitems28.Search = strList42;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_48 = getObservationsV2_26.setLabReportIds((java.util.List<java.lang.String>) strList42);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_49 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray51 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList52 = new java.util.ArrayList<java.lang.String>();
        boolean boolean53 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList52, strArray51);
        getObservationsV2_49.SpecimenIds = strList52;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags55 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray59 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList60 = new java.util.ArrayList<java.lang.String>();
        boolean boolean61 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList60, strArray59);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags62 = putLocationTags55.setTagUniqueIds(strList60);
        getObservationsV2_49.QualityControlTypes = strList60;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_64 = getObservationsV2_26.setSamplingContextTagIds((java.util.List<java.lang.String>) strList60);
        java.util.List<java.lang.String> strList65 = getObservationsV2_26.getLabResultLabAnalysisMethodIds();
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(getObservationsV2_6);
        org.junit.Assert.assertNull(strList7);
        org.junit.Assert.assertNotNull(instant11);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(getObservationsV2_26);
        org.junit.Assert.assertNull(strList27);
        org.junit.Assert.assertNull(strList30);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(putLocationTags44);
        org.junit.Assert.assertNotNull(getObservationsV2_48);
        org.junit.Assert.assertNotNull(strArray51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(strArray59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(putLocationTags62);
        org.junit.Assert.assertNotNull(getObservationsV2_64);
        org.junit.Assert.assertNull(strList65);
    }

    @Test
    public void test53277() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest106.test53277");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DeleteActivities deleteActivities0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DeleteActivities();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutOpenIdConnectRelyingPartyConfiguration putOpenIdConnectRelyingPartyConfiguration1 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutOpenIdConnectRelyingPartyConfiguration();
        java.util.List<java.lang.String> strList2 = putOpenIdConnectRelyingPartyConfiguration1.getScopes();
        java.lang.String str3 = putOpenIdConnectRelyingPartyConfiguration1.getOptionalIssuerDiscoveryUri();
        java.lang.String str4 = putOpenIdConnectRelyingPartyConfiguration1.getOptionalIssuerDiscoveryUri();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostTag postTag5 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostTag();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_6 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray9 = new java.lang.String[] { "", "" };
        java.util.ArrayList<java.lang.String> strList10 = new java.util.ArrayList<java.lang.String>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList10, strArray9);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_12 = getObservationsV2_6.setDataClassifications((java.util.List<java.lang.String>) strList10);
        postTag5.PickListValues = strList10;
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.TagApplicability> tagApplicabilityList14 = postTag5.Applicability;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.TagRequestBase tagRequestBase16 = postTag5.setKey("");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.TagValueType tagValueType17 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.TagValueType.PickList;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.TagRequestBase tagRequestBase18 = tagRequestBase16.setValueType(tagValueType17);
        java.lang.String str19 = tagRequestBase18.Key;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_20 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray22 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList23 = new java.util.ArrayList<java.lang.String>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList23, strArray22);
        getObservationsV2_20.SpecimenIds = strList23;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags26 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray30 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList31 = new java.util.ArrayList<java.lang.String>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList31, strArray30);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags33 = putLocationTags26.setTagUniqueIds(strList31);
        getObservationsV2_20.ActivityIds = strList31;
        tagRequestBase18.PickListValues = strList31;
        putOpenIdConnectRelyingPartyConfiguration1.HostedDomains = strList31;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DeleteActivities deleteActivities37 = deleteActivities0.setProjectIds((java.util.List<java.lang.String>) strList31);
        java.util.List<java.lang.String> strList38 = deleteActivities0.Media;
        java.lang.Integer int39 = deleteActivities0.Limit;
        java.lang.String str40 = deleteActivities0.CustomId;
        java.util.List<java.lang.String> strList41 = deleteActivities0.getMedia();
        java.util.List<java.lang.String> strList42 = deleteActivities0.getActivityTypes();
        java.util.List<java.lang.String> strList43 = deleteActivities0.getCollectionMethodIds();
        java.util.List<java.lang.String> strList44 = deleteActivities0.ActivityTypes;
        deleteActivities0.Cursor = "/AQUARIUS/Acquisition/v2://9999-12-31T23:59:59.999Z";
        deleteActivities0.Limit = 1;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DeleteActivities deleteActivities50 = deleteActivities0.setCursor("/AQUARIUS/Provisioning/v1");
        org.junit.Assert.assertNull(strList2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(getObservationsV2_12);
        org.junit.Assert.assertNull(tagApplicabilityList14);
        org.junit.Assert.assertNotNull(tagRequestBase16);
        org.junit.Assert.assertTrue("'" + tagValueType17 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.TagValueType.PickList + "'", tagValueType17.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.TagValueType.PickList));
        org.junit.Assert.assertNotNull(tagRequestBase18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(putLocationTags33);
        org.junit.Assert.assertNotNull(deleteActivities37);
        org.junit.Assert.assertNull(strList38);
        org.junit.Assert.assertNull(int39);
        org.junit.Assert.assertNull(str40);
        org.junit.Assert.assertNull(strList41);
        org.junit.Assert.assertNull(strList42);
        org.junit.Assert.assertNull(strList43);
        org.junit.Assert.assertNull(strList44);
        org.junit.Assert.assertNotNull(deleteActivities50);
    }

    @Test
    public void test53278() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest106.test53278");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QualifierOperation qualifierOperation0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QualifierOperation();
        java.lang.String str1 = qualifierOperation0.User;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DownchainProcessorListByRatingModelServiceRequest downchainProcessorListByRatingModelServiceRequest2 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DownchainProcessorListByRatingModelServiceRequest();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeTransactionListServiceRequest metadataChangeTransactionListServiceRequest3 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeTransactionListServiceRequest();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostRecurringReport postRecurringReport4 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostRecurringReport();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary5 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        dischargeSummary5.Reviewer = "";
        java.time.Instant instant8 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        dischargeSummary5.MeasurementTime = instant8;
        postRecurringReport4.NextGenerationDate = instant8;
        java.time.Instant instant11 = postRecurringReport4.getNextGenerationDate();
        java.lang.String str12 = com.aquaticinformatics.aquarius.sdk.samples.serializers.InstantSerializer.format(instant11);
        metadataChangeTransactionListServiceRequest3.QueryFrom = instant11;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DownchainProcessorListByRatingModelServiceRequest downchainProcessorListByRatingModelServiceRequest14 = downchainProcessorListByRatingModelServiceRequest2.setQueryTo(instant11);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DownchainProcessorListByRatingModelServiceRequest downchainProcessorListByRatingModelServiceRequest16 = downchainProcessorListByRatingModelServiceRequest2.setRatingModelIdentifier("hi!");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Qualifier qualifier17 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Qualifier();
        java.time.Instant instant18 = qualifier17.DateApplied;
        java.lang.String str19 = qualifier17.User;
        java.lang.String str20 = qualifier17.getIdentifier();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest21 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest();
        java.lang.Object obj22 = timeAlignedDataServiceRequest21.getResponseType();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse23 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant24 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse25 = locationDescriptionListServiceResponse23.setNextToken(instant24);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest26 = timeAlignedDataServiceRequest21.setQueryFrom(instant24);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Qualifier qualifier27 = qualifier17.setDateApplied(instant24);
        java.time.Instant instant28 = qualifier27.getDateApplied();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DownchainProcessorListByRatingModelServiceRequest downchainProcessorListByRatingModelServiceRequest29 = downchainProcessorListByRatingModelServiceRequest2.setQueryFrom(instant28);
        downchainProcessorListByRatingModelServiceRequest29.RatingModelIdentifier = "multipart/form-data; boundary=****9fadde69-3f13-40c4-a87c-0f3f51c2dd35****";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Inspection inspection32 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Inspection();
        java.lang.String str33 = inspection32.getManufacturer();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Inspection inspection35 = inspection32.setSubLocationIdentifier("");
        inspection32.SubLocationIdentifier = "9999-12-31T23:59:59.999Z";
        java.lang.String str38 = inspection32.Model;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDescription timeSeriesDescription39 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDescription();
        java.lang.String str40 = timeSeriesDescription39.getComment();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationRemark locationRemark41 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationRemark();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationRemark locationRemark43 = locationRemark41.setDescription("MaxInstant");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitDataServiceResponse fieldVisitDataServiceResponse44 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitDataServiceResponse();
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CrossSectionSurveyActivity> crossSectionSurveyActivityList45 = fieldVisitDataServiceResponse44.CrossSectionSurveyActivity;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitDataServiceResponse fieldVisitDataServiceResponse47 = fieldVisitDataServiceResponse44.setIdentifier("");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary48 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        dischargeSummary48.Reviewer = "";
        java.time.Instant instant51 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        dischargeSummary48.MeasurementTime = instant51;
        fieldVisitDataServiceResponse44.ResponseTime = instant51;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationRemark locationRemark54 = locationRemark41.setCreateTime(instant51);
        timeSeriesDescription39.LastModified = instant51;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Inspection inspection56 = inspection32.setTime(instant51);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DownchainProcessorListByRatingModelServiceRequest downchainProcessorListByRatingModelServiceRequest57 = downchainProcessorListByRatingModelServiceRequest29.setQueryTo(instant51);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QualifierOperation qualifierOperation58 = qualifierOperation0.setDateAppliedUtc(instant51);
        qualifierOperation0.Identifier = "9999-12-31T23:59:59.9999999Z";
        java.lang.String str61 = qualifierOperation0.getUser();
        java.time.Instant instant62 = qualifierOperation0.DateAppliedUtc;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MethodOperation methodOperation63 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MethodOperation();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeOperationType metadataChangeOperationType64 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeOperationType.Creation;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MethodOperation methodOperation65 = methodOperation63.setOperationType(metadataChangeOperationType64);
        qualifierOperation0.OperationType = metadataChangeOperationType64;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QualifierOperation qualifierOperation68 = qualifierOperation0.setUser("PT87591240H");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeOperationType metadataChangeOperationType69 = null;
        qualifierOperation0.OperationType = metadataChangeOperationType69;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(instant8);
        org.junit.Assert.assertNotNull(instant11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "9999-12-31T23:59:59.999Z" + "'", str12, "9999-12-31T23:59:59.999Z");
        org.junit.Assert.assertNotNull(downchainProcessorListByRatingModelServiceRequest14);
        org.junit.Assert.assertNotNull(downchainProcessorListByRatingModelServiceRequest16);
        org.junit.Assert.assertNull(instant18);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNotNull(obj22);
        org.junit.Assert.assertEquals(obj22.toString(), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj22), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj22), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertNotNull(instant24);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse25);
        org.junit.Assert.assertNotNull(timeAlignedDataServiceRequest26);
        org.junit.Assert.assertNotNull(qualifier27);
        org.junit.Assert.assertNotNull(instant28);
        org.junit.Assert.assertNotNull(downchainProcessorListByRatingModelServiceRequest29);
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertNotNull(inspection35);
        org.junit.Assert.assertNull(str38);
        org.junit.Assert.assertNull(str40);
        org.junit.Assert.assertNotNull(locationRemark43);
        org.junit.Assert.assertNull(crossSectionSurveyActivityList45);
        org.junit.Assert.assertNotNull(fieldVisitDataServiceResponse47);
        org.junit.Assert.assertNotNull(instant51);
        org.junit.Assert.assertNotNull(locationRemark54);
        org.junit.Assert.assertNotNull(inspection56);
        org.junit.Assert.assertNotNull(downchainProcessorListByRatingModelServiceRequest57);
        org.junit.Assert.assertNotNull(qualifierOperation58);
        org.junit.Assert.assertNull(str61);
        org.junit.Assert.assertNotNull(instant62);
        org.junit.Assert.assertTrue("'" + metadataChangeOperationType64 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeOperationType.Creation + "'", metadataChangeOperationType64.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeOperationType.Creation));
        org.junit.Assert.assertNotNull(methodOperation65);
        org.junit.Assert.assertNotNull(qualifierOperation68);
    }

    @Test
    public void test53279() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest106.test53279");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescription locationDescription0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescription();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescription locationDescription2 = locationDescription0.setIdentifier("");
        locationDescription2.UniqueId = "/AQUARIUS/Acquisition/v2";
        java.lang.Double double5 = locationDescription2.getUtcOffset();
        locationDescription2.Publish = true;
        java.lang.String str8 = locationDescription2.getIdentifier();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescription locationDescription10 = locationDescription2.setPrimaryFolder("multipart/form-data; boundary=****f642a130-eb6d-4fb6-a1a4-7c7216ab119b****");
        java.util.ArrayList<java.lang.String> strList11 = locationDescription2.getSecondaryFolders();
        java.lang.Boolean boolean12 = locationDescription2.isPublish();
        org.junit.Assert.assertNotNull(locationDescription2);
        org.junit.Assert.assertNull(double5);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(locationDescription10);
        org.junit.Assert.assertNull(strList11);
        org.junit.Assert.assertEquals("'" + boolean12 + "' != '" + true + "'", boolean12, true);
    }

    @Test
    public void test53280() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest106.test53280");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.FieldVisit fieldVisit0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.FieldVisit();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.FieldTripSimple fieldTripSimple1 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.FieldVisit fieldVisit2 = fieldVisit0.setFieldTrip(fieldTripSimple1);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutFieldVisit putFieldVisit3 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutFieldVisit();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity[] plannedActivityArray4 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity> plannedActivityList5 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity>();
        boolean boolean6 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity>) plannedActivityList5, plannedActivityArray4);
        putFieldVisit3.PlannedActivities = plannedActivityList5;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment8 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment();
        java.lang.String str9 = domainObjectAttachment8.getId();
        java.lang.String str10 = domainObjectAttachment8.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Attachment attachment11 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment12 = domainObjectAttachment8.setAttachment(attachment11);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment13 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment();
        java.lang.String str14 = domainObjectAttachment13.getId();
        java.lang.String str15 = domainObjectAttachment13.getId();
        domainObjectAttachment13.Id = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment19 = domainObjectAttachment13.setId("hi!");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment20 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment();
        java.lang.String str21 = domainObjectAttachment20.getId();
        java.lang.String str22 = domainObjectAttachment20.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Attachment attachment23 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment24 = domainObjectAttachment20.setAttachment(attachment23);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment25 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment();
        java.lang.String str26 = domainObjectAttachment25.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment27 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment();
        java.lang.String str28 = domainObjectAttachment27.getId();
        java.lang.String str29 = domainObjectAttachment27.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Attachment attachment30 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment31 = domainObjectAttachment27.setAttachment(attachment30);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment32 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment();
        java.lang.String str33 = domainObjectAttachment32.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment[] domainObjectAttachmentArray34 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment[] { domainObjectAttachment8, domainObjectAttachment13, domainObjectAttachment20, domainObjectAttachment25, domainObjectAttachment27, domainObjectAttachment32 };
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment> domainObjectAttachmentList35 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment>();
        boolean boolean36 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment>) domainObjectAttachmentList35, domainObjectAttachmentArray34);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutFieldVisit putFieldVisit37 = putFieldVisit3.setAttachments((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment>) domainObjectAttachmentList35);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlan samplingPlan38 = putFieldVisit3.getSamplingPlan();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.FieldTripSimple fieldTripSimple39 = putFieldVisit3.getFieldTrip();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Schedule schedule40 = putFieldVisit3.Schedule;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocation samplingLocation41 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocation();
        java.lang.String str42 = samplingLocation41.Description;
        java.lang.String str43 = samplingLocation41.VerticalCollectionMethod;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocation samplingLocation45 = samplingLocation41.setVerticalCollectionMethod("hi!");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutFieldVisit putFieldVisit46 = putFieldVisit3.setSamplingLocation(samplingLocation41);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Address address47 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocation samplingLocation48 = samplingLocation41.setAddress(address47);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.FieldVisit fieldVisit49 = fieldVisit2.setSamplingLocation(samplingLocation48);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.FieldVisit fieldVisit51 = fieldVisit2.setId("ZZZZZ");
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment> domainObjectAttachmentList52 = fieldVisit51.Attachments;
        java.time.OffsetDateTime offsetDateTime53 = fieldVisit51.getStartTime();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.FieldTripSimple fieldTripSimple54 = fieldVisit51.FieldTrip;
        org.junit.Assert.assertNotNull(fieldVisit2);
        org.junit.Assert.assertNotNull(plannedActivityArray4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNotNull(domainObjectAttachment12);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNotNull(domainObjectAttachment19);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertNotNull(domainObjectAttachment24);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertNotNull(domainObjectAttachment31);
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertNotNull(domainObjectAttachmentArray34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(putFieldVisit37);
        org.junit.Assert.assertNull(samplingPlan38);
        org.junit.Assert.assertNull(fieldTripSimple39);
        org.junit.Assert.assertNull(schedule40);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertNotNull(samplingLocation45);
        org.junit.Assert.assertNotNull(putFieldVisit46);
        org.junit.Assert.assertNotNull(samplingLocation48);
        org.junit.Assert.assertNotNull(fieldVisit49);
        org.junit.Assert.assertNotNull(fieldVisit51);
        org.junit.Assert.assertNull(domainObjectAttachmentList52);
        org.junit.Assert.assertNull(offsetDateTime53);
        org.junit.Assert.assertNull(fieldTripSimple54);
    }

    @Test
    public void test53281() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest106.test53281");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttribute extendedAttribute0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttribute();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttribute extendedAttribute2 = extendedAttribute0.setRequired((java.lang.Boolean) true);
        java.util.ArrayList<java.lang.String> strList3 = extendedAttribute2.PickListValues;
        org.junit.Assert.assertNotNull(extendedAttribute2);
        org.junit.Assert.assertNull(strList3);
    }

    @Test
    public void test53282() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest106.test53282");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.FieldVisit fieldVisit0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.FieldVisit();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.FieldTripSimple fieldTripSimple1 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.FieldVisit fieldVisit2 = fieldVisit0.setFieldTrip(fieldTripSimple1);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutFieldVisit putFieldVisit3 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutFieldVisit();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity[] plannedActivityArray4 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity> plannedActivityList5 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity>();
        boolean boolean6 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity>) plannedActivityList5, plannedActivityArray4);
        putFieldVisit3.PlannedActivities = plannedActivityList5;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment8 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment();
        java.lang.String str9 = domainObjectAttachment8.getId();
        java.lang.String str10 = domainObjectAttachment8.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Attachment attachment11 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment12 = domainObjectAttachment8.setAttachment(attachment11);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment13 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment();
        java.lang.String str14 = domainObjectAttachment13.getId();
        java.lang.String str15 = domainObjectAttachment13.getId();
        domainObjectAttachment13.Id = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment19 = domainObjectAttachment13.setId("hi!");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment20 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment();
        java.lang.String str21 = domainObjectAttachment20.getId();
        java.lang.String str22 = domainObjectAttachment20.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Attachment attachment23 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment24 = domainObjectAttachment20.setAttachment(attachment23);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment25 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment();
        java.lang.String str26 = domainObjectAttachment25.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment27 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment();
        java.lang.String str28 = domainObjectAttachment27.getId();
        java.lang.String str29 = domainObjectAttachment27.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Attachment attachment30 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment31 = domainObjectAttachment27.setAttachment(attachment30);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment32 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment();
        java.lang.String str33 = domainObjectAttachment32.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment[] domainObjectAttachmentArray34 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment[] { domainObjectAttachment8, domainObjectAttachment13, domainObjectAttachment20, domainObjectAttachment25, domainObjectAttachment27, domainObjectAttachment32 };
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment> domainObjectAttachmentList35 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment>();
        boolean boolean36 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment>) domainObjectAttachmentList35, domainObjectAttachmentArray34);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutFieldVisit putFieldVisit37 = putFieldVisit3.setAttachments((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment>) domainObjectAttachmentList35);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlan samplingPlan38 = putFieldVisit3.getSamplingPlan();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.FieldTripSimple fieldTripSimple39 = putFieldVisit3.getFieldTrip();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Schedule schedule40 = putFieldVisit3.Schedule;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocation samplingLocation41 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocation();
        java.lang.String str42 = samplingLocation41.Description;
        java.lang.String str43 = samplingLocation41.VerticalCollectionMethod;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocation samplingLocation45 = samplingLocation41.setVerticalCollectionMethod("hi!");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutFieldVisit putFieldVisit46 = putFieldVisit3.setSamplingLocation(samplingLocation41);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Address address47 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocation samplingLocation48 = samplingLocation41.setAddress(address47);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.FieldVisit fieldVisit49 = fieldVisit2.setSamplingLocation(samplingLocation48);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocation samplingLocation51 = samplingLocation48.setLongitude("yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ");
        java.lang.String str52 = samplingLocation51.VerticalDatum;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostUnitGroup postUnitGroup53 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostUnitGroup();
        java.lang.String str54 = postUnitGroup53.CustomId;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes55 = postUnitGroup53.AuditAttributes;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes56 = postUnitGroup53.getAuditAttributes();
        java.lang.String str57 = postUnitGroup53.getCustomId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutUnit putUnit58 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutUnit();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutUnit putUnit60 = putUnit58.setName("MinInstant");
        java.lang.Double double61 = putUnit58.getBaseMultiplier();
        putUnit58.Name = "http";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation64 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocation samplingLocation65 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation66 = observation64.setSamplingLocation(samplingLocation65);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails67 = observation66.LabResultDetails;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.TaxonomicResult taxonomicResult68 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.TaxonomicResult();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Taxon taxon69 = taxonomicResult68.Taxon;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes70 = taxonomicResult68.AuditAttributes;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutTag putTag71 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutTag();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlan samplingPlan72 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlan();
        samplingPlan72.SamplingLocationGroupSelectionTypeRandomCount = 0;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationGroupSelectionType samplingLocationGroupSelectionType75 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationGroupSelectionType.ALL;
        samplingPlan72.SamplingLocationGroupSelectionType = samplingLocationGroupSelectionType75;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationGroup samplingLocationGroup77 = samplingPlan72.getSamplingLocationGroup();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes78 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlan samplingPlan79 = samplingPlan72.setAuditAttributes(auditAttributes78);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutTag putTag80 = putTag71.setAuditAttributes(auditAttributes78);
        taxonomicResult68.AuditAttributes = auditAttributes78;
        observation66.TaxonomicResult = taxonomicResult68;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes83 = taxonomicResult68.AuditAttributes;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutUnit putUnit84 = putUnit58.setAuditAttributes(auditAttributes83);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostUnitGroup postUnitGroup85 = postUnitGroup53.setAuditAttributes(auditAttributes83);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocation samplingLocation86 = samplingLocation51.setAuditAttributes(auditAttributes83);
        org.junit.Assert.assertNotNull(fieldVisit2);
        org.junit.Assert.assertNotNull(plannedActivityArray4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNotNull(domainObjectAttachment12);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNotNull(domainObjectAttachment19);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertNotNull(domainObjectAttachment24);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertNotNull(domainObjectAttachment31);
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertNotNull(domainObjectAttachmentArray34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(putFieldVisit37);
        org.junit.Assert.assertNull(samplingPlan38);
        org.junit.Assert.assertNull(fieldTripSimple39);
        org.junit.Assert.assertNull(schedule40);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertNotNull(samplingLocation45);
        org.junit.Assert.assertNotNull(putFieldVisit46);
        org.junit.Assert.assertNotNull(samplingLocation48);
        org.junit.Assert.assertNotNull(fieldVisit49);
        org.junit.Assert.assertNotNull(samplingLocation51);
        org.junit.Assert.assertNull(str52);
        org.junit.Assert.assertNull(str54);
        org.junit.Assert.assertNull(auditAttributes55);
        org.junit.Assert.assertNull(auditAttributes56);
        org.junit.Assert.assertNull(str57);
        org.junit.Assert.assertNotNull(putUnit60);
        org.junit.Assert.assertNull(double61);
        org.junit.Assert.assertNotNull(observation66);
        org.junit.Assert.assertNull(labResultDetails67);
        org.junit.Assert.assertNull(taxon69);
        org.junit.Assert.assertNull(auditAttributes70);
        org.junit.Assert.assertTrue("'" + samplingLocationGroupSelectionType75 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationGroupSelectionType.ALL + "'", samplingLocationGroupSelectionType75.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationGroupSelectionType.ALL));
        org.junit.Assert.assertNull(samplingLocationGroup77);
        org.junit.Assert.assertNotNull(samplingPlan79);
        org.junit.Assert.assertNotNull(putTag80);
        org.junit.Assert.assertNotNull(auditAttributes83);
        org.junit.Assert.assertNotNull(putUnit84);
        org.junit.Assert.assertNotNull(postUnitGroup85);
        org.junit.Assert.assertNotNull(samplingLocation86);
    }

    @Test
    public void test53283() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest106.test53283");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.GetAuthTokenServiceRequest getAuthTokenServiceRequest0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.GetAuthTokenServiceRequest();
        java.lang.String str1 = getAuthTokenServiceRequest0.getUsername();
        getAuthTokenServiceRequest0.Locale = "9999-12-31T23:59:59.999Z";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.GetAuthTokenServiceRequest getAuthTokenServiceRequest5 = getAuthTokenServiceRequest0.setUsername("https");
        java.lang.String str6 = getAuthTokenServiceRequest5.getLocale();
        java.lang.String str7 = getAuthTokenServiceRequest5.Locale;
        java.lang.String str8 = getAuthTokenServiceRequest5.EncryptedPassword;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(getAuthTokenServiceRequest5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "9999-12-31T23:59:59.999Z" + "'", str6, "9999-12-31T23:59:59.999Z");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "9999-12-31T23:59:59.999Z" + "'", str7, "9999-12-31T23:59:59.999Z");
        org.junit.Assert.assertNull(str8);
    }

    @Test
    public void test53284() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest106.test53284");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LevelSurveyMeasurement levelSurveyMeasurement0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LevelSurveyMeasurement();
        java.lang.String str1 = levelSurveyMeasurement0.ReferencePointUniqueId;
        levelSurveyMeasurement0.ReferencePointUniqueId = "0001-01-01T00:00:00.000Z";
        levelSurveyMeasurement0.ReferencePointUniqueId = "multipart/form-data; boundary=****44f0772e-c3ca-4316-8e2a-61ec8540d661****";
        java.lang.String str6 = levelSurveyMeasurement0.getComments();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str6);
    }

    @Test
    public void test53285() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest106.test53285");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.TimeSeries timeSeries0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.TimeSeries();
        java.lang.String str1 = timeSeries0.ComputationIdentifier;
        java.lang.String str2 = timeSeries0.getSubLocationIdentifier();
        java.lang.String str3 = timeSeries0.UniqueId;
        java.lang.String str4 = timeSeries0.ComputationIdentifier;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.TimeSeries timeSeries6 = timeSeries0.setComment("POST");
        java.lang.String str7 = timeSeries6.getLocationIdentifier();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingCurveListServiceRequest ratingCurveListServiceRequest8 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingCurveListServiceRequest();
        java.time.Instant instant9 = ratingCurveListServiceRequest8.QueryTo;
        java.lang.String str10 = ratingCurveListServiceRequest8.getRatingModelIdentifier();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse11 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary12 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary14 = dischargeSummary12.setPublish((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse15 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant16 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse17 = locationDescriptionListServiceResponse15.setNextToken(instant16);
        dischargeSummary12.MeasurementTime = instant16;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse19 = locationDescriptionListServiceResponse11.setNextToken(instant16);
        java.time.Instant instant20 = locationDescriptionListServiceResponse11.getNextToken();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest21 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ControlConditionActivity controlConditionActivity22 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ControlConditionActivity();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ControlCleanedType controlCleanedType23 = null;
        controlConditionActivity22.ControlCleaned = controlCleanedType23;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse25 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant26 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse27 = locationDescriptionListServiceResponse25.setNextToken(instant26);
        controlConditionActivity22.DateCleaned = instant26;
        timeAlignedDataServiceRequest21.QueryFrom = instant26;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse30 = locationDescriptionListServiceResponse11.setNextToken(instant26);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingCurveListServiceRequest ratingCurveListServiceRequest31 = ratingCurveListServiceRequest8.setQueryTo(instant26);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.TimeSeries timeSeries32 = timeSeries6.setLastModifiedTime(instant26);
        java.util.List<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeValue> extendedAttributeValueList33 = timeSeries6.getExtendedAttributeValues();
        timeSeries6.LocationName = "****82feecb1-0c54-43a1-b60a-302dc897d638****";
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNotNull(timeSeries6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(instant9);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNotNull(dischargeSummary14);
        org.junit.Assert.assertNotNull(instant16);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse17);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse19);
        org.junit.Assert.assertNotNull(instant20);
        org.junit.Assert.assertNotNull(instant26);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse27);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse30);
        org.junit.Assert.assertNotNull(ratingCurveListServiceRequest31);
        org.junit.Assert.assertNotNull(timeSeries32);
        org.junit.Assert.assertNull(extendedAttributeValueList33);
    }

    @Test
    public void test53286() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest106.test53286");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutTaxon putTaxon0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutTaxon();
        putTaxon0.ParentId = "http://MaxDurationhttp/json/reply/ArrayList";
        java.lang.String str3 = putTaxon0.getComment();
        putTaxon0.ParentId = "-PT87591240H";
        java.lang.String str6 = putTaxon0.ItisUrl;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutTaxon putTaxon8 = putTaxon0.setItisComment("yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSSSSSZZZZZ");
        java.lang.String str9 = putTaxon8.getScientificName();
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple> importHistoryEventSimpleList10 = putTaxon8.getImportHistoryEventSimples();
        putTaxon8.ParentId = "****c052e2e0-9b0e-4df2-9a74-52850b5df85a****";
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNotNull(putTaxon8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNull(importHistoryEventSimpleList10);
    }

    @Test
    public void test53287() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest106.test53287");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemAnalysisMethod importItemAnalysisMethod0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemAnalysisMethod importItemAnalysisMethod2 = importItemAnalysisMethod0.setInput("POST");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemAnalysisMethod importItemAnalysisMethod4 = importItemAnalysisMethod2.setRowId("https");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod5 = importItemAnalysisMethod4.getExistingItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod6 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemAnalysisMethod importItemAnalysisMethod7 = importItemAnalysisMethod4.setItem(analysisMethod6);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemStatusType importItemStatusType8 = importItemAnalysisMethod4.getStatus();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemStatusType importItemStatusType9 = importItemAnalysisMethod4.Status;
        java.lang.Object obj10 = importItemAnalysisMethod4.Errors;
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportChangeItem> importChangeItemList11 = importItemAnalysisMethod4.ItemComparison;
        org.junit.Assert.assertNotNull(importItemAnalysisMethod2);
        org.junit.Assert.assertNotNull(importItemAnalysisMethod4);
        org.junit.Assert.assertNull(analysisMethod5);
        org.junit.Assert.assertNotNull(importItemAnalysisMethod7);
        org.junit.Assert.assertNull(importItemStatusType8);
        org.junit.Assert.assertNull(importItemStatusType9);
        org.junit.Assert.assertNull(obj10);
        org.junit.Assert.assertNull(importChangeItemList11);
    }

    @Test
    public void test53288() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest106.test53288");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportProcessorTransactionStatusResponse importProcessorTransactionStatusResponse0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportProcessorTransactionStatusResponse();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportProcessorTransactionStatusType importProcessorTransactionStatusType1 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportProcessorTransactionStatusType.SYSTEM_ERROR;
        importProcessorTransactionStatusResponse0.ImportProcessorTransactionStatus = importProcessorTransactionStatusType1;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportProcessorTransactionStatusType importProcessorTransactionStatusType3 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportProcessorTransactionStatusType.COMPLETED_WITH_ERRORS;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportProcessorTransactionStatusResponse importProcessorTransactionStatusResponse4 = importProcessorTransactionStatusResponse0.setImportProcessorTransactionStatus(importProcessorTransactionStatusType3);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportProcessorTransactionStatusResponse importProcessorTransactionStatusResponse6 = importProcessorTransactionStatusResponse0.setId("http://MaxDurationhttp/json/reply/ArrayList");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportProcessorTransactionStatusResponse importProcessorTransactionStatusResponse8 = importProcessorTransactionStatusResponse0.setId("multipart/form-data; boundary=****5b5bcc49-98d5-445c-ae15-d7e16405ad8c****");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportProcessorTransactionStatusResponse importProcessorTransactionStatusResponse9 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportProcessorTransactionStatusResponse();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportProcessorTransactionStatusType importProcessorTransactionStatusType10 = importProcessorTransactionStatusResponse9.getImportProcessorTransactionStatus();
        importProcessorTransactionStatusResponse9.Id = "multipart/form-data; boundary=****bbcf5f9e-6ccf-4b63-91ab-6e645caf02af****";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportProcessorTransactionStatusResponse importProcessorTransactionStatusResponse13 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportProcessorTransactionStatusResponse();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportProcessorTransactionStatusType importProcessorTransactionStatusType14 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportProcessorTransactionStatusType.SYSTEM_ERROR;
        importProcessorTransactionStatusResponse13.ImportProcessorTransactionStatus = importProcessorTransactionStatusType14;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportProcessorTransactionStatusResponse importProcessorTransactionStatusResponse16 = importProcessorTransactionStatusResponse9.setImportProcessorTransactionStatus(importProcessorTransactionStatusType14);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportProcessorTransactionStatusType importProcessorTransactionStatusType17 = importProcessorTransactionStatusResponse9.ImportProcessorTransactionStatus;
        importProcessorTransactionStatusResponse0.ImportProcessorTransactionStatus = importProcessorTransactionStatusType17;
        org.junit.Assert.assertTrue("'" + importProcessorTransactionStatusType1 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportProcessorTransactionStatusType.SYSTEM_ERROR + "'", importProcessorTransactionStatusType1.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportProcessorTransactionStatusType.SYSTEM_ERROR));
        org.junit.Assert.assertTrue("'" + importProcessorTransactionStatusType3 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportProcessorTransactionStatusType.COMPLETED_WITH_ERRORS + "'", importProcessorTransactionStatusType3.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportProcessorTransactionStatusType.COMPLETED_WITH_ERRORS));
        org.junit.Assert.assertNotNull(importProcessorTransactionStatusResponse4);
        org.junit.Assert.assertNotNull(importProcessorTransactionStatusResponse6);
        org.junit.Assert.assertNotNull(importProcessorTransactionStatusResponse8);
        org.junit.Assert.assertNull(importProcessorTransactionStatusType10);
        org.junit.Assert.assertTrue("'" + importProcessorTransactionStatusType14 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportProcessorTransactionStatusType.SYSTEM_ERROR + "'", importProcessorTransactionStatusType14.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportProcessorTransactionStatusType.SYSTEM_ERROR));
        org.junit.Assert.assertNotNull(importProcessorTransactionStatusResponse16);
        org.junit.Assert.assertTrue("'" + importProcessorTransactionStatusType17 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportProcessorTransactionStatusType.SYSTEM_ERROR + "'", importProcessorTransactionStatusType17.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportProcessorTransactionStatusType.SYSTEM_ERROR));
    }

    @Test
    public void test53289() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest106.test53289");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetUnitGroups getUnitGroups0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetUnitGroups();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetUnitGroupsSystemCodeType getUnitGroupsSystemCodeType1 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetUnitGroups getUnitGroups2 = getUnitGroups0.setSystemCode(getUnitGroupsSystemCodeType1);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetUnitGroupsSystemCodeType getUnitGroupsSystemCodeType3 = getUnitGroups2.getSystemCode();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetUnitGroups getUnitGroups4 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetUnitGroups();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetUnitGroupsSystemCodeType getUnitGroupsSystemCodeType5 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetUnitGroups getUnitGroups6 = getUnitGroups4.setSystemCode(getUnitGroupsSystemCodeType5);
        getUnitGroups6.CustomId = "'.'SSSSSSS";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetUnitGroups getUnitGroups10 = getUnitGroups6.setCustomId("/AQUARIUS/Acquisition/v2");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetUnitGroups getUnitGroups11 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetUnitGroups();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetUnitGroupsSystemCodeType getUnitGroupsSystemCodeType12 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetUnitGroups getUnitGroups13 = getUnitGroups11.setSystemCode(getUnitGroupsSystemCodeType12);
        java.lang.String str14 = getUnitGroups11.CustomId;
        java.lang.String str15 = getUnitGroups11.getCustomId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetUnitGroupsSystemCodeType getUnitGroupsSystemCodeType16 = getUnitGroups11.SystemCode;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetUnitGroupsSystemCodeType getUnitGroupsSystemCodeType17 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetUnitGroupsSystemCodeType.LENGTH;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetUnitGroups getUnitGroups18 = getUnitGroups11.setSystemCode(getUnitGroupsSystemCodeType17);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetUnitGroups getUnitGroups19 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetUnitGroups();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetUnitGroupsSystemCodeType getUnitGroupsSystemCodeType20 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetUnitGroups getUnitGroups21 = getUnitGroups19.setSystemCode(getUnitGroupsSystemCodeType20);
        java.lang.String str22 = getUnitGroups19.CustomId;
        java.lang.String str23 = getUnitGroups19.getCustomId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetUnitGroupsSystemCodeType getUnitGroupsSystemCodeType24 = getUnitGroups19.SystemCode;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetUnitGroupsSystemCodeType getUnitGroupsSystemCodeType25 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetUnitGroupsSystemCodeType.LENGTH;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetUnitGroups getUnitGroups26 = getUnitGroups19.setSystemCode(getUnitGroupsSystemCodeType25);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetUnitGroups getUnitGroups27 = getUnitGroups11.setSystemCode(getUnitGroupsSystemCodeType25);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetUnitGroups getUnitGroups28 = getUnitGroups10.setSystemCode(getUnitGroupsSystemCodeType25);
        java.lang.String str29 = getUnitGroups10.getCustomId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetUnitGroups getUnitGroups30 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetUnitGroups();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetUnitGroupsSystemCodeType getUnitGroupsSystemCodeType31 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetUnitGroups getUnitGroups32 = getUnitGroups30.setSystemCode(getUnitGroupsSystemCodeType31);
        java.lang.String str33 = getUnitGroups30.CustomId;
        java.lang.String str34 = getUnitGroups30.getCustomId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetUnitGroupsSystemCodeType getUnitGroupsSystemCodeType35 = getUnitGroups30.SystemCode;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetUnitGroupsSystemCodeType getUnitGroupsSystemCodeType36 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetUnitGroupsSystemCodeType.LENGTH;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetUnitGroups getUnitGroups37 = getUnitGroups30.setSystemCode(getUnitGroupsSystemCodeType36);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetUnitGroups getUnitGroups38 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetUnitGroups();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetUnitGroupsSystemCodeType getUnitGroupsSystemCodeType39 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetUnitGroups getUnitGroups40 = getUnitGroups38.setSystemCode(getUnitGroupsSystemCodeType39);
        java.lang.String str41 = getUnitGroups38.CustomId;
        java.lang.String str42 = getUnitGroups38.getCustomId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetUnitGroupsSystemCodeType getUnitGroupsSystemCodeType43 = getUnitGroups38.SystemCode;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetUnitGroupsSystemCodeType getUnitGroupsSystemCodeType44 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetUnitGroupsSystemCodeType.LENGTH;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetUnitGroups getUnitGroups45 = getUnitGroups38.setSystemCode(getUnitGroupsSystemCodeType44);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetUnitGroups getUnitGroups46 = getUnitGroups30.setSystemCode(getUnitGroupsSystemCodeType44);
        java.lang.String str47 = getUnitGroups30.getCustomId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetUnitGroupsSystemCodeType getUnitGroupsSystemCodeType48 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetUnitGroupsSystemCodeType.LENGTH;
        getUnitGroups30.SystemCode = getUnitGroupsSystemCodeType48;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetUnitGroups getUnitGroups50 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetUnitGroups();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetUnitGroupsSystemCodeType getUnitGroupsSystemCodeType51 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetUnitGroups getUnitGroups52 = getUnitGroups50.setSystemCode(getUnitGroupsSystemCodeType51);
        java.lang.String str53 = getUnitGroups50.CustomId;
        java.lang.String str54 = getUnitGroups50.getCustomId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetUnitGroupsSystemCodeType getUnitGroupsSystemCodeType55 = getUnitGroups50.SystemCode;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetUnitGroupsSystemCodeType getUnitGroupsSystemCodeType56 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetUnitGroupsSystemCodeType.LENGTH;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetUnitGroups getUnitGroups57 = getUnitGroups50.setSystemCode(getUnitGroupsSystemCodeType56);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetUnitGroups getUnitGroups58 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetUnitGroups();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetUnitGroupsSystemCodeType getUnitGroupsSystemCodeType59 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetUnitGroups getUnitGroups60 = getUnitGroups58.setSystemCode(getUnitGroupsSystemCodeType59);
        java.lang.String str61 = getUnitGroups58.CustomId;
        java.lang.String str62 = getUnitGroups58.getCustomId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetUnitGroupsSystemCodeType getUnitGroupsSystemCodeType63 = getUnitGroups58.SystemCode;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetUnitGroupsSystemCodeType getUnitGroupsSystemCodeType64 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetUnitGroupsSystemCodeType.LENGTH;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetUnitGroups getUnitGroups65 = getUnitGroups58.setSystemCode(getUnitGroupsSystemCodeType64);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetUnitGroups getUnitGroups66 = getUnitGroups50.setSystemCode(getUnitGroupsSystemCodeType64);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetUnitGroupsSystemCodeType getUnitGroupsSystemCodeType67 = getUnitGroups66.SystemCode;
        getUnitGroups30.SystemCode = getUnitGroupsSystemCodeType67;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetUnitGroups getUnitGroups69 = getUnitGroups10.setSystemCode(getUnitGroupsSystemCodeType67);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetUnitGroups getUnitGroups70 = getUnitGroups2.setSystemCode(getUnitGroupsSystemCodeType67);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetUnitGroupsSystemCodeType getUnitGroupsSystemCodeType71 = getUnitGroups70.getSystemCode();
        org.junit.Assert.assertNotNull(getUnitGroups2);
        org.junit.Assert.assertNull(getUnitGroupsSystemCodeType3);
        org.junit.Assert.assertNotNull(getUnitGroups6);
        org.junit.Assert.assertNotNull(getUnitGroups10);
        org.junit.Assert.assertNotNull(getUnitGroups13);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNull(getUnitGroupsSystemCodeType16);
        org.junit.Assert.assertTrue("'" + getUnitGroupsSystemCodeType17 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetUnitGroupsSystemCodeType.LENGTH + "'", getUnitGroupsSystemCodeType17.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetUnitGroupsSystemCodeType.LENGTH));
        org.junit.Assert.assertNotNull(getUnitGroups18);
        org.junit.Assert.assertNotNull(getUnitGroups21);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertNull(getUnitGroupsSystemCodeType24);
        org.junit.Assert.assertTrue("'" + getUnitGroupsSystemCodeType25 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetUnitGroupsSystemCodeType.LENGTH + "'", getUnitGroupsSystemCodeType25.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetUnitGroupsSystemCodeType.LENGTH));
        org.junit.Assert.assertNotNull(getUnitGroups26);
        org.junit.Assert.assertNotNull(getUnitGroups27);
        org.junit.Assert.assertNotNull(getUnitGroups28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "/AQUARIUS/Acquisition/v2" + "'", str29, "/AQUARIUS/Acquisition/v2");
        org.junit.Assert.assertNotNull(getUnitGroups32);
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertNull(getUnitGroupsSystemCodeType35);
        org.junit.Assert.assertTrue("'" + getUnitGroupsSystemCodeType36 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetUnitGroupsSystemCodeType.LENGTH + "'", getUnitGroupsSystemCodeType36.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetUnitGroupsSystemCodeType.LENGTH));
        org.junit.Assert.assertNotNull(getUnitGroups37);
        org.junit.Assert.assertNotNull(getUnitGroups40);
        org.junit.Assert.assertNull(str41);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertNull(getUnitGroupsSystemCodeType43);
        org.junit.Assert.assertTrue("'" + getUnitGroupsSystemCodeType44 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetUnitGroupsSystemCodeType.LENGTH + "'", getUnitGroupsSystemCodeType44.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetUnitGroupsSystemCodeType.LENGTH));
        org.junit.Assert.assertNotNull(getUnitGroups45);
        org.junit.Assert.assertNotNull(getUnitGroups46);
        org.junit.Assert.assertNull(str47);
        org.junit.Assert.assertTrue("'" + getUnitGroupsSystemCodeType48 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetUnitGroupsSystemCodeType.LENGTH + "'", getUnitGroupsSystemCodeType48.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetUnitGroupsSystemCodeType.LENGTH));
        org.junit.Assert.assertNotNull(getUnitGroups52);
        org.junit.Assert.assertNull(str53);
        org.junit.Assert.assertNull(str54);
        org.junit.Assert.assertNull(getUnitGroupsSystemCodeType55);
        org.junit.Assert.assertTrue("'" + getUnitGroupsSystemCodeType56 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetUnitGroupsSystemCodeType.LENGTH + "'", getUnitGroupsSystemCodeType56.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetUnitGroupsSystemCodeType.LENGTH));
        org.junit.Assert.assertNotNull(getUnitGroups57);
        org.junit.Assert.assertNotNull(getUnitGroups60);
        org.junit.Assert.assertNull(str61);
        org.junit.Assert.assertNull(str62);
        org.junit.Assert.assertNull(getUnitGroupsSystemCodeType63);
        org.junit.Assert.assertTrue("'" + getUnitGroupsSystemCodeType64 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetUnitGroupsSystemCodeType.LENGTH + "'", getUnitGroupsSystemCodeType64.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetUnitGroupsSystemCodeType.LENGTH));
        org.junit.Assert.assertNotNull(getUnitGroups65);
        org.junit.Assert.assertNotNull(getUnitGroups66);
        org.junit.Assert.assertTrue("'" + getUnitGroupsSystemCodeType67 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetUnitGroupsSystemCodeType.LENGTH + "'", getUnitGroupsSystemCodeType67.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetUnitGroupsSystemCodeType.LENGTH));
        org.junit.Assert.assertNotNull(getUnitGroups69);
        org.junit.Assert.assertNotNull(getUnitGroups70);
        org.junit.Assert.assertTrue("'" + getUnitGroupsSystemCodeType71 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetUnitGroupsSystemCodeType.LENGTH + "'", getUnitGroupsSystemCodeType71.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetUnitGroupsSystemCodeType.LENGTH));
    }

    @Test
    public void test53290() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest106.test53290");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ExpandedRatingCurve expandedRatingCurve0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ExpandedRatingCurve();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingCurveType ratingCurveType1 = expandedRatingCurve0.Type;
        expandedRatingCurve0.IsBlended = false;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ParameterWithUnit parameterWithUnit4 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ParameterWithUnit();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ExpandedRatingCurve expandedRatingCurve5 = expandedRatingCurve0.setOutputParameter(parameterWithUnit4);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ParameterWithUnit parameterWithUnit6 = expandedRatingCurve5.getOutputParameter();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ExpandedRatingCurve expandedRatingCurve7 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ExpandedRatingCurve();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingCurveType ratingCurveType8 = expandedRatingCurve7.Type;
        expandedRatingCurve7.IsBlended = false;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ParameterWithUnit parameterWithUnit11 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ParameterWithUnit();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ExpandedRatingCurve expandedRatingCurve12 = expandedRatingCurve7.setOutputParameter(parameterWithUnit11);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ParameterWithUnit parameterWithUnit13 = expandedRatingCurve12.getOutputParameter();
        expandedRatingCurve5.OutputParameter = parameterWithUnit13;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingShift ratingShift15 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingShift();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PeriodOfApplicability periodOfApplicability16 = null;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingShift ratingShift17 = ratingShift15.setPeriodOfApplicability(periodOfApplicability16);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingShiftPoint ratingShiftPoint18 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingShiftPoint();
        java.lang.Double double19 = ratingShiftPoint18.getInputValue();
        java.lang.Double double20 = ratingShiftPoint18.InputValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingShiftPoint ratingShiftPoint21 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingShiftPoint();
        java.lang.Double double22 = ratingShiftPoint21.getInputValue();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingShiftPoint ratingShiftPoint23 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingShiftPoint();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingShiftPoint ratingShiftPoint25 = ratingShiftPoint23.setInputValue((java.lang.Double) 0.0d);
        ratingShiftPoint23.Shift = 10.0d;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingShiftPoint ratingShiftPoint28 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingShiftPoint();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingShiftPoint ratingShiftPoint30 = ratingShiftPoint28.setInputValue((java.lang.Double) 0.0d);
        ratingShiftPoint28.Shift = 10.0d;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingShiftPoint ratingShiftPoint33 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingShiftPoint();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingShiftPoint[] ratingShiftPointArray34 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingShiftPoint[] { ratingShiftPoint18, ratingShiftPoint21, ratingShiftPoint23, ratingShiftPoint28, ratingShiftPoint33 };
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingShiftPoint> ratingShiftPointList35 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingShiftPoint>();
        boolean boolean36 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingShiftPoint>) ratingShiftPointList35, ratingShiftPointArray34);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingShift ratingShift37 = ratingShift15.setShiftPoints(ratingShiftPointList35);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingShift ratingShift38 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingShift();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingShift ratingShift39 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingShift();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PeriodOfApplicability periodOfApplicability40 = null;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingShift ratingShift41 = ratingShift39.setPeriodOfApplicability(periodOfApplicability40);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingShift ratingShift42 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingShift();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PeriodOfApplicability periodOfApplicability43 = null;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingShift ratingShift44 = ratingShift42.setPeriodOfApplicability(periodOfApplicability43);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PeriodOfApplicability periodOfApplicability45 = ratingShift42.PeriodOfApplicability;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingShift[] ratingShiftArray46 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingShift[] { ratingShift15, ratingShift38, ratingShift39, ratingShift42 };
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingShift> ratingShiftList47 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingShift>();
        boolean boolean48 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingShift>) ratingShiftList47, ratingShiftArray46);
        expandedRatingCurve5.Shifts = ratingShiftList47;
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingShift> ratingShiftList50 = expandedRatingCurve5.Shifts;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ExpandedRatingCurve expandedRatingCurve51 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ExpandedRatingCurve();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingCurveType ratingCurveType52 = expandedRatingCurve51.Type;
        expandedRatingCurve51.IsBlended = false;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ExpandedRatingCurve expandedRatingCurve56 = expandedRatingCurve51.setIsBlended((java.lang.Boolean) true);
        java.lang.String str57 = expandedRatingCurve51.Id;
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingPoint> ratingPointList58 = expandedRatingCurve51.AdjustedRatingTable;
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.OffsetPoint> offsetPointList59 = expandedRatingCurve51.Offsets;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ExpandedRatingCurve expandedRatingCurve61 = expandedRatingCurve51.setId("2021.4.62.0");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingCurve ratingCurve62 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingCurve();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingPoint[] ratingPointArray63 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingPoint[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingPoint> ratingPointList64 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingPoint>();
        boolean boolean65 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingPoint>) ratingPointList64, ratingPointArray63);
        ratingCurve62.BaseRatingTable = ratingPointList64;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingCurve ratingCurve67 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingCurve();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingPoint[] ratingPointArray68 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingPoint[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingPoint> ratingPointList69 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingPoint>();
        boolean boolean70 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingPoint>) ratingPointList69, ratingPointArray68);
        ratingCurve67.BaseRatingTable = ratingPointList69;
        ratingCurve62.BaseRatingTable = ratingPointList69;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ExpandedRatingCurve expandedRatingCurve73 = expandedRatingCurve61.setAdjustedRatingTable(ratingPointList69);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ExpandedRatingCurve expandedRatingCurve74 = expandedRatingCurve5.setAdjustedRatingTable(ratingPointList69);
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingShift> ratingShiftList75 = null;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ExpandedRatingCurve expandedRatingCurve76 = expandedRatingCurve74.setShifts(ratingShiftList75);
        org.junit.Assert.assertNull(ratingCurveType1);
        org.junit.Assert.assertNotNull(expandedRatingCurve5);
        org.junit.Assert.assertNotNull(parameterWithUnit6);
        org.junit.Assert.assertNull(ratingCurveType8);
        org.junit.Assert.assertNotNull(expandedRatingCurve12);
        org.junit.Assert.assertNotNull(parameterWithUnit13);
        org.junit.Assert.assertNotNull(ratingShift17);
        org.junit.Assert.assertNull(double19);
        org.junit.Assert.assertNull(double20);
        org.junit.Assert.assertNull(double22);
        org.junit.Assert.assertNotNull(ratingShiftPoint25);
        org.junit.Assert.assertNotNull(ratingShiftPoint30);
        org.junit.Assert.assertNotNull(ratingShiftPointArray34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(ratingShift37);
        org.junit.Assert.assertNotNull(ratingShift41);
        org.junit.Assert.assertNotNull(ratingShift44);
        org.junit.Assert.assertNull(periodOfApplicability45);
        org.junit.Assert.assertNotNull(ratingShiftArray46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(ratingShiftList50);
        org.junit.Assert.assertNull(ratingCurveType52);
        org.junit.Assert.assertNotNull(expandedRatingCurve56);
        org.junit.Assert.assertNull(str57);
        org.junit.Assert.assertNull(ratingPointList58);
        org.junit.Assert.assertNull(offsetPointList59);
        org.junit.Assert.assertNotNull(expandedRatingCurve61);
        org.junit.Assert.assertNotNull(ratingPointArray63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(ratingPointArray68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(expandedRatingCurve73);
        org.junit.Assert.assertNotNull(expandedRatingCurve74);
        org.junit.Assert.assertNotNull(expandedRatingCurve76);
    }

    @Test
    public void test53291() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest106.test53291");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedPoint timeAlignedPoint0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedPoint();
        timeAlignedPoint0.Method9 = "multipart/form-data; boundary=****7eff1774-b6b0-471a-961c-156c64359366****";
        timeAlignedPoint0.DisplayValue9 = "";
        java.lang.String str5 = timeAlignedPoint0.getApprovalName4();
        java.lang.Long long6 = timeAlignedPoint0.getGradeCode3();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedPoint timeAlignedPoint8 = timeAlignedPoint0.setGradeCode2((java.lang.Long) 1L);
        java.lang.Long long9 = timeAlignedPoint8.ApprovalLevel6;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedPoint timeAlignedPoint11 = timeAlignedPoint8.setApprovalName1("http://MaxDurationhttp/json/reply/ArrayList");
        timeAlignedPoint8.DisplayValue7 = "multipart/form-data; boundary=****44f0772e-c3ca-4316-8e2a-61ec8540d661****";
        java.lang.String str14 = timeAlignedPoint8.Qualifiers8;
        java.lang.Long long15 = timeAlignedPoint8.getGradeCode8();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedPoint timeAlignedPoint17 = timeAlignedPoint8.setGradeName2("multipart/form-data; boundary=****62091923-30fa-4226-b8ee-0dcb69731847****");
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(long6);
        org.junit.Assert.assertNotNull(timeAlignedPoint8);
        org.junit.Assert.assertNull(long9);
        org.junit.Assert.assertNotNull(timeAlignedPoint11);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNull(long15);
        org.junit.Assert.assertNotNull(timeAlignedPoint17);
    }

    @Test
    public void test53292() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest106.test53292");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedFieldResult plannedFieldResult1 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation2 = observation0.setPlannedFieldResult(plannedFieldResult1);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabInstruction labInstruction3 = null;
        observation2.LabInstruction = labInstruction3;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationStatistics observationStatistics5 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation6 = observation2.setStatistics(observationStatistics5);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.CollectionMethod collectionMethod7 = observation6.getCollectionMethod();
        java.time.OffsetDateTime offsetDateTime8 = null;
        observation6.ResultTime = offsetDateTime8;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation10 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation();
        observation10.CustomId = "hi!";
        java.lang.String str13 = observation10.CustomId;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationStatistics observationStatistics14 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationStatistics();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation15 = observation10.setStatistics(observationStatistics14);
        java.lang.Double double16 = observationStatistics14.getMin();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation17 = observation6.setStatistics(observationStatistics14);
        java.time.OffsetDateTime offsetDateTime18 = observation17.getResultTime();
        org.junit.Assert.assertNotNull(observation2);
        org.junit.Assert.assertNotNull(observation6);
        org.junit.Assert.assertNull(collectionMethod7);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "hi!" + "'", str13, "hi!");
        org.junit.Assert.assertNotNull(observation15);
        org.junit.Assert.assertNull(double16);
        org.junit.Assert.assertNotNull(observation17);
        org.junit.Assert.assertNull(offsetDateTime18);
    }

    @Test
    public void test53293() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest106.test53293");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.util.List<java.lang.String> strList1 = getObservationsV2_0.ResultGrades;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MonitoringMethodListServiceResponse monitoringMethodListServiceResponse2 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MonitoringMethodListServiceResponse();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CalibrationCheck calibrationCheck3 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CalibrationCheck();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CalibrationCheckType calibrationCheckType4 = calibrationCheck3.getCalibrationCheckType();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay5 = calibrationCheck3.Value;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse6 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary7 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary9 = dischargeSummary7.setPublish((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse10 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant11 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse12 = locationDescriptionListServiceResponse10.setNextToken(instant11);
        dischargeSummary7.MeasurementTime = instant11;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse14 = locationDescriptionListServiceResponse6.setNextToken(instant11);
        java.time.Instant instant15 = locationDescriptionListServiceResponse6.getNextToken();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CalibrationCheck calibrationCheck16 = calibrationCheck3.setTime(instant15);
        monitoringMethodListServiceResponse2.ResponseTime = instant15;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_18 = getObservationsV2_0.setEndResultTime(instant15);
        getObservationsV2_0.DetectionCondition = "multipart/form-data; boundary=****1eab67e1-84c8-4b82-aa06-d6c7526551f8****";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_22 = getObservationsV2_0.setDepthUnitCustomId("multipart/form-data; boundary=****44f0772e-c3ca-4316-8e2a-61ec8540d661****");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemAnalysisMethod importItemAnalysisMethod23 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemAnalysisMethod();
        java.lang.Object obj24 = importItemAnalysisMethod23.Errors;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemAnalysisMethod importItemAnalysisMethod26 = importItemAnalysisMethod23.setRowId("/AQUARIUS/Provisioning/v1");
        java.lang.Object obj27 = importItemAnalysisMethod26.getErrors();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.GetFieldDataPlugins getFieldDataPlugins28 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.GetFieldDataPlugins();
        java.lang.Object obj29 = getFieldDataPlugins28.getResponseType();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemAnalysisMethod importItemAnalysisMethod30 = importItemAnalysisMethod26.setErrors(obj29);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod31 = null;
        importItemAnalysisMethod30.ExistingItem = analysisMethod31;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutUser putUser33 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutUser();
        java.util.List<java.lang.String> strList34 = null;
        putUser33.AccessGroups = strList34;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostUserV2 postUserV2_36 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostUserV2();
        java.util.List<java.lang.String> strList37 = postUserV2_36.getAccessGroups();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetActivities getActivities38 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetActivities();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse39 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary40 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary42 = dischargeSummary40.setPublish((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse43 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant44 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse45 = locationDescriptionListServiceResponse43.setNextToken(instant44);
        dischargeSummary40.MeasurementTime = instant44;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse47 = locationDescriptionListServiceResponse39.setNextToken(instant44);
        java.time.Instant instant48 = locationDescriptionListServiceResponse39.getNextToken();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetActivities getActivities49 = getActivities38.setToStartTime(instant48);
        java.lang.String str50 = getActivities49.getSort();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetActivities getActivities52 = getActivities49.setLimit((java.lang.Integer) 1);
        getActivities52.Cursor = "";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest55 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_56 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray58 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList59 = new java.util.ArrayList<java.lang.String>();
        boolean boolean60 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList59, strArray58);
        getObservationsV2_56.SpecimenIds = strList59;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags62 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray66 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList67 = new java.util.ArrayList<java.lang.String>();
        boolean boolean68 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList67, strArray66);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags69 = putLocationTags62.setTagUniqueIds(strList67);
        getObservationsV2_56.QualityControlTypes = strList67;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest71 = timeAlignedDataServiceRequest55.setTimeSeriesUniqueIds(strList67);
        getActivities52.CollectionMethodIds = strList67;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostUserV2 postUserV2_73 = postUserV2_36.setRoles((java.util.List<java.lang.String>) strList67);
        java.util.List<java.lang.String> strList74 = postUserV2_73.Roles;
        putUser33.Roles = strList74;
        importItemAnalysisMethod30.Fields = strList74;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_77 = getObservationsV2_0.setObservedPropertyIds(strList74);
        java.util.List<java.lang.String> strList78 = getObservationsV2_0.getSpecimenIds();
        org.junit.Assert.assertNull(strList1);
        org.junit.Assert.assertNull(calibrationCheckType4);
        org.junit.Assert.assertNull(doubleWithDisplay5);
        org.junit.Assert.assertNotNull(dischargeSummary9);
        org.junit.Assert.assertNotNull(instant11);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse12);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse14);
        org.junit.Assert.assertNotNull(instant15);
        org.junit.Assert.assertNotNull(calibrationCheck16);
        org.junit.Assert.assertNotNull(getObservationsV2_18);
        org.junit.Assert.assertNotNull(getObservationsV2_22);
        org.junit.Assert.assertNull(obj24);
        org.junit.Assert.assertNotNull(importItemAnalysisMethod26);
        org.junit.Assert.assertNull(obj27);
        org.junit.Assert.assertNotNull(obj29);
        org.junit.Assert.assertEquals(obj29.toString(), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning$FieldDataPluginsResponse");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj29), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning$FieldDataPluginsResponse");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj29), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning$FieldDataPluginsResponse");
        org.junit.Assert.assertNotNull(importItemAnalysisMethod30);
        org.junit.Assert.assertNull(strList37);
        org.junit.Assert.assertNotNull(dischargeSummary42);
        org.junit.Assert.assertNotNull(instant44);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse45);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse47);
        org.junit.Assert.assertNotNull(instant48);
        org.junit.Assert.assertNotNull(getActivities49);
        org.junit.Assert.assertNull(str50);
        org.junit.Assert.assertNotNull(getActivities52);
        org.junit.Assert.assertNotNull(strArray58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(strArray66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertNotNull(putLocationTags69);
        org.junit.Assert.assertNotNull(timeAlignedDataServiceRequest71);
        org.junit.Assert.assertNotNull(postUserV2_73);
        org.junit.Assert.assertNotNull(strList74);
        org.junit.Assert.assertNotNull(getObservationsV2_77);
        org.junit.Assert.assertNull(strList78);
    }

    @Test
    public void test53294() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest106.test53294");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Setting setting0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Setting();
        setting0.IsSystem = true;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Setting setting4 = setting0.setDescription("/AQUARIUS");
        java.lang.String str5 = setting4.getDescription();
        setting4.Group = "multipart/form-data; boundary=****9dca3c57-4d61-4929-84c6-58c5a7f24542****";
        org.junit.Assert.assertNotNull(setting4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "/AQUARIUS" + "'", str5, "/AQUARIUS");
    }

    @Test
    public void test53295() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest106.test53295");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeField extendedAttributeField0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeField();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeField extendedAttributeField2 = extendedAttributeField0.setDisplayName("");
        java.lang.Boolean boolean3 = extendedAttributeField2.CanBeEmpty;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeField extendedAttributeField5 = extendedAttributeField2.setDisplayName("'.'SSSSSSS");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeField extendedAttributeField7 = extendedAttributeField5.setNumericPrecision((java.lang.Integer) 0);
        extendedAttributeField7.NumericPrecision = 4;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeField extendedAttributeField10 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeField();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeField extendedAttributeField12 = extendedAttributeField10.setDisplayName("");
        java.lang.Boolean boolean13 = extendedAttributeField12.CanBeEmpty;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeField extendedAttributeField15 = extendedAttributeField12.setDisplayName("'.'SSSSSSS");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeField extendedAttributeField17 = extendedAttributeField15.setNumericPrecision((java.lang.Integer) 0);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeFieldType extendedAttributeFieldType18 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeFieldType.String;
        extendedAttributeField17.FieldType = extendedAttributeFieldType18;
        extendedAttributeField7.FieldType = extendedAttributeFieldType18;
        org.junit.Assert.assertNotNull(extendedAttributeField2);
        org.junit.Assert.assertNull(boolean3);
        org.junit.Assert.assertNotNull(extendedAttributeField5);
        org.junit.Assert.assertNotNull(extendedAttributeField7);
        org.junit.Assert.assertNotNull(extendedAttributeField12);
        org.junit.Assert.assertNull(boolean13);
        org.junit.Assert.assertNotNull(extendedAttributeField15);
        org.junit.Assert.assertNotNull(extendedAttributeField17);
        org.junit.Assert.assertTrue("'" + extendedAttributeFieldType18 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeFieldType.String + "'", extendedAttributeFieldType18.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeFieldType.String));
    }

    @Test
    public void test53296() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest106.test53296");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutQualityCode putQualityCode0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutQualityCode();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutQualityCode putQualityCode2 = putQualityCode0.setColor("yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ");
        putQualityCode2.Color = "/AQUARIUS/Acquisition/v2";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutQualityCode putQualityCode6 = putQualityCode2.setGradeCode((java.lang.Integer) 4);
        java.lang.String str7 = putQualityCode2.Color;
        org.junit.Assert.assertNotNull(putQualityCode2);
        org.junit.Assert.assertNotNull(putQualityCode6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "/AQUARIUS/Acquisition/v2" + "'", str7, "/AQUARIUS/Acquisition/v2");
    }

    @Test
    public void test53297() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest106.test53297");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutLaboratory putLaboratory0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutLaboratory();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutLaboratory putLaboratory2 = putLaboratory0.setPhoneNumber("multipart/form-data; boundary=****7eff1774-b6b0-471a-961c-156c64359366****");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutLaboratory putLaboratory4 = putLaboratory2.setCustomId("");
        putLaboratory2.EmailAddress = "MaxInstant";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutLaboratory putLaboratory8 = putLaboratory2.setId("zZZZZ");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity plannedActivity9 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivityActivityType plannedActivityActivityType10 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivityActivityType.BLANK;
        plannedActivity9.ActivityType = plannedActivityActivityType10;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSchedule putSchedule12 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSchedule();
        java.lang.Integer int13 = putSchedule12.getSamplingLocationGroupSelectionTypeRandomCount();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.RecurrenceType recurrenceType14 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.RecurrenceType.BI_WEEKLY;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSchedule putSchedule15 = putSchedule12.setRecurrenceType(recurrenceType14);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutDetectioncondition putDetectioncondition16 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutDetectioncondition();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes17 = putDetectioncondition16.getAuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutDetectioncondition putDetectioncondition19 = putDetectioncondition16.setCustomId("http");
        putDetectioncondition19.CustomId = "POST";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity postActivity22 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity();
        postActivity22.LoggerFileName = "hi!";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity plannedActivity25 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity postActivity26 = postActivity22.setPlannedActivity(plannedActivity25);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ActivityType activityType27 = postActivity22.Type;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFieldVisitActivityWithTemplate postFieldVisitActivityWithTemplate28 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFieldVisitActivityWithTemplate();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate29 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate();
        specimenTemplate29.CustomId = "hi!";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate32 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate33 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate();
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabInstructionTemplate> labInstructionTemplateList34 = specimenTemplate33.getLabInstructionTemplates();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate35 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate37 = specimenTemplate35.setCustomId("hi!");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate38 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate39 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate();
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabInstructionTemplate> labInstructionTemplateList40 = specimenTemplate39.LabInstructionTemplates;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate[] specimenTemplateArray41 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate[] { specimenTemplate29, specimenTemplate32, specimenTemplate33, specimenTemplate37, specimenTemplate38, specimenTemplate39 };
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate> specimenTemplateList42 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate>();
        boolean boolean43 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate>) specimenTemplateList42, specimenTemplateArray41);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFieldVisitActivityWithTemplate postFieldVisitActivityWithTemplate44 = postFieldVisitActivityWithTemplate28.setSpecimenTemplates((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate>) specimenTemplateList42);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.CollectionMethod collectionMethod45 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.CollectionMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFieldVisitActivityWithTemplate postFieldVisitActivityWithTemplate46 = postFieldVisitActivityWithTemplate44.setCollectionMethod(collectionMethod45);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity postActivity47 = postActivity22.setCollectionMethod(collectionMethod45);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Medium medium48 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Medium();
        postActivity22.Medium = medium48;
        medium48.CustomId = "-PT87591240H";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroup analyticalGroup52 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroup();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupType analyticalGroupType53 = analyticalGroup52.getType();
        analyticalGroup52.Name = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSSSSSZZZZZ";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroup analyticalGroup56 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroup();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem analyticalGroupItem57 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod58 = analyticalGroupItem57.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem analyticalGroupItem59 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod60 = analyticalGroupItem59.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod61 = analyticalGroupItem59.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem analyticalGroupItem62 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod63 = analyticalGroupItem62.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod64 = analyticalGroupItem62.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod65 = null;
        analyticalGroupItem62.AnalysisMethod = analysisMethod65;
        java.lang.String str67 = analyticalGroupItem62.getHoldingTime();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem analyticalGroupItem68 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod69 = analyticalGroupItem68.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod70 = analyticalGroupItem68.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem analyticalGroupItem71 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod72 = analyticalGroupItem71.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem analyticalGroupItem73 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod74 = analyticalGroupItem73.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod75 = analyticalGroupItem73.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod76 = null;
        analyticalGroupItem73.AnalysisMethod = analysisMethod76;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem[] analyticalGroupItemArray78 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem[] { analyticalGroupItem57, analyticalGroupItem59, analyticalGroupItem62, analyticalGroupItem68, analyticalGroupItem71, analyticalGroupItem73 };
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem> analyticalGroupItemList79 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem>();
        boolean boolean80 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem>) analyticalGroupItemList79, analyticalGroupItemArray78);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroup analyticalGroup81 = analyticalGroup56.setAnalyticalGroupItems((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem>) analyticalGroupItemList79);
        analyticalGroup52.AnalyticalGroupItems = analyticalGroupItemList79;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes83 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes();
        analyticalGroup52.AuditAttributes = auditAttributes83;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Medium medium85 = medium48.setAuditAttributes(auditAttributes83);
        putDetectioncondition19.AuditAttributes = auditAttributes83;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSchedule putSchedule87 = putSchedule12.setAuditAttributes(auditAttributes83);
        java.time.OffsetDateTime offsetDateTime88 = auditAttributes83.CreationTime;
        auditAttributes83.ModificationUserProfileId = "0001-01-01T00:00:00.000Z";
        plannedActivity9.AuditAttributes = auditAttributes83;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutLaboratory putLaboratory92 = putLaboratory2.setAuditAttributes(auditAttributes83);
        java.lang.String str93 = putLaboratory2.Address;
        org.junit.Assert.assertNotNull(putLaboratory2);
        org.junit.Assert.assertNotNull(putLaboratory4);
        org.junit.Assert.assertNotNull(putLaboratory8);
        org.junit.Assert.assertTrue("'" + plannedActivityActivityType10 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivityActivityType.BLANK + "'", plannedActivityActivityType10.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivityActivityType.BLANK));
        org.junit.Assert.assertNull(int13);
        org.junit.Assert.assertTrue("'" + recurrenceType14 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.RecurrenceType.BI_WEEKLY + "'", recurrenceType14.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.RecurrenceType.BI_WEEKLY));
        org.junit.Assert.assertNotNull(putSchedule15);
        org.junit.Assert.assertNull(auditAttributes17);
        org.junit.Assert.assertNotNull(putDetectioncondition19);
        org.junit.Assert.assertNotNull(postActivity26);
        org.junit.Assert.assertNull(activityType27);
        org.junit.Assert.assertNull(labInstructionTemplateList34);
        org.junit.Assert.assertNotNull(specimenTemplate37);
        org.junit.Assert.assertNull(labInstructionTemplateList40);
        org.junit.Assert.assertNotNull(specimenTemplateArray41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(postFieldVisitActivityWithTemplate44);
        org.junit.Assert.assertNotNull(postFieldVisitActivityWithTemplate46);
        org.junit.Assert.assertNotNull(postActivity47);
        org.junit.Assert.assertNull(analyticalGroupType53);
        org.junit.Assert.assertNull(analysisMethod58);
        org.junit.Assert.assertNull(analysisMethod60);
        org.junit.Assert.assertNull(analysisMethod61);
        org.junit.Assert.assertNull(analysisMethod63);
        org.junit.Assert.assertNull(analysisMethod64);
        org.junit.Assert.assertNull(str67);
        org.junit.Assert.assertNull(analysisMethod69);
        org.junit.Assert.assertNull(analysisMethod70);
        org.junit.Assert.assertNull(analysisMethod72);
        org.junit.Assert.assertNull(analysisMethod74);
        org.junit.Assert.assertNull(analysisMethod75);
        org.junit.Assert.assertNotNull(analyticalGroupItemArray78);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
        org.junit.Assert.assertNotNull(analyticalGroup81);
        org.junit.Assert.assertNotNull(medium85);
        org.junit.Assert.assertNotNull(putSchedule87);
        org.junit.Assert.assertNull(offsetDateTime88);
        org.junit.Assert.assertNotNull(putLaboratory92);
        org.junit.Assert.assertNull(str93);
    }

    @Test
    public void test53298() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest106.test53298");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Parameter parameter0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Parameter();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Parameter parameter2 = parameter0.setParameterId("hi!");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Parameter parameter4 = parameter2.setMinValue((java.lang.Double) 0.0d);
        java.lang.Boolean boolean5 = parameter2.System;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Parameter parameter7 = parameter2.setUnitIdentifier("yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Parameter parameter9 = parameter2.setMaxValue((java.lang.Double) 0.0d);
        java.lang.String str10 = parameter2.UnitGroupIdentifier;
        java.lang.String str11 = parameter2.DisplayName;
        org.junit.Assert.assertNotNull(parameter2);
        org.junit.Assert.assertNotNull(parameter4);
        org.junit.Assert.assertNull(boolean5);
        org.junit.Assert.assertNotNull(parameter7);
        org.junit.Assert.assertNotNull(parameter9);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNull(str11);
    }

    @Test
    public void test53299() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest106.test53299");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ReportListServiceRequest reportListServiceRequest0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ReportListServiceRequest();
        reportListServiceRequest0.ReportTitle = "MinDuration";
        java.lang.String str3 = reportListServiceRequest0.getLocationUniqueId();
        java.time.Instant instant4 = null;
        reportListServiceRequest0.CreatedFrom = instant4;
        java.util.ArrayList<java.lang.String> strList6 = reportListServiceRequest0.TimeSeriesUniqueIds;
        java.time.Instant instant7 = reportListServiceRequest0.CreatedFrom;
        java.lang.String str8 = reportListServiceRequest0.getUserUniqueId();
        java.lang.Integer int9 = reportListServiceRequest0.getMaxResults();
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(strList6);
        org.junit.Assert.assertNull(instant7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNull(int9);
    }

    @Test
    public void test53300() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest106.test53300");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedTimeSeriesInfo timeAlignedTimeSeriesInfo0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedTimeSeriesInfo();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedTimeSeriesInfo timeAlignedTimeSeriesInfo2 = timeAlignedTimeSeriesInfo0.setLabel("multipart/form-data; boundary=****9fadde69-3f13-40c4-a87c-0f3f51c2dd35****");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedTimeSeriesInfo timeAlignedTimeSeriesInfo4 = timeAlignedTimeSeriesInfo0.setLabel("/AQUARIUS/Provisioning/v1");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedTimeSeriesInfo timeAlignedTimeSeriesInfo6 = timeAlignedTimeSeriesInfo4.setUniqueId("/AQUARIUS/Acquisition/v2://9999-12-31T23:59:59.999Z");
        timeAlignedTimeSeriesInfo6.Label = "multipart/form-data; boundary=****f2ce0d54-dac7-4cd0-b74f-1024089261f9****";
        java.lang.String str9 = timeAlignedTimeSeriesInfo6.getIdentifier();
        timeAlignedTimeSeriesInfo6.Identifier = "";
        java.lang.String str12 = timeAlignedTimeSeriesInfo6.getUnit();
        org.junit.Assert.assertNotNull(timeAlignedTimeSeriesInfo2);
        org.junit.Assert.assertNotNull(timeAlignedTimeSeriesInfo4);
        org.junit.Assert.assertNotNull(timeAlignedTimeSeriesInfo6);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNull(str12);
    }

    @Test
    public void test53301() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest106.test53301");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostImportLabReportDataDryRun postImportLabReportDataDryRun0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostImportLabReportDataDryRun();
        java.lang.String str1 = postImportLabReportDataDryRun0.getFileType();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostImportLabReportDataDryRun postImportLabReportDataDryRun3 = postImportLabReportDataDryRun0.setUpdateExistingResults((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostImportLabReportDataDryRun postImportLabReportDataDryRun5 = postImportLabReportDataDryRun0.setUpdateExistingResults((java.lang.Boolean) false);
        postImportLabReportDataDryRun0.CreateMissingObjects = false;
        postImportLabReportDataDryRun0.TimeZoneOffset = "http://MaxDurationhttp/json/reply/Integer://multipart/form-data; boundary=****930a219d-85cf-428e-8cad-9442e08cea99****";
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(postImportLabReportDataDryRun3);
        org.junit.Assert.assertNotNull(postImportLabReportDataDryRun5);
    }

    @Test
    public void test53302() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest106.test53302");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SearchResultSpecimen searchResultSpecimen0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SearchResultSpecimen();
        java.lang.Integer int1 = searchResultSpecimen0.TotalCount;
        java.lang.Integer int2 = searchResultSpecimen0.getTotalCount();
        java.lang.Integer int3 = searchResultSpecimen0.TotalCount;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SearchResultSpecimen searchResultSpecimen4 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SearchResultSpecimen();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Specimen[] specimenArray5 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Specimen[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Specimen> specimenList6 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Specimen>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Specimen>) specimenList6, specimenArray5);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SearchResultSpecimen searchResultSpecimen8 = searchResultSpecimen4.setDomainObjects((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Specimen>) specimenList6);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SearchResultSpecimen searchResultSpecimen9 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SearchResultSpecimen();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Specimen[] specimenArray10 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Specimen[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Specimen> specimenList11 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Specimen>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Specimen>) specimenList11, specimenArray10);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SearchResultSpecimen searchResultSpecimen13 = searchResultSpecimen9.setDomainObjects((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Specimen>) specimenList11);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SearchResultSpecimen searchResultSpecimen14 = searchResultSpecimen8.setDomainObjects((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Specimen>) specimenList11);
        java.lang.Integer int15 = searchResultSpecimen8.TotalCount;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SearchResultSpecimen searchResultSpecimen16 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SearchResultSpecimen();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Specimen[] specimenArray17 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Specimen[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Specimen> specimenList18 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Specimen>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Specimen>) specimenList18, specimenArray17);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SearchResultSpecimen searchResultSpecimen20 = searchResultSpecimen16.setDomainObjects((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Specimen>) specimenList18);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SearchResultSpecimen searchResultSpecimen21 = searchResultSpecimen8.setDomainObjects((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Specimen>) specimenList18);
        searchResultSpecimen0.DomainObjects = specimenList18;
        org.junit.Assert.assertNull(int1);
        org.junit.Assert.assertNull(int2);
        org.junit.Assert.assertNull(int3);
        org.junit.Assert.assertNotNull(specimenArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(searchResultSpecimen8);
        org.junit.Assert.assertNotNull(specimenArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(searchResultSpecimen13);
        org.junit.Assert.assertNotNull(searchResultSpecimen14);
        org.junit.Assert.assertNull(int15);
        org.junit.Assert.assertNotNull(specimenArray17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(searchResultSpecimen20);
        org.junit.Assert.assertNotNull(searchResultSpecimen21);
    }

    @Test
    public void test53303() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest106.test53303");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitDataServiceResponse fieldVisitDataServiceResponse0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitDataServiceResponse();
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CrossSectionSurveyActivity> crossSectionSurveyActivityList1 = fieldVisitDataServiceResponse0.CrossSectionSurveyActivity;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitDataServiceResponse fieldVisitDataServiceResponse3 = fieldVisitDataServiceResponse0.setIdentifier("");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary4 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        dischargeSummary4.Reviewer = "";
        java.time.Instant instant7 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        dischargeSummary4.MeasurementTime = instant7;
        fieldVisitDataServiceResponse0.ResponseTime = instant7;
        fieldVisitDataServiceResponse0.Identifier = "hi!";
        java.lang.String str12 = fieldVisitDataServiceResponse0.getSummary();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.InspectionActivity inspectionActivity13 = null;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitDataServiceResponse fieldVisitDataServiceResponse14 = fieldVisitDataServiceResponse0.setInspectionActivity(inspectionActivity13);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.GageHeightAtZeroFlowActivity gageHeightAtZeroFlowActivity15 = fieldVisitDataServiceResponse0.getGageHeightAtZeroFlowActivity();
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CrossSectionSurveyActivity> crossSectionSurveyActivityList16 = fieldVisitDataServiceResponse0.getCrossSectionSurveyActivity();
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Attachment> attachmentList17 = fieldVisitDataServiceResponse0.Attachments;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitDataServiceResponse fieldVisitDataServiceResponse18 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitDataServiceResponse();
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CrossSectionSurveyActivity> crossSectionSurveyActivityList19 = fieldVisitDataServiceResponse18.CrossSectionSurveyActivity;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitDataServiceResponse fieldVisitDataServiceResponse21 = fieldVisitDataServiceResponse18.setIdentifier("");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeActivity dischargeActivity22 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeActivity();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.AdcpDischargeActivity[] adcpDischargeActivityArray23 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.AdcpDischargeActivity[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.AdcpDischargeActivity> adcpDischargeActivityList24 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.AdcpDischargeActivity>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.AdcpDischargeActivity>) adcpDischargeActivityList24, adcpDischargeActivityArray23);
        dischargeActivity22.AdcpDischargeActivities = adcpDischargeActivityList24;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeActivity dischargeActivity27 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeActivity();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeActivity[] dischargeActivityArray28 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeActivity[] { dischargeActivity22, dischargeActivity27 };
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeActivity> dischargeActivityList29 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeActivity>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeActivity>) dischargeActivityList29, dischargeActivityArray28);
        fieldVisitDataServiceResponse21.DischargeActivities = dischargeActivityList29;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ControlConditionActivity controlConditionActivity32 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ControlConditionActivity();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ControlCleanedType controlCleanedType33 = null;
        controlConditionActivity32.ControlCleaned = controlCleanedType33;
        java.lang.String str35 = controlConditionActivity32.Comments;
        controlConditionActivity32.Comments = "/AQUARIUS/Acquisition/v2";
        java.lang.String str38 = controlConditionActivity32.Comments;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitDataServiceResponse fieldVisitDataServiceResponse39 = fieldVisitDataServiceResponse21.setControlConditionActivity(controlConditionActivity32);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisit fieldVisit40 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisit();
        java.time.Instant instant41 = fieldVisit40.StartTime;
        java.lang.String str42 = fieldVisit40.getParty();
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Attachment> attachmentList43 = fieldVisit40.Attachments;
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Attachment> attachmentList44 = fieldVisit40.Attachments;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DatumConversionResult datumConversionResult45 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DatumConversionResult();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DatumConversionResult datumConversionResult47 = datumConversionResult45.setTargetDatum("http");
        java.lang.String str48 = datumConversionResult45.TargetDatum;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DatumConversionResult datumConversionResult50 = datumConversionResult45.setTargetDatum("https");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisit fieldVisit51 = fieldVisit40.setDatumConversionResult(datumConversionResult50);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CompletedWork completedWork52 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CompletedWork();
        java.lang.Boolean boolean53 = completedWork52.isWaterQualitySampleTaken();
        completedWork52.WaterQualitySampleTaken = true;
        fieldVisit51.CompletedWork = completedWork52;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitApproval fieldVisitApproval57 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitApproval();
        java.lang.String str58 = fieldVisitApproval57.LevelDescription;
        fieldVisitApproval57.ApprovalLevel = 100L;
        fieldVisitApproval57.ApprovalLevel = 100L;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisit fieldVisit63 = fieldVisit51.setApproval(fieldVisitApproval57);
        fieldVisitDataServiceResponse21.Approval = fieldVisitApproval57;
        fieldVisitDataServiceResponse0.Approval = fieldVisitApproval57;
        org.junit.Assert.assertNull(crossSectionSurveyActivityList1);
        org.junit.Assert.assertNotNull(fieldVisitDataServiceResponse3);
        org.junit.Assert.assertNotNull(instant7);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(fieldVisitDataServiceResponse14);
        org.junit.Assert.assertNull(gageHeightAtZeroFlowActivity15);
        org.junit.Assert.assertNull(crossSectionSurveyActivityList16);
        org.junit.Assert.assertNull(attachmentList17);
        org.junit.Assert.assertNull(crossSectionSurveyActivityList19);
        org.junit.Assert.assertNotNull(fieldVisitDataServiceResponse21);
        org.junit.Assert.assertNotNull(adcpDischargeActivityArray23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(dischargeActivityArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "/AQUARIUS/Acquisition/v2" + "'", str38, "/AQUARIUS/Acquisition/v2");
        org.junit.Assert.assertNotNull(fieldVisitDataServiceResponse39);
        org.junit.Assert.assertNull(instant41);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertNull(attachmentList43);
        org.junit.Assert.assertNull(attachmentList44);
        org.junit.Assert.assertNotNull(datumConversionResult47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "http" + "'", str48, "http");
        org.junit.Assert.assertNotNull(datumConversionResult50);
        org.junit.Assert.assertNotNull(fieldVisit51);
        org.junit.Assert.assertNull(boolean53);
        org.junit.Assert.assertNull(str58);
        org.junit.Assert.assertNotNull(fieldVisit63);
    }

    @Test
    public void test53304() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest106.test53304");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.MonitoringMethod monitoringMethod0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.MonitoringMethod();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.MonitoringMethod monitoringMethod2 = monitoringMethod0.setParameterUniqueId("/AQUARIUS");
        java.lang.String str3 = monitoringMethod0.getDisplayName();
        java.lang.String str4 = monitoringMethod0.ParameterIdentifier;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.MonitoringMethod monitoringMethod6 = monitoringMethod0.setRoundingSpec("hi!:///AQUARIUS/Provisioning/v1");
        monitoringMethod0.ParameterUniqueId = "/AQUARIUS/Acquisition/v2://9999-12-31T23:59:59.999Z";
        monitoringMethod0.RoundingSpec = "multipart/form-data; boundary=****f642a130-eb6d-4fb6-a1a4-7c7216ab119b****";
        org.junit.Assert.assertNotNull(monitoringMethod2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNotNull(monitoringMethod6);
    }

    @Test
    public void test53305() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest106.test53305");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ReportListServiceRequest reportListServiceRequest0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ReportListServiceRequest();
        reportListServiceRequest0.ReportTitle = "MinDuration";
        java.lang.String str3 = reportListServiceRequest0.getLocationUniqueId();
        java.util.ArrayList<java.lang.String> strList4 = reportListServiceRequest0.getTagKeys();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ReportListServiceRequest reportListServiceRequest6 = reportListServiceRequest0.setUserUniqueId("9999-12-31T23:59:59.9999999Z://2021.4.62.0");
        java.lang.String str7 = reportListServiceRequest6.getReportTitle();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ReportListServiceRequest reportListServiceRequest9 = reportListServiceRequest6.setLocationUniqueId("multipart/form-data; boundary=****c5ace73f-96fd-4e64-b844-d9edac3c6d02****");
        java.util.ArrayList<java.lang.String> strList10 = reportListServiceRequest9.getTagKeys();
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(strList4);
        org.junit.Assert.assertNotNull(reportListServiceRequest6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "MinDuration" + "'", str7, "MinDuration");
        org.junit.Assert.assertNotNull(reportListServiceRequest9);
        org.junit.Assert.assertNull(strList10);
    }

    @Test
    public void test53306() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest106.test53306");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocation samplingLocation0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocation();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricConfiguration metricConfiguration1 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricConfiguration();
        java.lang.String str2 = metricConfiguration1.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty observedProperty3 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty();
        observedProperty3.CasNumber = "MinDuration";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricConfiguration metricConfiguration6 = metricConfiguration1.setObservedProperty(observedProperty3);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultType resultType7 = observedProperty3.ResultType;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservedProperty postObservedProperty8 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservedProperty();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UnitGroup unitGroup9 = postObservedProperty8.UnitGroup;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity quantity10 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Unit unit11 = null;
        quantity10.Unit = unit11;
        postObservedProperty8.LowerLimit = quantity10;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity quantity14 = postObservedProperty8.LowerLimit;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Unit unit15 = quantity14.Unit;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty observedProperty16 = observedProperty3.setUpperLimit(quantity14);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocation samplingLocation17 = samplingLocation0.setElevation(quantity14);
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment> domainObjectAttachmentList18 = samplingLocation17.getAttachments();
        java.lang.String str19 = samplingLocation17.getHorizontalCollectionMethod();
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple> importHistoryEventSimpleList20 = samplingLocation17.ImportHistoryEventSimples;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity quantity21 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Unit unit22 = null;
        quantity21.Unit = unit22;
        samplingLocation17.Elevation = quantity21;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Address address25 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Address();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Address address27 = address25.setCityName("/AQUARIUS/Acquisition/v2://9999-12-31T23:59:59.999Z");
        address25.CountryCode = "POST";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Address address31 = address25.setCountyCode("yyyy'-'MM'-'dd'T'HH':'mm':'ss");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostSamplingLocation postSamplingLocation32 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostSamplingLocation();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostSamplingLocation postSamplingLocation34 = postSamplingLocation32.setCustomId("hi!");
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttribute> extendedAttributeList35 = postSamplingLocation32.getExtendedAttributes();
        java.lang.String str36 = postSamplingLocation32.getLatitude();
        java.lang.String str37 = postSamplingLocation32.Id;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSamplingLocation putSamplingLocation38 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSamplingLocation();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSamplingLocation putSamplingLocation40 = putSamplingLocation38.setCustomId("https");
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttribute> extendedAttributeList41 = putSamplingLocation38.ExtendedAttributes;
        java.lang.String str42 = putSamplingLocation38.VerticalCollectionMethod;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Address address43 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Address();
        putSamplingLocation38.Address = address43;
        java.lang.String str45 = address43.getCountyCode();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostSamplingLocation postSamplingLocation46 = postSamplingLocation32.setAddress(address43);
        address43.PostalCode = "http://MaxDurationhttp/json/reply/ArrayList";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Address address49 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Address();
        address49.StreetName = "http://MaxDurationhttp/json/reply/ArrayList";
        java.lang.String str52 = address49.StreetName;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AddressType addressType53 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AddressType.SHIPPING;
        address49.AddressType = addressType53;
        address43.AddressType = addressType53;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Address address56 = address31.setAddressType(addressType53);
        java.lang.String str57 = address31.StreetName;
        address31.StreetName = "yyyy'-'MM'-'dd'T'HH':'mm':'ss";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Address address61 = address31.setCountryCode("2021.4.62.0");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocation samplingLocation62 = samplingLocation17.setAddress(address31);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNotNull(metricConfiguration6);
        org.junit.Assert.assertNull(resultType7);
        org.junit.Assert.assertNull(unitGroup9);
        org.junit.Assert.assertNotNull(quantity14);
        org.junit.Assert.assertNull(unit15);
        org.junit.Assert.assertNotNull(observedProperty16);
        org.junit.Assert.assertNotNull(samplingLocation17);
        org.junit.Assert.assertNull(domainObjectAttachmentList18);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertNull(importHistoryEventSimpleList20);
        org.junit.Assert.assertNotNull(address27);
        org.junit.Assert.assertNotNull(address31);
        org.junit.Assert.assertNotNull(postSamplingLocation34);
        org.junit.Assert.assertNull(extendedAttributeList35);
        org.junit.Assert.assertNull(str36);
        org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertNotNull(putSamplingLocation40);
        org.junit.Assert.assertNull(extendedAttributeList41);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertNull(str45);
        org.junit.Assert.assertNotNull(postSamplingLocation46);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "http://MaxDurationhttp/json/reply/ArrayList" + "'", str52, "http://MaxDurationhttp/json/reply/ArrayList");
        org.junit.Assert.assertTrue("'" + addressType53 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AddressType.SHIPPING + "'", addressType53.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AddressType.SHIPPING));
        org.junit.Assert.assertNotNull(address56);
        org.junit.Assert.assertNull(str57);
        org.junit.Assert.assertNotNull(address61);
        org.junit.Assert.assertNotNull(samplingLocation62);
    }

    @Test
    public void test53307() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest106.test53307");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ThresholdType thresholdType0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ThresholdType();
        thresholdType0.Description = "/AQUARIUS/Acquisition/v2://9999-12-31T23:59:59.999Z";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ThresholdSuppressionOption thresholdSuppressionOption3 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ThresholdSuppressionOption.Off;
        thresholdType0.ThresholdSuppressionOption = thresholdSuppressionOption3;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ThresholdSuppressionOption thresholdSuppressionOption5 = thresholdType0.getThresholdSuppressionOption();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ThresholdSuppressionOption thresholdSuppressionOption6 = thresholdType0.ThresholdSuppressionOption;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ThresholdTypeSeverity thresholdTypeSeverity7 = thresholdType0.getSeverity();
        org.junit.Assert.assertTrue("'" + thresholdSuppressionOption3 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ThresholdSuppressionOption.Off + "'", thresholdSuppressionOption3.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ThresholdSuppressionOption.Off));
        org.junit.Assert.assertTrue("'" + thresholdSuppressionOption5 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ThresholdSuppressionOption.Off + "'", thresholdSuppressionOption5.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ThresholdSuppressionOption.Off));
        org.junit.Assert.assertTrue("'" + thresholdSuppressionOption6 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ThresholdSuppressionOption.Off + "'", thresholdSuppressionOption6.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ThresholdSuppressionOption.Off));
        org.junit.Assert.assertNull(thresholdTypeSeverity7);
    }

    @Test
    public void test53308() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest106.test53308");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.RuleValidationDetails ruleValidationDetails0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.RuleValidationDetails();
        java.lang.String str1 = ruleValidationDetails0.getType();
        java.lang.Object obj2 = ruleValidationDetails0.Properties;
        java.lang.String str3 = ruleValidationDetails0.Description;
        java.lang.Object obj4 = ruleValidationDetails0.Properties;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetTaxon getTaxon5 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetTaxon();
        java.lang.String str6 = getTaxon5.Id;
        getTaxon5.Id = "-PT87591240H";
        java.lang.String str9 = getTaxon5.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.RuleValidationDetails ruleValidationDetails10 = ruleValidationDetails0.setProperties((java.lang.Object) getTaxon5);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.RuleValidationDetails ruleValidationDetails12 = ruleValidationDetails10.setType("http://MaxDurationhttp/json/reply/Double");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.RuleValidationDetails ruleValidationDetails14 = ruleValidationDetails12.setType("");
        java.lang.String str15 = ruleValidationDetails12.Type;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(obj2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "-PT87591240H" + "'", str9, "-PT87591240H");
        org.junit.Assert.assertNotNull(ruleValidationDetails10);
        org.junit.Assert.assertNotNull(ruleValidationDetails12);
        org.junit.Assert.assertNotNull(ruleValidationDetails14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
    }

    @Test
    public void test53309() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest106.test53309");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.StagePoint stagePoint0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.StagePoint();
        java.lang.Double double1 = stagePoint0.InputValue;
        java.lang.Double double2 = stagePoint0.InputValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.StagePoint stagePoint4 = stagePoint0.setCorrection((java.lang.Double) 0.0d);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.StagePoint stagePoint6 = stagePoint0.setCorrectedValue((java.lang.Double) 1.0d);
        org.junit.Assert.assertNull(double1);
        org.junit.Assert.assertNull(double2);
        org.junit.Assert.assertNotNull(stagePoint4);
        org.junit.Assert.assertNotNull(stagePoint6);
    }

    @Test
    public void test53310() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest106.test53310");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutCollectionMethod putCollectionMethod0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutCollectionMethod();
        java.lang.String str1 = putCollectionMethod0.IdentifierOrganization;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutCollectionMethod putCollectionMethod3 = putCollectionMethod0.setId("multipart/form-data; boundary=****c82cca4e-7755-4a00-8acf-9ac791c56995****");
        java.lang.String str4 = putCollectionMethod3.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutCollectionMethod putCollectionMethod6 = putCollectionMethod3.setCustomId("multipart/form-data; boundary=****d9f5d551-383a-4365-87fd-ae7094da6f3b****");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutCollectionMethod putCollectionMethod8 = putCollectionMethod3.setId("multipart/form-data; boundary=****a4fdf419-75ec-47da-b5aa-9e1a0b649b0a****");
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(putCollectionMethod3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "multipart/form-data; boundary=****c82cca4e-7755-4a00-8acf-9ac791c56995****" + "'", str4, "multipart/form-data; boundary=****c82cca4e-7755-4a00-8acf-9ac791c56995****");
        org.junit.Assert.assertNotNull(putCollectionMethod6);
        org.junit.Assert.assertNotNull(putCollectionMethod8);
    }

    @Test
    public void test53311() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest106.test53311");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.PostLocationAttachmentResponse postLocationAttachmentResponse0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.PostLocationAttachmentResponse();
        java.lang.String str1 = postLocationAttachmentResponse0.getComments();
        java.lang.String str2 = postLocationAttachmentResponse0.Comments;
        java.lang.String str3 = postLocationAttachmentResponse0.LocationUniqueId;
        java.lang.String str4 = postLocationAttachmentResponse0.Url;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.PostLocationAttachment postLocationAttachment5 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.PostLocationAttachment();
        java.lang.String str6 = postLocationAttachment5.getComments();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.IHttpFile iHttpFile7 = null;
        postLocationAttachment5.File = iHttpFile7;
        postLocationAttachment5.LocationUniqueId = "multipart/form-data; boundary=****2917d69a-62fa-41ce-b981-4dbe2deab9f5****";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.AttachmentCategory attachmentCategory11 = postLocationAttachment5.AttachmentCategory;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.AttachmentCategory attachmentCategory12 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.AttachmentCategory.InventoryControl;
        postLocationAttachment5.AttachmentCategory = attachmentCategory12;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.PostLocationAttachmentResponse postLocationAttachmentResponse14 = postLocationAttachmentResponse0.setAttachmentCategory(attachmentCategory12);
        java.lang.String str15 = postLocationAttachmentResponse0.UniqueId;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(attachmentCategory11);
        org.junit.Assert.assertTrue("'" + attachmentCategory12 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.AttachmentCategory.InventoryControl + "'", attachmentCategory12.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.AttachmentCategory.InventoryControl));
        org.junit.Assert.assertNotNull(postLocationAttachmentResponse14);
        org.junit.Assert.assertNull(str15);
    }

    @Test
    public void test53312() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest106.test53312");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetGroupedObservationsV2 getGroupedObservationsV2_0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetGroupedObservationsV2();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TagDefinition tagDefinition1 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TagDefinition();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TagValueType tagValueType2 = null;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TagDefinition tagDefinition3 = tagDefinition1.setValueType(tagValueType2);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TagDefinition tagDefinition5 = tagDefinition1.setAppliesToAttachments((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TagDefinition tagDefinition7 = tagDefinition5.setKey("yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TagDefinition tagDefinition9 = tagDefinition5.setAppliesToReports((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest10 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest();
        java.lang.Object obj11 = timeAlignedDataServiceRequest10.getResponseType();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse12 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant13 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse14 = locationDescriptionListServiceResponse12.setNextToken(instant13);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest15 = timeAlignedDataServiceRequest10.setQueryFrom(instant13);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags16 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray20 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList21 = new java.util.ArrayList<java.lang.String>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList21, strArray20);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags23 = putLocationTags16.setTagUniqueIds(strList21);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest24 = timeAlignedDataServiceRequest10.setTimeSeriesOutputUnitIds(strList21);
        tagDefinition9.PickListValues = strList21;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetGroupedObservationsV2 getGroupedObservationsV2_26 = getGroupedObservationsV2_0.setLabResultLabAnalysisMethodIds((java.util.List<java.lang.String>) strList21);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.FieldResultType fieldResultType27 = getGroupedObservationsV2_26.FieldResultType;
        getGroupedObservationsV2_26.SpecimenName = "MaxInstant";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetGroupedObservationsV2 getGroupedObservationsV2_31 = getGroupedObservationsV2_26.setCustomId("/AQUARIUS");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags32 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray36 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList37 = new java.util.ArrayList<java.lang.String>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList37, strArray36);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags39 = putLocationTags32.setTagUniqueIds(strList37);
        getGroupedObservationsV2_26.AnalysisMethodIds = strList37;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostExtendedAttribute postExtendedAttribute41 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostExtendedAttribute();
        java.lang.String str42 = postExtendedAttribute41.getKey();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.TagValueType tagValueType43 = postExtendedAttribute41.ValueType;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportSpecimens getExportSpecimens44 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportSpecimens();
        java.util.List<java.lang.String> strList45 = getExportSpecimens44.getActivityTypes();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Qualifier qualifier46 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Qualifier();
        java.time.Instant instant47 = qualifier46.DateApplied;
        java.lang.String str48 = qualifier46.User;
        java.lang.String str49 = qualifier46.getIdentifier();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest50 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest();
        java.lang.Object obj51 = timeAlignedDataServiceRequest50.getResponseType();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse52 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant53 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse54 = locationDescriptionListServiceResponse52.setNextToken(instant53);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest55 = timeAlignedDataServiceRequest50.setQueryFrom(instant53);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Qualifier qualifier56 = qualifier46.setDateApplied(instant53);
        getExportSpecimens44.Before = instant53;
        java.util.List<java.lang.String> strList58 = getExportSpecimens44.getLaboratoryIds();
        java.util.List<java.lang.String> strList59 = getExportSpecimens44.getSearch();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivityRecurrence samplingPlanPlannedActivityRecurrence60 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivityRecurrence();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.RecurrenceFrequencyType recurrenceFrequencyType61 = samplingPlanPlannedActivityRecurrence60.RecurrenceFrequency;
        java.util.List<java.lang.String> strList62 = samplingPlanPlannedActivityRecurrence60.getMonthsOfYear();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutQualifier putQualifier63 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutQualifier();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutQualifier putQualifier65 = putQualifier63.setUniqueId("");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest66 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_67 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray69 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList70 = new java.util.ArrayList<java.lang.String>();
        boolean boolean71 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList70, strArray69);
        getObservationsV2_67.SpecimenIds = strList70;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags73 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray77 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList78 = new java.util.ArrayList<java.lang.String>();
        boolean boolean79 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList78, strArray77);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags80 = putLocationTags73.setTagUniqueIds(strList78);
        getObservationsV2_67.QualityControlTypes = strList78;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest82 = timeAlignedDataServiceRequest66.setTimeSeriesUniqueIds(strList78);
        putQualifier63.GroupIdentifiers = strList78;
        java.util.ArrayList<java.lang.String> strList84 = putQualifier63.GroupIdentifiers;
        samplingPlanPlannedActivityRecurrence60.MonthsOfYear = strList84;
        getExportSpecimens44.ActivityTypes = strList84;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.EditableExtendedAttribute editableExtendedAttribute87 = postExtendedAttribute41.setPickListValues(strList84);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetGroupedObservationsV2 getGroupedObservationsV2_88 = getGroupedObservationsV2_26.setProjectIds((java.util.List<java.lang.String>) strList84);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetGroupedObservationsV2 getGroupedObservationsV2_90 = getGroupedObservationsV2_88.setSort("https");
        java.util.List<java.lang.String> strList91 = getGroupedObservationsV2_88.getDataClassifications();
        getGroupedObservationsV2_88.Sort = "2021.8.9990";
        java.lang.String str94 = getGroupedObservationsV2_88.Cursor;
        org.junit.Assert.assertNotNull(tagDefinition3);
        org.junit.Assert.assertNotNull(tagDefinition5);
        org.junit.Assert.assertNotNull(tagDefinition7);
        org.junit.Assert.assertNotNull(tagDefinition9);
        org.junit.Assert.assertNotNull(obj11);
        org.junit.Assert.assertEquals(obj11.toString(), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj11), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj11), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertNotNull(instant13);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse14);
        org.junit.Assert.assertNotNull(timeAlignedDataServiceRequest15);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(putLocationTags23);
        org.junit.Assert.assertNotNull(timeAlignedDataServiceRequest24);
        org.junit.Assert.assertNotNull(getGroupedObservationsV2_26);
        org.junit.Assert.assertNull(fieldResultType27);
        org.junit.Assert.assertNotNull(getGroupedObservationsV2_31);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(putLocationTags39);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertNull(tagValueType43);
        org.junit.Assert.assertNull(strList45);
        org.junit.Assert.assertNull(instant47);
        org.junit.Assert.assertNull(str48);
        org.junit.Assert.assertNull(str49);
        org.junit.Assert.assertNotNull(obj51);
        org.junit.Assert.assertEquals(obj51.toString(), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj51), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj51), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertNotNull(instant53);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse54);
        org.junit.Assert.assertNotNull(timeAlignedDataServiceRequest55);
        org.junit.Assert.assertNotNull(qualifier56);
        org.junit.Assert.assertNull(strList58);
        org.junit.Assert.assertNull(strList59);
        org.junit.Assert.assertNull(recurrenceFrequencyType61);
        org.junit.Assert.assertNull(strList62);
        org.junit.Assert.assertNotNull(putQualifier65);
        org.junit.Assert.assertNotNull(strArray69);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertNotNull(strArray77);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
        org.junit.Assert.assertNotNull(putLocationTags80);
        org.junit.Assert.assertNotNull(timeAlignedDataServiceRequest82);
        org.junit.Assert.assertNotNull(strList84);
        org.junit.Assert.assertNotNull(editableExtendedAttribute87);
        org.junit.Assert.assertNotNull(getGroupedObservationsV2_88);
        org.junit.Assert.assertNotNull(getGroupedObservationsV2_90);
        org.junit.Assert.assertNull(strList91);
        org.junit.Assert.assertNull(str94);
    }

    @Test
    public void test53313() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest106.test53313");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.User user0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.User();
        java.util.List<java.lang.String> strList1 = user0.getRoles();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.User user3 = user0.setEmail("hi!");
        java.util.List<java.lang.String> strList4 = user0.getAccessGroups();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.User user6 = user0.setCustomId("/AQUARIUS/Provisioning/v1");
        user0.Id = "multipart/form-data; boundary=****26835278-3e68-484a-a157-468aab2e69a2****";
        java.lang.String str9 = user0.getId();
        org.junit.Assert.assertNull(strList1);
        org.junit.Assert.assertNotNull(user3);
        org.junit.Assert.assertNull(strList4);
        org.junit.Assert.assertNotNull(user6);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "multipart/form-data; boundary=****26835278-3e68-484a-a157-468aab2e69a2****" + "'", str9, "multipart/form-data; boundary=****26835278-3e68-484a-a157-468aab2e69a2****");
    }

    @Test
    public void test53314() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest106.test53314");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostStandard postStandard0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostStandard();
        java.lang.Boolean boolean1 = postStandard0.Active;
        org.junit.Assert.assertNull(boolean1);
    }

    @Test
    public void test53315() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest106.test53315");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostAnalyticalGroup postAnalyticalGroup0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostAnalyticalGroup();
        postAnalyticalGroup0.Id = "/AQUARIUS";
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem> analyticalGroupItemList3 = postAnalyticalGroup0.getAnalyticalGroupItems();
        postAnalyticalGroup0.NumberOfObservedPropertiesInGroupItems = 2;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostAnalyticalGroup postAnalyticalGroup7 = postAnalyticalGroup0.setDescription("");
        java.lang.String str8 = postAnalyticalGroup0.Id;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes9 = postAnalyticalGroup0.getAuditAttributes();
        org.junit.Assert.assertNull(analyticalGroupItemList3);
        org.junit.Assert.assertNotNull(postAnalyticalGroup7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "/AQUARIUS" + "'", str8, "/AQUARIUS");
        org.junit.Assert.assertNull(auditAttributes9);
    }

    @Test
    public void test53316() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest106.test53316");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Approval approval0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Approval();
        java.lang.String str1 = approval0.User;
        approval0.LevelDescription = "multipart/form-data; boundary=****44f0772e-c3ca-4316-8e2a-61ec8540d661****";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Approval approval5 = approval0.setComment("-PT87591240H");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Approval approval7 = approval0.setLevelDescription("9999-12-31T23:59:59.9999999Z");
        java.time.Instant instant8 = approval0.getDateAppliedUtc();
        java.lang.Integer int9 = approval0.getApprovalLevel();
        java.lang.String str10 = approval0.getLevelDescription();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(approval5);
        org.junit.Assert.assertNotNull(approval7);
        org.junit.Assert.assertNull(instant8);
        org.junit.Assert.assertNull(int9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "9999-12-31T23:59:59.9999999Z" + "'", str10, "9999-12-31T23:59:59.9999999Z");
    }

    @Test
    public void test53317() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest106.test53317");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.GetLocationFolderUserRoles getLocationFolderUserRoles0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.GetLocationFolderUserRoles();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.GetLocationFolderUserRoles getLocationFolderUserRoles2 = getLocationFolderUserRoles0.setLocationFolderUniqueId("2021.4.62.0");
        java.lang.String str3 = getLocationFolderUserRoles2.LocationFolderUniqueId;
        java.lang.String str4 = getLocationFolderUserRoles2.LocationFolderUniqueId;
        org.junit.Assert.assertNotNull(getLocationFolderUserRoles2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "2021.4.62.0" + "'", str3, "2021.4.62.0");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "2021.4.62.0" + "'", str4, "2021.4.62.0");
    }

    @Test
    public void test53318() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest106.test53318");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate2 = specimenTemplate0.setCustomId("hi!");
        java.lang.String str3 = specimenTemplate2.FiltrationComment;
        java.lang.String str4 = specimenTemplate2.Id;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroup analyticalGroup5 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroup();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupType analyticalGroupType6 = analyticalGroup5.getType();
        java.lang.String str7 = analyticalGroup5.Name;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem analyticalGroupItem8 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod9 = analyticalGroupItem8.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod10 = analyticalGroupItem8.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod11 = null;
        analyticalGroupItem8.AnalysisMethod = analysisMethod11;
        java.lang.String str13 = analyticalGroupItem8.getHoldingTime();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod14 = analyticalGroupItem8.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem[] analyticalGroupItemArray15 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem[] { analyticalGroupItem8 };
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem> analyticalGroupItemList16 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem>) analyticalGroupItemList16, analyticalGroupItemArray15);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroup analyticalGroup18 = analyticalGroup5.setAnalyticalGroupItems((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem>) analyticalGroupItemList16);
        java.lang.String str19 = analyticalGroup18.Name;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFilter postFilter20 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFilter();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostExtendedAttribute postExtendedAttribute21 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostExtendedAttribute();
        java.lang.String str22 = postExtendedAttribute21.CustomId;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DataType dataType23 = postExtendedAttribute21.DataType;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivity samplingPlanPlannedActivity24 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivity();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes25 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivity samplingPlanPlannedActivity26 = samplingPlanPlannedActivity24.setAuditAttributes(auditAttributes25);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes27 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes29 = auditAttributes27.setCreationUserProfileId("'.'SSSSSSS");
        samplingPlanPlannedActivity26.AuditAttributes = auditAttributes27;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes31 = samplingPlanPlannedActivity26.AuditAttributes;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostExtendedAttribute postExtendedAttribute32 = postExtendedAttribute21.setAuditAttributes(auditAttributes31);
        java.time.OffsetDateTime offsetDateTime33 = auditAttributes31.getModificationTime();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFilter postFilter34 = postFilter20.setAuditAttributes(auditAttributes31);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroup analyticalGroup35 = analyticalGroup18.setAuditAttributes(auditAttributes31);
        specimenTemplate2.AnalyticalGroup = analyticalGroup18;
        specimenTemplate2.Filtered = true;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PreservativeType preservativeType39 = specimenTemplate2.Preservative;
        org.junit.Assert.assertNotNull(specimenTemplate2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(analyticalGroupType6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(analysisMethod9);
        org.junit.Assert.assertNull(analysisMethod10);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNull(analysisMethod14);
        org.junit.Assert.assertNotNull(analyticalGroupItemArray15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(analyticalGroup18);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertNull(dataType23);
        org.junit.Assert.assertNotNull(samplingPlanPlannedActivity26);
        org.junit.Assert.assertNotNull(auditAttributes29);
        org.junit.Assert.assertNotNull(auditAttributes31);
        org.junit.Assert.assertNotNull(postExtendedAttribute32);
        org.junit.Assert.assertNull(offsetDateTime33);
        org.junit.Assert.assertNotNull(postFilter34);
        org.junit.Assert.assertNotNull(analyticalGroup35);
        org.junit.Assert.assertNull(preservativeType39);
    }

    @Test
    public void test53319() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest106.test53319");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationMinimal observationMinimal0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationMinimal();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenNestedInActivity specimenNestedInActivity1 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationMinimal observationMinimal2 = observationMinimal0.setSpecimen(specimenNestedInActivity1);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty observedProperty3 = observationMinimal2.ObservedProperty;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.CategoricalResult categoricalResult4 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.CategoricalResult();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.CategoricalValue categoricalValue5 = categoricalResult4.getFixedValue();
        observationMinimal2.CategoricalResult = categoricalResult4;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.CategoricalResult categoricalResult7 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.CategoricalResult();
        categoricalResult7.Value = "'.'SSSSSSS";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.CategoricalValue categoricalValue10 = categoricalResult7.FixedValue;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.NullMeasureQualifier nullMeasureQualifier11 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.NullMeasureQualifier();
        categoricalResult7.NullMeasureQualifier = nullMeasureQualifier11;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.CategoricalResult categoricalResult13 = categoricalResult4.setNullMeasureQualifier(nullMeasureQualifier11);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.NullMeasureQualifier nullMeasureQualifier14 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.NullMeasureQualifier();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes15 = nullMeasureQualifier14.AuditAttributes;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSchedule putSchedule16 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSchedule();
        java.time.OffsetDateTime offsetDateTime17 = putSchedule16.StartDate;
        java.time.OffsetDateTime offsetDateTime18 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSchedule putSchedule19 = putSchedule16.setEndDate(offsetDateTime18);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes20 = putSchedule19.AuditAttributes;
        java.time.OffsetDateTime offsetDateTime21 = putSchedule19.getEndDate();
        java.time.OffsetDateTime offsetDateTime22 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSchedule putSchedule23 = putSchedule19.setStartDate(offsetDateTime22);
        java.lang.Integer int24 = putSchedule19.SamplingLocationGroupSelectionTypeRandomCount;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.RecurrenceDayMonthlyType recurrenceDayMonthlyType25 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.RecurrenceDayMonthlyType.LAST_DAY_OF_MONTH;
        putSchedule19.RecurrenceDayMonthly = recurrenceDayMonthlyType25;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Unit unit27 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Unit();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes28 = unit27.AuditAttributes;
        unit27.BaseMultiplier = 0.0d;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutAccessGroup putAccessGroup31 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutAccessGroup();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivity samplingPlanPlannedActivity32 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivity();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes33 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivity samplingPlanPlannedActivity34 = samplingPlanPlannedActivity32.setAuditAttributes(auditAttributes33);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes35 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes37 = auditAttributes35.setCreationUserProfileId("'.'SSSSSSS");
        samplingPlanPlannedActivity34.AuditAttributes = auditAttributes35;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes39 = samplingPlanPlannedActivity34.AuditAttributes;
        putAccessGroup31.AuditAttributes = auditAttributes39;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Unit unit41 = unit27.setAuditAttributes(auditAttributes39);
        putSchedule19.AuditAttributes = auditAttributes39;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.NullMeasureQualifier nullMeasureQualifier43 = nullMeasureQualifier14.setAuditAttributes(auditAttributes39);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.CategoricalResult categoricalResult44 = categoricalResult13.setNullMeasureQualifier(nullMeasureQualifier43);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.CategoricalValue categoricalValue45 = categoricalResult44.getFixedValue();
        org.junit.Assert.assertNotNull(observationMinimal2);
        org.junit.Assert.assertNull(observedProperty3);
        org.junit.Assert.assertNull(categoricalValue5);
        org.junit.Assert.assertNull(categoricalValue10);
        org.junit.Assert.assertNotNull(categoricalResult13);
        org.junit.Assert.assertNull(auditAttributes15);
        org.junit.Assert.assertNull(offsetDateTime17);
        org.junit.Assert.assertNotNull(putSchedule19);
        org.junit.Assert.assertNull(auditAttributes20);
        org.junit.Assert.assertNull(offsetDateTime21);
        org.junit.Assert.assertNotNull(putSchedule23);
        org.junit.Assert.assertNull(int24);
        org.junit.Assert.assertTrue("'" + recurrenceDayMonthlyType25 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.RecurrenceDayMonthlyType.LAST_DAY_OF_MONTH + "'", recurrenceDayMonthlyType25.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.RecurrenceDayMonthlyType.LAST_DAY_OF_MONTH));
        org.junit.Assert.assertNull(auditAttributes28);
        org.junit.Assert.assertNotNull(samplingPlanPlannedActivity34);
        org.junit.Assert.assertNotNull(auditAttributes37);
        org.junit.Assert.assertNotNull(auditAttributes39);
        org.junit.Assert.assertNotNull(unit41);
        org.junit.Assert.assertNotNull(nullMeasureQualifier43);
        org.junit.Assert.assertNotNull(categoricalResult44);
        org.junit.Assert.assertNull(categoricalValue45);
    }

    @Test
    public void test53320() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest106.test53320");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ReferencePoint referencePoint0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ReferencePoint();
        java.lang.String str1 = referencePoint0.Name;
        java.time.Instant instant2 = referencePoint0.getPrimarySinceDate();
        java.lang.Double double3 = referencePoint0.Longitude;
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ReferencePointPeriod> referencePointPeriodList4 = referencePoint0.ReferencePointPeriods;
        java.time.Instant instant5 = referencePoint0.getDecommissionedDate();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ReferencePoint referencePoint7 = referencePoint0.setLongitude((java.lang.Double) 1.0d);
        java.lang.Double double8 = referencePoint0.Latitude;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ReferencePoint referencePoint10 = referencePoint0.setUniqueId("multipart/form-data; boundary=****a4fdf419-75ec-47da-b5aa-9e1a0b649b0a****");
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(instant2);
        org.junit.Assert.assertNull(double3);
        org.junit.Assert.assertNull(referencePointPeriodList4);
        org.junit.Assert.assertNull(instant5);
        org.junit.Assert.assertNotNull(referencePoint7);
        org.junit.Assert.assertNull(double8);
        org.junit.Assert.assertNotNull(referencePoint10);
    }

    @Test
    public void test53321() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest106.test53321");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CorrectionListServiceRequest correctionListServiceRequest0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CorrectionListServiceRequest();
        java.time.Instant instant1 = correctionListServiceRequest0.getQueryFrom();
        java.lang.String str2 = correctionListServiceRequest0.getTimeSeriesUniqueId();
        java.lang.String str3 = correctionListServiceRequest0.getTimeSeriesUniqueId();
        correctionListServiceRequest0.TimeSeriesUniqueId = "multipart/form-data; boundary=****a02903b2-8109-4914-8058-61246cf0a809****";
        org.junit.Assert.assertNull(instant1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(str3);
    }

    @Test
    public void test53322() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest106.test53322");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostCalculatedDerivedTimeSeries postCalculatedDerivedTimeSeries0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostCalculatedDerivedTimeSeries();
        java.util.ArrayList<java.lang.String> strList1 = postCalculatedDerivedTimeSeries0.TimeSeriesUniqueIds;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostCalculatedDerivedTimeSeries postCalculatedDerivedTimeSeries3 = postCalculatedDerivedTimeSeries0.setFormula("");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostCalculatedDerivedTimeSeries postCalculatedDerivedTimeSeries5 = postCalculatedDerivedTimeSeries3.setMethod("/AQUARIUS/Provisioning/v1");
        java.lang.String str6 = postCalculatedDerivedTimeSeries3.getComputationPeriodIdentifier();
        org.junit.Assert.assertNull(strList1);
        org.junit.Assert.assertNotNull(postCalculatedDerivedTimeSeries3);
        org.junit.Assert.assertNotNull(postCalculatedDerivedTimeSeries5);
        org.junit.Assert.assertNull(str6);
    }

    @Test
    public void test53323() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest106.test53323");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary2 = dischargeSummary0.setPublish((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse3 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant4 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse5 = locationDescriptionListServiceResponse3.setNextToken(instant4);
        dischargeSummary0.MeasurementTime = instant4;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary8 = dischargeSummary0.setMeasurementId("2021.4.62.0");
        dischargeSummary8.Publish = true;
        dischargeSummary8.Publish = true;
        org.junit.Assert.assertNotNull(dischargeSummary2);
        org.junit.Assert.assertNotNull(instant4);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse5);
        org.junit.Assert.assertNotNull(dischargeSummary8);
    }

    @Test
    public void test53324() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest106.test53324");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.TimeSeriesResponse timeSeriesResponse0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.TimeSeriesResponse();
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.TimeSeries> timeSeriesList1 = timeSeriesResponse0.Results;
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.TimeSeries> timeSeriesList2 = timeSeriesResponse0.Results;
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.TimeSeries> timeSeriesList3 = null;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.TimeSeriesResponse timeSeriesResponse4 = timeSeriesResponse0.setResults(timeSeriesList3);
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.TimeSeries> timeSeriesList5 = null;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.TimeSeriesResponse timeSeriesResponse6 = timeSeriesResponse4.setResults(timeSeriesList5);
        org.junit.Assert.assertNull(timeSeriesList1);
        org.junit.Assert.assertNull(timeSeriesList2);
        org.junit.Assert.assertNotNull(timeSeriesResponse4);
        org.junit.Assert.assertNotNull(timeSeriesResponse6);
    }

    @Test
    public void test53325() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest106.test53325");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MethodOperation methodOperation0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MethodOperation();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeOperationType metadataChangeOperationType1 = methodOperation0.OperationType;
        java.lang.String str2 = methodOperation0.User;
        org.junit.Assert.assertNull(metadataChangeOperationType1);
        org.junit.Assert.assertNull(str2);
    }

    @Test
    public void test53326() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest106.test53326");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Reading reading0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Reading();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay1 = reading0.getValue();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ReadingType readingType2 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ReadingType.RoutineBefore;
        reading0.ReadingType = readingType2;
        java.time.Instant instant4 = reading0.Time;
        java.util.ArrayList<java.lang.String> strList5 = reading0.ReadingQualifiers;
        java.lang.String str6 = reading0.SensorUniqueId;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Reading reading8 = reading0.setManufacturer("/AQUARIUS");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Reading reading10 = reading0.setModel("MaxInstant");
        java.lang.String str11 = reading10.getSubLocationIdentifier();
        org.junit.Assert.assertNull(doubleWithDisplay1);
        org.junit.Assert.assertTrue("'" + readingType2 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ReadingType.RoutineBefore + "'", readingType2.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ReadingType.RoutineBefore));
        org.junit.Assert.assertNull(instant4);
        org.junit.Assert.assertNull(strList5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNotNull(reading8);
        org.junit.Assert.assertNotNull(reading10);
        org.junit.Assert.assertNull(str11);
    }

    @Test
    public void test53327() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest106.test53327");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutTaxon putTaxon0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutTaxon();
        putTaxon0.ParentId = "http://MaxDurationhttp/json/reply/ArrayList";
        java.lang.String str3 = putTaxon0.ScientificName;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttributeDefinition extendedAttributeDefinition4 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttributeDefinition();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate5 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate7 = specimenTemplate5.setCustomId("hi!");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PreservativeType preservativeType8 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PreservativeType.SODIUM_AZIDE;
        specimenTemplate7.Preservative = preservativeType8;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails10 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails12 = labResultDetails10.setAnalysisComment("/AQUARIUS/Acquisition/v2");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes13 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails14 = labResultDetails12.setAuditAttributes(auditAttributes13);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate15 = specimenTemplate7.setAuditAttributes(auditAttributes13);
        extendedAttributeDefinition4.AuditAttributes = auditAttributes13;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutTaxon putTaxon17 = putTaxon0.setAuditAttributes(auditAttributes13);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutTaxon putTaxon18 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutTaxon();
        putTaxon18.ParentId = "http://MaxDurationhttp/json/reply/ArrayList";
        java.lang.String str21 = putTaxon18.getComment();
        putTaxon18.ParentId = "";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservedProperty postObservedProperty24 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservedProperty();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisType analysisType25 = postObservedProperty24.getAnalysisType();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty observedProperty26 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation27 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation();
        observation27.CustomId = "hi!";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.CategoricalResult categoricalResult30 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation31 = observation27.setCategoricalResult(categoricalResult30);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple[] importHistoryEventSimpleArray32 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple> importHistoryEventSimpleList33 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple>) importHistoryEventSimpleList33, importHistoryEventSimpleArray32);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation35 = observation27.setImportHistoryEventSimples((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple>) importHistoryEventSimpleList33);
        observedProperty26.ImportHistoryEventSimples = importHistoryEventSimpleList33;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservedProperty postObservedProperty37 = postObservedProperty24.setImportHistoryEventSimples((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple>) importHistoryEventSimpleList33);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutTaxon putTaxon38 = putTaxon18.setImportHistoryEventSimples((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple>) importHistoryEventSimpleList33);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutTaxon putTaxon39 = putTaxon17.setImportHistoryEventSimples((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple>) importHistoryEventSimpleList33);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutTaxon putTaxon41 = putTaxon39.setSource("http");
        java.lang.String str42 = putTaxon39.getId();
        putTaxon39.ItisUrl = "multipart/form-data; boundary=****e0afd3ef-ab93-4371-a368-4a6f5ef58c71****";
        java.lang.String str45 = putTaxon39.getParentId();
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(specimenTemplate7);
        org.junit.Assert.assertTrue("'" + preservativeType8 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PreservativeType.SODIUM_AZIDE + "'", preservativeType8.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PreservativeType.SODIUM_AZIDE));
        org.junit.Assert.assertNotNull(labResultDetails12);
        org.junit.Assert.assertNotNull(labResultDetails14);
        org.junit.Assert.assertNotNull(specimenTemplate15);
        org.junit.Assert.assertNotNull(putTaxon17);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNull(analysisType25);
        org.junit.Assert.assertNotNull(observation31);
        org.junit.Assert.assertNotNull(importHistoryEventSimpleArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(observation35);
        org.junit.Assert.assertNotNull(postObservedProperty37);
        org.junit.Assert.assertNotNull(putTaxon38);
        org.junit.Assert.assertNotNull(putTaxon39);
        org.junit.Assert.assertNotNull(putTaxon41);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "http://MaxDurationhttp/json/reply/ArrayList" + "'", str45, "http://MaxDurationhttp/json/reply/ArrayList");
    }

    @Test
    public void test53328() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest106.test53328");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SearchResultLaboratory searchResultLaboratory0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SearchResultLaboratory();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Laboratory laboratory1 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Laboratory();
        laboratory1.Id = "MaxInstant";
        java.lang.String str4 = laboratory1.PhoneNumber;
        laboratory1.Id = "/AQUARIUS/Acquisition/v2://9999-12-31T23:59:59.999Z";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Laboratory laboratory7 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Laboratory();
        laboratory7.Id = "MaxInstant";
        java.lang.String str10 = laboratory7.PhoneNumber;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Laboratory[] laboratoryArray11 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Laboratory[] { laboratory1, laboratory7 };
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Laboratory> laboratoryList12 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Laboratory>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Laboratory>) laboratoryList12, laboratoryArray11);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SearchResultLaboratory searchResultLaboratory14 = searchResultLaboratory0.setDomainObjects((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Laboratory>) laboratoryList12);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SearchResultLaboratory searchResultLaboratory16 = searchResultLaboratory0.setTotalCount((java.lang.Integer) 0);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SearchResultLaboratory searchResultLaboratory18 = searchResultLaboratory0.setTotalCount((java.lang.Integer) 100);
        java.lang.String str19 = searchResultLaboratory0.Cursor;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SearchResultLaboratory searchResultLaboratory21 = searchResultLaboratory0.setTotalCount((java.lang.Integer) 10);
        searchResultLaboratory0.TotalCount = 10;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SearchResultLaboratory searchResultLaboratory24 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SearchResultLaboratory();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Laboratory laboratory25 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Laboratory();
        laboratory25.Id = "MaxInstant";
        java.lang.String str28 = laboratory25.PhoneNumber;
        laboratory25.Id = "/AQUARIUS/Acquisition/v2://9999-12-31T23:59:59.999Z";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Laboratory laboratory31 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Laboratory();
        laboratory31.Id = "MaxInstant";
        java.lang.String str34 = laboratory31.PhoneNumber;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Laboratory[] laboratoryArray35 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Laboratory[] { laboratory25, laboratory31 };
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Laboratory> laboratoryList36 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Laboratory>();
        boolean boolean37 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Laboratory>) laboratoryList36, laboratoryArray35);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SearchResultLaboratory searchResultLaboratory38 = searchResultLaboratory24.setDomainObjects((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Laboratory>) laboratoryList36);
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Laboratory> laboratoryList39 = searchResultLaboratory38.getDomainObjects();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SearchResultLaboratory searchResultLaboratory40 = searchResultLaboratory0.setDomainObjects(laboratoryList39);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SearchResultLaboratory searchResultLaboratory42 = searchResultLaboratory0.setCursor("http://MaxDurationhttp/json/reply/Float://multipart/form-data; boundary=****231224c4-98ce-4e30-bd65-1d25287c4abe****");
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNotNull(laboratoryArray11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(searchResultLaboratory14);
        org.junit.Assert.assertNotNull(searchResultLaboratory16);
        org.junit.Assert.assertNotNull(searchResultLaboratory18);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertNotNull(searchResultLaboratory21);
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertNotNull(laboratoryArray35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(searchResultLaboratory38);
        org.junit.Assert.assertNotNull(laboratoryList39);
        org.junit.Assert.assertNotNull(searchResultLaboratory40);
        org.junit.Assert.assertNotNull(searchResultLaboratory42);
    }

    @Test
    public void test53329() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest106.test53329");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutBulkEditResultGradesV2 putBulkEditResultGradesV2_0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutBulkEditResultGradesV2();
        java.lang.Double double1 = putBulkEditResultGradesV2_0.DepthValue;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_2 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray4 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList5 = new java.util.ArrayList<java.lang.String>();
        boolean boolean6 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList5, strArray4);
        getObservationsV2_2.SpecimenIds = strList5;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags8 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray12 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList13 = new java.util.ArrayList<java.lang.String>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList13, strArray12);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags15 = putLocationTags8.setTagUniqueIds(strList13);
        getObservationsV2_2.QualityControlTypes = strList13;
        java.util.List<java.lang.String> strList17 = getObservationsV2_2.getAnalyticalGroupIds();
        java.util.List<java.lang.String> strList18 = getObservationsV2_2.DataClassifications;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.FieldResultType fieldResultType19 = getObservationsV2_2.FieldResultType;
        java.time.Instant instant20 = getObservationsV2_2.getEndObservedTime();
        java.lang.String str21 = getObservationsV2_2.DepthUnitCustomId;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags22 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray26 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList27 = new java.util.ArrayList<java.lang.String>();
        boolean boolean28 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList27, strArray26);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags29 = putLocationTags22.setTagUniqueIds(strList27);
        java.util.ArrayList<java.lang.String> strList30 = putLocationTags29.TagUniqueIds;
        getObservationsV2_2.ProjectIds = strList30;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutBulkEditResultGradesV2 putBulkEditResultGradesV2_32 = putBulkEditResultGradesV2_0.setSearch((java.util.List<java.lang.String>) strList30);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.LocationDatumPeriod locationDatumPeriod33 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.LocationDatumPeriod();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.LocationDatumPeriodBase locationDatumPeriodBase35 = locationDatumPeriod33.setComment("'.'SSSSSSS");
        java.lang.Double double36 = locationDatumPeriodBase35.Elevation;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Qualifier qualifier37 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Qualifier();
        java.time.Instant instant38 = qualifier37.DateApplied;
        java.lang.String str39 = qualifier37.User;
        java.lang.String str40 = qualifier37.getIdentifier();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest41 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest();
        java.lang.Object obj42 = timeAlignedDataServiceRequest41.getResponseType();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse43 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant44 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse45 = locationDescriptionListServiceResponse43.setNextToken(instant44);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest46 = timeAlignedDataServiceRequest41.setQueryFrom(instant44);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Qualifier qualifier47 = qualifier37.setDateApplied(instant44);
        java.time.Instant instant48 = qualifier47.getDateApplied();
        locationDatumPeriodBase35.ValidFrom = instant48;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutBulkEditResultGradesV2 putBulkEditResultGradesV2_50 = putBulkEditResultGradesV2_32.setStartModificationTime(instant48);
        java.time.Instant instant51 = putBulkEditResultGradesV2_50.EndResultTime;
        putBulkEditResultGradesV2_50.MinNumericResultValue = (-1.0d);
        java.lang.String str54 = putBulkEditResultGradesV2_50.getSpecimenName();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutBulkEditResultGradesV2 putBulkEditResultGradesV2_56 = putBulkEditResultGradesV2_50.setTargetResultGrade("multipart/form-data; boundary=****46b5d5e5-73d1-43c8-8704-4a7bbf2d8314****");
        java.util.List<java.lang.String> strList57 = putBulkEditResultGradesV2_50.TaxonIds;
        java.time.Instant instant58 = putBulkEditResultGradesV2_50.StartModificationTime;
        org.junit.Assert.assertNull(double1);
        org.junit.Assert.assertNotNull(strArray4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(putLocationTags15);
        org.junit.Assert.assertNull(strList17);
        org.junit.Assert.assertNull(strList18);
        org.junit.Assert.assertNull(fieldResultType19);
        org.junit.Assert.assertNull(instant20);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(putLocationTags29);
        org.junit.Assert.assertNotNull(strList30);
        org.junit.Assert.assertNotNull(putBulkEditResultGradesV2_32);
        org.junit.Assert.assertNotNull(locationDatumPeriodBase35);
        org.junit.Assert.assertNull(double36);
        org.junit.Assert.assertNull(instant38);
        org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertNull(str40);
        org.junit.Assert.assertNotNull(obj42);
        org.junit.Assert.assertEquals(obj42.toString(), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj42), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj42), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertNotNull(instant44);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse45);
        org.junit.Assert.assertNotNull(timeAlignedDataServiceRequest46);
        org.junit.Assert.assertNotNull(qualifier47);
        org.junit.Assert.assertNotNull(instant48);
        org.junit.Assert.assertNotNull(putBulkEditResultGradesV2_50);
        org.junit.Assert.assertNull(instant51);
        org.junit.Assert.assertNull(str54);
        org.junit.Assert.assertNotNull(putBulkEditResultGradesV2_56);
        org.junit.Assert.assertNull(strList57);
        org.junit.Assert.assertNotNull(instant58);
    }

    @Test
    public void test53330() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest106.test53330");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetGroupedObservationsV2 getGroupedObservationsV2_0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetGroupedObservationsV2();
        java.lang.String str1 = getGroupedObservationsV2_0.ImportHistoryEventId;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DeleteActivities deleteActivities2 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DeleteActivities();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutOpenIdConnectRelyingPartyConfiguration putOpenIdConnectRelyingPartyConfiguration3 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutOpenIdConnectRelyingPartyConfiguration();
        java.util.List<java.lang.String> strList4 = putOpenIdConnectRelyingPartyConfiguration3.getScopes();
        java.lang.String str5 = putOpenIdConnectRelyingPartyConfiguration3.getOptionalIssuerDiscoveryUri();
        java.lang.String str6 = putOpenIdConnectRelyingPartyConfiguration3.getOptionalIssuerDiscoveryUri();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostTag postTag7 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostTag();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_8 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray11 = new java.lang.String[] { "", "" };
        java.util.ArrayList<java.lang.String> strList12 = new java.util.ArrayList<java.lang.String>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList12, strArray11);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_14 = getObservationsV2_8.setDataClassifications((java.util.List<java.lang.String>) strList12);
        postTag7.PickListValues = strList12;
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.TagApplicability> tagApplicabilityList16 = postTag7.Applicability;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.TagRequestBase tagRequestBase18 = postTag7.setKey("");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.TagValueType tagValueType19 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.TagValueType.PickList;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.TagRequestBase tagRequestBase20 = tagRequestBase18.setValueType(tagValueType19);
        java.lang.String str21 = tagRequestBase20.Key;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_22 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray24 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList25 = new java.util.ArrayList<java.lang.String>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList25, strArray24);
        getObservationsV2_22.SpecimenIds = strList25;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags28 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray32 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList33 = new java.util.ArrayList<java.lang.String>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList33, strArray32);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags35 = putLocationTags28.setTagUniqueIds(strList33);
        getObservationsV2_22.ActivityIds = strList33;
        tagRequestBase20.PickListValues = strList33;
        putOpenIdConnectRelyingPartyConfiguration3.HostedDomains = strList33;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DeleteActivities deleteActivities39 = deleteActivities2.setProjectIds((java.util.List<java.lang.String>) strList33);
        java.util.List<java.lang.String> strList40 = deleteActivities2.Media;
        java.lang.Integer int41 = deleteActivities2.Limit;
        java.lang.String str42 = deleteActivities2.CustomId;
        java.util.List<java.lang.String> strList43 = deleteActivities2.getMedia();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_44 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.util.List<java.lang.String> strList45 = getObservationsV2_44.SamplingContextTagIds;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_46 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList49 = new java.util.ArrayList<java.lang.String>();
        boolean boolean50 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList49, strArray48);
        getObservationsV2_46.SpecimenIds = strList49;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags52 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray56 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList57 = new java.util.ArrayList<java.lang.String>();
        boolean boolean58 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList57, strArray56);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags59 = putLocationTags52.setTagUniqueIds(strList57);
        getObservationsV2_46.QualityControlTypes = strList57;
        getObservationsV2_44.ResultGrades = strList57;
        java.lang.Double double62 = getObservationsV2_44.getMinNumericResultValue();
        getObservationsV2_44.DetectionCondition = "https";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObservation importItemObservation65 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObservation();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest66 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest();
        java.lang.Object obj67 = timeAlignedDataServiceRequest66.getResponseType();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse68 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant69 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse70 = locationDescriptionListServiceResponse68.setNextToken(instant69);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest71 = timeAlignedDataServiceRequest66.setQueryFrom(instant69);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags72 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray76 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList77 = new java.util.ArrayList<java.lang.String>();
        boolean boolean78 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList77, strArray76);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags79 = putLocationTags72.setTagUniqueIds(strList77);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest80 = timeAlignedDataServiceRequest66.setTimeSeriesOutputUnitIds(strList77);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObservation importItemObservation81 = importItemObservation65.setFields((java.util.List<java.lang.String>) strList77);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_82 = getObservationsV2_44.setSpecimenIds((java.util.List<java.lang.String>) strList77);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DeleteActivities deleteActivities83 = deleteActivities2.setIds((java.util.List<java.lang.String>) strList77);
        java.util.List<java.lang.String> strList84 = deleteActivities2.Ids;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetGroupedObservationsV2 getGroupedObservationsV2_85 = getGroupedObservationsV2_0.setSamplingLocationIds(strList84);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetGroupedObservationsV2 getGroupedObservationsV2_87 = getGroupedObservationsV2_85.setDetectionCondition("multipart/form-data; boundary=****8e3722aa-afdf-4137-ab41-bb1bb285cdf2****");
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(strList4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(getObservationsV2_14);
        org.junit.Assert.assertNull(tagApplicabilityList16);
        org.junit.Assert.assertNotNull(tagRequestBase18);
        org.junit.Assert.assertTrue("'" + tagValueType19 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.TagValueType.PickList + "'", tagValueType19.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.TagValueType.PickList));
        org.junit.Assert.assertNotNull(tagRequestBase20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(putLocationTags35);
        org.junit.Assert.assertNotNull(deleteActivities39);
        org.junit.Assert.assertNull(strList40);
        org.junit.Assert.assertNull(int41);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertNull(strList43);
        org.junit.Assert.assertNull(strList45);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(strArray56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(putLocationTags59);
        org.junit.Assert.assertNull(double62);
        org.junit.Assert.assertNotNull(obj67);
        org.junit.Assert.assertEquals(obj67.toString(), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj67), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj67), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertNotNull(instant69);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse70);
        org.junit.Assert.assertNotNull(timeAlignedDataServiceRequest71);
        org.junit.Assert.assertNotNull(strArray76);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
        org.junit.Assert.assertNotNull(putLocationTags79);
        org.junit.Assert.assertNotNull(timeAlignedDataServiceRequest80);
        org.junit.Assert.assertNotNull(importItemObservation81);
        org.junit.Assert.assertNotNull(getObservationsV2_82);
        org.junit.Assert.assertNotNull(deleteActivities83);
        org.junit.Assert.assertNotNull(strList84);
        org.junit.Assert.assertNotNull(getGroupedObservationsV2_85);
        org.junit.Assert.assertNotNull(getGroupedObservationsV2_87);
    }

    @Test
    public void test53331() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest106.test53331");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.User user0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.User();
        java.util.List<java.lang.String> strList1 = user0.getRoles();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.User user3 = user0.setEmail("hi!");
        user3.CustomId = "POST";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UserProfile userProfile6 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.User user7 = user3.setUserProfile(userProfile6);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags8 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray12 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList13 = new java.util.ArrayList<java.lang.String>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList13, strArray12);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags15 = putLocationTags8.setTagUniqueIds(strList13);
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ApplyTagRequest> applyTagRequestList16 = putLocationTags8.Tags;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags18 = putLocationTags8.setLocationUniqueId("2021.4.62.0");
        java.util.ArrayList<java.lang.String> strList19 = putLocationTags18.TagUniqueIds;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.User user20 = user7.setAccessGroups((java.util.List<java.lang.String>) strList19);
        java.lang.String str21 = user7.getId();
        org.junit.Assert.assertNull(strList1);
        org.junit.Assert.assertNotNull(user3);
        org.junit.Assert.assertNotNull(user7);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(putLocationTags15);
        org.junit.Assert.assertNull(applyTagRequestList16);
        org.junit.Assert.assertNotNull(putLocationTags18);
        org.junit.Assert.assertNotNull(strList19);
        org.junit.Assert.assertNotNull(user20);
        org.junit.Assert.assertNull(str21);
    }

    @Test
    public void test53332() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest106.test53332");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Project project0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Project();
        project0.Approved = false;
        java.lang.Boolean boolean3 = project0.Approved;
        project0.ApprovalAgency = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Project project7 = project0.setId("http://MaxDurationhttp/json/reply/ArrayList");
        project0.ApprovalAgency = "MaxDuration";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Project project11 = project0.setApprovalAgency("multipart/form-data; boundary=****73426a9f-8a73-4fda-95b3-78cea45bbfe9****");
        org.junit.Assert.assertEquals("'" + boolean3 + "' != '" + false + "'", boolean3, false);
        org.junit.Assert.assertNotNull(project7);
        org.junit.Assert.assertNotNull(project11);
    }

    @Test
    public void test53333() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest106.test53333");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeField extendedAttributeField0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeField();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeField extendedAttributeField2 = extendedAttributeField0.setDisplayName("");
        java.lang.Boolean boolean3 = extendedAttributeField2.CanBeEmpty;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest4 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest();
        java.lang.Object obj5 = timeAlignedDataServiceRequest4.getResponseType();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_6 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray9 = new java.lang.String[] { "", "" };
        java.util.ArrayList<java.lang.String> strList10 = new java.util.ArrayList<java.lang.String>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList10, strArray9);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_12 = getObservationsV2_6.setDataClassifications((java.util.List<java.lang.String>) strList10);
        getObservationsV2_12.DepthUnitCustomId = "hi!";
        java.lang.String str15 = getObservationsV2_12.CustomId;
        java.util.List<java.lang.String> strList16 = getObservationsV2_12.getSearch();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_17 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray19 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList20 = new java.util.ArrayList<java.lang.String>();
        boolean boolean21 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList20, strArray19);
        getObservationsV2_17.SpecimenIds = strList20;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags23 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray27 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList28 = new java.util.ArrayList<java.lang.String>();
        boolean boolean29 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList28, strArray27);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags30 = putLocationTags23.setTagUniqueIds(strList28);
        getObservationsV2_17.QualityControlTypes = strList28;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_32 = getObservationsV2_12.setMedia((java.util.List<java.lang.String>) strList28);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_33 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String str34 = getObservationsV2_33.getCustomId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_35 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray37 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList38 = new java.util.ArrayList<java.lang.String>();
        boolean boolean39 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList38, strArray37);
        getObservationsV2_35.SpecimenIds = strList38;
        getObservationsV2_33.ProjectIds = strList38;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_42 = getObservationsV2_12.setObservedPropertyIds((java.util.List<java.lang.String>) strList38);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest43 = timeAlignedDataServiceRequest4.setTimeSeriesOutputUnitIds(strList38);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeField extendedAttributeField44 = extendedAttributeField2.setValueOptions((java.util.List<java.lang.String>) strList38);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeField extendedAttributeField46 = extendedAttributeField44.setIsReadOnly((java.lang.Boolean) false);
        java.lang.Integer int47 = extendedAttributeField46.NumericPrecision;
        java.lang.Integer int48 = extendedAttributeField46.ColumnSize;
        org.junit.Assert.assertNotNull(extendedAttributeField2);
        org.junit.Assert.assertNull(boolean3);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(getObservationsV2_12);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNull(strList16);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(putLocationTags30);
        org.junit.Assert.assertNotNull(getObservationsV2_32);
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(getObservationsV2_42);
        org.junit.Assert.assertNotNull(timeAlignedDataServiceRequest43);
        org.junit.Assert.assertNotNull(extendedAttributeField44);
        org.junit.Assert.assertNotNull(extendedAttributeField46);
        org.junit.Assert.assertNull(int47);
        org.junit.Assert.assertNull(int48);
    }

    @Test
    public void test53334() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest106.test53334");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostImportLabReportData postImportLabReportData0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostImportLabReportData();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostImportLabReportData postImportLabReportData2 = postImportLabReportData0.setFileType("2021.4.62.0");
        java.lang.Boolean boolean3 = postImportLabReportData0.UpdateExistingResults;
        org.junit.Assert.assertNotNull(postImportLabReportData2);
        org.junit.Assert.assertNull(boolean3);
    }

    @Test
    public void test53335() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest106.test53335");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportObservations getExportObservations0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportObservations();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DeleteFieldVisits deleteFieldVisits1 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DeleteFieldVisits();
        java.lang.String str2 = deleteFieldVisits1.getSort();
        java.time.Instant instant3 = deleteFieldVisits1.EndStartTime;
        java.util.List<java.lang.String> strList4 = deleteFieldVisits1.getSearch();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_5 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray8 = new java.lang.String[] { "", "" };
        java.util.ArrayList<java.lang.String> strList9 = new java.util.ArrayList<java.lang.String>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList9, strArray8);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_11 = getObservationsV2_5.setDataClassifications((java.util.List<java.lang.String>) strList9);
        java.time.Instant instant12 = getObservationsV2_5.getStartObservedTime();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItem importItem13 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_14 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray16 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList17 = new java.util.ArrayList<java.lang.String>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList17, strArray16);
        getObservationsV2_14.SpecimenIds = strList17;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags20 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray24 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList25 = new java.util.ArrayList<java.lang.String>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList25, strArray24);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags27 = putLocationTags20.setTagUniqueIds(strList25);
        getObservationsV2_14.QualityControlTypes = strList25;
        java.util.List<java.lang.String> strList29 = getObservationsV2_14.getLabReportIds();
        importItem13.Errors = getObservationsV2_14;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_31 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.util.List<java.lang.String> strList32 = getObservationsV2_31.SamplingContextTagIds;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_33 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray35 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList36 = new java.util.ArrayList<java.lang.String>();
        boolean boolean37 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList36, strArray35);
        getObservationsV2_33.SpecimenIds = strList36;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags39 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray43 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList44 = new java.util.ArrayList<java.lang.String>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList44, strArray43);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags46 = putLocationTags39.setTagUniqueIds(strList44);
        getObservationsV2_33.QualityControlTypes = strList44;
        getObservationsV2_31.ResultGrades = strList44;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItem importItem49 = importItem13.setFields((java.util.List<java.lang.String>) strList44);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_50 = getObservationsV2_5.setSearch((java.util.List<java.lang.String>) strList44);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DeleteFieldVisits deleteFieldVisits51 = deleteFieldVisits1.setProjectIds((java.util.List<java.lang.String>) strList44);
        getExportObservations0.QualityControlTypes = strList44;
        getExportObservations0.MaxNumericResultValue = 1.0d;
        java.lang.String str55 = getExportObservations0.ImportHistoryEventId;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportObservationsFormatType getExportObservationsFormatType56 = getExportObservations0.Format;
        java.util.List<java.lang.String> strList57 = getExportObservations0.getLabResultLaboratoryIds();
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(instant3);
        org.junit.Assert.assertNull(strList4);
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(getObservationsV2_11);
        org.junit.Assert.assertNull(instant12);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(putLocationTags27);
        org.junit.Assert.assertNull(strList29);
        org.junit.Assert.assertNull(strList32);
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(putLocationTags46);
        org.junit.Assert.assertNotNull(importItem49);
        org.junit.Assert.assertNotNull(getObservationsV2_50);
        org.junit.Assert.assertNotNull(deleteFieldVisits51);
        org.junit.Assert.assertNull(str55);
        org.junit.Assert.assertNull(getExportObservationsFormatType56);
        org.junit.Assert.assertNull(strList57);
    }

    @Test
    public void test53336() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest106.test53336");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservationsDryRunV2 postObservationsDryRunV2_0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservationsDryRunV2();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservationsDryRunV2 postObservationsDryRunV2_2 = postObservationsDryRunV2_0.setLinkFieldVisitsForNewObservations((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservationsDryRunV2 postObservationsDryRunV2_4 = postObservationsDryRunV2_0.setFileType("multipart/form-data; boundary=****2d077bad-cd27-4736-8ba0-2a8d8a85733d****");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservationsDryRunV2 postObservationsDryRunV2_6 = postObservationsDryRunV2_4.setLinkFieldVisitsForNewObservations((java.lang.Boolean) false);
        java.lang.String str7 = postObservationsDryRunV2_6.getFileType();
        org.junit.Assert.assertNotNull(postObservationsDryRunV2_2);
        org.junit.Assert.assertNotNull(postObservationsDryRunV2_4);
        org.junit.Assert.assertNotNull(postObservationsDryRunV2_6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "multipart/form-data; boundary=****2d077bad-cd27-4736-8ba0-2a8d8a85733d****" + "'", str7, "multipart/form-data; boundary=****2d077bad-cd27-4736-8ba0-2a8d8a85733d****");
    }

    @Test
    public void test53337() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest106.test53337");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostUnitGroup postUnitGroup0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostUnitGroup();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes1 = null;
        postUnitGroup0.AuditAttributes = auditAttributes1;
        postUnitGroup0.CustomId = "MaxInstant";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes5 = postUnitGroup0.AuditAttributes;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostUnitGroup postUnitGroup7 = postUnitGroup0.setId("'.'SSSSSSS");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostUnitGroup postUnitGroup9 = postUnitGroup0.setSupportsConversion((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostUnitGroup postUnitGroup11 = postUnitGroup9.setCustomId("ZZZZZ");
        java.lang.String str12 = postUnitGroup11.Id;
        java.lang.Boolean boolean13 = postUnitGroup11.getSupportsConversion();
        org.junit.Assert.assertNull(auditAttributes5);
        org.junit.Assert.assertNotNull(postUnitGroup7);
        org.junit.Assert.assertNotNull(postUnitGroup9);
        org.junit.Assert.assertNotNull(postUnitGroup11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "'.'SSSSSSS" + "'", str12, "'.'SSSSSSS");
        org.junit.Assert.assertEquals("'" + boolean13 + "' != '" + false + "'", boolean13, false);
    }

    @Test
    public void test53338() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest106.test53338");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetSamplingLocations getSamplingLocations0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetSamplingLocations();
        getSamplingLocations0.Limit = (-1);
        java.lang.String str3 = getSamplingLocations0.Cursor;
        java.util.List<java.lang.String> strList4 = getSamplingLocations0.LocationGroupTypeIds;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportSamplingLocations getExportSamplingLocations5 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportSamplingLocations();
        java.util.List<java.lang.String> strList6 = getExportSamplingLocations5.getLocationGroupTypeIds();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse7 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant8 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse9 = locationDescriptionListServiceResponse7.setNextToken(instant8);
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescription> locationDescriptionList10 = locationDescriptionListServiceResponse9.LocationDescriptions;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingCurveListServiceRequest ratingCurveListServiceRequest11 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingCurveListServiceRequest();
        java.time.Instant instant12 = ratingCurveListServiceRequest11.QueryTo;
        java.lang.String str13 = ratingCurveListServiceRequest11.getRatingModelIdentifier();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse14 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary15 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary17 = dischargeSummary15.setPublish((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse18 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant19 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse20 = locationDescriptionListServiceResponse18.setNextToken(instant19);
        dischargeSummary15.MeasurementTime = instant19;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse22 = locationDescriptionListServiceResponse14.setNextToken(instant19);
        java.time.Instant instant23 = locationDescriptionListServiceResponse14.getNextToken();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest24 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ControlConditionActivity controlConditionActivity25 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ControlConditionActivity();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ControlCleanedType controlCleanedType26 = null;
        controlConditionActivity25.ControlCleaned = controlCleanedType26;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse28 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant29 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse30 = locationDescriptionListServiceResponse28.setNextToken(instant29);
        controlConditionActivity25.DateCleaned = instant29;
        timeAlignedDataServiceRequest24.QueryFrom = instant29;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse33 = locationDescriptionListServiceResponse14.setNextToken(instant29);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingCurveListServiceRequest ratingCurveListServiceRequest34 = ratingCurveListServiceRequest11.setQueryTo(instant29);
        java.time.Instant instant35 = ratingCurveListServiceRequest34.getQueryTo();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse36 = locationDescriptionListServiceResponse9.setNextToken(instant35);
        getExportSamplingLocations5.StartModificationTime = instant35;
        java.time.Instant instant38 = getExportSamplingLocations5.getStartModificationTime();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutRecurringReport putRecurringReport39 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutRecurringReport();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetActivities getActivities40 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetActivities();
        java.lang.String str41 = getActivities40.getCustomId();
        java.time.Instant instant42 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MinConcreteValue;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetActivities getActivities43 = getActivities40.setFromStartTime(instant42);
        putRecurringReport39.NextGenerationDate = instant42;
        getExportSamplingLocations5.EndModificationTime = instant42;
        getSamplingLocations0.EndModificationTime = instant42;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetSamplingLocations getSamplingLocations48 = getSamplingLocations0.setLimit((java.lang.Integer) 0);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(strList4);
        org.junit.Assert.assertNull(strList6);
        org.junit.Assert.assertNotNull(instant8);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse9);
        org.junit.Assert.assertNull(locationDescriptionList10);
        org.junit.Assert.assertNull(instant12);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNotNull(dischargeSummary17);
        org.junit.Assert.assertNotNull(instant19);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse20);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse22);
        org.junit.Assert.assertNotNull(instant23);
        org.junit.Assert.assertNotNull(instant29);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse30);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse33);
        org.junit.Assert.assertNotNull(ratingCurveListServiceRequest34);
        org.junit.Assert.assertNotNull(instant35);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse36);
        org.junit.Assert.assertNotNull(instant38);
        org.junit.Assert.assertNull(str41);
        org.junit.Assert.assertNotNull(instant42);
        org.junit.Assert.assertNotNull(getActivities43);
        org.junit.Assert.assertNotNull(getSamplingLocations48);
    }

    @Test
    public void test53339() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest106.test53339");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationType putLocationType0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationType();
        java.lang.Object obj1 = putLocationType0.getResponseType();
        java.util.ArrayList<java.lang.String> strList2 = putLocationType0.getExtendedAttributeDefinitionIds();
        org.junit.Assert.assertNotNull(obj1);
        org.junit.Assert.assertEquals(obj1.toString(), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning$LocationType");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj1), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning$LocationType");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj1), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning$LocationType");
        org.junit.Assert.assertNull(strList2);
    }

    @Test
    public void test53340() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest106.test53340");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributesResponse extendedAttributesResponse0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributesResponse();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributesResponse extendedAttributesResponse1 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributesResponse();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttribute[] extendedAttributeArray2 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttribute[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttribute> extendedAttributeList3 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttribute>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttribute>) extendedAttributeList3, extendedAttributeArray2);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributesResponse extendedAttributesResponse5 = extendedAttributesResponse1.setResults(extendedAttributeList3);
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttribute> extendedAttributeList6 = extendedAttributesResponse1.getResults();
        extendedAttributesResponse0.Results = extendedAttributeList6;
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttribute> extendedAttributeList8 = null;
        extendedAttributesResponse0.Results = extendedAttributeList8;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributesResponse extendedAttributesResponse10 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributesResponse();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttribute[] extendedAttributeArray11 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttribute[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttribute> extendedAttributeList12 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttribute>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttribute>) extendedAttributeList12, extendedAttributeArray11);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributesResponse extendedAttributesResponse14 = extendedAttributesResponse10.setResults(extendedAttributeList12);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributesResponse extendedAttributesResponse15 = extendedAttributesResponse0.setResults(extendedAttributeList12);
        org.junit.Assert.assertNotNull(extendedAttributeArray2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(extendedAttributesResponse5);
        org.junit.Assert.assertNotNull(extendedAttributeList6);
        org.junit.Assert.assertNotNull(extendedAttributeArray11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(extendedAttributesResponse14);
        org.junit.Assert.assertNotNull(extendedAttributesResponse15);
    }

    @Test
    public void test53341() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest106.test53341");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostCalculatedDerivedTimeSeries postCalculatedDerivedTimeSeries0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostCalculatedDerivedTimeSeries();
        java.util.ArrayList<java.lang.String> strList1 = postCalculatedDerivedTimeSeries0.TimeSeriesUniqueIds;
        java.lang.String str2 = postCalculatedDerivedTimeSeries0.Label;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostCalculatedDerivedTimeSeries postCalculatedDerivedTimeSeries4 = postCalculatedDerivedTimeSeries0.setLabel("yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ");
        java.lang.String str5 = postCalculatedDerivedTimeSeries4.Label;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.InputPart inputPart6 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.InputPart();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.InterpolationType interpolationType7 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.InterpolationType.PrecedingConstant;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.InputPart inputPart8 = inputPart6.setHeaders((java.lang.Object) interpolationType7);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostCalculatedDerivedTimeSeries postCalculatedDerivedTimeSeries9 = postCalculatedDerivedTimeSeries4.setInterpolationType(interpolationType7);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostCalculatedDerivedTimeSeries postCalculatedDerivedTimeSeries10 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostCalculatedDerivedTimeSeries();
        java.util.ArrayList<java.lang.String> strList11 = postCalculatedDerivedTimeSeries10.TimeSeriesUniqueIds;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostCalculatedDerivedTimeSeries postCalculatedDerivedTimeSeries13 = postCalculatedDerivedTimeSeries10.setMethod("'.'SSSSSSS");
        postCalculatedDerivedTimeSeries10.Parameter = "MaxInstant";
        java.lang.String str16 = postCalculatedDerivedTimeSeries10.SubLocationIdentifier;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostLocation postLocation17 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostLocation();
        postLocation17.Description = "hi!";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeValue[] extendedAttributeValueArray20 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeValue[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeValue> extendedAttributeValueList21 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeValue>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeValue>) extendedAttributeValueList21, extendedAttributeValueArray20);
        postLocation17.ExtendedAttributeValues = extendedAttributeValueList21;
        java.lang.Boolean boolean24 = postLocation17.Publish;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostStatisticalDerivedTimeSeries postStatisticalDerivedTimeSeries25 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostStatisticalDerivedTimeSeries();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostStatisticalDerivedTimeSeries postStatisticalDerivedTimeSeries27 = postStatisticalDerivedTimeSeries25.setComment("'.'SSSSSSS");
        java.lang.String str28 = postStatisticalDerivedTimeSeries25.getParameter();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostStatisticalDerivedTimeSeries postStatisticalDerivedTimeSeries30 = postStatisticalDerivedTimeSeries25.setTimeSeriesUniqueId("");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.InterpolationType interpolationType31 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.InterpolationType.InstantaneousValues;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostStatisticalDerivedTimeSeries postStatisticalDerivedTimeSeries32 = postStatisticalDerivedTimeSeries25.setInterpolationType(interpolationType31);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeValue[] extendedAttributeValueArray33 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeValue[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeValue> extendedAttributeValueList34 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeValue>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeValue>) extendedAttributeValueList34, extendedAttributeValueArray33);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostStatisticalDerivedTimeSeries postStatisticalDerivedTimeSeries36 = postStatisticalDerivedTimeSeries25.setExtendedAttributeValues((java.util.List<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeValue>) extendedAttributeValueList34);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.LocationBase locationBase37 = postLocation17.setExtendedAttributeValues((java.util.List<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeValue>) extendedAttributeValueList34);
        postCalculatedDerivedTimeSeries10.ExtendedAttributeValues = extendedAttributeValueList34;
        postCalculatedDerivedTimeSeries9.ExtendedAttributeValues = extendedAttributeValueList34;
        postCalculatedDerivedTimeSeries9.Method = "multipart/form-data; boundary=****a02903b2-8109-4914-8058-61246cf0a809****";
        org.junit.Assert.assertNull(strList1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNotNull(postCalculatedDerivedTimeSeries4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ" + "'", str5, "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ");
        org.junit.Assert.assertTrue("'" + interpolationType7 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.InterpolationType.PrecedingConstant + "'", interpolationType7.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.InterpolationType.PrecedingConstant));
        org.junit.Assert.assertNotNull(inputPart8);
        org.junit.Assert.assertNotNull(postCalculatedDerivedTimeSeries9);
        org.junit.Assert.assertNull(strList11);
        org.junit.Assert.assertNotNull(postCalculatedDerivedTimeSeries13);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNotNull(extendedAttributeValueArray20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNull(boolean24);
        org.junit.Assert.assertNotNull(postStatisticalDerivedTimeSeries27);
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertNotNull(postStatisticalDerivedTimeSeries30);
        org.junit.Assert.assertTrue("'" + interpolationType31 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.InterpolationType.InstantaneousValues + "'", interpolationType31.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.InterpolationType.InstantaneousValues));
        org.junit.Assert.assertNotNull(postStatisticalDerivedTimeSeries32);
        org.junit.Assert.assertNotNull(extendedAttributeValueArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(postStatisticalDerivedTimeSeries36);
        org.junit.Assert.assertNotNull(locationBase37);
    }

    @Test
    public void test53342() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest106.test53342");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutExtendedAttribute putExtendedAttribute0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutExtendedAttribute();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity postActivity1 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity();
        postActivity1.LoggerFileName = "hi!";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity plannedActivity4 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity postActivity5 = postActivity1.setPlannedActivity(plannedActivity4);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ActivityType activityType6 = postActivity1.Type;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFieldVisitActivityWithTemplate postFieldVisitActivityWithTemplate7 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFieldVisitActivityWithTemplate();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate8 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate();
        specimenTemplate8.CustomId = "hi!";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate11 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate12 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate();
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabInstructionTemplate> labInstructionTemplateList13 = specimenTemplate12.getLabInstructionTemplates();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate14 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate16 = specimenTemplate14.setCustomId("hi!");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate17 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate18 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate();
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabInstructionTemplate> labInstructionTemplateList19 = specimenTemplate18.LabInstructionTemplates;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate[] specimenTemplateArray20 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate[] { specimenTemplate8, specimenTemplate11, specimenTemplate12, specimenTemplate16, specimenTemplate17, specimenTemplate18 };
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate> specimenTemplateList21 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate>) specimenTemplateList21, specimenTemplateArray20);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFieldVisitActivityWithTemplate postFieldVisitActivityWithTemplate23 = postFieldVisitActivityWithTemplate7.setSpecimenTemplates((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate>) specimenTemplateList21);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.CollectionMethod collectionMethod24 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.CollectionMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFieldVisitActivityWithTemplate postFieldVisitActivityWithTemplate25 = postFieldVisitActivityWithTemplate23.setCollectionMethod(collectionMethod24);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity postActivity26 = postActivity1.setCollectionMethod(collectionMethod24);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Medium medium27 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Medium();
        postActivity1.Medium = medium27;
        medium27.CustomId = "-PT87591240H";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroup analyticalGroup31 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroup();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupType analyticalGroupType32 = analyticalGroup31.getType();
        analyticalGroup31.Name = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSSSSSZZZZZ";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroup analyticalGroup35 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroup();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem analyticalGroupItem36 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod37 = analyticalGroupItem36.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem analyticalGroupItem38 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod39 = analyticalGroupItem38.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod40 = analyticalGroupItem38.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem analyticalGroupItem41 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod42 = analyticalGroupItem41.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod43 = analyticalGroupItem41.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod44 = null;
        analyticalGroupItem41.AnalysisMethod = analysisMethod44;
        java.lang.String str46 = analyticalGroupItem41.getHoldingTime();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem analyticalGroupItem47 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod48 = analyticalGroupItem47.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod49 = analyticalGroupItem47.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem analyticalGroupItem50 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod51 = analyticalGroupItem50.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem analyticalGroupItem52 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod53 = analyticalGroupItem52.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod54 = analyticalGroupItem52.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod55 = null;
        analyticalGroupItem52.AnalysisMethod = analysisMethod55;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem[] analyticalGroupItemArray57 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem[] { analyticalGroupItem36, analyticalGroupItem38, analyticalGroupItem41, analyticalGroupItem47, analyticalGroupItem50, analyticalGroupItem52 };
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem> analyticalGroupItemList58 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem>();
        boolean boolean59 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem>) analyticalGroupItemList58, analyticalGroupItemArray57);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroup analyticalGroup60 = analyticalGroup35.setAnalyticalGroupItems((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem>) analyticalGroupItemList58);
        analyticalGroup31.AnalyticalGroupItems = analyticalGroupItemList58;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes62 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes();
        analyticalGroup31.AuditAttributes = auditAttributes62;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Medium medium64 = medium27.setAuditAttributes(auditAttributes62);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutExtendedAttribute putExtendedAttribute65 = putExtendedAttribute0.setAuditAttributes(auditAttributes62);
        putExtendedAttribute65.Mandatory = true;
        java.lang.String str68 = putExtendedAttribute65.DefaultValue;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutExtendedAttribute putExtendedAttribute70 = putExtendedAttribute65.setId("2021.8.9990");
        putExtendedAttribute65.Mandatory = true;
        java.lang.String str73 = putExtendedAttribute65.getDefaultValue();
        org.junit.Assert.assertNotNull(postActivity5);
        org.junit.Assert.assertNull(activityType6);
        org.junit.Assert.assertNull(labInstructionTemplateList13);
        org.junit.Assert.assertNotNull(specimenTemplate16);
        org.junit.Assert.assertNull(labInstructionTemplateList19);
        org.junit.Assert.assertNotNull(specimenTemplateArray20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(postFieldVisitActivityWithTemplate23);
        org.junit.Assert.assertNotNull(postFieldVisitActivityWithTemplate25);
        org.junit.Assert.assertNotNull(postActivity26);
        org.junit.Assert.assertNull(analyticalGroupType32);
        org.junit.Assert.assertNull(analysisMethod37);
        org.junit.Assert.assertNull(analysisMethod39);
        org.junit.Assert.assertNull(analysisMethod40);
        org.junit.Assert.assertNull(analysisMethod42);
        org.junit.Assert.assertNull(analysisMethod43);
        org.junit.Assert.assertNull(str46);
        org.junit.Assert.assertNull(analysisMethod48);
        org.junit.Assert.assertNull(analysisMethod49);
        org.junit.Assert.assertNull(analysisMethod51);
        org.junit.Assert.assertNull(analysisMethod53);
        org.junit.Assert.assertNull(analysisMethod54);
        org.junit.Assert.assertNotNull(analyticalGroupItemArray57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(analyticalGroup60);
        org.junit.Assert.assertNotNull(medium64);
        org.junit.Assert.assertNotNull(putExtendedAttribute65);
        org.junit.Assert.assertNull(str68);
        org.junit.Assert.assertNotNull(putExtendedAttribute70);
        org.junit.Assert.assertNull(str73);
    }

    @Test
    public void test53343() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest106.test53343");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocation samplingLocation0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocation();
        java.lang.String str1 = samplingLocation0.Description;
        java.lang.String str2 = samplingLocation0.VerticalCollectionMethod;
        java.lang.String str3 = samplingLocation0.getLongitude();
        java.lang.String str4 = samplingLocation0.Id;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Address address5 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocation samplingLocation6 = samplingLocation0.setAddress(address5);
        samplingLocation6.Id = "multipart/form-data; boundary=****d9f5d551-383a-4365-87fd-ae7094da6f3b****";
        samplingLocation6.VerticalDatum = "multipart/form-data; boundary=****7eff1774-b6b0-471a-961c-156c64359366****";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocation samplingLocation12 = samplingLocation6.setName("ZZZZZ");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocation samplingLocation14 = samplingLocation12.setCustomId("****8e3722aa-afdf-4137-ab41-bb1bb285cdf2****");
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNotNull(samplingLocation6);
        org.junit.Assert.assertNotNull(samplingLocation12);
        org.junit.Assert.assertNotNull(samplingLocation14);
    }

    @Test
    public void test53344() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest106.test53344");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardDefinition standardDefinition0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardDefinition();
        java.lang.String str1 = standardDefinition0.Description;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSchedule putSchedule2 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSchedule();
        java.time.OffsetDateTime offsetDateTime3 = putSchedule2.StartDate;
        java.time.OffsetDateTime offsetDateTime4 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSchedule putSchedule5 = putSchedule2.setEndDate(offsetDateTime4);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes6 = putSchedule5.AuditAttributes;
        java.time.OffsetDateTime offsetDateTime7 = null;
        putSchedule5.LastGenerationDate = offsetDateTime7;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.RecurrenceDayMonthlyType recurrenceDayMonthlyType9 = putSchedule5.RecurrenceDayMonthly;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedFieldResult plannedFieldResult10 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedFieldResult();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes11 = plannedFieldResult10.AuditAttributes;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails12 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails14 = labResultDetails12.setAnalysisComment("/AQUARIUS/Acquisition/v2");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes15 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails16 = labResultDetails14.setAuditAttributes(auditAttributes15);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedFieldResult plannedFieldResult17 = plannedFieldResult10.setAuditAttributes(auditAttributes15);
        putSchedule5.AuditAttributes = auditAttributes15;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardDefinition standardDefinition19 = standardDefinition0.setAuditAttributes(auditAttributes15);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardDefinition standardDefinition21 = standardDefinition0.setDescription("yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardDefinition standardDefinition22 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardDefinition();
        standardDefinition22.Active = false;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardDefinition standardDefinition26 = standardDefinition22.setCustomId("2021.4.62.0");
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationSimple> samplingLocationSimpleList27 = standardDefinition26.getSamplingLocations();
        com.aquaticinformatics.aquarius.sdk.samples.Interval interval28 = standardDefinition26.ApplicabilityRange;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardDefinition standardDefinition30 = standardDefinition26.setActive((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostStandard postStandard31 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostStandard();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostStandard postStandard33 = postStandard31.setCustomId("/AQUARIUS/Provisioning/v1");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostStandard postStandard35 = postStandard33.setId("/AQUARIUS/Acquisition/v2://9999-12-31T23:59:59.999Z");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationStandard[] observationStandardArray36 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationStandard[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationStandard> observationStandardList37 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationStandard>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationStandard>) observationStandardList37, observationStandardArray36);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostStandard postStandard39 = postStandard35.setObservationStandards((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationStandard>) observationStandardList37);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardDefinition standardDefinition40 = standardDefinition26.setObservationStandards((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationStandard>) observationStandardList37);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardDefinition standardDefinition41 = standardDefinition21.setObservationStandards((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationStandard>) observationStandardList37);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardDefinition standardDefinition43 = standardDefinition21.setActive((java.lang.Boolean) true);
        java.lang.String str44 = standardDefinition21.Id;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(offsetDateTime3);
        org.junit.Assert.assertNotNull(putSchedule5);
        org.junit.Assert.assertNull(auditAttributes6);
        org.junit.Assert.assertNull(recurrenceDayMonthlyType9);
        org.junit.Assert.assertNull(auditAttributes11);
        org.junit.Assert.assertNotNull(labResultDetails14);
        org.junit.Assert.assertNotNull(labResultDetails16);
        org.junit.Assert.assertNotNull(plannedFieldResult17);
        org.junit.Assert.assertNotNull(standardDefinition19);
        org.junit.Assert.assertNotNull(standardDefinition21);
        org.junit.Assert.assertNotNull(standardDefinition26);
        org.junit.Assert.assertNull(samplingLocationSimpleList27);
        org.junit.Assert.assertNull(interval28);
        org.junit.Assert.assertNotNull(standardDefinition30);
        org.junit.Assert.assertNotNull(postStandard33);
        org.junit.Assert.assertNotNull(postStandard35);
        org.junit.Assert.assertNotNull(observationStandardArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(postStandard39);
        org.junit.Assert.assertNotNull(standardDefinition40);
        org.junit.Assert.assertNotNull(standardDefinition41);
        org.junit.Assert.assertNotNull(standardDefinition43);
        org.junit.Assert.assertNull(str44);
    }

    @Test
    public void test53345() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest106.test53345");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ReferencePoint referencePoint0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ReferencePoint();
        java.time.Instant instant1 = referencePoint0.PrimarySinceDate;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationRemark locationRemark2 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationRemark();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationRemark locationRemark4 = locationRemark2.setDescription("MaxInstant");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse5 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant6 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse7 = locationDescriptionListServiceResponse5.setNextToken(instant6);
        locationRemark4.FromTime = instant6;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetActivities getActivities9 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetActivities();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse10 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary11 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary13 = dischargeSummary11.setPublish((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse14 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant15 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse16 = locationDescriptionListServiceResponse14.setNextToken(instant15);
        dischargeSummary11.MeasurementTime = instant15;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse18 = locationDescriptionListServiceResponse10.setNextToken(instant15);
        java.time.Instant instant19 = locationDescriptionListServiceResponse10.getNextToken();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetActivities getActivities20 = getActivities9.setToStartTime(instant19);
        java.lang.String str21 = getActivities20.getSort();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetActivities getActivities23 = getActivities20.setLimit((java.lang.Integer) 1);
        getActivities23.Cursor = "";
        getActivities23.Limit = 0;
        java.time.Instant instant28 = getActivities23.getToStartTime();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationRemark locationRemark29 = locationRemark4.setCreateTime(instant28);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.EffectiveRatingCurveServiceRequest effectiveRatingCurveServiceRequest30 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.EffectiveRatingCurveServiceRequest();
        java.lang.String str31 = effectiveRatingCurveServiceRequest30.RatingModelIdentifier;
        java.lang.Double double32 = effectiveRatingCurveServiceRequest30.getEndValue();
        effectiveRatingCurveServiceRequest30.EndValue = 0.0d;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.EffectiveRatingCurveServiceRequest effectiveRatingCurveServiceRequest36 = effectiveRatingCurveServiceRequest30.setRatingModelIdentifier("yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.EffectiveRatingCurveServiceRequest effectiveRatingCurveServiceRequest38 = effectiveRatingCurveServiceRequest36.setStepSize((java.lang.Double) 1.0d);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesThresholdPeriod timeSeriesThresholdPeriod39 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesThresholdPeriod();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesThresholdPeriod timeSeriesThresholdPeriod41 = timeSeriesThresholdPeriod39.setReferenceValue((java.lang.Double) 0.0d);
        java.time.Instant instant42 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MinValue;
        timeSeriesThresholdPeriod39.AppliedTime = instant42;
        java.lang.Double double44 = timeSeriesThresholdPeriod39.SecondaryReferenceValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingCurveListServiceRequest ratingCurveListServiceRequest45 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingCurveListServiceRequest();
        java.time.Instant instant46 = ratingCurveListServiceRequest45.QueryTo;
        java.lang.String str47 = ratingCurveListServiceRequest45.getRatingModelIdentifier();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingCurveListServiceRequest ratingCurveListServiceRequest49 = ratingCurveListServiceRequest45.setRatingModelIdentifier("http");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetChartDataV2 getChartDataV2_50 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetChartDataV2();
        getChartDataV2_50.DetectionCondition = "/AQUARIUS/Acquisition/v2://9999-12-31T23:59:59.999Z";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.LocationDatumPeriod locationDatumPeriod53 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.LocationDatumPeriod();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.LocationDatumPeriodBase locationDatumPeriodBase55 = locationDatumPeriod53.setComment("'.'SSSSSSS");
        java.lang.String str56 = locationDatumPeriodBase55.Method;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse57 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant58 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse59 = locationDescriptionListServiceResponse57.setNextToken(instant58);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.LocationDatumPeriodBase locationDatumPeriodBase60 = locationDatumPeriodBase55.setValidFrom(instant58);
        getChartDataV2_50.StartModificationTime = instant58;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingCurveListServiceRequest ratingCurveListServiceRequest62 = ratingCurveListServiceRequest49.setQueryTo(instant58);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesThresholdPeriod timeSeriesThresholdPeriod63 = timeSeriesThresholdPeriod39.setAppliedTime(instant58);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.EffectiveRatingCurveServiceRequest effectiveRatingCurveServiceRequest64 = effectiveRatingCurveServiceRequest36.setEffectiveTime(instant58);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationRemark locationRemark65 = locationRemark29.setToTime(instant58);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ReferencePointBase referencePointBase66 = referencePoint0.setPrimarySinceDate(instant58);
        java.lang.Double double67 = referencePointBase66.getLongitude();
        org.junit.Assert.assertNull(instant1);
        org.junit.Assert.assertNotNull(locationRemark4);
        org.junit.Assert.assertNotNull(instant6);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse7);
        org.junit.Assert.assertNotNull(dischargeSummary13);
        org.junit.Assert.assertNotNull(instant15);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse16);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse18);
        org.junit.Assert.assertNotNull(instant19);
        org.junit.Assert.assertNotNull(getActivities20);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNotNull(getActivities23);
        org.junit.Assert.assertNotNull(instant28);
        org.junit.Assert.assertNotNull(locationRemark29);
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertNull(double32);
        org.junit.Assert.assertNotNull(effectiveRatingCurveServiceRequest36);
        org.junit.Assert.assertNotNull(effectiveRatingCurveServiceRequest38);
        org.junit.Assert.assertNotNull(timeSeriesThresholdPeriod41);
        org.junit.Assert.assertNotNull(instant42);
        org.junit.Assert.assertNull(double44);
        org.junit.Assert.assertNull(instant46);
        org.junit.Assert.assertNull(str47);
        org.junit.Assert.assertNotNull(ratingCurveListServiceRequest49);
        org.junit.Assert.assertNotNull(locationDatumPeriodBase55);
        org.junit.Assert.assertNull(str56);
        org.junit.Assert.assertNotNull(instant58);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse59);
        org.junit.Assert.assertNotNull(locationDatumPeriodBase60);
        org.junit.Assert.assertNotNull(ratingCurveListServiceRequest62);
        org.junit.Assert.assertNotNull(timeSeriesThresholdPeriod63);
        org.junit.Assert.assertNotNull(effectiveRatingCurveServiceRequest64);
        org.junit.Assert.assertNotNull(locationRemark65);
        org.junit.Assert.assertNotNull(referencePointBase66);
        org.junit.Assert.assertNull(double67);
    }

    @Test
    public void test53346() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest106.test53346");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation();
        observation0.CustomId = "hi!";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.CategoricalResult categoricalResult3 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation4 = observation0.setCategoricalResult(categoricalResult3);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple[] importHistoryEventSimpleArray5 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple> importHistoryEventSimpleList6 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple>) importHistoryEventSimpleList6, importHistoryEventSimpleArray5);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation8 = observation0.setImportHistoryEventSimples((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple>) importHistoryEventSimpleList6);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Taxon taxon9 = observation0.RelatedTaxon;
        java.time.OffsetDateTime offsetDateTime10 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation11 = observation0.setResultTime(offsetDateTime10);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedFieldResult plannedFieldResult12 = observation11.getPlannedFieldResult();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.FieldVisit fieldVisit13 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.FieldVisit();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment14 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment();
        java.lang.String str15 = domainObjectAttachment14.getId();
        java.lang.String str16 = domainObjectAttachment14.getId();
        domainObjectAttachment14.Id = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment20 = domainObjectAttachment14.setId("hi!");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment22 = domainObjectAttachment20.setId("hi!");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment23 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment();
        java.lang.String str24 = domainObjectAttachment23.getId();
        java.lang.String str25 = domainObjectAttachment23.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment[] domainObjectAttachmentArray26 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment[] { domainObjectAttachment20, domainObjectAttachment23 };
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment> domainObjectAttachmentList27 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment>();
        boolean boolean28 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment>) domainObjectAttachmentList27, domainObjectAttachmentArray26);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.FieldVisit fieldVisit29 = fieldVisit13.setAttachments((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment>) domainObjectAttachmentList27);
        java.time.OffsetDateTime offsetDateTime30 = null;
        fieldVisit29.StartTime = offsetDateTime30;
        java.lang.String str32 = fieldVisit29.getId();
        observation11.FieldVisit = fieldVisit29;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.FieldVisit fieldVisit35 = fieldVisit29.setNotes("****231224c4-98ce-4e30-bd65-1d25287c4abe****");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes36 = fieldVisit29.getAuditAttributes();
        fieldVisit29.Id = "";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes39 = fieldVisit29.AuditAttributes;
        org.junit.Assert.assertNotNull(observation4);
        org.junit.Assert.assertNotNull(importHistoryEventSimpleArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(observation8);
        org.junit.Assert.assertNull(taxon9);
        org.junit.Assert.assertNotNull(observation11);
        org.junit.Assert.assertNull(plannedFieldResult12);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNotNull(domainObjectAttachment20);
        org.junit.Assert.assertNotNull(domainObjectAttachment22);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertNotNull(domainObjectAttachmentArray26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(fieldVisit29);
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertNotNull(fieldVisit35);
        org.junit.Assert.assertNull(auditAttributes36);
        org.junit.Assert.assertNull(auditAttributes39);
    }

    @Test
    public void test53347() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest106.test53347");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservationV2 postObservationV2_0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservationV2();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabInstruction labInstruction1 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservationV2 postObservationV2_2 = postObservationV2_0.setLabInstruction(labInstruction1);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedFieldResult plannedFieldResult3 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedFieldResult();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes4 = plannedFieldResult3.AuditAttributes;
        plannedFieldResult3.Id = "'.'SSSSSSS";
        java.lang.String str7 = plannedFieldResult3.DeviceType;
        java.lang.String str8 = plannedFieldResult3.Id;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricConfiguration metricConfiguration9 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricConfiguration();
        java.lang.String str10 = metricConfiguration9.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty observedProperty11 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty();
        observedProperty11.CasNumber = "MinDuration";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricConfiguration metricConfiguration14 = metricConfiguration9.setObservedProperty(observedProperty11);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultType resultType15 = observedProperty11.ResultType;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservedProperty postObservedProperty16 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservedProperty();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UnitGroup unitGroup17 = postObservedProperty16.UnitGroup;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity quantity18 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Unit unit19 = null;
        quantity18.Unit = unit19;
        postObservedProperty16.LowerLimit = quantity18;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity quantity22 = postObservedProperty16.LowerLimit;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Unit unit23 = quantity22.Unit;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty observedProperty24 = observedProperty11.setUpperLimit(quantity22);
        plannedFieldResult3.ObservedProperty = observedProperty24;
        plannedFieldResult3.Id = "/AQUARIUS/Acquisition/v2";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservationV2 postObservationV2_28 = postObservationV2_0.setPlannedFieldResult(plannedFieldResult3);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationMinimal observationMinimal29 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationMinimal();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty observedProperty30 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationMinimal observationMinimal31 = observationMinimal29.setObservedProperty(observedProperty30);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.CategoricalResult categoricalResult32 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.CategoricalResult();
        categoricalResult32.Value = "'.'SSSSSSS";
        observationMinimal31.CategoricalResult = categoricalResult32;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservationV2 postObservationV2_36 = postObservationV2_28.setCategoricalResult(categoricalResult32);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.CollectionMethod collectionMethod37 = postObservationV2_28.getCollectionMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.NumericResult numericResult38 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.NumericResult();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultDetectionCondition resultDetectionCondition39 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultDetectionCondition();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes40 = resultDetectionCondition39.getAuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultDetectionCondition resultDetectionCondition42 = resultDetectionCondition39.setId("/AQUARIUS");
        java.lang.String str43 = resultDetectionCondition39.Name;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultDetectionCondition resultDetectionCondition45 = resultDetectionCondition39.setDescription("POST");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.NumericResult numericResult46 = numericResult38.setDetectionCondition(resultDetectionCondition45);
        numericResult38.RoundingSpecification = "/AQUARIUS/Acquisition/v2";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.NumericResult numericResult50 = numericResult38.setRoundedValue("");
        postObservationV2_28.NumericResult = numericResult50;
        org.junit.Assert.assertNotNull(postObservationV2_2);
        org.junit.Assert.assertNull(auditAttributes4);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "'.'SSSSSSS" + "'", str8, "'.'SSSSSSS");
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNotNull(metricConfiguration14);
        org.junit.Assert.assertNull(resultType15);
        org.junit.Assert.assertNull(unitGroup17);
        org.junit.Assert.assertNotNull(quantity22);
        org.junit.Assert.assertNull(unit23);
        org.junit.Assert.assertNotNull(observedProperty24);
        org.junit.Assert.assertNotNull(postObservationV2_28);
        org.junit.Assert.assertNotNull(observationMinimal31);
        org.junit.Assert.assertNotNull(postObservationV2_36);
        org.junit.Assert.assertNull(collectionMethod37);
        org.junit.Assert.assertNull(auditAttributes40);
        org.junit.Assert.assertNotNull(resultDetectionCondition42);
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertNotNull(resultDetectionCondition45);
        org.junit.Assert.assertNotNull(numericResult46);
        org.junit.Assert.assertNotNull(numericResult50);
    }

    @Test
    public void test53348() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest106.test53348");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetFieldVisits getFieldVisits0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetFieldVisits();
        java.util.List<java.lang.String> strList1 = getFieldVisits0.getSamplingLocationIds();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags2 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray6 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList7 = new java.util.ArrayList<java.lang.String>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList7, strArray6);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags9 = putLocationTags2.setTagUniqueIds(strList7);
        java.util.ArrayList<java.lang.String> strList10 = putLocationTags9.TagUniqueIds;
        getFieldVisits0.ScheduleIds = strList10;
        java.lang.Integer int12 = getFieldVisits0.Limit;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetActivities getActivities13 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetActivities();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse14 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary15 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary17 = dischargeSummary15.setPublish((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse18 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant19 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse20 = locationDescriptionListServiceResponse18.setNextToken(instant19);
        dischargeSummary15.MeasurementTime = instant19;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse22 = locationDescriptionListServiceResponse14.setNextToken(instant19);
        java.time.Instant instant23 = locationDescriptionListServiceResponse14.getNextToken();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetActivities getActivities24 = getActivities13.setToStartTime(instant23);
        java.lang.String str25 = getActivities24.getSort();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetActivities getActivities27 = getActivities24.setLimit((java.lang.Integer) 1);
        getActivities27.Cursor = "";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_30 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray33 = new java.lang.String[] { "", "" };
        java.util.ArrayList<java.lang.String> strList34 = new java.util.ArrayList<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList34, strArray33);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_36 = getObservationsV2_30.setDataClassifications((java.util.List<java.lang.String>) strList34);
        java.util.List<java.lang.String> strList37 = getObservationsV2_30.ResultGrades;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary38 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        dischargeSummary38.Reviewer = "";
        java.time.Instant instant41 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        dischargeSummary38.MeasurementTime = instant41;
        getObservationsV2_30.StartResultTime = instant41;
        java.lang.String[] strArray53 = new java.lang.String[] { "https", "/AQUARIUS/Provisioning/v1", "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ", "2021.4.62.0", "hi!", "2021.4.62.0", "2021.4.62.0", "/AQUARIUS/Acquisition/v2", "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ" };
        java.util.ArrayList<java.lang.String> strList54 = new java.util.ArrayList<java.lang.String>();
        boolean boolean55 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList54, strArray53);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_56 = getObservationsV2_30.setAnalyticalGroupIds((java.util.List<java.lang.String>) strList54);
        getActivities27.ActivityTypes = strList54;
        getFieldVisits0.PlanningStatuses = strList54;
        java.lang.String str59 = getFieldVisits0.Sort;
        getFieldVisits0.Sort = "MinInstant";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetFieldVisits getFieldVisits63 = getFieldVisits0.setSort("/AQUARIUS/Provisioning/v1");
        java.util.List<java.lang.String> strList64 = getFieldVisits0.ScheduleIds;
        org.junit.Assert.assertNull(strList1);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(putLocationTags9);
        org.junit.Assert.assertNotNull(strList10);
        org.junit.Assert.assertNull(int12);
        org.junit.Assert.assertNotNull(dischargeSummary17);
        org.junit.Assert.assertNotNull(instant19);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse20);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse22);
        org.junit.Assert.assertNotNull(instant23);
        org.junit.Assert.assertNotNull(getActivities24);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertNotNull(getActivities27);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(getObservationsV2_36);
        org.junit.Assert.assertNull(strList37);
        org.junit.Assert.assertNotNull(instant41);
        org.junit.Assert.assertNotNull(strArray53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(getObservationsV2_56);
        org.junit.Assert.assertNull(str59);
        org.junit.Assert.assertNotNull(getFieldVisits63);
        org.junit.Assert.assertNotNull(strList64);
    }

    @Test
    public void test53349() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest106.test53349");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetSpecimenHistory getSpecimenHistory0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetSpecimenHistory();
        java.lang.Object obj1 = getSpecimenHistory0.getResponseType();
        java.lang.String str2 = getSpecimenHistory0.Id;
        java.lang.String str3 = getSpecimenHistory0.Id;
        java.lang.Object obj4 = getSpecimenHistory0.getResponseType();
        org.junit.Assert.assertNotNull(obj1);
        org.junit.Assert.assertEquals(obj1.toString(), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$SearchResultAuditHistory");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj1), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$SearchResultAuditHistory");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj1), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$SearchResultAuditHistory");
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(obj4);
        org.junit.Assert.assertEquals(obj4.toString(), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$SearchResultAuditHistory");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj4), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$SearchResultAuditHistory");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj4), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$SearchResultAuditHistory");
    }

    @Test
    public void test53350() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest106.test53350");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SearchResultAccessGroup searchResultAccessGroup0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SearchResultAccessGroup();
        searchResultAccessGroup0.Cursor = "/AQUARIUS/Provisioning/v1";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AccessGroup[] accessGroupArray3 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AccessGroup[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AccessGroup> accessGroupList4 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AccessGroup>();
        boolean boolean5 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AccessGroup>) accessGroupList4, accessGroupArray3);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SearchResultAccessGroup searchResultAccessGroup6 = searchResultAccessGroup0.setDomainObjects((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AccessGroup>) accessGroupList4);
        searchResultAccessGroup0.Cursor = "MinDuration";
        java.lang.Integer int9 = searchResultAccessGroup0.getTotalCount();
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AccessGroup> accessGroupList10 = searchResultAccessGroup0.DomainObjects;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SearchResultAccessGroup searchResultAccessGroup11 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SearchResultAccessGroup();
        searchResultAccessGroup11.Cursor = "/AQUARIUS/Provisioning/v1";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AccessGroup[] accessGroupArray14 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AccessGroup[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AccessGroup> accessGroupList15 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AccessGroup>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AccessGroup>) accessGroupList15, accessGroupArray14);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SearchResultAccessGroup searchResultAccessGroup17 = searchResultAccessGroup11.setDomainObjects((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AccessGroup>) accessGroupList15);
        searchResultAccessGroup11.Cursor = "MinDuration";
        java.lang.Integer int20 = searchResultAccessGroup11.getTotalCount();
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AccessGroup> accessGroupList21 = searchResultAccessGroup11.DomainObjects;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SearchResultAccessGroup searchResultAccessGroup22 = searchResultAccessGroup0.setDomainObjects(accessGroupList21);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SearchResultAccessGroup searchResultAccessGroup24 = searchResultAccessGroup22.setCursor("multipart/form-data; boundary=****bbcf5f9e-6ccf-4b63-91ab-6e645caf02af****");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SearchResultAccessGroup searchResultAccessGroup25 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SearchResultAccessGroup();
        searchResultAccessGroup25.Cursor = "/AQUARIUS/Provisioning/v1";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AccessGroup[] accessGroupArray28 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AccessGroup[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AccessGroup> accessGroupList29 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AccessGroup>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AccessGroup>) accessGroupList29, accessGroupArray28);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SearchResultAccessGroup searchResultAccessGroup31 = searchResultAccessGroup25.setDomainObjects((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AccessGroup>) accessGroupList29);
        java.lang.String str32 = searchResultAccessGroup31.getCursor();
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AccessGroup> accessGroupList33 = searchResultAccessGroup31.getDomainObjects();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SearchResultAccessGroup searchResultAccessGroup35 = searchResultAccessGroup31.setTotalCount((java.lang.Integer) (-1));
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AccessGroup> accessGroupList36 = searchResultAccessGroup35.getDomainObjects();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SearchResultAccessGroup searchResultAccessGroup37 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SearchResultAccessGroup();
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AccessGroup> accessGroupList38 = searchResultAccessGroup37.getDomainObjects();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SearchResultAccessGroup searchResultAccessGroup40 = searchResultAccessGroup37.setCursor("");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SearchResultAccessGroup searchResultAccessGroup42 = searchResultAccessGroup37.setTotalCount((java.lang.Integer) 0);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SearchResultAccessGroup searchResultAccessGroup43 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SearchResultAccessGroup();
        searchResultAccessGroup43.Cursor = "/AQUARIUS/Provisioning/v1";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AccessGroup[] accessGroupArray46 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AccessGroup[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AccessGroup> accessGroupList47 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AccessGroup>();
        boolean boolean48 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AccessGroup>) accessGroupList47, accessGroupArray46);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SearchResultAccessGroup searchResultAccessGroup49 = searchResultAccessGroup43.setDomainObjects((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AccessGroup>) accessGroupList47);
        searchResultAccessGroup43.Cursor = "MinDuration";
        java.lang.Integer int52 = searchResultAccessGroup43.getTotalCount();
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AccessGroup> accessGroupList53 = searchResultAccessGroup43.DomainObjects;
        searchResultAccessGroup37.DomainObjects = accessGroupList53;
        searchResultAccessGroup35.DomainObjects = accessGroupList53;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SearchResultAccessGroup searchResultAccessGroup56 = searchResultAccessGroup22.setDomainObjects(accessGroupList53);
        java.lang.String str57 = searchResultAccessGroup56.getCursor();
        org.junit.Assert.assertNotNull(accessGroupArray3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(searchResultAccessGroup6);
        org.junit.Assert.assertNull(int9);
        org.junit.Assert.assertNotNull(accessGroupList10);
        org.junit.Assert.assertNotNull(accessGroupArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(searchResultAccessGroup17);
        org.junit.Assert.assertNull(int20);
        org.junit.Assert.assertNotNull(accessGroupList21);
        org.junit.Assert.assertNotNull(searchResultAccessGroup22);
        org.junit.Assert.assertNotNull(searchResultAccessGroup24);
        org.junit.Assert.assertNotNull(accessGroupArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(searchResultAccessGroup31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "/AQUARIUS/Provisioning/v1" + "'", str32, "/AQUARIUS/Provisioning/v1");
        org.junit.Assert.assertNotNull(accessGroupList33);
        org.junit.Assert.assertNotNull(searchResultAccessGroup35);
        org.junit.Assert.assertNotNull(accessGroupList36);
        org.junit.Assert.assertNull(accessGroupList38);
        org.junit.Assert.assertNotNull(searchResultAccessGroup40);
        org.junit.Assert.assertNotNull(searchResultAccessGroup42);
        org.junit.Assert.assertNotNull(accessGroupArray46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(searchResultAccessGroup49);
        org.junit.Assert.assertNull(int52);
        org.junit.Assert.assertNotNull(accessGroupList53);
        org.junit.Assert.assertNotNull(searchResultAccessGroup56);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "multipart/form-data; boundary=****bbcf5f9e-6ccf-4b63-91ab-6e645caf02af****" + "'", str57, "multipart/form-data; boundary=****bbcf5f9e-6ccf-4b63-91ab-6e645caf02af****");
    }

    @Test
    public void test53351() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest106.test53351");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLabAnalysisMethod postLabAnalysisMethod0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLabAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes1 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLabAnalysisMethod postLabAnalysisMethod2 = postLabAnalysisMethod0.setAuditAttributes(auditAttributes1);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLabAnalysisMethod postLabAnalysisMethod4 = postLabAnalysisMethod0.setId("MinDuration");
        postLabAnalysisMethod0.Context = "MinInstant";
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple> importHistoryEventSimpleList7 = postLabAnalysisMethod0.getImportHistoryEventSimples();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLabAnalysisMethod postLabAnalysisMethod9 = postLabAnalysisMethod0.setName("yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ");
        postLabAnalysisMethod9.Name = "multipart/form-data; boundary=****1eab67e1-84c8-4b82-aa06-d6c7526551f8****";
        postLabAnalysisMethod9.Name = "https";
        java.lang.String str14 = postLabAnalysisMethod9.getId();
        org.junit.Assert.assertNotNull(postLabAnalysisMethod2);
        org.junit.Assert.assertNotNull(postLabAnalysisMethod4);
        org.junit.Assert.assertNull(importHistoryEventSimpleList7);
        org.junit.Assert.assertNotNull(postLabAnalysisMethod9);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "MinDuration" + "'", str14, "MinDuration");
    }

    @Test
    public void test53352() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest106.test53352");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetFieldTrip getFieldTrip0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetFieldTrip();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetFieldTrip getFieldTrip2 = getFieldTrip0.setId("multipart/form-data; boundary=****3dee2050-7d6c-400f-bd51-383a1324f5dd****");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetFieldTrip getFieldTrip4 = getFieldTrip0.setId("");
        java.lang.String str5 = getFieldTrip0.Id;
        org.junit.Assert.assertNotNull(getFieldTrip2);
        org.junit.Assert.assertNotNull(getFieldTrip4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
    }

    @Test
    public void test53353() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest106.test53353");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MonitoringMethod monitoringMethod0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MonitoringMethod();
        monitoringMethod0.Parameter = "/AQUARIUS/Acquisition/v2";
        java.lang.String str3 = monitoringMethod0.getDisplayName();
        monitoringMethod0.RoundingSpec = "hi!:///AQUARIUS/Provisioning/v1";
        java.lang.String str6 = monitoringMethod0.RoundingSpec;
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!:///AQUARIUS/Provisioning/v1" + "'", str6, "hi!:///AQUARIUS/Provisioning/v1");
    }

    @Test
    public void test53354() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest106.test53354");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.InterpolationTypeEntry interpolationTypeEntry0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.InterpolationTypeEntry();
        interpolationTypeEntry0.Value = (-1);
        java.lang.String str3 = interpolationTypeEntry0.getDisplayName();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.InterpolationTypeEntry interpolationTypeEntry5 = interpolationTypeEntry0.setDisplayName("****26835278-3e68-484a-a157-468aab2e69a2****");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.InterpolationTypeEntry interpolationTypeEntry7 = interpolationTypeEntry5.setDisplayName("/AQUARIUS/Acquisition/v2://9999-12-31T23:59:59.999Z");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.InterpolationTypeEntry interpolationTypeEntry9 = interpolationTypeEntry5.setInterpolationType("hi!");
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(interpolationTypeEntry5);
        org.junit.Assert.assertNotNull(interpolationTypeEntry7);
        org.junit.Assert.assertNotNull(interpolationTypeEntry9);
    }

    @Test
    public void test53355() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest106.test53355");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.GradeOperation gradeOperation0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.GradeOperation();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.GradeOperation gradeOperation2 = gradeOperation0.setStackPosition((java.lang.Integer) (-1));
        java.time.Instant instant3 = gradeOperation2.DateAppliedUtc;
        org.junit.Assert.assertNotNull(gradeOperation2);
        org.junit.Assert.assertNull(instant3);
    }

    @Test
    public void test53356() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest106.test53356");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SearchResultLocationGroupType searchResultLocationGroupType0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SearchResultLocationGroupType();
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LocationGroupType> locationGroupTypeList1 = searchResultLocationGroupType0.getDomainObjects();
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LocationGroupType> locationGroupTypeList2 = searchResultLocationGroupType0.getDomainObjects();
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LocationGroupType> locationGroupTypeList3 = searchResultLocationGroupType0.DomainObjects;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SearchResultLocationGroupType searchResultLocationGroupType5 = searchResultLocationGroupType0.setCursor("MinDuration");
        java.lang.Integer int6 = searchResultLocationGroupType0.getTotalCount();
        org.junit.Assert.assertNull(locationGroupTypeList1);
        org.junit.Assert.assertNull(locationGroupTypeList2);
        org.junit.Assert.assertNull(locationGroupTypeList3);
        org.junit.Assert.assertNotNull(searchResultLocationGroupType5);
        org.junit.Assert.assertNull(int6);
    }

    @Test
    public void test53357() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest106.test53357");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.TaxonImportSummary taxonImportSummary0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.TaxonImportSummary();
        taxonImportSummary0.NewCount = 0;
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemTaxon> importItemTaxonList3 = taxonImportSummary0.ErrorImportItems;
        java.lang.Integer int4 = taxonImportSummary0.SuccessCount;
        java.lang.Integer int5 = taxonImportSummary0.SkippedCount;
        java.lang.Integer int6 = taxonImportSummary0.UpdateCount;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.TaxonImportSummary taxonImportSummary8 = taxonImportSummary0.setSummaryReportText("0001-01-01T00:00:00.000Z");
        taxonImportSummary0.UpdateCount = 7;
        org.junit.Assert.assertNull(importItemTaxonList3);
        org.junit.Assert.assertNull(int4);
        org.junit.Assert.assertNull(int5);
        org.junit.Assert.assertNull(int6);
        org.junit.Assert.assertNotNull(taxonImportSummary8);
    }

    @Test
    public void test53358() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest106.test53358");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetChartDataV2 getChartDataV2_0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetChartDataV2();
        java.util.List<java.lang.String> strList1 = getChartDataV2_0.getProjectIds();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest2 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_3 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray5 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList6 = new java.util.ArrayList<java.lang.String>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList6, strArray5);
        getObservationsV2_3.SpecimenIds = strList6;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags9 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray13 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList14 = new java.util.ArrayList<java.lang.String>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList14, strArray13);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags16 = putLocationTags9.setTagUniqueIds(strList14);
        getObservationsV2_3.QualityControlTypes = strList14;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest18 = timeAlignedDataServiceRequest2.setTimeSeriesUniqueIds(strList14);
        getChartDataV2_0.ActivityIds = strList14;
        java.lang.String str20 = getChartDataV2_0.getFilterId();
        java.util.List<java.lang.String> strList21 = getChartDataV2_0.getIds();
        java.lang.Integer int22 = getChartDataV2_0.Limit;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetChartDataV2 getChartDataV2_24 = getChartDataV2_0.setCursor("multipart/form-data; boundary=****44f0772e-c3ca-4316-8e2a-61ec8540d661****");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetChartDataV2 getChartDataV2_25 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetChartDataV2();
        java.lang.String str26 = getChartDataV2_25.getActivityCustomId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetChartDataV2 getChartDataV2_28 = getChartDataV2_25.setFilterId("");
        java.util.List<java.lang.String> strList29 = getChartDataV2_25.ResultGrades;
        java.util.List<java.lang.String> strList30 = getChartDataV2_25.CollectionMethodIds;
        getChartDataV2_25.MinNumericResultValue = 10.0d;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ReportListServiceRequest reportListServiceRequest33 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ReportListServiceRequest();
        reportListServiceRequest33.ReportTitle = "MinDuration";
        java.lang.String str36 = reportListServiceRequest33.getLocationUniqueId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_37 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray39 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList40 = new java.util.ArrayList<java.lang.String>();
        boolean boolean41 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList40, strArray39);
        getObservationsV2_37.SpecimenIds = strList40;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags43 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray47 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList48 = new java.util.ArrayList<java.lang.String>();
        boolean boolean49 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList48, strArray47);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags50 = putLocationTags43.setTagUniqueIds(strList48);
        getObservationsV2_37.QualityControlTypes = strList48;
        java.util.List<java.lang.String> strList52 = getObservationsV2_37.getAnalyticalGroupIds();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_54 = getObservationsV2_37.setSpecimenName("/AQUARIUS/Acquisition/v2://9999-12-31T23:59:59.999Z");
        java.util.List<java.lang.String> strList55 = getObservationsV2_54.getMedia();
        java.time.Instant instant56 = getObservationsV2_54.getStartModificationTime();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_57 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray59 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList60 = new java.util.ArrayList<java.lang.String>();
        boolean boolean61 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList60, strArray59);
        getObservationsV2_57.SpecimenIds = strList60;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_63 = getObservationsV2_54.setProjectIds((java.util.List<java.lang.String>) strList60);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ReportListServiceRequest reportListServiceRequest64 = reportListServiceRequest33.setTagKeys(strList60);
        reportListServiceRequest33.LocationUniqueId = "9999-12-31T23:59:59.999Z";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DeleteFieldVisits deleteFieldVisits67 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DeleteFieldVisits();
        java.lang.String str68 = deleteFieldVisits67.Sort;
        deleteFieldVisits67.Sort = "9999-12-31T23:59:59.999Z";
        java.util.List<java.lang.String> strList71 = deleteFieldVisits67.getScheduleIds();
        java.util.List<java.lang.String> strList72 = deleteFieldVisits67.getFieldTripIds();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostTag postTag73 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostTag();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_74 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray77 = new java.lang.String[] { "", "" };
        java.util.ArrayList<java.lang.String> strList78 = new java.util.ArrayList<java.lang.String>();
        boolean boolean79 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList78, strArray77);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_80 = getObservationsV2_74.setDataClassifications((java.util.List<java.lang.String>) strList78);
        postTag73.PickListValues = strList78;
        java.util.ArrayList<java.lang.String> strList82 = postTag73.PickListValues;
        deleteFieldVisits67.PlanningStatuses = strList82;
        reportListServiceRequest33.TagKeys = strList82;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostTag postTag85 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostTag();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_86 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray89 = new java.lang.String[] { "", "" };
        java.util.ArrayList<java.lang.String> strList90 = new java.util.ArrayList<java.lang.String>();
        boolean boolean91 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList90, strArray89);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_92 = getObservationsV2_86.setDataClassifications((java.util.List<java.lang.String>) strList90);
        postTag85.PickListValues = strList90;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ReportListServiceRequest reportListServiceRequest94 = reportListServiceRequest33.setReportUniqueIds(strList90);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetChartDataV2 getChartDataV2_95 = getChartDataV2_25.setProjectIds((java.util.List<java.lang.String>) strList90);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetChartDataV2 getChartDataV2_96 = getChartDataV2_24.setSamplingLocationIds((java.util.List<java.lang.String>) strList90);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SampleFractionType sampleFractionType97 = getChartDataV2_96.SampleFraction;
        org.junit.Assert.assertNull(strList1);
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(putLocationTags16);
        org.junit.Assert.assertNotNull(timeAlignedDataServiceRequest18);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNull(strList21);
        org.junit.Assert.assertNull(int22);
        org.junit.Assert.assertNotNull(getChartDataV2_24);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertNotNull(getChartDataV2_28);
        org.junit.Assert.assertNull(strList29);
        org.junit.Assert.assertNull(strList30);
        org.junit.Assert.assertNull(str36);
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(putLocationTags50);
        org.junit.Assert.assertNull(strList52);
        org.junit.Assert.assertNotNull(getObservationsV2_54);
        org.junit.Assert.assertNull(strList55);
        org.junit.Assert.assertNull(instant56);
        org.junit.Assert.assertNotNull(strArray59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(getObservationsV2_63);
        org.junit.Assert.assertNotNull(reportListServiceRequest64);
        org.junit.Assert.assertNull(str68);
        org.junit.Assert.assertNull(strList71);
        org.junit.Assert.assertNull(strList72);
        org.junit.Assert.assertNotNull(strArray77);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
        org.junit.Assert.assertNotNull(getObservationsV2_80);
        org.junit.Assert.assertNotNull(strList82);
        org.junit.Assert.assertNotNull(strArray89);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + true + "'", boolean91 == true);
        org.junit.Assert.assertNotNull(getObservationsV2_92);
        org.junit.Assert.assertNotNull(reportListServiceRequest94);
        org.junit.Assert.assertNotNull(getChartDataV2_95);
        org.junit.Assert.assertNotNull(getChartDataV2_96);
        org.junit.Assert.assertNull(sampleFractionType97);
    }

    @Test
    public void test53359() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest106.test53359");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObservedProperty importItemObservedProperty0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObservedProperty();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetLabReportImportHistoryEvents getLabReportImportHistoryEvents1 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetLabReportImportHistoryEvents();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags2 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray6 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList7 = new java.util.ArrayList<java.lang.String>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList7, strArray6);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags9 = putLocationTags2.setTagUniqueIds(strList7);
        java.util.ArrayList<java.lang.String> strList10 = putLocationTags9.TagUniqueIds;
        getLabReportImportHistoryEvents1.LabReportIds = strList10;
        importItemObservedProperty0.WarningMessages = strList10;
        java.util.List<java.lang.String> strList13 = importItemObservedProperty0.getWarningMessages();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_14 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.util.List<java.lang.String> strList15 = getObservationsV2_14.SamplingContextTagIds;
        java.time.Instant instant16 = getObservationsV2_14.getEndModificationTime();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_17 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray20 = new java.lang.String[] { "", "" };
        java.util.ArrayList<java.lang.String> strList21 = new java.util.ArrayList<java.lang.String>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList21, strArray20);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_23 = getObservationsV2_17.setDataClassifications((java.util.List<java.lang.String>) strList21);
        getObservationsV2_14.ResultStatuses = strList21;
        java.time.Instant instant25 = getObservationsV2_14.getStartModificationTime();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetChartDataV2 getChartDataV2_26 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetChartDataV2();
        java.lang.String str27 = getChartDataV2_26.getActivityCustomId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetChartDataV2 getChartDataV2_29 = getChartDataV2_26.setFilterId("");
        java.util.List<java.lang.String> strList30 = getChartDataV2_26.getIds();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExtendedAttributeDropdownlistitems getExtendedAttributeDropdownlistitems31 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExtendedAttributeDropdownlistitems();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_32 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.util.List<java.lang.String> strList33 = getObservationsV2_32.SamplingContextTagIds;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_34 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray36 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList37 = new java.util.ArrayList<java.lang.String>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList37, strArray36);
        getObservationsV2_34.SpecimenIds = strList37;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags40 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray44 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList45 = new java.util.ArrayList<java.lang.String>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList45, strArray44);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags47 = putLocationTags40.setTagUniqueIds(strList45);
        getObservationsV2_34.QualityControlTypes = strList45;
        getObservationsV2_32.ResultGrades = strList45;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExtendedAttributeDropdownlistitems getExtendedAttributeDropdownlistitems50 = getExtendedAttributeDropdownlistitems31.setSearch((java.util.List<java.lang.String>) strList45);
        getChartDataV2_26.ObservedPropertyIds = strList45;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_52 = getObservationsV2_14.setSamplingLocationIds((java.util.List<java.lang.String>) strList45);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObservedProperty importItemObservedProperty53 = importItemObservedProperty0.setFields((java.util.List<java.lang.String>) strList45);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SearchResultSpecimen searchResultSpecimen54 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SearchResultSpecimen();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Specimen[] specimenArray55 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Specimen[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Specimen> specimenList56 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Specimen>();
        boolean boolean57 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Specimen>) specimenList56, specimenArray55);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SearchResultSpecimen searchResultSpecimen58 = searchResultSpecimen54.setDomainObjects((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Specimen>) specimenList56);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SearchResultSpecimen searchResultSpecimen59 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SearchResultSpecimen();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Specimen[] specimenArray60 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Specimen[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Specimen> specimenList61 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Specimen>();
        boolean boolean62 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Specimen>) specimenList61, specimenArray60);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SearchResultSpecimen searchResultSpecimen63 = searchResultSpecimen59.setDomainObjects((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Specimen>) specimenList61);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SearchResultSpecimen searchResultSpecimen64 = searchResultSpecimen58.setDomainObjects((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Specimen>) specimenList61);
        java.lang.Integer int65 = searchResultSpecimen58.TotalCount;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SearchResultSpecimen searchResultSpecimen66 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SearchResultSpecimen();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Specimen[] specimenArray67 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Specimen[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Specimen> specimenList68 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Specimen>();
        boolean boolean69 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Specimen>) specimenList68, specimenArray67);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SearchResultSpecimen searchResultSpecimen70 = searchResultSpecimen66.setDomainObjects((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Specimen>) specimenList68);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SearchResultSpecimen searchResultSpecimen71 = searchResultSpecimen58.setDomainObjects((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Specimen>) specimenList68);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SearchResultSpecimen searchResultSpecimen73 = searchResultSpecimen71.setTotalCount((java.lang.Integer) 0);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SearchResultSpecimen searchResultSpecimen74 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SearchResultSpecimen();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Specimen[] specimenArray75 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Specimen[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Specimen> specimenList76 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Specimen>();
        boolean boolean77 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Specimen>) specimenList76, specimenArray75);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SearchResultSpecimen searchResultSpecimen78 = searchResultSpecimen74.setDomainObjects((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Specimen>) specimenList76);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SearchResultSpecimen searchResultSpecimen79 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SearchResultSpecimen();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Specimen[] specimenArray80 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Specimen[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Specimen> specimenList81 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Specimen>();
        boolean boolean82 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Specimen>) specimenList81, specimenArray80);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SearchResultSpecimen searchResultSpecimen83 = searchResultSpecimen79.setDomainObjects((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Specimen>) specimenList81);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SearchResultSpecimen searchResultSpecimen84 = searchResultSpecimen78.setDomainObjects((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Specimen>) specimenList81);
        java.lang.Integer int85 = searchResultSpecimen78.TotalCount;
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Specimen> specimenList86 = searchResultSpecimen78.DomainObjects;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SearchResultSpecimen searchResultSpecimen87 = searchResultSpecimen73.setDomainObjects(specimenList86);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObservedProperty importItemObservedProperty88 = importItemObservedProperty0.setErrors((java.lang.Object) searchResultSpecimen87);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemStatusType importItemStatusType89 = importItemObservedProperty88.getStatus();
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(putLocationTags9);
        org.junit.Assert.assertNotNull(strList10);
        org.junit.Assert.assertNotNull(strList13);
        org.junit.Assert.assertNull(strList15);
        org.junit.Assert.assertNull(instant16);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(getObservationsV2_23);
        org.junit.Assert.assertNull(instant25);
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertNotNull(getChartDataV2_29);
        org.junit.Assert.assertNull(strList30);
        org.junit.Assert.assertNull(strList33);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(strArray44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(putLocationTags47);
        org.junit.Assert.assertNotNull(getExtendedAttributeDropdownlistitems50);
        org.junit.Assert.assertNotNull(getObservationsV2_52);
        org.junit.Assert.assertNotNull(importItemObservedProperty53);
        org.junit.Assert.assertNotNull(specimenArray55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(searchResultSpecimen58);
        org.junit.Assert.assertNotNull(specimenArray60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(searchResultSpecimen63);
        org.junit.Assert.assertNotNull(searchResultSpecimen64);
        org.junit.Assert.assertNull(int65);
        org.junit.Assert.assertNotNull(specimenArray67);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(searchResultSpecimen70);
        org.junit.Assert.assertNotNull(searchResultSpecimen71);
        org.junit.Assert.assertNotNull(searchResultSpecimen73);
        org.junit.Assert.assertNotNull(specimenArray75);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(searchResultSpecimen78);
        org.junit.Assert.assertNotNull(specimenArray80);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNotNull(searchResultSpecimen83);
        org.junit.Assert.assertNotNull(searchResultSpecimen84);
        org.junit.Assert.assertNull(int85);
        org.junit.Assert.assertNotNull(specimenList86);
        org.junit.Assert.assertNotNull(searchResultSpecimen87);
        org.junit.Assert.assertNotNull(importItemObservedProperty88);
        org.junit.Assert.assertNull(importItemStatusType89);
    }

    @Test
    public void test53360() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest106.test53360");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty observedProperty0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty();
        observedProperty0.CasNumber = "MinDuration";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity quantity3 = observedProperty0.getUpperLimit();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty observedProperty5 = observedProperty0.setName("2021.4.62.0");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutObservedProperty putObservedProperty6 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutObservedProperty();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity quantity7 = putObservedProperty6.LowerLimit;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutObservedProperty putObservedProperty9 = putObservedProperty6.setDescription("");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutObservedProperty putObservedProperty11 = putObservedProperty9.setDescription("2021.4.62.0");
        java.lang.String str12 = putObservedProperty9.Id;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservedProperty postObservedProperty13 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservedProperty();
        java.lang.Object obj14 = postObservedProperty13.getResponseType();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFieldVisitActivityWithTemplate postFieldVisitActivityWithTemplate15 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFieldVisitActivityWithTemplate();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes16 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFieldVisitActivityWithTemplate postFieldVisitActivityWithTemplate17 = postFieldVisitActivityWithTemplate15.setAuditAttributes(auditAttributes16);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation18 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedFieldResult plannedFieldResult19 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation20 = observation18.setPlannedFieldResult(plannedFieldResult19);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabInstruction labInstruction21 = null;
        observation20.LabInstruction = labInstruction21;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationStatistics observationStatistics23 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation24 = observation20.setStatistics(observationStatistics23);
        java.time.OffsetDateTime offsetDateTime25 = observation24.getResultTime();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity quantity26 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Unit unit27 = null;
        quantity26.Unit = unit27;
        observation24.Depth = quantity26;
        postFieldVisitActivityWithTemplate17.Depth = quantity26;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Unit unit31 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity quantity32 = quantity26.setUnit(unit31);
        postObservedProperty13.LowerLimit = quantity26;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisType analysisType34 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisType.PHYSICAL;
        postObservedProperty13.AnalysisType = analysisType34;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutObservedProperty putObservedProperty36 = putObservedProperty9.setAnalysisType(analysisType34);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultType resultType37 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultType.TAXON;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutObservedProperty putObservedProperty38 = putObservedProperty36.setResultType(resultType37);
        observedProperty5.ResultType = resultType37;
        java.lang.String str40 = observedProperty5.getCustomId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSamplingLocation putSamplingLocation41 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSamplingLocation();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSamplingLocation putSamplingLocation43 = putSamplingLocation41.setCustomId("https");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservedProperty postObservedProperty44 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservedProperty();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UnitGroup unitGroup45 = postObservedProperty44.UnitGroup;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity quantity46 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Unit unit47 = null;
        quantity46.Unit = unit47;
        postObservedProperty44.LowerLimit = quantity46;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity quantity50 = postObservedProperty44.LowerLimit;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Unit unit51 = quantity50.Unit;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSamplingLocation putSamplingLocation52 = putSamplingLocation43.setElevation(quantity50);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSamplingLocation putSamplingLocation54 = putSamplingLocation52.setHorizontalCollectionMethod("");
        java.lang.String str55 = putSamplingLocation52.HorizontalCollectionMethod;
        java.lang.String str56 = putSamplingLocation52.VerticalDatum;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity quantity57 = putSamplingLocation52.Elevation;
        observedProperty5.LowerLimit = quantity57;
        org.junit.Assert.assertNull(quantity3);
        org.junit.Assert.assertNotNull(observedProperty5);
        org.junit.Assert.assertNull(quantity7);
        org.junit.Assert.assertNotNull(putObservedProperty9);
        org.junit.Assert.assertNotNull(putObservedProperty11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(obj14);
        org.junit.Assert.assertEquals(obj14.toString(), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$ObservedProperty");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj14), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$ObservedProperty");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj14), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$ObservedProperty");
        org.junit.Assert.assertNotNull(postFieldVisitActivityWithTemplate17);
        org.junit.Assert.assertNotNull(observation20);
        org.junit.Assert.assertNotNull(observation24);
        org.junit.Assert.assertNull(offsetDateTime25);
        org.junit.Assert.assertNotNull(quantity32);
        org.junit.Assert.assertTrue("'" + analysisType34 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisType.PHYSICAL + "'", analysisType34.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisType.PHYSICAL));
        org.junit.Assert.assertNotNull(putObservedProperty36);
        org.junit.Assert.assertTrue("'" + resultType37 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultType.TAXON + "'", resultType37.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultType.TAXON));
        org.junit.Assert.assertNotNull(putObservedProperty38);
        org.junit.Assert.assertNull(str40);
        org.junit.Assert.assertNotNull(putSamplingLocation43);
        org.junit.Assert.assertNull(unitGroup45);
        org.junit.Assert.assertNotNull(quantity50);
        org.junit.Assert.assertNull(unit51);
        org.junit.Assert.assertNotNull(putSamplingLocation52);
        org.junit.Assert.assertNotNull(putSamplingLocation54);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "" + "'", str55, "");
        org.junit.Assert.assertNull(str56);
        org.junit.Assert.assertNotNull(quantity57);
    }

    @Test
    public void test53361() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest106.test53361");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.GetLocationDatum getLocationDatum0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.GetLocationDatum();
        java.lang.String str1 = getLocationDatum0.getLocationUniqueId();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.GetLocationDatum getLocationDatum3 = getLocationDatum0.setLocationUniqueId("MaxInstant");
        getLocationDatum0.LocationUniqueId = "multipart/form-data; boundary=****a6346bd6-b0e7-4290-a612-1b1730df8677****";
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(getLocationDatum3);
    }

    @Test
    public void test53362() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest106.test53362");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ReportListServiceRequest reportListServiceRequest0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ReportListServiceRequest();
        reportListServiceRequest0.ReportTitle = "MinDuration";
        java.lang.String str3 = reportListServiceRequest0.getLocationUniqueId();
        java.util.ArrayList<java.lang.String> strList4 = reportListServiceRequest0.getTagKeys();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ReportListServiceRequest reportListServiceRequest6 = reportListServiceRequest0.setUserUniqueId("9999-12-31T23:59:59.9999999Z://2021.4.62.0");
        java.util.ArrayList<java.lang.String> strList7 = reportListServiceRequest6.TagValues;
        java.util.ArrayList<java.lang.String> strList8 = reportListServiceRequest6.TimeSeriesUniqueIds;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutBulkEditResultGradesV2 putBulkEditResultGradesV2_9 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutBulkEditResultGradesV2();
        java.lang.Double double10 = putBulkEditResultGradesV2_9.DepthValue;
        java.time.Instant instant11 = putBulkEditResultGradesV2_9.getEndModificationTime();
        java.lang.Double double12 = putBulkEditResultGradesV2_9.getNumericResultValue();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportObservations getExportObservations13 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportObservations();
        java.lang.Double double14 = getExportObservations13.NumericResultValue;
        java.util.List<java.lang.String> strList15 = getExportObservations13.getActivityTypes();
        java.util.List<java.lang.String> strList16 = getExportObservations13.ProjectIds;
        java.util.List<java.lang.String> strList17 = getExportObservations13.AnalysisMethodIds;
        java.util.List<java.lang.String> strList18 = getExportObservations13.getQualityControlTypes();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RoleFlattened roleFlattened19 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RoleFlattened();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RoleFlattenedBase roleFlattenedBase21 = roleFlattened19.setCanEditAppendConfigurations((java.lang.Boolean) false);
        java.lang.Boolean boolean22 = roleFlattened19.CanAddOrRemoveLocations;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DeleteFieldVisits deleteFieldVisits23 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DeleteFieldVisits();
        java.lang.String str24 = deleteFieldVisits23.Sort;
        deleteFieldVisits23.Sort = "9999-12-31T23:59:59.999Z";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_27 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray30 = new java.lang.String[] { "", "" };
        java.util.ArrayList<java.lang.String> strList31 = new java.util.ArrayList<java.lang.String>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList31, strArray30);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_33 = getObservationsV2_27.setDataClassifications((java.util.List<java.lang.String>) strList31);
        java.util.List<java.lang.String> strList34 = getObservationsV2_27.ResultGrades;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary35 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        dischargeSummary35.Reviewer = "";
        java.time.Instant instant38 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        dischargeSummary35.MeasurementTime = instant38;
        getObservationsV2_27.StartResultTime = instant38;
        java.lang.String[] strArray50 = new java.lang.String[] { "https", "/AQUARIUS/Provisioning/v1", "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ", "2021.4.62.0", "hi!", "2021.4.62.0", "2021.4.62.0", "/AQUARIUS/Acquisition/v2", "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ" };
        java.util.ArrayList<java.lang.String> strList51 = new java.util.ArrayList<java.lang.String>();
        boolean boolean52 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList51, strArray50);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_53 = getObservationsV2_27.setAnalyticalGroupIds((java.util.List<java.lang.String>) strList51);
        deleteFieldVisits23.PlanningStatuses = strList51;
        roleFlattened19.RoleApprovalTransitions = strList51;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportObservations getExportObservations56 = getExportObservations13.setLabResultLabAnalysisMethodIds((java.util.List<java.lang.String>) strList51);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutBulkEditResultGradesV2 putBulkEditResultGradesV2_57 = putBulkEditResultGradesV2_9.setLabResultLabAnalysisMethodIds((java.util.List<java.lang.String>) strList51);
        reportListServiceRequest6.TagKeys = strList51;
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(strList4);
        org.junit.Assert.assertNotNull(reportListServiceRequest6);
        org.junit.Assert.assertNull(strList7);
        org.junit.Assert.assertNull(strList8);
        org.junit.Assert.assertNull(double10);
        org.junit.Assert.assertNull(instant11);
        org.junit.Assert.assertNull(double12);
        org.junit.Assert.assertNull(double14);
        org.junit.Assert.assertNull(strList15);
        org.junit.Assert.assertNull(strList16);
        org.junit.Assert.assertNull(strList17);
        org.junit.Assert.assertNull(strList18);
        org.junit.Assert.assertNotNull(roleFlattenedBase21);
        org.junit.Assert.assertNull(boolean22);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(getObservationsV2_33);
        org.junit.Assert.assertNull(strList34);
        org.junit.Assert.assertNotNull(instant38);
        org.junit.Assert.assertNotNull(strArray50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(getObservationsV2_53);
        org.junit.Assert.assertNotNull(getExportObservations56);
        org.junit.Assert.assertNotNull(putBulkEditResultGradesV2_57);
    }

    @Test
    public void test53363() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest106.test53363");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DeleteFieldVisits deleteFieldVisits0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DeleteFieldVisits();
        java.lang.String str1 = deleteFieldVisits0.Sort;
        deleteFieldVisits0.Sort = "9999-12-31T23:59:59.999Z";
        java.util.List<java.lang.String> strList4 = deleteFieldVisits0.getScheduleIds();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetShippingContainers getShippingContainers5 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetShippingContainers();
        java.util.List<java.lang.String> strList6 = getShippingContainers5.Search;
        java.util.List<java.lang.String> strList7 = getShippingContainers5.Search;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetAnalysisMethods getAnalysisMethods8 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetAnalysisMethods();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItem importItem9 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_10 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray12 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList13 = new java.util.ArrayList<java.lang.String>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList13, strArray12);
        getObservationsV2_10.SpecimenIds = strList13;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags16 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray20 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList21 = new java.util.ArrayList<java.lang.String>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList21, strArray20);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags23 = putLocationTags16.setTagUniqueIds(strList21);
        getObservationsV2_10.QualityControlTypes = strList21;
        java.util.List<java.lang.String> strList25 = getObservationsV2_10.getLabReportIds();
        importItem9.Errors = getObservationsV2_10;
        java.lang.Object obj27 = importItem9.getExistingItem();
        importItem9.Input = "hi!";
        java.lang.Object obj30 = importItem9.getItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemStatusType importItemStatusType31 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemStatusType.SKIPPED;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItem importItem32 = importItem9.setStatus(importItemStatusType31);
        importItem32.Input = "/AQUARIUS/Provisioning/v1";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate35 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate();
        specimenTemplate35.CustomId = "hi!";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate39 = specimenTemplate35.setId("hi!");
        java.lang.Boolean boolean40 = specimenTemplate39.getFiltered();
        importItem32.Item = specimenTemplate39;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Processor processor42 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Processor();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostTag postTag43 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostTag();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_44 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray47 = new java.lang.String[] { "", "" };
        java.util.ArrayList<java.lang.String> strList48 = new java.util.ArrayList<java.lang.String>();
        boolean boolean49 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList48, strArray47);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_50 = getObservationsV2_44.setDataClassifications((java.util.List<java.lang.String>) strList48);
        postTag43.PickListValues = strList48;
        java.util.ArrayList<java.lang.String> strList52 = postTag43.PickListValues;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Processor processor53 = processor42.setInputTimeSeriesUniqueIds(strList52);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItem importItem54 = importItem32.setWarningMessages((java.util.List<java.lang.String>) strList52);
        java.util.List<java.lang.String> strList55 = importItem32.getWarningMessages();
        getAnalysisMethods8.ObservedPropertyIds = strList55;
        getShippingContainers5.Search = strList55;
        deleteFieldVisits0.SamplingLocationIds = strList55;
        java.util.List<java.lang.String> strList59 = deleteFieldVisits0.getSearch();
        java.util.List<java.lang.String> strList60 = deleteFieldVisits0.ProjectIds;
        deleteFieldVisits0.Sort = "multipart/form-data; boundary=****8e3722aa-afdf-4137-ab41-bb1bb285cdf2****";
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(strList4);
        org.junit.Assert.assertNull(strList6);
        org.junit.Assert.assertNull(strList7);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(putLocationTags23);
        org.junit.Assert.assertNull(strList25);
        org.junit.Assert.assertNull(obj27);
        org.junit.Assert.assertNull(obj30);
        org.junit.Assert.assertTrue("'" + importItemStatusType31 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemStatusType.SKIPPED + "'", importItemStatusType31.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemStatusType.SKIPPED));
        org.junit.Assert.assertNotNull(importItem32);
        org.junit.Assert.assertNotNull(specimenTemplate39);
        org.junit.Assert.assertNull(boolean40);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(getObservationsV2_50);
        org.junit.Assert.assertNotNull(strList52);
        org.junit.Assert.assertNotNull(processor53);
        org.junit.Assert.assertNotNull(importItem54);
        org.junit.Assert.assertNotNull(strList55);
        org.junit.Assert.assertNull(strList59);
        org.junit.Assert.assertNull(strList60);
    }

    @Test
    public void test53364() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest106.test53364");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemTaxon importItemTaxon0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemTaxon();
        java.util.List<java.lang.String> strList1 = importItemTaxon0.getWarningMessages();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Taxon taxon2 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemTaxon importItemTaxon3 = importItemTaxon0.setItem(taxon2);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostCalculatedDerivedTimeSeries postCalculatedDerivedTimeSeries4 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostCalculatedDerivedTimeSeries();
        java.lang.String str5 = postCalculatedDerivedTimeSeries4.LocationUniqueId;
        java.util.List<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeValue> extendedAttributeValueList6 = postCalculatedDerivedTimeSeries4.getExtendedAttributeValues();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemTaxon importItemTaxon7 = importItemTaxon3.setErrors((java.lang.Object) postCalculatedDerivedTimeSeries4);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObject importItemObject8 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObject();
        java.util.List<java.lang.String> strList9 = importItemObject8.getWarningMessages();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportChangeItem[] importChangeItemArray10 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportChangeItem[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportChangeItem> importChangeItemList11 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportChangeItem>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportChangeItem>) importChangeItemList11, importChangeItemArray10);
        importItemObject8.ItemComparison = importChangeItemList11;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags14 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray18 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList19 = new java.util.ArrayList<java.lang.String>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList19, strArray18);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags21 = putLocationTags14.setTagUniqueIds(strList19);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObject importItemObject22 = importItemObject8.setExistingItem((java.lang.Object) putLocationTags14);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.OpenIdConnectUser openIdConnectUser23 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.OpenIdConnectUser();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.OpenIdConnectUser openIdConnectUser25 = openIdConnectUser23.setIdentifier("");
        java.lang.Boolean boolean26 = openIdConnectUser25.CanConfigureSystem;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObject importItemObject27 = importItemObject8.setErrors((java.lang.Object) openIdConnectUser25);
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportChangeItem> importChangeItemList28 = importItemObject27.ItemComparison;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemTaxon importItemTaxon29 = importItemTaxon7.setItemComparison(importChangeItemList28);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemTaxon importItemTaxon30 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemTaxon();
        java.util.List<java.lang.String> strList31 = importItemTaxon30.getWarningMessages();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Taxon taxon32 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemTaxon importItemTaxon33 = importItemTaxon30.setItem(taxon32);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostCalculatedDerivedTimeSeries postCalculatedDerivedTimeSeries34 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostCalculatedDerivedTimeSeries();
        java.lang.String str35 = postCalculatedDerivedTimeSeries34.LocationUniqueId;
        java.util.List<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeValue> extendedAttributeValueList36 = postCalculatedDerivedTimeSeries34.getExtendedAttributeValues();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemTaxon importItemTaxon37 = importItemTaxon33.setErrors((java.lang.Object) postCalculatedDerivedTimeSeries34);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Taxon taxon38 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Taxon();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemTaxon importItemTaxon39 = importItemTaxon33.setExistingItem(taxon38);
        importItemTaxon7.Item = taxon38;
        taxon38.ItisTsn = "yyyy'-'MM'-'dd'T'HH':'mm':'ss";
        java.lang.String str43 = taxon38.ItisTsn;
        java.lang.String str44 = taxon38.getCommonName();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricConfiguration metricConfiguration45 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricConfiguration();
        java.lang.String str46 = metricConfiguration45.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty observedProperty47 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty();
        observedProperty47.CasNumber = "MinDuration";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricConfiguration metricConfiguration50 = metricConfiguration45.setObservedProperty(observedProperty47);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultType resultType51 = observedProperty47.ResultType;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservedProperty postObservedProperty52 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservedProperty();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UnitGroup unitGroup53 = postObservedProperty52.UnitGroup;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity quantity54 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Unit unit55 = null;
        quantity54.Unit = unit55;
        postObservedProperty52.LowerLimit = quantity54;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity quantity58 = postObservedProperty52.LowerLimit;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Unit unit59 = quantity58.Unit;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty observedProperty60 = observedProperty47.setUpperLimit(quantity58);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLabAnalysisMethod postLabAnalysisMethod61 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLabAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation62 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation();
        observation62.CustomId = "hi!";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.CategoricalResult categoricalResult65 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation66 = observation62.setCategoricalResult(categoricalResult65);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple[] importHistoryEventSimpleArray67 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple> importHistoryEventSimpleList68 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple>();
        boolean boolean69 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple>) importHistoryEventSimpleList68, importHistoryEventSimpleArray67);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation70 = observation62.setImportHistoryEventSimples((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple>) importHistoryEventSimpleList68);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLabAnalysisMethod postLabAnalysisMethod71 = postLabAnalysisMethod61.setImportHistoryEventSimples((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple>) importHistoryEventSimpleList68);
        observedProperty60.ImportHistoryEventSimples = importHistoryEventSimpleList68;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty observedProperty74 = observedProperty60.setCustomId("/AQUARIUS/Acquisition/v2");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity quantity75 = observedProperty74.getUpperLimit();
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple> importHistoryEventSimpleList76 = observedProperty74.ImportHistoryEventSimples;
        taxon38.ImportHistoryEventSimples = importHistoryEventSimpleList76;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Taxon taxon79 = taxon38.setComment("");
        java.lang.String str80 = taxon79.Id;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Taxon taxon82 = taxon79.setSource("http://MaxDurationhttp/json/reply/Float");
        java.lang.String str83 = taxon82.getId();
        org.junit.Assert.assertNull(strList1);
        org.junit.Assert.assertNotNull(importItemTaxon3);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(extendedAttributeValueList6);
        org.junit.Assert.assertNotNull(importItemTaxon7);
        org.junit.Assert.assertNull(strList9);
        org.junit.Assert.assertNotNull(importChangeItemArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(putLocationTags21);
        org.junit.Assert.assertNotNull(importItemObject22);
        org.junit.Assert.assertNotNull(openIdConnectUser25);
        org.junit.Assert.assertNull(boolean26);
        org.junit.Assert.assertNotNull(importItemObject27);
        org.junit.Assert.assertNotNull(importChangeItemList28);
        org.junit.Assert.assertNotNull(importItemTaxon29);
        org.junit.Assert.assertNull(strList31);
        org.junit.Assert.assertNotNull(importItemTaxon33);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertNull(extendedAttributeValueList36);
        org.junit.Assert.assertNotNull(importItemTaxon37);
        org.junit.Assert.assertNotNull(importItemTaxon39);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "yyyy'-'MM'-'dd'T'HH':'mm':'ss" + "'", str43, "yyyy'-'MM'-'dd'T'HH':'mm':'ss");
        org.junit.Assert.assertNull(str44);
        org.junit.Assert.assertNull(str46);
        org.junit.Assert.assertNotNull(metricConfiguration50);
        org.junit.Assert.assertNull(resultType51);
        org.junit.Assert.assertNull(unitGroup53);
        org.junit.Assert.assertNotNull(quantity58);
        org.junit.Assert.assertNull(unit59);
        org.junit.Assert.assertNotNull(observedProperty60);
        org.junit.Assert.assertNotNull(observation66);
        org.junit.Assert.assertNotNull(importHistoryEventSimpleArray67);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(observation70);
        org.junit.Assert.assertNotNull(postLabAnalysisMethod71);
        org.junit.Assert.assertNotNull(observedProperty74);
        org.junit.Assert.assertNotNull(quantity75);
        org.junit.Assert.assertNotNull(importHistoryEventSimpleList76);
        org.junit.Assert.assertNotNull(taxon79);
        org.junit.Assert.assertNull(str80);
        org.junit.Assert.assertNotNull(taxon82);
        org.junit.Assert.assertNull(str83);
    }

    @Test
    public void test53365() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest106.test53365");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutAddOrUpdateIndex putAddOrUpdateIndex0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutAddOrUpdateIndex();
        java.lang.String str1 = putAddOrUpdateIndex0.FieldVisitId;
        java.lang.Object obj2 = putAddOrUpdateIndex0.getResponseType();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(obj2);
        org.junit.Assert.assertEquals(obj2.toString(), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$ActivityWithDetails");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj2), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$ActivityWithDetails");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj2), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$ActivityWithDetails");
    }

    @Test
    public void test53366() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest106.test53366");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostAnalysisMethod postAnalysisMethod0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostAnalysisMethod();
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple> importHistoryEventSimpleList1 = postAnalysisMethod0.ImportHistoryEventSimples;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostAnalysisMethod postAnalysisMethod3 = postAnalysisMethod0.setDescription("https");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostAnalysisMethod postAnalysisMethod5 = postAnalysisMethod0.setName("hi!:///AQUARIUS/Provisioning/v1");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostAnalysisMethod postAnalysisMethod7 = postAnalysisMethod5.setMethodId("MaxInstant");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes8 = postAnalysisMethod7.getAuditAttributes();
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple> importHistoryEventSimpleList9 = postAnalysisMethod7.ImportHistoryEventSimples;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostAnalysisMethod postAnalysisMethod11 = postAnalysisMethod7.setId("/AQUARIUS");
        java.lang.String str12 = postAnalysisMethod7.Name;
        org.junit.Assert.assertNull(importHistoryEventSimpleList1);
        org.junit.Assert.assertNotNull(postAnalysisMethod3);
        org.junit.Assert.assertNotNull(postAnalysisMethod5);
        org.junit.Assert.assertNotNull(postAnalysisMethod7);
        org.junit.Assert.assertNull(auditAttributes8);
        org.junit.Assert.assertNull(importHistoryEventSimpleList9);
        org.junit.Assert.assertNotNull(postAnalysisMethod11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hi!:///AQUARIUS/Provisioning/v1" + "'", str12, "hi!:///AQUARIUS/Provisioning/v1");
    }

    @Test
    public void test53367() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest106.test53367");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutQualifier putQualifier0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutQualifier();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutQualifier putQualifier2 = putQualifier0.setUniqueId("");
        java.lang.String str3 = putQualifier2.getPublicIdentifier();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutQualifier putQualifier5 = putQualifier2.setPublicIdentifier("2021.4.62.0");
        putQualifier5.PublicIdentifier = "multipart/form-data; boundary=****1eab67e1-84c8-4b82-aa06-d6c7526551f8****";
        putQualifier5.DisplayName = "multipart/form-data; boundary=****7b815a50-252c-4af2-a735-92be77f9a852****";
        org.junit.Assert.assertNotNull(putQualifier2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(putQualifier5);
    }

    @Test
    public void test53368() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest106.test53368");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceRequest locationDescriptionListServiceRequest0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceRequest();
        java.lang.String str1 = locationDescriptionListServiceRequest0.LocationName;
        java.util.ArrayList<java.lang.String> strList2 = locationDescriptionListServiceRequest0.TagNames;
        java.lang.String str3 = locationDescriptionListServiceRequest0.LocationFolder;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceRequest locationDescriptionListServiceRequest5 = locationDescriptionListServiceRequest0.setLocationFolder("/AQUARIUS/Publish/v2");
        java.lang.String str6 = locationDescriptionListServiceRequest0.getLocationName();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.OpenIdConnectRelyingPartyConfiguration openIdConnectRelyingPartyConfiguration7 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.OpenIdConnectRelyingPartyConfiguration();
        java.lang.String str8 = openIdConnectRelyingPartyConfiguration7.getClientIdentifier();
        openIdConnectRelyingPartyConfiguration7.ClientIdentifier = "MaxDuration";
        openIdConnectRelyingPartyConfiguration7.IssuerIdentifier = "MinInstant";
        java.util.List<java.lang.String> strList13 = openIdConnectRelyingPartyConfiguration7.Scopes;
        java.lang.String str14 = openIdConnectRelyingPartyConfiguration7.getOptionalIssuerDiscoveryUri();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Processor processor15 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Processor();
        processor15.ProcessorType = "'.'SSSSSSS";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetActivities getActivities18 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetActivities();
        getActivities18.Limit = 10;
        java.util.List<java.lang.String> strList21 = getActivities18.ActivityTemplateId;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportObservations getExportObservations22 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportObservations();
        java.util.List<java.lang.String> strList23 = getExportObservations22.getLabReportIds();
        java.lang.String str24 = getExportObservations22.DepthUnitCustomId;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetActivityTemplates getActivityTemplates25 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetActivityTemplates();
        java.lang.Object obj26 = getActivityTemplates25.getResponseType();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_27 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray29 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList30 = new java.util.ArrayList<java.lang.String>();
        boolean boolean31 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList30, strArray29);
        getObservationsV2_27.SpecimenIds = strList30;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags33 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray37 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList38 = new java.util.ArrayList<java.lang.String>();
        boolean boolean39 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList38, strArray37);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags40 = putLocationTags33.setTagUniqueIds(strList38);
        getObservationsV2_27.QualityControlTypes = strList38;
        getActivityTemplates25.Type = strList38;
        getExportObservations22.AnalyticalGroupIds = strList38;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetActivities getActivities44 = getActivities18.setMedia((java.util.List<java.lang.String>) strList38);
        processor15.InputTimeSeriesUniqueIds = strList38;
        openIdConnectRelyingPartyConfiguration7.Scopes = strList38;
        locationDescriptionListServiceRequest0.TagKeys = strList38;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(strList2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceRequest5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNull(strList13);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNull(strList21);
        org.junit.Assert.assertNull(strList23);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNotNull(obj26);
        org.junit.Assert.assertEquals(obj26.toString(), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$SearchResultActivityTemplate");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj26), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$SearchResultActivityTemplate");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj26), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$SearchResultActivityTemplate");
        org.junit.Assert.assertNotNull(strArray29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(putLocationTags40);
        org.junit.Assert.assertNotNull(getActivities44);
    }

    @Test
    public void test53369() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest106.test53369");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostQualityCode postQualityCode0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostQualityCode();
        java.lang.String str1 = postQualityCode0.getDisplayName();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostQualityCode postQualityCode3 = postQualityCode0.setColor("multipart/form-data; boundary=****44f0772e-c3ca-4316-8e2a-61ec8540d661****");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostQualityCode postQualityCode5 = postQualityCode3.setDisplayName("");
        java.lang.String str6 = postQualityCode5.getDisplayName();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostQualityCode postQualityCode8 = postQualityCode5.setDescription("multipart/form-data; boundary=****5d34e306-630a-492f-8c84-1002d981f2f0****");
        postQualityCode5.Color = "multipart/form-data; boundary=****e0afd3ef-ab93-4371-a368-4a6f5ef58c71****";
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(postQualityCode3);
        org.junit.Assert.assertNotNull(postQualityCode5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(postQualityCode8);
    }

    @Test
    public void test53370() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest106.test53370");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostBasicTimeSeries postBasicTimeSeries0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostBasicTimeSeries();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostBasicTimeSeries postBasicTimeSeries2 = postBasicTimeSeries0.setLabel("yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSSSSSZZZZZ");
        java.lang.String str3 = postBasicTimeSeries2.getLabel();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostBasicTimeSeries postBasicTimeSeries5 = postBasicTimeSeries2.setParameter("POST");
        java.time.Duration duration6 = postBasicTimeSeries5.GapTolerance;
        postBasicTimeSeries5.Publish = false;
        org.junit.Assert.assertNotNull(postBasicTimeSeries2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSSSSSZZZZZ" + "'", str3, "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSSSSSZZZZZ");
        org.junit.Assert.assertNotNull(postBasicTimeSeries5);
        org.junit.Assert.assertNull(duration6);
    }

    @Test
    public void test53371() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest106.test53371");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingCurve ratingCurve0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingCurve();
        java.lang.String str1 = ratingCurve0.Equation;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ExpandedRatingCurve expandedRatingCurve2 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ExpandedRatingCurve();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingCurveType ratingCurveType3 = expandedRatingCurve2.Type;
        expandedRatingCurve2.IsBlended = false;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ParameterWithUnit parameterWithUnit6 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ParameterWithUnit();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ExpandedRatingCurve expandedRatingCurve7 = expandedRatingCurve2.setOutputParameter(parameterWithUnit6);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingCurve ratingCurve8 = ratingCurve0.setInputParameter(parameterWithUnit6);
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.OffsetPoint> offsetPointList9 = ratingCurve0.getOffsets();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ExpandedRatingCurve expandedRatingCurve10 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ExpandedRatingCurve();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingCurveType ratingCurveType11 = expandedRatingCurve10.Type;
        expandedRatingCurve10.IsBlended = false;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ExpandedRatingCurve expandedRatingCurve15 = expandedRatingCurve10.setIsBlended((java.lang.Boolean) true);
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingShift> ratingShiftList16 = expandedRatingCurve15.getShifts();
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingShift> ratingShiftList17 = expandedRatingCurve15.getShifts();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ExpandedRatingCurve expandedRatingCurve18 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ExpandedRatingCurve();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingCurveType ratingCurveType19 = expandedRatingCurve18.Type;
        expandedRatingCurve18.IsBlended = false;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ParameterWithUnit parameterWithUnit22 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ParameterWithUnit();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ExpandedRatingCurve expandedRatingCurve23 = expandedRatingCurve18.setOutputParameter(parameterWithUnit22);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ParameterWithUnit parameterWithUnit24 = expandedRatingCurve23.getOutputParameter();
        expandedRatingCurve15.OutputParameter = parameterWithUnit24;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ParameterWithUnit parameterWithUnit27 = parameterWithUnit24.setParameterName("hi!");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingCurve ratingCurve28 = ratingCurve0.setOutputParameter(parameterWithUnit27);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ExpandedRatingCurve expandedRatingCurve29 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ExpandedRatingCurve();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingCurveType ratingCurveType30 = expandedRatingCurve29.Type;
        expandedRatingCurve29.IsBlended = false;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ParameterWithUnit parameterWithUnit33 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ParameterWithUnit();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ExpandedRatingCurve expandedRatingCurve34 = expandedRatingCurve29.setOutputParameter(parameterWithUnit33);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ParameterWithUnit parameterWithUnit35 = expandedRatingCurve34.getOutputParameter();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ExpandedRatingCurve expandedRatingCurve36 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ExpandedRatingCurve();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingCurveType ratingCurveType37 = expandedRatingCurve36.Type;
        expandedRatingCurve36.IsBlended = false;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ParameterWithUnit parameterWithUnit40 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ParameterWithUnit();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ExpandedRatingCurve expandedRatingCurve41 = expandedRatingCurve36.setOutputParameter(parameterWithUnit40);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ExpandedRatingCurve expandedRatingCurve42 = expandedRatingCurve34.setOutputParameter(parameterWithUnit40);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.OffsetPoint[] offsetPointArray43 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.OffsetPoint[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.OffsetPoint> offsetPointList44 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.OffsetPoint>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.OffsetPoint>) offsetPointList44, offsetPointArray43);
        expandedRatingCurve34.Offsets = offsetPointList44;
        ratingCurve28.Offsets = offsetPointList44;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingCurve ratingCurve48 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingCurve();
        java.lang.String str49 = ratingCurve48.Equation;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ParameterWithUnit parameterWithUnit50 = ratingCurve48.getInputParameter();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ExpandedRatingCurve expandedRatingCurve51 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ExpandedRatingCurve();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingCurveType ratingCurveType52 = expandedRatingCurve51.Type;
        expandedRatingCurve51.IsBlended = false;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ExpandedRatingCurve expandedRatingCurve56 = expandedRatingCurve51.setIsBlended((java.lang.Boolean) true);
        java.lang.String str57 = expandedRatingCurve51.Id;
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingPoint> ratingPointList58 = expandedRatingCurve51.AdjustedRatingTable;
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.OffsetPoint> offsetPointList59 = expandedRatingCurve51.Offsets;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ExpandedRatingCurve expandedRatingCurve61 = expandedRatingCurve51.setId("2021.4.62.0");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingCurve ratingCurve62 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingCurve();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingPoint[] ratingPointArray63 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingPoint[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingPoint> ratingPointList64 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingPoint>();
        boolean boolean65 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingPoint>) ratingPointList64, ratingPointArray63);
        ratingCurve62.BaseRatingTable = ratingPointList64;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingCurve ratingCurve67 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingCurve();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingPoint[] ratingPointArray68 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingPoint[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingPoint> ratingPointList69 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingPoint>();
        boolean boolean70 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingPoint>) ratingPointList69, ratingPointArray68);
        ratingCurve67.BaseRatingTable = ratingPointList69;
        ratingCurve62.BaseRatingTable = ratingPointList69;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ExpandedRatingCurve expandedRatingCurve73 = expandedRatingCurve61.setAdjustedRatingTable(ratingPointList69);
        ratingCurve48.BaseRatingTable = ratingPointList69;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingCurve ratingCurve75 = ratingCurve28.setBaseRatingTable(ratingPointList69);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ExpandedRatingCurve expandedRatingCurve76 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ExpandedRatingCurve();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RatingCurveType ratingCurveType77 = expandedRatingCurve76.Type;
        expandedRatingCurve76.IsBlended = false;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ParameterWithUnit parameterWithUnit80 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ParameterWithUnit();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ExpandedRatingCurve expandedRatingCurve81 = expandedRatingCurve76.setOutputParameter(parameterWithUnit80);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ParameterWithUnit parameterWithUnit83 = parameterWithUnit80.setParameterName("");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ParameterWithUnit parameterWithUnit85 = parameterWithUnit80.setParameterUnit("MaxDuration");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ParameterWithUnit parameterWithUnit87 = parameterWithUnit80.setParameterName("multipart/form-data; boundary=****c82cca4e-7755-4a00-8acf-9ac791c56995****");
        ratingCurve28.OutputParameter = parameterWithUnit87;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(ratingCurveType3);
        org.junit.Assert.assertNotNull(expandedRatingCurve7);
        org.junit.Assert.assertNotNull(ratingCurve8);
        org.junit.Assert.assertNull(offsetPointList9);
        org.junit.Assert.assertNull(ratingCurveType11);
        org.junit.Assert.assertNotNull(expandedRatingCurve15);
        org.junit.Assert.assertNull(ratingShiftList16);
        org.junit.Assert.assertNull(ratingShiftList17);
        org.junit.Assert.assertNull(ratingCurveType19);
        org.junit.Assert.assertNotNull(expandedRatingCurve23);
        org.junit.Assert.assertNotNull(parameterWithUnit24);
        org.junit.Assert.assertNotNull(parameterWithUnit27);
        org.junit.Assert.assertNotNull(ratingCurve28);
        org.junit.Assert.assertNull(ratingCurveType30);
        org.junit.Assert.assertNotNull(expandedRatingCurve34);
        org.junit.Assert.assertNotNull(parameterWithUnit35);
        org.junit.Assert.assertNull(ratingCurveType37);
        org.junit.Assert.assertNotNull(expandedRatingCurve41);
        org.junit.Assert.assertNotNull(expandedRatingCurve42);
        org.junit.Assert.assertNotNull(offsetPointArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNull(str49);
        org.junit.Assert.assertNull(parameterWithUnit50);
        org.junit.Assert.assertNull(ratingCurveType52);
        org.junit.Assert.assertNotNull(expandedRatingCurve56);
        org.junit.Assert.assertNull(str57);
        org.junit.Assert.assertNull(ratingPointList58);
        org.junit.Assert.assertNull(offsetPointList59);
        org.junit.Assert.assertNotNull(expandedRatingCurve61);
        org.junit.Assert.assertNotNull(ratingPointArray63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(ratingPointArray68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(expandedRatingCurve73);
        org.junit.Assert.assertNotNull(ratingCurve75);
        org.junit.Assert.assertNull(ratingCurveType77);
        org.junit.Assert.assertNotNull(expandedRatingCurve81);
        org.junit.Assert.assertNotNull(parameterWithUnit83);
        org.junit.Assert.assertNotNull(parameterWithUnit85);
        org.junit.Assert.assertNotNull(parameterWithUnit87);
    }

    @Test
    public void test53372() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest106.test53372");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportObservations getExportObservations0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportObservations();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_1 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray4 = new java.lang.String[] { "", "" };
        java.util.ArrayList<java.lang.String> strList5 = new java.util.ArrayList<java.lang.String>();
        boolean boolean6 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList5, strArray4);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_7 = getObservationsV2_1.setDataClassifications((java.util.List<java.lang.String>) strList5);
        java.time.Instant instant8 = getObservationsV2_1.getStartObservedTime();
        getObservationsV2_1.MinNumericResultValue = (-1.0d);
        java.util.List<java.lang.String> strList11 = null;
        getObservationsV2_1.SamplingContextTagIds = strList11;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescription locationDescription13 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescription();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescription locationDescription15 = locationDescription13.setIdentifier("");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ControlConditionActivity controlConditionActivity16 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ControlConditionActivity();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ControlCleanedType controlCleanedType17 = null;
        controlConditionActivity16.ControlCleaned = controlCleanedType17;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse19 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant20 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse21 = locationDescriptionListServiceResponse19.setNextToken(instant20);
        controlConditionActivity16.DateCleaned = instant20;
        locationDescription15.LastModified = instant20;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_24 = getObservationsV2_1.setStartResultTime(instant20);
        getExportObservations0.StartObservedTime = instant20;
        java.util.List<java.lang.String> strList26 = getExportObservations0.getLabReportIds();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags27 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray31 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList32 = new java.util.ArrayList<java.lang.String>();
        boolean boolean33 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList32, strArray31);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags34 = putLocationTags27.setTagUniqueIds(strList32);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags35 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String str36 = putLocationTags35.getLocationUniqueId();
        putLocationTags35.LocationUniqueId = "'.'SSSSSSS";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ApplyTagRequest[] applyTagRequestArray39 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ApplyTagRequest[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ApplyTagRequest> applyTagRequestList40 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ApplyTagRequest>();
        boolean boolean41 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ApplyTagRequest>) applyTagRequestList40, applyTagRequestArray39);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags42 = putLocationTags35.setTags(applyTagRequestList40);
        putLocationTags34.Tags = applyTagRequestList40;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_44 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray47 = new java.lang.String[] { "", "" };
        java.util.ArrayList<java.lang.String> strList48 = new java.util.ArrayList<java.lang.String>();
        boolean boolean49 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList48, strArray47);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_50 = getObservationsV2_44.setDataClassifications((java.util.List<java.lang.String>) strList48);
        java.util.List<java.lang.String> strList51 = getObservationsV2_44.ResultGrades;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary52 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        dischargeSummary52.Reviewer = "";
        java.time.Instant instant55 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        dischargeSummary52.MeasurementTime = instant55;
        getObservationsV2_44.StartResultTime = instant55;
        java.lang.String[] strArray67 = new java.lang.String[] { "https", "/AQUARIUS/Provisioning/v1", "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ", "2021.4.62.0", "hi!", "2021.4.62.0", "2021.4.62.0", "/AQUARIUS/Acquisition/v2", "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ" };
        java.util.ArrayList<java.lang.String> strList68 = new java.util.ArrayList<java.lang.String>();
        boolean boolean69 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList68, strArray67);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_70 = getObservationsV2_44.setAnalyticalGroupIds((java.util.List<java.lang.String>) strList68);
        putLocationTags34.TagUniqueIds = strList68;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportObservations getExportObservations72 = getExportObservations0.setLabResultLabAnalysisMethodIds((java.util.List<java.lang.String>) strList68);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportObservations getExportObservations74 = getExportObservations72.setDetectionCondition("multipart/form-data; boundary=****2d077bad-cd27-4736-8ba0-2a8d8a85733d****");
        java.lang.String str75 = getExportObservations72.getCustomId();
        org.junit.Assert.assertNotNull(strArray4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(getObservationsV2_7);
        org.junit.Assert.assertNull(instant8);
        org.junit.Assert.assertNotNull(locationDescription15);
        org.junit.Assert.assertNotNull(instant20);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse21);
        org.junit.Assert.assertNotNull(getObservationsV2_24);
        org.junit.Assert.assertNull(strList26);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(putLocationTags34);
        org.junit.Assert.assertNull(str36);
        org.junit.Assert.assertNotNull(applyTagRequestArray39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(putLocationTags42);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(getObservationsV2_50);
        org.junit.Assert.assertNull(strList51);
        org.junit.Assert.assertNotNull(instant55);
        org.junit.Assert.assertNotNull(strArray67);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertNotNull(getObservationsV2_70);
        org.junit.Assert.assertNotNull(getExportObservations72);
        org.junit.Assert.assertNotNull(getExportObservations74);
        org.junit.Assert.assertNull(str75);
    }

    @Test
    public void test53373() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest106.test53373");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeChannelMeasurement dischargeChannelMeasurement0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeChannelMeasurement();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ChannelMaterialType channelMaterialType1 = dischargeChannelMeasurement0.getChannelMaterial();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay2 = dischargeChannelMeasurement0.Discharge;
        java.lang.String str3 = dischargeChannelMeasurement0.MonitoringMethod;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MeterSuspensionType meterSuspensionType4 = dischargeChannelMeasurement0.getMeterSuspension();
        java.lang.String str5 = dischargeChannelMeasurement0.getComments();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeChannelMeasurement dischargeChannelMeasurement7 = dischargeChannelMeasurement0.setChannel("zZZZZ");
        org.junit.Assert.assertNull(channelMaterialType1);
        org.junit.Assert.assertNull(quantityWithDisplay2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(meterSuspensionType4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(dischargeChannelMeasurement7);
    }

    @Test
    public void test53374() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest106.test53374");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutActivityTemplate putActivityTemplate0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutActivityTemplate();
        java.lang.String str1 = putActivityTemplate0.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.CollectionMethod collectionMethod2 = putActivityTemplate0.CollectionMethod;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutActivityTemplate putActivityTemplate4 = putActivityTemplate0.setComment("ZZZZZ");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity postActivity5 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity();
        postActivity5.LoggerFileName = "hi!";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity plannedActivity8 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity postActivity9 = postActivity5.setPlannedActivity(plannedActivity8);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ActivityType activityType10 = postActivity5.Type;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFieldVisitActivityWithTemplate postFieldVisitActivityWithTemplate11 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFieldVisitActivityWithTemplate();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate12 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate();
        specimenTemplate12.CustomId = "hi!";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate15 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate16 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate();
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabInstructionTemplate> labInstructionTemplateList17 = specimenTemplate16.getLabInstructionTemplates();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate18 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate20 = specimenTemplate18.setCustomId("hi!");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate21 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate22 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate();
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabInstructionTemplate> labInstructionTemplateList23 = specimenTemplate22.LabInstructionTemplates;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate[] specimenTemplateArray24 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate[] { specimenTemplate12, specimenTemplate15, specimenTemplate16, specimenTemplate20, specimenTemplate21, specimenTemplate22 };
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate> specimenTemplateList25 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate>) specimenTemplateList25, specimenTemplateArray24);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFieldVisitActivityWithTemplate postFieldVisitActivityWithTemplate27 = postFieldVisitActivityWithTemplate11.setSpecimenTemplates((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate>) specimenTemplateList25);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.CollectionMethod collectionMethod28 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.CollectionMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFieldVisitActivityWithTemplate postFieldVisitActivityWithTemplate29 = postFieldVisitActivityWithTemplate27.setCollectionMethod(collectionMethod28);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity postActivity30 = postActivity5.setCollectionMethod(collectionMethod28);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutActivityTemplate putActivityTemplate31 = putActivityTemplate0.setCollectionMethod(collectionMethod28);
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate> specimenTemplateList32 = putActivityTemplate31.SpecimenTemplates;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MediumType mediumType33 = putActivityTemplate31.getMedium();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutActivity putActivity34 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutActivity();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity quantity35 = null;
        putActivity34.Depth = quantity35;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes37 = putActivity34.getAuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutActivity putActivity38 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutActivity();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity plannedActivity39 = null;
        putActivity38.PlannedActivity = plannedActivity39;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutActivity putActivity41 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutActivity();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity plannedActivity42 = null;
        putActivity41.PlannedActivity = plannedActivity42;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity postActivity44 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity();
        postActivity44.LoggerFileName = "hi!";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity plannedActivity47 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity postActivity48 = postActivity44.setPlannedActivity(plannedActivity47);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag samplingContextTag49 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag();
        java.lang.String str50 = samplingContextTag49.getDescription();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes51 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag samplingContextTag52 = samplingContextTag49.setAuditAttributes(auditAttributes51);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag samplingContextTag54 = samplingContextTag52.setId("yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag samplingContextTag55 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag();
        java.lang.String str56 = samplingContextTag55.getDescription();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag samplingContextTag57 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag();
        java.lang.String str58 = samplingContextTag57.getDescription();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes59 = null;
        samplingContextTag57.AuditAttributes = auditAttributes59;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag samplingContextTag61 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag();
        java.lang.String str62 = samplingContextTag61.getDescription();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes63 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag samplingContextTag64 = samplingContextTag61.setAuditAttributes(auditAttributes63);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag[] samplingContextTagArray65 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag[] { samplingContextTag54, samplingContextTag55, samplingContextTag57, samplingContextTag64 };
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag> samplingContextTagList66 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag>();
        boolean boolean67 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag>) samplingContextTagList66, samplingContextTagArray65);
        postActivity44.SamplingContextTags = samplingContextTagList66;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutActivity putActivity69 = putActivity41.setSamplingContextTags((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag>) samplingContextTagList66);
        putActivity38.SamplingContextTags = samplingContextTagList66;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutActivity putActivity71 = putActivity34.setSamplingContextTags((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag>) samplingContextTagList66);
        java.lang.String str72 = putActivity34.SourceActivityId;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Device device73 = putActivity34.getDevice();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFieldVisitActivityWithTemplate postFieldVisitActivityWithTemplate74 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFieldVisitActivityWithTemplate();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate75 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate();
        specimenTemplate75.CustomId = "hi!";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate78 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate79 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate();
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabInstructionTemplate> labInstructionTemplateList80 = specimenTemplate79.getLabInstructionTemplates();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate81 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate83 = specimenTemplate81.setCustomId("hi!");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate84 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate85 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate();
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabInstructionTemplate> labInstructionTemplateList86 = specimenTemplate85.LabInstructionTemplates;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate[] specimenTemplateArray87 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate[] { specimenTemplate75, specimenTemplate78, specimenTemplate79, specimenTemplate83, specimenTemplate84, specimenTemplate85 };
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate> specimenTemplateList88 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate>();
        boolean boolean89 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate>) specimenTemplateList88, specimenTemplateArray87);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFieldVisitActivityWithTemplate postFieldVisitActivityWithTemplate90 = postFieldVisitActivityWithTemplate74.setSpecimenTemplates((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate>) specimenTemplateList88);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.CollectionMethod collectionMethod91 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.CollectionMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFieldVisitActivityWithTemplate postFieldVisitActivityWithTemplate92 = postFieldVisitActivityWithTemplate90.setCollectionMethod(collectionMethod91);
        putActivity34.CollectionMethod = collectionMethod91;
        putActivityTemplate31.CollectionMethod = collectionMethod91;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(collectionMethod2);
        org.junit.Assert.assertNotNull(putActivityTemplate4);
        org.junit.Assert.assertNotNull(postActivity9);
        org.junit.Assert.assertNull(activityType10);
        org.junit.Assert.assertNull(labInstructionTemplateList17);
        org.junit.Assert.assertNotNull(specimenTemplate20);
        org.junit.Assert.assertNull(labInstructionTemplateList23);
        org.junit.Assert.assertNotNull(specimenTemplateArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(postFieldVisitActivityWithTemplate27);
        org.junit.Assert.assertNotNull(postFieldVisitActivityWithTemplate29);
        org.junit.Assert.assertNotNull(postActivity30);
        org.junit.Assert.assertNotNull(putActivityTemplate31);
        org.junit.Assert.assertNull(specimenTemplateList32);
        org.junit.Assert.assertNull(mediumType33);
        org.junit.Assert.assertNull(auditAttributes37);
        org.junit.Assert.assertNotNull(postActivity48);
        org.junit.Assert.assertNull(str50);
        org.junit.Assert.assertNotNull(samplingContextTag52);
        org.junit.Assert.assertNotNull(samplingContextTag54);
        org.junit.Assert.assertNull(str56);
        org.junit.Assert.assertNull(str58);
        org.junit.Assert.assertNull(str62);
        org.junit.Assert.assertNotNull(samplingContextTag64);
        org.junit.Assert.assertNotNull(samplingContextTagArray65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertNotNull(putActivity69);
        org.junit.Assert.assertNotNull(putActivity71);
        org.junit.Assert.assertNull(str72);
        org.junit.Assert.assertNull(device73);
        org.junit.Assert.assertNull(labInstructionTemplateList80);
        org.junit.Assert.assertNotNull(specimenTemplate83);
        org.junit.Assert.assertNull(labInstructionTemplateList86);
        org.junit.Assert.assertNotNull(specimenTemplateArray87);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + true + "'", boolean89 == true);
        org.junit.Assert.assertNotNull(postFieldVisitActivityWithTemplate90);
        org.junit.Assert.assertNotNull(postFieldVisitActivityWithTemplate92);
    }

    @Test
    public void test53375() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest106.test53375");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.GapToleranceOperation gapToleranceOperation0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.GapToleranceOperation();
        java.lang.String str1 = gapToleranceOperation0.User;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.GapToleranceOperation gapToleranceOperation3 = gapToleranceOperation0.setComments("https");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.LocationDatumPeriod locationDatumPeriod4 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.LocationDatumPeriod();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.LocationDatumPeriodBase locationDatumPeriodBase6 = locationDatumPeriod4.setComment("'.'SSSSSSS");
        java.lang.String str7 = locationDatumPeriodBase6.Method;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse8 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant9 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse10 = locationDescriptionListServiceResponse8.setNextToken(instant9);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.LocationDatumPeriodBase locationDatumPeriodBase11 = locationDatumPeriodBase6.setValidFrom(instant9);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeRange timeRange12 = gapToleranceOperation0.setStartTime(instant9);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MethodOperation methodOperation13 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MethodOperation();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeOperationType metadataChangeOperationType14 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeOperationType.Creation;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MethodOperation methodOperation15 = methodOperation13.setOperationType(metadataChangeOperationType14);
        java.lang.String str16 = methodOperation15.getUser();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeOperationType metadataChangeOperationType17 = methodOperation15.getOperationType();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.GapToleranceOperation gapToleranceOperation18 = gapToleranceOperation0.setOperationType(metadataChangeOperationType17);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.GapToleranceOperation gapToleranceOperation20 = gapToleranceOperation18.setUser("multipart/form-data; boundary=****59879c02-0839-4b96-bc41-a13ebb706be4****");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetGroupedObservationsV2 getGroupedObservationsV2_21 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetGroupedObservationsV2();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TagDefinition tagDefinition22 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TagDefinition();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TagValueType tagValueType23 = null;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TagDefinition tagDefinition24 = tagDefinition22.setValueType(tagValueType23);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TagDefinition tagDefinition26 = tagDefinition22.setAppliesToAttachments((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TagDefinition tagDefinition28 = tagDefinition26.setKey("yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TagDefinition tagDefinition30 = tagDefinition26.setAppliesToReports((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest31 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest();
        java.lang.Object obj32 = timeAlignedDataServiceRequest31.getResponseType();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse33 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant34 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse35 = locationDescriptionListServiceResponse33.setNextToken(instant34);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest36 = timeAlignedDataServiceRequest31.setQueryFrom(instant34);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags37 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray41 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList42 = new java.util.ArrayList<java.lang.String>();
        boolean boolean43 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList42, strArray41);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags44 = putLocationTags37.setTagUniqueIds(strList42);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest45 = timeAlignedDataServiceRequest31.setTimeSeriesOutputUnitIds(strList42);
        tagDefinition30.PickListValues = strList42;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetGroupedObservationsV2 getGroupedObservationsV2_47 = getGroupedObservationsV2_21.setLabResultLabAnalysisMethodIds((java.util.List<java.lang.String>) strList42);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutOpenIdConnectRelyingPartyConfiguration putOpenIdConnectRelyingPartyConfiguration48 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutOpenIdConnectRelyingPartyConfiguration();
        java.util.List<java.lang.String> strList49 = putOpenIdConnectRelyingPartyConfiguration48.getScopes();
        java.lang.String str50 = putOpenIdConnectRelyingPartyConfiguration48.getOptionalIssuerDiscoveryUri();
        java.lang.String str51 = putOpenIdConnectRelyingPartyConfiguration48.getOptionalIssuerDiscoveryUri();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostTag postTag52 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostTag();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_53 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray56 = new java.lang.String[] { "", "" };
        java.util.ArrayList<java.lang.String> strList57 = new java.util.ArrayList<java.lang.String>();
        boolean boolean58 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList57, strArray56);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_59 = getObservationsV2_53.setDataClassifications((java.util.List<java.lang.String>) strList57);
        postTag52.PickListValues = strList57;
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.TagApplicability> tagApplicabilityList61 = postTag52.Applicability;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.TagRequestBase tagRequestBase63 = postTag52.setKey("");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.TagValueType tagValueType64 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.TagValueType.PickList;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.TagRequestBase tagRequestBase65 = tagRequestBase63.setValueType(tagValueType64);
        java.lang.String str66 = tagRequestBase65.Key;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_67 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray69 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList70 = new java.util.ArrayList<java.lang.String>();
        boolean boolean71 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList70, strArray69);
        getObservationsV2_67.SpecimenIds = strList70;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags73 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray77 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList78 = new java.util.ArrayList<java.lang.String>();
        boolean boolean79 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList78, strArray77);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags80 = putLocationTags73.setTagUniqueIds(strList78);
        getObservationsV2_67.ActivityIds = strList78;
        tagRequestBase65.PickListValues = strList78;
        putOpenIdConnectRelyingPartyConfiguration48.HostedDomains = strList78;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetGroupedObservationsV2 getGroupedObservationsV2_84 = getGroupedObservationsV2_47.setSearch((java.util.List<java.lang.String>) strList78);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.FieldResultType fieldResultType85 = getGroupedObservationsV2_47.FieldResultType;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationRemark locationRemark86 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationRemark();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationRemark locationRemark88 = locationRemark86.setDescription("MaxInstant");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse89 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant90 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse91 = locationDescriptionListServiceResponse89.setNextToken(instant90);
        locationRemark88.FromTime = instant90;
        getGroupedObservationsV2_47.EndObservedTime = instant90;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.GapToleranceOperation gapToleranceOperation94 = gapToleranceOperation20.setDateAppliedUtc(instant90);
        java.lang.String str95 = gapToleranceOperation94.getComments();
        java.lang.String str96 = gapToleranceOperation94.getUser();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(gapToleranceOperation3);
        org.junit.Assert.assertNotNull(locationDatumPeriodBase6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(instant9);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse10);
        org.junit.Assert.assertNotNull(locationDatumPeriodBase11);
        org.junit.Assert.assertNotNull(timeRange12);
        org.junit.Assert.assertTrue("'" + metadataChangeOperationType14 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeOperationType.Creation + "'", metadataChangeOperationType14.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeOperationType.Creation));
        org.junit.Assert.assertNotNull(methodOperation15);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertTrue("'" + metadataChangeOperationType17 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeOperationType.Creation + "'", metadataChangeOperationType17.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeOperationType.Creation));
        org.junit.Assert.assertNotNull(gapToleranceOperation18);
        org.junit.Assert.assertNotNull(gapToleranceOperation20);
        org.junit.Assert.assertNotNull(tagDefinition24);
        org.junit.Assert.assertNotNull(tagDefinition26);
        org.junit.Assert.assertNotNull(tagDefinition28);
        org.junit.Assert.assertNotNull(tagDefinition30);
        org.junit.Assert.assertNotNull(obj32);
        org.junit.Assert.assertEquals(obj32.toString(), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj32), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj32), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertNotNull(instant34);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse35);
        org.junit.Assert.assertNotNull(timeAlignedDataServiceRequest36);
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(putLocationTags44);
        org.junit.Assert.assertNotNull(timeAlignedDataServiceRequest45);
        org.junit.Assert.assertNotNull(getGroupedObservationsV2_47);
        org.junit.Assert.assertNull(strList49);
        org.junit.Assert.assertNull(str50);
        org.junit.Assert.assertNull(str51);
        org.junit.Assert.assertNotNull(strArray56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(getObservationsV2_59);
        org.junit.Assert.assertNull(tagApplicabilityList61);
        org.junit.Assert.assertNotNull(tagRequestBase63);
        org.junit.Assert.assertTrue("'" + tagValueType64 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.TagValueType.PickList + "'", tagValueType64.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.TagValueType.PickList));
        org.junit.Assert.assertNotNull(tagRequestBase65);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "" + "'", str66, "");
        org.junit.Assert.assertNotNull(strArray69);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertNotNull(strArray77);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
        org.junit.Assert.assertNotNull(putLocationTags80);
        org.junit.Assert.assertNotNull(getGroupedObservationsV2_84);
        org.junit.Assert.assertNull(fieldResultType85);
        org.junit.Assert.assertNotNull(locationRemark88);
        org.junit.Assert.assertNotNull(instant90);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse91);
        org.junit.Assert.assertNotNull(gapToleranceOperation94);
        org.junit.Assert.assertEquals("'" + str95 + "' != '" + "https" + "'", str95, "https");
        org.junit.Assert.assertEquals("'" + str96 + "' != '" + "multipart/form-data; boundary=****59879c02-0839-4b96-bc41-a13ebb706be4****" + "'", str96, "multipart/form-data; boundary=****59879c02-0839-4b96-bc41-a13ebb706be4****");
    }

    @Test
    public void test53376() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest106.test53376");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSpreadsheetTemplate putSpreadsheetTemplate0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSpreadsheetTemplate();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes1 = putSpreadsheetTemplate0.AuditAttributes;
        putSpreadsheetTemplate0.CustomId = "2021.4.62.0";
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment> domainObjectAttachmentList4 = putSpreadsheetTemplate0.getAttachments();
        java.lang.String str5 = putSpreadsheetTemplate0.getDescription();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSpreadsheetTemplate putSpreadsheetTemplate7 = putSpreadsheetTemplate0.setCustomId("MinInstant");
        org.junit.Assert.assertNull(auditAttributes1);
        org.junit.Assert.assertNull(domainObjectAttachmentList4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(putSpreadsheetTemplate7);
    }

    @Test
    public void test53377() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest106.test53377");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Tag tag0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Tag();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Tag tag2 = tag0.setAppliesToAttachments((java.lang.Boolean) false);
        java.lang.String str3 = tag2.Key;
        java.lang.Boolean boolean4 = tag2.AppliesToReports;
        java.util.ArrayList<java.lang.String> strList5 = tag2.PickListValues;
        tag2.AppliesToAttachments = false;
        java.lang.Boolean boolean8 = tag2.AppliesToReports;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Tag tag10 = tag2.setKey("MaxDuration");
        java.lang.String str11 = tag10.UniqueId;
        org.junit.Assert.assertNotNull(tag2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(boolean4);
        org.junit.Assert.assertNull(strList5);
        org.junit.Assert.assertNull(boolean8);
        org.junit.Assert.assertNotNull(tag10);
        org.junit.Assert.assertNull(str11);
    }

    @Test
    public void test53378() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest106.test53378");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeChannelMeasurement dischargeChannelMeasurement0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeChannelMeasurement();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ChannelMaterialType channelMaterialType1 = dischargeChannelMeasurement0.getChannelMaterial();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay2 = dischargeChannelMeasurement0.Discharge;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeChannelMeasurement dischargeChannelMeasurement3 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeChannelMeasurement();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ChannelMaterialType channelMaterialType4 = dischargeChannelMeasurement3.getChannelMaterial();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ChannelEvennessType channelEvennessType5 = dischargeChannelMeasurement3.getChannelEvenness();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeChannelMeasurement dischargeChannelMeasurement6 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeChannelMeasurement();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ChannelMaterialType channelMaterialType7 = dischargeChannelMeasurement6.getChannelMaterial();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ChannelEvennessType channelEvennessType8 = dischargeChannelMeasurement6.getChannelEvenness();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VelocityVariationType velocityVariationType9 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VelocityVariationType.Unknown;
        dischargeChannelMeasurement6.VelocityVariation = velocityVariationType9;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeChannelMeasurement dischargeChannelMeasurement11 = dischargeChannelMeasurement3.setVelocityVariation(velocityVariationType9);
        dischargeChannelMeasurement0.VelocityVariation = velocityVariationType9;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ChannelEvennessType channelEvennessType13 = dischargeChannelMeasurement0.ChannelEvenness;
        java.time.Instant instant14 = dischargeChannelMeasurement0.EndTime;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CurrentMeterType currentMeterType15 = dischargeChannelMeasurement0.getCurrentMeter();
        dischargeChannelMeasurement0.MonitoringMethod = "multipart/form-data; boundary=****9dca3c57-4d61-4929-84c6-58c5a7f24542****";
        org.junit.Assert.assertNull(channelMaterialType1);
        org.junit.Assert.assertNull(quantityWithDisplay2);
        org.junit.Assert.assertNull(channelMaterialType4);
        org.junit.Assert.assertNull(channelEvennessType5);
        org.junit.Assert.assertNull(channelMaterialType7);
        org.junit.Assert.assertNull(channelEvennessType8);
        org.junit.Assert.assertTrue("'" + velocityVariationType9 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VelocityVariationType.Unknown + "'", velocityVariationType9.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VelocityVariationType.Unknown));
        org.junit.Assert.assertNotNull(dischargeChannelMeasurement11);
        org.junit.Assert.assertNull(channelEvennessType13);
        org.junit.Assert.assertNull(instant14);
        org.junit.Assert.assertNull(currentMeterType15);
    }

    @Test
    public void test53379() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest106.test53379");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostLocationDatumPeriod postLocationDatumPeriod0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostLocationDatumPeriod();
        java.lang.String str1 = postLocationDatumPeriod0.getStandardIdentifier();
        java.lang.String str2 = postLocationDatumPeriod0.LocationUniqueId;
        postLocationDatumPeriod0.LocationUniqueId = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSSSSSZZZZZ";
        java.lang.Object obj5 = postLocationDatumPeriod0.getResponseType();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning$LocationDatumResponse");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning$LocationDatumResponse");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning$LocationDatumResponse");
    }

    @Test
    public void test53380() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest106.test53380");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ParameterMetadata parameterMetadata0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ParameterMetadata();
        parameterMetadata0.RoundingSpec = "";
        java.lang.String str3 = parameterMetadata0.getUnitGroupIdentifier();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ParameterMetadata parameterMetadata5 = parameterMetadata0.setUnitGroupIdentifier("yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ");
        java.lang.String str6 = parameterMetadata5.getRoundingSpec();
        java.lang.String str7 = parameterMetadata5.DisplayName;
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(parameterMetadata5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNull(str7);
    }

    @Test
    public void test53381() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest106.test53381");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutTimeSeries putTimeSeries0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutTimeSeries();
        java.lang.Boolean boolean1 = putTimeSeries0.Publish;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutTimeSeries putTimeSeries3 = putTimeSeries0.setDescription("multipart/form-data; boundary=****62091923-30fa-4226-b8ee-0dcb69731847****");
        org.junit.Assert.assertNull(boolean1);
        org.junit.Assert.assertNotNull(putTimeSeries3);
    }

    @Test
    public void test53382() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest106.test53382");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetLabReportImportHistoryEvents getLabReportImportHistoryEvents0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetLabReportImportHistoryEvents();
        java.lang.String str1 = getLabReportImportHistoryEvents0.getCursor();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DeleteFieldVisits deleteFieldVisits2 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DeleteFieldVisits();
        java.lang.String str3 = deleteFieldVisits2.Sort;
        deleteFieldVisits2.Sort = "9999-12-31T23:59:59.999Z";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_6 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray9 = new java.lang.String[] { "", "" };
        java.util.ArrayList<java.lang.String> strList10 = new java.util.ArrayList<java.lang.String>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList10, strArray9);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_12 = getObservationsV2_6.setDataClassifications((java.util.List<java.lang.String>) strList10);
        java.util.List<java.lang.String> strList13 = getObservationsV2_6.ResultGrades;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary14 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        dischargeSummary14.Reviewer = "";
        java.time.Instant instant17 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        dischargeSummary14.MeasurementTime = instant17;
        getObservationsV2_6.StartResultTime = instant17;
        java.lang.String[] strArray29 = new java.lang.String[] { "https", "/AQUARIUS/Provisioning/v1", "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ", "2021.4.62.0", "hi!", "2021.4.62.0", "2021.4.62.0", "/AQUARIUS/Acquisition/v2", "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ" };
        java.util.ArrayList<java.lang.String> strList30 = new java.util.ArrayList<java.lang.String>();
        boolean boolean31 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList30, strArray29);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_32 = getObservationsV2_6.setAnalyticalGroupIds((java.util.List<java.lang.String>) strList30);
        deleteFieldVisits2.PlanningStatuses = strList30;
        getLabReportImportHistoryEvents0.LabReportIds = strList30;
        java.util.List<java.lang.String> strList35 = getLabReportImportHistoryEvents0.getLabReportIds();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetLabReportImportHistoryEvents getLabReportImportHistoryEvents37 = getLabReportImportHistoryEvents0.setCursor("multipart/form-data; boundary=****f2ce0d54-dac7-4cd0-b74f-1024089261f9****");
        java.lang.String str38 = getLabReportImportHistoryEvents37.getCursor();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(getObservationsV2_12);
        org.junit.Assert.assertNull(strList13);
        org.junit.Assert.assertNotNull(instant17);
        org.junit.Assert.assertNotNull(strArray29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(getObservationsV2_32);
        org.junit.Assert.assertNotNull(strList35);
        org.junit.Assert.assertNotNull(getLabReportImportHistoryEvents37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "multipart/form-data; boundary=****f2ce0d54-dac7-4cd0-b74f-1024089261f9****" + "'", str38, "multipart/form-data; boundary=****f2ce0d54-dac7-4cd0-b74f-1024089261f9****");
    }

    @Test
    public void test53383() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest106.test53383");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.GapToleranceOperation gapToleranceOperation0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.GapToleranceOperation();
        java.lang.String str1 = gapToleranceOperation0.getComments();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeOperationType metadataChangeOperationType2 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeOperationType.Deletion;
        gapToleranceOperation0.OperationType = metadataChangeOperationType2;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeOperationType metadataChangeOperationType4 = gapToleranceOperation0.OperationType;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.GapTolerance gapTolerance6 = gapToleranceOperation0.setToleranceInMinutes((java.lang.Double) 1.0d);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.GapToleranceOperation gapToleranceOperation8 = gapToleranceOperation0.setUser("http://MaxDurationhttp/json/reply/Float://multipart/form-data; boundary=****231224c4-98ce-4e30-bd65-1d25287c4abe****");
        java.lang.String str9 = gapToleranceOperation0.User;
        gapToleranceOperation0.StackPosition = 0;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + metadataChangeOperationType2 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeOperationType.Deletion + "'", metadataChangeOperationType2.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeOperationType.Deletion));
        org.junit.Assert.assertTrue("'" + metadataChangeOperationType4 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeOperationType.Deletion + "'", metadataChangeOperationType4.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeOperationType.Deletion));
        org.junit.Assert.assertNotNull(gapTolerance6);
        org.junit.Assert.assertNotNull(gapToleranceOperation8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "http://MaxDurationhttp/json/reply/Float://multipart/form-data; boundary=****231224c4-98ce-4e30-bd65-1d25287c4abe****" + "'", str9, "http://MaxDurationhttp/json/reply/Float://multipart/form-data; boundary=****231224c4-98ce-4e30-bd65-1d25287c4abe****");
    }

    @Test
    public void test53384() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest106.test53384");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DeleteUser deleteUser0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DeleteUser();
        deleteUser0.Id = "****c052e2e0-9b0e-4df2-9a74-52850b5df85a****";
    }

    @Test
    public void test53385() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest106.test53385");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Reading reading0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Reading();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay1 = reading0.getValue();
        reading0.ReferencePointUniqueId = "hi!";
        java.lang.String str4 = reading0.Parameter;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary5 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary7 = dischargeSummary5.setPublish((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay8 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay();
        dischargeSummary7.DifferenceDuringVisit = doubleWithDisplay8;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay11 = doubleWithDisplay8.setNumeric((java.lang.Double) 100.0d);
        reading0.Value = doubleWithDisplay11;
        java.lang.Boolean boolean13 = reading0.isPublish();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Reading reading15 = reading0.setParameterId("/AQUARIUS/Acquisition/v2://9999-12-31T23:59:59.999Z");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ReadingType readingType16 = reading15.ReadingType;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Reading reading18 = reading15.setParameterId("'.'SSSSSSS");
        reading18.Publish = false;
        java.lang.String str21 = reading18.getModel();
        java.lang.String str22 = reading18.getNodeDetails();
        org.junit.Assert.assertNull(doubleWithDisplay1);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNotNull(dischargeSummary7);
        org.junit.Assert.assertNotNull(doubleWithDisplay11);
        org.junit.Assert.assertNull(boolean13);
        org.junit.Assert.assertNotNull(reading15);
        org.junit.Assert.assertNull(readingType16);
        org.junit.Assert.assertNotNull(reading18);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNull(str22);
    }

    @Test
    public void test53386() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest106.test53386");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutBulkEditResultGradesV2 putBulkEditResultGradesV2_0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutBulkEditResultGradesV2();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_1 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String str2 = getObservationsV2_1.getCustomId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_3 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray5 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList6 = new java.util.ArrayList<java.lang.String>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList6, strArray5);
        getObservationsV2_3.SpecimenIds = strList6;
        getObservationsV2_1.ProjectIds = strList6;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutBulkEditResultGradesV2 putBulkEditResultGradesV2_10 = putBulkEditResultGradesV2_0.setTaxonIds((java.util.List<java.lang.String>) strList6);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutBulkEditResultGradesV2 putBulkEditResultGradesV2_12 = putBulkEditResultGradesV2_0.setActivityCustomId("");
        java.lang.String str13 = putBulkEditResultGradesV2_12.ActivityCustomId;
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(putBulkEditResultGradesV2_10);
        org.junit.Assert.assertNotNull(putBulkEditResultGradesV2_12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
    }

    @Test
    public void test53387() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest106.test53387");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationMinimal observationMinimal0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationMinimal();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty observedProperty1 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationMinimal observationMinimal2 = observationMinimal0.setObservedProperty(observedProperty1);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultStatus resultStatus3 = observationMinimal2.getResultStatus();
        java.time.OffsetDateTime offsetDateTime4 = null;
        observationMinimal2.ResultTime = offsetDateTime4;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultStatus resultStatus6 = observationMinimal2.ResultStatus;
        java.time.OffsetDateTime offsetDateTime7 = observationMinimal2.getResultTime();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.CategoricalResult categoricalResult8 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.CategoricalResult();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.CategoricalValue categoricalValue9 = categoricalResult8.getFixedValue();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.CategoricalResult categoricalResult11 = categoricalResult8.setType("hi!");
        java.lang.String str12 = categoricalResult8.Value;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.CategoricalValue categoricalValue13 = null;
        categoricalResult8.FixedValue = categoricalValue13;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationMinimal observationMinimal15 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationMinimal();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty observedProperty16 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationMinimal observationMinimal17 = observationMinimal15.setObservedProperty(observedProperty16);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.CategoricalResult categoricalResult18 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.CategoricalResult();
        categoricalResult18.Value = "'.'SSSSSSS";
        observationMinimal17.CategoricalResult = categoricalResult18;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.NullMeasureQualifier nullMeasureQualifier22 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.NullMeasureQualifier();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes23 = nullMeasureQualifier22.AuditAttributes;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSchedule putSchedule24 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSchedule();
        java.time.OffsetDateTime offsetDateTime25 = putSchedule24.StartDate;
        java.time.OffsetDateTime offsetDateTime26 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSchedule putSchedule27 = putSchedule24.setEndDate(offsetDateTime26);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes28 = putSchedule27.AuditAttributes;
        java.time.OffsetDateTime offsetDateTime29 = putSchedule27.getEndDate();
        java.time.OffsetDateTime offsetDateTime30 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSchedule putSchedule31 = putSchedule27.setStartDate(offsetDateTime30);
        java.lang.Integer int32 = putSchedule27.SamplingLocationGroupSelectionTypeRandomCount;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.RecurrenceDayMonthlyType recurrenceDayMonthlyType33 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.RecurrenceDayMonthlyType.LAST_DAY_OF_MONTH;
        putSchedule27.RecurrenceDayMonthly = recurrenceDayMonthlyType33;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Unit unit35 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Unit();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes36 = unit35.AuditAttributes;
        unit35.BaseMultiplier = 0.0d;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutAccessGroup putAccessGroup39 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutAccessGroup();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivity samplingPlanPlannedActivity40 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivity();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes41 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivity samplingPlanPlannedActivity42 = samplingPlanPlannedActivity40.setAuditAttributes(auditAttributes41);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes43 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes45 = auditAttributes43.setCreationUserProfileId("'.'SSSSSSS");
        samplingPlanPlannedActivity42.AuditAttributes = auditAttributes43;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes47 = samplingPlanPlannedActivity42.AuditAttributes;
        putAccessGroup39.AuditAttributes = auditAttributes47;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Unit unit49 = unit35.setAuditAttributes(auditAttributes47);
        putSchedule27.AuditAttributes = auditAttributes47;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.NullMeasureQualifier nullMeasureQualifier51 = nullMeasureQualifier22.setAuditAttributes(auditAttributes47);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.CategoricalResult categoricalResult52 = categoricalResult18.setNullMeasureQualifier(nullMeasureQualifier51);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.CategoricalResult categoricalResult53 = categoricalResult8.setNullMeasureQualifier(nullMeasureQualifier51);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationMinimal observationMinimal54 = observationMinimal2.setCategoricalResult(categoricalResult53);
        org.junit.Assert.assertNotNull(observationMinimal2);
        org.junit.Assert.assertNull(resultStatus3);
        org.junit.Assert.assertNull(resultStatus6);
        org.junit.Assert.assertNull(offsetDateTime7);
        org.junit.Assert.assertNull(categoricalValue9);
        org.junit.Assert.assertNotNull(categoricalResult11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(observationMinimal17);
        org.junit.Assert.assertNull(auditAttributes23);
        org.junit.Assert.assertNull(offsetDateTime25);
        org.junit.Assert.assertNotNull(putSchedule27);
        org.junit.Assert.assertNull(auditAttributes28);
        org.junit.Assert.assertNull(offsetDateTime29);
        org.junit.Assert.assertNotNull(putSchedule31);
        org.junit.Assert.assertNull(int32);
        org.junit.Assert.assertTrue("'" + recurrenceDayMonthlyType33 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.RecurrenceDayMonthlyType.LAST_DAY_OF_MONTH + "'", recurrenceDayMonthlyType33.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.RecurrenceDayMonthlyType.LAST_DAY_OF_MONTH));
        org.junit.Assert.assertNull(auditAttributes36);
        org.junit.Assert.assertNotNull(samplingPlanPlannedActivity42);
        org.junit.Assert.assertNotNull(auditAttributes45);
        org.junit.Assert.assertNotNull(auditAttributes47);
        org.junit.Assert.assertNotNull(unit49);
        org.junit.Assert.assertNotNull(nullMeasureQualifier51);
        org.junit.Assert.assertNotNull(categoricalResult52);
        org.junit.Assert.assertNotNull(categoricalResult53);
        org.junit.Assert.assertNotNull(observationMinimal54);
    }

    @Test
    public void test53388() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest106.test53388");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSamplingLocationGroup putSamplingLocationGroup0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSamplingLocationGroup();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LocationGroupType locationGroupType1 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LocationGroupType();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes2 = locationGroupType1.getAuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LocationGroupType locationGroupType4 = locationGroupType1.setCustomId("yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ");
        putSamplingLocationGroup0.LocationGroupType = locationGroupType1;
        java.lang.String str6 = putSamplingLocationGroup0.Id;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LocationGroupType locationGroupType7 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LocationGroupType();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes8 = locationGroupType7.getAuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LocationGroupType locationGroupType10 = locationGroupType7.setCustomId("yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes11 = locationGroupType7.getAuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSamplingLocationGroup putSamplingLocationGroup12 = putSamplingLocationGroup0.setLocationGroupType(locationGroupType7);
        java.lang.Object obj13 = putSamplingLocationGroup12.getResponseType();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LocationGroupType locationGroupType14 = putSamplingLocationGroup12.LocationGroupType;
        org.junit.Assert.assertNull(auditAttributes2);
        org.junit.Assert.assertNotNull(locationGroupType4);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(auditAttributes8);
        org.junit.Assert.assertNotNull(locationGroupType10);
        org.junit.Assert.assertNull(auditAttributes11);
        org.junit.Assert.assertNotNull(putSamplingLocationGroup12);
        org.junit.Assert.assertNotNull(obj13);
        org.junit.Assert.assertEquals(obj13.toString(), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$SamplingLocationGroup");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj13), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$SamplingLocationGroup");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj13), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$SamplingLocationGroup");
        org.junit.Assert.assertNotNull(locationGroupType14);
    }

    @Test
    public void test53389() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest106.test53389");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationSimple samplingLocationSimple0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationSimple();
        java.lang.String str1 = samplingLocationSimple0.Name;
        java.lang.String str2 = samplingLocationSimple0.Name;
        samplingLocationSimple0.CustomId = "MinInstant";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationSimple samplingLocationSimple6 = samplingLocationSimple0.setName("");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationSimple samplingLocationSimple8 = samplingLocationSimple0.setId("multipart/form-data; boundary=****a54f0925-41ba-40d4-82e5-209be7037efb****");
        java.lang.String str9 = samplingLocationSimple0.getCustomId();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNotNull(samplingLocationSimple6);
        org.junit.Assert.assertNotNull(samplingLocationSimple8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "MinInstant" + "'", str9, "MinInstant");
    }

    @Test
    public void test53390() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest106.test53390");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeTransaction metadataChangeTransaction0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeTransaction();
        java.util.List<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.GapToleranceOperation> gapToleranceOperationList1 = metadataChangeTransaction0.GapToleranceOperations;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.NoteOperation noteOperation2 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.NoteOperation();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeOperationType metadataChangeOperationType3 = noteOperation2.OperationType;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.NoteOperation noteOperation4 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.NoteOperation();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeOperationType metadataChangeOperationType5 = noteOperation4.OperationType;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.NoteOperation[] noteOperationArray6 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.NoteOperation[] { noteOperation2, noteOperation4 };
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.NoteOperation> noteOperationList7 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.NoteOperation>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.NoteOperation>) noteOperationList7, noteOperationArray6);
        metadataChangeTransaction0.NoteOperations = noteOperationList7;
        java.util.List<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MethodOperation> methodOperationList10 = metadataChangeTransaction0.getMethodOperations();
        java.util.List<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.GapToleranceOperation> gapToleranceOperationList11 = metadataChangeTransaction0.GapToleranceOperations;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeTransaction metadataChangeTransaction12 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeTransaction();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeTransaction metadataChangeTransaction13 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeTransaction();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CorrectionOperation correctionOperation14 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CorrectionOperation();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CorrectionType correctionType15 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CorrectionType.AdjustableTrim;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CorrectionOperation correctionOperation16 = correctionOperation14.setType(correctionType15);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeOperationType metadataChangeOperationType17 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeOperationType.Creation;
        correctionOperation14.OperationType = metadataChangeOperationType17;
        java.time.Instant instant19 = null;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CorrectionOperation correctionOperation20 = correctionOperation14.setDateAppliedUtc(instant19);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MethodOperation methodOperation21 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MethodOperation();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeOperationType metadataChangeOperationType22 = methodOperation21.getOperationType();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeOperationType metadataChangeOperationType23 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeOperationType.Creation;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MethodOperation methodOperation24 = methodOperation21.setOperationType(metadataChangeOperationType23);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CorrectionOperation correctionOperation25 = correctionOperation20.setOperationType(metadataChangeOperationType23);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CorrectionOperation correctionOperation26 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CorrectionOperation();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CorrectionType correctionType27 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CorrectionType.AdjustableTrim;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CorrectionOperation correctionOperation28 = correctionOperation26.setType(correctionType27);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeOperationType metadataChangeOperationType29 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeOperationType.Creation;
        correctionOperation26.OperationType = metadataChangeOperationType29;
        java.time.Instant instant31 = null;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CorrectionOperation correctionOperation32 = correctionOperation26.setDateAppliedUtc(instant31);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MethodOperation methodOperation33 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MethodOperation();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeOperationType metadataChangeOperationType34 = methodOperation33.getOperationType();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeOperationType metadataChangeOperationType35 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeOperationType.Creation;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MethodOperation methodOperation36 = methodOperation33.setOperationType(metadataChangeOperationType35);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CorrectionOperation correctionOperation37 = correctionOperation32.setOperationType(metadataChangeOperationType35);
        correctionOperation20.OperationType = metadataChangeOperationType35;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TrendLineAnalysisServiceRequest trendLineAnalysisServiceRequest39 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TrendLineAnalysisServiceRequest();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TrendLineAnalysisType trendLineAnalysisType40 = trendLineAnalysisServiceRequest39.getType();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationRemark locationRemark41 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationRemark();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationRemark locationRemark43 = locationRemark41.setDescription("MaxInstant");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse44 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant45 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse46 = locationDescriptionListServiceResponse44.setNextToken(instant45);
        locationRemark43.FromTime = instant45;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationRemark locationRemark49 = locationRemark43.setRemark("/AQUARIUS/Acquisition/v2");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesThresholdPeriod timeSeriesThresholdPeriod50 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesThresholdPeriod();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesThresholdPeriod timeSeriesThresholdPeriod52 = timeSeriesThresholdPeriod50.setReferenceValue((java.lang.Double) 0.0d);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescription locationDescription53 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescription();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescription locationDescription55 = locationDescription53.setIdentifier("");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ControlConditionActivity controlConditionActivity56 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ControlConditionActivity();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ControlCleanedType controlCleanedType57 = null;
        controlConditionActivity56.ControlCleaned = controlCleanedType57;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse59 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant60 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse61 = locationDescriptionListServiceResponse59.setNextToken(instant60);
        controlConditionActivity56.DateCleaned = instant60;
        locationDescription55.LastModified = instant60;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesThresholdPeriod timeSeriesThresholdPeriod64 = timeSeriesThresholdPeriod52.setAppliedTime(instant60);
        locationRemark49.ToTime = instant60;
        trendLineAnalysisServiceRequest39.QueryFrom = instant60;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CorrectionOperation correctionOperation67 = correctionOperation20.setDateAppliedUtc(instant60);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CorrectionOperation[] correctionOperationArray68 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CorrectionOperation[] { correctionOperation67 };
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CorrectionOperation> correctionOperationList69 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CorrectionOperation>();
        boolean boolean70 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CorrectionOperation>) correctionOperationList69, correctionOperationArray68);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeTransaction metadataChangeTransaction71 = metadataChangeTransaction13.setCorrectionOperations((java.util.List<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CorrectionOperation>) correctionOperationList69);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeTransaction metadataChangeTransaction72 = metadataChangeTransaction12.setCorrectionOperations((java.util.List<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CorrectionOperation>) correctionOperationList69);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.GradeOperation gradeOperation73 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.GradeOperation();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeOperationType metadataChangeOperationType74 = gradeOperation73.getOperationType();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.GradeOperation gradeOperation75 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.GradeOperation();
        java.lang.Integer int76 = gradeOperation75.StackPosition;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.GradeOperation[] gradeOperationArray77 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.GradeOperation[] { gradeOperation73, gradeOperation75 };
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.GradeOperation> gradeOperationList78 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.GradeOperation>();
        boolean boolean79 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.GradeOperation>) gradeOperationList78, gradeOperationArray77);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeTransaction metadataChangeTransaction80 = metadataChangeTransaction12.setGradeOperations((java.util.List<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.GradeOperation>) gradeOperationList78);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeTransaction metadataChangeTransaction81 = metadataChangeTransaction0.setGradeOperations((java.util.List<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.GradeOperation>) gradeOperationList78);
        java.util.List<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QualifierOperation> qualifierOperationList82 = metadataChangeTransaction0.getQualifierOperations();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeContentType metadataChangeContentType83 = metadataChangeTransaction0.getContentType();
        java.time.Instant instant84 = metadataChangeTransaction0.AppliedTime;
        org.junit.Assert.assertNull(gapToleranceOperationList1);
        org.junit.Assert.assertNull(metadataChangeOperationType3);
        org.junit.Assert.assertNull(metadataChangeOperationType5);
        org.junit.Assert.assertNotNull(noteOperationArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNull(methodOperationList10);
        org.junit.Assert.assertNull(gapToleranceOperationList11);
        org.junit.Assert.assertTrue("'" + correctionType15 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CorrectionType.AdjustableTrim + "'", correctionType15.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CorrectionType.AdjustableTrim));
        org.junit.Assert.assertNotNull(correctionOperation16);
        org.junit.Assert.assertTrue("'" + metadataChangeOperationType17 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeOperationType.Creation + "'", metadataChangeOperationType17.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeOperationType.Creation));
        org.junit.Assert.assertNotNull(correctionOperation20);
        org.junit.Assert.assertNull(metadataChangeOperationType22);
        org.junit.Assert.assertTrue("'" + metadataChangeOperationType23 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeOperationType.Creation + "'", metadataChangeOperationType23.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeOperationType.Creation));
        org.junit.Assert.assertNotNull(methodOperation24);
        org.junit.Assert.assertNotNull(correctionOperation25);
        org.junit.Assert.assertTrue("'" + correctionType27 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CorrectionType.AdjustableTrim + "'", correctionType27.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CorrectionType.AdjustableTrim));
        org.junit.Assert.assertNotNull(correctionOperation28);
        org.junit.Assert.assertTrue("'" + metadataChangeOperationType29 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeOperationType.Creation + "'", metadataChangeOperationType29.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeOperationType.Creation));
        org.junit.Assert.assertNotNull(correctionOperation32);
        org.junit.Assert.assertNull(metadataChangeOperationType34);
        org.junit.Assert.assertTrue("'" + metadataChangeOperationType35 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeOperationType.Creation + "'", metadataChangeOperationType35.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeOperationType.Creation));
        org.junit.Assert.assertNotNull(methodOperation36);
        org.junit.Assert.assertNotNull(correctionOperation37);
        org.junit.Assert.assertNull(trendLineAnalysisType40);
        org.junit.Assert.assertNotNull(locationRemark43);
        org.junit.Assert.assertNotNull(instant45);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse46);
        org.junit.Assert.assertNotNull(locationRemark49);
        org.junit.Assert.assertNotNull(timeSeriesThresholdPeriod52);
        org.junit.Assert.assertNotNull(locationDescription55);
        org.junit.Assert.assertNotNull(instant60);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse61);
        org.junit.Assert.assertNotNull(timeSeriesThresholdPeriod64);
        org.junit.Assert.assertNotNull(correctionOperation67);
        org.junit.Assert.assertNotNull(correctionOperationArray68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertNotNull(metadataChangeTransaction71);
        org.junit.Assert.assertNotNull(metadataChangeTransaction72);
        org.junit.Assert.assertNull(metadataChangeOperationType74);
        org.junit.Assert.assertNull(int76);
        org.junit.Assert.assertNotNull(gradeOperationArray77);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
        org.junit.Assert.assertNotNull(metadataChangeTransaction80);
        org.junit.Assert.assertNotNull(metadataChangeTransaction81);
        org.junit.Assert.assertNull(qualifierOperationList82);
        org.junit.Assert.assertNull(metadataChangeContentType83);
        org.junit.Assert.assertNull(instant84);
    }

    @Test
    public void test53391() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest106.test53391");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Correction correction0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Correction();
        java.time.Instant instant1 = correction0.getStartTime();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CorrectionType correctionType2 = correction0.Type;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CorrectionType correctionType3 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CorrectionType.Resample;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Correction correction4 = correction0.setType(correctionType3);
        org.junit.Assert.assertNull(instant1);
        org.junit.Assert.assertNull(correctionType2);
        org.junit.Assert.assertTrue("'" + correctionType3 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CorrectionType.Resample + "'", correctionType3.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CorrectionType.Resample));
        org.junit.Assert.assertNotNull(correction4);
    }

    @Test
    public void test53392() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest106.test53392");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationExportIIV2 getObservationExportIIV2_0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationExportIIV2();
        java.util.List<java.lang.String> strList1 = getObservationExportIIV2_0.getCollectionMethodIds();
        java.util.List<java.lang.String> strList2 = getObservationExportIIV2_0.AnalyticalGroupIds;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationExportIIV2 getObservationExportIIV2_4 = getObservationExportIIV2_0.setNumericResultValue((java.lang.Double) 0.0d);
        java.util.List<java.lang.String> strList5 = null;
        getObservationExportIIV2_4.ResultStatuses = strList5;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationExportIIV2 getObservationExportIIV2_8 = getObservationExportIIV2_4.setFieldVisitId("http://MaxDurationhttp/json/reply/ArrayList");
        getObservationExportIIV2_4.SpecimenName = "http://MaxDurationhttp/json/reply/String";
        org.junit.Assert.assertNull(strList1);
        org.junit.Assert.assertNull(strList2);
        org.junit.Assert.assertNotNull(getObservationExportIIV2_4);
        org.junit.Assert.assertNotNull(getObservationExportIIV2_8);
    }

    @Test
    public void test53393() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest106.test53393");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostBaseStandardReferenceDatumOffset postBaseStandardReferenceDatumOffset0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostBaseStandardReferenceDatumOffset();
        postBaseStandardReferenceDatumOffset0.LocationUniqueId = "http";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostBaseStandardReferenceDatumOffset postBaseStandardReferenceDatumOffset4 = postBaseStandardReferenceDatumOffset0.setMethod("multipart/form-data; boundary=****44f0772e-c3ca-4316-8e2a-61ec8540d661****");
        java.lang.String str5 = postBaseStandardReferenceDatumOffset4.getLocationUniqueId();
        org.junit.Assert.assertNotNull(postBaseStandardReferenceDatumOffset4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "http" + "'", str5, "http");
    }

    @Test
    public void test53394() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest106.test53394");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostDatumConvertedTimeSeries postDatumConvertedTimeSeries0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostDatumConvertedTimeSeries();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostDatumConvertedTimeSeries postDatumConvertedTimeSeries2 = postDatumConvertedTimeSeries0.setDescription("yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ");
        postDatumConvertedTimeSeries0.Publish = false;
        java.lang.String str5 = postDatumConvertedTimeSeries0.getComment();
        java.lang.String str6 = postDatumConvertedTimeSeries0.getDescription();
        java.lang.String str7 = postDatumConvertedTimeSeries0.Parameter;
        java.lang.String str8 = postDatumConvertedTimeSeries0.getComment();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostDatumConvertedTimeSeries postDatumConvertedTimeSeries10 = postDatumConvertedTimeSeries0.setLocationUniqueId("'.'SSSSSSS");
        java.lang.String str11 = postDatumConvertedTimeSeries10.getComputationPeriodIdentifier();
        java.lang.String str12 = postDatumConvertedTimeSeries10.getLabel();
        org.junit.Assert.assertNotNull(postDatumConvertedTimeSeries2);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ" + "'", str6, "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ");
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(postDatumConvertedTimeSeries10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNull(str12);
    }

    @Test
    public void test53395() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest106.test53395");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricResult metricResult0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricResult();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExtendedAttributeDropdownlistitems getExtendedAttributeDropdownlistitems1 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExtendedAttributeDropdownlistitems();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_2 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.util.List<java.lang.String> strList3 = getObservationsV2_2.SamplingContextTagIds;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_4 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray6 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList7 = new java.util.ArrayList<java.lang.String>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList7, strArray6);
        getObservationsV2_4.SpecimenIds = strList7;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags10 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray14 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList15 = new java.util.ArrayList<java.lang.String>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList15, strArray14);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags17 = putLocationTags10.setTagUniqueIds(strList15);
        getObservationsV2_4.QualityControlTypes = strList15;
        getObservationsV2_2.ResultGrades = strList15;
        getExtendedAttributeDropdownlistitems1.Search = strList15;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricResult metricResult21 = metricResult0.setMatchedObservations((java.util.List<java.lang.String>) strList15);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricResult metricResult23 = metricResult21.setOverriddenByUser((java.lang.Boolean) false);
        java.util.List<java.lang.String> strList24 = metricResult21.MatchedObservations;
        java.util.List<java.lang.String> strList25 = metricResult21.MatchedObservations;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricConfiguration metricConfiguration26 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricConfiguration();
        java.lang.String str27 = metricConfiguration26.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty observedProperty28 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty();
        observedProperty28.CasNumber = "MinDuration";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricConfiguration metricConfiguration31 = metricConfiguration26.setObservedProperty(observedProperty28);
        java.lang.String str32 = metricConfiguration31.getDescription();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricConfiguration metricConfiguration34 = metricConfiguration31.setId("yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSSSSSZZZZZ");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricConfiguration metricConfiguration36 = metricConfiguration34.setId("/AQUARIUS/Provisioning/v1");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricResult metricResult37 = metricResult21.setMetricConfiguration(metricConfiguration36);
        java.lang.String str38 = metricResult37.Id;
        org.junit.Assert.assertNull(strList3);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(putLocationTags17);
        org.junit.Assert.assertNotNull(metricResult21);
        org.junit.Assert.assertNotNull(metricResult23);
        org.junit.Assert.assertNotNull(strList24);
        org.junit.Assert.assertNotNull(strList25);
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertNotNull(metricConfiguration31);
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertNotNull(metricConfiguration34);
        org.junit.Assert.assertNotNull(metricConfiguration36);
        org.junit.Assert.assertNotNull(metricResult37);
        org.junit.Assert.assertNull(str38);
    }

    @Test
    public void test53396() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest106.test53396");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutUnit putUnit0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutUnit();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutUnit putUnit2 = putUnit0.setId("9999-12-31T23:59:59.999Z");
        java.lang.Object obj3 = putUnit0.getResponseType();
        java.lang.String str4 = putUnit0.getCustomId();
        org.junit.Assert.assertNotNull(putUnit2);
        org.junit.Assert.assertNotNull(obj3);
        org.junit.Assert.assertEquals(obj3.toString(), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$Unit");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj3), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$Unit");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj3), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$Unit");
        org.junit.Assert.assertNull(str4);
    }

    @Test
    public void test53397() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest106.test53397");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PopulatedUnitGroup populatedUnitGroup0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PopulatedUnitGroup();
        java.lang.String str1 = populatedUnitGroup0.UniqueId;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.UnitGroup unitGroup3 = populatedUnitGroup0.setDisplayName("https");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.UnitGroup unitGroup5 = unitGroup3.setUniqueId("yyyy'-'MM'-'dd'T'HH':'mm':'ss");
        java.lang.Integer int6 = unitGroup3.getMassDimension();
        unitGroup3.UniqueId = "http";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.UnitGroup unitGroup10 = unitGroup3.setGroupIdentifier("MaxInstant");
        java.lang.Integer int11 = unitGroup10.TimeDimension;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(unitGroup3);
        org.junit.Assert.assertNotNull(unitGroup5);
        org.junit.Assert.assertNull(int6);
        org.junit.Assert.assertNotNull(unitGroup10);
        org.junit.Assert.assertNull(int11);
    }

    @Test
    public void test53398() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest106.test53398");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Role role0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Role();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Role role2 = role0.setCanRemoveAppendConfigurations((java.lang.Boolean) true);
        java.lang.String str3 = role2.Name;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Role role5 = role2.setCanRemoveFieldVisits((java.lang.Boolean) false);
        java.lang.Boolean boolean6 = role2.CanRemoveAppendConfigurations;
        java.lang.Boolean boolean7 = role2.isCanEditLocationDetails();
        org.junit.Assert.assertNotNull(role2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(role5);
        org.junit.Assert.assertEquals("'" + boolean6 + "' != '" + true + "'", boolean6, true);
        org.junit.Assert.assertNull(boolean7);
    }

    @Test
    public void test53399() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest106.test53399");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DeleteObservationsV2 deleteObservationsV2_0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DeleteObservationsV2();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetChartDataV2 getChartDataV2_1 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetChartDataV2();
        java.lang.String str2 = getChartDataV2_1.getActivityCustomId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetChartDataV2 getChartDataV2_4 = getChartDataV2_1.setFilterId("");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetChartDataV2 getChartDataV2_6 = getChartDataV2_4.setMinNumericResultValue((java.lang.Double) 1.0d);
        java.util.List<java.lang.String> strList7 = getChartDataV2_6.getSpecimenIds();
        java.time.Instant instant8 = getChartDataV2_6.EndObservedTime;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetSpecimens getSpecimens9 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetSpecimens();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutUserV2 putUserV2_10 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutUserV2();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UserType userType11 = putUserV2_10.UserType;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetActivities getActivities12 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetActivities();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse13 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary14 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary16 = dischargeSummary14.setPublish((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse17 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant18 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse19 = locationDescriptionListServiceResponse17.setNextToken(instant18);
        dischargeSummary14.MeasurementTime = instant18;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse21 = locationDescriptionListServiceResponse13.setNextToken(instant18);
        java.time.Instant instant22 = locationDescriptionListServiceResponse13.getNextToken();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetActivities getActivities23 = getActivities12.setToStartTime(instant22);
        java.lang.String str24 = getActivities23.getSort();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_25 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.util.List<java.lang.String> strList26 = getObservationsV2_25.SamplingContextTagIds;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_27 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray29 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList30 = new java.util.ArrayList<java.lang.String>();
        boolean boolean31 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList30, strArray29);
        getObservationsV2_27.SpecimenIds = strList30;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags33 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray37 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList38 = new java.util.ArrayList<java.lang.String>();
        boolean boolean39 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList38, strArray37);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags40 = putLocationTags33.setTagUniqueIds(strList38);
        getObservationsV2_27.QualityControlTypes = strList38;
        getObservationsV2_25.ResultGrades = strList38;
        getActivities23.Media = strList38;
        putUserV2_10.AccessGroups = strList38;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetSpecimens getSpecimens45 = getSpecimens9.setSamplingLocationIds((java.util.List<java.lang.String>) strList38);
        getChartDataV2_6.LabResultLabAnalysisMethodIds = strList38;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutUser putUser47 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutUser();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_48 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray51 = new java.lang.String[] { "", "" };
        java.util.ArrayList<java.lang.String> strList52 = new java.util.ArrayList<java.lang.String>();
        boolean boolean53 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList52, strArray51);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_54 = getObservationsV2_48.setDataClassifications((java.util.List<java.lang.String>) strList52);
        getObservationsV2_54.DepthUnitCustomId = "hi!";
        java.lang.String str57 = getObservationsV2_54.DepthUnitId;
        java.util.List<java.lang.String> strList58 = getObservationsV2_54.LabResultLaboratoryIds;
        getObservationsV2_54.MaxNumericResultValue = (-1.0d);
        java.lang.Integer int61 = getObservationsV2_54.Limit;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest62 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_63 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray65 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList66 = new java.util.ArrayList<java.lang.String>();
        boolean boolean67 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList66, strArray65);
        getObservationsV2_63.SpecimenIds = strList66;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags69 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray73 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList74 = new java.util.ArrayList<java.lang.String>();
        boolean boolean75 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList74, strArray73);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags76 = putLocationTags69.setTagUniqueIds(strList74);
        getObservationsV2_63.QualityControlTypes = strList74;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest78 = timeAlignedDataServiceRequest62.setTimeSeriesUniqueIds(strList74);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_79 = getObservationsV2_54.setSamplingLocationIds((java.util.List<java.lang.String>) strList74);
        putUser47.Roles = strList74;
        getChartDataV2_6.AnalysisMethodSimpleIds = strList74;
        deleteObservationsV2_0.AnalyticalGroupIds = strList74;
        java.util.List<java.lang.String> strList83 = deleteObservationsV2_0.getSamplingContextTagIds();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DeleteObservationsV2 deleteObservationsV2_85 = deleteObservationsV2_0.setSort("multipart/form-data; boundary=****bbcf5f9e-6ccf-4b63-91ab-6e645caf02af****");
        java.util.List<java.lang.String> strList86 = deleteObservationsV2_0.LabResultLabAnalysisMethodIds;
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNotNull(getChartDataV2_4);
        org.junit.Assert.assertNotNull(getChartDataV2_6);
        org.junit.Assert.assertNull(strList7);
        org.junit.Assert.assertNull(instant8);
        org.junit.Assert.assertNull(userType11);
        org.junit.Assert.assertNotNull(dischargeSummary16);
        org.junit.Assert.assertNotNull(instant18);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse19);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse21);
        org.junit.Assert.assertNotNull(instant22);
        org.junit.Assert.assertNotNull(getActivities23);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNull(strList26);
        org.junit.Assert.assertNotNull(strArray29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(putLocationTags40);
        org.junit.Assert.assertNotNull(getSpecimens45);
        org.junit.Assert.assertNotNull(strArray51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(getObservationsV2_54);
        org.junit.Assert.assertNull(str57);
        org.junit.Assert.assertNull(strList58);
        org.junit.Assert.assertNull(int61);
        org.junit.Assert.assertNotNull(strArray65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertNotNull(strArray73);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertNotNull(putLocationTags76);
        org.junit.Assert.assertNotNull(timeAlignedDataServiceRequest78);
        org.junit.Assert.assertNotNull(getObservationsV2_79);
        org.junit.Assert.assertNull(strList83);
        org.junit.Assert.assertNotNull(deleteObservationsV2_85);
        org.junit.Assert.assertNull(strList86);
    }

    @Test
    public void test53400() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest106.test53400");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostDatumConvertedTimeSeries postDatumConvertedTimeSeries0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostDatumConvertedTimeSeries();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostDatumConvertedTimeSeries postDatumConvertedTimeSeries2 = postDatumConvertedTimeSeries0.setDescription("yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostDatumConvertedTimeSeries postDatumConvertedTimeSeries4 = postDatumConvertedTimeSeries2.setComment("/AQUARIUS/Provisioning/v1");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostDatumConvertedTimeSeries postDatumConvertedTimeSeries6 = postDatumConvertedTimeSeries4.setTimeSeriesUniqueId("MinInstant");
        java.lang.Boolean boolean7 = postDatumConvertedTimeSeries6.isSourceIsLocalAssumedDatum();
        org.junit.Assert.assertNotNull(postDatumConvertedTimeSeries2);
        org.junit.Assert.assertNotNull(postDatumConvertedTimeSeries4);
        org.junit.Assert.assertNotNull(postDatumConvertedTimeSeries6);
        org.junit.Assert.assertNull(boolean7);
    }

    @Test
    public void test53401() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest106.test53401");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.FieldTrip fieldTrip0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.FieldTrip();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutFieldVisit putFieldVisit1 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutFieldVisit();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity[] plannedActivityArray2 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity> plannedActivityList3 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity>) plannedActivityList3, plannedActivityArray2);
        putFieldVisit1.PlannedActivities = plannedActivityList3;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment6 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment();
        java.lang.String str7 = domainObjectAttachment6.getId();
        java.lang.String str8 = domainObjectAttachment6.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Attachment attachment9 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment10 = domainObjectAttachment6.setAttachment(attachment9);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment11 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment();
        java.lang.String str12 = domainObjectAttachment11.getId();
        java.lang.String str13 = domainObjectAttachment11.getId();
        domainObjectAttachment11.Id = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment17 = domainObjectAttachment11.setId("hi!");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment18 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment();
        java.lang.String str19 = domainObjectAttachment18.getId();
        java.lang.String str20 = domainObjectAttachment18.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Attachment attachment21 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment22 = domainObjectAttachment18.setAttachment(attachment21);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment23 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment();
        java.lang.String str24 = domainObjectAttachment23.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment25 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment();
        java.lang.String str26 = domainObjectAttachment25.getId();
        java.lang.String str27 = domainObjectAttachment25.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Attachment attachment28 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment29 = domainObjectAttachment25.setAttachment(attachment28);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment30 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment();
        java.lang.String str31 = domainObjectAttachment30.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment[] domainObjectAttachmentArray32 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment[] { domainObjectAttachment6, domainObjectAttachment11, domainObjectAttachment18, domainObjectAttachment23, domainObjectAttachment25, domainObjectAttachment30 };
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment> domainObjectAttachmentList33 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment>) domainObjectAttachmentList33, domainObjectAttachmentArray32);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutFieldVisit putFieldVisit35 = putFieldVisit1.setAttachments((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment>) domainObjectAttachmentList33);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlan samplingPlan36 = putFieldVisit1.getSamplingPlan();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment37 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment38 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment();
        java.lang.String str39 = domainObjectAttachment38.getId();
        java.lang.String str40 = domainObjectAttachment38.getId();
        domainObjectAttachment38.Id = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment44 = domainObjectAttachment38.setId("hi!");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment[] domainObjectAttachmentArray45 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment[] { domainObjectAttachment37, domainObjectAttachment38 };
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment> domainObjectAttachmentList46 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment>();
        boolean boolean47 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment>) domainObjectAttachmentList46, domainObjectAttachmentArray45);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutFieldVisit putFieldVisit48 = putFieldVisit1.setAttachments((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment>) domainObjectAttachmentList46);
        fieldTrip0.Attachments = domainObjectAttachmentList46;
        java.lang.String str50 = fieldTrip0.getId();
        fieldTrip0.Participants = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ";
        java.time.OffsetDateTime offsetDateTime53 = fieldTrip0.EndTime;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.FieldTrip fieldTrip55 = fieldTrip0.setCustomId("POST");
        java.lang.String str56 = fieldTrip0.CustomId;
        org.junit.Assert.assertNotNull(plannedActivityArray2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(domainObjectAttachment10);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNotNull(domainObjectAttachment17);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNotNull(domainObjectAttachment22);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertNotNull(domainObjectAttachment29);
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertNotNull(domainObjectAttachmentArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(putFieldVisit35);
        org.junit.Assert.assertNull(samplingPlan36);
        org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertNull(str40);
        org.junit.Assert.assertNotNull(domainObjectAttachment44);
        org.junit.Assert.assertNotNull(domainObjectAttachmentArray45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(putFieldVisit48);
        org.junit.Assert.assertNull(str50);
        org.junit.Assert.assertNull(offsetDateTime53);
        org.junit.Assert.assertNotNull(fieldTrip55);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "POST" + "'", str56, "POST");
    }

    @Test
    public void test53402() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest106.test53402");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Correction correction0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Correction();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CorrectionOperation correctionOperation1 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CorrectionOperation();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CorrectionType correctionType2 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CorrectionType.AdjustableTrim;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CorrectionOperation correctionOperation3 = correctionOperation1.setType(correctionType2);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CorrectionProcessingOrder correctionProcessingOrder4 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CorrectionProcessingOrder.PreProcessing;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CorrectionOperation correctionOperation5 = correctionOperation1.setProcessingOrder(correctionProcessingOrder4);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CorrectionType correctionType6 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CorrectionType.Percent;
        correctionOperation1.Type = correctionType6;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Correction correction8 = correction0.setType(correctionType6);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CorrectionOperation correctionOperation9 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CorrectionOperation();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CorrectionType correctionType10 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CorrectionType.AdjustableTrim;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CorrectionOperation correctionOperation11 = correctionOperation9.setType(correctionType10);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeOperationType metadataChangeOperationType12 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeOperationType.Creation;
        correctionOperation9.OperationType = metadataChangeOperationType12;
        java.time.Instant instant14 = null;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CorrectionOperation correctionOperation15 = correctionOperation9.setDateAppliedUtc(instant14);
        java.lang.Integer int16 = correctionOperation9.getStackPosition();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CorrectionType correctionType17 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CorrectionType.UsgsMultiPoint;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CorrectionOperation correctionOperation18 = correctionOperation9.setType(correctionType17);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Correction correction19 = correction0.setType(correctionType17);
        java.util.HashMap<java.lang.String, java.lang.Object> strMap20 = null;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Correction correction21 = correction19.setParameters(strMap20);
        org.junit.Assert.assertTrue("'" + correctionType2 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CorrectionType.AdjustableTrim + "'", correctionType2.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CorrectionType.AdjustableTrim));
        org.junit.Assert.assertNotNull(correctionOperation3);
        org.junit.Assert.assertTrue("'" + correctionProcessingOrder4 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CorrectionProcessingOrder.PreProcessing + "'", correctionProcessingOrder4.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CorrectionProcessingOrder.PreProcessing));
        org.junit.Assert.assertNotNull(correctionOperation5);
        org.junit.Assert.assertTrue("'" + correctionType6 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CorrectionType.Percent + "'", correctionType6.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CorrectionType.Percent));
        org.junit.Assert.assertNotNull(correction8);
        org.junit.Assert.assertTrue("'" + correctionType10 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CorrectionType.AdjustableTrim + "'", correctionType10.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CorrectionType.AdjustableTrim));
        org.junit.Assert.assertNotNull(correctionOperation11);
        org.junit.Assert.assertTrue("'" + metadataChangeOperationType12 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeOperationType.Creation + "'", metadataChangeOperationType12.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeOperationType.Creation));
        org.junit.Assert.assertNotNull(correctionOperation15);
        org.junit.Assert.assertNull(int16);
        org.junit.Assert.assertTrue("'" + correctionType17 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CorrectionType.UsgsMultiPoint + "'", correctionType17.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CorrectionType.UsgsMultiPoint));
        org.junit.Assert.assertNotNull(correctionOperation18);
        org.junit.Assert.assertNotNull(correction19);
        org.junit.Assert.assertNotNull(correction21);
    }

    @Test
    public void test53403() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest106.test53403");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SearchResultMedium searchResultMedium0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SearchResultMedium();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SearchResultMedium searchResultMedium2 = searchResultMedium0.setTotalCount((java.lang.Integer) 1);
        java.lang.String str3 = searchResultMedium2.Cursor;
        org.junit.Assert.assertNotNull(searchResultMedium2);
        org.junit.Assert.assertNull(str3);
    }

    @Test
    public void test53404() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest106.test53404");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple standardSimple0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple();
        com.aquaticinformatics.aquarius.sdk.samples.Interval interval1 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple standardSimple2 = standardSimple0.setApplicabilityRange(interval1);
        java.lang.String str3 = standardSimple2.CustomId;
        java.lang.Boolean boolean4 = standardSimple2.Active;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple standardSimple6 = standardSimple2.setActive((java.lang.Boolean) false);
        standardSimple6.Active = true;
        standardSimple6.Description = "9999-12-31T23:59:59.999Z";
        java.lang.String str11 = standardSimple6.getDescription();
        standardSimple6.CustomId = "****8e3722aa-afdf-4137-ab41-bb1bb285cdf2****";
        org.junit.Assert.assertNotNull(standardSimple2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(boolean4);
        org.junit.Assert.assertNotNull(standardSimple6);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "9999-12-31T23:59:59.999Z" + "'", str11, "9999-12-31T23:59:59.999Z");
    }

    @Test
    public void test53405() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest106.test53405");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationExportIIV2 getObservationExportIIV2_0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationExportIIV2();
        java.util.List<java.lang.String> strList1 = getObservationExportIIV2_0.getCollectionMethodIds();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetChartDataV2 getChartDataV2_2 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetChartDataV2();
        java.util.List<java.lang.String> strList3 = getChartDataV2_2.getProjectIds();
        java.util.List<java.lang.String> strList4 = getChartDataV2_2.SamplingContextTagIds;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DeleteFieldVisits deleteFieldVisits5 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DeleteFieldVisits();
        java.lang.String str6 = deleteFieldVisits5.Sort;
        deleteFieldVisits5.Sort = "9999-12-31T23:59:59.999Z";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_9 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray11 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList12 = new java.util.ArrayList<java.lang.String>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList12, strArray11);
        getObservationsV2_9.SpecimenIds = strList12;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags15 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray19 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList20 = new java.util.ArrayList<java.lang.String>();
        boolean boolean21 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList20, strArray19);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags22 = putLocationTags15.setTagUniqueIds(strList20);
        getObservationsV2_9.QualityControlTypes = strList20;
        java.util.List<java.lang.String> strList24 = getObservationsV2_9.getAnalyticalGroupIds();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_26 = getObservationsV2_9.setSpecimenName("/AQUARIUS/Acquisition/v2://9999-12-31T23:59:59.999Z");
        java.util.List<java.lang.String> strList27 = getObservationsV2_26.getMedia();
        java.time.Instant instant28 = getObservationsV2_26.getStartModificationTime();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_29 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray31 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList32 = new java.util.ArrayList<java.lang.String>();
        boolean boolean33 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList32, strArray31);
        getObservationsV2_29.SpecimenIds = strList32;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_35 = getObservationsV2_26.setProjectIds((java.util.List<java.lang.String>) strList32);
        deleteFieldVisits5.Search = strList32;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetChartDataV2 getChartDataV2_37 = getChartDataV2_2.setSpecimenIds((java.util.List<java.lang.String>) strList32);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetFieldVisits getFieldVisits38 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetFieldVisits();
        java.util.List<java.lang.String> strList39 = getFieldVisits38.getSamplingLocationIds();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags40 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray44 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList45 = new java.util.ArrayList<java.lang.String>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList45, strArray44);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags47 = putLocationTags40.setTagUniqueIds(strList45);
        java.util.ArrayList<java.lang.String> strList48 = putLocationTags47.TagUniqueIds;
        getFieldVisits38.ScheduleIds = strList48;
        java.lang.Integer int50 = getFieldVisits38.Limit;
        java.util.List<java.lang.String> strList51 = getFieldVisits38.getFieldTripIds();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_52 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray54 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList55 = new java.util.ArrayList<java.lang.String>();
        boolean boolean56 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList55, strArray54);
        getObservationsV2_52.SpecimenIds = strList55;
        getFieldVisits38.Search = strList55;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetChartDataV2 getChartDataV2_59 = getChartDataV2_37.setCollectionMethodIds((java.util.List<java.lang.String>) strList55);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationExportIIV2 getObservationExportIIV2_60 = getObservationExportIIV2_0.setIds((java.util.List<java.lang.String>) strList55);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportSamplingLocations getExportSamplingLocations61 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportSamplingLocations();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_62 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray64 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList65 = new java.util.ArrayList<java.lang.String>();
        boolean boolean66 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList65, strArray64);
        getObservationsV2_62.SpecimenIds = strList65;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags68 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray72 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList73 = new java.util.ArrayList<java.lang.String>();
        boolean boolean74 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList73, strArray72);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags75 = putLocationTags68.setTagUniqueIds(strList73);
        getObservationsV2_62.ActivityIds = strList73;
        getExportSamplingLocations61.SamplingLocationGroupIds = strList73;
        java.util.List<java.lang.String> strList78 = getExportSamplingLocations61.getSamplingLocationGroupIds();
        getObservationExportIIV2_0.AnalysisMethodIds = strList78;
        java.util.List<java.lang.String> strList80 = getObservationExportIIV2_0.getDataClassifications();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationExportIIV2 getObservationExportIIV2_82 = getObservationExportIIV2_0.setCustomId("http://MaxDurationhttp/json/reply/ArrayList");
        java.util.List<java.lang.String> strList83 = getObservationExportIIV2_82.getQualityControlTypes();
        org.junit.Assert.assertNull(strList1);
        org.junit.Assert.assertNull(strList3);
        org.junit.Assert.assertNull(strList4);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(putLocationTags22);
        org.junit.Assert.assertNull(strList24);
        org.junit.Assert.assertNotNull(getObservationsV2_26);
        org.junit.Assert.assertNull(strList27);
        org.junit.Assert.assertNull(instant28);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(getObservationsV2_35);
        org.junit.Assert.assertNotNull(getChartDataV2_37);
        org.junit.Assert.assertNull(strList39);
        org.junit.Assert.assertNotNull(strArray44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(putLocationTags47);
        org.junit.Assert.assertNotNull(strList48);
        org.junit.Assert.assertNull(int50);
        org.junit.Assert.assertNull(strList51);
        org.junit.Assert.assertNotNull(strArray54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(getChartDataV2_59);
        org.junit.Assert.assertNotNull(getObservationExportIIV2_60);
        org.junit.Assert.assertNotNull(strArray64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertNotNull(strArray72);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertNotNull(putLocationTags75);
        org.junit.Assert.assertNotNull(strList78);
        org.junit.Assert.assertNull(strList80);
        org.junit.Assert.assertNotNull(getObservationExportIIV2_82);
        org.junit.Assert.assertNull(strList83);
    }

    @Test
    public void test53406() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest106.test53406");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocation samplingLocation0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocation();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricConfiguration metricConfiguration1 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricConfiguration();
        java.lang.String str2 = metricConfiguration1.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty observedProperty3 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty();
        observedProperty3.CasNumber = "MinDuration";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricConfiguration metricConfiguration6 = metricConfiguration1.setObservedProperty(observedProperty3);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultType resultType7 = observedProperty3.ResultType;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservedProperty postObservedProperty8 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservedProperty();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UnitGroup unitGroup9 = postObservedProperty8.UnitGroup;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity quantity10 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Unit unit11 = null;
        quantity10.Unit = unit11;
        postObservedProperty8.LowerLimit = quantity10;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity quantity14 = postObservedProperty8.LowerLimit;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Unit unit15 = quantity14.Unit;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty observedProperty16 = observedProperty3.setUpperLimit(quantity14);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocation samplingLocation17 = samplingLocation0.setElevation(quantity14);
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment> domainObjectAttachmentList18 = samplingLocation17.getAttachments();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity postActivity19 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttribute[] extendedAttributeArray20 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttribute[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttribute> extendedAttributeList21 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttribute>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttribute>) extendedAttributeList21, extendedAttributeArray20);
        postActivity19.ExtendedAttributes = extendedAttributeList21;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocation samplingLocation24 = samplingLocation17.setExtendedAttributes((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttribute>) extendedAttributeList21);
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple> standardSimpleList25 = samplingLocation24.getStandards();
        java.lang.String str26 = samplingLocation24.Longitude;
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNotNull(metricConfiguration6);
        org.junit.Assert.assertNull(resultType7);
        org.junit.Assert.assertNull(unitGroup9);
        org.junit.Assert.assertNotNull(quantity14);
        org.junit.Assert.assertNull(unit15);
        org.junit.Assert.assertNotNull(observedProperty16);
        org.junit.Assert.assertNotNull(samplingLocation17);
        org.junit.Assert.assertNull(domainObjectAttachmentList18);
        org.junit.Assert.assertNotNull(extendedAttributeArray20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(samplingLocation24);
        org.junit.Assert.assertNull(standardSimpleList25);
        org.junit.Assert.assertNull(str26);
    }

    @Test
    public void test53407() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest106.test53407");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DeleteObservationsV2 deleteObservationsV2_0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DeleteObservationsV2();
        deleteObservationsV2_0.FilterId = "/AQUARIUS/Provisioning/v1";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExtendedAttributeDropdownlistitems getExtendedAttributeDropdownlistitems3 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExtendedAttributeDropdownlistitems();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_4 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.util.List<java.lang.String> strList5 = getObservationsV2_4.SamplingContextTagIds;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_6 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray8 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList9 = new java.util.ArrayList<java.lang.String>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList9, strArray8);
        getObservationsV2_6.SpecimenIds = strList9;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags12 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray16 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList17 = new java.util.ArrayList<java.lang.String>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList17, strArray16);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags19 = putLocationTags12.setTagUniqueIds(strList17);
        getObservationsV2_6.QualityControlTypes = strList17;
        getObservationsV2_4.ResultGrades = strList17;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExtendedAttributeDropdownlistitems getExtendedAttributeDropdownlistitems22 = getExtendedAttributeDropdownlistitems3.setSearch((java.util.List<java.lang.String>) strList17);
        java.lang.String str23 = getExtendedAttributeDropdownlistitems3.getId();
        java.util.List<java.lang.String> strList24 = getExtendedAttributeDropdownlistitems3.getSearch();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetFieldVisits getFieldVisits25 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetFieldVisits();
        java.util.List<java.lang.String> strList26 = getFieldVisits25.getSamplingLocationIds();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags27 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray31 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList32 = new java.util.ArrayList<java.lang.String>();
        boolean boolean33 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList32, strArray31);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags34 = putLocationTags27.setTagUniqueIds(strList32);
        java.util.ArrayList<java.lang.String> strList35 = putLocationTags34.TagUniqueIds;
        getFieldVisits25.ScheduleIds = strList35;
        java.lang.Integer int37 = getFieldVisits25.Limit;
        java.util.List<java.lang.String> strList38 = getFieldVisits25.getFieldTripIds();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_39 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray41 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList42 = new java.util.ArrayList<java.lang.String>();
        boolean boolean43 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList42, strArray41);
        getObservationsV2_39.SpecimenIds = strList42;
        getFieldVisits25.Search = strList42;
        java.lang.String[] strArray57 = new java.lang.String[] { "", "multipart/form-data; boundary=****bbcf5f9e-6ccf-4b63-91ab-6e645caf02af****", "/AQUARIUS/Provisioning/v1", "", "MinDuration", "multipart/form-data; boundary=****bbcf5f9e-6ccf-4b63-91ab-6e645caf02af****", "2021.4.62.0", "multipart/form-data; boundary=****bbcf5f9e-6ccf-4b63-91ab-6e645caf02af****", "multipart/form-data; boundary=****bbcf5f9e-6ccf-4b63-91ab-6e645caf02af****", "/AQUARIUS/Acquisition/v2", "/AQUARIUS/Acquisition/v2://9999-12-31T23:59:59.999Z" };
        java.util.ArrayList<java.lang.String> strList58 = new java.util.ArrayList<java.lang.String>();
        boolean boolean59 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList58, strArray57);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetFieldVisits getFieldVisits60 = getFieldVisits25.setSamplingPlanIds((java.util.List<java.lang.String>) strList58);
        getExtendedAttributeDropdownlistitems3.Search = strList58;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DeleteObservationsV2 deleteObservationsV2_62 = deleteObservationsV2_0.setQualityControlTypes((java.util.List<java.lang.String>) strList58);
        java.util.List<java.lang.String> strList63 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DeleteObservationsV2 deleteObservationsV2_64 = deleteObservationsV2_62.setResultGrades(strList63);
        java.util.List<java.lang.String> strList65 = deleteObservationsV2_64.getAnalyticalGroupIds();
        java.lang.String str66 = deleteObservationsV2_64.FieldVisitId;
        java.lang.Integer int67 = deleteObservationsV2_64.getLimit();
        org.junit.Assert.assertNull(strList5);
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(putLocationTags19);
        org.junit.Assert.assertNotNull(getExtendedAttributeDropdownlistitems22);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertNotNull(strList24);
        org.junit.Assert.assertNull(strList26);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(putLocationTags34);
        org.junit.Assert.assertNotNull(strList35);
        org.junit.Assert.assertNull(int37);
        org.junit.Assert.assertNull(strList38);
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(strArray57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(getFieldVisits60);
        org.junit.Assert.assertNotNull(deleteObservationsV2_62);
        org.junit.Assert.assertNotNull(deleteObservationsV2_64);
        org.junit.Assert.assertNull(strList65);
        org.junit.Assert.assertNull(str66);
        org.junit.Assert.assertNull(int67);
    }

    @Test
    public void test53408() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest106.test53408");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationExportIIV2 getObservationExportIIV2_0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationExportIIV2();
        java.util.List<java.lang.String> strList1 = getObservationExportIIV2_0.getCollectionMethodIds();
        java.util.List<java.lang.String> strList2 = getObservationExportIIV2_0.AnalyticalGroupIds;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationExportIIV2 getObservationExportIIV2_4 = getObservationExportIIV2_0.setNumericResultValue((java.lang.Double) 0.0d);
        java.lang.String str5 = getObservationExportIIV2_4.Sort;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemTaxon importItemTaxon6 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemTaxon();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemTaxon importItemTaxon8 = importItemTaxon6.setRowId("/AQUARIUS/Provisioning/v1");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemTaxon importItemTaxon10 = importItemTaxon6.setRowId("/AQUARIUS/Acquisition/v2://9999-12-31T23:59:59.999Z");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Taxon taxon11 = importItemTaxon6.Item;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemTaxon importItemTaxon13 = importItemTaxon6.setRowId("multipart/form-data; boundary=****1165d1f3-8b30-4f2e-8d0b-ffebab458859****");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemStatusType importItemStatusType14 = importItemTaxon13.Status;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationExportIIV2 getObservationExportIIV2_15 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationExportIIV2();
        java.util.List<java.lang.String> strList16 = getObservationExportIIV2_15.getCollectionMethodIds();
        java.lang.String str17 = getObservationExportIIV2_15.getDepthUnitCustomId();
        java.time.Instant instant18 = getObservationExportIIV2_15.EndObservedTime;
        java.lang.Double double19 = getObservationExportIIV2_15.NumericResultValue;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationExportIIV2 getObservationExportIIV2_21 = getObservationExportIIV2_15.setMaxNumericResultValue((java.lang.Double) 10.0d);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DeleteActivities deleteActivities22 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DeleteActivities();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutOpenIdConnectRelyingPartyConfiguration putOpenIdConnectRelyingPartyConfiguration23 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutOpenIdConnectRelyingPartyConfiguration();
        java.util.List<java.lang.String> strList24 = putOpenIdConnectRelyingPartyConfiguration23.getScopes();
        java.lang.String str25 = putOpenIdConnectRelyingPartyConfiguration23.getOptionalIssuerDiscoveryUri();
        java.lang.String str26 = putOpenIdConnectRelyingPartyConfiguration23.getOptionalIssuerDiscoveryUri();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostTag postTag27 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostTag();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_28 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray31 = new java.lang.String[] { "", "" };
        java.util.ArrayList<java.lang.String> strList32 = new java.util.ArrayList<java.lang.String>();
        boolean boolean33 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList32, strArray31);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_34 = getObservationsV2_28.setDataClassifications((java.util.List<java.lang.String>) strList32);
        postTag27.PickListValues = strList32;
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.TagApplicability> tagApplicabilityList36 = postTag27.Applicability;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.TagRequestBase tagRequestBase38 = postTag27.setKey("");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.TagValueType tagValueType39 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.TagValueType.PickList;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.TagRequestBase tagRequestBase40 = tagRequestBase38.setValueType(tagValueType39);
        java.lang.String str41 = tagRequestBase40.Key;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_42 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray44 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList45 = new java.util.ArrayList<java.lang.String>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList45, strArray44);
        getObservationsV2_42.SpecimenIds = strList45;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags48 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray52 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList53 = new java.util.ArrayList<java.lang.String>();
        boolean boolean54 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList53, strArray52);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags55 = putLocationTags48.setTagUniqueIds(strList53);
        getObservationsV2_42.ActivityIds = strList53;
        tagRequestBase40.PickListValues = strList53;
        putOpenIdConnectRelyingPartyConfiguration23.HostedDomains = strList53;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DeleteActivities deleteActivities59 = deleteActivities22.setProjectIds((java.util.List<java.lang.String>) strList53);
        java.util.List<java.lang.String> strList60 = deleteActivities22.Media;
        java.lang.String str61 = deleteActivities22.Sort;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetChartDataV2 getChartDataV2_62 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetChartDataV2();
        java.util.List<java.lang.String> strList63 = getChartDataV2_62.getProjectIds();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest64 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_65 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray67 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList68 = new java.util.ArrayList<java.lang.String>();
        boolean boolean69 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList68, strArray67);
        getObservationsV2_65.SpecimenIds = strList68;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags71 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray75 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList76 = new java.util.ArrayList<java.lang.String>();
        boolean boolean77 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList76, strArray75);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags78 = putLocationTags71.setTagUniqueIds(strList76);
        getObservationsV2_65.QualityControlTypes = strList76;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest80 = timeAlignedDataServiceRequest64.setTimeSeriesUniqueIds(strList76);
        getChartDataV2_62.ActivityIds = strList76;
        deleteActivities22.ActivityTemplateId = strList76;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationExportIIV2 getObservationExportIIV2_83 = getObservationExportIIV2_21.setIds((java.util.List<java.lang.String>) strList76);
        importItemTaxon13.WarningMessages = strList76;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationExportIIV2 getObservationExportIIV2_85 = getObservationExportIIV2_4.setAnalysisMethodIds((java.util.List<java.lang.String>) strList76);
        org.junit.Assert.assertNull(strList1);
        org.junit.Assert.assertNull(strList2);
        org.junit.Assert.assertNotNull(getObservationExportIIV2_4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(importItemTaxon8);
        org.junit.Assert.assertNotNull(importItemTaxon10);
        org.junit.Assert.assertNull(taxon11);
        org.junit.Assert.assertNotNull(importItemTaxon13);
        org.junit.Assert.assertNull(importItemStatusType14);
        org.junit.Assert.assertNull(strList16);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertNull(instant18);
        org.junit.Assert.assertNull(double19);
        org.junit.Assert.assertNotNull(getObservationExportIIV2_21);
        org.junit.Assert.assertNull(strList24);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(getObservationsV2_34);
        org.junit.Assert.assertNull(tagApplicabilityList36);
        org.junit.Assert.assertNotNull(tagRequestBase38);
        org.junit.Assert.assertTrue("'" + tagValueType39 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.TagValueType.PickList + "'", tagValueType39.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.TagValueType.PickList));
        org.junit.Assert.assertNotNull(tagRequestBase40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertNotNull(strArray44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(strArray52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(putLocationTags55);
        org.junit.Assert.assertNotNull(deleteActivities59);
        org.junit.Assert.assertNull(strList60);
        org.junit.Assert.assertNull(str61);
        org.junit.Assert.assertNull(strList63);
        org.junit.Assert.assertNotNull(strArray67);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertNotNull(strArray75);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertNotNull(putLocationTags78);
        org.junit.Assert.assertNotNull(timeAlignedDataServiceRequest80);
        org.junit.Assert.assertNotNull(getObservationExportIIV2_83);
        org.junit.Assert.assertNotNull(getObservationExportIIV2_85);
    }

    @Test
    public void test53409() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest106.test53409");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportSummary importSummary0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportSummary();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple importHistoryEventSimple1 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple();
        java.time.OffsetDateTime offsetDateTime2 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple importHistoryEventSimple3 = importHistoryEventSimple1.setImportTime(offsetDateTime2);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportSummary importSummary4 = importSummary0.setImportHistoryEventSimple(importHistoryEventSimple3);
        importSummary4.SummaryReportText = "9999-12-31T23:59:59.9999999Z";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple importHistoryEventSimple7 = importSummary4.getImportHistoryEventSimple();
        java.lang.Integer int8 = importSummary4.SkippedCount;
        java.lang.Integer int9 = importSummary4.ExpectedCount;
        org.junit.Assert.assertNotNull(importHistoryEventSimple3);
        org.junit.Assert.assertNotNull(importSummary4);
        org.junit.Assert.assertNotNull(importHistoryEventSimple7);
        org.junit.Assert.assertNull(int8);
        org.junit.Assert.assertNull(int9);
    }

    @Test
    public void test53410() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest106.test53410");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty observedProperty0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty();
        observedProperty0.CasNumber = "MinDuration";
        java.lang.String str3 = observedProperty0.getCasNumber();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutObservedProperty putObservedProperty4 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutObservedProperty();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity quantity5 = putObservedProperty4.LowerLimit;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutObservedProperty putObservedProperty7 = putObservedProperty4.setDescription("");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisType analysisType8 = putObservedProperty4.AnalysisType;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisType analysisType9 = putObservedProperty4.getAnalysisType();
        putObservedProperty4.Description = "POST";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultType resultType12 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultType.CATEGORICAL_FIXED_VALUES;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutObservedProperty putObservedProperty13 = putObservedProperty4.setResultType(resultType12);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty observedProperty14 = observedProperty0.setResultType(resultType12);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty observedProperty16 = observedProperty14.setDescription("multipart/form-data; boundary=****9fadde69-3f13-40c4-a87c-0f3f51c2dd35****");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Unit unit17 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Unit();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes18 = unit17.AuditAttributes;
        unit17.BaseMultiplier = 0.0d;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutAccessGroup putAccessGroup21 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutAccessGroup();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivity samplingPlanPlannedActivity22 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivity();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes23 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivity samplingPlanPlannedActivity24 = samplingPlanPlannedActivity22.setAuditAttributes(auditAttributes23);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes25 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes27 = auditAttributes25.setCreationUserProfileId("'.'SSSSSSS");
        samplingPlanPlannedActivity24.AuditAttributes = auditAttributes25;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes29 = samplingPlanPlannedActivity24.AuditAttributes;
        putAccessGroup21.AuditAttributes = auditAttributes29;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Unit unit31 = unit17.setAuditAttributes(auditAttributes29);
        java.lang.String str32 = unit31.Name;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Unit unit34 = unit31.setCustomId("2021.4.62.0");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty observedProperty35 = observedProperty14.setDefaultUnit(unit34);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty observedProperty37 = observedProperty35.setDescription("multipart/form-data; boundary=****6b8051d4-caf2-4095-9f11-faa36b95fc28****");
        java.lang.String str38 = observedProperty35.getDescription();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Unit unit39 = observedProperty35.getDefaultUnit();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "MinDuration" + "'", str3, "MinDuration");
        org.junit.Assert.assertNull(quantity5);
        org.junit.Assert.assertNotNull(putObservedProperty7);
        org.junit.Assert.assertNull(analysisType8);
        org.junit.Assert.assertNull(analysisType9);
        org.junit.Assert.assertTrue("'" + resultType12 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultType.CATEGORICAL_FIXED_VALUES + "'", resultType12.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultType.CATEGORICAL_FIXED_VALUES));
        org.junit.Assert.assertNotNull(putObservedProperty13);
        org.junit.Assert.assertNotNull(observedProperty14);
        org.junit.Assert.assertNotNull(observedProperty16);
        org.junit.Assert.assertNull(auditAttributes18);
        org.junit.Assert.assertNotNull(samplingPlanPlannedActivity24);
        org.junit.Assert.assertNotNull(auditAttributes27);
        org.junit.Assert.assertNotNull(auditAttributes29);
        org.junit.Assert.assertNotNull(unit31);
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertNotNull(unit34);
        org.junit.Assert.assertNotNull(observedProperty35);
        org.junit.Assert.assertNotNull(observedProperty37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "multipart/form-data; boundary=****6b8051d4-caf2-4095-9f11-faa36b95fc28****" + "'", str38, "multipart/form-data; boundary=****6b8051d4-caf2-4095-9f11-faa36b95fc28****");
        org.junit.Assert.assertNotNull(unit39);
    }

    @Test
    public void test53411() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest106.test53411");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetSpecimens getSpecimens0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetSpecimens();
        java.util.List<java.lang.String> strList1 = getSpecimens0.getActivityIds();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetSpecimens getSpecimens3 = getSpecimens0.setSort("MinDuration");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetChartDataV2 getChartDataV2_4 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetChartDataV2();
        getChartDataV2_4.DetectionCondition = "/AQUARIUS/Acquisition/v2://9999-12-31T23:59:59.999Z";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.GageHeightReading gageHeightReading7 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.GageHeightReading();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ControlConditionActivity controlConditionActivity8 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ControlConditionActivity();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ControlCleanedType controlCleanedType9 = null;
        controlConditionActivity8.ControlCleaned = controlCleanedType9;
        java.lang.String str11 = controlConditionActivity8.getComments();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary12 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        dischargeSummary12.Reviewer = "";
        java.time.Instant instant15 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        dischargeSummary12.MeasurementTime = instant15;
        controlConditionActivity8.DateCleaned = instant15;
        gageHeightReading7.ReadingTime = instant15;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay19 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay21 = doubleWithDisplay19.setNumeric((java.lang.Double) 10.0d);
        java.lang.String str22 = doubleWithDisplay21.getDisplay();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.GageHeightReading gageHeightReading23 = gageHeightReading7.setGageHeight(doubleWithDisplay21);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetChartDataV2 getChartDataV2_24 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetChartDataV2();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary25 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary27 = dischargeSummary25.setMeanGageHeightMethod("hi!");
        java.lang.String str28 = dischargeSummary27.MeasurementId;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary30 = dischargeSummary27.setDischargeMethod("yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSSSSSZZZZZ");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CalibrationCheck calibrationCheck31 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CalibrationCheck();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CalibrationCheckType calibrationCheckType32 = calibrationCheck31.getCalibrationCheckType();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay33 = calibrationCheck31.Value;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse34 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary35 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary37 = dischargeSummary35.setPublish((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse38 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant39 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse40 = locationDescriptionListServiceResponse38.setNextToken(instant39);
        dischargeSummary35.MeasurementTime = instant39;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse42 = locationDescriptionListServiceResponse34.setNextToken(instant39);
        java.time.Instant instant43 = locationDescriptionListServiceResponse34.getNextToken();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CalibrationCheck calibrationCheck44 = calibrationCheck31.setTime(instant43);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary45 = dischargeSummary27.setMeasurementTime(instant43);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetChartDataV2 getChartDataV2_46 = getChartDataV2_24.setStartResultTime(instant43);
        gageHeightReading7.ReadingTime = instant43;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetChartDataV2 getChartDataV2_48 = getChartDataV2_4.setStartObservedTime(instant43);
        getSpecimens0.EndModificationTime = instant43;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutUser putUser50 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutUser();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_51 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray54 = new java.lang.String[] { "", "" };
        java.util.ArrayList<java.lang.String> strList55 = new java.util.ArrayList<java.lang.String>();
        boolean boolean56 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList55, strArray54);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_57 = getObservationsV2_51.setDataClassifications((java.util.List<java.lang.String>) strList55);
        getObservationsV2_57.DepthUnitCustomId = "hi!";
        java.lang.String str60 = getObservationsV2_57.DepthUnitId;
        java.util.List<java.lang.String> strList61 = getObservationsV2_57.LabResultLaboratoryIds;
        getObservationsV2_57.MaxNumericResultValue = (-1.0d);
        java.lang.Integer int64 = getObservationsV2_57.Limit;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest65 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_66 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray68 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList69 = new java.util.ArrayList<java.lang.String>();
        boolean boolean70 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList69, strArray68);
        getObservationsV2_66.SpecimenIds = strList69;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags72 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray76 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList77 = new java.util.ArrayList<java.lang.String>();
        boolean boolean78 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList77, strArray76);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags79 = putLocationTags72.setTagUniqueIds(strList77);
        getObservationsV2_66.QualityControlTypes = strList77;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest81 = timeAlignedDataServiceRequest65.setTimeSeriesUniqueIds(strList77);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_82 = getObservationsV2_57.setSamplingLocationIds((java.util.List<java.lang.String>) strList77);
        putUser50.Roles = strList77;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetSpecimens getSpecimens84 = getSpecimens0.setSpecimenStatuses((java.util.List<java.lang.String>) strList77);
        java.lang.String str85 = getSpecimens84.getCursor();
        org.junit.Assert.assertNull(strList1);
        org.junit.Assert.assertNotNull(getSpecimens3);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNotNull(instant15);
        org.junit.Assert.assertNotNull(doubleWithDisplay21);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertNotNull(gageHeightReading23);
        org.junit.Assert.assertNotNull(dischargeSummary27);
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertNotNull(dischargeSummary30);
        org.junit.Assert.assertNull(calibrationCheckType32);
        org.junit.Assert.assertNull(doubleWithDisplay33);
        org.junit.Assert.assertNotNull(dischargeSummary37);
        org.junit.Assert.assertNotNull(instant39);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse40);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse42);
        org.junit.Assert.assertNotNull(instant43);
        org.junit.Assert.assertNotNull(calibrationCheck44);
        org.junit.Assert.assertNotNull(dischargeSummary45);
        org.junit.Assert.assertNotNull(getChartDataV2_46);
        org.junit.Assert.assertNotNull(getChartDataV2_48);
        org.junit.Assert.assertNotNull(strArray54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(getObservationsV2_57);
        org.junit.Assert.assertNull(str60);
        org.junit.Assert.assertNull(strList61);
        org.junit.Assert.assertNull(int64);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertNotNull(strArray76);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
        org.junit.Assert.assertNotNull(putLocationTags79);
        org.junit.Assert.assertNotNull(timeAlignedDataServiceRequest81);
        org.junit.Assert.assertNotNull(getObservationsV2_82);
        org.junit.Assert.assertNotNull(getSpecimens84);
        org.junit.Assert.assertNull(str85);
    }

    @Test
    public void test53412() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest106.test53412");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttribute extendedAttribute0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttribute();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttribute extendedAttribute2 = extendedAttribute0.setDefaultValue("multipart/form-data; boundary=****231224c4-98ce-4e30-bd65-1d25287c4abe****");
        java.lang.Boolean boolean3 = extendedAttribute2.AppliesToLocationTypes;
        extendedAttribute2.Required = true;
        java.lang.String str6 = extendedAttribute2.getUniqueId();
        extendedAttribute2.UniqueId = "multipart/form-data; boundary=****f642a130-eb6d-4fb6-a1a4-7c7216ab119b****";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttribute extendedAttribute10 = extendedAttribute2.setAppliesToLocationTypes((java.lang.Boolean) true);
        java.lang.Boolean boolean11 = extendedAttribute10.AppliesToLocations;
        org.junit.Assert.assertNotNull(extendedAttribute2);
        org.junit.Assert.assertNull(boolean3);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNotNull(extendedAttribute10);
        org.junit.Assert.assertNull(boolean11);
    }

    @Test
    public void test53413() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest106.test53413");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostSpecimen postSpecimen0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostSpecimen();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes1 = postSpecimen0.AuditAttributes;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes2 = postSpecimen0.getAuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PreservativeType preservativeType3 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PreservativeType.MERCURIC_CHLORIDE;
        postSpecimen0.Preservative = preservativeType3;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Activity activity5 = postSpecimen0.Activity;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenWithObservations specimenWithObservations6 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenWithObservations();
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttribute> extendedAttributeList7 = specimenWithObservations6.ExtendedAttributes;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenViewStatusType specimenViewStatusType8 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenViewStatusType.RECEIVED_SOME;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenWithObservations specimenWithObservations9 = specimenWithObservations6.setStatus(specimenViewStatusType8);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenViewStatusType specimenViewStatusType10 = specimenWithObservations9.Status;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenViewStatusType specimenViewStatusType11 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenViewStatusType.REQUESTED;
        specimenWithObservations9.Status = specimenViewStatusType11;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostSpecimen postSpecimen13 = postSpecimen0.setStatus(specimenViewStatusType11);
        postSpecimen0.FiltrationComment = "zZZZZ";
        org.junit.Assert.assertNull(auditAttributes1);
        org.junit.Assert.assertNull(auditAttributes2);
        org.junit.Assert.assertTrue("'" + preservativeType3 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PreservativeType.MERCURIC_CHLORIDE + "'", preservativeType3.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PreservativeType.MERCURIC_CHLORIDE));
        org.junit.Assert.assertNull(activity5);
        org.junit.Assert.assertNull(extendedAttributeList7);
        org.junit.Assert.assertTrue("'" + specimenViewStatusType8 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenViewStatusType.RECEIVED_SOME + "'", specimenViewStatusType8.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenViewStatusType.RECEIVED_SOME));
        org.junit.Assert.assertNotNull(specimenWithObservations9);
        org.junit.Assert.assertTrue("'" + specimenViewStatusType10 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenViewStatusType.RECEIVED_SOME + "'", specimenViewStatusType10.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenViewStatusType.RECEIVED_SOME));
        org.junit.Assert.assertTrue("'" + specimenViewStatusType11 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenViewStatusType.REQUESTED + "'", specimenViewStatusType11.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenViewStatusType.REQUESTED));
        org.junit.Assert.assertNotNull(postSpecimen13);
    }

    @Test
    public void test53414() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest106.test53414");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AccessGroup accessGroup0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AccessGroup();
        java.lang.String str1 = accessGroup0.Name;
        accessGroup0.CanEditAllData = true;
        accessGroup0.CanEditAllData = true;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AccessGroup accessGroup6 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AccessGroup();
        java.lang.String str7 = accessGroup6.Name;
        accessGroup6.CanEditAllData = true;
        accessGroup6.CanEditAllData = true;
        accessGroup6.Name = "multipart/form-data; boundary=****59879c02-0839-4b96-bc41-a13ebb706be4****";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostSamplingLocation postSamplingLocation14 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostSamplingLocation();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostSamplingLocation postSamplingLocation16 = postSamplingLocation14.setCustomId("hi!");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Address address17 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostSamplingLocation postSamplingLocation18 = postSamplingLocation14.setAddress(address17);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity quantity19 = postSamplingLocation18.getElevation();
        postSamplingLocation18.Longitude = "POST";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes22 = postSamplingLocation18.getAuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostAccessGroup postAccessGroup23 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostAccessGroup();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationGroup[] samplingLocationGroupArray24 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationGroup[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationGroup> samplingLocationGroupList25 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationGroup>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationGroup>) samplingLocationGroupList25, samplingLocationGroupArray24);
        postAccessGroup23.SamplingLocationGroups = samplingLocationGroupList25;
        postSamplingLocation18.SamplingLocationGroups = samplingLocationGroupList25;
        accessGroup6.SamplingLocationGroups = samplingLocationGroupList25;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AccessGroup accessGroup30 = accessGroup0.setSamplingLocationGroups((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationGroup>) samplingLocationGroupList25);
        java.lang.String str31 = accessGroup0.Id;
        accessGroup0.CanEditAllData = false;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(postSamplingLocation16);
        org.junit.Assert.assertNotNull(postSamplingLocation18);
        org.junit.Assert.assertNull(quantity19);
        org.junit.Assert.assertNull(auditAttributes22);
        org.junit.Assert.assertNotNull(samplingLocationGroupArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(accessGroup30);
        org.junit.Assert.assertNull(str31);
    }

    @Test
    public void test53415() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest106.test53415");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetSpreadsheetTemplates getSpreadsheetTemplates0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetSpreadsheetTemplates();
        java.lang.Object obj1 = getSpreadsheetTemplates0.getResponseType();
        java.lang.Object obj2 = getSpreadsheetTemplates0.getResponseType();
        java.lang.Object obj3 = getSpreadsheetTemplates0.getResponseType();
        java.lang.Object obj4 = getSpreadsheetTemplates0.getResponseType();
        org.junit.Assert.assertNotNull(obj1);
        org.junit.Assert.assertEquals(obj1.toString(), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$SearchResultSpreadsheetTemplate");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj1), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$SearchResultSpreadsheetTemplate");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj1), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$SearchResultSpreadsheetTemplate");
        org.junit.Assert.assertNotNull(obj2);
        org.junit.Assert.assertEquals(obj2.toString(), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$SearchResultSpreadsheetTemplate");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj2), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$SearchResultSpreadsheetTemplate");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj2), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$SearchResultSpreadsheetTemplate");
        org.junit.Assert.assertNotNull(obj3);
        org.junit.Assert.assertEquals(obj3.toString(), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$SearchResultSpreadsheetTemplate");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj3), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$SearchResultSpreadsheetTemplate");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj3), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$SearchResultSpreadsheetTemplate");
        org.junit.Assert.assertNotNull(obj4);
        org.junit.Assert.assertEquals(obj4.toString(), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$SearchResultSpreadsheetTemplate");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj4), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$SearchResultSpreadsheetTemplate");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj4), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$SearchResultSpreadsheetTemplate");
    }

    @Test
    public void test53416() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest106.test53416");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostSensor postSensor0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostSensor();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.SensorBase sensorBase2 = postSensor0.setName("");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.SensorBase sensorBase4 = sensorBase2.setManufacturer("hi!");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.SensorBase sensorBase6 = sensorBase2.setLocationUniqueId("'.'SSSSSSS");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.SensorBase sensorBase8 = sensorBase2.setParameterId("multipart/form-data; boundary=****f2ce0d54-dac7-4cd0-b74f-1024089261f9****");
        sensorBase2.SubLocationIdentifier = "multipart/form-data; boundary=****f2ce0d54-dac7-4cd0-b74f-1024089261f9****";
        org.junit.Assert.assertNotNull(sensorBase2);
        org.junit.Assert.assertNotNull(sensorBase4);
        org.junit.Assert.assertNotNull(sensorBase6);
        org.junit.Assert.assertNotNull(sensorBase8);
    }

    @Test
    public void test53417() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest106.test53417");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitDataServiceRequest fieldVisitDataServiceRequest0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitDataServiceRequest();
        java.lang.String str1 = fieldVisitDataServiceRequest0.DiscreteMeasurementActivity;
        java.lang.String str2 = fieldVisitDataServiceRequest0.FieldVisitIdentifier;
        java.lang.String str3 = fieldVisitDataServiceRequest0.getConvertToStandardReferenceDatum();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(str3);
    }

    @Test
    public void test53418() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest106.test53418");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutBulkEditResultGradesV2 putBulkEditResultGradesV2_0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutBulkEditResultGradesV2();
        java.lang.Double double1 = putBulkEditResultGradesV2_0.DepthValue;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_2 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray4 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList5 = new java.util.ArrayList<java.lang.String>();
        boolean boolean6 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList5, strArray4);
        getObservationsV2_2.SpecimenIds = strList5;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags8 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray12 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList13 = new java.util.ArrayList<java.lang.String>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList13, strArray12);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags15 = putLocationTags8.setTagUniqueIds(strList13);
        getObservationsV2_2.QualityControlTypes = strList13;
        java.util.List<java.lang.String> strList17 = getObservationsV2_2.getAnalyticalGroupIds();
        java.util.List<java.lang.String> strList18 = getObservationsV2_2.DataClassifications;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.FieldResultType fieldResultType19 = getObservationsV2_2.FieldResultType;
        java.time.Instant instant20 = getObservationsV2_2.getEndObservedTime();
        java.lang.String str21 = getObservationsV2_2.DepthUnitCustomId;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags22 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray26 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList27 = new java.util.ArrayList<java.lang.String>();
        boolean boolean28 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList27, strArray26);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags29 = putLocationTags22.setTagUniqueIds(strList27);
        java.util.ArrayList<java.lang.String> strList30 = putLocationTags29.TagUniqueIds;
        getObservationsV2_2.ProjectIds = strList30;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutBulkEditResultGradesV2 putBulkEditResultGradesV2_32 = putBulkEditResultGradesV2_0.setSearch((java.util.List<java.lang.String>) strList30);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutBulkEditResultGradesV2 putBulkEditResultGradesV2_34 = putBulkEditResultGradesV2_32.setDepthValue((java.lang.Double) 100.0d);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItem importItem35 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_36 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray38 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList39 = new java.util.ArrayList<java.lang.String>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList39, strArray38);
        getObservationsV2_36.SpecimenIds = strList39;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags42 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray46 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList47 = new java.util.ArrayList<java.lang.String>();
        boolean boolean48 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList47, strArray46);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags49 = putLocationTags42.setTagUniqueIds(strList47);
        getObservationsV2_36.QualityControlTypes = strList47;
        java.util.List<java.lang.String> strList51 = getObservationsV2_36.getLabReportIds();
        importItem35.Errors = getObservationsV2_36;
        java.lang.Object obj53 = importItem35.getExistingItem();
        java.util.List<java.lang.String> strList54 = importItem35.getFields();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItem importItem55 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_56 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray58 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList59 = new java.util.ArrayList<java.lang.String>();
        boolean boolean60 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList59, strArray58);
        getObservationsV2_56.SpecimenIds = strList59;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags62 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray66 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList67 = new java.util.ArrayList<java.lang.String>();
        boolean boolean68 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList67, strArray66);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags69 = putLocationTags62.setTagUniqueIds(strList67);
        getObservationsV2_56.QualityControlTypes = strList67;
        java.util.List<java.lang.String> strList71 = getObservationsV2_56.getLabReportIds();
        importItem55.Errors = getObservationsV2_56;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_73 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.util.List<java.lang.String> strList74 = getObservationsV2_73.SamplingContextTagIds;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_75 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray77 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList78 = new java.util.ArrayList<java.lang.String>();
        boolean boolean79 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList78, strArray77);
        getObservationsV2_75.SpecimenIds = strList78;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags81 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray85 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList86 = new java.util.ArrayList<java.lang.String>();
        boolean boolean87 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList86, strArray85);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags88 = putLocationTags81.setTagUniqueIds(strList86);
        getObservationsV2_75.QualityControlTypes = strList86;
        getObservationsV2_73.ResultGrades = strList86;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItem importItem91 = importItem55.setFields((java.util.List<java.lang.String>) strList86);
        importItem35.Fields = strList86;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutBulkEditResultGradesV2 putBulkEditResultGradesV2_93 = putBulkEditResultGradesV2_34.setSamplingLocationGroupIds((java.util.List<java.lang.String>) strList86);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutBulkEditResultGradesV2 putBulkEditResultGradesV2_95 = putBulkEditResultGradesV2_34.setNumericResultValue((java.lang.Double) 100.0d);
        java.util.List<java.lang.String> strList96 = putBulkEditResultGradesV2_95.CollectionMethodIds;
        putBulkEditResultGradesV2_95.MinNumericResultValue = 10.0d;
        org.junit.Assert.assertNull(double1);
        org.junit.Assert.assertNotNull(strArray4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(putLocationTags15);
        org.junit.Assert.assertNull(strList17);
        org.junit.Assert.assertNull(strList18);
        org.junit.Assert.assertNull(fieldResultType19);
        org.junit.Assert.assertNull(instant20);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(putLocationTags29);
        org.junit.Assert.assertNotNull(strList30);
        org.junit.Assert.assertNotNull(putBulkEditResultGradesV2_32);
        org.junit.Assert.assertNotNull(putBulkEditResultGradesV2_34);
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(putLocationTags49);
        org.junit.Assert.assertNull(strList51);
        org.junit.Assert.assertNull(obj53);
        org.junit.Assert.assertNull(strList54);
        org.junit.Assert.assertNotNull(strArray58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(strArray66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertNotNull(putLocationTags69);
        org.junit.Assert.assertNull(strList71);
        org.junit.Assert.assertNull(strList74);
        org.junit.Assert.assertNotNull(strArray77);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
        org.junit.Assert.assertNotNull(strArray85);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + true + "'", boolean87 == true);
        org.junit.Assert.assertNotNull(putLocationTags88);
        org.junit.Assert.assertNotNull(importItem91);
        org.junit.Assert.assertNotNull(putBulkEditResultGradesV2_93);
        org.junit.Assert.assertNotNull(putBulkEditResultGradesV2_95);
        org.junit.Assert.assertNull(strList96);
    }

    @Test
    public void test53419() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest106.test53419");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Specimen specimen0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Specimen();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroup analyticalGroup1 = specimen0.getAnalyticalGroup();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PreservativeType preservativeType2 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PreservativeType.NITRIC_ACID;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Specimen specimen3 = specimen0.setPreservative(preservativeType2);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenWithObservations specimenWithObservations4 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenWithObservations();
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttribute> extendedAttributeList5 = specimenWithObservations4.ExtendedAttributes;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenViewStatusType specimenViewStatusType6 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenViewStatusType.RECEIVED_SOME;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenWithObservations specimenWithObservations7 = specimenWithObservations4.setStatus(specimenViewStatusType6);
        specimenWithObservations4.Id = "/AQUARIUS";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenWithObservations specimenWithObservations10 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenWithObservations();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenWithObservations specimenWithObservations12 = specimenWithObservations10.setNumberOfReceivedObservations((java.lang.Integer) 1);
        java.lang.String str13 = specimenWithObservations12.FiltrationComment;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSpecimen putSpecimen14 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSpecimen();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSpecimen putSpecimen16 = putSpecimen14.setNumberOfRequestedObservations((java.lang.Integer) 4);
        java.lang.String str17 = putSpecimen16.getDescription();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ShippingContainer shippingContainer18 = putSpecimen16.getShippingContainer();
        java.lang.String str19 = putSpecimen16.getFiltrationComment();
        java.lang.String str20 = putSpecimen16.getFiltrationComment();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenWithObservations specimenWithObservations21 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenWithObservations();
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttribute> extendedAttributeList22 = specimenWithObservations21.ExtendedAttributes;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenViewStatusType specimenViewStatusType23 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenViewStatusType.RECEIVED_SOME;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenWithObservations specimenWithObservations24 = specimenWithObservations21.setStatus(specimenViewStatusType23);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenViewStatusType specimenViewStatusType25 = specimenWithObservations24.Status;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSpecimen putSpecimen26 = putSpecimen16.setStatus(specimenViewStatusType25);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenWithObservations specimenWithObservations27 = specimenWithObservations12.setStatus(specimenViewStatusType25);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenWithObservations specimenWithObservations28 = specimenWithObservations4.setStatus(specimenViewStatusType25);
        specimen3.Status = specimenViewStatusType25;
        org.junit.Assert.assertNull(analyticalGroup1);
        org.junit.Assert.assertTrue("'" + preservativeType2 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PreservativeType.NITRIC_ACID + "'", preservativeType2.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PreservativeType.NITRIC_ACID));
        org.junit.Assert.assertNotNull(specimen3);
        org.junit.Assert.assertNull(extendedAttributeList5);
        org.junit.Assert.assertTrue("'" + specimenViewStatusType6 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenViewStatusType.RECEIVED_SOME + "'", specimenViewStatusType6.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenViewStatusType.RECEIVED_SOME));
        org.junit.Assert.assertNotNull(specimenWithObservations7);
        org.junit.Assert.assertNotNull(specimenWithObservations12);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNotNull(putSpecimen16);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertNull(shippingContainer18);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNull(extendedAttributeList22);
        org.junit.Assert.assertTrue("'" + specimenViewStatusType23 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenViewStatusType.RECEIVED_SOME + "'", specimenViewStatusType23.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenViewStatusType.RECEIVED_SOME));
        org.junit.Assert.assertNotNull(specimenWithObservations24);
        org.junit.Assert.assertTrue("'" + specimenViewStatusType25 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenViewStatusType.RECEIVED_SOME + "'", specimenViewStatusType25.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenViewStatusType.RECEIVED_SOME));
        org.junit.Assert.assertNotNull(putSpecimen26);
        org.junit.Assert.assertNotNull(specimenWithObservations27);
        org.junit.Assert.assertNotNull(specimenWithObservations28);
    }

    @Test
    public void test53420() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest106.test53420");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Sensor sensor0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Sensor();
        java.time.Instant instant1 = sensor0.getLastModifiedUtc();
        java.time.Instant instant2 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Sensor sensor3 = sensor0.setLastModifiedUtc(instant2);
        java.lang.String str4 = sensor0.ParameterId;
        java.lang.String str5 = sensor0.getLocationUniqueId();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Sensor sensor7 = sensor0.setLocationUniqueId("https");
        sensor7.MethodCode = "MaxInstant";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Sensor sensor11 = sensor7.setParameterId("/AQUARIUS");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Sensor sensor13 = sensor7.setUnitId("MaxInstant");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationRemark locationRemark14 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationRemark();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationRemark locationRemark16 = locationRemark14.setDescription("MaxInstant");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse17 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant18 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse19 = locationDescriptionListServiceResponse17.setNextToken(instant18);
        locationRemark16.FromTime = instant18;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationRemark locationRemark22 = locationRemark16.setRemark("/AQUARIUS/Acquisition/v2");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationRemark locationRemark24 = locationRemark22.setTypeName("/AQUARIUS");
        java.time.Instant instant25 = locationRemark22.FromTime;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationRemark locationRemark26 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationRemark();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationRemark locationRemark28 = locationRemark26.setDescription("MaxInstant");
        java.lang.String str29 = locationRemark28.getTypeName();
        java.time.Instant instant30 = locationRemark28.CreateTime;
        java.time.Instant instant31 = locationRemark28.getToTime();
        java.time.Instant instant32 = locationRemark28.FromTime;
        java.lang.String str33 = locationRemark28.Remark;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetActivities getActivities34 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetActivities();
        getActivities34.Limit = 10;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetActivities getActivities38 = getActivities34.setCustomId("/AQUARIUS/Provisioning/v1");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Qualifier qualifier39 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Qualifier();
        java.time.Instant instant40 = qualifier39.DateApplied;
        java.lang.String str41 = qualifier39.User;
        java.lang.String str42 = qualifier39.getIdentifier();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest43 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest();
        java.lang.Object obj44 = timeAlignedDataServiceRequest43.getResponseType();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse45 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant46 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse47 = locationDescriptionListServiceResponse45.setNextToken(instant46);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest48 = timeAlignedDataServiceRequest43.setQueryFrom(instant46);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Qualifier qualifier49 = qualifier39.setDateApplied(instant46);
        java.time.Instant instant50 = qualifier49.getDateApplied();
        getActivities34.ToStartTime = instant50;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationRemark locationRemark52 = locationRemark28.setCreateTime(instant50);
        java.time.Instant instant53 = locationRemark28.getCreateTime();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationRemark locationRemark54 = locationRemark22.setToTime(instant53);
        sensor13.LastModifiedUtc = instant53;
        org.junit.Assert.assertNull(instant1);
        org.junit.Assert.assertNotNull(instant2);
        org.junit.Assert.assertNotNull(sensor3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(sensor7);
        org.junit.Assert.assertNotNull(sensor11);
        org.junit.Assert.assertNotNull(sensor13);
        org.junit.Assert.assertNotNull(locationRemark16);
        org.junit.Assert.assertNotNull(instant18);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse19);
        org.junit.Assert.assertNotNull(locationRemark22);
        org.junit.Assert.assertNotNull(locationRemark24);
        org.junit.Assert.assertNotNull(instant25);
        org.junit.Assert.assertNotNull(locationRemark28);
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertNull(instant30);
        org.junit.Assert.assertNull(instant31);
        org.junit.Assert.assertNull(instant32);
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertNotNull(getActivities38);
        org.junit.Assert.assertNull(instant40);
        org.junit.Assert.assertNull(str41);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertNotNull(obj44);
        org.junit.Assert.assertEquals(obj44.toString(), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj44), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj44), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertNotNull(instant46);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse47);
        org.junit.Assert.assertNotNull(timeAlignedDataServiceRequest48);
        org.junit.Assert.assertNotNull(qualifier49);
        org.junit.Assert.assertNotNull(instant50);
        org.junit.Assert.assertNotNull(locationRemark52);
        org.junit.Assert.assertNotNull(instant53);
        org.junit.Assert.assertNotNull(locationRemark54);
    }

    @Test
    public void test53421() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest106.test53421");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.QualifierGroupsResponse qualifierGroupsResponse0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.QualifierGroupsResponse();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.QualifierGroupResponse[] qualifierGroupResponseArray1 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.QualifierGroupResponse[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.QualifierGroupResponse> qualifierGroupResponseList2 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.QualifierGroupResponse>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.QualifierGroupResponse>) qualifierGroupResponseList2, qualifierGroupResponseArray1);
        qualifierGroupsResponse0.Results = qualifierGroupResponseList2;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.QualifierGroupsResponse qualifierGroupsResponse5 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.QualifierGroupsResponse();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.QualifierGroupsResponse qualifierGroupsResponse6 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.QualifierGroupsResponse();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.QualifierGroupResponse[] qualifierGroupResponseArray7 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.QualifierGroupResponse[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.QualifierGroupResponse> qualifierGroupResponseList8 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.QualifierGroupResponse>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.QualifierGroupResponse>) qualifierGroupResponseList8, qualifierGroupResponseArray7);
        qualifierGroupsResponse6.Results = qualifierGroupResponseList8;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.QualifierGroupsResponse qualifierGroupsResponse11 = qualifierGroupsResponse5.setResults(qualifierGroupResponseList8);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.QualifierGroupsResponse qualifierGroupsResponse12 = qualifierGroupsResponse0.setResults(qualifierGroupResponseList8);
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.QualifierGroupResponse> qualifierGroupResponseList13 = qualifierGroupsResponse0.getResults();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.QualifierGroupsResponse qualifierGroupsResponse14 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.QualifierGroupsResponse();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.QualifierGroupsResponse qualifierGroupsResponse15 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.QualifierGroupsResponse();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.QualifierGroupResponse[] qualifierGroupResponseArray16 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.QualifierGroupResponse[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.QualifierGroupResponse> qualifierGroupResponseList17 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.QualifierGroupResponse>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.QualifierGroupResponse>) qualifierGroupResponseList17, qualifierGroupResponseArray16);
        qualifierGroupsResponse15.Results = qualifierGroupResponseList17;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.QualifierGroupsResponse qualifierGroupsResponse20 = qualifierGroupsResponse14.setResults(qualifierGroupResponseList17);
        qualifierGroupsResponse0.Results = qualifierGroupResponseList17;
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.QualifierGroupResponse> qualifierGroupResponseList22 = qualifierGroupsResponse0.getResults();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.QualifierGroupsResponse qualifierGroupsResponse23 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.QualifierGroupsResponse();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.QualifierGroupResponse[] qualifierGroupResponseArray24 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.QualifierGroupResponse[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.QualifierGroupResponse> qualifierGroupResponseList25 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.QualifierGroupResponse>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.QualifierGroupResponse>) qualifierGroupResponseList25, qualifierGroupResponseArray24);
        qualifierGroupsResponse23.Results = qualifierGroupResponseList25;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.QualifierGroupsResponse qualifierGroupsResponse28 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.QualifierGroupsResponse();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.QualifierGroupsResponse qualifierGroupsResponse29 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.QualifierGroupsResponse();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.QualifierGroupResponse[] qualifierGroupResponseArray30 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.QualifierGroupResponse[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.QualifierGroupResponse> qualifierGroupResponseList31 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.QualifierGroupResponse>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.QualifierGroupResponse>) qualifierGroupResponseList31, qualifierGroupResponseArray30);
        qualifierGroupsResponse29.Results = qualifierGroupResponseList31;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.QualifierGroupsResponse qualifierGroupsResponse34 = qualifierGroupsResponse28.setResults(qualifierGroupResponseList31);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.QualifierGroupsResponse qualifierGroupsResponse35 = qualifierGroupsResponse23.setResults(qualifierGroupResponseList31);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.QualifierGroupsResponse qualifierGroupsResponse36 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.QualifierGroupsResponse();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.QualifierGroupResponse[] qualifierGroupResponseArray37 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.QualifierGroupResponse[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.QualifierGroupResponse> qualifierGroupResponseList38 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.QualifierGroupResponse>();
        boolean boolean39 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.QualifierGroupResponse>) qualifierGroupResponseList38, qualifierGroupResponseArray37);
        qualifierGroupsResponse36.Results = qualifierGroupResponseList38;
        qualifierGroupsResponse35.Results = qualifierGroupResponseList38;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.QualifierGroupsResponse qualifierGroupsResponse42 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.QualifierGroupsResponse();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.QualifierGroupsResponse qualifierGroupsResponse43 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.QualifierGroupsResponse();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.QualifierGroupsResponse qualifierGroupsResponse44 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.QualifierGroupsResponse();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.QualifierGroupResponse[] qualifierGroupResponseArray45 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.QualifierGroupResponse[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.QualifierGroupResponse> qualifierGroupResponseList46 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.QualifierGroupResponse>();
        boolean boolean47 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.QualifierGroupResponse>) qualifierGroupResponseList46, qualifierGroupResponseArray45);
        qualifierGroupsResponse44.Results = qualifierGroupResponseList46;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.QualifierGroupsResponse qualifierGroupsResponse49 = qualifierGroupsResponse43.setResults(qualifierGroupResponseList46);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.QualifierGroupsResponse qualifierGroupsResponse50 = qualifierGroupsResponse42.setResults(qualifierGroupResponseList46);
        qualifierGroupsResponse35.Results = qualifierGroupResponseList46;
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.QualifierGroupResponse> qualifierGroupResponseList52 = qualifierGroupsResponse35.getResults();
        qualifierGroupsResponse0.Results = qualifierGroupResponseList52;
        org.junit.Assert.assertNotNull(qualifierGroupResponseArray1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(qualifierGroupResponseArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(qualifierGroupsResponse11);
        org.junit.Assert.assertNotNull(qualifierGroupsResponse12);
        org.junit.Assert.assertNotNull(qualifierGroupResponseList13);
        org.junit.Assert.assertNotNull(qualifierGroupResponseArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(qualifierGroupsResponse20);
        org.junit.Assert.assertNotNull(qualifierGroupResponseList22);
        org.junit.Assert.assertNotNull(qualifierGroupResponseArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(qualifierGroupResponseArray30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(qualifierGroupsResponse34);
        org.junit.Assert.assertNotNull(qualifierGroupsResponse35);
        org.junit.Assert.assertNotNull(qualifierGroupResponseArray37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(qualifierGroupResponseArray45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(qualifierGroupsResponse49);
        org.junit.Assert.assertNotNull(qualifierGroupsResponse50);
        org.junit.Assert.assertNotNull(qualifierGroupResponseList52);
    }

    @Test
    public void test53422() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest106.test53422");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationStandard observationStandard0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationStandard();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricConfiguration metricConfiguration1 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricConfiguration();
        java.lang.String str2 = metricConfiguration1.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty observedProperty3 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty();
        observedProperty3.CasNumber = "MinDuration";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricConfiguration metricConfiguration6 = metricConfiguration1.setObservedProperty(observedProperty3);
        java.lang.String str7 = observedProperty3.getDescription();
        observedProperty3.CustomId = "multipart/form-data; boundary=****2917d69a-62fa-41ce-b981-4dbe2deab9f5****";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationStandard observationStandard10 = observationStandard0.setObservedProperty(observedProperty3);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity quantity11 = observationStandard10.getResultUpperLimit();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty observedProperty12 = observationStandard10.ObservedProperty;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationStandard observationStandard13 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationStandard();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation14 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedFieldResult plannedFieldResult15 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation16 = observation14.setPlannedFieldResult(plannedFieldResult15);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabInstruction labInstruction17 = null;
        observation16.LabInstruction = labInstruction17;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationStatistics observationStatistics19 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation20 = observation16.setStatistics(observationStatistics19);
        java.time.OffsetDateTime offsetDateTime21 = observation20.getResultTime();
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple> importHistoryEventSimpleList22 = observation20.ImportHistoryEventSimples;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty observedProperty23 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation24 = observation20.setObservedProperty(observedProperty23);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultGrade resultGrade25 = observation24.ResultGrade;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails26 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails28 = labResultDetails26.setAnalysisComment("/AQUARIUS/Acquisition/v2");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes29 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails30 = labResultDetails28.setAuditAttributes(auditAttributes29);
        observation24.AuditAttributes = auditAttributes29;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricConfiguration metricConfiguration32 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricConfiguration();
        java.lang.String str33 = metricConfiguration32.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty observedProperty34 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty();
        observedProperty34.CasNumber = "MinDuration";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricConfiguration metricConfiguration37 = metricConfiguration32.setObservedProperty(observedProperty34);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultType resultType38 = observedProperty34.ResultType;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservedProperty postObservedProperty39 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservedProperty();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UnitGroup unitGroup40 = postObservedProperty39.UnitGroup;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity quantity41 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Unit unit42 = null;
        quantity41.Unit = unit42;
        postObservedProperty39.LowerLimit = quantity41;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity quantity45 = postObservedProperty39.LowerLimit;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Unit unit46 = quantity45.Unit;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty observedProperty47 = observedProperty34.setUpperLimit(quantity45);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UnitGroup unitGroup48 = observedProperty47.UnitGroup;
        observation24.ObservedProperty = observedProperty47;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty observedProperty51 = observedProperty47.setCustomId("/AQUARIUS");
        observationStandard13.ObservedProperty = observedProperty47;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationStandard observationStandard54 = observationStandard13.setRuleText("http://MaxDurationhttp/json/reply/ArrayList");
        observationStandard13.RuleText = "multipart/form-data; boundary=****bbcf5f9e-6ccf-4b63-91ab-6e645caf02af****";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.FieldTrip fieldTrip57 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.FieldTrip();
        java.lang.String str58 = fieldTrip57.CustomId;
        java.time.OffsetDateTime offsetDateTime59 = null;
        fieldTrip57.StartTime = offsetDateTime59;
        fieldTrip57.Id = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSSSSSZZZZZ";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutAccessGroup putAccessGroup63 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutAccessGroup();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivity samplingPlanPlannedActivity64 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivity();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes65 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivity samplingPlanPlannedActivity66 = samplingPlanPlannedActivity64.setAuditAttributes(auditAttributes65);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes67 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes69 = auditAttributes67.setCreationUserProfileId("'.'SSSSSSS");
        samplingPlanPlannedActivity66.AuditAttributes = auditAttributes67;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes71 = samplingPlanPlannedActivity66.AuditAttributes;
        putAccessGroup63.AuditAttributes = auditAttributes71;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutAccessGroup putAccessGroup74 = putAccessGroup63.setName("MaxInstant");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethodSimple analysisMethodSimple75 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethodSimple();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutDetectioncondition putDetectioncondition76 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutDetectioncondition();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes77 = putDetectioncondition76.getAuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutDetectioncondition putDetectioncondition79 = putDetectioncondition76.setCustomId("http");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivity samplingPlanPlannedActivity80 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivity();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes81 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivity samplingPlanPlannedActivity82 = samplingPlanPlannedActivity80.setAuditAttributes(auditAttributes81);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes83 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes85 = auditAttributes83.setCreationUserProfileId("'.'SSSSSSS");
        samplingPlanPlannedActivity82.AuditAttributes = auditAttributes83;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes87 = samplingPlanPlannedActivity82.AuditAttributes;
        putDetectioncondition76.AuditAttributes = auditAttributes87;
        analysisMethodSimple75.AuditAttributes = auditAttributes87;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutAccessGroup putAccessGroup90 = putAccessGroup74.setAuditAttributes(auditAttributes87);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.FieldTrip fieldTrip91 = fieldTrip57.setAuditAttributes(auditAttributes87);
        observationStandard13.AuditAttributes = auditAttributes87;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty observedProperty93 = observationStandard13.ObservedProperty;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity quantity94 = observedProperty93.getUpperLimit();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationStandard observationStandard95 = observationStandard10.setObservedProperty(observedProperty93);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty observedProperty96 = observationStandard95.getObservedProperty();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty observedProperty97 = observationStandard95.getObservedProperty();
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNotNull(metricConfiguration6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(observationStandard10);
        org.junit.Assert.assertNull(quantity11);
        org.junit.Assert.assertNotNull(observedProperty12);
        org.junit.Assert.assertNotNull(observation16);
        org.junit.Assert.assertNotNull(observation20);
        org.junit.Assert.assertNull(offsetDateTime21);
        org.junit.Assert.assertNull(importHistoryEventSimpleList22);
        org.junit.Assert.assertNotNull(observation24);
        org.junit.Assert.assertNull(resultGrade25);
        org.junit.Assert.assertNotNull(labResultDetails28);
        org.junit.Assert.assertNotNull(labResultDetails30);
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertNotNull(metricConfiguration37);
        org.junit.Assert.assertNull(resultType38);
        org.junit.Assert.assertNull(unitGroup40);
        org.junit.Assert.assertNotNull(quantity45);
        org.junit.Assert.assertNull(unit46);
        org.junit.Assert.assertNotNull(observedProperty47);
        org.junit.Assert.assertNull(unitGroup48);
        org.junit.Assert.assertNotNull(observedProperty51);
        org.junit.Assert.assertNotNull(observationStandard54);
        org.junit.Assert.assertNull(str58);
        org.junit.Assert.assertNotNull(samplingPlanPlannedActivity66);
        org.junit.Assert.assertNotNull(auditAttributes69);
        org.junit.Assert.assertNotNull(auditAttributes71);
        org.junit.Assert.assertNotNull(putAccessGroup74);
        org.junit.Assert.assertNull(auditAttributes77);
        org.junit.Assert.assertNotNull(putDetectioncondition79);
        org.junit.Assert.assertNotNull(samplingPlanPlannedActivity82);
        org.junit.Assert.assertNotNull(auditAttributes85);
        org.junit.Assert.assertNotNull(auditAttributes87);
        org.junit.Assert.assertNotNull(putAccessGroup90);
        org.junit.Assert.assertNotNull(fieldTrip91);
        org.junit.Assert.assertNotNull(observedProperty93);
        org.junit.Assert.assertNotNull(quantity94);
        org.junit.Assert.assertNotNull(observationStandard95);
        org.junit.Assert.assertNotNull(observedProperty96);
        org.junit.Assert.assertNotNull(observedProperty97);
    }

    @Test
    public void test53423() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest106.test53423");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutTag putTag0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutTag();
        java.lang.String str1 = putTag0.Name;
        java.lang.String str2 = putTag0.getName();
        java.lang.String str3 = putTag0.Description;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes4 = putTag0.AuditAttributes;
        java.lang.String str5 = putTag0.getId();
        java.lang.String str6 = putTag0.getId();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(auditAttributes4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(str6);
    }

    @Test
    public void test53424() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest106.test53424");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescription locationDescription0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescription();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescription locationDescription2 = locationDescription0.setIdentifier("");
        locationDescription2.UtcOffset = 1.0d;
        java.lang.Boolean boolean5 = locationDescription2.getIsExternalLocation();
        java.lang.String str6 = locationDescription2.getName();
        java.lang.String str7 = locationDescription2.UniqueId;
        java.lang.String str8 = locationDescription2.Name;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescription locationDescription10 = locationDescription2.setName("http://MaxDurationhttp/json/reply/Integer");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescription locationDescription12 = locationDescription2.setName("/AQUARIUS");
        java.lang.Boolean boolean13 = locationDescription12.isPublish();
        org.junit.Assert.assertNotNull(locationDescription2);
        org.junit.Assert.assertNull(boolean5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(locationDescription10);
        org.junit.Assert.assertNotNull(locationDescription12);
        org.junit.Assert.assertNull(boolean13);
    }

    @Test
    public void test53425() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest106.test53425");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ControlConditionActivity controlConditionActivity0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ControlConditionActivity();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ControlCleanedType controlCleanedType1 = null;
        controlConditionActivity0.ControlCleaned = controlCleanedType1;
        java.time.Instant instant3 = controlConditionActivity0.getDateCleaned();
        java.lang.String str4 = controlConditionActivity0.FlowOverControl;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ControlConditionActivity controlConditionActivity6 = controlConditionActivity0.setComments("yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSSSSSZZZZZ");
        java.time.Instant instant7 = controlConditionActivity0.getDateCleaned();
        java.time.Instant instant8 = controlConditionActivity0.DateCleaned;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Vertical vertical9 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Vertical();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay10 = null;
        vertical9.EffectiveDepth = quantityWithDisplay10;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Vertical vertical13 = vertical9.setPercentageOfTotalDischarge((java.lang.Double) (-1.0d));
        java.lang.Double double14 = vertical9.getCosineOfUniqueFlow();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CrossSectionPoint crossSectionPoint15 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CrossSectionPoint();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay16 = null;
        crossSectionPoint15.Distance = quantityWithDisplay16;
        crossSectionPoint15.PointOrder = 1;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay20 = crossSectionPoint15.getElevation();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CrossSectionPoint crossSectionPoint22 = crossSectionPoint15.setComments("hi!");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay23 = null;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CrossSectionPoint crossSectionPoint24 = crossSectionPoint22.setElevation(quantityWithDisplay23);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay25 = null;
        crossSectionPoint24.Depth = quantityWithDisplay25;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DatumConvertedQuantityWithDisplay datumConvertedQuantityWithDisplay27 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DatumConvertedQuantityWithDisplay();
        crossSectionPoint24.Depth = datumConvertedQuantityWithDisplay27;
        java.lang.String str29 = datumConvertedQuantityWithDisplay27.TargetDatum;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Vertical vertical30 = vertical9.setSegmentArea((com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay) datumConvertedQuantityWithDisplay27);
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Calibration> calibrationList31 = vertical9.getCalibrations();
        vertical9.CosineOfUniqueFlow = 0.0d;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Vertical vertical35 = vertical9.setIsSoundedDepthEstimated((java.lang.Boolean) true);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VerticalType verticalType36 = vertical9.getVerticalType();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetActivities getActivities37 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetActivities();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse38 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary39 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary41 = dischargeSummary39.setPublish((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse42 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant43 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse44 = locationDescriptionListServiceResponse42.setNextToken(instant43);
        dischargeSummary39.MeasurementTime = instant43;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse46 = locationDescriptionListServiceResponse38.setNextToken(instant43);
        java.time.Instant instant47 = locationDescriptionListServiceResponse38.getNextToken();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetActivities getActivities48 = getActivities37.setToStartTime(instant47);
        java.lang.String str49 = getActivities48.getSort();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetActivities getActivities51 = getActivities48.setLimit((java.lang.Integer) 1);
        getActivities51.Cursor = "";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_54 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray57 = new java.lang.String[] { "", "" };
        java.util.ArrayList<java.lang.String> strList58 = new java.util.ArrayList<java.lang.String>();
        boolean boolean59 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList58, strArray57);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_60 = getObservationsV2_54.setDataClassifications((java.util.List<java.lang.String>) strList58);
        java.util.List<java.lang.String> strList61 = getObservationsV2_54.ResultGrades;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary62 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        dischargeSummary62.Reviewer = "";
        java.time.Instant instant65 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        dischargeSummary62.MeasurementTime = instant65;
        getObservationsV2_54.StartResultTime = instant65;
        java.lang.String[] strArray77 = new java.lang.String[] { "https", "/AQUARIUS/Provisioning/v1", "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ", "2021.4.62.0", "hi!", "2021.4.62.0", "2021.4.62.0", "/AQUARIUS/Acquisition/v2", "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ" };
        java.util.ArrayList<java.lang.String> strList78 = new java.util.ArrayList<java.lang.String>();
        boolean boolean79 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList78, strArray77);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_80 = getObservationsV2_54.setAnalyticalGroupIds((java.util.List<java.lang.String>) strList78);
        getActivities51.ActivityTypes = strList78;
        java.lang.String str82 = getActivities51.Sort;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Qualifier qualifier83 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Qualifier();
        java.time.Instant instant84 = qualifier83.DateApplied;
        java.lang.String str85 = qualifier83.User;
        java.lang.String str86 = qualifier83.getIdentifier();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest87 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest();
        java.lang.Object obj88 = timeAlignedDataServiceRequest87.getResponseType();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse89 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant90 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse91 = locationDescriptionListServiceResponse89.setNextToken(instant90);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest92 = timeAlignedDataServiceRequest87.setQueryFrom(instant90);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Qualifier qualifier93 = qualifier83.setDateApplied(instant90);
        java.time.Instant instant94 = qualifier93.getDateApplied();
        getActivities51.ToStartTime = instant94;
        java.time.Instant instant96 = getActivities51.ToStartTime;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Vertical vertical97 = vertical9.setMeasurementTime(instant96);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ControlConditionActivity controlConditionActivity98 = controlConditionActivity0.setDateCleaned(instant96);
        org.junit.Assert.assertNull(instant3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNotNull(controlConditionActivity6);
        org.junit.Assert.assertNull(instant7);
        org.junit.Assert.assertNull(instant8);
        org.junit.Assert.assertNotNull(vertical13);
        org.junit.Assert.assertNull(double14);
        org.junit.Assert.assertNull(quantityWithDisplay20);
        org.junit.Assert.assertNotNull(crossSectionPoint22);
        org.junit.Assert.assertNotNull(crossSectionPoint24);
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertNotNull(vertical30);
        org.junit.Assert.assertNull(calibrationList31);
        org.junit.Assert.assertNotNull(vertical35);
        org.junit.Assert.assertNull(verticalType36);
        org.junit.Assert.assertNotNull(dischargeSummary41);
        org.junit.Assert.assertNotNull(instant43);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse44);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse46);
        org.junit.Assert.assertNotNull(instant47);
        org.junit.Assert.assertNotNull(getActivities48);
        org.junit.Assert.assertNull(str49);
        org.junit.Assert.assertNotNull(getActivities51);
        org.junit.Assert.assertNotNull(strArray57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(getObservationsV2_60);
        org.junit.Assert.assertNull(strList61);
        org.junit.Assert.assertNotNull(instant65);
        org.junit.Assert.assertNotNull(strArray77);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
        org.junit.Assert.assertNotNull(getObservationsV2_80);
        org.junit.Assert.assertNull(str82);
        org.junit.Assert.assertNull(instant84);
        org.junit.Assert.assertNull(str85);
        org.junit.Assert.assertNull(str86);
        org.junit.Assert.assertNotNull(obj88);
        org.junit.Assert.assertEquals(obj88.toString(), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj88), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj88), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertNotNull(instant90);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse91);
        org.junit.Assert.assertNotNull(timeAlignedDataServiceRequest92);
        org.junit.Assert.assertNotNull(qualifier93);
        org.junit.Assert.assertNotNull(instant94);
        org.junit.Assert.assertNotNull(instant96);
        org.junit.Assert.assertNotNull(vertical97);
        org.junit.Assert.assertNotNull(controlConditionActivity98);
    }

    @Test
    public void test53426() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest106.test53426");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutTag putTag0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutTag();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlan samplingPlan1 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlan();
        samplingPlan1.SamplingLocationGroupSelectionTypeRandomCount = 0;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationGroupSelectionType samplingLocationGroupSelectionType4 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationGroupSelectionType.ALL;
        samplingPlan1.SamplingLocationGroupSelectionType = samplingLocationGroupSelectionType4;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationGroup samplingLocationGroup6 = samplingPlan1.getSamplingLocationGroup();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes7 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlan samplingPlan8 = samplingPlan1.setAuditAttributes(auditAttributes7);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutTag putTag9 = putTag0.setAuditAttributes(auditAttributes7);
        putTag0.Description = "0001-01-01T00:00:00.000Z";
        java.lang.String str12 = putTag0.getDescription();
        org.junit.Assert.assertTrue("'" + samplingLocationGroupSelectionType4 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationGroupSelectionType.ALL + "'", samplingLocationGroupSelectionType4.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationGroupSelectionType.ALL));
        org.junit.Assert.assertNull(samplingLocationGroup6);
        org.junit.Assert.assertNotNull(samplingPlan8);
        org.junit.Assert.assertNotNull(putTag9);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "0001-01-01T00:00:00.000Z" + "'", str12, "0001-01-01T00:00:00.000Z");
    }

    @Test
    public void test53427() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest106.test53427");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutParameter putParameter0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutParameter();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ParameterBase parameterBase2 = putParameter0.setUnitGroupIdentifier("/AQUARIUS/Provisioning/v1");
        java.lang.String str3 = putParameter0.getRoundingSpec();
        java.lang.String str4 = putParameter0.RoundingSpec;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ParameterBase parameterBase6 = putParameter0.setRoundingSpec("multipart/form-data; boundary=****bbcf5f9e-6ccf-4b63-91ab-6e645caf02af****");
        java.lang.Double double7 = parameterBase6.getMaxValue();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostDatumConvertedTimeSeries postDatumConvertedTimeSeries8 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostDatumConvertedTimeSeries();
        postDatumConvertedTimeSeries8.SourceIsLocalAssumedDatum = false;
        java.lang.String str11 = postDatumConvertedTimeSeries8.getComputationIdentifier();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.InterpolationType interpolationType12 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.InterpolationType.InstantaneousValues;
        postDatumConvertedTimeSeries8.InterpolationType = interpolationType12;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ParameterBase parameterBase14 = parameterBase6.setInterpolationType(interpolationType12);
        java.lang.String str15 = parameterBase6.getRoundingSpec();
        parameterBase6.DisplayName = "hi!:///AQUARIUS/Provisioning/v1";
        java.lang.String str18 = parameterBase6.getUnitIdentifier();
        parameterBase6.ParameterId = "/AQUARIUS/Publish/v2";
        org.junit.Assert.assertNotNull(parameterBase2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNotNull(parameterBase6);
        org.junit.Assert.assertNull(double7);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertTrue("'" + interpolationType12 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.InterpolationType.InstantaneousValues + "'", interpolationType12.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.InterpolationType.InstantaneousValues));
        org.junit.Assert.assertNotNull(parameterBase14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "multipart/form-data; boundary=****bbcf5f9e-6ccf-4b63-91ab-6e645caf02af****" + "'", str15, "multipart/form-data; boundary=****bbcf5f9e-6ccf-4b63-91ab-6e645caf02af****");
        org.junit.Assert.assertNull(str18);
    }

    @Test
    public void test53428() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest106.test53428");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemTaxon importItemTaxon0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemTaxon();
        java.util.List<java.lang.String> strList1 = importItemTaxon0.getWarningMessages();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Taxon taxon2 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemTaxon importItemTaxon3 = importItemTaxon0.setItem(taxon2);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostCalculatedDerivedTimeSeries postCalculatedDerivedTimeSeries4 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostCalculatedDerivedTimeSeries();
        java.lang.String str5 = postCalculatedDerivedTimeSeries4.LocationUniqueId;
        java.util.List<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeValue> extendedAttributeValueList6 = postCalculatedDerivedTimeSeries4.getExtendedAttributeValues();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemTaxon importItemTaxon7 = importItemTaxon3.setErrors((java.lang.Object) postCalculatedDerivedTimeSeries4);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObject importItemObject8 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObject();
        java.util.List<java.lang.String> strList9 = importItemObject8.getWarningMessages();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportChangeItem[] importChangeItemArray10 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportChangeItem[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportChangeItem> importChangeItemList11 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportChangeItem>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportChangeItem>) importChangeItemList11, importChangeItemArray10);
        importItemObject8.ItemComparison = importChangeItemList11;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags14 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray18 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList19 = new java.util.ArrayList<java.lang.String>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList19, strArray18);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags21 = putLocationTags14.setTagUniqueIds(strList19);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObject importItemObject22 = importItemObject8.setExistingItem((java.lang.Object) putLocationTags14);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.OpenIdConnectUser openIdConnectUser23 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.OpenIdConnectUser();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.OpenIdConnectUser openIdConnectUser25 = openIdConnectUser23.setIdentifier("");
        java.lang.Boolean boolean26 = openIdConnectUser25.CanConfigureSystem;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObject importItemObject27 = importItemObject8.setErrors((java.lang.Object) openIdConnectUser25);
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportChangeItem> importChangeItemList28 = importItemObject27.ItemComparison;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemTaxon importItemTaxon29 = importItemTaxon7.setItemComparison(importChangeItemList28);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemTaxon importItemTaxon30 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemTaxon();
        java.util.List<java.lang.String> strList31 = importItemTaxon30.getWarningMessages();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Taxon taxon32 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemTaxon importItemTaxon33 = importItemTaxon30.setItem(taxon32);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostCalculatedDerivedTimeSeries postCalculatedDerivedTimeSeries34 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostCalculatedDerivedTimeSeries();
        java.lang.String str35 = postCalculatedDerivedTimeSeries34.LocationUniqueId;
        java.util.List<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeValue> extendedAttributeValueList36 = postCalculatedDerivedTimeSeries34.getExtendedAttributeValues();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemTaxon importItemTaxon37 = importItemTaxon33.setErrors((java.lang.Object) postCalculatedDerivedTimeSeries34);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Taxon taxon38 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Taxon();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemTaxon importItemTaxon39 = importItemTaxon33.setExistingItem(taxon38);
        importItemTaxon7.Item = taxon38;
        taxon38.ItisTsn = "yyyy'-'MM'-'dd'T'HH':'mm':'ss";
        java.lang.String str43 = taxon38.ItisTsn;
        taxon38.ItisComment = "https";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Taxon taxon47 = taxon38.setItisTsn("multipart/form-data; boundary=****2917d69a-62fa-41ce-b981-4dbe2deab9f5****");
        java.lang.String str48 = taxon38.getCommonName();
        java.lang.String str49 = taxon38.CommonName;
        org.junit.Assert.assertNull(strList1);
        org.junit.Assert.assertNotNull(importItemTaxon3);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(extendedAttributeValueList6);
        org.junit.Assert.assertNotNull(importItemTaxon7);
        org.junit.Assert.assertNull(strList9);
        org.junit.Assert.assertNotNull(importChangeItemArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(putLocationTags21);
        org.junit.Assert.assertNotNull(importItemObject22);
        org.junit.Assert.assertNotNull(openIdConnectUser25);
        org.junit.Assert.assertNull(boolean26);
        org.junit.Assert.assertNotNull(importItemObject27);
        org.junit.Assert.assertNotNull(importChangeItemList28);
        org.junit.Assert.assertNotNull(importItemTaxon29);
        org.junit.Assert.assertNull(strList31);
        org.junit.Assert.assertNotNull(importItemTaxon33);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertNull(extendedAttributeValueList36);
        org.junit.Assert.assertNotNull(importItemTaxon37);
        org.junit.Assert.assertNotNull(importItemTaxon39);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "yyyy'-'MM'-'dd'T'HH':'mm':'ss" + "'", str43, "yyyy'-'MM'-'dd'T'HH':'mm':'ss");
        org.junit.Assert.assertNotNull(taxon47);
        org.junit.Assert.assertNull(str48);
        org.junit.Assert.assertNull(str49);
    }

    @Test
    public void test53429() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest106.test53429");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetSamplingLocations getSamplingLocations0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetSamplingLocations();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ReportListServiceRequest reportListServiceRequest1 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ReportListServiceRequest();
        reportListServiceRequest1.ReportTitle = "MinDuration";
        reportListServiceRequest1.LocationUniqueId = "/AQUARIUS";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportSpecimens getExportSpecimens6 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportSpecimens();
        java.util.List<java.lang.String> strList7 = getExportSpecimens6.getActivityTypes();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Qualifier qualifier8 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Qualifier();
        java.time.Instant instant9 = qualifier8.DateApplied;
        java.lang.String str10 = qualifier8.User;
        java.lang.String str11 = qualifier8.getIdentifier();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest12 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest();
        java.lang.Object obj13 = timeAlignedDataServiceRequest12.getResponseType();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse14 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant15 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse16 = locationDescriptionListServiceResponse14.setNextToken(instant15);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest17 = timeAlignedDataServiceRequest12.setQueryFrom(instant15);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Qualifier qualifier18 = qualifier8.setDateApplied(instant15);
        getExportSpecimens6.Before = instant15;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationRemark locationRemark20 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationRemark();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationRemark locationRemark22 = locationRemark20.setDescription("MaxInstant");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitDataServiceResponse fieldVisitDataServiceResponse23 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitDataServiceResponse();
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CrossSectionSurveyActivity> crossSectionSurveyActivityList24 = fieldVisitDataServiceResponse23.CrossSectionSurveyActivity;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitDataServiceResponse fieldVisitDataServiceResponse26 = fieldVisitDataServiceResponse23.setIdentifier("");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary27 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        dischargeSummary27.Reviewer = "";
        java.time.Instant instant30 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        dischargeSummary27.MeasurementTime = instant30;
        fieldVisitDataServiceResponse23.ResponseTime = instant30;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationRemark locationRemark33 = locationRemark20.setCreateTime(instant30);
        getExportSpecimens6.EndModificationTime = instant30;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ReportListServiceRequest reportListServiceRequest35 = reportListServiceRequest1.setCreatedFrom(instant30);
        getSamplingLocations0.StartModificationTime = instant30;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_37 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray40 = new java.lang.String[] { "", "" };
        java.util.ArrayList<java.lang.String> strList41 = new java.util.ArrayList<java.lang.String>();
        boolean boolean42 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList41, strArray40);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_43 = getObservationsV2_37.setDataClassifications((java.util.List<java.lang.String>) strList41);
        getObservationsV2_43.DepthUnitCustomId = "hi!";
        java.lang.String str46 = getObservationsV2_43.CustomId;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_47 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray49 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList50 = new java.util.ArrayList<java.lang.String>();
        boolean boolean51 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList50, strArray49);
        getObservationsV2_47.SpecimenIds = strList50;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags53 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray57 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList58 = new java.util.ArrayList<java.lang.String>();
        boolean boolean59 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList58, strArray57);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags60 = putLocationTags53.setTagUniqueIds(strList58);
        getObservationsV2_47.QualityControlTypes = strList58;
        java.util.List<java.lang.String> strList62 = getObservationsV2_47.getAnalyticalGroupIds();
        java.util.List<java.lang.String> strList63 = getObservationsV2_47.DataClassifications;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.FieldResultType fieldResultType64 = getObservationsV2_47.FieldResultType;
        java.time.Instant instant65 = getObservationsV2_47.getEndObservedTime();
        java.lang.String str66 = getObservationsV2_47.DepthUnitCustomId;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags67 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray71 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList72 = new java.util.ArrayList<java.lang.String>();
        boolean boolean73 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList72, strArray71);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags74 = putLocationTags67.setTagUniqueIds(strList72);
        java.util.ArrayList<java.lang.String> strList75 = putLocationTags74.TagUniqueIds;
        getObservationsV2_47.ProjectIds = strList75;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_77 = getObservationsV2_43.setQualityControlTypes((java.util.List<java.lang.String>) strList75);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetSamplingLocations getSamplingLocations78 = getSamplingLocations0.setLocationTypeIds((java.util.List<java.lang.String>) strList75);
        java.lang.Integer int79 = getSamplingLocations78.getLimit();
        java.util.List<java.lang.String> strList80 = getSamplingLocations78.LocationGroupTypeIds;
        org.junit.Assert.assertNull(strList7);
        org.junit.Assert.assertNull(instant9);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNotNull(obj13);
        org.junit.Assert.assertEquals(obj13.toString(), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj13), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj13), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertNotNull(instant15);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse16);
        org.junit.Assert.assertNotNull(timeAlignedDataServiceRequest17);
        org.junit.Assert.assertNotNull(qualifier18);
        org.junit.Assert.assertNotNull(locationRemark22);
        org.junit.Assert.assertNull(crossSectionSurveyActivityList24);
        org.junit.Assert.assertNotNull(fieldVisitDataServiceResponse26);
        org.junit.Assert.assertNotNull(instant30);
        org.junit.Assert.assertNotNull(locationRemark33);
        org.junit.Assert.assertNotNull(reportListServiceRequest35);
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(getObservationsV2_43);
        org.junit.Assert.assertNull(str46);
        org.junit.Assert.assertNotNull(strArray49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNotNull(strArray57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(putLocationTags60);
        org.junit.Assert.assertNull(strList62);
        org.junit.Assert.assertNull(strList63);
        org.junit.Assert.assertNull(fieldResultType64);
        org.junit.Assert.assertNull(instant65);
        org.junit.Assert.assertNull(str66);
        org.junit.Assert.assertNotNull(strArray71);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertNotNull(putLocationTags74);
        org.junit.Assert.assertNotNull(strList75);
        org.junit.Assert.assertNotNull(getObservationsV2_77);
        org.junit.Assert.assertNotNull(getSamplingLocations78);
        org.junit.Assert.assertNull(int79);
        org.junit.Assert.assertNull(strList80);
    }

    @Test
    public void test53430() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest106.test53430");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.OpenIdConnectRelyingPartyConfiguration openIdConnectRelyingPartyConfiguration0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.OpenIdConnectRelyingPartyConfiguration();
        java.lang.String str1 = openIdConnectRelyingPartyConfiguration0.getClientIdentifier();
        openIdConnectRelyingPartyConfiguration0.ClientIdentifier = "MaxDuration";
        java.lang.String str4 = openIdConnectRelyingPartyConfiguration0.IssuerIdentifier;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.OpenIdConnectRelyingPartyConfiguration openIdConnectRelyingPartyConfiguration6 = openIdConnectRelyingPartyConfiguration0.setIssuerIdentifier("multipart/form-data; boundary=****895246ac-50fd-4284-9cd4-5cdd869d7100****");
        java.lang.String str7 = openIdConnectRelyingPartyConfiguration0.IdentifierClaim;
        java.util.List<java.lang.String> strList8 = openIdConnectRelyingPartyConfiguration0.HostedDomains;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNotNull(openIdConnectRelyingPartyConfiguration6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(strList8);
    }

    @Test
    public void test53431() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest106.test53431");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SearchResultTimeZone searchResultTimeZone0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SearchResultTimeZone();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SearchResultTimeZone searchResultTimeZone2 = searchResultTimeZone0.setCursor("/AQUARIUS/Acquisition/v2://9999-12-31T23:59:59.999Z");
        java.lang.Integer int3 = searchResultTimeZone2.TotalCount;
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.TimeZone> timeZoneList4 = searchResultTimeZone2.getDomainObjects();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SearchResultTimeZone searchResultTimeZone6 = searchResultTimeZone2.setCursor("multipart/form-data; boundary=****1165d1f3-8b30-4f2e-8d0b-ffebab458859****");
        java.lang.String str7 = searchResultTimeZone6.getCursor();
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.TimeZone> timeZoneList8 = searchResultTimeZone6.getDomainObjects();
        org.junit.Assert.assertNotNull(searchResultTimeZone2);
        org.junit.Assert.assertNull(int3);
        org.junit.Assert.assertNull(timeZoneList4);
        org.junit.Assert.assertNotNull(searchResultTimeZone6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "multipart/form-data; boundary=****1165d1f3-8b30-4f2e-8d0b-ffebab458859****" + "'", str7, "multipart/form-data; boundary=****1165d1f3-8b30-4f2e-8d0b-ffebab458859****");
        org.junit.Assert.assertNull(timeZoneList8);
    }

    @Test
    public void test53432() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest106.test53432");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutActiveDirectoryAuth putActiveDirectoryAuth0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutActiveDirectoryAuth();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutActiveDirectoryAuth putActiveDirectoryAuth2 = putActiveDirectoryAuth0.setUserPrincipalName("yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ");
        java.lang.String str3 = putActiveDirectoryAuth2.getUserPrincipalName();
        java.lang.Object obj4 = putActiveDirectoryAuth2.getResponseType();
        java.lang.String str5 = putActiveDirectoryAuth2.UserPrincipalName;
        putActiveDirectoryAuth2.UniqueId = "hi!";
        java.lang.String str8 = putActiveDirectoryAuth2.ActiveDirectorySid;
        java.lang.String str9 = putActiveDirectoryAuth2.ActiveDirectorySid;
        java.lang.String str10 = putActiveDirectoryAuth2.UserPrincipalName;
        org.junit.Assert.assertNotNull(putActiveDirectoryAuth2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ" + "'", str3, "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ");
        org.junit.Assert.assertNotNull(obj4);
        org.junit.Assert.assertEquals(obj4.toString(), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning$User");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj4), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning$User");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj4), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning$User");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ" + "'", str5, "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ");
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ" + "'", str10, "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ");
    }

    @Test
    public void test53433() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest106.test53433");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutFieldTrip putFieldTrip0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutFieldTrip();
        java.time.OffsetDateTime offsetDateTime1 = putFieldTrip0.StartTime;
        java.time.OffsetDateTime offsetDateTime2 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutFieldTrip putFieldTrip3 = putFieldTrip0.setStartTime(offsetDateTime2);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutFieldTrip putFieldTrip5 = putFieldTrip3.setParticipants("http://MaxDurationhttp/json/reply/Integer");
        java.time.OffsetDateTime offsetDateTime6 = null;
        putFieldTrip3.StartTime = offsetDateTime6;
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.FieldVisit> fieldVisitList8 = putFieldTrip3.getFieldVisits();
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment> domainObjectAttachmentList9 = putFieldTrip3.Attachments;
        java.time.OffsetDateTime offsetDateTime10 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutFieldTrip putFieldTrip11 = putFieldTrip3.setEndTime(offsetDateTime10);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutFieldTrip putFieldTrip13 = putFieldTrip11.setNotes("****231224c4-98ce-4e30-bd65-1d25287c4abe****");
        java.time.OffsetDateTime offsetDateTime14 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutFieldTrip putFieldTrip15 = putFieldTrip11.setStartTime(offsetDateTime14);
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment> domainObjectAttachmentList16 = putFieldTrip15.Attachments;
        org.junit.Assert.assertNull(offsetDateTime1);
        org.junit.Assert.assertNotNull(putFieldTrip3);
        org.junit.Assert.assertNotNull(putFieldTrip5);
        org.junit.Assert.assertNull(fieldVisitList8);
        org.junit.Assert.assertNull(domainObjectAttachmentList9);
        org.junit.Assert.assertNotNull(putFieldTrip11);
        org.junit.Assert.assertNotNull(putFieldTrip13);
        org.junit.Assert.assertNotNull(putFieldTrip15);
        org.junit.Assert.assertNull(domainObjectAttachmentList16);
    }

    @Test
    public void test53434() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest106.test53434");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutAttachment putAttachment0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutAttachment();
        putAttachment0.Latitude = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ";
        java.lang.Object obj3 = putAttachment0.getResponseType();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutAttachment putAttachment5 = putAttachment0.setFileName("hi!:///AQUARIUS/Provisioning/v1");
        java.lang.Integer int6 = putAttachment0.FileSize;
        java.lang.String str7 = putAttachment0.getResolution();
        java.lang.Object obj8 = putAttachment0.getResponseType();
        org.junit.Assert.assertNotNull(obj3);
        org.junit.Assert.assertEquals(obj3.toString(), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$Attachment");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj3), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$Attachment");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj3), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$Attachment");
        org.junit.Assert.assertNotNull(putAttachment5);
        org.junit.Assert.assertNull(int6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(obj8);
        org.junit.Assert.assertEquals(obj8.toString(), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$Attachment");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj8), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$Attachment");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj8), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$Attachment");
    }

    @Test
    public void test53435() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest106.test53435");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemSamplingLocation importItemSamplingLocation0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemSamplingLocation();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemSamplingLocation importItemSamplingLocation2 = importItemSamplingLocation0.setInput("yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItem importItem3 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_4 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray6 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList7 = new java.util.ArrayList<java.lang.String>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList7, strArray6);
        getObservationsV2_4.SpecimenIds = strList7;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags10 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray14 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList15 = new java.util.ArrayList<java.lang.String>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList15, strArray14);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags17 = putLocationTags10.setTagUniqueIds(strList15);
        getObservationsV2_4.QualityControlTypes = strList15;
        java.util.List<java.lang.String> strList19 = getObservationsV2_4.getLabReportIds();
        importItem3.Errors = getObservationsV2_4;
        java.lang.Object obj21 = importItem3.getExistingItem();
        importItem3.Input = "hi!";
        java.lang.Object obj24 = importItem3.getItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemStatusType importItemStatusType25 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemStatusType.SKIPPED;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItem importItem26 = importItem3.setStatus(importItemStatusType25);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemSamplingLocation importItemSamplingLocation27 = importItemSamplingLocation2.setStatus(importItemStatusType25);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocation samplingLocation28 = importItemSamplingLocation2.Item;
        java.util.List<java.lang.String> strList29 = importItemSamplingLocation2.WarningMessages;
        java.lang.Object obj30 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemSamplingLocation importItemSamplingLocation31 = importItemSamplingLocation2.setErrors(obj30);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemSamplingLocation importItemSamplingLocation33 = importItemSamplingLocation2.setRowId("MinInstant");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutFieldVisit putFieldVisit34 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutFieldVisit();
        putFieldVisit34.Notes = "MinDuration";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ProjectSimple projectSimple37 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutFieldVisit putFieldVisit38 = putFieldVisit34.setProject(projectSimple37);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Schedule schedule39 = putFieldVisit34.getSchedule();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlan samplingPlan40 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlan();
        samplingPlan40.SamplingLocationGroupSelectionTypeRandomCount = 0;
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivity> samplingPlanPlannedActivityList43 = samplingPlan40.PlannedActivities;
        java.lang.String str44 = samplingPlan40.CustomId;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutFieldVisit putFieldVisit45 = putFieldVisit34.setSamplingPlan(samplingPlan40);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation46 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedFieldResult plannedFieldResult47 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation48 = observation46.setPlannedFieldResult(plannedFieldResult47);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabInstruction labInstruction49 = null;
        observation48.LabInstruction = labInstruction49;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservationStatistics observationStatistics51 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation52 = observation48.setStatistics(observationStatistics51);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Taxon taxon53 = null;
        observation48.RelatedTaxon = taxon53;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultStatus resultStatus55 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation56 = observation48.setResultStatus(resultStatus55);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocation samplingLocation57 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocation();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricConfiguration metricConfiguration58 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricConfiguration();
        java.lang.String str59 = metricConfiguration58.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty observedProperty60 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty();
        observedProperty60.CasNumber = "MinDuration";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricConfiguration metricConfiguration63 = metricConfiguration58.setObservedProperty(observedProperty60);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultType resultType64 = observedProperty60.ResultType;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservedProperty postObservedProperty65 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservedProperty();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UnitGroup unitGroup66 = postObservedProperty65.UnitGroup;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity quantity67 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Unit unit68 = null;
        quantity67.Unit = unit68;
        postObservedProperty65.LowerLimit = quantity67;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity quantity71 = postObservedProperty65.LowerLimit;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Unit unit72 = quantity71.Unit;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty observedProperty73 = observedProperty60.setUpperLimit(quantity71);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocation samplingLocation74 = samplingLocation57.setElevation(quantity71);
        observation56.SamplingLocation = samplingLocation57;
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple> importHistoryEventSimpleList76 = null;
        samplingLocation57.ImportHistoryEventSimples = importHistoryEventSimpleList76;
        putFieldVisit45.SamplingLocation = samplingLocation57;
        importItemSamplingLocation2.Item = samplingLocation57;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemStatusType importItemStatusType80 = null;
        importItemSamplingLocation2.Status = importItemStatusType80;
        org.junit.Assert.assertNotNull(importItemSamplingLocation2);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(putLocationTags17);
        org.junit.Assert.assertNull(strList19);
        org.junit.Assert.assertNull(obj21);
        org.junit.Assert.assertNull(obj24);
        org.junit.Assert.assertTrue("'" + importItemStatusType25 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemStatusType.SKIPPED + "'", importItemStatusType25.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemStatusType.SKIPPED));
        org.junit.Assert.assertNotNull(importItem26);
        org.junit.Assert.assertNotNull(importItemSamplingLocation27);
        org.junit.Assert.assertNull(samplingLocation28);
        org.junit.Assert.assertNull(strList29);
        org.junit.Assert.assertNotNull(importItemSamplingLocation31);
        org.junit.Assert.assertNotNull(importItemSamplingLocation33);
        org.junit.Assert.assertNotNull(putFieldVisit38);
        org.junit.Assert.assertNull(schedule39);
        org.junit.Assert.assertNull(samplingPlanPlannedActivityList43);
        org.junit.Assert.assertNull(str44);
        org.junit.Assert.assertNotNull(putFieldVisit45);
        org.junit.Assert.assertNotNull(observation48);
        org.junit.Assert.assertNotNull(observation52);
        org.junit.Assert.assertNotNull(observation56);
        org.junit.Assert.assertNull(str59);
        org.junit.Assert.assertNotNull(metricConfiguration63);
        org.junit.Assert.assertNull(resultType64);
        org.junit.Assert.assertNull(unitGroup66);
        org.junit.Assert.assertNotNull(quantity71);
        org.junit.Assert.assertNull(unit72);
        org.junit.Assert.assertNotNull(observedProperty73);
        org.junit.Assert.assertNotNull(samplingLocation74);
    }

    @Test
    public void test53436() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest106.test53436");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesUniqueIds timeSeriesUniqueIds0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesUniqueIds();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesUniqueIds timeSeriesUniqueIds2 = timeSeriesUniqueIds0.setIsDeleted((java.lang.Boolean) true);
        timeSeriesUniqueIds0.UniqueId = "-PT87591240H";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesThresholdPeriod timeSeriesThresholdPeriod5 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesThresholdPeriod();
        java.time.Instant instant6 = timeSeriesThresholdPeriod5.StartTime;
        java.time.Instant instant7 = timeSeriesThresholdPeriod5.StartTime;
        java.time.Instant instant8 = timeSeriesThresholdPeriod5.getStartTime();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutRecurringReport putRecurringReport9 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutRecurringReport();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.LocationDatumPeriod locationDatumPeriod10 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.LocationDatumPeriod();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.LocationDatumPeriodBase locationDatumPeriodBase12 = locationDatumPeriod10.setComment("'.'SSSSSSS");
        java.lang.Double double13 = locationDatumPeriodBase12.Elevation;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Qualifier qualifier14 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Qualifier();
        java.time.Instant instant15 = qualifier14.DateApplied;
        java.lang.String str16 = qualifier14.User;
        java.lang.String str17 = qualifier14.getIdentifier();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest18 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest();
        java.lang.Object obj19 = timeAlignedDataServiceRequest18.getResponseType();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse20 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant21 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse22 = locationDescriptionListServiceResponse20.setNextToken(instant21);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest23 = timeAlignedDataServiceRequest18.setQueryFrom(instant21);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Qualifier qualifier24 = qualifier14.setDateApplied(instant21);
        java.time.Instant instant25 = qualifier24.getDateApplied();
        locationDatumPeriodBase12.ValidFrom = instant25;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RecurringReportBase recurringReportBase27 = putRecurringReport9.setNextGenerationDate(instant25);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesThresholdPeriod timeSeriesThresholdPeriod28 = timeSeriesThresholdPeriod5.setStartTime(instant25);
        timeSeriesUniqueIds0.LastMatchedTime = instant25;
        java.lang.Boolean boolean30 = timeSeriesUniqueIds0.IsDeleted;
        java.lang.Boolean boolean31 = timeSeriesUniqueIds0.getIsDeleted();
        java.time.Instant instant32 = timeSeriesUniqueIds0.LastMatchedTime;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesUniqueIds timeSeriesUniqueIds34 = timeSeriesUniqueIds0.setUniqueId("2021.4.62.0");
        java.time.Instant instant35 = timeSeriesUniqueIds0.LastMatchedTime;
        java.lang.String str36 = timeSeriesUniqueIds0.UniqueId;
        org.junit.Assert.assertNotNull(timeSeriesUniqueIds2);
        org.junit.Assert.assertNull(instant6);
        org.junit.Assert.assertNull(instant7);
        org.junit.Assert.assertNull(instant8);
        org.junit.Assert.assertNotNull(locationDatumPeriodBase12);
        org.junit.Assert.assertNull(double13);
        org.junit.Assert.assertNull(instant15);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertNotNull(obj19);
        org.junit.Assert.assertEquals(obj19.toString(), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj19), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj19), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertNotNull(instant21);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse22);
        org.junit.Assert.assertNotNull(timeAlignedDataServiceRequest23);
        org.junit.Assert.assertNotNull(qualifier24);
        org.junit.Assert.assertNotNull(instant25);
        org.junit.Assert.assertNotNull(recurringReportBase27);
        org.junit.Assert.assertNotNull(timeSeriesThresholdPeriod28);
        org.junit.Assert.assertEquals("'" + boolean30 + "' != '" + true + "'", boolean30, true);
        org.junit.Assert.assertEquals("'" + boolean31 + "' != '" + true + "'", boolean31, true);
        org.junit.Assert.assertNotNull(instant32);
        org.junit.Assert.assertNotNull(timeSeriesUniqueIds34);
        org.junit.Assert.assertNotNull(instant35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "2021.4.62.0" + "'", str36, "2021.4.62.0");
    }

    @Test
    public void test53437() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest106.test53437");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedPoint timeAlignedPoint0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedPoint();
        java.lang.Long long1 = timeAlignedPoint0.getApprovalLevel6();
        java.lang.Double double2 = timeAlignedPoint0.getNumericValue8();
        org.junit.Assert.assertNull(long1);
        org.junit.Assert.assertNull(double2);
    }

    @Test
    public void test53438() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest106.test53438");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetMediumHistory getMediumHistory0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetMediumHistory();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetMediumHistory getMediumHistory2 = getMediumHistory0.setId("MaxInstant");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetMediumHistory getMediumHistory4 = getMediumHistory2.setId("hi!");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetMediumHistory getMediumHistory6 = getMediumHistory2.setId("ZZZZZ");
        java.lang.String str7 = getMediumHistory6.Id;
        java.lang.String str8 = getMediumHistory6.Id;
        org.junit.Assert.assertNotNull(getMediumHistory2);
        org.junit.Assert.assertNotNull(getMediumHistory4);
        org.junit.Assert.assertNotNull(getMediumHistory6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "ZZZZZ" + "'", str7, "ZZZZZ");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "ZZZZZ" + "'", str8, "ZZZZZ");
    }

    @Test
    public void test53439() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest106.test53439");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostUnitGroupWithUnit postUnitGroupWithUnit0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostUnitGroupWithUnit();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostUnitGroupWithUnit postUnitGroupWithUnit2 = postUnitGroupWithUnit0.setCustomId("hi!");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostUnitGroupWithUnit postUnitGroupWithUnit3 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostUnitGroupWithUnit();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostUnitGroupWithUnit postUnitGroupWithUnit5 = postUnitGroupWithUnit3.setCustomId("hi!");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UnitGroupWithUnitsSystemCodeType unitGroupWithUnitsSystemCodeType6 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UnitGroupWithUnitsSystemCodeType.LENGTH;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostUnitGroupWithUnit postUnitGroupWithUnit7 = postUnitGroupWithUnit5.setSystemCode(unitGroupWithUnitsSystemCodeType6);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostUnitGroupWithUnit postUnitGroupWithUnit8 = postUnitGroupWithUnit2.setSystemCode(unitGroupWithUnitsSystemCodeType6);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutAnalyticalGroup putAnalyticalGroup9 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutAnalyticalGroup();
        java.lang.Object obj10 = putAnalyticalGroup9.getResponseType();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroup analyticalGroup11 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroup();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem analyticalGroupItem12 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod13 = analyticalGroupItem12.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem analyticalGroupItem14 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod15 = analyticalGroupItem14.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod16 = analyticalGroupItem14.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem analyticalGroupItem17 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod18 = analyticalGroupItem17.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod19 = analyticalGroupItem17.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod20 = null;
        analyticalGroupItem17.AnalysisMethod = analysisMethod20;
        java.lang.String str22 = analyticalGroupItem17.getHoldingTime();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem analyticalGroupItem23 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod24 = analyticalGroupItem23.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod25 = analyticalGroupItem23.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem analyticalGroupItem26 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod27 = analyticalGroupItem26.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem analyticalGroupItem28 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod29 = analyticalGroupItem28.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod30 = analyticalGroupItem28.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod31 = null;
        analyticalGroupItem28.AnalysisMethod = analysisMethod31;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem[] analyticalGroupItemArray33 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem[] { analyticalGroupItem12, analyticalGroupItem14, analyticalGroupItem17, analyticalGroupItem23, analyticalGroupItem26, analyticalGroupItem28 };
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem> analyticalGroupItemList34 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem>) analyticalGroupItemList34, analyticalGroupItemArray33);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroup analyticalGroup36 = analyticalGroup11.setAnalyticalGroupItems((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem>) analyticalGroupItemList34);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutAnalyticalGroup putAnalyticalGroup37 = putAnalyticalGroup9.setAnalyticalGroupItems((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem>) analyticalGroupItemList34);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutUnitGroupWithUnit putUnitGroupWithUnit38 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutUnitGroupWithUnit();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutUnitGroupWithUnit putUnitGroupWithUnit40 = putUnitGroupWithUnit38.setId("yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UnitGroupSystemCodeType unitGroupSystemCodeType41 = putUnitGroupWithUnit38.SystemCode;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutAccessGroup putAccessGroup42 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutAccessGroup();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivity samplingPlanPlannedActivity43 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivity();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes44 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivity samplingPlanPlannedActivity45 = samplingPlanPlannedActivity43.setAuditAttributes(auditAttributes44);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes46 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes48 = auditAttributes46.setCreationUserProfileId("'.'SSSSSSS");
        samplingPlanPlannedActivity45.AuditAttributes = auditAttributes46;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes50 = samplingPlanPlannedActivity45.AuditAttributes;
        putAccessGroup42.AuditAttributes = auditAttributes50;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutUnitGroupWithUnit putUnitGroupWithUnit52 = putUnitGroupWithUnit38.setAuditAttributes(auditAttributes50);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutAnalyticalGroup putAnalyticalGroup53 = putAnalyticalGroup9.setAuditAttributes(auditAttributes50);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostUnitGroupWithUnit postUnitGroupWithUnit54 = postUnitGroupWithUnit2.setAuditAttributes(auditAttributes50);
        java.lang.Object obj55 = postUnitGroupWithUnit54.getResponseType();
        java.lang.Object obj56 = postUnitGroupWithUnit54.getResponseType();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostUnitGroupWithUnit postUnitGroupWithUnit57 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostUnitGroupWithUnit();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostUnitGroupWithUnit postUnitGroupWithUnit59 = postUnitGroupWithUnit57.setCustomId("hi!");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UnitGroupWithUnitsSystemCodeType unitGroupWithUnitsSystemCodeType60 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UnitGroupWithUnitsSystemCodeType.LENGTH;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostUnitGroupWithUnit postUnitGroupWithUnit61 = postUnitGroupWithUnit59.setSystemCode(unitGroupWithUnitsSystemCodeType60);
        postUnitGroupWithUnit54.SystemCode = unitGroupWithUnitsSystemCodeType60;
        java.lang.String str63 = postUnitGroupWithUnit54.CustomId;
        org.junit.Assert.assertNotNull(postUnitGroupWithUnit2);
        org.junit.Assert.assertNotNull(postUnitGroupWithUnit5);
        org.junit.Assert.assertTrue("'" + unitGroupWithUnitsSystemCodeType6 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UnitGroupWithUnitsSystemCodeType.LENGTH + "'", unitGroupWithUnitsSystemCodeType6.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UnitGroupWithUnitsSystemCodeType.LENGTH));
        org.junit.Assert.assertNotNull(postUnitGroupWithUnit7);
        org.junit.Assert.assertNotNull(postUnitGroupWithUnit8);
        org.junit.Assert.assertNotNull(obj10);
        org.junit.Assert.assertEquals(obj10.toString(), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$AnalyticalGroup");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj10), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$AnalyticalGroup");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj10), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$AnalyticalGroup");
        org.junit.Assert.assertNull(analysisMethod13);
        org.junit.Assert.assertNull(analysisMethod15);
        org.junit.Assert.assertNull(analysisMethod16);
        org.junit.Assert.assertNull(analysisMethod18);
        org.junit.Assert.assertNull(analysisMethod19);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertNull(analysisMethod24);
        org.junit.Assert.assertNull(analysisMethod25);
        org.junit.Assert.assertNull(analysisMethod27);
        org.junit.Assert.assertNull(analysisMethod29);
        org.junit.Assert.assertNull(analysisMethod30);
        org.junit.Assert.assertNotNull(analyticalGroupItemArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(analyticalGroup36);
        org.junit.Assert.assertNotNull(putAnalyticalGroup37);
        org.junit.Assert.assertNotNull(putUnitGroupWithUnit40);
        org.junit.Assert.assertNull(unitGroupSystemCodeType41);
        org.junit.Assert.assertNotNull(samplingPlanPlannedActivity45);
        org.junit.Assert.assertNotNull(auditAttributes48);
        org.junit.Assert.assertNotNull(auditAttributes50);
        org.junit.Assert.assertNotNull(putUnitGroupWithUnit52);
        org.junit.Assert.assertNotNull(putAnalyticalGroup53);
        org.junit.Assert.assertNotNull(postUnitGroupWithUnit54);
        org.junit.Assert.assertNotNull(obj55);
        org.junit.Assert.assertEquals(obj55.toString(), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$UnitGroupWithUnits");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj55), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$UnitGroupWithUnits");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj55), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$UnitGroupWithUnits");
        org.junit.Assert.assertNotNull(obj56);
        org.junit.Assert.assertEquals(obj56.toString(), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$UnitGroupWithUnits");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj56), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$UnitGroupWithUnits");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj56), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$UnitGroupWithUnits");
        org.junit.Assert.assertNotNull(postUnitGroupWithUnit59);
        org.junit.Assert.assertTrue("'" + unitGroupWithUnitsSystemCodeType60 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UnitGroupWithUnitsSystemCodeType.LENGTH + "'", unitGroupWithUnitsSystemCodeType60.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UnitGroupWithUnitsSystemCodeType.LENGTH));
        org.junit.Assert.assertNotNull(postUnitGroupWithUnit61);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "hi!" + "'", str63, "hi!");
    }

    @Test
    public void test53440() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest106.test53440");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ChartData chartData0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ChartData();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty observedProperty1 = chartData0.getObservedProperty();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocation samplingLocation2 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocation();
        java.lang.String str3 = samplingLocation2.Description;
        java.lang.String str4 = samplingLocation2.VerticalCollectionMethod;
        java.lang.String str5 = samplingLocation2.getLongitude();
        java.lang.String str6 = samplingLocation2.Id;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Address address7 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocation samplingLocation8 = samplingLocation2.setAddress(address7);
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple> importHistoryEventSimpleList9 = samplingLocation8.ImportHistoryEventSimples;
        samplingLocation8.VerticalCollectionMethod = "/AQUARIUS/Acquisition/v2://9999-12-31T23:59:59.999Z";
        chartData0.SamplingLocation = samplingLocation8;
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment> domainObjectAttachmentList13 = samplingLocation8.Attachments;
        org.junit.Assert.assertNull(observedProperty1);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNotNull(samplingLocation8);
        org.junit.Assert.assertNull(importHistoryEventSimpleList9);
        org.junit.Assert.assertNull(domainObjectAttachmentList13);
    }

    @Test
    public void test53441() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest106.test53441");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetStandardHistory getStandardHistory0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetStandardHistory();
        getStandardHistory0.Id = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ";
        java.lang.String str3 = getStandardHistory0.Id;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetStandardHistory getStandardHistory5 = getStandardHistory0.setId("");
        java.lang.String str6 = getStandardHistory0.getId();
        getStandardHistory0.Id = "multipart/form-data; boundary=****139d2780-c7bb-430f-8369-46ea90b53b7d****";
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ" + "'", str3, "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ");
        org.junit.Assert.assertNotNull(getStandardHistory5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
    }

    @Test
    public void test53442() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest106.test53442");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDataServiceResponse timeSeriesDataServiceResponse0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDataServiceResponse();
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.InterpolationType> interpolationTypeList1 = timeSeriesDataServiceResponse0.InterpolationTypes;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDataServiceResponse timeSeriesDataServiceResponse3 = timeSeriesDataServiceResponse0.setLabel("/AQUARIUS");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDataServiceResponse timeSeriesDataServiceResponse5 = timeSeriesDataServiceResponse0.setParameter("multipart/form-data; boundary=****44f0772e-c3ca-4316-8e2a-61ec8540d661****");
        java.lang.String str6 = timeSeriesDataServiceResponse5.Unit;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDataServiceResponse timeSeriesDataServiceResponse7 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDataServiceResponse();
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.InterpolationType> interpolationTypeList8 = timeSeriesDataServiceResponse7.InterpolationTypes;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDataServiceResponse timeSeriesDataServiceResponse10 = timeSeriesDataServiceResponse7.setLabel("/AQUARIUS");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDataServiceResponse timeSeriesDataServiceResponse12 = timeSeriesDataServiceResponse10.setUniqueId("multipart/form-data; boundary=****bbcf5f9e-6ccf-4b63-91ab-6e645caf02af****");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDataServiceResponse timeSeriesDataServiceResponse14 = timeSeriesDataServiceResponse10.setLabel("MinDuration");
        java.lang.String str15 = timeSeriesDataServiceResponse10.getParameter();
        java.lang.String str16 = timeSeriesDataServiceResponse10.UniqueId;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Grade grade17 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Grade();
        java.lang.String str18 = grade17.GradeCode;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Grade grade20 = grade17.setGradeCode("/AQUARIUS/Acquisition/v2://9999-12-31T23:59:59.999Z");
        java.lang.String str21 = grade17.GradeCode;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Grade grade22 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Grade();
        java.lang.String str23 = grade22.GradeCode;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Grade grade25 = grade22.setGradeCode("/AQUARIUS/Acquisition/v2://9999-12-31T23:59:59.999Z");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Grade grade26 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Grade();
        java.lang.String str27 = grade26.GradeCode;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Grade grade29 = grade26.setGradeCode("/AQUARIUS/Acquisition/v2://9999-12-31T23:59:59.999Z");
        java.lang.String str30 = grade26.GradeCode;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Grade[] gradeArray31 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Grade[] { grade17, grade22, grade26 };
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Grade> gradeList32 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Grade>();
        boolean boolean33 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Grade>) gradeList32, gradeArray31);
        timeSeriesDataServiceResponse10.Grades = gradeList32;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.StatisticalTimeRange statisticalTimeRange35 = timeSeriesDataServiceResponse10.getTimeRange();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDataServiceResponse timeSeriesDataServiceResponse36 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDataServiceResponse();
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.InterpolationType> interpolationTypeList37 = timeSeriesDataServiceResponse36.InterpolationTypes;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDataServiceResponse timeSeriesDataServiceResponse39 = timeSeriesDataServiceResponse36.setLabel("/AQUARIUS");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDataServiceResponse timeSeriesDataServiceResponse41 = timeSeriesDataServiceResponse39.setUniqueId("multipart/form-data; boundary=****bbcf5f9e-6ccf-4b63-91ab-6e645caf02af****");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDataServiceResponse timeSeriesDataServiceResponse43 = timeSeriesDataServiceResponse39.setLabel("MinDuration");
        java.lang.String str44 = timeSeriesDataServiceResponse39.getParameter();
        java.lang.String str45 = timeSeriesDataServiceResponse39.UniqueId;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Grade grade46 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Grade();
        java.lang.String str47 = grade46.GradeCode;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Grade grade49 = grade46.setGradeCode("/AQUARIUS/Acquisition/v2://9999-12-31T23:59:59.999Z");
        java.lang.String str50 = grade46.GradeCode;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Grade grade51 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Grade();
        java.lang.String str52 = grade51.GradeCode;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Grade grade54 = grade51.setGradeCode("/AQUARIUS/Acquisition/v2://9999-12-31T23:59:59.999Z");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Grade grade55 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Grade();
        java.lang.String str56 = grade55.GradeCode;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Grade grade58 = grade55.setGradeCode("/AQUARIUS/Acquisition/v2://9999-12-31T23:59:59.999Z");
        java.lang.String str59 = grade55.GradeCode;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Grade[] gradeArray60 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Grade[] { grade46, grade51, grade55 };
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Grade> gradeList61 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Grade>();
        boolean boolean62 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Grade>) gradeList61, gradeArray60);
        timeSeriesDataServiceResponse39.Grades = gradeList61;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDataServiceResponse timeSeriesDataServiceResponse64 = timeSeriesDataServiceResponse10.setGrades(gradeList61);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDataServiceResponse timeSeriesDataServiceResponse65 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDataServiceResponse();
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.InterpolationType> interpolationTypeList66 = timeSeriesDataServiceResponse65.InterpolationTypes;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDataServiceResponse timeSeriesDataServiceResponse68 = timeSeriesDataServiceResponse65.setLabel("/AQUARIUS");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDataServiceResponse timeSeriesDataServiceResponse70 = timeSeriesDataServiceResponse68.setUniqueId("multipart/form-data; boundary=****bbcf5f9e-6ccf-4b63-91ab-6e645caf02af****");
        timeSeriesDataServiceResponse68.ResponseVersion = 2;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDataServiceResponse timeSeriesDataServiceResponse73 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDataServiceResponse();
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.InterpolationType> interpolationTypeList74 = timeSeriesDataServiceResponse73.InterpolationTypes;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Note note75 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Note();
        java.time.Instant instant76 = note75.StartTime;
        note75.NoteText = "'.'SSSSSSS";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Note[] noteArray79 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Note[] { note75 };
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Note> noteList80 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Note>();
        boolean boolean81 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Note>) noteList80, noteArray79);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDataServiceResponse timeSeriesDataServiceResponse82 = timeSeriesDataServiceResponse73.setNotes(noteList80);
        timeSeriesDataServiceResponse68.Notes = noteList80;
        timeSeriesDataServiceResponse10.Notes = noteList80;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDataServiceResponse timeSeriesDataServiceResponse85 = timeSeriesDataServiceResponse5.setNotes(noteList80);
        timeSeriesDataServiceResponse5.NumPoints = 100L;
        org.junit.Assert.assertNull(interpolationTypeList1);
        org.junit.Assert.assertNotNull(timeSeriesDataServiceResponse3);
        org.junit.Assert.assertNotNull(timeSeriesDataServiceResponse5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(interpolationTypeList8);
        org.junit.Assert.assertNotNull(timeSeriesDataServiceResponse10);
        org.junit.Assert.assertNotNull(timeSeriesDataServiceResponse12);
        org.junit.Assert.assertNotNull(timeSeriesDataServiceResponse14);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "multipart/form-data; boundary=****bbcf5f9e-6ccf-4b63-91ab-6e645caf02af****" + "'", str16, "multipart/form-data; boundary=****bbcf5f9e-6ccf-4b63-91ab-6e645caf02af****");
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNotNull(grade20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "/AQUARIUS/Acquisition/v2://9999-12-31T23:59:59.999Z" + "'", str21, "/AQUARIUS/Acquisition/v2://9999-12-31T23:59:59.999Z");
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertNotNull(grade25);
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertNotNull(grade29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "/AQUARIUS/Acquisition/v2://9999-12-31T23:59:59.999Z" + "'", str30, "/AQUARIUS/Acquisition/v2://9999-12-31T23:59:59.999Z");
        org.junit.Assert.assertNotNull(gradeArray31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNull(statisticalTimeRange35);
        org.junit.Assert.assertNull(interpolationTypeList37);
        org.junit.Assert.assertNotNull(timeSeriesDataServiceResponse39);
        org.junit.Assert.assertNotNull(timeSeriesDataServiceResponse41);
        org.junit.Assert.assertNotNull(timeSeriesDataServiceResponse43);
        org.junit.Assert.assertNull(str44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "multipart/form-data; boundary=****bbcf5f9e-6ccf-4b63-91ab-6e645caf02af****" + "'", str45, "multipart/form-data; boundary=****bbcf5f9e-6ccf-4b63-91ab-6e645caf02af****");
        org.junit.Assert.assertNull(str47);
        org.junit.Assert.assertNotNull(grade49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "/AQUARIUS/Acquisition/v2://9999-12-31T23:59:59.999Z" + "'", str50, "/AQUARIUS/Acquisition/v2://9999-12-31T23:59:59.999Z");
        org.junit.Assert.assertNull(str52);
        org.junit.Assert.assertNotNull(grade54);
        org.junit.Assert.assertNull(str56);
        org.junit.Assert.assertNotNull(grade58);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "/AQUARIUS/Acquisition/v2://9999-12-31T23:59:59.999Z" + "'", str59, "/AQUARIUS/Acquisition/v2://9999-12-31T23:59:59.999Z");
        org.junit.Assert.assertNotNull(gradeArray60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertNotNull(timeSeriesDataServiceResponse64);
        org.junit.Assert.assertNull(interpolationTypeList66);
        org.junit.Assert.assertNotNull(timeSeriesDataServiceResponse68);
        org.junit.Assert.assertNotNull(timeSeriesDataServiceResponse70);
        org.junit.Assert.assertNull(interpolationTypeList74);
        org.junit.Assert.assertNull(instant76);
        org.junit.Assert.assertNotNull(noteArray79);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
        org.junit.Assert.assertNotNull(timeSeriesDataServiceResponse82);
        org.junit.Assert.assertNotNull(timeSeriesDataServiceResponse85);
    }

    @Test
    public void test53443() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest106.test53443");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivityTemplate postActivityTemplate0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivityTemplate();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity quantity1 = postActivityTemplate0.Depth;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivityTemplate postActivityTemplate3 = postActivityTemplate0.setId("/AQUARIUS");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivityTemplate postActivityTemplate5 = postActivityTemplate3.setCustomId("/AQUARIUS");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivityTemplate postActivityTemplate7 = postActivityTemplate3.setId("MaxInstant");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ActivityTemplateType activityTemplateType8 = postActivityTemplate3.Type;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.CollectionMethod collectionMethod9 = null;
        postActivityTemplate3.CollectionMethod = collectionMethod9;
        java.lang.String str11 = postActivityTemplate3.Comment;
        org.junit.Assert.assertNull(quantity1);
        org.junit.Assert.assertNotNull(postActivityTemplate3);
        org.junit.Assert.assertNotNull(postActivityTemplate5);
        org.junit.Assert.assertNotNull(postActivityTemplate7);
        org.junit.Assert.assertNull(activityTemplateType8);
        org.junit.Assert.assertNull(str11);
    }

    @Test
    public void test53444() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest106.test53444");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExtendedAttributes getExtendedAttributes0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExtendedAttributes();
        java.lang.Object obj1 = getExtendedAttributes0.getResponseType();
        getExtendedAttributes0.CustomId = "MinInstant";
        org.junit.Assert.assertNotNull(obj1);
        org.junit.Assert.assertEquals(obj1.toString(), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$SearchResultExtendedAttributeDefinition");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj1), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$SearchResultExtendedAttributeDefinition");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj1), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$SearchResultExtendedAttributeDefinition");
    }

    @Test
    public void test53445() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest106.test53445");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ShippingContainer shippingContainer0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ShippingContainer();
        java.lang.String str1 = shippingContainer0.TrackingId;
        java.lang.String str2 = shippingContainer0.Id;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity postActivity3 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity();
        postActivity3.LoggerFileName = "hi!";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity plannedActivity6 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity postActivity7 = postActivity3.setPlannedActivity(plannedActivity6);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ActivityType activityType8 = postActivity3.Type;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFieldVisitActivityWithTemplate postFieldVisitActivityWithTemplate9 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFieldVisitActivityWithTemplate();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate10 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate();
        specimenTemplate10.CustomId = "hi!";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate13 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate14 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate();
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabInstructionTemplate> labInstructionTemplateList15 = specimenTemplate14.getLabInstructionTemplates();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate16 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate18 = specimenTemplate16.setCustomId("hi!");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate19 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate20 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate();
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabInstructionTemplate> labInstructionTemplateList21 = specimenTemplate20.LabInstructionTemplates;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate[] specimenTemplateArray22 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate[] { specimenTemplate10, specimenTemplate13, specimenTemplate14, specimenTemplate18, specimenTemplate19, specimenTemplate20 };
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate> specimenTemplateList23 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate>) specimenTemplateList23, specimenTemplateArray22);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFieldVisitActivityWithTemplate postFieldVisitActivityWithTemplate25 = postFieldVisitActivityWithTemplate9.setSpecimenTemplates((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate>) specimenTemplateList23);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.CollectionMethod collectionMethod26 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.CollectionMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFieldVisitActivityWithTemplate postFieldVisitActivityWithTemplate27 = postFieldVisitActivityWithTemplate25.setCollectionMethod(collectionMethod26);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity postActivity28 = postActivity3.setCollectionMethod(collectionMethod26);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Medium medium29 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Medium();
        postActivity3.Medium = medium29;
        medium29.CustomId = "-PT87591240H";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroup analyticalGroup33 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroup();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupType analyticalGroupType34 = analyticalGroup33.getType();
        analyticalGroup33.Name = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSSSSSZZZZZ";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroup analyticalGroup37 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroup();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem analyticalGroupItem38 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod39 = analyticalGroupItem38.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem analyticalGroupItem40 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod41 = analyticalGroupItem40.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod42 = analyticalGroupItem40.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem analyticalGroupItem43 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod44 = analyticalGroupItem43.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod45 = analyticalGroupItem43.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod46 = null;
        analyticalGroupItem43.AnalysisMethod = analysisMethod46;
        java.lang.String str48 = analyticalGroupItem43.getHoldingTime();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem analyticalGroupItem49 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod50 = analyticalGroupItem49.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod51 = analyticalGroupItem49.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem analyticalGroupItem52 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod53 = analyticalGroupItem52.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem analyticalGroupItem54 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod55 = analyticalGroupItem54.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod56 = analyticalGroupItem54.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod57 = null;
        analyticalGroupItem54.AnalysisMethod = analysisMethod57;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem[] analyticalGroupItemArray59 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem[] { analyticalGroupItem38, analyticalGroupItem40, analyticalGroupItem43, analyticalGroupItem49, analyticalGroupItem52, analyticalGroupItem54 };
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem> analyticalGroupItemList60 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem>();
        boolean boolean61 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem>) analyticalGroupItemList60, analyticalGroupItemArray59);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroup analyticalGroup62 = analyticalGroup37.setAnalyticalGroupItems((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem>) analyticalGroupItemList60);
        analyticalGroup33.AnalyticalGroupItems = analyticalGroupItemList60;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes64 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes();
        analyticalGroup33.AuditAttributes = auditAttributes64;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Medium medium66 = medium29.setAuditAttributes(auditAttributes64);
        shippingContainer0.AuditAttributes = auditAttributes64;
        java.lang.String str68 = shippingContainer0.getTrackingId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ShippingContainer shippingContainer70 = shippingContainer0.setId("0001-01-01T00:00:00.000Z");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ShippingContainer shippingContainer72 = shippingContainer70.setCustomId("MinDuration");
        shippingContainer70.TrackingId = "multipart/form-data; boundary=****4b3b82c5-fb27-4c5a-8cf6-cb2705168ae1****";
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNotNull(postActivity7);
        org.junit.Assert.assertNull(activityType8);
        org.junit.Assert.assertNull(labInstructionTemplateList15);
        org.junit.Assert.assertNotNull(specimenTemplate18);
        org.junit.Assert.assertNull(labInstructionTemplateList21);
        org.junit.Assert.assertNotNull(specimenTemplateArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(postFieldVisitActivityWithTemplate25);
        org.junit.Assert.assertNotNull(postFieldVisitActivityWithTemplate27);
        org.junit.Assert.assertNotNull(postActivity28);
        org.junit.Assert.assertNull(analyticalGroupType34);
        org.junit.Assert.assertNull(analysisMethod39);
        org.junit.Assert.assertNull(analysisMethod41);
        org.junit.Assert.assertNull(analysisMethod42);
        org.junit.Assert.assertNull(analysisMethod44);
        org.junit.Assert.assertNull(analysisMethod45);
        org.junit.Assert.assertNull(str48);
        org.junit.Assert.assertNull(analysisMethod50);
        org.junit.Assert.assertNull(analysisMethod51);
        org.junit.Assert.assertNull(analysisMethod53);
        org.junit.Assert.assertNull(analysisMethod55);
        org.junit.Assert.assertNull(analysisMethod56);
        org.junit.Assert.assertNotNull(analyticalGroupItemArray59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(analyticalGroup62);
        org.junit.Assert.assertNotNull(medium66);
        org.junit.Assert.assertNull(str68);
        org.junit.Assert.assertNotNull(shippingContainer70);
        org.junit.Assert.assertNotNull(shippingContainer72);
    }

    @Test
    public void test53446() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest106.test53446");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedPoint timeAlignedPoint0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedPoint();
        java.lang.String str1 = timeAlignedPoint0.getGradeName7();
        java.lang.Double double2 = timeAlignedPoint0.NumericValue5;
        java.lang.String str3 = timeAlignedPoint0.getMethod1();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(double2);
        org.junit.Assert.assertNull(str3);
    }

    @Test
    public void test53447() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest106.test53447");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLaboratory postLaboratory0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLaboratory();
        java.lang.String str1 = postLaboratory0.Address;
        java.lang.String str2 = postLaboratory0.Name;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivity samplingPlanPlannedActivity3 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivity();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes4 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivity samplingPlanPlannedActivity5 = samplingPlanPlannedActivity3.setAuditAttributes(auditAttributes4);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes6 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes8 = auditAttributes6.setCreationUserProfileId("'.'SSSSSSS");
        samplingPlanPlannedActivity5.AuditAttributes = auditAttributes6;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes10 = samplingPlanPlannedActivity5.AuditAttributes;
        postLaboratory0.AuditAttributes = auditAttributes10;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLaboratory postLaboratory13 = postLaboratory0.setName("yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSchedule putSchedule14 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSchedule();
        java.time.OffsetDateTime offsetDateTime15 = putSchedule14.StartDate;
        java.time.OffsetDateTime offsetDateTime16 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSchedule putSchedule17 = putSchedule14.setEndDate(offsetDateTime16);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes18 = putSchedule17.AuditAttributes;
        java.time.OffsetDateTime offsetDateTime19 = null;
        putSchedule17.LastGenerationDate = offsetDateTime19;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.RecurrenceDayMonthlyType recurrenceDayMonthlyType21 = putSchedule17.RecurrenceDayMonthly;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedFieldResult plannedFieldResult22 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedFieldResult();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes23 = plannedFieldResult22.AuditAttributes;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails24 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails26 = labResultDetails24.setAnalysisComment("/AQUARIUS/Acquisition/v2");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes27 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails28 = labResultDetails26.setAuditAttributes(auditAttributes27);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedFieldResult plannedFieldResult29 = plannedFieldResult22.setAuditAttributes(auditAttributes27);
        putSchedule17.AuditAttributes = auditAttributes27;
        postLaboratory13.AuditAttributes = auditAttributes27;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLaboratory postLaboratory33 = postLaboratory13.setDescription("hi!");
        java.lang.String str34 = postLaboratory33.Description;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNotNull(samplingPlanPlannedActivity5);
        org.junit.Assert.assertNotNull(auditAttributes8);
        org.junit.Assert.assertNotNull(auditAttributes10);
        org.junit.Assert.assertNotNull(postLaboratory13);
        org.junit.Assert.assertNull(offsetDateTime15);
        org.junit.Assert.assertNotNull(putSchedule17);
        org.junit.Assert.assertNull(auditAttributes18);
        org.junit.Assert.assertNull(recurrenceDayMonthlyType21);
        org.junit.Assert.assertNull(auditAttributes23);
        org.junit.Assert.assertNotNull(labResultDetails26);
        org.junit.Assert.assertNotNull(labResultDetails28);
        org.junit.Assert.assertNotNull(plannedFieldResult29);
        org.junit.Assert.assertNotNull(postLaboratory33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "hi!" + "'", str34, "hi!");
    }

    @Test
    public void test53448() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest106.test53448");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservationV2 postObservationV2_0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservationV2();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservationV2 postObservationV2_1 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservationV2();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabInstruction labInstruction2 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservationV2 postObservationV2_3 = postObservationV2_1.setLabInstruction(labInstruction2);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Activity activity4 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Activity();
        java.time.OffsetDateTime offsetDateTime5 = activity4.getStartTime();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Activity activity7 = activity4.setLoggerFileName("'.'SSSSSSS");
        postObservationV2_1.Activity = activity4;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutActivity putActivity9 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutActivity();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity quantity10 = null;
        putActivity9.Depth = quantity10;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutActivity putActivity12 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutActivity();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity plannedActivity13 = putActivity12.PlannedActivity;
        java.time.OffsetDateTime offsetDateTime14 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutActivity putActivity15 = putActivity12.setEndTime(offsetDateTime14);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocation samplingLocation16 = null;
        putActivity15.SamplingLocation = samplingLocation16;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservedProperty postObservedProperty18 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservedProperty();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UnitGroup unitGroup19 = postObservedProperty18.UnitGroup;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity quantity20 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Unit unit21 = null;
        quantity20.Unit = unit21;
        postObservedProperty18.LowerLimit = quantity20;
        putActivity15.Depth = quantity20;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutActivity putActivity25 = putActivity9.setDepth(quantity20);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Activity activity26 = activity4.setDepth(quantity20);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservationV2 postObservationV2_27 = postObservationV2_0.setActivity(activity26);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Activity activity29 = activity26.setLoggerFileName("http://MaxDurationhttp/json/reply/Integer");
        java.time.OffsetDateTime offsetDateTime30 = null;
        activity29.EndTime = offsetDateTime30;
        org.junit.Assert.assertNotNull(postObservationV2_3);
        org.junit.Assert.assertNull(offsetDateTime5);
        org.junit.Assert.assertNotNull(activity7);
        org.junit.Assert.assertNull(plannedActivity13);
        org.junit.Assert.assertNotNull(putActivity15);
        org.junit.Assert.assertNull(unitGroup19);
        org.junit.Assert.assertNotNull(putActivity25);
        org.junit.Assert.assertNotNull(activity26);
        org.junit.Assert.assertNotNull(postObservationV2_27);
        org.junit.Assert.assertNotNull(activity29);
    }

    @Test
    public void test53449() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest106.test53449");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ReportListServiceRequest reportListServiceRequest0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ReportListServiceRequest();
        reportListServiceRequest0.ReportTitle = "MinDuration";
        java.lang.String str3 = reportListServiceRequest0.getLocationUniqueId();
        java.time.Instant instant4 = null;
        reportListServiceRequest0.CreatedFrom = instant4;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_6 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray9 = new java.lang.String[] { "", "" };
        java.util.ArrayList<java.lang.String> strList10 = new java.util.ArrayList<java.lang.String>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList10, strArray9);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_12 = getObservationsV2_6.setDataClassifications((java.util.List<java.lang.String>) strList10);
        getObservationsV2_12.DepthUnitCustomId = "hi!";
        java.lang.String str15 = getObservationsV2_12.DepthUnitId;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Qualifier qualifier16 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Qualifier();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutBulkEditResultGradesV2 putBulkEditResultGradesV2_17 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutBulkEditResultGradesV2();
        java.lang.Double double18 = putBulkEditResultGradesV2_17.DepthValue;
        java.util.List<java.lang.String> strList19 = putBulkEditResultGradesV2_17.Media;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary20 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        dischargeSummary20.Reviewer = "";
        java.time.Instant instant23 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        dischargeSummary20.MeasurementTime = instant23;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutBulkEditResultGradesV2 putBulkEditResultGradesV2_25 = putBulkEditResultGradesV2_17.setStartModificationTime(instant23);
        qualifier16.DateApplied = instant23;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_27 = getObservationsV2_12.setStartResultTime(instant23);
        java.lang.Double double28 = getObservationsV2_12.getMaxNumericResultValue();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetActivities getActivities29 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetActivities();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse30 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary31 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary33 = dischargeSummary31.setPublish((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse34 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant35 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse36 = locationDescriptionListServiceResponse34.setNextToken(instant35);
        dischargeSummary31.MeasurementTime = instant35;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse38 = locationDescriptionListServiceResponse30.setNextToken(instant35);
        java.time.Instant instant39 = locationDescriptionListServiceResponse30.getNextToken();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetActivities getActivities40 = getActivities29.setToStartTime(instant39);
        java.lang.String str41 = getActivities40.getSort();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetActivities getActivities43 = getActivities40.setLimit((java.lang.Integer) 1);
        getActivities43.Cursor = "";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest46 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_47 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray49 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList50 = new java.util.ArrayList<java.lang.String>();
        boolean boolean51 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList50, strArray49);
        getObservationsV2_47.SpecimenIds = strList50;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags53 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray57 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList58 = new java.util.ArrayList<java.lang.String>();
        boolean boolean59 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList58, strArray57);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags60 = putLocationTags53.setTagUniqueIds(strList58);
        getObservationsV2_47.QualityControlTypes = strList58;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest62 = timeAlignedDataServiceRequest46.setTimeSeriesUniqueIds(strList58);
        getActivities43.CollectionMethodIds = strList58;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_64 = getObservationsV2_12.setSpecimenIds((java.util.List<java.lang.String>) strList58);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ReportListServiceRequest reportListServiceRequest65 = reportListServiceRequest0.setTagKeys(strList58);
        java.lang.String str66 = reportListServiceRequest0.LocationUniqueId;
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(getObservationsV2_12);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNull(double18);
        org.junit.Assert.assertNull(strList19);
        org.junit.Assert.assertNotNull(instant23);
        org.junit.Assert.assertNotNull(putBulkEditResultGradesV2_25);
        org.junit.Assert.assertNotNull(getObservationsV2_27);
        org.junit.Assert.assertNull(double28);
        org.junit.Assert.assertNotNull(dischargeSummary33);
        org.junit.Assert.assertNotNull(instant35);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse36);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse38);
        org.junit.Assert.assertNotNull(instant39);
        org.junit.Assert.assertNotNull(getActivities40);
        org.junit.Assert.assertNull(str41);
        org.junit.Assert.assertNotNull(getActivities43);
        org.junit.Assert.assertNotNull(strArray49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNotNull(strArray57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(putLocationTags60);
        org.junit.Assert.assertNotNull(timeAlignedDataServiceRequest62);
        org.junit.Assert.assertNotNull(getObservationsV2_64);
        org.junit.Assert.assertNotNull(reportListServiceRequest65);
        org.junit.Assert.assertNull(str66);
    }

    @Test
    public void test53450() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest106.test53450");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Location location0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Location();
        java.lang.Double double1 = location0.getLongitude();
        java.lang.Double double2 = location0.getLatitude();
        java.lang.Double double3 = location0.getElevation();
        org.junit.Assert.assertNull(double1);
        org.junit.Assert.assertNull(double2);
        org.junit.Assert.assertNull(double3);
    }

    @Test
    public void test53451() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest106.test53451");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSpecimen putSpecimen0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSpecimen();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSpecimen putSpecimen2 = putSpecimen0.setNumberOfRequestedObservations((java.lang.Integer) 4);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSpecimen putSpecimen4 = putSpecimen2.setDescription("-PT87591240H");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSpecimen putSpecimen6 = putSpecimen2.setDescription("hi!:///AQUARIUS/Provisioning/v1");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ShippingContainer shippingContainer7 = putSpecimen2.ShippingContainer;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PreservativeType preservativeType8 = putSpecimen2.getPreservative();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSpecimen putSpecimen10 = putSpecimen2.setDescription("");
        org.junit.Assert.assertNotNull(putSpecimen2);
        org.junit.Assert.assertNotNull(putSpecimen4);
        org.junit.Assert.assertNotNull(putSpecimen6);
        org.junit.Assert.assertNull(shippingContainer7);
        org.junit.Assert.assertNull(preservativeType8);
        org.junit.Assert.assertNotNull(putSpecimen10);
    }

    @Test
    public void test53452() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest106.test53452");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetSamplingLocations getSamplingLocations0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetSamplingLocations();
        getSamplingLocations0.Limit = (-1);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetSamplingLocations getSamplingLocations4 = getSamplingLocations0.setCustomId("2021.8.9990");
        org.junit.Assert.assertNotNull(getSamplingLocations4);
    }

    @Test
    public void test53453() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest106.test53453");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivityTemplate postActivityTemplate0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivityTemplate();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity quantity1 = postActivityTemplate0.Depth;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivityTemplate postActivityTemplate3 = postActivityTemplate0.setId("/AQUARIUS");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity quantity4 = postActivityTemplate0.Depth;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MediumType mediumType5 = postActivityTemplate0.getMedium();
        java.lang.String str6 = postActivityTemplate0.getComment();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.CollectionMethod collectionMethod7 = postActivityTemplate0.getCollectionMethod();
        java.lang.String str8 = postActivityTemplate0.getCustomId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutFieldVisit putFieldVisit9 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutFieldVisit();
        putFieldVisit9.Notes = "MinDuration";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutFieldVisit putFieldVisit12 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutFieldVisit();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity[] plannedActivityArray13 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity> plannedActivityList14 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity>) plannedActivityList14, plannedActivityArray13);
        putFieldVisit12.PlannedActivities = plannedActivityList14;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutFieldVisit putFieldVisit17 = putFieldVisit9.setPlannedActivities((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity>) plannedActivityList14);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation18 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation();
        observation18.CustomId = "hi!";
        java.lang.String str21 = observation18.CustomId;
        java.lang.String str22 = observation18.getComment();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Medium medium23 = null;
        observation18.Medium = medium23;
        java.lang.String str25 = observation18.Id;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutNullMeasureQualifier putNullMeasureQualifier26 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutNullMeasureQualifier();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutNullMeasureQualifier putNullMeasureQualifier28 = putNullMeasureQualifier26.setId("hi!");
        java.lang.String str29 = putNullMeasureQualifier26.CustomId;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLabAnalysisMethod postLabAnalysisMethod30 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLabAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes31 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLabAnalysisMethod postLabAnalysisMethod32 = postLabAnalysisMethod30.setAuditAttributes(auditAttributes31);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty[] observedPropertyArray33 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty> observedPropertyList34 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty>) observedPropertyList34, observedPropertyArray33);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLabAnalysisMethod postLabAnalysisMethod36 = postLabAnalysisMethod32.setObservedProperties((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty>) observedPropertyList34);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes37 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLabAnalysisMethod postLabAnalysisMethod38 = postLabAnalysisMethod32.setAuditAttributes(auditAttributes37);
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty> observedPropertyList39 = postLabAnalysisMethod38.getObservedProperties();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutNullMeasureQualifier putNullMeasureQualifier40 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutNullMeasureQualifier();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutNullMeasureQualifier putNullMeasureQualifier42 = putNullMeasureQualifier40.setDescription("");
        putNullMeasureQualifier40.Id = "'.'SSSSSSS";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardDefinition standardDefinition45 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardDefinition();
        java.lang.String str46 = standardDefinition45.Description;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSchedule putSchedule47 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSchedule();
        java.time.OffsetDateTime offsetDateTime48 = putSchedule47.StartDate;
        java.time.OffsetDateTime offsetDateTime49 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSchedule putSchedule50 = putSchedule47.setEndDate(offsetDateTime49);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes51 = putSchedule50.AuditAttributes;
        java.time.OffsetDateTime offsetDateTime52 = null;
        putSchedule50.LastGenerationDate = offsetDateTime52;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.RecurrenceDayMonthlyType recurrenceDayMonthlyType54 = putSchedule50.RecurrenceDayMonthly;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedFieldResult plannedFieldResult55 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedFieldResult();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes56 = plannedFieldResult55.AuditAttributes;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails57 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails59 = labResultDetails57.setAnalysisComment("/AQUARIUS/Acquisition/v2");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes60 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails61 = labResultDetails59.setAuditAttributes(auditAttributes60);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedFieldResult plannedFieldResult62 = plannedFieldResult55.setAuditAttributes(auditAttributes60);
        putSchedule50.AuditAttributes = auditAttributes60;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardDefinition standardDefinition64 = standardDefinition45.setAuditAttributes(auditAttributes60);
        java.time.OffsetDateTime offsetDateTime65 = auditAttributes60.getModificationTime();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutNullMeasureQualifier putNullMeasureQualifier66 = putNullMeasureQualifier40.setAuditAttributes(auditAttributes60);
        postLabAnalysisMethod38.AuditAttributes = auditAttributes60;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutNullMeasureQualifier putNullMeasureQualifier68 = putNullMeasureQualifier26.setAuditAttributes(auditAttributes60);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation69 = observation18.setAuditAttributes(auditAttributes60);
        putFieldVisit17.AuditAttributes = auditAttributes60;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivityTemplate postActivityTemplate71 = postActivityTemplate0.setAuditAttributes(auditAttributes60);
        org.junit.Assert.assertNull(quantity1);
        org.junit.Assert.assertNotNull(postActivityTemplate3);
        org.junit.Assert.assertNull(quantity4);
        org.junit.Assert.assertNull(mediumType5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(collectionMethod7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(plannedActivityArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(putFieldVisit17);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "hi!" + "'", str21, "hi!");
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertNotNull(putNullMeasureQualifier28);
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertNotNull(postLabAnalysisMethod32);
        org.junit.Assert.assertNotNull(observedPropertyArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(postLabAnalysisMethod36);
        org.junit.Assert.assertNotNull(postLabAnalysisMethod38);
        org.junit.Assert.assertNotNull(observedPropertyList39);
        org.junit.Assert.assertNotNull(putNullMeasureQualifier42);
        org.junit.Assert.assertNull(str46);
        org.junit.Assert.assertNull(offsetDateTime48);
        org.junit.Assert.assertNotNull(putSchedule50);
        org.junit.Assert.assertNull(auditAttributes51);
        org.junit.Assert.assertNull(recurrenceDayMonthlyType54);
        org.junit.Assert.assertNull(auditAttributes56);
        org.junit.Assert.assertNotNull(labResultDetails59);
        org.junit.Assert.assertNotNull(labResultDetails61);
        org.junit.Assert.assertNotNull(plannedFieldResult62);
        org.junit.Assert.assertNotNull(standardDefinition64);
        org.junit.Assert.assertNull(offsetDateTime65);
        org.junit.Assert.assertNotNull(putNullMeasureQualifier66);
        org.junit.Assert.assertNotNull(putNullMeasureQualifier68);
        org.junit.Assert.assertNotNull(observation69);
        org.junit.Assert.assertNotNull(postActivityTemplate71);
    }

    @Test
    public void test53454() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest106.test53454");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostSamplingLocation postSamplingLocation0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostSamplingLocation();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostSamplingLocation postSamplingLocation2 = postSamplingLocation0.setCustomId("hi!");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Address address3 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostSamplingLocation postSamplingLocation4 = postSamplingLocation0.setAddress(address3);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostSamplingLocation postSamplingLocation5 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostSamplingLocation();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostSamplingLocation postSamplingLocation6 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostSamplingLocation();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple standardSimple7 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple();
        com.aquaticinformatics.aquarius.sdk.samples.Interval interval8 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple standardSimple9 = standardSimple7.setApplicabilityRange(interval8);
        java.lang.String str10 = standardSimple7.getCustomId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple standardSimple11 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple();
        com.aquaticinformatics.aquarius.sdk.samples.Interval interval12 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple standardSimple13 = standardSimple11.setApplicabilityRange(interval12);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple standardSimple15 = standardSimple11.setActive((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple standardSimple16 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple standardSimple17 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple();
        com.aquaticinformatics.aquarius.sdk.samples.Interval interval18 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple standardSimple19 = standardSimple17.setApplicabilityRange(interval18);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple standardSimple21 = standardSimple17.setActive((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple standardSimple22 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple();
        com.aquaticinformatics.aquarius.sdk.samples.Interval interval23 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple standardSimple24 = standardSimple22.setApplicabilityRange(interval23);
        java.lang.String str25 = standardSimple24.CustomId;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple standardSimple26 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple standardSimple27 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple standardSimple28 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple();
        com.aquaticinformatics.aquarius.sdk.samples.Interval interval29 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple standardSimple30 = standardSimple28.setApplicabilityRange(interval29);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple standardSimple31 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple();
        com.aquaticinformatics.aquarius.sdk.samples.Interval interval32 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple standardSimple33 = standardSimple31.setApplicabilityRange(interval32);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple[] standardSimpleArray34 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple[] { standardSimple7, standardSimple11, standardSimple16, standardSimple17, standardSimple24, standardSimple26, standardSimple27, standardSimple30, standardSimple31 };
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple> standardSimpleList35 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple>();
        boolean boolean36 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple>) standardSimpleList35, standardSimpleArray34);
        postSamplingLocation6.Standards = standardSimpleList35;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutFieldVisit putFieldVisit38 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutFieldVisit();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity[] plannedActivityArray39 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity> plannedActivityList40 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity>();
        boolean boolean41 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity>) plannedActivityList40, plannedActivityArray39);
        putFieldVisit38.PlannedActivities = plannedActivityList40;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment43 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment();
        java.lang.String str44 = domainObjectAttachment43.getId();
        java.lang.String str45 = domainObjectAttachment43.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Attachment attachment46 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment47 = domainObjectAttachment43.setAttachment(attachment46);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment48 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment();
        java.lang.String str49 = domainObjectAttachment48.getId();
        java.lang.String str50 = domainObjectAttachment48.getId();
        domainObjectAttachment48.Id = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment54 = domainObjectAttachment48.setId("hi!");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment55 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment();
        java.lang.String str56 = domainObjectAttachment55.getId();
        java.lang.String str57 = domainObjectAttachment55.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Attachment attachment58 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment59 = domainObjectAttachment55.setAttachment(attachment58);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment60 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment();
        java.lang.String str61 = domainObjectAttachment60.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment62 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment();
        java.lang.String str63 = domainObjectAttachment62.getId();
        java.lang.String str64 = domainObjectAttachment62.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Attachment attachment65 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment66 = domainObjectAttachment62.setAttachment(attachment65);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment67 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment();
        java.lang.String str68 = domainObjectAttachment67.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment[] domainObjectAttachmentArray69 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment[] { domainObjectAttachment43, domainObjectAttachment48, domainObjectAttachment55, domainObjectAttachment60, domainObjectAttachment62, domainObjectAttachment67 };
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment> domainObjectAttachmentList70 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment>();
        boolean boolean71 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment>) domainObjectAttachmentList70, domainObjectAttachmentArray69);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutFieldVisit putFieldVisit72 = putFieldVisit38.setAttachments((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment>) domainObjectAttachmentList70);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlan samplingPlan73 = putFieldVisit38.getSamplingPlan();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.FieldTripSimple fieldTripSimple74 = putFieldVisit38.getFieldTrip();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Schedule schedule75 = putFieldVisit38.Schedule;
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment> domainObjectAttachmentList76 = putFieldVisit38.Attachments;
        postSamplingLocation6.Attachments = domainObjectAttachmentList76;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostSamplingLocation postSamplingLocation78 = postSamplingLocation5.setAttachments(domainObjectAttachmentList76);
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple> importHistoryEventSimpleList79 = postSamplingLocation5.getImportHistoryEventSimples();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostSamplingLocation postSamplingLocation81 = postSamplingLocation5.setLatitude("/AQUARIUS/Acquisition/v2");
        java.lang.String str82 = postSamplingLocation81.VerticalCollectionMethod;
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple> standardSimpleList83 = postSamplingLocation81.Standards;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LocationType locationType84 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LocationType();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostSamplingLocation postSamplingLocation85 = postSamplingLocation81.setType(locationType84);
        java.lang.String str86 = locationType84.CustomId;
        java.lang.String str87 = locationType84.getCustomId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes88 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LocationType locationType89 = locationType84.setAuditAttributes(auditAttributes88);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostSamplingLocation postSamplingLocation90 = postSamplingLocation0.setType(locationType89);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LocationType locationType91 = postSamplingLocation0.Type;
        java.lang.String str92 = locationType91.getId();
        org.junit.Assert.assertNotNull(postSamplingLocation2);
        org.junit.Assert.assertNotNull(postSamplingLocation4);
        org.junit.Assert.assertNotNull(standardSimple9);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNotNull(standardSimple13);
        org.junit.Assert.assertNotNull(standardSimple15);
        org.junit.Assert.assertNotNull(standardSimple19);
        org.junit.Assert.assertNotNull(standardSimple21);
        org.junit.Assert.assertNotNull(standardSimple24);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertNotNull(standardSimple30);
        org.junit.Assert.assertNotNull(standardSimple33);
        org.junit.Assert.assertNotNull(standardSimpleArray34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(plannedActivityArray39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNull(str44);
        org.junit.Assert.assertNull(str45);
        org.junit.Assert.assertNotNull(domainObjectAttachment47);
        org.junit.Assert.assertNull(str49);
        org.junit.Assert.assertNull(str50);
        org.junit.Assert.assertNotNull(domainObjectAttachment54);
        org.junit.Assert.assertNull(str56);
        org.junit.Assert.assertNull(str57);
        org.junit.Assert.assertNotNull(domainObjectAttachment59);
        org.junit.Assert.assertNull(str61);
        org.junit.Assert.assertNull(str63);
        org.junit.Assert.assertNull(str64);
        org.junit.Assert.assertNotNull(domainObjectAttachment66);
        org.junit.Assert.assertNull(str68);
        org.junit.Assert.assertNotNull(domainObjectAttachmentArray69);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertNotNull(putFieldVisit72);
        org.junit.Assert.assertNull(samplingPlan73);
        org.junit.Assert.assertNull(fieldTripSimple74);
        org.junit.Assert.assertNull(schedule75);
        org.junit.Assert.assertNotNull(domainObjectAttachmentList76);
        org.junit.Assert.assertNotNull(postSamplingLocation78);
        org.junit.Assert.assertNull(importHistoryEventSimpleList79);
        org.junit.Assert.assertNotNull(postSamplingLocation81);
        org.junit.Assert.assertNull(str82);
        org.junit.Assert.assertNull(standardSimpleList83);
        org.junit.Assert.assertNotNull(postSamplingLocation85);
        org.junit.Assert.assertNull(str86);
        org.junit.Assert.assertNull(str87);
        org.junit.Assert.assertNotNull(locationType89);
        org.junit.Assert.assertNotNull(postSamplingLocation90);
        org.junit.Assert.assertNotNull(locationType91);
        org.junit.Assert.assertNull(str92);
    }

    @Test
    public void test53455() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest106.test53455");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetUnitHistory getUnitHistory0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetUnitHistory();
        getUnitHistory0.Id = "/AQUARIUS/Acquisition/v2://9999-12-31T23:59:59.999Z";
        java.lang.String str3 = getUnitHistory0.Id;
        java.lang.String str4 = getUnitHistory0.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetUnitHistory getUnitHistory6 = getUnitHistory0.setId("multipart/form-data; boundary=****453bbbc7-a235-4d67-9e25-19f5ad16bf76****");
        java.lang.Object obj7 = getUnitHistory6.getResponseType();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "/AQUARIUS/Acquisition/v2://9999-12-31T23:59:59.999Z" + "'", str3, "/AQUARIUS/Acquisition/v2://9999-12-31T23:59:59.999Z");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "/AQUARIUS/Acquisition/v2://9999-12-31T23:59:59.999Z" + "'", str4, "/AQUARIUS/Acquisition/v2://9999-12-31T23:59:59.999Z");
        org.junit.Assert.assertNotNull(getUnitHistory6);
        org.junit.Assert.assertNotNull(obj7);
        org.junit.Assert.assertEquals(obj7.toString(), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$SearchResultAuditHistory");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj7), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$SearchResultAuditHistory");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj7), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$SearchResultAuditHistory");
    }

    @Test
    public void test53456() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest106.test53456");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostSchedule postSchedule0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostSchedule();
        java.time.OffsetDateTime offsetDateTime1 = postSchedule0.StartDate;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSchedule putSchedule2 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSchedule();
        java.time.OffsetDateTime offsetDateTime3 = putSchedule2.StartDate;
        java.time.OffsetDateTime offsetDateTime4 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSchedule putSchedule5 = putSchedule2.setEndDate(offsetDateTime4);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes6 = putSchedule5.AuditAttributes;
        java.time.OffsetDateTime offsetDateTime7 = putSchedule5.getEndDate();
        java.time.OffsetDateTime offsetDateTime8 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSchedule putSchedule9 = putSchedule5.setStartDate(offsetDateTime8);
        java.lang.Integer int10 = putSchedule5.SamplingLocationGroupSelectionTypeRandomCount;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.RecurrenceDayMonthlyType recurrenceDayMonthlyType11 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.RecurrenceDayMonthlyType.LAST_DAY_OF_MONTH;
        putSchedule5.RecurrenceDayMonthly = recurrenceDayMonthlyType11;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostSchedule postSchedule13 = postSchedule0.setRecurrenceDayMonthly(recurrenceDayMonthlyType11);
        java.time.OffsetDateTime offsetDateTime14 = postSchedule0.EndDate;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity postActivity15 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity();
        postActivity15.LoggerFileName = "hi!";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity postActivity19 = postActivity15.setCustomId("");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutActivity putActivity20 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutActivity();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity plannedActivity21 = null;
        putActivity20.PlannedActivity = plannedActivity21;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity postActivity23 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity();
        postActivity23.LoggerFileName = "hi!";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity plannedActivity26 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity postActivity27 = postActivity23.setPlannedActivity(plannedActivity26);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag samplingContextTag28 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag();
        java.lang.String str29 = samplingContextTag28.getDescription();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes30 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag samplingContextTag31 = samplingContextTag28.setAuditAttributes(auditAttributes30);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag samplingContextTag33 = samplingContextTag31.setId("yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag samplingContextTag34 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag();
        java.lang.String str35 = samplingContextTag34.getDescription();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag samplingContextTag36 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag();
        java.lang.String str37 = samplingContextTag36.getDescription();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes38 = null;
        samplingContextTag36.AuditAttributes = auditAttributes38;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag samplingContextTag40 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag();
        java.lang.String str41 = samplingContextTag40.getDescription();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes42 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag samplingContextTag43 = samplingContextTag40.setAuditAttributes(auditAttributes42);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag[] samplingContextTagArray44 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag[] { samplingContextTag33, samplingContextTag34, samplingContextTag36, samplingContextTag43 };
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag> samplingContextTagList45 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag>) samplingContextTagList45, samplingContextTagArray44);
        postActivity23.SamplingContextTags = samplingContextTagList45;
        putActivity20.SamplingContextTags = samplingContextTagList45;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity postActivity49 = postActivity19.setSamplingContextTags((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag>) samplingContextTagList45);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.CollectionMethod collectionMethod50 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.CollectionMethod();
        java.lang.String str51 = collectionMethod50.getCustomId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.CollectionMethod collectionMethod53 = collectionMethod50.setCustomId("MinDuration");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity postActivity54 = postActivity19.setCollectionMethod(collectionMethod53);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlan samplingPlan55 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlan();
        samplingPlan55.SamplingLocationGroupSelectionTypeRandomCount = 0;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationGroupSelectionType samplingLocationGroupSelectionType58 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationGroupSelectionType.ALL;
        samplingPlan55.SamplingLocationGroupSelectionType = samplingLocationGroupSelectionType58;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationGroup samplingLocationGroup60 = samplingPlan55.getSamplingLocationGroup();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes61 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlan samplingPlan62 = samplingPlan55.setAuditAttributes(auditAttributes61);
        collectionMethod53.AuditAttributes = auditAttributes61;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostSchedule postSchedule64 = postSchedule0.setAuditAttributes(auditAttributes61);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostSchedule postSchedule66 = postSchedule64.setSamplingLocationGroupSelectionTypeRandomCount((java.lang.Integer) 10);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.RecurrenceDayMonthlyType recurrenceDayMonthlyType67 = postSchedule66.getRecurrenceDayMonthly();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.RecurrenceDayMonthlyType recurrenceDayMonthlyType68 = postSchedule66.RecurrenceDayMonthly;
        org.junit.Assert.assertNull(offsetDateTime1);
        org.junit.Assert.assertNull(offsetDateTime3);
        org.junit.Assert.assertNotNull(putSchedule5);
        org.junit.Assert.assertNull(auditAttributes6);
        org.junit.Assert.assertNull(offsetDateTime7);
        org.junit.Assert.assertNotNull(putSchedule9);
        org.junit.Assert.assertNull(int10);
        org.junit.Assert.assertTrue("'" + recurrenceDayMonthlyType11 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.RecurrenceDayMonthlyType.LAST_DAY_OF_MONTH + "'", recurrenceDayMonthlyType11.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.RecurrenceDayMonthlyType.LAST_DAY_OF_MONTH));
        org.junit.Assert.assertNotNull(postSchedule13);
        org.junit.Assert.assertNull(offsetDateTime14);
        org.junit.Assert.assertNotNull(postActivity19);
        org.junit.Assert.assertNotNull(postActivity27);
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertNotNull(samplingContextTag31);
        org.junit.Assert.assertNotNull(samplingContextTag33);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertNull(str41);
        org.junit.Assert.assertNotNull(samplingContextTag43);
        org.junit.Assert.assertNotNull(samplingContextTagArray44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(postActivity49);
        org.junit.Assert.assertNull(str51);
        org.junit.Assert.assertNotNull(collectionMethod53);
        org.junit.Assert.assertNotNull(postActivity54);
        org.junit.Assert.assertTrue("'" + samplingLocationGroupSelectionType58 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationGroupSelectionType.ALL + "'", samplingLocationGroupSelectionType58.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationGroupSelectionType.ALL));
        org.junit.Assert.assertNull(samplingLocationGroup60);
        org.junit.Assert.assertNotNull(samplingPlan62);
        org.junit.Assert.assertNotNull(postSchedule64);
        org.junit.Assert.assertNotNull(postSchedule66);
        org.junit.Assert.assertTrue("'" + recurrenceDayMonthlyType67 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.RecurrenceDayMonthlyType.LAST_DAY_OF_MONTH + "'", recurrenceDayMonthlyType67.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.RecurrenceDayMonthlyType.LAST_DAY_OF_MONTH));
        org.junit.Assert.assertTrue("'" + recurrenceDayMonthlyType68 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.RecurrenceDayMonthlyType.LAST_DAY_OF_MONTH + "'", recurrenceDayMonthlyType68.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.RecurrenceDayMonthlyType.LAST_DAY_OF_MONTH));
    }

    @Test
    public void test53457() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest106.test53457");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostDatumConvertedTimeSeries postDatumConvertedTimeSeries0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostDatumConvertedTimeSeries();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostDatumConvertedTimeSeries postDatumConvertedTimeSeries2 = postDatumConvertedTimeSeries0.setDescription("yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ");
        postDatumConvertedTimeSeries0.Publish = false;
        postDatumConvertedTimeSeries0.Publish = false;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostDatumConvertedTimeSeries postDatumConvertedTimeSeries8 = postDatumConvertedTimeSeries0.setSubLocationIdentifier("2021.4.62.0");
        java.lang.Boolean boolean9 = postDatumConvertedTimeSeries0.TargetIsLocalAssumedDatum;
        postDatumConvertedTimeSeries0.TargetIsLocalAssumedDatum = true;
        postDatumConvertedTimeSeries0.SubLocationIdentifier = "9999-12-31T23:59:59.9999999Z://2021.4.62.0";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostDatumConvertedTimeSeries postDatumConvertedTimeSeries14 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostDatumConvertedTimeSeries();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostDatumConvertedTimeSeries postDatumConvertedTimeSeries16 = postDatumConvertedTimeSeries14.setDescription("yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ");
        postDatumConvertedTimeSeries14.Publish = false;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostLocation postLocation19 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostLocation();
        postLocation19.Description = "hi!";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeValue[] extendedAttributeValueArray22 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeValue[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeValue> extendedAttributeValueList23 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeValue>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeValue>) extendedAttributeValueList23, extendedAttributeValueArray22);
        postLocation19.ExtendedAttributeValues = extendedAttributeValueList23;
        java.lang.Boolean boolean26 = postLocation19.Publish;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostStatisticalDerivedTimeSeries postStatisticalDerivedTimeSeries27 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostStatisticalDerivedTimeSeries();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostStatisticalDerivedTimeSeries postStatisticalDerivedTimeSeries29 = postStatisticalDerivedTimeSeries27.setComment("'.'SSSSSSS");
        java.lang.String str30 = postStatisticalDerivedTimeSeries27.getParameter();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostStatisticalDerivedTimeSeries postStatisticalDerivedTimeSeries32 = postStatisticalDerivedTimeSeries27.setTimeSeriesUniqueId("");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.InterpolationType interpolationType33 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.InterpolationType.InstantaneousValues;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostStatisticalDerivedTimeSeries postStatisticalDerivedTimeSeries34 = postStatisticalDerivedTimeSeries27.setInterpolationType(interpolationType33);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeValue[] extendedAttributeValueArray35 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeValue[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeValue> extendedAttributeValueList36 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeValue>();
        boolean boolean37 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeValue>) extendedAttributeValueList36, extendedAttributeValueArray35);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostStatisticalDerivedTimeSeries postStatisticalDerivedTimeSeries38 = postStatisticalDerivedTimeSeries27.setExtendedAttributeValues((java.util.List<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeValue>) extendedAttributeValueList36);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.LocationBase locationBase39 = postLocation19.setExtendedAttributeValues((java.util.List<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeValue>) extendedAttributeValueList36);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostCalculatedDerivedTimeSeries postCalculatedDerivedTimeSeries40 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostCalculatedDerivedTimeSeries();
        java.util.ArrayList<java.lang.String> strList41 = postCalculatedDerivedTimeSeries40.TimeSeriesUniqueIds;
        java.lang.String str42 = postCalculatedDerivedTimeSeries40.Label;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostLocation postLocation43 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostLocation();
        postLocation43.Description = "hi!";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeValue[] extendedAttributeValueArray46 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeValue[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeValue> extendedAttributeValueList47 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeValue>();
        boolean boolean48 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeValue>) extendedAttributeValueList47, extendedAttributeValueArray46);
        postLocation43.ExtendedAttributeValues = extendedAttributeValueList47;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostCalculatedDerivedTimeSeries postCalculatedDerivedTimeSeries50 = postCalculatedDerivedTimeSeries40.setExtendedAttributeValues((java.util.List<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeValue>) extendedAttributeValueList47);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.LocationBase locationBase51 = postLocation19.setExtendedAttributeValues((java.util.List<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeValue>) extendedAttributeValueList47);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostDatumConvertedTimeSeries postDatumConvertedTimeSeries52 = postDatumConvertedTimeSeries14.setExtendedAttributeValues((java.util.List<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeValue>) extendedAttributeValueList47);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostDatumConvertedTimeSeries postDatumConvertedTimeSeries53 = postDatumConvertedTimeSeries0.setExtendedAttributeValues((java.util.List<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeValue>) extendedAttributeValueList47);
        java.util.List<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeValue> extendedAttributeValueList54 = postDatumConvertedTimeSeries0.ExtendedAttributeValues;
        java.lang.String str55 = postDatumConvertedTimeSeries0.getDescription();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostDatumConvertedTimeSeries postDatumConvertedTimeSeries57 = postDatumConvertedTimeSeries0.setUnit("multipart/form-data; boundary=****3dee2050-7d6c-400f-bd51-383a1324f5dd****");
        java.lang.String str58 = postDatumConvertedTimeSeries0.getParameter();
        org.junit.Assert.assertNotNull(postDatumConvertedTimeSeries2);
        org.junit.Assert.assertNotNull(postDatumConvertedTimeSeries8);
        org.junit.Assert.assertNull(boolean9);
        org.junit.Assert.assertNotNull(postDatumConvertedTimeSeries16);
        org.junit.Assert.assertNotNull(extendedAttributeValueArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNull(boolean26);
        org.junit.Assert.assertNotNull(postStatisticalDerivedTimeSeries29);
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertNotNull(postStatisticalDerivedTimeSeries32);
        org.junit.Assert.assertTrue("'" + interpolationType33 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.InterpolationType.InstantaneousValues + "'", interpolationType33.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.InterpolationType.InstantaneousValues));
        org.junit.Assert.assertNotNull(postStatisticalDerivedTimeSeries34);
        org.junit.Assert.assertNotNull(extendedAttributeValueArray35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(postStatisticalDerivedTimeSeries38);
        org.junit.Assert.assertNotNull(locationBase39);
        org.junit.Assert.assertNull(strList41);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertNotNull(extendedAttributeValueArray46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(postCalculatedDerivedTimeSeries50);
        org.junit.Assert.assertNotNull(locationBase51);
        org.junit.Assert.assertNotNull(postDatumConvertedTimeSeries52);
        org.junit.Assert.assertNotNull(postDatumConvertedTimeSeries53);
        org.junit.Assert.assertNotNull(extendedAttributeValueList54);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ" + "'", str55, "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ");
        org.junit.Assert.assertNotNull(postDatumConvertedTimeSeries57);
        org.junit.Assert.assertNull(str58);
    }

    @Test
    public void test53458() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest106.test53458");
        com.aquaticinformatics.aquarius.sdk.helpers.MultipartBuilder multipartBuilder0 = new com.aquaticinformatics.aquarius.sdk.helpers.MultipartBuilder();
        byte[] byteArray1 = multipartBuilder0.toByteArray();
        byte[] byteArray2 = multipartBuilder0.toByteArray();
        multipartBuilder0.boundaryMarker = "multipart/form-data; boundary=****231224c4-98ce-4e30-bd65-1d25287c4abe****";
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[]");
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
    }

    @Test
    public void test53459() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest106.test53459");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivityTemplate postActivityTemplate0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivityTemplate();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity quantity1 = postActivityTemplate0.Depth;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ActivityTemplateType activityTemplateType2 = postActivityTemplate0.Type;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricConfiguration metricConfiguration3 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricConfiguration();
        java.lang.String str4 = metricConfiguration3.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty observedProperty5 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty();
        observedProperty5.CasNumber = "MinDuration";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricConfiguration metricConfiguration8 = metricConfiguration3.setObservedProperty(observedProperty5);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultType resultType9 = observedProperty5.ResultType;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservedProperty postObservedProperty10 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservedProperty();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UnitGroup unitGroup11 = postObservedProperty10.UnitGroup;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity quantity12 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Unit unit13 = null;
        quantity12.Unit = unit13;
        postObservedProperty10.LowerLimit = quantity12;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity quantity16 = postObservedProperty10.LowerLimit;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Unit unit17 = quantity16.Unit;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty observedProperty18 = observedProperty5.setUpperLimit(quantity16);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLabAnalysisMethod postLabAnalysisMethod19 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLabAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation20 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation();
        observation20.CustomId = "hi!";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.CategoricalResult categoricalResult23 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation24 = observation20.setCategoricalResult(categoricalResult23);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple[] importHistoryEventSimpleArray25 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple> importHistoryEventSimpleList26 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple>();
        boolean boolean27 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple>) importHistoryEventSimpleList26, importHistoryEventSimpleArray25);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Observation observation28 = observation20.setImportHistoryEventSimples((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple>) importHistoryEventSimpleList26);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLabAnalysisMethod postLabAnalysisMethod29 = postLabAnalysisMethod19.setImportHistoryEventSimples((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple>) importHistoryEventSimpleList26);
        observedProperty18.ImportHistoryEventSimples = importHistoryEventSimpleList26;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty observedProperty32 = observedProperty18.setCustomId("/AQUARIUS/Acquisition/v2");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity quantity33 = observedProperty32.getUpperLimit();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivityTemplate postActivityTemplate34 = postActivityTemplate0.setDepth(quantity33);
        postActivityTemplate34.CustomId = "";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes37 = null;
        postActivityTemplate34.AuditAttributes = auditAttributes37;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity postActivity39 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity();
        postActivity39.LoggerFileName = "hi!";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity plannedActivity42 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity postActivity43 = postActivity39.setPlannedActivity(plannedActivity42);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ActivityType activityType44 = postActivity39.Type;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFieldVisitActivityWithTemplate postFieldVisitActivityWithTemplate45 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFieldVisitActivityWithTemplate();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate46 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate();
        specimenTemplate46.CustomId = "hi!";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate49 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate50 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate();
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabInstructionTemplate> labInstructionTemplateList51 = specimenTemplate50.getLabInstructionTemplates();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate52 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate54 = specimenTemplate52.setCustomId("hi!");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate55 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate56 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate();
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabInstructionTemplate> labInstructionTemplateList57 = specimenTemplate56.LabInstructionTemplates;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate[] specimenTemplateArray58 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate[] { specimenTemplate46, specimenTemplate49, specimenTemplate50, specimenTemplate54, specimenTemplate55, specimenTemplate56 };
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate> specimenTemplateList59 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate>();
        boolean boolean60 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate>) specimenTemplateList59, specimenTemplateArray58);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFieldVisitActivityWithTemplate postFieldVisitActivityWithTemplate61 = postFieldVisitActivityWithTemplate45.setSpecimenTemplates((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate>) specimenTemplateList59);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.CollectionMethod collectionMethod62 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.CollectionMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFieldVisitActivityWithTemplate postFieldVisitActivityWithTemplate63 = postFieldVisitActivityWithTemplate61.setCollectionMethod(collectionMethod62);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity postActivity64 = postActivity39.setCollectionMethod(collectionMethod62);
        postActivityTemplate34.CollectionMethod = collectionMethod62;
        java.lang.String str66 = postActivityTemplate34.getComment();
        org.junit.Assert.assertNull(quantity1);
        org.junit.Assert.assertNull(activityTemplateType2);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNotNull(metricConfiguration8);
        org.junit.Assert.assertNull(resultType9);
        org.junit.Assert.assertNull(unitGroup11);
        org.junit.Assert.assertNotNull(quantity16);
        org.junit.Assert.assertNull(unit17);
        org.junit.Assert.assertNotNull(observedProperty18);
        org.junit.Assert.assertNotNull(observation24);
        org.junit.Assert.assertNotNull(importHistoryEventSimpleArray25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(observation28);
        org.junit.Assert.assertNotNull(postLabAnalysisMethod29);
        org.junit.Assert.assertNotNull(observedProperty32);
        org.junit.Assert.assertNotNull(quantity33);
        org.junit.Assert.assertNotNull(postActivityTemplate34);
        org.junit.Assert.assertNotNull(postActivity43);
        org.junit.Assert.assertNull(activityType44);
        org.junit.Assert.assertNull(labInstructionTemplateList51);
        org.junit.Assert.assertNotNull(specimenTemplate54);
        org.junit.Assert.assertNull(labInstructionTemplateList57);
        org.junit.Assert.assertNotNull(specimenTemplateArray58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(postFieldVisitActivityWithTemplate61);
        org.junit.Assert.assertNotNull(postFieldVisitActivityWithTemplate63);
        org.junit.Assert.assertNotNull(postActivity64);
        org.junit.Assert.assertNull(str66);
    }

    @Test
    public void test53460() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest106.test53460");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetShippingContainers getShippingContainers0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetShippingContainers();
        java.util.List<java.lang.String> strList1 = getShippingContainers0.Search;
        java.util.List<java.lang.String> strList2 = getShippingContainers0.getSearch();
        getShippingContainers0.Limit = 10;
        java.util.List<java.lang.String> strList5 = getShippingContainers0.Search;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_6 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray9 = new java.lang.String[] { "", "" };
        java.util.ArrayList<java.lang.String> strList10 = new java.util.ArrayList<java.lang.String>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList10, strArray9);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_12 = getObservationsV2_6.setDataClassifications((java.util.List<java.lang.String>) strList10);
        getObservationsV2_12.DepthUnitCustomId = "hi!";
        java.lang.String str15 = getObservationsV2_12.DepthUnitId;
        java.util.List<java.lang.String> strList16 = getObservationsV2_12.LabResultLaboratoryIds;
        getObservationsV2_12.MaxNumericResultValue = (-1.0d);
        java.lang.Integer int19 = getObservationsV2_12.Limit;
        java.util.List<java.lang.String> strList20 = getObservationsV2_12.ObservedPropertyIds;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_22 = getObservationsV2_12.setActivityCustomId("MaxInstant");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_24 = getObservationsV2_12.setDetectionCondition("http://MaxDurationhttp/json/reply/Integer");
        getObservationsV2_24.SpecimenName = "multipart/form-data; boundary=****3dee2050-7d6c-400f-bd51-383a1324f5dd****";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportSpecimens getExportSpecimens27 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportSpecimens();
        java.util.List<java.lang.String> strList28 = getExportSpecimens27.getActivityTypes();
        java.util.List<java.lang.String> strList29 = getExportSpecimens27.LaboratoryIds;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportSpecimens getExportSpecimens31 = getExportSpecimens27.setCursor("/AQUARIUS");
        java.time.Instant instant32 = getExportSpecimens27.getStartModificationTime();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportSpecimens getExportSpecimens34 = getExportSpecimens27.setCursor("0001-01-01T00:00:00.000Z");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObservation importItemObservation35 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObservation();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest36 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest();
        java.lang.Object obj37 = timeAlignedDataServiceRequest36.getResponseType();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse38 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant39 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse40 = locationDescriptionListServiceResponse38.setNextToken(instant39);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest41 = timeAlignedDataServiceRequest36.setQueryFrom(instant39);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags42 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray46 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList47 = new java.util.ArrayList<java.lang.String>();
        boolean boolean48 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList47, strArray46);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags49 = putLocationTags42.setTagUniqueIds(strList47);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest50 = timeAlignedDataServiceRequest36.setTimeSeriesOutputUnitIds(strList47);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObservation importItemObservation51 = importItemObservation35.setFields((java.util.List<java.lang.String>) strList47);
        java.util.List<java.lang.String> strList52 = importItemObservation51.getFields();
        getExportSpecimens27.FieldTripIds = strList52;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_54 = getObservationsV2_24.setCollectionMethodIds(strList52);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetShippingContainers getShippingContainers55 = getShippingContainers0.setSearch(strList52);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutBulkEditResultGradesV2 putBulkEditResultGradesV2_56 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutBulkEditResultGradesV2();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_57 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String str58 = getObservationsV2_57.getCustomId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_59 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray61 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList62 = new java.util.ArrayList<java.lang.String>();
        boolean boolean63 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList62, strArray61);
        getObservationsV2_59.SpecimenIds = strList62;
        getObservationsV2_57.ProjectIds = strList62;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutBulkEditResultGradesV2 putBulkEditResultGradesV2_66 = putBulkEditResultGradesV2_56.setTaxonIds((java.util.List<java.lang.String>) strList62);
        java.lang.Double double67 = putBulkEditResultGradesV2_66.NumericResultValue;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_68 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray71 = new java.lang.String[] { "", "" };
        java.util.ArrayList<java.lang.String> strList72 = new java.util.ArrayList<java.lang.String>();
        boolean boolean73 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList72, strArray71);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_74 = getObservationsV2_68.setDataClassifications((java.util.List<java.lang.String>) strList72);
        java.util.List<java.lang.String> strList75 = getObservationsV2_68.ResultGrades;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary76 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        dischargeSummary76.Reviewer = "";
        java.time.Instant instant79 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        dischargeSummary76.MeasurementTime = instant79;
        getObservationsV2_68.StartResultTime = instant79;
        java.lang.String[] strArray91 = new java.lang.String[] { "https", "/AQUARIUS/Provisioning/v1", "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ", "2021.4.62.0", "hi!", "2021.4.62.0", "2021.4.62.0", "/AQUARIUS/Acquisition/v2", "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ" };
        java.util.ArrayList<java.lang.String> strList92 = new java.util.ArrayList<java.lang.String>();
        boolean boolean93 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList92, strArray91);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_94 = getObservationsV2_68.setAnalyticalGroupIds((java.util.List<java.lang.String>) strList92);
        putBulkEditResultGradesV2_66.ActivityTypes = strList92;
        getShippingContainers55.Search = strList92;
        org.junit.Assert.assertNull(strList1);
        org.junit.Assert.assertNull(strList2);
        org.junit.Assert.assertNull(strList5);
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(getObservationsV2_12);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNull(strList16);
        org.junit.Assert.assertNull(int19);
        org.junit.Assert.assertNull(strList20);
        org.junit.Assert.assertNotNull(getObservationsV2_22);
        org.junit.Assert.assertNotNull(getObservationsV2_24);
        org.junit.Assert.assertNull(strList28);
        org.junit.Assert.assertNull(strList29);
        org.junit.Assert.assertNotNull(getExportSpecimens31);
        org.junit.Assert.assertNull(instant32);
        org.junit.Assert.assertNotNull(getExportSpecimens34);
        org.junit.Assert.assertNotNull(obj37);
        org.junit.Assert.assertEquals(obj37.toString(), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj37), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj37), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertNotNull(instant39);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse40);
        org.junit.Assert.assertNotNull(timeAlignedDataServiceRequest41);
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(putLocationTags49);
        org.junit.Assert.assertNotNull(timeAlignedDataServiceRequest50);
        org.junit.Assert.assertNotNull(importItemObservation51);
        org.junit.Assert.assertNotNull(strList52);
        org.junit.Assert.assertNotNull(getObservationsV2_54);
        org.junit.Assert.assertNotNull(getShippingContainers55);
        org.junit.Assert.assertNull(str58);
        org.junit.Assert.assertNotNull(strArray61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNotNull(putBulkEditResultGradesV2_66);
        org.junit.Assert.assertNull(double67);
        org.junit.Assert.assertNotNull(strArray71);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertNotNull(getObservationsV2_74);
        org.junit.Assert.assertNull(strList75);
        org.junit.Assert.assertNotNull(instant79);
        org.junit.Assert.assertNotNull(strArray91);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + true + "'", boolean93 == true);
        org.junit.Assert.assertNotNull(getObservationsV2_94);
    }

    @Test
    public void test53461() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest106.test53461");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TrendLineAnalysis trendLineAnalysis0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TrendLineAnalysis();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay1 = trendLineAnalysis0.getSlope();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesPoint timeSeriesPoint2 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesPoint();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.StatisticalDateTimeOffset statisticalDateTimeOffset3 = timeSeriesPoint2.getTimestamp();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.StatisticalDateTimeOffset statisticalDateTimeOffset4 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.StatisticalDateTimeOffset();
        java.time.Instant instant5 = statisticalDateTimeOffset4.getDateTimeOffset();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesPoint timeSeriesPoint6 = timeSeriesPoint2.setTimestamp(statisticalDateTimeOffset4);
        trendLineAnalysis0.StartPoint = timeSeriesPoint2;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.GroundWaterMeasurement groundWaterMeasurement8 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.GroundWaterMeasurement();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity pointVelocityDischargeActivity9 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity();
        java.lang.String str10 = pointVelocityDischargeActivity9.SoftwareVersion;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity pointVelocityDischargeActivity12 = pointVelocityDischargeActivity9.setIsValid((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay13 = pointVelocityDischargeActivity12.getVelocityAverage();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary14 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary16 = dischargeSummary14.setPublish((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay17 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay();
        dischargeSummary16.DifferenceDuringVisit = doubleWithDisplay17;
        java.lang.String str19 = doubleWithDisplay17.getDisplay();
        pointVelocityDischargeActivity12.MeanObservationDurationInSeconds = doubleWithDisplay17;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.GroundWaterMeasurement groundWaterMeasurement21 = groundWaterMeasurement8.setHold(doubleWithDisplay17);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VolumetricDischargeReading volumetricDischargeReading22 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VolumetricDischargeReading();
        java.lang.String str23 = volumetricDischargeReading22.getName();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary24 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay25 = dischargeSummary24.getMeanGageHeight();
        java.lang.String str26 = dischargeSummary24.getGageHeightComments();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary28 = dischargeSummary24.setPublish((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay29 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay31 = doubleWithDisplay29.setNumeric((java.lang.Double) 10.0d);
        dischargeSummary24.DurationInHours = doubleWithDisplay31;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VolumetricDischargeReading volumetricDischargeReading33 = volumetricDischargeReading22.setDischarge(doubleWithDisplay31);
        groundWaterMeasurement21.TapeCorrection = doubleWithDisplay31;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TrendLineAnalysis trendLineAnalysis35 = trendLineAnalysis0.setSlopeStandardError(doubleWithDisplay31);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay36 = trendLineAnalysis35.SlopeStandardError;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay37 = trendLineAnalysis35.getSlope();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CrossSectionPoint crossSectionPoint38 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CrossSectionPoint();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay39 = null;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CrossSectionPoint crossSectionPoint40 = crossSectionPoint38.setDistance(quantityWithDisplay39);
        java.lang.String str41 = crossSectionPoint38.getComments();
        java.lang.Integer int42 = crossSectionPoint38.getPointOrder();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VolumetricDischargeReading volumetricDischargeReading43 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.VolumetricDischargeReading();
        volumetricDischargeReading43.IsUsed = false;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay46 = volumetricDischargeReading43.StartingVolume;
        java.lang.Boolean boolean47 = volumetricDischargeReading43.IsUsed;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Vertical vertical48 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Vertical();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Vertical vertical50 = vertical48.setPercentageOfTotalDischarge((java.lang.Double) 100.0d);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay51 = vertical50.getSegmentWidth();
        java.lang.Double double52 = vertical50.CosineOfUniqueFlow;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Vertical vertical53 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Vertical();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay54 = null;
        vertical53.EffectiveDepth = quantityWithDisplay54;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Vertical vertical57 = vertical53.setPercentageOfTotalDischarge((java.lang.Double) (-1.0d));
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary58 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary60 = dischargeSummary58.setPublish((java.lang.Boolean) false);
        java.lang.String str61 = dischargeSummary60.Reviewer;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary62 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        dischargeSummary62.Reviewer = "";
        dischargeSummary62.Publish = true;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MeasurementGradeType measurementGradeType67 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MeasurementGradeType.Good;
        dischargeSummary62.MeasurementGrade = measurementGradeType67;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary69 = dischargeSummary60.setMeasurementGrade(measurementGradeType67);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity pointVelocityDischargeActivity70 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity pointVelocityDischargeActivity72 = pointVelocityDischargeActivity70.setIsValid((java.lang.Boolean) false);
        pointVelocityDischargeActivity70.Manufacturer = "2021.4.62.0";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PointVelocityDischargeActivity pointVelocityDischargeActivity76 = pointVelocityDischargeActivity70.setSuspensionWeight("");
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Vertical> verticalList77 = pointVelocityDischargeActivity76.getVerticals();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DatumConvertedQuantityWithDisplay datumConvertedQuantityWithDisplay78 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DatumConvertedQuantityWithDisplay();
        pointVelocityDischargeActivity76.DistanceToMeter = datumConvertedQuantityWithDisplay78;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary80 = dischargeSummary60.setDischarge((com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay) datumConvertedQuantityWithDisplay78);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Vertical vertical81 = vertical57.setEffectiveDepth((com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay) datumConvertedQuantityWithDisplay78);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Vertical vertical82 = vertical50.setTaglinePosition((com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay) datumConvertedQuantityWithDisplay78);
        java.lang.String str83 = datumConvertedQuantityWithDisplay78.TargetDatum;
        volumetricDischargeReading43.VolumeChange = datumConvertedQuantityWithDisplay78;
        java.lang.String str85 = datumConvertedQuantityWithDisplay78.getUnit();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CrossSectionPoint crossSectionPoint86 = crossSectionPoint38.setDepth((com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay) datumConvertedQuantityWithDisplay78);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TrendLineAnalysis trendLineAnalysis87 = trendLineAnalysis35.setLowerQuartileOfResiduals((com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay) datumConvertedQuantityWithDisplay78);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesPoint timeSeriesPoint88 = trendLineAnalysis87.getEndPoint();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DoubleWithDisplay doubleWithDisplay89 = trendLineAnalysis87.ModeledAbsoluteChange;
        org.junit.Assert.assertNull(doubleWithDisplay1);
        org.junit.Assert.assertNull(statisticalDateTimeOffset3);
        org.junit.Assert.assertNull(instant5);
        org.junit.Assert.assertNotNull(timeSeriesPoint6);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNotNull(pointVelocityDischargeActivity12);
        org.junit.Assert.assertNull(quantityWithDisplay13);
        org.junit.Assert.assertNotNull(dischargeSummary16);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertNotNull(groundWaterMeasurement21);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertNull(quantityWithDisplay25);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertNotNull(dischargeSummary28);
        org.junit.Assert.assertNotNull(doubleWithDisplay31);
        org.junit.Assert.assertNotNull(volumetricDischargeReading33);
        org.junit.Assert.assertNotNull(trendLineAnalysis35);
        org.junit.Assert.assertNotNull(doubleWithDisplay36);
        org.junit.Assert.assertNull(doubleWithDisplay37);
        org.junit.Assert.assertNotNull(crossSectionPoint40);
        org.junit.Assert.assertNull(str41);
        org.junit.Assert.assertNull(int42);
        org.junit.Assert.assertNull(doubleWithDisplay46);
        org.junit.Assert.assertEquals("'" + boolean47 + "' != '" + false + "'", boolean47, false);
        org.junit.Assert.assertNotNull(vertical50);
        org.junit.Assert.assertNull(quantityWithDisplay51);
        org.junit.Assert.assertNull(double52);
        org.junit.Assert.assertNotNull(vertical57);
        org.junit.Assert.assertNotNull(dischargeSummary60);
        org.junit.Assert.assertNull(str61);
        org.junit.Assert.assertTrue("'" + measurementGradeType67 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MeasurementGradeType.Good + "'", measurementGradeType67.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MeasurementGradeType.Good));
        org.junit.Assert.assertNotNull(dischargeSummary69);
        org.junit.Assert.assertNotNull(pointVelocityDischargeActivity72);
        org.junit.Assert.assertNotNull(pointVelocityDischargeActivity76);
        org.junit.Assert.assertNull(verticalList77);
        org.junit.Assert.assertNotNull(dischargeSummary80);
        org.junit.Assert.assertNotNull(vertical81);
        org.junit.Assert.assertNotNull(vertical82);
        org.junit.Assert.assertNull(str83);
        org.junit.Assert.assertNull(str85);
        org.junit.Assert.assertNotNull(crossSectionPoint86);
        org.junit.Assert.assertNotNull(trendLineAnalysis87);
        org.junit.Assert.assertNull(timeSeriesPoint88);
        org.junit.Assert.assertNull(doubleWithDisplay89);
    }

    @Test
    public void test53462() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest106.test53462");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutActivityTemplate putActivityTemplate0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutActivityTemplate();
        java.lang.String str1 = putActivityTemplate0.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.CollectionMethod collectionMethod2 = putActivityTemplate0.CollectionMethod;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutActivityTemplate putActivityTemplate4 = putActivityTemplate0.setComment("ZZZZZ");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity postActivity5 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity();
        postActivity5.LoggerFileName = "hi!";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity plannedActivity8 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity postActivity9 = postActivity5.setPlannedActivity(plannedActivity8);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ActivityType activityType10 = postActivity5.Type;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFieldVisitActivityWithTemplate postFieldVisitActivityWithTemplate11 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFieldVisitActivityWithTemplate();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate12 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate();
        specimenTemplate12.CustomId = "hi!";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate15 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate16 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate();
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabInstructionTemplate> labInstructionTemplateList17 = specimenTemplate16.getLabInstructionTemplates();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate18 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate20 = specimenTemplate18.setCustomId("hi!");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate21 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate22 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate();
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabInstructionTemplate> labInstructionTemplateList23 = specimenTemplate22.LabInstructionTemplates;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate[] specimenTemplateArray24 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate[] { specimenTemplate12, specimenTemplate15, specimenTemplate16, specimenTemplate20, specimenTemplate21, specimenTemplate22 };
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate> specimenTemplateList25 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate>) specimenTemplateList25, specimenTemplateArray24);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFieldVisitActivityWithTemplate postFieldVisitActivityWithTemplate27 = postFieldVisitActivityWithTemplate11.setSpecimenTemplates((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate>) specimenTemplateList25);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.CollectionMethod collectionMethod28 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.CollectionMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFieldVisitActivityWithTemplate postFieldVisitActivityWithTemplate29 = postFieldVisitActivityWithTemplate27.setCollectionMethod(collectionMethod28);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity postActivity30 = postActivity5.setCollectionMethod(collectionMethod28);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutActivityTemplate putActivityTemplate31 = putActivityTemplate0.setCollectionMethod(collectionMethod28);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes32 = collectionMethod28.getAuditAttributes();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(collectionMethod2);
        org.junit.Assert.assertNotNull(putActivityTemplate4);
        org.junit.Assert.assertNotNull(postActivity9);
        org.junit.Assert.assertNull(activityType10);
        org.junit.Assert.assertNull(labInstructionTemplateList17);
        org.junit.Assert.assertNotNull(specimenTemplate20);
        org.junit.Assert.assertNull(labInstructionTemplateList23);
        org.junit.Assert.assertNotNull(specimenTemplateArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(postFieldVisitActivityWithTemplate27);
        org.junit.Assert.assertNotNull(postFieldVisitActivityWithTemplate29);
        org.junit.Assert.assertNotNull(postActivity30);
        org.junit.Assert.assertNotNull(putActivityTemplate31);
        org.junit.Assert.assertNull(auditAttributes32);
    }

    @Test
    public void test53463() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest106.test53463");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportSpecimens getExportSpecimens0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportSpecimens();
        java.util.List<java.lang.String> strList1 = getExportSpecimens0.getActivityTypes();
        java.util.List<java.lang.String> strList2 = getExportSpecimens0.LaboratoryIds;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetSpecimens getSpecimens3 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetSpecimens();
        java.util.List<java.lang.String> strList4 = getSpecimens3.getActivityIds();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetSpecimens getSpecimens6 = getSpecimens3.setSort("MinDuration");
        java.util.List<java.lang.String> strList7 = getSpecimens6.getActivityTypes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetSpecimens getSpecimens9 = getSpecimens6.setCursor("");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetSpecimens getSpecimens10 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetSpecimens();
        java.util.List<java.lang.String> strList11 = getSpecimens10.getFieldTripIds();
        java.util.List<java.lang.String> strList12 = getSpecimens10.getFieldTripIds();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse13 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary14 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary16 = dischargeSummary14.setPublish((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse17 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant18 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse19 = locationDescriptionListServiceResponse17.setNextToken(instant18);
        dischargeSummary14.MeasurementTime = instant18;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse21 = locationDescriptionListServiceResponse13.setNextToken(instant18);
        java.time.Instant instant22 = locationDescriptionListServiceResponse13.getNextToken();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest23 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ControlConditionActivity controlConditionActivity24 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ControlConditionActivity();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ControlCleanedType controlCleanedType25 = null;
        controlConditionActivity24.ControlCleaned = controlCleanedType25;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse27 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant28 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse29 = locationDescriptionListServiceResponse27.setNextToken(instant28);
        controlConditionActivity24.DateCleaned = instant28;
        timeAlignedDataServiceRequest23.QueryFrom = instant28;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse32 = locationDescriptionListServiceResponse13.setNextToken(instant28);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetSpecimens getSpecimens33 = getSpecimens10.setEndModificationTime(instant28);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Tag tag34 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Tag();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.Tag tag36 = tag34.setAppliesToAttachments((java.lang.Boolean) false);
        java.lang.String str37 = tag36.Key;
        java.util.ArrayList<java.lang.String> strList38 = tag36.getPickListValues();
        java.lang.Boolean boolean39 = tag36.AppliesToLocationNotes;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEvent importHistoryEvent40 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEvent();
        java.time.OffsetDateTime offsetDateTime41 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEvent importHistoryEvent42 = importHistoryEvent40.setImportTime(offsetDateTime41);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportType importType43 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportType.OBSERVED_PROPERTIES_CSV;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEvent importHistoryEvent44 = importHistoryEvent42.setImportType(importType43);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DeleteFieldVisits deleteFieldVisits45 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DeleteFieldVisits();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RoleFlattened roleFlattened46 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RoleFlattened();
        java.lang.Boolean boolean47 = roleFlattened46.CanRemoveFieldVisits;
        roleFlattened46.Name = "MaxInstant";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationType putLocationType50 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationType();
        java.lang.String str51 = putLocationType50.Description;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_52 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray55 = new java.lang.String[] { "", "" };
        java.util.ArrayList<java.lang.String> strList56 = new java.util.ArrayList<java.lang.String>();
        boolean boolean57 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList56, strArray55);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_58 = getObservationsV2_52.setDataClassifications((java.util.List<java.lang.String>) strList56);
        getObservationsV2_58.DepthUnitCustomId = "hi!";
        java.lang.String str61 = getObservationsV2_58.CustomId;
        java.util.List<java.lang.String> strList62 = getObservationsV2_58.getSearch();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_63 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray65 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList66 = new java.util.ArrayList<java.lang.String>();
        boolean boolean67 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList66, strArray65);
        getObservationsV2_63.SpecimenIds = strList66;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags69 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray73 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList74 = new java.util.ArrayList<java.lang.String>();
        boolean boolean75 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList74, strArray73);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags76 = putLocationTags69.setTagUniqueIds(strList74);
        getObservationsV2_63.QualityControlTypes = strList74;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_78 = getObservationsV2_58.setMedia((java.util.List<java.lang.String>) strList74);
        putLocationType50.ExtendedAttributeDefinitionIds = strList74;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RoleFlattenedBase roleFlattenedBase80 = roleFlattened46.setRoleApprovalTransitions(strList74);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DeleteFieldVisits deleteFieldVisits81 = deleteFieldVisits45.setIds((java.util.List<java.lang.String>) strList74);
        importHistoryEvent42.DomainObjectIds = strList74;
        tag36.PickListValues = strList74;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetSpecimens getSpecimens84 = getSpecimens10.setSamplingLocationIds((java.util.List<java.lang.String>) strList74);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetSpecimens getSpecimens85 = getSpecimens6.setSamplingLocationGroupIds((java.util.List<java.lang.String>) strList74);
        getExportSpecimens0.FieldTripIds = strList74;
        org.junit.Assert.assertNull(strList1);
        org.junit.Assert.assertNull(strList2);
        org.junit.Assert.assertNull(strList4);
        org.junit.Assert.assertNotNull(getSpecimens6);
        org.junit.Assert.assertNull(strList7);
        org.junit.Assert.assertNotNull(getSpecimens9);
        org.junit.Assert.assertNull(strList11);
        org.junit.Assert.assertNull(strList12);
        org.junit.Assert.assertNotNull(dischargeSummary16);
        org.junit.Assert.assertNotNull(instant18);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse19);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse21);
        org.junit.Assert.assertNotNull(instant22);
        org.junit.Assert.assertNotNull(instant28);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse29);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse32);
        org.junit.Assert.assertNotNull(getSpecimens33);
        org.junit.Assert.assertNotNull(tag36);
        org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertNull(strList38);
        org.junit.Assert.assertNull(boolean39);
        org.junit.Assert.assertNotNull(importHistoryEvent42);
        org.junit.Assert.assertTrue("'" + importType43 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportType.OBSERVED_PROPERTIES_CSV + "'", importType43.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportType.OBSERVED_PROPERTIES_CSV));
        org.junit.Assert.assertNotNull(importHistoryEvent44);
        org.junit.Assert.assertNull(boolean47);
        org.junit.Assert.assertNull(str51);
        org.junit.Assert.assertNotNull(strArray55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertNotNull(getObservationsV2_58);
        org.junit.Assert.assertNull(str61);
        org.junit.Assert.assertNull(strList62);
        org.junit.Assert.assertNotNull(strArray65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertNotNull(strArray73);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertNotNull(putLocationTags76);
        org.junit.Assert.assertNotNull(getObservationsV2_78);
        org.junit.Assert.assertNotNull(roleFlattenedBase80);
        org.junit.Assert.assertNotNull(deleteFieldVisits81);
        org.junit.Assert.assertNotNull(getSpecimens84);
        org.junit.Assert.assertNotNull(getSpecimens85);
    }

    @Test
    public void test53464() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest106.test53464");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.TaxonImportSummary taxonImportSummary0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.TaxonImportSummary();
        taxonImportSummary0.NewCount = 0;
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemTaxon> importItemTaxonList3 = taxonImportSummary0.ErrorImportItems;
        java.lang.Integer int4 = taxonImportSummary0.SuccessCount;
        java.lang.Integer int5 = taxonImportSummary0.SkippedCount;
        java.lang.Integer int6 = taxonImportSummary0.UpdateCount;
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemTaxon> importItemTaxonList7 = taxonImportSummary0.getImportItems();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.TaxonImportSummary taxonImportSummary9 = taxonImportSummary0.setSuccessCount((java.lang.Integer) (-1));
        taxonImportSummary0.InvalidRowsCsvUrl = "9999-12-31T23:59:59.9999999Z";
        taxonImportSummary0.InvalidRowsCsvUrl = "multipart/form-data; boundary=****59879c02-0839-4b96-bc41-a13ebb706be4****";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.TaxonImportSummary taxonImportSummary15 = taxonImportSummary0.setSummaryReportText("2021.8.9990");
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemTaxon> importItemTaxonList16 = taxonImportSummary15.getErrorImportItems();
        taxonImportSummary15.SkippedCount = 10;
        java.lang.Integer int19 = taxonImportSummary15.getUpdateCount();
        org.junit.Assert.assertNull(importItemTaxonList3);
        org.junit.Assert.assertNull(int4);
        org.junit.Assert.assertNull(int5);
        org.junit.Assert.assertNull(int6);
        org.junit.Assert.assertNull(importItemTaxonList7);
        org.junit.Assert.assertNotNull(taxonImportSummary9);
        org.junit.Assert.assertNotNull(taxonImportSummary15);
        org.junit.Assert.assertNull(importItemTaxonList16);
        org.junit.Assert.assertNull(int19);
    }

    @Test
    public void test53465() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest106.test53465");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabReportImportHistoryEvent labReportImportHistoryEvent0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabReportImportHistoryEvent();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEvent importHistoryEvent1 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEvent();
        java.time.OffsetDateTime offsetDateTime2 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEvent importHistoryEvent3 = importHistoryEvent1.setImportTime(offsetDateTime2);
        java.lang.String str4 = importHistoryEvent3.getTimeZoneOffset();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabReportImportHistoryEvent labReportImportHistoryEvent5 = labReportImportHistoryEvent0.setImportHistoryEvent(importHistoryEvent3);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabReport labReport6 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabReport();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Laboratory laboratory7 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Laboratory();
        laboratory7.Id = "MaxInstant";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Laboratory laboratory11 = laboratory7.setName("hi!:///AQUARIUS/Provisioning/v1");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabReport labReport12 = labReport6.setLaboratory(laboratory11);
        java.lang.String str13 = labReport12.getQcSummary();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabReport labReport15 = labReport12.setCustomId("http");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Laboratory laboratory16 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabReport labReport17 = labReport12.setLaboratory(laboratory16);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabReport labReport19 = labReport17.setQcSummary("/AQUARIUS/Acquisition/v2://9999-12-31T23:59:59.999Z");
        java.lang.String str20 = labReport19.getCaseNarrative();
        labReportImportHistoryEvent0.LabReport = labReport19;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEvent importHistoryEvent22 = labReportImportHistoryEvent0.getImportHistoryEvent();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEvent importHistoryEvent23 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEvent();
        java.time.OffsetDateTime offsetDateTime24 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEvent importHistoryEvent25 = importHistoryEvent23.setImportTime(offsetDateTime24);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportType importType26 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportType.OBSERVED_PROPERTIES_CSV;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEvent importHistoryEvent27 = importHistoryEvent25.setImportType(importType26);
        importHistoryEvent25.TimeZoneOffset = "2021.4.62.0";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEvent importHistoryEvent31 = importHistoryEvent25.setFileName("/AQUARIUS/Acquisition/v2://9999-12-31T23:59:59.999Z");
        labReportImportHistoryEvent0.ImportHistoryEvent = importHistoryEvent25;
        org.junit.Assert.assertNotNull(importHistoryEvent3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNotNull(labReportImportHistoryEvent5);
        org.junit.Assert.assertNotNull(laboratory11);
        org.junit.Assert.assertNotNull(labReport12);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNotNull(labReport15);
        org.junit.Assert.assertNotNull(labReport17);
        org.junit.Assert.assertNotNull(labReport19);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNotNull(importHistoryEvent22);
        org.junit.Assert.assertNotNull(importHistoryEvent25);
        org.junit.Assert.assertTrue("'" + importType26 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportType.OBSERVED_PROPERTIES_CSV + "'", importType26.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportType.OBSERVED_PROPERTIES_CSV));
        org.junit.Assert.assertNotNull(importHistoryEvent27);
        org.junit.Assert.assertNotNull(importHistoryEvent31);
    }

    @Test
    public void test53466() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest106.test53466");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDataCorrectedServiceRequest timeSeriesDataCorrectedServiceRequest0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDataCorrectedServiceRequest();
        timeSeriesDataCorrectedServiceRequest0.GetParts = "http";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDataCorrectedServiceRequest timeSeriesDataCorrectedServiceRequest4 = timeSeriesDataCorrectedServiceRequest0.setUtcOffset((java.lang.Double) 100.0d);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDataCorrectedServiceRequest timeSeriesDataCorrectedServiceRequest6 = timeSeriesDataCorrectedServiceRequest4.setReturnFullCoverage((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDataCorrectedServiceRequest timeSeriesDataCorrectedServiceRequest8 = timeSeriesDataCorrectedServiceRequest4.setTimeSeriesUniqueId("9999-12-31T23:59:59.9999999Z://2021.4.62.0");
        org.junit.Assert.assertNotNull(timeSeriesDataCorrectedServiceRequest4);
        org.junit.Assert.assertNotNull(timeSeriesDataCorrectedServiceRequest6);
        org.junit.Assert.assertNotNull(timeSeriesDataCorrectedServiceRequest8);
    }

    @Test
    public void test53467() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest106.test53467");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservationV2 postObservationV2_0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservationV2();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabInstruction labInstruction1 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservationV2 postObservationV2_2 = postObservationV2_0.setLabInstruction(labInstruction1);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails3 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails5 = labResultDetails3.setAnalysisComment("/AQUARIUS/Acquisition/v2");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails7 = labResultDetails3.setPreparationMethod("https");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservationV2 postObservationV2_8 = postObservationV2_2.setLabResultDetails(labResultDetails7);
        java.lang.String str9 = postObservationV2_2.getCustomId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethodSimple analysisMethodSimple10 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethodSimple();
        java.lang.String str11 = analysisMethodSimple10.getId();
        java.lang.String str12 = analysisMethodSimple10.getId();
        analysisMethodSimple10.Name = "yyyy'-'MM'-'dd'T'HH':'mm':'ss";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes15 = analysisMethodSimple10.getAuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservationV2 postObservationV2_16 = postObservationV2_2.setAnalysisMethod(analysisMethodSimple10);
        java.lang.String str17 = analysisMethodSimple10.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate18 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate20 = specimenTemplate18.setCustomId("hi!");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PreservativeType preservativeType21 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PreservativeType.SODIUM_AZIDE;
        specimenTemplate20.Preservative = preservativeType21;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails23 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails25 = labResultDetails23.setAnalysisComment("/AQUARIUS/Acquisition/v2");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes26 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabResultDetails labResultDetails27 = labResultDetails25.setAuditAttributes(auditAttributes26);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SpecimenTemplate specimenTemplate28 = specimenTemplate20.setAuditAttributes(auditAttributes26);
        java.lang.String str29 = specimenTemplate20.Name;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostSamplingLocationGroup postSamplingLocationGroup30 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostSamplingLocationGroup();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes31 = postSamplingLocationGroup30.getAuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LocationGroupType locationGroupType32 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LocationGroupType();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes33 = locationGroupType32.getAuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LocationGroupType locationGroupType35 = locationGroupType32.setCustomId("yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ");
        postSamplingLocationGroup30.LocationGroupType = locationGroupType35;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostSamplingLocationGroup postSamplingLocationGroup38 = postSamplingLocationGroup30.setName("");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutAccessGroup putAccessGroup39 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutAccessGroup();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivity samplingPlanPlannedActivity40 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivity();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes41 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivity samplingPlanPlannedActivity42 = samplingPlanPlannedActivity40.setAuditAttributes(auditAttributes41);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes43 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes45 = auditAttributes43.setCreationUserProfileId("'.'SSSSSSS");
        samplingPlanPlannedActivity42.AuditAttributes = auditAttributes43;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes47 = samplingPlanPlannedActivity42.AuditAttributes;
        putAccessGroup39.AuditAttributes = auditAttributes47;
        postSamplingLocationGroup30.AuditAttributes = auditAttributes47;
        specimenTemplate20.AuditAttributes = auditAttributes47;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethodSimple analysisMethodSimple51 = analysisMethodSimple10.setAuditAttributes(auditAttributes47);
        analysisMethodSimple10.Context = "multipart/form-data; boundary=****f642a130-eb6d-4fb6-a1a4-7c7216ab119b****";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethodSimple analysisMethodSimple55 = analysisMethodSimple10.setId("/AQUARIUS/Acquisition/v2");
        org.junit.Assert.assertNotNull(postObservationV2_2);
        org.junit.Assert.assertNotNull(labResultDetails5);
        org.junit.Assert.assertNotNull(labResultDetails7);
        org.junit.Assert.assertNotNull(postObservationV2_8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNull(auditAttributes15);
        org.junit.Assert.assertNotNull(postObservationV2_16);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertNotNull(specimenTemplate20);
        org.junit.Assert.assertTrue("'" + preservativeType21 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PreservativeType.SODIUM_AZIDE + "'", preservativeType21.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PreservativeType.SODIUM_AZIDE));
        org.junit.Assert.assertNotNull(labResultDetails25);
        org.junit.Assert.assertNotNull(labResultDetails27);
        org.junit.Assert.assertNotNull(specimenTemplate28);
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertNull(auditAttributes31);
        org.junit.Assert.assertNull(auditAttributes33);
        org.junit.Assert.assertNotNull(locationGroupType35);
        org.junit.Assert.assertNotNull(postSamplingLocationGroup38);
        org.junit.Assert.assertNotNull(samplingPlanPlannedActivity42);
        org.junit.Assert.assertNotNull(auditAttributes45);
        org.junit.Assert.assertNotNull(auditAttributes47);
        org.junit.Assert.assertNotNull(analysisMethodSimple51);
        org.junit.Assert.assertNotNull(analysisMethodSimple55);
    }

    @Test
    public void test53468() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest106.test53468");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DeleteActivityTemplate deleteActivityTemplate0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DeleteActivityTemplate();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DeleteActivityTemplate deleteActivityTemplate2 = deleteActivityTemplate0.setId("multipart/form-data; boundary=****1eab67e1-84c8-4b82-aa06-d6c7526551f8****");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DeleteActivityTemplate deleteActivityTemplate4 = deleteActivityTemplate2.setId("multipart/form-data; boundary=****44f0772e-c3ca-4316-8e2a-61ec8540d661****");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DeleteActivityTemplate deleteActivityTemplate6 = deleteActivityTemplate2.setId("multipart/form-data; boundary=****221f1588-b890-43c2-a3c8-0d77cfe54330****");
        java.lang.String str7 = deleteActivityTemplate2.getId();
        java.lang.String str8 = deleteActivityTemplate2.Id;
        org.junit.Assert.assertNotNull(deleteActivityTemplate2);
        org.junit.Assert.assertNotNull(deleteActivityTemplate4);
        org.junit.Assert.assertNotNull(deleteActivityTemplate6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "multipart/form-data; boundary=****221f1588-b890-43c2-a3c8-0d77cfe54330****" + "'", str7, "multipart/form-data; boundary=****221f1588-b890-43c2-a3c8-0d77cfe54330****");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "multipart/form-data; boundary=****221f1588-b890-43c2-a3c8-0d77cfe54330****" + "'", str8, "multipart/form-data; boundary=****221f1588-b890-43c2-a3c8-0d77cfe54330****");
    }

    @Test
    public void test53469() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest106.test53469");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PeriodOfApplicability periodOfApplicability0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PeriodOfApplicability();
        java.time.Instant instant1 = periodOfApplicability0.EndTime;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.UpchainProcessorListByTimeSeriesServiceRequest upchainProcessorListByTimeSeriesServiceRequest2 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.UpchainProcessorListByTimeSeriesServiceRequest();
        java.time.Instant instant3 = upchainProcessorListByTimeSeriesServiceRequest2.QueryFrom;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetSpecimens getSpecimens4 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetSpecimens();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_5 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray8 = new java.lang.String[] { "", "" };
        java.util.ArrayList<java.lang.String> strList9 = new java.util.ArrayList<java.lang.String>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList9, strArray8);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_11 = getObservationsV2_5.setDataClassifications((java.util.List<java.lang.String>) strList9);
        java.util.List<java.lang.String> strList12 = getObservationsV2_5.ResultGrades;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary13 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        dischargeSummary13.Reviewer = "";
        java.time.Instant instant16 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        dischargeSummary13.MeasurementTime = instant16;
        getObservationsV2_5.StartResultTime = instant16;
        java.lang.String[] strArray28 = new java.lang.String[] { "https", "/AQUARIUS/Provisioning/v1", "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ", "2021.4.62.0", "hi!", "2021.4.62.0", "2021.4.62.0", "/AQUARIUS/Acquisition/v2", "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ" };
        java.util.ArrayList<java.lang.String> strList29 = new java.util.ArrayList<java.lang.String>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList29, strArray28);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_31 = getObservationsV2_5.setAnalyticalGroupIds((java.util.List<java.lang.String>) strList29);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescription locationDescription32 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescription();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescription locationDescription34 = locationDescription32.setIdentifier("");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ControlConditionActivity controlConditionActivity35 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ControlConditionActivity();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ControlCleanedType controlCleanedType36 = null;
        controlConditionActivity35.ControlCleaned = controlCleanedType36;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse38 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant39 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse40 = locationDescriptionListServiceResponse38.setNextToken(instant39);
        controlConditionActivity35.DateCleaned = instant39;
        locationDescription34.LastModified = instant39;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_43 = getObservationsV2_31.setStartResultTime(instant39);
        getSpecimens4.After = instant39;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.UpchainProcessorListByTimeSeriesServiceRequest upchainProcessorListByTimeSeriesServiceRequest45 = upchainProcessorListByTimeSeriesServiceRequest2.setQueryTo(instant39);
        java.time.Instant instant46 = upchainProcessorListByTimeSeriesServiceRequest2.getQueryTo();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.PeriodOfApplicability periodOfApplicability47 = periodOfApplicability0.setEndTime(instant46);
        org.junit.Assert.assertNull(instant1);
        org.junit.Assert.assertNull(instant3);
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(getObservationsV2_11);
        org.junit.Assert.assertNull(strList12);
        org.junit.Assert.assertNotNull(instant16);
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(getObservationsV2_31);
        org.junit.Assert.assertNotNull(locationDescription34);
        org.junit.Assert.assertNotNull(instant39);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse40);
        org.junit.Assert.assertNotNull(getObservationsV2_43);
        org.junit.Assert.assertNotNull(upchainProcessorListByTimeSeriesServiceRequest45);
        org.junit.Assert.assertNotNull(instant46);
        org.junit.Assert.assertNotNull(periodOfApplicability47);
    }

    @Test
    public void test53470() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest106.test53470");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSchedule putSchedule0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSchedule();
        java.time.OffsetDateTime offsetDateTime1 = putSchedule0.StartDate;
        java.time.OffsetDateTime offsetDateTime2 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSchedule putSchedule3 = putSchedule0.setEndDate(offsetDateTime2);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationGroup samplingLocationGroup4 = putSchedule3.getSamplingLocationGroup();
        java.time.OffsetDateTime offsetDateTime5 = null;
        putSchedule3.EndDate = offsetDateTime5;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSchedule putSchedule8 = putSchedule3.setSamplingLocationGroupSelectionTypeRandomCount((java.lang.Integer) 100);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSchedule putSchedule9 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSchedule();
        java.time.OffsetDateTime offsetDateTime10 = putSchedule9.StartDate;
        java.time.OffsetDateTime offsetDateTime11 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSchedule putSchedule12 = putSchedule9.setEndDate(offsetDateTime11);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationGroup samplingLocationGroup13 = putSchedule12.getSamplingLocationGroup();
        java.time.OffsetDateTime offsetDateTime14 = null;
        putSchedule12.EndDate = offsetDateTime14;
        java.time.OffsetDateTime offsetDateTime16 = putSchedule12.getLastGenerationDate();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.RecurrenceDayMonthlyType recurrenceDayMonthlyType17 = putSchedule12.getRecurrenceDayMonthly();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSchedule putSchedule18 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSchedule();
        java.time.OffsetDateTime offsetDateTime19 = putSchedule18.StartDate;
        java.time.OffsetDateTime offsetDateTime20 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSchedule putSchedule21 = putSchedule18.setEndDate(offsetDateTime20);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes22 = putSchedule21.AuditAttributes;
        java.time.OffsetDateTime offsetDateTime23 = null;
        putSchedule21.LastGenerationDate = offsetDateTime23;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSchedule putSchedule25 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSchedule();
        java.lang.Integer int26 = putSchedule25.getSamplingLocationGroupSelectionTypeRandomCount();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.RecurrenceType recurrenceType27 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.RecurrenceType.BI_WEEKLY;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSchedule putSchedule28 = putSchedule25.setRecurrenceType(recurrenceType27);
        putSchedule21.RecurrenceType = recurrenceType27;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSchedule putSchedule30 = putSchedule12.setRecurrenceType(recurrenceType27);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutSchedule putSchedule31 = putSchedule3.setRecurrenceType(recurrenceType27);
        putSchedule31.Id = "multipart/form-data; boundary=****231224c4-98ce-4e30-bd65-1d25287c4abe****";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.RecurrenceDayWeeklyType recurrenceDayWeeklyType34 = putSchedule31.getRecurrenceDayWeekly();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes35 = putSchedule31.getAuditAttributes();
        org.junit.Assert.assertNull(offsetDateTime1);
        org.junit.Assert.assertNotNull(putSchedule3);
        org.junit.Assert.assertNull(samplingLocationGroup4);
        org.junit.Assert.assertNotNull(putSchedule8);
        org.junit.Assert.assertNull(offsetDateTime10);
        org.junit.Assert.assertNotNull(putSchedule12);
        org.junit.Assert.assertNull(samplingLocationGroup13);
        org.junit.Assert.assertNull(offsetDateTime16);
        org.junit.Assert.assertNull(recurrenceDayMonthlyType17);
        org.junit.Assert.assertNull(offsetDateTime19);
        org.junit.Assert.assertNotNull(putSchedule21);
        org.junit.Assert.assertNull(auditAttributes22);
        org.junit.Assert.assertNull(int26);
        org.junit.Assert.assertTrue("'" + recurrenceType27 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.RecurrenceType.BI_WEEKLY + "'", recurrenceType27.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.RecurrenceType.BI_WEEKLY));
        org.junit.Assert.assertNotNull(putSchedule28);
        org.junit.Assert.assertNotNull(putSchedule30);
        org.junit.Assert.assertNotNull(putSchedule31);
        org.junit.Assert.assertNull(recurrenceDayWeeklyType34);
        org.junit.Assert.assertNull(auditAttributes35);
    }

    @Test
    public void test53471() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest106.test53471");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetFilter getFilter0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetFilter();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetFilter getFilter2 = getFilter0.setId("");
        java.lang.String str3 = getFilter0.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetFilter getFilter5 = getFilter0.setId("http");
        java.lang.Object obj6 = getFilter0.getResponseType();
        org.junit.Assert.assertNotNull(getFilter2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(getFilter5);
        org.junit.Assert.assertNotNull(obj6);
        org.junit.Assert.assertEquals(obj6.toString(), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$Filter");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj6), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$Filter");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj6), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$Filter");
    }

    @Test
    public void test53472() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest106.test53472");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutBulkEditResultGradesV2 putBulkEditResultGradesV2_0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutBulkEditResultGradesV2();
        java.lang.String str1 = putBulkEditResultGradesV2_0.getDetectionCondition();
        java.util.List<java.lang.String> strList2 = putBulkEditResultGradesV2_0.getTaxonIds();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutBulkEditResultGradesV2 putBulkEditResultGradesV2_4 = putBulkEditResultGradesV2_0.setLimit((java.lang.Integer) 10);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutOpenIdConnectRelyingPartyConfiguration putOpenIdConnectRelyingPartyConfiguration5 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutOpenIdConnectRelyingPartyConfiguration();
        java.util.List<java.lang.String> strList6 = putOpenIdConnectRelyingPartyConfiguration5.getScopes();
        java.lang.String str7 = putOpenIdConnectRelyingPartyConfiguration5.getOptionalIssuerDiscoveryUri();
        putOpenIdConnectRelyingPartyConfiguration5.IdentifierClaim = "9999-12-31T23:59:59.999Z";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.OpenIdConnectRelyingPartyConfigurationBase openIdConnectRelyingPartyConfigurationBase11 = putOpenIdConnectRelyingPartyConfiguration5.setRedirectUri("/AQUARIUS/Acquisition/v2://9999-12-31T23:59:59.999Z");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.OpenIdConnectRelyingPartyConfigurationBase openIdConnectRelyingPartyConfigurationBase13 = putOpenIdConnectRelyingPartyConfiguration5.setIdentifierClaim("https");
        java.lang.String str14 = putOpenIdConnectRelyingPartyConfiguration5.getClientIdentifier();
        java.lang.String str15 = putOpenIdConnectRelyingPartyConfiguration5.ClientSecret;
        putOpenIdConnectRelyingPartyConfiguration5.OptionalIssuerDiscoveryUri = "";
        putOpenIdConnectRelyingPartyConfiguration5.ClientSecret = "multipart/form-data; boundary=****ee0ec537-fde4-45ee-9c35-68c37cf65c1c****";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_20 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray23 = new java.lang.String[] { "", "" };
        java.util.ArrayList<java.lang.String> strList24 = new java.util.ArrayList<java.lang.String>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList24, strArray23);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_26 = getObservationsV2_20.setDataClassifications((java.util.List<java.lang.String>) strList24);
        getObservationsV2_26.DepthUnitCustomId = "hi!";
        java.lang.String str29 = getObservationsV2_26.DepthUnitId;
        java.util.List<java.lang.String> strList30 = getObservationsV2_26.getDataClassifications();
        putOpenIdConnectRelyingPartyConfiguration5.Scopes = strList30;
        putBulkEditResultGradesV2_4.Ids = strList30;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(strList2);
        org.junit.Assert.assertNotNull(putBulkEditResultGradesV2_4);
        org.junit.Assert.assertNull(strList6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(openIdConnectRelyingPartyConfigurationBase11);
        org.junit.Assert.assertNotNull(openIdConnectRelyingPartyConfigurationBase13);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(getObservationsV2_26);
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertNotNull(strList30);
    }

    @Test
    public void test53473() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest106.test53473");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.PostTimeSeriesOverwriteAppend postTimeSeriesOverwriteAppend0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.PostTimeSeriesOverwriteAppend();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Acquisition.PostTimeSeriesOverwriteAppend postTimeSeriesOverwriteAppend2 = postTimeSeriesOverwriteAppend0.setUniqueId("");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Interval interval3 = postTimeSeriesOverwriteAppend0.TimeRange;
        org.junit.Assert.assertNotNull(postTimeSeriesOverwriteAppend2);
        org.junit.Assert.assertNull(interval3);
    }

    @Test
    public void test53474() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest106.test53474");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CrossSectionPoint crossSectionPoint0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CrossSectionPoint();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay1 = null;
        crossSectionPoint0.Distance = quantityWithDisplay1;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay3 = null;
        crossSectionPoint0.Distance = quantityWithDisplay3;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay5 = crossSectionPoint0.Distance;
        java.lang.String str6 = crossSectionPoint0.Comments;
        org.junit.Assert.assertNull(quantityWithDisplay5);
        org.junit.Assert.assertNull(str6);
    }

    @Test
    public void test53475() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest106.test53475");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.AdcpDischargeActivity adcpDischargeActivity0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.AdcpDischargeActivity();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.AdcpDischargeActivity adcpDischargeActivity2 = adcpDischargeActivity0.setSoftwareVersion("yyyy'-'MM'-'dd'T'HH':'mm':'ss");
        java.lang.Integer int3 = adcpDischargeActivity0.NumberOfTransects;
        java.lang.String str4 = adcpDischargeActivity0.getTopEstimateMethod();
        java.lang.String str5 = adcpDischargeActivity0.getModel();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeChannelMeasurement dischargeChannelMeasurement6 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeChannelMeasurement();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ChannelMaterialType channelMaterialType7 = dischargeChannelMeasurement6.getChannelMaterial();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay8 = dischargeChannelMeasurement6.Discharge;
        java.lang.String str9 = dischargeChannelMeasurement6.MonitoringMethod;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.QuantityWithDisplay quantityWithDisplay10 = null;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeChannelMeasurement dischargeChannelMeasurement11 = dischargeChannelMeasurement6.setDischarge(quantityWithDisplay10);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ChannelEvennessType channelEvennessType12 = dischargeChannelMeasurement6.getChannelEvenness();
        adcpDischargeActivity0.DischargeChannelMeasurement = dischargeChannelMeasurement6;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ChannelEvennessType channelEvennessType14 = dischargeChannelMeasurement6.ChannelEvenness;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeChannelMeasurement dischargeChannelMeasurement15 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeChannelMeasurement();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ChannelMaterialType channelMaterialType16 = dischargeChannelMeasurement15.getChannelMaterial();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeChannelMeasurement dischargeChannelMeasurement18 = dischargeChannelMeasurement15.setChannel("yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSSSSSZZZZZ");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MeasurementLocationToGageType measurementLocationToGageType19 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MeasurementLocationToGageType.Unknown;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeChannelMeasurement dischargeChannelMeasurement20 = dischargeChannelMeasurement15.setMeasurementLocationToGage(measurementLocationToGageType19);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CurrentMeterType currentMeterType21 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CurrentMeterType.PolymerCupAaMeter;
        dischargeChannelMeasurement15.CurrentMeter = currentMeterType21;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CurrentMeterType currentMeterType23 = dischargeChannelMeasurement15.getCurrentMeter();
        dischargeChannelMeasurement6.CurrentMeter = currentMeterType23;
        org.junit.Assert.assertNotNull(adcpDischargeActivity2);
        org.junit.Assert.assertNull(int3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(channelMaterialType7);
        org.junit.Assert.assertNull(quantityWithDisplay8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(dischargeChannelMeasurement11);
        org.junit.Assert.assertNull(channelEvennessType12);
        org.junit.Assert.assertNull(channelEvennessType14);
        org.junit.Assert.assertNull(channelMaterialType16);
        org.junit.Assert.assertNotNull(dischargeChannelMeasurement18);
        org.junit.Assert.assertTrue("'" + measurementLocationToGageType19 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MeasurementLocationToGageType.Unknown + "'", measurementLocationToGageType19.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MeasurementLocationToGageType.Unknown));
        org.junit.Assert.assertNotNull(dischargeChannelMeasurement20);
        org.junit.Assert.assertTrue("'" + currentMeterType21 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CurrentMeterType.PolymerCupAaMeter + "'", currentMeterType21.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CurrentMeterType.PolymerCupAaMeter));
        org.junit.Assert.assertTrue("'" + currentMeterType23 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CurrentMeterType.PolymerCupAaMeter + "'", currentMeterType23.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CurrentMeterType.PolymerCupAaMeter));
    }

    @Test
    public void test53476() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest106.test53476");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Activity activity0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Activity();
        java.time.OffsetDateTime offsetDateTime1 = activity0.getStartTime();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Activity activity3 = activity0.setLoggerFileName("'.'SSSSSSS");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocation samplingLocation4 = activity0.SamplingLocation;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutActivity putActivity5 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutActivity();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity plannedActivity6 = putActivity5.PlannedActivity;
        java.time.OffsetDateTime offsetDateTime7 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutActivity putActivity8 = putActivity5.setEndTime(offsetDateTime7);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Device device9 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Device();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Device device11 = device9.setType("/AQUARIUS/Acquisition/v2");
        putActivity5.Device = device11;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Device device14 = device11.setDescription("9999-12-31T23:59:59.999Z");
        activity0.Device = device14;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Medium medium16 = activity0.Medium;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.FieldVisit fieldVisit17 = activity0.FieldVisit;
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag> samplingContextTagList18 = activity0.SamplingContextTags;
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag> samplingContextTagList19 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Activity activity20 = activity0.setSamplingContextTags(samplingContextTagList19);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Activity activity22 = activity0.setCustomId("-PT87591240H");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes23 = activity22.getAuditAttributes();
        org.junit.Assert.assertNull(offsetDateTime1);
        org.junit.Assert.assertNotNull(activity3);
        org.junit.Assert.assertNull(samplingLocation4);
        org.junit.Assert.assertNull(plannedActivity6);
        org.junit.Assert.assertNotNull(putActivity8);
        org.junit.Assert.assertNotNull(device11);
        org.junit.Assert.assertNotNull(device14);
        org.junit.Assert.assertNull(medium16);
        org.junit.Assert.assertNull(fieldVisit17);
        org.junit.Assert.assertNull(samplingContextTagList18);
        org.junit.Assert.assertNotNull(activity20);
        org.junit.Assert.assertNotNull(activity22);
        org.junit.Assert.assertNull(auditAttributes23);
    }

    @Test
    public void test53477() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest106.test53477");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExtendedAttribute getExtendedAttribute0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExtendedAttribute();
        java.lang.Object obj1 = getExtendedAttribute0.getResponseType();
        org.junit.Assert.assertNotNull(obj1);
        org.junit.Assert.assertEquals(obj1.toString(), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$ExtendedAttributeDefinition");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj1), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$ExtendedAttributeDefinition");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj1), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$ExtendedAttributeDefinition");
    }

    @Test
    public void test53478() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest106.test53478");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemTaxon importItemTaxon0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemTaxon();
        java.util.List<java.lang.String> strList1 = importItemTaxon0.getWarningMessages();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Taxon taxon2 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemTaxon importItemTaxon3 = importItemTaxon0.setItem(taxon2);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostCalculatedDerivedTimeSeries postCalculatedDerivedTimeSeries4 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostCalculatedDerivedTimeSeries();
        java.lang.String str5 = postCalculatedDerivedTimeSeries4.LocationUniqueId;
        java.util.List<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeValue> extendedAttributeValueList6 = postCalculatedDerivedTimeSeries4.getExtendedAttributeValues();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemTaxon importItemTaxon7 = importItemTaxon3.setErrors((java.lang.Object) postCalculatedDerivedTimeSeries4);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObject importItemObject8 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObject();
        java.util.List<java.lang.String> strList9 = importItemObject8.getWarningMessages();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportChangeItem[] importChangeItemArray10 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportChangeItem[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportChangeItem> importChangeItemList11 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportChangeItem>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportChangeItem>) importChangeItemList11, importChangeItemArray10);
        importItemObject8.ItemComparison = importChangeItemList11;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags14 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray18 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList19 = new java.util.ArrayList<java.lang.String>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList19, strArray18);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags21 = putLocationTags14.setTagUniqueIds(strList19);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObject importItemObject22 = importItemObject8.setExistingItem((java.lang.Object) putLocationTags14);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.OpenIdConnectUser openIdConnectUser23 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.OpenIdConnectUser();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.OpenIdConnectUser openIdConnectUser25 = openIdConnectUser23.setIdentifier("");
        java.lang.Boolean boolean26 = openIdConnectUser25.CanConfigureSystem;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObject importItemObject27 = importItemObject8.setErrors((java.lang.Object) openIdConnectUser25);
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportChangeItem> importChangeItemList28 = importItemObject27.ItemComparison;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemTaxon importItemTaxon29 = importItemTaxon7.setItemComparison(importChangeItemList28);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemTaxon importItemTaxon30 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemTaxon();
        java.util.List<java.lang.String> strList31 = importItemTaxon30.getWarningMessages();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Taxon taxon32 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemTaxon importItemTaxon33 = importItemTaxon30.setItem(taxon32);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostCalculatedDerivedTimeSeries postCalculatedDerivedTimeSeries34 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostCalculatedDerivedTimeSeries();
        java.lang.String str35 = postCalculatedDerivedTimeSeries34.LocationUniqueId;
        java.util.List<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeValue> extendedAttributeValueList36 = postCalculatedDerivedTimeSeries34.getExtendedAttributeValues();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemTaxon importItemTaxon37 = importItemTaxon33.setErrors((java.lang.Object) postCalculatedDerivedTimeSeries34);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObject importItemObject38 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObject();
        java.util.List<java.lang.String> strList39 = importItemObject38.getWarningMessages();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportChangeItem[] importChangeItemArray40 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportChangeItem[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportChangeItem> importChangeItemList41 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportChangeItem>();
        boolean boolean42 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportChangeItem>) importChangeItemList41, importChangeItemArray40);
        importItemObject38.ItemComparison = importChangeItemList41;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags44 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray48 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList49 = new java.util.ArrayList<java.lang.String>();
        boolean boolean50 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList49, strArray48);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags51 = putLocationTags44.setTagUniqueIds(strList49);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObject importItemObject52 = importItemObject38.setExistingItem((java.lang.Object) putLocationTags44);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.OpenIdConnectUser openIdConnectUser53 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.OpenIdConnectUser();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.OpenIdConnectUser openIdConnectUser55 = openIdConnectUser53.setIdentifier("");
        java.lang.Boolean boolean56 = openIdConnectUser55.CanConfigureSystem;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObject importItemObject57 = importItemObject38.setErrors((java.lang.Object) openIdConnectUser55);
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportChangeItem> importChangeItemList58 = importItemObject57.ItemComparison;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemTaxon importItemTaxon59 = importItemTaxon37.setItemComparison(importChangeItemList58);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemTaxon importItemTaxon60 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemTaxon();
        java.util.List<java.lang.String> strList61 = importItemTaxon60.getWarningMessages();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Taxon taxon62 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemTaxon importItemTaxon63 = importItemTaxon60.setItem(taxon62);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostCalculatedDerivedTimeSeries postCalculatedDerivedTimeSeries64 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostCalculatedDerivedTimeSeries();
        java.lang.String str65 = postCalculatedDerivedTimeSeries64.LocationUniqueId;
        java.util.List<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ExtendedAttributeValue> extendedAttributeValueList66 = postCalculatedDerivedTimeSeries64.getExtendedAttributeValues();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemTaxon importItemTaxon67 = importItemTaxon63.setErrors((java.lang.Object) postCalculatedDerivedTimeSeries64);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Taxon taxon68 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Taxon();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemTaxon importItemTaxon69 = importItemTaxon63.setExistingItem(taxon68);
        importItemTaxon37.Item = taxon68;
        taxon68.ItisTsn = "yyyy'-'MM'-'dd'T'HH':'mm':'ss";
        taxon68.ItisTsn = "MaxDuration";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutUnit putUnit75 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutUnit();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes76 = putUnit75.getAuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutDetectioncondition putDetectioncondition77 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutDetectioncondition();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes78 = putDetectioncondition77.getAuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutDetectioncondition putDetectioncondition80 = putDetectioncondition77.setCustomId("http");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivity samplingPlanPlannedActivity81 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivity();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes82 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivity samplingPlanPlannedActivity83 = samplingPlanPlannedActivity81.setAuditAttributes(auditAttributes82);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes84 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes86 = auditAttributes84.setCreationUserProfileId("'.'SSSSSSS");
        samplingPlanPlannedActivity83.AuditAttributes = auditAttributes84;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes88 = samplingPlanPlannedActivity83.AuditAttributes;
        putDetectioncondition77.AuditAttributes = auditAttributes88;
        putUnit75.AuditAttributes = auditAttributes88;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes92 = auditAttributes88.setCreationUserProfileId("http");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Taxon taxon93 = taxon68.setAuditAttributes(auditAttributes92);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes94 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Taxon taxon95 = taxon93.setAuditAttributes(auditAttributes94);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemTaxon importItemTaxon96 = importItemTaxon7.setExistingItem(taxon93);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemTaxon importItemTaxon98 = importItemTaxon7.setRowId("");
        java.lang.String str99 = importItemTaxon98.RowId;
        org.junit.Assert.assertNull(strList1);
        org.junit.Assert.assertNotNull(importItemTaxon3);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(extendedAttributeValueList6);
        org.junit.Assert.assertNotNull(importItemTaxon7);
        org.junit.Assert.assertNull(strList9);
        org.junit.Assert.assertNotNull(importChangeItemArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(putLocationTags21);
        org.junit.Assert.assertNotNull(importItemObject22);
        org.junit.Assert.assertNotNull(openIdConnectUser25);
        org.junit.Assert.assertNull(boolean26);
        org.junit.Assert.assertNotNull(importItemObject27);
        org.junit.Assert.assertNotNull(importChangeItemList28);
        org.junit.Assert.assertNotNull(importItemTaxon29);
        org.junit.Assert.assertNull(strList31);
        org.junit.Assert.assertNotNull(importItemTaxon33);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertNull(extendedAttributeValueList36);
        org.junit.Assert.assertNotNull(importItemTaxon37);
        org.junit.Assert.assertNull(strList39);
        org.junit.Assert.assertNotNull(importChangeItemArray40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(putLocationTags51);
        org.junit.Assert.assertNotNull(importItemObject52);
        org.junit.Assert.assertNotNull(openIdConnectUser55);
        org.junit.Assert.assertNull(boolean56);
        org.junit.Assert.assertNotNull(importItemObject57);
        org.junit.Assert.assertNotNull(importChangeItemList58);
        org.junit.Assert.assertNotNull(importItemTaxon59);
        org.junit.Assert.assertNull(strList61);
        org.junit.Assert.assertNotNull(importItemTaxon63);
        org.junit.Assert.assertNull(str65);
        org.junit.Assert.assertNull(extendedAttributeValueList66);
        org.junit.Assert.assertNotNull(importItemTaxon67);
        org.junit.Assert.assertNotNull(importItemTaxon69);
        org.junit.Assert.assertNull(auditAttributes76);
        org.junit.Assert.assertNull(auditAttributes78);
        org.junit.Assert.assertNotNull(putDetectioncondition80);
        org.junit.Assert.assertNotNull(samplingPlanPlannedActivity83);
        org.junit.Assert.assertNotNull(auditAttributes86);
        org.junit.Assert.assertNotNull(auditAttributes88);
        org.junit.Assert.assertNotNull(auditAttributes92);
        org.junit.Assert.assertNotNull(taxon93);
        org.junit.Assert.assertNotNull(taxon95);
        org.junit.Assert.assertNotNull(importItemTaxon96);
        org.junit.Assert.assertNotNull(importItemTaxon98);
        org.junit.Assert.assertEquals("'" + str99 + "' != '" + "" + "'", str99, "");
    }

    @Test
    public void test53479() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest106.test53479");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFilter postFilter0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFilter();
        java.time.OffsetDateTime offsetDateTime1 = postFilter0.StartTime;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes2 = postFilter0.getAuditAttributes();
        postFilter0.Description = "'.'SSSSSSS";
        java.time.OffsetDateTime offsetDateTime5 = postFilter0.getEndTime();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFilter postFilter6 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFilter();
        postFilter6.CustomId = "http";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocation[] samplingLocationArray9 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocation[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocation> samplingLocationList10 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocation>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocation>) samplingLocationList10, samplingLocationArray9);
        postFilter6.SamplingLocations = samplingLocationList10;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostFilter postFilter13 = postFilter0.setSamplingLocations((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocation>) samplingLocationList10);
        java.lang.Object obj14 = postFilter13.getResponseType();
        java.lang.String str15 = postFilter13.CustomId;
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocation> samplingLocationList16 = postFilter13.getSamplingLocations();
        org.junit.Assert.assertNull(offsetDateTime1);
        org.junit.Assert.assertNull(auditAttributes2);
        org.junit.Assert.assertNull(offsetDateTime5);
        org.junit.Assert.assertNotNull(samplingLocationArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(postFilter13);
        org.junit.Assert.assertNotNull(obj14);
        org.junit.Assert.assertEquals(obj14.toString(), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$Filter");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj14), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$Filter");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj14), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$Filter");
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNotNull(samplingLocationList16);
    }

    @Test
    public void test53480() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest106.test53480");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem analyticalGroupItem0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod1 = analyticalGroupItem0.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod2 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem analyticalGroupItem3 = analyticalGroupItem0.setAnalysisMethod(analysisMethod2);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod4 = analyticalGroupItem0.AnalysisMethod;
        java.lang.String str5 = analyticalGroupItem0.HoldingTime;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabInstruction labInstruction6 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabInstruction();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod7 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabInstruction labInstruction8 = labInstruction6.setAnalysisMethod(analysisMethod7);
        java.lang.String str9 = labInstruction6.getAnalysisComment();
        java.lang.String str10 = labInstruction6.getAnalysisComment();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabInstruction labInstruction12 = labInstruction6.setPreparationMethod("****231224c4-98ce-4e30-bd65-1d25287c4abe****");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabInstruction labInstruction14 = labInstruction12.setAnalysisComment("https");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemAnalysisMethod importItemAnalysisMethod15 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemAnalysisMethod importItemAnalysisMethod17 = importItemAnalysisMethod15.setInput("POST");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemAnalysisMethod importItemAnalysisMethod19 = importItemAnalysisMethod17.setRowId("https");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod20 = importItemAnalysisMethod19.getExistingItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod21 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemAnalysisMethod importItemAnalysisMethod22 = importItemAnalysisMethod19.setItem(analysisMethod21);
        java.lang.String str23 = importItemAnalysisMethod19.RowId;
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportChangeItem> importChangeItemList24 = importItemAnalysisMethod19.ItemComparison;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod25 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod();
        java.lang.String str26 = analysisMethod25.getName();
        analysisMethod25.MethodId = "multipart/form-data; boundary=****f2ce0d54-dac7-4cd0-b74f-1024089261f9****";
        importItemAnalysisMethod19.Item = analysisMethod25;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod30 = importItemAnalysisMethod19.getExistingItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod31 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod();
        java.lang.String str32 = analysisMethod31.getName();
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple> importHistoryEventSimpleList33 = analysisMethod31.ImportHistoryEventSimples;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod35 = analysisMethod31.setDescription("multipart/form-data; boundary=****7eff1774-b6b0-471a-961c-156c64359366****");
        java.lang.String str36 = analysisMethod35.getName();
        importItemAnalysisMethod19.Item = analysisMethod35;
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportHistoryEventSimple> importHistoryEventSimpleList38 = analysisMethod35.ImportHistoryEventSimples;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostDetectioncondition postDetectioncondition39 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostDetectioncondition();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes40 = postDetectioncondition39.getAuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostDetectioncondition postDetectioncondition42 = postDetectioncondition39.setId("9999-12-31T23:59:59.999Z");
        postDetectioncondition39.Description = "9999-12-31T23:59:59.999Z";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostDetectioncondition postDetectioncondition46 = postDetectioncondition39.setId("/AQUARIUS/Provisioning/v1");
        postDetectioncondition39.CustomId = "/AQUARIUS/Acquisition/v2";
        java.lang.Object obj49 = postDetectioncondition39.getResponseType();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivity samplingPlanPlannedActivity50 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivity();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes51 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlanPlannedActivity samplingPlanPlannedActivity52 = samplingPlanPlannedActivity50.setAuditAttributes(auditAttributes51);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes53 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes55 = auditAttributes53.setCreationUserProfileId("'.'SSSSSSS");
        samplingPlanPlannedActivity52.AuditAttributes = auditAttributes53;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostDetectioncondition postDetectioncondition57 = postDetectioncondition39.setAuditAttributes(auditAttributes53);
        analysisMethod35.AuditAttributes = auditAttributes53;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LabInstruction labInstruction59 = labInstruction14.setAnalysisMethod(analysisMethod35);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod60 = labInstruction59.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem analyticalGroupItem61 = analyticalGroupItem0.setAnalysisMethod(analysisMethod60);
        java.lang.String str62 = analysisMethod60.getContext();
        java.lang.String str63 = analysisMethod60.MethodId;
        org.junit.Assert.assertNull(analysisMethod1);
        org.junit.Assert.assertNotNull(analyticalGroupItem3);
        org.junit.Assert.assertNull(analysisMethod4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(labInstruction8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNotNull(labInstruction12);
        org.junit.Assert.assertNotNull(labInstruction14);
        org.junit.Assert.assertNotNull(importItemAnalysisMethod17);
        org.junit.Assert.assertNotNull(importItemAnalysisMethod19);
        org.junit.Assert.assertNull(analysisMethod20);
        org.junit.Assert.assertNotNull(importItemAnalysisMethod22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "https" + "'", str23, "https");
        org.junit.Assert.assertNull(importChangeItemList24);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertNull(analysisMethod30);
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertNull(importHistoryEventSimpleList33);
        org.junit.Assert.assertNotNull(analysisMethod35);
        org.junit.Assert.assertNull(str36);
        org.junit.Assert.assertNull(importHistoryEventSimpleList38);
        org.junit.Assert.assertNull(auditAttributes40);
        org.junit.Assert.assertNotNull(postDetectioncondition42);
        org.junit.Assert.assertNotNull(postDetectioncondition46);
        org.junit.Assert.assertNotNull(obj49);
        org.junit.Assert.assertEquals(obj49.toString(), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$ResultDetectionCondition");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj49), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$ResultDetectionCondition");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj49), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$ResultDetectionCondition");
        org.junit.Assert.assertNotNull(samplingPlanPlannedActivity52);
        org.junit.Assert.assertNotNull(auditAttributes55);
        org.junit.Assert.assertNotNull(postDetectioncondition57);
        org.junit.Assert.assertNotNull(labInstruction59);
        org.junit.Assert.assertNotNull(analysisMethod60);
        org.junit.Assert.assertNotNull(analyticalGroupItem61);
        org.junit.Assert.assertNull(str62);
        org.junit.Assert.assertNull(str63);
    }

    @Test
    public void test53481() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest106.test53481");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutAccessGroup putAccessGroup0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutAccessGroup();
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationGroup> samplingLocationGroupList1 = putAccessGroup0.SamplingLocationGroups;
        java.lang.String str2 = putAccessGroup0.Name;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostAccessGroup postAccessGroup3 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostAccessGroup();
        java.lang.String str4 = postAccessGroup3.Name;
        postAccessGroup3.Id = "";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostSamplingLocation postSamplingLocation7 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostSamplingLocation();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostSamplingLocation postSamplingLocation9 = postSamplingLocation7.setCustomId("hi!");
        java.lang.String str10 = postSamplingLocation9.getName();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostSamplingLocation postSamplingLocation11 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostSamplingLocation();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostSamplingLocation postSamplingLocation13 = postSamplingLocation11.setCustomId("hi!");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Address address14 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostSamplingLocation postSamplingLocation15 = postSamplingLocation11.setAddress(address14);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity quantity16 = postSamplingLocation15.getElevation();
        postSamplingLocation15.Longitude = "POST";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes19 = postSamplingLocation15.getAuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostAccessGroup postAccessGroup20 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostAccessGroup();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationGroup[] samplingLocationGroupArray21 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationGroup[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationGroup> samplingLocationGroupList22 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationGroup>();
        boolean boolean23 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationGroup>) samplingLocationGroupList22, samplingLocationGroupArray21);
        postAccessGroup20.SamplingLocationGroups = samplingLocationGroupList22;
        postSamplingLocation15.SamplingLocationGroups = samplingLocationGroupList22;
        postSamplingLocation9.SamplingLocationGroups = samplingLocationGroupList22;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostAccessGroup postAccessGroup27 = postAccessGroup3.setSamplingLocationGroups((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationGroup>) samplingLocationGroupList22);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutAccessGroup putAccessGroup28 = putAccessGroup0.setSamplingLocationGroups((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingLocationGroup>) samplingLocationGroupList22);
        java.lang.String str29 = putAccessGroup28.Id;
        org.junit.Assert.assertNull(samplingLocationGroupList1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNotNull(postSamplingLocation9);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNotNull(postSamplingLocation13);
        org.junit.Assert.assertNotNull(postSamplingLocation15);
        org.junit.Assert.assertNull(quantity16);
        org.junit.Assert.assertNull(auditAttributes19);
        org.junit.Assert.assertNotNull(samplingLocationGroupArray21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(postAccessGroup27);
        org.junit.Assert.assertNotNull(putAccessGroup28);
        org.junit.Assert.assertNull(str29);
    }

    @Test
    public void test53482() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest106.test53482");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostAnalyticalGroup postAnalyticalGroup0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostAnalyticalGroup();
        postAnalyticalGroup0.Id = "/AQUARIUS";
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem> analyticalGroupItemList3 = postAnalyticalGroup0.getAnalyticalGroupItems();
        postAnalyticalGroup0.NumberOfObservedPropertiesInGroupItems = 2;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostAnalyticalGroup postAnalyticalGroup7 = postAnalyticalGroup0.setId("multipart/form-data; boundary=****9fadde69-3f13-40c4-a87c-0f3f51c2dd35****");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostAnalyticalGroup postAnalyticalGroup8 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostAnalyticalGroup();
        postAnalyticalGroup8.Id = "/AQUARIUS";
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem> analyticalGroupItemList11 = postAnalyticalGroup8.getAnalyticalGroupItems();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroup analyticalGroup12 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroup();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupType analyticalGroupType13 = analyticalGroup12.getType();
        analyticalGroup12.Name = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSSSSSZZZZZ";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroup analyticalGroup16 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroup();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem analyticalGroupItem17 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod18 = analyticalGroupItem17.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem analyticalGroupItem19 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod20 = analyticalGroupItem19.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod21 = analyticalGroupItem19.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem analyticalGroupItem22 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod23 = analyticalGroupItem22.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod24 = analyticalGroupItem22.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod25 = null;
        analyticalGroupItem22.AnalysisMethod = analysisMethod25;
        java.lang.String str27 = analyticalGroupItem22.getHoldingTime();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem analyticalGroupItem28 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod29 = analyticalGroupItem28.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod30 = analyticalGroupItem28.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem analyticalGroupItem31 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod32 = analyticalGroupItem31.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem analyticalGroupItem33 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod34 = analyticalGroupItem33.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod35 = analyticalGroupItem33.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod36 = null;
        analyticalGroupItem33.AnalysisMethod = analysisMethod36;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem[] analyticalGroupItemArray38 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem[] { analyticalGroupItem17, analyticalGroupItem19, analyticalGroupItem22, analyticalGroupItem28, analyticalGroupItem31, analyticalGroupItem33 };
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem> analyticalGroupItemList39 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem>) analyticalGroupItemList39, analyticalGroupItemArray38);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroup analyticalGroup41 = analyticalGroup16.setAnalyticalGroupItems((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem>) analyticalGroupItemList39);
        analyticalGroup12.AnalyticalGroupItems = analyticalGroupItemList39;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes43 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes();
        analyticalGroup12.AuditAttributes = auditAttributes43;
        java.lang.String str45 = analyticalGroup12.Id;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupType analyticalGroupType46 = analyticalGroup12.getType();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroup analyticalGroup47 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroup();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupType analyticalGroupType48 = analyticalGroup47.getType();
        java.lang.String str49 = analyticalGroup47.getName();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroup analyticalGroup51 = analyticalGroup47.setDescription("MinInstant");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupType analyticalGroupType52 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupType.FIELD_SURVEY;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroup analyticalGroup53 = analyticalGroup51.setType(analyticalGroupType52);
        analyticalGroup12.Type = analyticalGroupType52;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostAnalyticalGroup postAnalyticalGroup55 = postAnalyticalGroup8.setType(analyticalGroupType52);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostAnalyticalGroup postAnalyticalGroup57 = postAnalyticalGroup55.setName("0001-01-01T00:00:00.000Z");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupType analyticalGroupType58 = postAnalyticalGroup55.Type;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostAnalyticalGroup postAnalyticalGroup59 = postAnalyticalGroup0.setType(analyticalGroupType58);
        java.lang.Object obj60 = postAnalyticalGroup59.getResponseType();
        org.junit.Assert.assertNull(analyticalGroupItemList3);
        org.junit.Assert.assertNotNull(postAnalyticalGroup7);
        org.junit.Assert.assertNull(analyticalGroupItemList11);
        org.junit.Assert.assertNull(analyticalGroupType13);
        org.junit.Assert.assertNull(analysisMethod18);
        org.junit.Assert.assertNull(analysisMethod20);
        org.junit.Assert.assertNull(analysisMethod21);
        org.junit.Assert.assertNull(analysisMethod23);
        org.junit.Assert.assertNull(analysisMethod24);
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertNull(analysisMethod29);
        org.junit.Assert.assertNull(analysisMethod30);
        org.junit.Assert.assertNull(analysisMethod32);
        org.junit.Assert.assertNull(analysisMethod34);
        org.junit.Assert.assertNull(analysisMethod35);
        org.junit.Assert.assertNotNull(analyticalGroupItemArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(analyticalGroup41);
        org.junit.Assert.assertNull(str45);
        org.junit.Assert.assertNull(analyticalGroupType46);
        org.junit.Assert.assertNull(analyticalGroupType48);
        org.junit.Assert.assertNull(str49);
        org.junit.Assert.assertNotNull(analyticalGroup51);
        org.junit.Assert.assertTrue("'" + analyticalGroupType52 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupType.FIELD_SURVEY + "'", analyticalGroupType52.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupType.FIELD_SURVEY));
        org.junit.Assert.assertNotNull(analyticalGroup53);
        org.junit.Assert.assertNotNull(postAnalyticalGroup55);
        org.junit.Assert.assertNotNull(postAnalyticalGroup57);
        org.junit.Assert.assertTrue("'" + analyticalGroupType58 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupType.FIELD_SURVEY + "'", analyticalGroupType58.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupType.FIELD_SURVEY));
        org.junit.Assert.assertNotNull(postAnalyticalGroup59);
        org.junit.Assert.assertNotNull(obj60);
        org.junit.Assert.assertEquals(obj60.toString(), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$AnalyticalGroup");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj60), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$AnalyticalGroup");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj60), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$AnalyticalGroup");
    }

    @Test
    public void test53483() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest106.test53483");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitDataServiceResponse fieldVisitDataServiceResponse0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitDataServiceResponse();
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CrossSectionSurveyActivity> crossSectionSurveyActivityList1 = fieldVisitDataServiceResponse0.CrossSectionSurveyActivity;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitDataServiceResponse fieldVisitDataServiceResponse3 = fieldVisitDataServiceResponse0.setIdentifier("");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LevelSurveyActivity levelSurveyActivity4 = fieldVisitDataServiceResponse3.LevelSurveyActivity;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ControlConditionActivity controlConditionActivity5 = fieldVisitDataServiceResponse3.ControlConditionActivity;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitDataServiceResponse fieldVisitDataServiceResponse6 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitDataServiceResponse();
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.CrossSectionSurveyActivity> crossSectionSurveyActivityList7 = fieldVisitDataServiceResponse6.CrossSectionSurveyActivity;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitDataServiceResponse fieldVisitDataServiceResponse9 = fieldVisitDataServiceResponse6.setIdentifier("");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary10 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        dischargeSummary10.Reviewer = "";
        java.time.Instant instant13 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        dischargeSummary10.MeasurementTime = instant13;
        fieldVisitDataServiceResponse6.ResponseTime = instant13;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.InspectionActivity inspectionActivity16 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.InspectionActivity();
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Inspection> inspectionList17 = inspectionActivity16.getInspections();
        java.lang.String str18 = inspectionActivity16.Party;
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Reading> readingList19 = inspectionActivity16.Readings;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.InspectionActivity inspectionActivity21 = inspectionActivity16.setParty("http");
        fieldVisitDataServiceResponse6.InspectionActivity = inspectionActivity16;
        fieldVisitDataServiceResponse3.InspectionActivity = inspectionActivity16;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.ControlConditionActivity controlConditionActivity24 = fieldVisitDataServiceResponse3.ControlConditionActivity;
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeActivity> dischargeActivityList25 = fieldVisitDataServiceResponse3.DischargeActivities;
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.Attachment> attachmentList26 = fieldVisitDataServiceResponse3.getAttachments();
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeActivity> dischargeActivityList27 = fieldVisitDataServiceResponse3.getDischargeActivities();
        org.junit.Assert.assertNull(crossSectionSurveyActivityList1);
        org.junit.Assert.assertNotNull(fieldVisitDataServiceResponse3);
        org.junit.Assert.assertNull(levelSurveyActivity4);
        org.junit.Assert.assertNull(controlConditionActivity5);
        org.junit.Assert.assertNull(crossSectionSurveyActivityList7);
        org.junit.Assert.assertNotNull(fieldVisitDataServiceResponse9);
        org.junit.Assert.assertNotNull(instant13);
        org.junit.Assert.assertNull(inspectionList17);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNull(readingList19);
        org.junit.Assert.assertNotNull(inspectionActivity21);
        org.junit.Assert.assertNull(controlConditionActivity24);
        org.junit.Assert.assertNull(dischargeActivityList25);
        org.junit.Assert.assertNull(attachmentList26);
        org.junit.Assert.assertNull(dischargeActivityList27);
    }

    @Test
    public void test53484() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest106.test53484");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.GetRoleFlattened getRoleFlattened0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.GetRoleFlattened();
        java.lang.String str1 = getRoleFlattened0.UniqueId;
        java.lang.String str2 = getRoleFlattened0.UniqueId;
        java.lang.Object obj3 = getRoleFlattened0.getResponseType();
        java.lang.String str4 = getRoleFlattened0.getUniqueId();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNotNull(obj3);
        org.junit.Assert.assertEquals(obj3.toString(), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning$RoleFlattened");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj3), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning$RoleFlattened");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj3), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning$RoleFlattened");
        org.junit.Assert.assertNull(str4);
    }

    @Test
    public void test53485() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest106.test53485");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedPropertyImportSummary observedPropertyImportSummary0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedPropertyImportSummary();
        observedPropertyImportSummary0.ErrorCount = 10;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedPropertyImportSummary observedPropertyImportSummary4 = observedPropertyImportSummary0.setSummaryReportText("");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObservedProperty[] importItemObservedPropertyArray5 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObservedProperty[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObservedProperty> importItemObservedPropertyList6 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObservedProperty>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObservedProperty>) importItemObservedPropertyList6, importItemObservedPropertyArray5);
        observedPropertyImportSummary0.ErrorImportItems = importItemObservedPropertyList6;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedPropertyImportSummary observedPropertyImportSummary10 = observedPropertyImportSummary0.setSuccessCount((java.lang.Integer) 10);
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObservedProperty> importItemObservedPropertyList11 = observedPropertyImportSummary10.getErrorImportItems();
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ImportItemObservedProperty> importItemObservedPropertyList12 = observedPropertyImportSummary10.getImportItems();
        java.lang.Integer int13 = observedPropertyImportSummary10.getExpectedCount();
        observedPropertyImportSummary10.UpdateCount = 2;
        org.junit.Assert.assertNotNull(observedPropertyImportSummary4);
        org.junit.Assert.assertNotNull(importItemObservedPropertyArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(observedPropertyImportSummary10);
        org.junit.Assert.assertNotNull(importItemObservedPropertyList11);
        org.junit.Assert.assertNull(importItemObservedPropertyList12);
        org.junit.Assert.assertNull(int13);
    }

    @Test
    public void test53486() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest106.test53486");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportObservations getExportObservations0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportObservations();
        java.util.List<java.lang.String> strList1 = getExportObservations0.getLabReportIds();
        java.lang.String str2 = getExportObservations0.DepthUnitCustomId;
        java.util.List<java.lang.String> strList3 = getExportObservations0.getSearch();
        java.util.List<java.lang.String> strList4 = getExportObservations0.LabResultLaboratoryIds;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeTransactionListServiceRequest metadataChangeTransactionListServiceRequest5 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.MetadataChangeTransactionListServiceRequest();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostRecurringReport postRecurringReport6 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostRecurringReport();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary dischargeSummary7 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.DischargeSummary();
        dischargeSummary7.Reviewer = "";
        java.time.Instant instant10 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        dischargeSummary7.MeasurementTime = instant10;
        postRecurringReport6.NextGenerationDate = instant10;
        java.time.Instant instant13 = postRecurringReport6.getNextGenerationDate();
        java.lang.String str14 = com.aquaticinformatics.aquarius.sdk.samples.serializers.InstantSerializer.format(instant13);
        metadataChangeTransactionListServiceRequest5.QueryFrom = instant13;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportObservations getExportObservations16 = getExportObservations0.setEndObservedTime(instant13);
        getExportObservations16.MaxNumericResultValue = 1.0d;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetExportObservations getExportObservations20 = getExportObservations16.setImportHistoryEventId("MaxInstant");
        java.time.Instant instant21 = getExportObservations16.StartResultTime;
        org.junit.Assert.assertNull(strList1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(strList3);
        org.junit.Assert.assertNull(strList4);
        org.junit.Assert.assertNotNull(instant10);
        org.junit.Assert.assertNotNull(instant13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "9999-12-31T23:59:59.999Z" + "'", str14, "9999-12-31T23:59:59.999Z");
        org.junit.Assert.assertNotNull(getExportObservations16);
        org.junit.Assert.assertNotNull(getExportObservations20);
        org.junit.Assert.assertNull(instant21);
    }

    @Test
    public void test53487() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest106.test53487");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutActivity putActivity0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutActivity();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity plannedActivity1 = null;
        putActivity0.PlannedActivity = plannedActivity1;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity postActivity3 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity();
        postActivity3.LoggerFileName = "hi!";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity plannedActivity6 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostActivity postActivity7 = postActivity3.setPlannedActivity(plannedActivity6);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag samplingContextTag8 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag();
        java.lang.String str9 = samplingContextTag8.getDescription();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes10 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag samplingContextTag11 = samplingContextTag8.setAuditAttributes(auditAttributes10);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag samplingContextTag13 = samplingContextTag11.setId("yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag samplingContextTag14 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag();
        java.lang.String str15 = samplingContextTag14.getDescription();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag samplingContextTag16 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag();
        java.lang.String str17 = samplingContextTag16.getDescription();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes18 = null;
        samplingContextTag16.AuditAttributes = auditAttributes18;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag samplingContextTag20 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag();
        java.lang.String str21 = samplingContextTag20.getDescription();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes22 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag samplingContextTag23 = samplingContextTag20.setAuditAttributes(auditAttributes22);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag[] samplingContextTagArray24 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag[] { samplingContextTag13, samplingContextTag14, samplingContextTag16, samplingContextTag23 };
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag> samplingContextTagList25 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag>) samplingContextTagList25, samplingContextTagArray24);
        postActivity3.SamplingContextTags = samplingContextTagList25;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutActivity putActivity28 = putActivity0.setSamplingContextTags((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingContextTag>) samplingContextTagList25);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.IndexConfiguration indexConfiguration29 = null;
        putActivity0.IndexConfiguration = indexConfiguration29;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricConfiguration metricConfiguration31 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricConfiguration();
        java.lang.String str32 = metricConfiguration31.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty observedProperty33 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty();
        observedProperty33.CasNumber = "MinDuration";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricConfiguration metricConfiguration36 = metricConfiguration31.setObservedProperty(observedProperty33);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ResultType resultType37 = observedProperty33.ResultType;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservedProperty postObservedProperty38 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservedProperty();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UnitGroup unitGroup39 = postObservedProperty38.UnitGroup;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity quantity40 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Unit unit41 = null;
        quantity40.Unit = unit41;
        postObservedProperty38.LowerLimit = quantity40;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity quantity44 = postObservedProperty38.LowerLimit;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Unit unit45 = quantity44.Unit;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty observedProperty46 = observedProperty33.setUpperLimit(quantity44);
        putActivity0.Depth = quantity44;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AuditAttributes auditAttributes48 = putActivity0.getAuditAttributes();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservedProperty postObservedProperty49 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostObservedProperty();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.UnitGroup unitGroup50 = postObservedProperty49.UnitGroup;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity quantity51 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Unit unit52 = null;
        quantity51.Unit = unit52;
        postObservedProperty49.LowerLimit = quantity51;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Quantity quantity55 = postObservedProperty49.LowerLimit;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Unit unit56 = quantity55.Unit;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutActivity putActivity57 = putActivity0.setDepth(quantity55);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Unit unit58 = quantity55.getUnit();
        org.junit.Assert.assertNotNull(postActivity7);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(samplingContextTag11);
        org.junit.Assert.assertNotNull(samplingContextTag13);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNotNull(samplingContextTag23);
        org.junit.Assert.assertNotNull(samplingContextTagArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(putActivity28);
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertNotNull(metricConfiguration36);
        org.junit.Assert.assertNull(resultType37);
        org.junit.Assert.assertNull(unitGroup39);
        org.junit.Assert.assertNotNull(quantity44);
        org.junit.Assert.assertNull(unit45);
        org.junit.Assert.assertNotNull(observedProperty46);
        org.junit.Assert.assertNull(auditAttributes48);
        org.junit.Assert.assertNull(unitGroup50);
        org.junit.Assert.assertNotNull(quantity55);
        org.junit.Assert.assertNull(unit56);
        org.junit.Assert.assertNotNull(putActivity57);
        org.junit.Assert.assertNull(unit58);
    }

    @Test
    public void test53488() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest106.test53488");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.EffectiveRatingCurveServiceRequest effectiveRatingCurveServiceRequest0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.EffectiveRatingCurveServiceRequest();
        effectiveRatingCurveServiceRequest0.RatingModelIdentifier = "";
        java.lang.String str3 = effectiveRatingCurveServiceRequest0.getRatingModelIdentifier();
        effectiveRatingCurveServiceRequest0.StartValue = 100.0d;
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
    }

    @Test
    public void test53489() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest106.test53489");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutUserV2 putUserV2_0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutUserV2();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutUserV2 putUserV2_2 = putUserV2_0.setCustomId("2021.4.62.0");
        java.lang.String str3 = putUserV2_0.getCustomId();
        putUserV2_0.Id = "2021.8.9990";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutUserV2 putUserV2_7 = putUserV2_0.setEmail("multipart/form-data; boundary=****4e5cd403-2823-4e43-9a3f-5d99e3f50f4e****");
        org.junit.Assert.assertNotNull(putUserV2_2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "2021.4.62.0" + "'", str3, "2021.4.62.0");
        org.junit.Assert.assertNotNull(putUserV2_7);
    }

    @Test
    public void test53490() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest106.test53490");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroup analyticalGroup0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroup();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupType analyticalGroupType1 = analyticalGroup0.getType();
        java.lang.String str2 = analyticalGroup0.Name;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem analyticalGroupItem3 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod4 = analyticalGroupItem3.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod5 = analyticalGroupItem3.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod6 = null;
        analyticalGroupItem3.AnalysisMethod = analysisMethod6;
        java.lang.String str8 = analyticalGroupItem3.getHoldingTime();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalysisMethod analysisMethod9 = analyticalGroupItem3.getAnalysisMethod();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem[] analyticalGroupItemArray10 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem[] { analyticalGroupItem3 };
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem> analyticalGroupItemList11 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem>) analyticalGroupItemList11, analyticalGroupItemArray10);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroup analyticalGroup13 = analyticalGroup0.setAnalyticalGroupItems((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupItem>) analyticalGroupItemList11);
        java.lang.String str14 = analyticalGroup13.Name;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AnalyticalGroupType analyticalGroupType15 = analyticalGroup13.Type;
        org.junit.Assert.assertNull(analyticalGroupType1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(analysisMethod4);
        org.junit.Assert.assertNull(analysisMethod5);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNull(analysisMethod9);
        org.junit.Assert.assertNotNull(analyticalGroupItemArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(analyticalGroup13);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNull(analyticalGroupType15);
    }

    @Test
    public void test53491() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest106.test53491");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostThresholdType postThresholdType0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PostThresholdType();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ThresholdBehavior thresholdBehavior1 = com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ThresholdBehavior.Unknown;
        postThresholdType0.CheckForBehavior = thresholdBehavior1;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ThresholdBehavior thresholdBehavior3 = postThresholdType0.CheckForBehavior;
        postThresholdType0.ReferenceValueCode = "http://MaxDurationhttp/json/reply/Integer";
        java.lang.Object obj6 = postThresholdType0.getResponseType();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ThresholdBehavior thresholdBehavior7 = postThresholdType0.getCheckForBehavior();
        org.junit.Assert.assertTrue("'" + thresholdBehavior1 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ThresholdBehavior.Unknown + "'", thresholdBehavior1.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ThresholdBehavior.Unknown));
        org.junit.Assert.assertTrue("'" + thresholdBehavior3 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ThresholdBehavior.Unknown + "'", thresholdBehavior3.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ThresholdBehavior.Unknown));
        org.junit.Assert.assertNotNull(obj6);
        org.junit.Assert.assertEquals(obj6.toString(), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning$ThresholdType");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj6), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning$ThresholdType");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj6), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning$ThresholdType");
        org.junit.Assert.assertTrue("'" + thresholdBehavior7 + "' != '" + com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ThresholdBehavior.Unknown + "'", thresholdBehavior7.equals(com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.ThresholdBehavior.Unknown));
    }

    @Test
    public void test53492() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest106.test53492");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricConfiguration metricConfiguration0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricConfiguration();
        java.lang.String str1 = metricConfiguration0.getId();
        metricConfiguration0.CustomId = "/AQUARIUS/Acquisition/v2";
        java.lang.Boolean boolean4 = metricConfiguration0.getUseScoreRanges();
        java.lang.String str5 = metricConfiguration0.Description;
        java.lang.Boolean boolean6 = metricConfiguration0.getIncludeChildren();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricConfiguration metricConfiguration7 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricConfiguration();
        java.lang.String str8 = metricConfiguration7.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty observedProperty9 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ObservedProperty();
        observedProperty9.CasNumber = "MinDuration";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricConfiguration metricConfiguration12 = metricConfiguration7.setObservedProperty(observedProperty9);
        java.lang.String str13 = metricConfiguration12.getDescription();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricConfiguration metricConfiguration15 = metricConfiguration12.setId("yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSSSSSZZZZZ");
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricRange> metricRangeList16 = metricConfiguration12.getMetricRanges();
        metricConfiguration12.CustomId = "****231224c4-98ce-4e30-bd65-1d25287c4abe****";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricConfiguration metricConfiguration19 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricConfiguration();
        java.lang.String str20 = metricConfiguration19.getId();
        metricConfiguration19.CustomId = "/AQUARIUS/Acquisition/v2";
        java.lang.Boolean boolean23 = metricConfiguration19.getUseScoreRanges();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Unit unit24 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricConfiguration metricConfiguration25 = metricConfiguration19.setUnit(unit24);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AggregationType aggregationType26 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AggregationType.SUM;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricConfiguration metricConfiguration27 = metricConfiguration19.setAggregationType(aggregationType26);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricConfiguration metricConfiguration28 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricConfiguration();
        java.lang.String str29 = metricConfiguration28.getId();
        metricConfiguration28.CustomId = "/AQUARIUS/Acquisition/v2";
        java.lang.Boolean boolean32 = metricConfiguration28.getUseScoreRanges();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Unit unit33 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricConfiguration metricConfiguration34 = metricConfiguration28.setUnit(unit33);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AggregationType aggregationType35 = com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AggregationType.SUM;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricConfiguration metricConfiguration36 = metricConfiguration28.setAggregationType(aggregationType35);
        metricConfiguration19.AggregationType = aggregationType35;
        metricConfiguration12.AggregationType = aggregationType35;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.MetricConfiguration metricConfiguration39 = metricConfiguration0.setAggregationType(aggregationType35);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(boolean4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(boolean6);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(metricConfiguration12);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNotNull(metricConfiguration15);
        org.junit.Assert.assertNull(metricRangeList16);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNull(boolean23);
        org.junit.Assert.assertNotNull(metricConfiguration25);
        org.junit.Assert.assertTrue("'" + aggregationType26 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AggregationType.SUM + "'", aggregationType26.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AggregationType.SUM));
        org.junit.Assert.assertNotNull(metricConfiguration27);
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertNull(boolean32);
        org.junit.Assert.assertNotNull(metricConfiguration34);
        org.junit.Assert.assertTrue("'" + aggregationType35 + "' != '" + com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AggregationType.SUM + "'", aggregationType35.equals(com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.AggregationType.SUM));
        org.junit.Assert.assertNotNull(metricConfiguration36);
        org.junit.Assert.assertNotNull(metricConfiguration39);
    }

    @Test
    public void test53493() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest106.test53493");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostSamplingLocation postSamplingLocation0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostSamplingLocation();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostSamplingLocation postSamplingLocation1 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostSamplingLocation();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple standardSimple2 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple();
        com.aquaticinformatics.aquarius.sdk.samples.Interval interval3 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple standardSimple4 = standardSimple2.setApplicabilityRange(interval3);
        java.lang.String str5 = standardSimple2.getCustomId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple standardSimple6 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple();
        com.aquaticinformatics.aquarius.sdk.samples.Interval interval7 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple standardSimple8 = standardSimple6.setApplicabilityRange(interval7);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple standardSimple10 = standardSimple6.setActive((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple standardSimple11 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple standardSimple12 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple();
        com.aquaticinformatics.aquarius.sdk.samples.Interval interval13 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple standardSimple14 = standardSimple12.setApplicabilityRange(interval13);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple standardSimple16 = standardSimple12.setActive((java.lang.Boolean) false);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple standardSimple17 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple();
        com.aquaticinformatics.aquarius.sdk.samples.Interval interval18 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple standardSimple19 = standardSimple17.setApplicabilityRange(interval18);
        java.lang.String str20 = standardSimple19.CustomId;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple standardSimple21 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple standardSimple22 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple standardSimple23 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple();
        com.aquaticinformatics.aquarius.sdk.samples.Interval interval24 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple standardSimple25 = standardSimple23.setApplicabilityRange(interval24);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple standardSimple26 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple();
        com.aquaticinformatics.aquarius.sdk.samples.Interval interval27 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple standardSimple28 = standardSimple26.setApplicabilityRange(interval27);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple[] standardSimpleArray29 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple[] { standardSimple2, standardSimple6, standardSimple11, standardSimple12, standardSimple19, standardSimple21, standardSimple22, standardSimple25, standardSimple26 };
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple> standardSimpleList30 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple>();
        boolean boolean31 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.StandardSimple>) standardSimpleList30, standardSimpleArray29);
        postSamplingLocation1.Standards = standardSimpleList30;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutFieldVisit putFieldVisit33 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutFieldVisit();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity[] plannedActivityArray34 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity[] {};
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity> plannedActivityList35 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity>();
        boolean boolean36 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PlannedActivity>) plannedActivityList35, plannedActivityArray34);
        putFieldVisit33.PlannedActivities = plannedActivityList35;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment38 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment();
        java.lang.String str39 = domainObjectAttachment38.getId();
        java.lang.String str40 = domainObjectAttachment38.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Attachment attachment41 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment42 = domainObjectAttachment38.setAttachment(attachment41);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment43 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment();
        java.lang.String str44 = domainObjectAttachment43.getId();
        java.lang.String str45 = domainObjectAttachment43.getId();
        domainObjectAttachment43.Id = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSSZZZZZ";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment49 = domainObjectAttachment43.setId("hi!");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment50 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment();
        java.lang.String str51 = domainObjectAttachment50.getId();
        java.lang.String str52 = domainObjectAttachment50.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Attachment attachment53 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment54 = domainObjectAttachment50.setAttachment(attachment53);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment55 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment();
        java.lang.String str56 = domainObjectAttachment55.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment57 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment();
        java.lang.String str58 = domainObjectAttachment57.getId();
        java.lang.String str59 = domainObjectAttachment57.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Attachment attachment60 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment61 = domainObjectAttachment57.setAttachment(attachment60);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment domainObjectAttachment62 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment();
        java.lang.String str63 = domainObjectAttachment62.getId();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment[] domainObjectAttachmentArray64 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment[] { domainObjectAttachment38, domainObjectAttachment43, domainObjectAttachment50, domainObjectAttachment55, domainObjectAttachment57, domainObjectAttachment62 };
        java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment> domainObjectAttachmentList65 = new java.util.ArrayList<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment>();
        boolean boolean66 = java.util.Collections.addAll((java.util.Collection<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment>) domainObjectAttachmentList65, domainObjectAttachmentArray64);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutFieldVisit putFieldVisit67 = putFieldVisit33.setAttachments((java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment>) domainObjectAttachmentList65);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.SamplingPlan samplingPlan68 = putFieldVisit33.getSamplingPlan();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.FieldTripSimple fieldTripSimple69 = putFieldVisit33.getFieldTrip();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Schedule schedule70 = putFieldVisit33.Schedule;
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.DomainObjectAttachment> domainObjectAttachmentList71 = putFieldVisit33.Attachments;
        postSamplingLocation1.Attachments = domainObjectAttachmentList71;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostSamplingLocation postSamplingLocation73 = postSamplingLocation0.setAttachments(domainObjectAttachmentList71);
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.LocationType locationType74 = postSamplingLocation73.getType();
        java.util.List<com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.ExtendedAttribute> extendedAttributeList75 = postSamplingLocation73.ExtendedAttributes;
        org.junit.Assert.assertNotNull(standardSimple4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(standardSimple8);
        org.junit.Assert.assertNotNull(standardSimple10);
        org.junit.Assert.assertNotNull(standardSimple14);
        org.junit.Assert.assertNotNull(standardSimple16);
        org.junit.Assert.assertNotNull(standardSimple19);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNotNull(standardSimple25);
        org.junit.Assert.assertNotNull(standardSimple28);
        org.junit.Assert.assertNotNull(standardSimpleArray29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(plannedActivityArray34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertNull(str40);
        org.junit.Assert.assertNotNull(domainObjectAttachment42);
        org.junit.Assert.assertNull(str44);
        org.junit.Assert.assertNull(str45);
        org.junit.Assert.assertNotNull(domainObjectAttachment49);
        org.junit.Assert.assertNull(str51);
        org.junit.Assert.assertNull(str52);
        org.junit.Assert.assertNotNull(domainObjectAttachment54);
        org.junit.Assert.assertNull(str56);
        org.junit.Assert.assertNull(str58);
        org.junit.Assert.assertNull(str59);
        org.junit.Assert.assertNotNull(domainObjectAttachment61);
        org.junit.Assert.assertNull(str63);
        org.junit.Assert.assertNotNull(domainObjectAttachmentArray64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertNotNull(putFieldVisit67);
        org.junit.Assert.assertNull(samplingPlan68);
        org.junit.Assert.assertNull(fieldTripSimple69);
        org.junit.Assert.assertNull(schedule70);
        org.junit.Assert.assertNotNull(domainObjectAttachmentList71);
        org.junit.Assert.assertNotNull(postSamplingLocation73);
        org.junit.Assert.assertNull(locationType74);
        org.junit.Assert.assertNull(extendedAttributeList75);
    }

    @Test
    public void test53494() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest106.test53494");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetSpreadsheetTemplateHistory getSpreadsheetTemplateHistory0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetSpreadsheetTemplateHistory();
        java.lang.Object obj1 = getSpreadsheetTemplateHistory0.getResponseType();
        java.lang.String str2 = getSpreadsheetTemplateHistory0.getId();
        java.lang.String str3 = getSpreadsheetTemplateHistory0.Id;
        java.lang.String str4 = getSpreadsheetTemplateHistory0.Id;
        java.lang.String str5 = getSpreadsheetTemplateHistory0.getId();
        org.junit.Assert.assertNotNull(obj1);
        org.junit.Assert.assertEquals(obj1.toString(), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$SearchResultAuditHistory");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj1), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$SearchResultAuditHistory");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj1), "class com.aquaticinformatics.aquarius.sdk.samples.ServiceModel$SearchResultAuditHistory");
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(str5);
    }

    @Test
    public void test53495() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest106.test53495");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLabReport postLabReport0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLabReport();
        postLabReport0.Id = "-PT87591240H";
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.Laboratory laboratory3 = null;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PostLabReport postLabReport4 = postLabReport0.setLaboratory(laboratory3);
        org.junit.Assert.assertNotNull(postLabReport4);
    }

    @Test
    public void test53496() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest106.test53496");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetChartDataV2 getChartDataV2_0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetChartDataV2();
        java.util.List<java.lang.String> strList1 = getChartDataV2_0.getProjectIds();
        java.util.List<java.lang.String> strList2 = getChartDataV2_0.SamplingContextTagIds;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RecurringReport recurringReport3 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RecurringReport();
        recurringReport3.JsonTemplate = "2021.4.62.0";
        java.time.Instant instant6 = recurringReport3.getNextGenerationDate();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisit fieldVisit7 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisit();
        fieldVisit7.Weather = "/AQUARIUS/Acquisition/v2";
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.LocationDatumPeriod locationDatumPeriod10 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.LocationDatumPeriod();
        java.time.Instant instant11 = locationDatumPeriod10.AppliedTimeUtc;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.LocationDatumPeriod locationDatumPeriod13 = locationDatumPeriod10.setAppliedByUser("/AQUARIUS/Acquisition/v2://9999-12-31T23:59:59.999Z");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDescription timeSeriesDescription14 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDescription();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest15 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest();
        java.lang.Object obj16 = timeAlignedDataServiceRequest15.getResponseType();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse17 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse();
        java.time.Instant instant18 = com.aquaticinformatics.aquarius.sdk.timeseries.serializers.InstantDeserializer.MaxConcreteValue;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.LocationDescriptionListServiceResponse locationDescriptionListServiceResponse19 = locationDescriptionListServiceResponse17.setNextToken(instant18);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeAlignedDataServiceRequest timeAlignedDataServiceRequest20 = timeAlignedDataServiceRequest15.setQueryFrom(instant18);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.TimeSeriesDescription timeSeriesDescription21 = timeSeriesDescription14.setRawStartTime(instant18);
        locationDatumPeriod10.ValidFrom = instant18;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.FieldVisitDescription fieldVisitDescription23 = fieldVisit7.setLastMatchedTime(instant18);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.RecurringReport recurringReport24 = recurringReport3.setNextGenerationDate(instant18);
        java.time.Instant instant25 = recurringReport24.getNextGenerationDate();
        getChartDataV2_0.StartResultTime = instant25;
        org.junit.Assert.assertNull(strList1);
        org.junit.Assert.assertNull(strList2);
        org.junit.Assert.assertNull(instant6);
        org.junit.Assert.assertNull(instant11);
        org.junit.Assert.assertNotNull(locationDatumPeriod13);
        org.junit.Assert.assertNotNull(obj16);
        org.junit.Assert.assertEquals(obj16.toString(), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj16), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj16), "class com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish$TimeAlignedDataServiceResponse");
        org.junit.Assert.assertNotNull(instant18);
        org.junit.Assert.assertNotNull(locationDescriptionListServiceResponse19);
        org.junit.Assert.assertNotNull(timeAlignedDataServiceRequest20);
        org.junit.Assert.assertNotNull(timeSeriesDescription21);
        org.junit.Assert.assertNotNull(fieldVisitDescription23);
        org.junit.Assert.assertNotNull(recurringReport24);
        org.junit.Assert.assertNotNull(instant25);
    }

    @Test
    public void test53497() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest106.test53497");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutUnit putUnit0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutUnit();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.UnitBase unitBase2 = putUnit0.setSymbol("multipart/form-data; boundary=****46b5d5e5-73d1-43c8-8704-4a7bbf2d8314****");
        java.lang.String str3 = putUnit0.getUniqueId();
        putUnit0.UniqueId = "multipart/form-data; boundary=****1844e1de-1bae-48cf-aab8-ac5571d6efc7****";
        org.junit.Assert.assertNotNull(unitBase2);
        org.junit.Assert.assertNull(str3);
    }

    @Test
    public void test53498() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest106.test53498");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetResultStatuseHistory getResultStatuseHistory0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetResultStatuseHistory();
        java.lang.String str1 = getResultStatuseHistory0.Id;
        getResultStatuseHistory0.Id = "http://MaxDurationhttp/json/reply/Double";
        org.junit.Assert.assertNull(str1);
    }

    @Test
    public void test53499() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest106.test53499");
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutBulkEditResultGradesV2 putBulkEditResultGradesV2_0 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutBulkEditResultGradesV2();
        java.lang.Double double1 = putBulkEditResultGradesV2_0.DepthValue;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2 getObservationsV2_2 = new com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.GetObservationsV2();
        java.lang.String[] strArray4 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList5 = new java.util.ArrayList<java.lang.String>();
        boolean boolean6 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList5, strArray4);
        getObservationsV2_2.SpecimenIds = strList5;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags8 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray12 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList13 = new java.util.ArrayList<java.lang.String>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList13, strArray12);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags15 = putLocationTags8.setTagUniqueIds(strList13);
        getObservationsV2_2.QualityControlTypes = strList13;
        java.util.List<java.lang.String> strList17 = getObservationsV2_2.getAnalyticalGroupIds();
        java.util.List<java.lang.String> strList18 = getObservationsV2_2.DataClassifications;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.FieldResultType fieldResultType19 = getObservationsV2_2.FieldResultType;
        java.time.Instant instant20 = getObservationsV2_2.getEndObservedTime();
        java.lang.String str21 = getObservationsV2_2.DepthUnitCustomId;
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags22 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags();
        java.lang.String[] strArray26 = new java.lang.String[] { "/AQUARIUS/Acquisition/v2", "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList27 = new java.util.ArrayList<java.lang.String>();
        boolean boolean28 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList27, strArray26);
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Provisioning.PutLocationTags putLocationTags29 = putLocationTags22.setTagUniqueIds(strList27);
        java.util.ArrayList<java.lang.String> strList30 = putLocationTags29.TagUniqueIds;
        getObservationsV2_2.ProjectIds = strList30;
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutBulkEditResultGradesV2 putBulkEditResultGradesV2_32 = putBulkEditResultGradesV2_0.setSearch((java.util.List<java.lang.String>) strList30);
        java.util.List<java.lang.String> strList33 = putBulkEditResultGradesV2_0.LabResultLabAnalysisMethodIds;
        java.lang.Double double34 = putBulkEditResultGradesV2_0.getMinNumericResultValue();
        com.aquaticinformatics.aquarius.sdk.samples.ServiceModel.PutBulkEditResultGradesV2 putBulkEditResultGradesV2_36 = putBulkEditResultGradesV2_0.setFieldVisitId("ZZZZZ");
        java.lang.String str37 = putBulkEditResultGradesV2_0.getFieldVisitId();
        java.util.List<java.lang.String> strList38 = putBulkEditResultGradesV2_0.CollectionMethodIds;
        java.util.List<java.lang.String> strList39 = putBulkEditResultGradesV2_0.getDataClassifications();
        org.junit.Assert.assertNull(double1);
        org.junit.Assert.assertNotNull(strArray4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(putLocationTags15);
        org.junit.Assert.assertNull(strList17);
        org.junit.Assert.assertNull(strList18);
        org.junit.Assert.assertNull(fieldResultType19);
        org.junit.Assert.assertNull(instant20);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(putLocationTags29);
        org.junit.Assert.assertNotNull(strList30);
        org.junit.Assert.assertNotNull(putBulkEditResultGradesV2_32);
        org.junit.Assert.assertNull(strList33);
        org.junit.Assert.assertNull(double34);
        org.junit.Assert.assertNotNull(putBulkEditResultGradesV2_36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "ZZZZZ" + "'", str37, "ZZZZZ");
        org.junit.Assert.assertNull(strList38);
        org.junit.Assert.assertNull(strList39);
    }

    @Test
    public void test53500() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest106.test53500");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RoundServiceRequest roundServiceRequest0 = new com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RoundServiceRequest();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RoundServiceRequest roundServiceRequest2 = roundServiceRequest0.setUnitId("multipart/form-data; boundary=****7eff1774-b6b0-471a-961c-156c64359366****");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RoundServiceRequest roundServiceRequest4 = roundServiceRequest0.setMethodCode("****ee0ec537-fde4-45ee-9c35-68c37cf65c1c****");
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RoundServiceRequest roundServiceRequest6 = roundServiceRequest4.setUnitId("multipart/form-data; boundary=****6b8051d4-caf2-4095-9f11-faa36b95fc28****");
        java.lang.String str7 = roundServiceRequest4.getMethodCode();
        java.util.ArrayList<java.lang.Double> doubleList8 = roundServiceRequest4.getData();
        com.aquaticinformatics.aquarius.sdk.timeseries.servicemodels.Publish.RoundServiceRequest roundServiceRequest10 = roundServiceRequest4.setValueForNaN("");
        org.junit.Assert.assertNotNull(roundServiceRequest2);
        org.junit.Assert.assertNotNull(roundServiceRequest4);
        org.junit.Assert.assertNotNull(roundServiceRequest6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "****ee0ec537-fde4-45ee-9c35-68c37cf65c1c****" + "'", str7, "****ee0ec537-fde4-45ee-9c35-68c37cf65c1c****");
        org.junit.Assert.assertNull(doubleList8);
        org.junit.Assert.assertNotNull(roundServiceRequest10);
    }
}

